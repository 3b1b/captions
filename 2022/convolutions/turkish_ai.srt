1
00:00:00,000 --> 00:00:04,480
Size iki farklı sayı listesi veya belki iki farklı işlev verdiğimi ve sizden yeni bir sayı

2
00:00:04,480 --> 00:00:08,400
listesi elde etmek için bu iki listeyi birleştirmenin veya yeni bir işlev elde etmek için

3
00:00:08,400 --> 00:00:14,000
iki işlevi birleştirmenin tüm yollarını düşünmenizi istediğimi varsayalım. . Belki akla gelen basit bir yol,

4
00:00:14,000 --> 00:00:18,640
bunları terim terim bir araya getirmektir. İşlevlerde olduğu gibi, karşılık gelen tüm

5
00:00:18,640 --> 00:00:24,000
çıktıları da ekleyebilirsiniz. Benzer şekilde, iki listeyi terim terimle çarpabilir ve aynı

6
00:00:24,000 --> 00:00:28,720
şeyi işlevler için de yapabilirsiniz. Ancak her ikisi kadar temel olan ancak çok

7
00:00:28,720 --> 00:00:33,840
daha az tartışılan, evrişim olarak bilinen başka bir tür kombinasyon daha var.

8
00:00:33,840 --> 00:00:38,240
Ancak önceki iki durumdan farklı olarak bu, sayılara yapabileceğiniz bir işlemden miras kalan

9
00:00:38,240 --> 00:00:43,360
bir şey değil. Sayı listeleri veya birleştirme işlevleri bağlamında gerçekten yeni

10
00:00:43,360 --> 00:00:49,280
bir şey. Her yerde karşımıza çıkıyorlar, görüntü işlemede her yerde mevcutlar,

11
00:00:49,280 --> 00:00:53,760
olasılık teorisinin temel yapılarından biri, diferansiyel denklemlerin çözümünde çok kullanılıyorlar ve

12
00:00:53,760 --> 00:00:58,240
onu neredeyse kesinlikle görmüş olduğunuz bir bağlam var, olmasa da. bu

13
00:00:58,240 --> 00:01:03,440
isimle iki polinomun çarpılmasıdır. Görsel açıklamalar işinde çalışan biri olarak bu özellikle

14
00:01:03,440 --> 00:01:08,800
harika bir konudur, çünkü kalıplaşmış tanım tek başına ve bağlamdan bağımsız olarak biraz

15
00:01:08,800 --> 00:01:14,080
korkutucu görünebilir, ancak ne söylediğini gerçekten açmak için zaman ayırırsak ve bundan önce

16
00:01:14,080 --> 00:01:18,800
gerçekten nedenini motive edersek böyle bir şey istersiniz, inanılmaz güzel bir operasyon.

17
00:01:18,800 --> 00:01:22,880
Ve itiraf etmeliyim ki, bu proje için görselleri bir araya getirirken aslında küçük bir şeyler

18
00:01:22,880 --> 00:01:26,960
öğrendim. İki farklı fonksiyonun evrilmesi durumunda, bunun ne anlama gelebileceğini hayal edebileceğiniz

19
00:01:26,960 --> 00:01:30,720
farklı yollar düşünmeye çalışıyordum ve bunlardan biriyle normal dağılımların neden bu rolü

20
00:01:30,720 --> 00:01:35,840
oynadığına dair biraz aha anı yaşadım. bir fonksiyon için neden bu kadar

21
00:01:35,840 --> 00:01:40,320
doğal bir şekil olduğunu olasılık dahilinde yapıyorlar. Ama kendimi aşıyorum, bunun için pek

22
00:01:40,320 --> 00:01:44,800
çok kurulum var. Bu videoda asıl odak noktamız ayrık durum üzerinde olacak ve

23
00:01:44,800 --> 00:01:49,920
özellikle bunları hesaplamak için çok beklenmedik ama çok akıllı bir algoritma geliştirmek olacak.

24
00:01:49,920 --> 00:01:54,400
Devam eden vakaya ilişkin tartışmayı ikinci bir kısma aktaracağım.

25
00:01:57,840 --> 00:02:03,120
Görüntü işleme örnekleriyle başlamak çok cazip çünkü görsel olarak en ilgi çekici

26
00:02:03,120 --> 00:02:06,880
olanlar bunlar, ancak görüntü işleme durumunu genel olarak evrişimleri daha az

27
00:02:06,880 --> 00:02:11,760
temsil eden birkaç parça titizlik var, o yüzden bunun yerine işleri olasılıklarla

28
00:02:11,760 --> 00:02:15,520
başlatalım, ve özellikle buradaki herkesin hayatının bir noktasında düşündüğünden emin olduğum

29
00:02:15,520 --> 00:02:20,320
en basit örneklerden biri; bir çift zar atmak ve farklı toplamları görme

30
00:02:20,320 --> 00:02:25,600
şansını hesaplamak. Ve diyebilirsiniz ki sorun değil, sorun değil. İki zarınızın her birinin

31
00:02:25,600 --> 00:02:31,600
altı farklı olası sonucu vardır, bu da bize toplam 36 farklı olası sonuç

32
00:02:31,600 --> 00:02:35,600
çifti verir ve eğer hepsine bakarsak, belirli bir toplamın kaç çift olduğunu sayabiliriz.

33
00:02:36,240 --> 00:02:41,120
Ve tüm çiftleri bu şekilde bir ızgaraya yerleştirdiğimizde oldukça hoş olan şey, sabit toplamı

34
00:02:41,120 --> 00:02:47,040
olan tüm çiftlerin bu farklı köşegenlerden biri boyunca görülebilmesidir. Yani sadece bu köşegenlerin

35
00:02:47,040 --> 00:02:51,920
her birinde kaç tane bulunduğunu saymak size belirli bir toplamı görme olasılığınızın ne kadar olduğunu söyleyecektir.

36
00:02:52,880 --> 00:02:57,760
Ben de çok iyi, çok iyi derdim ama aynı soruyu görselleştirmenin başka yollarını

37
00:02:57,760 --> 00:03:03,120
düşünebiliyor musun? Belirli bir toplamı olan tüm farklı çiftleri düşünmek için aklınıza gelebilecek başka görüntüler var

38
00:03:03,120 --> 00:03:08,800
mı? Belki biriniz elini kaldırır ve evet bende bir tane var der. Diyelim ki bu

39
00:03:08,800 --> 00:03:14,560
iki farklı olasılık kümesini arka arkaya gözünüzde canlandırıyorsunuz, ancak ikinci sırayı değiştiriyorsunuz. Böylece toplamı

40
00:03:14,560 --> 00:03:20,160
yediye ulaşan tüm farklı çiftler dikey olarak bu şekilde sıralanır. Ve eğer alt

41
00:03:20,160 --> 00:03:24,880
sırayı tamamen sağa kaydırırsak, toplamı iki olan benzersiz çift, yani yılanın gözleri

42
00:03:24,880 --> 00:03:29,680
aynı hizada olur. Ve eğer bunu bir birim sağa doğru kaydırırsam, hizalanan çiftler

43
00:03:29,680 --> 00:03:35,440
toplamı üç olan iki farklı çift olur. Ve genel olarak, bu alt dizinin farklı ofset

44
00:03:35,440 --> 00:03:40,320
değerleri, ki hatırladığım kadarıyla ilk önce ters çevirmem gerekiyordu, belirli bir toplamı olan tüm farklı çiftleri

45
00:03:40,320 --> 00:03:48,800
ortaya çıkarıyor. Olasılık sorularına gelince, bu hala pek ilgi çekici değil çünkü

46
00:03:48,800 --> 00:03:53,120
yaptığımız tek şey bu kategorilerin her birinde kaç tane sonuç olduğunu saymak.

47
00:03:53,120 --> 00:03:57,280
Ancak bu, bu yüzlerin her birinin ortaya çıkma şansının eşit olduğu yönündeki örtülü varsayımdan

48
00:03:57,280 --> 00:04:02,240
kaynaklanmaktadır. Peki ya sana tekdüze olmayan özel bir zar setim olduğunu söylesem? Belki

49
00:04:02,240 --> 00:04:06,800
mavi zarın her yüzün gelme olasılığını açıklayan kendi sayıları vardır ve kırmızı zarın

50
00:04:06,800 --> 00:04:11,920
da kendine özgü farklı sayılar dizisi vardır. Bu durumda, diyelim ki iki

51
00:04:11,920 --> 00:04:17,360
gelme olasılığını hesaplamak istiyorsanız, mavi zarın bir olma olasılığını kırmızı

52
00:04:17,360 --> 00:04:22,000
zarın bir olma olasılığını çarparsınız. Ve üçü görme şansı için, mümkün

53
00:04:22,000 --> 00:04:26,880
olan yerlerde iki ayrı çifte bakarsınız ve karşılık gelen olasılıkları tekrar çarparsınız

54
00:04:26,880 --> 00:04:32,240
ve sonra bu iki çarpımı toplarsınız. Benzer şekilde, dörtlü görme

55
00:04:32,240 --> 00:04:36,320
şansı da üç farklı olasılık çiftini çarparak hepsini toplamayı içerir.

56
00:04:36,320 --> 00:04:41,360
Ve bazı formüller oluşturma ruhuna uygun olarak, bu üst olasılıklara a1, a2, a3 vb.,

57
00:04:41,360 --> 00:04:48,000
alttaki olasılıklara ise b1, b2, b3 vb. adını verelim. Ve genel olarak, bu

58
00:04:48,000 --> 00:04:52,080
süreç, iki farklı sayı dizisini alıp ikincisini ters çevirdiğimiz ve daha sonra bunları

59
00:04:52,080 --> 00:04:56,160
çeşitli farklı ofset değerlerinde sıraladığımız, bir grup ikili çarpım alıp bunları topladığımız

60
00:04:56,160 --> 00:05:00,960
bu süreç, bu işlemlerden biridir. Evrişimin ne olduğu hakkında düşünmenin temel yolları.

61
00:05:00,960 --> 00:05:08,960
Bunu biraz daha net bir şekilde açıklamak gerekirse, bu süreç boyunca iki, üç, dört

62
00:05:08,960 --> 00:05:13,840
ve 12&#39;ye kadar görme olasılıkları ürettik ve bunları bir değer listesi, a ve

63
00:05:13,840 --> 00:05:20,080
diğerini karıştırarak elde ettik. değerler listesi, b. Dilde, bu iki dizinin evrişiminin bize bu

64
00:05:20,080 --> 00:05:25,600
yeni diziyi, her biri ikili çarpımların toplamı gibi görünen 11 değerden oluşan

65
00:05:25,600 --> 00:05:30,160
yeni diziyi verdiğini söylerdik. İsterseniz, aynı işlemi düşünmenin başka bir yolu da,

66
00:05:30,160 --> 00:05:36,240
önce tüm ikili çarpımların bir tablosunu oluşturmak ve ardından tüm bu köşegenleri

67
00:05:36,240 --> 00:05:41,120
toplamaktır. Yine, bu, bize 11 sayıdan oluşan yeni bir dizi elde etmek için bu iki sayı dizisini

68
00:05:41,120 --> 00:05:46,400
karıştırmanın bir yoludur. Bu, sürgülü pencerelerin düşündüğü işlemin aynısı, sadece başka bir bakış açısı.

69
00:05:46,960 --> 00:05:51,280
Üzerine küçük bir notasyon koyarak, bunun nasıl yazıldığını görebilirsiniz. Bu küçük yıldız işaretiyle

70
00:05:51,280 --> 00:05:57,200
gösterilen a ve b&#39;nin evrişimi yeni bir listedir ve bu listenin n&#39;inci elemanı bir toplama benzer

71
00:05:57,200 --> 00:06:03,440
ve bu toplam, i ve j gibi tüm farklı endeks çiftlerinin üzerinden geçer, böylece toplamı bu

72
00:06:03,440 --> 00:06:09,440
endeksler n&#39;ye eşittir. Biraz ağız dolusu olacak ama örneğin, eğer n 6 ise, üzerinde duracağımız çiftler 1 ve 5,

73
00:06:09,440 --> 00:06:15,680
2 ve 4, 3 ve 3, 4 ve 2, 5 ve 1, yani toplamı toplayan tüm farklı çiftlerdir. 6&#39;ya kadar.

74
00:06:16,400 --> 00:06:20,640
Ama dürüst olmak gerekirse, nasıl yazarsanız yazın, süreç için kafanızda tutabileceğiniz görselin

75
00:06:20,640 --> 00:06:26,320
önemi açısından notasyon ikinci plandadır. Burada belki çok basit bir örnek yapmak faydalı olabilir; size

76
00:06:26,320 --> 00:06:32,000
1, 2, 3 listesinin 4, 5, 6 listesiyle evrişiminin ne olduğunu sorabilirim. Bu listelerin her

77
00:06:32,000 --> 00:06:36,160
ikisini de alıp, ikincisinin etrafında dolaştığını ve ardından kapağından başlayarak tamamen sola

78
00:06:36,160 --> 00:06:41,200
doğru başladığını hayal edebilirsiniz. Daha sonra hizalanan değer çifti 1 ve 4&#39;tür, bunları birbiriyle

79
00:06:41,200 --> 00:06:45,680
çarparız ve bu bize çıktımızın ilk terimini verir. Alt diziyi bir birim sağa kaydırın, hizalanan

80
00:06:45,680 --> 00:06:51,840
çiftler 1 ve 5 ve 2 ve 4&#39;tür, bu çiftleri çarpın, toplayın ve bu bize çıktımızdaki

81
00:06:51,840 --> 00:06:57,600
bir sonraki girdi olan 13&#39;ü verir. Bir kez daha yana kaydırırsak 1 çarpı 6, artı 2

82
00:06:57,600 --> 00:07:04,400
çarpı 5, artı 3 çarpı 4, yani 28 olur. Bir slayt daha, ve 2 çarpı 6 artı 3

83
00:07:04,400 --> 00:07:10,000
çarpı 5 elde ederiz, bu da bize 27 verir ve son olarak son terim 3 çarpı 6 gibi görünecektir.

84
00:07:10,560 --> 00:07:14,080
İsterseniz en sevdiğiniz programlama dilini ve çeşitli sayısal işlemleri

85
00:07:14,080 --> 00:07:18,640
içeren favori kütüphanenizi açıp size yalan söylemediğimi doğrulayabilirsiniz.

86
00:07:18,640 --> 00:07:24,320
Eğer 1, 2, 3&#39;ün 4, 5, 6&#39;ya karşı evrişimini alırsanız, gerçekten elde edeceğiniz sonuç budur.

87
00:07:24,880 --> 00:07:29,200
Bunun doğal ve arzu edilen bir işlem olduğu, olasılık dağılımlarına eklenen bir durum gördük

88
00:07:29,200 --> 00:07:34,640
ve diğer bir yaygın örnek de hareketli ortalama olabilir. Uzun bir sayı listeniz olduğunu

89
00:07:34,640 --> 00:07:39,920
ve toplamı 1 olan daha küçük bir sayı listesi aldığınızı hayal edin. Bu durumda elimde 5

90
00:07:39,920 --> 00:07:45,280
değerden oluşan küçük bir liste var ve bunların hepsi 1 5&#39;e eşit. Daha sonra, bu kayan pencere

91
00:07:45,280 --> 00:07:49,760
evrişim işlemini yaparsak ve gözlerimizi kapatırsak ve en başında olanları halının altına süpürürsek,

92
00:07:50,560 --> 00:07:55,120
daha küçük değer listemiz büyük olanla tamamen örtüştüğünde, bu buradaki her terimin ne

93
00:07:55,680 --> 00:08:01,120
olduğunu düşünün. evrişim gerçekten şu anlama gelir. Her yinelemede yaptığınız şey,

94
00:08:01,120 --> 00:08:06,400
verilerinizdeki değerlerin her birini 1/5 ile çarpmak ve hepsini toplamaktır,

95
00:08:06,400 --> 00:08:12,080
yani bu küçük penceredeki verilerinizin ortalamasını alıyorsunuz. Genel olarak, süreç size

96
00:08:12,080 --> 00:08:16,800
orijinal verinin yumuşatılmış bir versiyonunu verir ve bunu farklı küçük bir sayı listesiyle başlayarak

97
00:08:16,800 --> 00:08:21,280
değiştirebilirsiniz ve bu küçük listenin toplamı 1&#39;e ulaştığı sürece, onu yine de hareketli bir

98
00:08:21,280 --> 00:08:25,840
sayı olarak yorumlayabilirsiniz. ortalama. Burada gösterilen örnekte, hareketli ortalama, merkezi değere daha

99
00:08:25,840 --> 00:08:30,720
fazla ağırlık veriyor olacaktır. Bu aynı zamanda verilerin düzeltilmiş bir versiyonuyla da sonuçlanır.

100
00:08:33,200 --> 00:08:37,840
Bunun iki boyutlu bir benzerini yaparsanız, belirli bir görüntüyü bulanıklaştırmak için eğlenceli bir algoritma

101
00:08:37,840 --> 00:08:43,120
elde edersiniz. Ve birazdan göstereceğim animasyonların, MIT&#39;deki Julia Laboratuvarı&#39;nda, görüntü işleme birimi içeren

102
00:08:43,120 --> 00:08:48,160
belirli bir OpenCourseWare sınıfı için yaptığım bir dizi dersin bir parçası olarak

103
00:08:48,160 --> 00:08:52,320
orijinal olarak yaptığım bir şeyden değiştirildiğini söylemeliyim. Tüm bunların arkasındaki koda dalmak

104
00:08:52,320 --> 00:08:56,640
için biraz daha çalıştık, eğer merak ediyorsanız size bazı bağlantılar bırakacağım. Ancak

105
00:08:56,640 --> 00:09:01,440
bu bulanık örneğe tekrar odaklanırsak, orijinal görüntümüz boyunca ilerleyen 3x3&#39;lük küçük

106
00:09:01,440 --> 00:09:06,480
bir değerler ızgarasına sahibim ve eğer yakınlaştırırsak, bu değerlerin her biri 19&#39;uncu

107
00:09:06,480 --> 00:09:11,120
ve ben ne yapıyorum her yinelemede bu değerlerin her biri, üzerinde

108
00:09:11,120 --> 00:09:16,080
bulunduğu karşılık gelen pikselle çarpılır. Ve tabii ki bilgisayar bilimlerinde renkleri, kırmızı,

109
00:09:16,080 --> 00:09:20,400
yeşil ve mavi bileşenleri temsil eden üç değerin küçük vektörleri olarak düşünüyoruz.

110
00:09:20,400 --> 00:09:25,440
Tüm bu küçük değerleri 19&#39;la çarpıp topladığım zaman, bu bize her renk kanalı

111
00:09:25,440 --> 00:09:30,480
boyunca bir ortalama verir ve sağdaki görüntüye karşılık gelen piksel bu toplam olarak

112
00:09:30,480 --> 00:09:36,320
tanımlanır. Bunu görüntüdeki her bir piksel için yaptığımız genel etki, her bir türün

113
00:09:36,320 --> 00:09:40,880
tüm komşularına sızmasıdır, bu da bize orijinalinden daha bulanık bir versiyon verir.

114
00:09:41,680 --> 00:09:46,640
Dilde, sağdaki görüntünün, orijinal görüntümüzün küçük bir değerler tablosuyla evrişimi

115
00:09:46,640 --> 00:09:52,000
olduğunu söyleyebiliriz. Ya da daha teknik olarak belki de bunun, o küçük değerler

116
00:09:52,000 --> 00:09:56,160
ağının 180 derece döndürülmüş versiyonuyla evrişim olduğunu söylemeliyim. Izgaranın simetrik olması önemli değil,

117
00:09:56,160 --> 00:10:00,720
ancak saf matematik bağlamından miras alınan evrişim tanımının sizi her zaman ikinci

118
00:10:00,720 --> 00:10:05,760
dizinin etrafında dönmeyi düşünmeye davet etmesi gerektiğini akılda tutmakta fayda var.

119
00:10:05,760 --> 00:10:10,240
Bunu biraz değiştirirsek, farklı bir değerler ızgarası seçerek çok daha zarif bir bulanıklaştırma efekti

120
00:10:10,240 --> 00:10:15,920
elde edebiliriz. Bu durumda, 5x5&#39;lik küçük bir ızgaram var, ancak fark onun boyutunda değil.

121
00:10:15,920 --> 00:10:19,920
Yakınlaştırırsak ortadaki değerin kenarlardaki değerden çok daha büyük olduğunu fark ederiz ve

122
00:10:19,920 --> 00:10:25,360
bunun kaynağı da bunların hepsinin Gauss dağılımı olarak bilinen bir çan eğrisinden

123
00:10:25,360 --> 00:10:30,240
örneklenmesidir. Bu şekilde, tüm bu değerleri, üzerinde bulundukları karşılık gelen pikselle çarptığımızda,

124
00:10:30,240 --> 00:10:35,200
merkezdeki piksele çok daha fazla, kenardaki piksellere ise çok daha az ağırlık

125
00:10:35,200 --> 00:10:39,920
vermiş oluyoruz. Ve tıpkı daha önce olduğu gibi sağdaki karşılık gelen piksel bu toplam olarak

126
00:10:39,920 --> 00:10:45,360
tanımlanıyor. Bu işlemi her bir piksel için yaptığımızda, lensinizi odak dışı bırakma veya buna benzer

127
00:10:45,360 --> 00:10:49,760
bir fikri çok daha gerçekçi bir şekilde simüle eden bir bulanıklaştırma efekti elde edilir.

128
00:10:49,760 --> 00:10:54,960
Ancak bulanıklaştırma bu fikirle yapabileceğiniz tek şeyden çok uzaktır. Örneğin, solda bazı pozitif

129
00:10:54,960 --> 00:10:59,600
sayılar ve sağda bazı negatif sayılar içeren, sırasıyla mavi ve kırmızıyla

130
00:10:59,600 --> 00:11:04,480
renklendireceğim bu küçük değerler tablosuna bir bakın. Bunun son görüntü üzerinde ne gibi

131
00:11:04,480 --> 00:11:11,680
bir etkisi olacağını tahmin edip anlayıp anlayamadığınızı görmek için bir dakikanızı ayırın. Yani bu durumda görüntüyü

132
00:11:11,680 --> 00:11:16,560
renkli yerine gri tonlamalı olarak düşüneceğim, böylece piksellerin her biri üç yerine

133
00:11:16,560 --> 00:11:21,280
bir sayıyla temsil ediliyor. Ve dikkat edilmesi gereken bir şey de bu evrişimi yaptığımızda negatif

134
00:11:21,280 --> 00:11:26,240
değerler elde etmenin mümkün olmasıdır. Örneğin, bu noktada yakınlaştırırsak, küçük ızgaramızın sol yarısı tamamen

135
00:11:26,240 --> 00:11:30,960
siyah piksellerin üzerinde yer alır, bu da sıfır değerine sahip olur, ancak negatif

136
00:11:30,960 --> 00:11:35,360
değerlerin sağ yarısı beyaz piksellerin üzerinde yer alır, bu da bir değeri var.

137
00:11:36,000 --> 00:11:40,960
Karşılık gelen terimleri çarpıp bunları topladığımızda sonuçlar çok negatif olacaktır ve

138
00:11:40,960 --> 00:11:45,120
bunu sağdaki resimde gösterme şeklim negatif değerleri kırmızıya ve pozitif değerleri

139
00:11:45,120 --> 00:11:49,520
maviye boyamak. Dikkat edilmesi gereken bir diğer nokta da, tamamı aynı renk olan bir

140
00:11:49,520 --> 00:11:55,680
parça üzerinde olduğunuzda, küçük ızgaramızdaki değerlerin toplamı sıfır olduğundan her şeyin sıfıra gitmesidir. Bu, küçük

141
00:11:55,680 --> 00:11:59,680
ızgaramızın toplamının bir olduğu ve onu hareketli bir ortalama ve dolayısıyla bulanıklık olarak yorumlamamıza

142
00:11:59,680 --> 00:12:05,760
olanak tanıyan önceki iki örnekten çok farklıdır. Sonuçta bu küçük süreç, soldan sağa

143
00:12:05,760 --> 00:12:10,240
doğru hareket ettiğinizde piksel değerinde değişiklik olan her yeri tespit eder ve

144
00:12:10,240 --> 00:12:13,760
böylece size görüntünüzün tüm dikey kenarlarını yakalamanız için bir tür yol sunar.

145
00:12:16,560 --> 00:12:20,960
Benzer şekilde, eğer ızgarayı yukarıdan aşağıya doğru hareket ettikçe değişecek şekilde

146
00:12:20,960 --> 00:12:26,000
döndürürsek, bu tüm yatay kenarlarda birikecektir, bu da küçük pasta

147
00:12:26,000 --> 00:12:31,520
yaratık görüntümüzde bazı oldukça şeytani gözlerle sonuçlanacaktır. Bu arada, bu daha küçük

148
00:12:31,520 --> 00:12:36,160
ızgaraya genellikle çekirdek denir ve buradaki güzel nokta, farklı bir çekirdek seçerek, yalnızca kenar

149
00:12:36,160 --> 00:12:40,240
algılamanızı bulanıklaştırmakla kalmayıp aynı zamanda keskinleştirme gibi şeyleri de içeren farklı görüntü işleme efektleri elde

150
00:12:40,240 --> 00:12:44,800
edebilmenizdir. Evrişimli bir sinir ağını duymuş olanlar için buradaki fikir, sinir ağının

151
00:12:44,800 --> 00:12:49,600
tespit etmek istediği şey tarafından belirlenen, ilk etapta çekirdeklerin ne olması gerektiğini

152
00:12:49,600 --> 00:12:55,120
bulmak için verileri kullanmaktır. Belki gündeme getirmem gereken başka bir şey de çıktının uzunluğu.

153
00:12:55,120 --> 00:12:59,040
Hareketli ortalama örneği gibi bir şey için, yalnızca her iki pencere

154
00:12:59,040 --> 00:13:04,080
de birbiriyle tamamen hizalandığında terimleri düşünmek isteyebilirsiniz veya görüntü işleme örneğinde

155
00:13:04,080 --> 00:13:09,200
son çıktının orijinalle aynı boyuta sahip olmasını isteyebilirsiniz. Artık saf bir matematik

156
00:13:09,200 --> 00:13:13,920
işlemi olarak evrişimler her zaman başladığınız iki diziden daha büyük bir dizi üretir,

157
00:13:13,920 --> 00:13:17,520
en azından bunlardan birinin uzunluğunun bir olmadığını varsayarak. Belirli bilgisayar bilimi bağlamlarında

158
00:13:17,520 --> 00:13:21,440
genellikle bu çıktıyı kasıtlı olarak kısaltmak istediğinizi bilmeniz yeterli.

159
00:13:21,520 --> 00:13:29,200
Vurgulamaya değer başka bir şey de, bilgisayar bilimi bağlamında, çekirdeğin orijinalin üzerinden geçmesine izin

160
00:13:29,200 --> 00:13:34,080
vermeden önce çekirdeğin etrafında dönme fikrinin çoğu zaman gerçekten tuhaf ve gereksiz hissettirdiğidir, ancak

161
00:13:34,080 --> 00:13:38,960
bunun saf matematik bağlamından miras alınan şey olduğunu tekrar unutmayın. olasılıkları göz önünde bulundurarak

162
00:13:38,960 --> 00:13:44,000
bunun yapılmasının inanılmaz derecede doğal bir şey olduğunu gördüm. Ve aslında size programcıların

163
00:13:44,000 --> 00:13:48,480
bile bunu önemsemesi gereken bir saf matematik örneği daha gösterebilirim çünkü bu, tüm bunları

164
00:13:48,480 --> 00:13:53,760
hesaplamak için çok daha hızlı bir algoritmanın kapılarını açar. Burada daha hızlı derken

165
00:13:53,760 --> 00:13:58,560
neyi kastettiğimi ayarlamak için geri dönüp biraz python çekeyim ve iki farklı, nispeten

166
00:13:58,560 --> 00:14:02,880
büyük dizi oluşturacağım. Her birinde yüz bin rastgele öğe bulunacak ve

167
00:14:02,880 --> 00:14:08,640
ben Numpy kütüphanesinden evrişim fonksiyonunun çalışma süresini değerlendireceğim. Ve bu durumda,

168
00:14:08,640 --> 00:14:12,800
onu birçok farklı yineleme için çalıştırıyor, bir ortalama bulmaya çalışıyor ve bu bilgisayarda

169
00:14:12,880 --> 00:14:18,640
en azından ortalama 4 gibi görünüyor. 87 saniye. Buna karşılık, fftconvolve adlı scipy

170
00:14:18,640 --> 00:14:24,080
kütüphanesinden farklı bir işlev kullanırsam, bu sadece farklı şekilde uygulananla aynı şeydir ve

171
00:14:24,080 --> 00:14:30,640
yalnızca 4 alır. Ortalama 3 milisaniye, yani üç kat iyileşme.

172
00:14:30,640 --> 00:14:34,800
Ve yine farklı bir isim altında uçsa da diğer evrişim fonksiyonunun yaptığı

173
00:14:34,800 --> 00:14:38,880
çıktının aynısını veriyor, sadece bunu daha akıllıca yapmak için bir şeyler yapıyor.

174
00:14:38,880 --> 00:14:46,800
Olasılık örneğiyle, evrişimi düşünmenin başka bir yolunun, tüm ikili çarpımların bu

175
00:14:46,800 --> 00:14:51,520
tablosunu oluşturmak ve sonra bu ikili çarpımları köşegenler boyunca toplamak olduğunu

176
00:14:51,520 --> 00:14:56,560
söylediğimi hatırlayın. Elbette olasılığa özgü hiçbir şey yoktur, iki farklı

177
00:14:56,560 --> 00:15:00,880
sayı listesini evriştirdiğinizde bu şekilde düşünebilirsiniz. Tüm ikili çarpımları içeren bu tür

178
00:15:00,880 --> 00:15:05,520
bir çarpım tablosu oluşturun ve ardından köşegen boyunca her toplam, nihai çıktılarınızdan birine karşılık

179
00:15:05,520 --> 00:15:11,680
gelir. Bu görüşün özellikle doğal olduğu bağlamlardan biri, iki polinomu birlikte

180
00:15:11,680 --> 00:15:16,240
çarpmanızdır. Örneğin, elimizdeki küçük tabloyu alıp üstteki terimleri 1, 2x ve

181
00:15:16,240 --> 00:15:23,920
3x kareyle, diğer terimleri de 4, 5x ve 6x kareyle değiştireyim.

182
00:15:23,920 --> 00:15:27,920
Şimdi iki liste arasında tüm bu farklı ikili çarpımları oluşturduğumuzun ne anlama geldiğini

183
00:15:27,920 --> 00:15:32,960
düşünün. Yaptığınız şey aslında yazdığım iki polinomun tam çarpımını genişletmek ve

184
00:15:32,960 --> 00:15:38,240
sonra tüm benzer terimleri toplamaya karşılık gelen köşegen boyunca toplama yaptığınızda,

185
00:15:38,240 --> 00:15:43,920
bu oldukça düzgün bir polinomu genişletmek ve benzer terimleri toplamak tam

186
00:15:43,920 --> 00:15:50,640
olarak evrişimle aynı süreç. Ancak bu bize oldukça hoş bir şey yapmamızı

187
00:15:50,640 --> 00:15:55,360
sağlıyor çünkü burada ne söylediğimizi düşünün. Diyoruz ki, iki farklı fonksiyon alıp bunları

188
00:15:55,360 --> 00:16:00,560
birbiriyle çarparsanız, ki bu basit bir noktasal işlemdir, bu, sanki polinom olduklarını

189
00:16:00,560 --> 00:16:05,920
varsayarak önce katsayıları her birinden çıkarmış ve sonra bunların evrişimini almış olmanızla

190
00:16:05,920 --> 00:16:11,840
aynı şeydir. iki katsayı listesi. Bunu bu kadar ilginç kılan şey, evrişimlerin

191
00:16:11,840 --> 00:16:16,560
prensipte basit çarpmadan çok daha karmaşık hissettirmesidir ve sadece kavramsal olarak düşünmenin daha zor

192
00:16:16,560 --> 00:16:21,760
olduğunu kastetmiyorum, hesaplama açısından bir evrişimi gerçekleştirmek için bir evrişimi gerçekleştirmek için olduğundan

193
00:16:21,760 --> 00:16:27,040
daha fazla adım gerektiğini kastediyorum. iki farklı listenin noktasal çarpımı. Örneğin, diyelim ki

194
00:16:27,040 --> 00:16:31,920
size her biri yüz farklı katsayıya sahip iki gerçekten büyük polinom verdim,

195
00:16:32,480 --> 00:16:37,520
o zaman bunları çarpma şekliniz bu çarpımı genişletmekse, bu 100&#39;e 100&#39;lük ikili

196
00:16:37,520 --> 00:16:43,600
çarpım tablosunun tamamını doldurmanızı gerektirir. 10.000 farklı ürün gerçekleştirin ve ardından tüm

197
00:16:43,600 --> 00:16:48,560
benzer terimleri köşegenler boyunca topladığınızda, bu yaklaşık 10.000 işlemden oluşan başka bir

198
00:16:48,560 --> 00:16:55,200
dizidir. Daha genel olarak dilde, algoritmanın O&#39;nun n karesi olduğunu, yani n

199
00:16:55,200 --> 00:17:00,560
boyutlu iki liste için işlem ölçeklerinin sayısının n&#39;nin karesiyle orantılı olduğunu söyleyebiliriz.

200
00:17:00,560 --> 00:17:06,320
Öte yandan, iki polinomu çıktıları açısından düşünürsem, örneğin değerlerini birkaç

201
00:17:06,320 --> 00:17:11,680
girdide örneklemek, sonra bunları çarpmak yalnızca örnek sayısı kadar işlem gerektirir,

202
00:17:11,680 --> 00:17:17,200
çünkü yine bu noktasal bir işlemdir ve polinomlarla yalnızca ihtiyacınız

203
00:17:17,200 --> 00:17:22,400
vardır. katsayıları kurtarabilmek için sonlu sayıda örnek. Örneğin, doğrusal bir polinomu

204
00:17:22,400 --> 00:17:27,920
benzersiz bir şekilde belirtmek için iki çıktı yeterlidir, ikinci dereceden bir polinomu benzersiz bir şekilde

205
00:17:27,920 --> 00:17:33,680
belirtmek için üç çıktı yeterli olacaktır ve genel olarak, n farklı katsayıya sahip bir

206
00:17:33,680 --> 00:17:38,800
polinomu benzersiz şekilde belirtmek için yeterli olan n farklı çıktı biliyorsanız veya isterseniz bunu yapabiliriz.

207
00:17:38,800 --> 00:17:43,680
Bunu denklem sistemleri dilinde ifade edin, size bir polinomum olduğunu söylediğimi hayal edin, ancak katsayıların

208
00:17:43,680 --> 00:17:47,840
ne olduğunu size söylemiyorum, bunlar sizin için bir sırdır. Örneğimizde bunu, bulmaya çalıştığımız çarpım

209
00:17:47,840 --> 00:17:52,960
olarak düşünebilirsiniz ve sonra size 0, 1, 2 gibi çeşitli farklı girdiler

210
00:17:52,960 --> 00:17:59,600
girdiğinizde bu polinomun çıktılarının ne olacağını söyleyeceğimi varsayalım. , 3, devam ediyor ve

211
00:17:59,600 --> 00:18:04,800
size yeterince veriyorum, böylece bilinmeyenleriniz kadar denkleminiz olur, hatta doğrusal bir denklem

212
00:18:04,800 --> 00:18:09,840
sistemi bile olur, bu güzel ve prensipte en azından bu, katsayıları kurtarmak

213
00:18:09,840 --> 00:18:14,880
için yeterli olmalıdır.

214
00:18:14,880 --> 00:18:20,160


215
00:18:20,160 --> 00:18:26,560


216
00:18:26,560 --> 00:18:32,720


217
00:18:32,720 --> 00:18:38,000


218
00:18:38,000 --> 00:18:43,120


219
00:18:43,120 --> 00:18:47,760


220
00:18:47,760 --> 00:18:53,520


221
00:18:53,520 --> 00:18:58,400


222
00:18:58,400 --> 00:19:04,240


223
00:19:04,240 --> 00:19:09,200


224
00:19:09,200 --> 00:19:13,600


225
00:19:13,600 --> 00:19:18,720


226
00:19:18,720 --> 00:19:23,840


227
00:19:23,840 --> 00:19:30,080


228
00:19:30,080 --> 00:19:34,400


229
00:19:34,400 --> 00:19:41,600


230
00:19:41,600 --> 00:19:46,480


231
00:19:46,480 --> 00:19:51,360


232
00:19:51,360 --> 00:19:57,600


233
00:19:57,600 --> 00:20:03,200


234
00:20:03,200 --> 00:20:08,160


235
00:20:08,160 --> 00:20:12,640


236
00:20:12,640 --> 00:20:17,520


237
00:20:17,520 --> 00:20:22,720


238
00:20:22,720 --> 00:20:28,320


239
00:20:28,320 --> 00:20:33,040


240
00:20:33,040 --> 00:20:38,080


241
00:20:38,080 --> 00:20:43,600


242
00:20:43,600 --> 00:20:48,640


243
00:20:48,640 --> 00:20:53,200


244
00:20:53,200 --> 00:20:58,960


245
00:20:58,960 --> 00:21:03,280


246
00:21:03,280 --> 00:21:08,960


247
00:21:08,960 --> 00:21:14,480


248
00:21:14,480 --> 00:21:18,480


249
00:21:18,480 --> 00:21:25,600


250
00:21:25,600 --> 00:21:30,560


251
00:21:30,560 --> 00:21:35,120


252
00:21:35,120 --> 00:21:39,600


253
00:21:39,600 --> 00:21:44,480


254
00:21:44,480 --> 00:21:50,160


255
00:21:50,160 --> 00:21:54,800


256
00:21:54,800 --> 00:21:59,360


257
00:21:59,360 --> 00:22:04,640


258
00:22:04,640 --> 00:22:10,720


259
00:22:10,720 --> 00:22:16,000


260
00:22:16,000 --> 00:22:20,720


261
00:22:20,720 --> 00:22:26,320


262
00:22:26,320 --> 00:22:31,280


263
00:22:31,280 --> 00:22:36,880


264
00:22:36,880 --> 00:22:51,040


