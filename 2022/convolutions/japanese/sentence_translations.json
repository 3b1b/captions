[
 {
  "input": "Suppose I give you two different lists of numbers, or maybe two different functions, and I ask you to think of all the ways you might combine those two lists to get a new list of numbers, or combine the two functions to get a new function.",
  "translatedText": "2 つの異なる数値リスト、あるいはおそらく 2 つの異なる関数を与え、これら 2 つのリ ストを組み合わせて新しい数値リストを得る方法、または 2 つの関数を組み合わせて新しい関 数を得る方法をすべて考えてもらいたいとします。 。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 0.0,
  "end": 11.32
 },
 {
  "input": "Maybe one simple way that comes to mind is to simply add them together term by term.",
  "translatedText": "おそらく思い浮かぶ簡単な方法の 1 つは 、それらを用語ごとに単純に加算することです。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 12.12,
  "end": 16.76
 },
 {
  "input": "Likewise with the functions, you can add all the corresponding outputs.",
  "translatedText": "関数と同様に、対応するすべての出力 を追加できます。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 17.16,
  "end": 19.92
 },
 {
  "input": "In a similar vein, you could also multiply the two lists term by term and do the same thing with the functions.",
  "translatedText": "同様に、2 つのリストを項ごとに乗算し、関数で同 じことを行うこともできます。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 20.54,
  "end": 25.68
 },
 {
  "input": "But there's another kind of combination just as fundamental as both of those, but a lot less commonly discussed, known as a convolution.",
  "translatedText": "しかし、これらの両方と同じくらい基本的であるも のの、あまり議論されていない、畳み込みとして知られる別の種類の組み合わせがあります。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 26.36,
  "end": 33.5
 },
 {
  "input": "But unlike the previous two cases, it's not something that's merely inherited from an operation you can do to numbers.",
  "translatedText": "ただし、前の 2 つのケースとは異なり、数値に対して実行できる操作から単に継承さ れるものではありません。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 34.08,
  "end": 39.82
 },
 {
  "input": "It's something genuinely new for the context of lists of numbers or combining functions.",
  "translatedText": "これは、数値のリストや関数の組み合わせのコンテキストにおいては、ま ったく新しいものです。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 39.98,
  "end": 44.7
 },
 {
  "input": "They show up all over the place, they are ubiquitous in image processing, it's a core construct in the theory of probability, they're used a lot in solving differential equations, and one context where you've almost certainly seen it, if not by this name, is multiplying two polynomials together.",
  "translatedText": "それらはあらゆる場所に現れ、画像処理で遍在し、確率論の中 核となる構成要素であり、微分方程式を解く際によく使用され、そうでないとし てもほぼ確実に目にしたことがある文脈の 1 つです。 この名前では、2 つ の多項式を掛け合わせます。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 45.32,
  "end": 60.24
 },
 {
  "input": "As someone in the business of visual explanations, this is an especially great topic, because the formulaic definition in isolation and without context can look kind of intimidating, but if we take the time to really unpack what it's saying, and before that actually motivate why you would want something like this, it's an incredibly beautiful operation.",
  "translatedText": "視覚的な説明を仕事にしている者として、これは特に素晴らしいトピ ックです。 なぜなら、文脈なしに孤立した定型的な定義は、ある意味威圧的に見えるかもしれないからです。 しかし、時間をかけてそれが何を言っているのかを実際に解き明かし、その前に実際にその理由を動機づ けることができれば、あなたはこのようなものを望むでしょう、それは信じられないほど美しい操作です。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 60.74,
  "end": 78.32
 },
 {
  "input": "And I have to admit, I actually learned a little something while putting together the visuals for this project.",
  "translatedText": "そして、正直に言うと、このプロジェクトのビジュアルをまとめているときに、実際に少し学んだこと があります。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 78.96,
  "end": 83.54
 },
 {
  "input": "In the case of convolving two different functions, I was trying to think of different ways you might picture what that could mean, and with one of them I had a little bit of an aha moment for why it is that normal distributions play the role that they do in probability, why it's such a natural shape for a function.",
  "translatedText": "2 つの異なる関数を畳み込む場合、私はそれが何を意味するのかを皆さんが想像でき るさまざまな方法を考えようとしていたのですが、そのうちの 1 つについて、なぜ正規分布が 次のような役割を果たすのかについて少し納得した瞬間がありました。 確率的にそうなるのですが 、なぜそれが関数にとって自然な形状なのでしょうか。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 83.54,
  "end": 98.52
 },
 {
  "input": "But I'm getting ahead of myself, there's a lot of setup for that one.",
  "translatedText": "しかし、私は先を行っています。 そのためのセッ トアップはたくさんあります。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 99.02,
  "end": 101.52
 },
 {
  "input": "In this video, our primary focus is just going to be on the discrete case, and in particular building up to a very unexpected but very clever algorithm for computing these.",
  "translatedText": "このビデオでは、離散的なケース、特にこれらを計算するた めの非常に予想外だが非常に賢いアルゴリズムを構築することに主に焦点を当てま す。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 101.84,
  "end": 110.26
 },
 {
  "input": "And I'll pull out the discussion for the continuous case into a second part.",
  "translatedText": "そして、継続的なケースの議論を第 2 部に引き出します。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 110.26,
  "end": 114.48
 },
 {
  "input": "It's very tempting to open up with the image processing examples, since they're visually the most intriguing, but there are a couple bits of finickiness that make the image processing case less representative of convolutions overall, so instead let's kick things off with probability, and in particular one of the simplest examples that I'm sure everyone here has thought about at some point in their life, which is rolling a pair of dice and figuring out the chances of seeing various different sums.",
  "translatedText": "画像処理の例は視覚的に最も興味深いものであるため、画像処理の例から始めたくな るのは非常に魅力的ですが、画像処理の例が全体的に畳み込みをあまり表現してい ないようにするいくつかの注意点があるため、代わりに確率論的に物事を始めまし ょう。 特に、ここにいる誰もが人生のある時点で考えたことがあると確信する最も 単純な例の 1 つは、サイコロを振って、さまざまな異なる金額が出る確率を計 算することです。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 118.58,
  "end": 141.5
 },
 {
  "input": "And you might say, not a problem, not a problem.",
  "translatedText": "そして、あなたは、問題ではない、問題ではない、と言うかもしれません。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 142.46,
  "end": 144.46
 },
 {
  "input": "Each of your two dice has six different possible outcomes, which gives us a total of 36 distinct possible pairs of outcomes, and if we just look through them all we can count up how many pairs have a given sum.",
  "translatedText": "2 つのサイコロにはそれ ぞれ 6 つの異なる出目があるため、合計 36 通りの異なる出目のペアが得られます。 それ らをすべて確認するだけで、指定された合計を持つペアがいくつあるかを数えることができます。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 144.68,
  "end": 155.86
 },
 {
  "input": "And arranging all the pairs in a grid like this, one pretty nice thing is that all of the pairs that have a constant sum are visible along one of these different diagonals.",
  "translatedText": "このようにすべてのペアをグリッドに配置すると、合計が一定であるすべてのペアがこれらの異なる対角 線の 1 つに沿って表示されるという非常に優れた点が 1 つあります。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 156.6,
  "end": 165.44
 },
 {
  "input": "So simply counting how many exist on each of those diagonals will tell you how likely you are to see a particular sum.",
  "translatedText": "したがって、これらの対角 線のそれぞれにいくつ存在するかを単純に数えるだけで、特定の合計が表示される可能性がわかります。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 165.44,
  "end": 172.12
 },
 {
  "input": "And I'd say, very good, very good, but can you think of any other ways that you might visualize the same question?",
  "translatedText": "非常に良い、非常に良いと思いますが、同じ質問を視覚化する他の方法は考え られますか?",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 173.22,
  "end": 178.66
 },
 {
  "input": "Other images that can come to mind to think of all the distinct pairs that have a given sum?",
  "translatedText": "特定の合計を持つすべての個別のペアについて考える他のイメージが思い浮かび ますか?",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 179.3,
  "end": 184.06
 },
 {
  "input": "And maybe one of you raises your hand and says, yeah, I've got one.",
  "translatedText": "そしておそらく、皆さんのうちの 1 人が手を挙げて、「はい、持っています」と言うかもしれません。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 184.86,
  "end": 187.98
 },
 {
  "input": "Let's say you picture these two different sets of possibilities each in a row, but you flip around that second row.",
  "translatedText": "これら 2 つの異なる可 能性のセットをそれぞれ 1 行に並べて描いたとしましょう。 ただし、2 番目の行を反転するとします。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 188.28,
  "end": 193.76
 },
 {
  "input": "That way all of the different pairs which add up to seven line up vertically like this.",
  "translatedText": "そうすれ ば、合計 7 になるさまざまなペアがすべてこのように縦に並びます。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 193.76,
  "end": 198.76
 },
 {
  "input": "And if we slide that bottom row all the way to the right, then the unique pair that adds up to two, the snake eyes, are the only ones that align, and if I schlunk that over one unit to the right, the pairs which align are the two different pairs that add up to three.",
  "translatedText": "そして、その一番下の列を右までスライドさせると、蛇の目という足すと2になるユニークなペアだけが揃い、それを1ユニット右にシュランキングすると、揃うペアは足すと3になる2つの異なるペアとなる。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 199.36,
  "end": 212.08
 },
 {
  "input": "And in general, different offset values of this lower array, which remember I had to flip around first, reveal all the distinct pairs that have a given sum.",
  "translatedText": "そして一般に、この下の配列のさまざまなオフセッ ト値により、最初に反転する必要があったことを覚えていますが、指定された合計を持つすべての個別のペアが明 らかになります。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 212.88,
  "end": 221.46
 },
 {
  "input": "As far as probability questions go, this still isn't especially interesting because all we're doing is counting how many outcomes there are in each of these categories.",
  "translatedText": "確率の問題としては、それぞれのカテゴリーにいくつの結果があるかを数えているだけなので、これでも特に興味深いものではない。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 224.82,
  "end": 232.64
 },
 {
  "input": "But that is with the implicit assumption that there's an equal chance for each of these faces to come up.",
  "translatedText": "しかし、それは、これらの顔のそれぞれが出現する機会が等しいという暗黙の前提があ ります。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 232.98,
  "end": 238.12
 },
 {
  "input": "But what if I told you I have a special set of dice that's not uniform?",
  "translatedText": "しかし、統一されていない特別なサイコロのセットがあると言ったらどうなるでしょうか?",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 238.36,
  "end": 241.62
 },
 {
  "input": "Maybe the blue die has its own set of numbers describing the probabilities for each face coming up, and the red die has its own unique distinct set of numbers.",
  "translatedText": "おそら く、青いサイコロには、出現する各面の確率を表す独自の数字のセットがあり、赤いサイコロ には、独自の異なる数字のセットがあるでしょう。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 242.06,
  "end": 249.76
 },
 {
  "input": "In that case, if you wanted to figure out, say, the probability of seeing a 2, you would multiply the probability that the blue die is a 1 times the probability that the red die is a 1.",
  "translatedText": "その場合、たとえば「2」が出る確率を計算しようと思えば、青いダイスが「1」である確率と赤いダイスが「1」である確率を掛け合わせることになる。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 250.3,
  "end": 259.86
 },
 {
  "input": "And for the chances of seeing a 3, you look at the two distinct pairs where that's possible, and again multiply the corresponding probabilities and then add those two products together.",
  "translatedText": "そして3が出る可能性については、その可能性がある2つのペアを調べ、対応する確率を掛け合わせ、その2つの積を足す。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 260.28,
  "end": 269.68
 },
 {
  "input": "Similarly, the chances of seeing a 4 involves multiplying together three different pairs of possibilities and adding them all together.",
  "translatedText": "同様に、4を見る確率は、3つの異なる可能性の組を掛け合わせ、それらをすべて足すことになる。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 270.1,
  "end": 276.82
 },
 {
  "input": "And in the spirit of setting up some formulas, let's name these top probabilities a 1, a 2, a 3, and so on, and name the bottom ones b 1, b 2, b 3, and so on.",
  "translatedText": "そして、公式を作るという精神から、これらの上の確率をa 1、a 2、a 3などと名付け、下の確率をb 1、b 2、b 3などと名付けよう。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 276.82,
  "end": 285.96
 },
 {
  "input": "And in general, this process where we're taking two different arrays of numbers, flipping the second one around, and then lining them up at various different offset values, taking a bunch of pairwise products and adding them up, that's one of the fundamental ways to think about what a convolution is.",
  "translatedText": "そして一般的に、2つの異なる数値の配列を取り、2つ目の配列を反転させ、さまざまなオフセット値で並べ、ペアワイズプロダクトの束を取り、それらを足し算するこのプロセスは、畳み込みとは何かを考える基本的な方法の1つである。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 286.4,
  "end": 301.62
 },
 {
  "input": "So just to spell it out a little more exactly, through this process, we just generated probabilities for seeing 2, 3, 4, on and on up to 12, and we got them by mixing together one list of values, a, and another list of values, b.",
  "translatedText": "つまり、もう少し正確に説明すると、このプロセスを通じて、2、3、4、そして12までの確率を計算し、aという値のリストとbという値のリストを混ぜ合わせることで計算したのである。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 304.86,
  "end": 316.98
 },
 {
  "input": "In the lingo, we'd say the convolution of those two sequences gives us this new sequence, the new sequence of 11 values, each of which looks like some sum of pairwise products.",
  "translatedText": "専門用語では、これら 2 つのシーケンスの畳み込 みにより、この新しいシーケンス、つまり 11 個の値の新しいシーケンスが得られ、それぞれがペアごとの 積の和のように見えると言えます。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 317.44,
  "end": 327.34
 },
 {
  "input": "If you prefer, another way you could think about the same operation is to first create a table of all the pairwise products, and then add up along all these diagonals.",
  "translatedText": "必要に応じて、同じ演算を考える別の方法として、最初にすべて のペアごとの積の表を作成し、次にこれらすべての対角線に沿って合計するという方法もあり ます。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 327.34,
  "end": 336.98
 },
 {
  "input": "Again, that's a way of mixing together these two sequences of numbers to get us a new sequence of 11 numbers.",
  "translatedText": "繰り返しますが、これは、これら 2 つの数値シーケンスを混ぜ合わせて、11 個の新しい数値シーケン スを取得する方法です。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 337.46,
  "end": 342.76
 },
 {
  "input": "It's the same operation as the sliding windows thought, just another perspective.",
  "translatedText": "これは、スライド窓が考えた操作と同じですが、別の視点にすぎません。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 343.24,
  "end": 346.46
 },
 {
  "input": "Putting a little notation to it, here's how you might see it written down.",
  "translatedText": "それにちょっとした注釈を付けて、次のように書きます。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 347.14,
  "end": 349.8
 },
 {
  "input": "The convolution of a and b, denoted with this little asterisk, is a new list, and the nth element of that list looks like a sum, and that sum goes over all different pairs of indices, i and j, so that the sum of those indices is equal to n.",
  "translatedText": "この小さなアスタリスクで示 されている a と b の畳み込みは新しいリストであり、そのリストの n 番目の要素は合計のように見えます。 その 合計は、すべての異なるインデックスのペア i と j にまたがります。 つまり、次の合計はそれらのインデックスは n に等しくなります。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 350.22,
  "end": 364.86
 },
 {
  "input": "It's kind of a mouthful, but for example, if n was 6, the pairs we're going over are 1 and 5, 2 and 4, 3 and 3, 4 and 2, 5 and 1, all the different pairs that add up to 6.",
  "translatedText": "ちょっと長めの話ですが、たとえば、n が 6 の場合、ここで検討するペアは、1 と 5、2 と 4、3 と 3、4 と 2、5 と 1 であり、すべての異なるペアを合計します。 6まで。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 365.28,
  "end": 375.8
 },
 {
  "input": "But honestly, however you write it down, the notation is secondary in importance to the visual you might hold in your head for the process.",
  "translatedText": "しかし正直なところ、どのように書き留めても、プロセス中に頭の中に保持するビジュアルに比べれば、 表記法は二の次の重要性を持っています。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 376.62,
  "end": 382.34
 },
 {
  "input": "Here, maybe it helps to do a super simple example, where I might ask you what's the convolution of the list 1, 2, 3 with the list 4, 5, 6.",
  "translatedText": "ここで、リスト1、2、3とリスト4、5、6の畳み込みはどうなるかと尋ねるような、超シンプルな例を出すといいかもしれない。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 383.28,
  "end": 390.78
 },
 {
  "input": "You might picture taking both of these lists, flipping around that second one, and then starting with its lid all the way over to the left.",
  "translatedText": "これらのリストを 両方とも取得し、2 番目のリストを裏返し、次にその蓋から左端まで進めていく様子 を想像するかもしれません。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 391.48,
  "end": 397.68
 },
 {
  "input": "Then the pair of values which align are 1 and 4, multiply them together, and that gives us our first term of our output.",
  "translatedText": "次に、整列する値のペアは 1 と 4 であり、それら を乗算すると、出力の最初の項が得られます。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 398.18,
  "end": 403.54
 },
 {
  "input": "Slide that bottom array one unit to the right, the pairs which align are 1, 5 and 2 and 4, multiply those pairs, add them together, and that gives us 13, the next entry in our output.",
  "translatedText": "一番下の配列を右に1ユニットスライドさせ、1、5、2、4のペアを揃え、それらのペアを掛け合わせ、足し合わせれば、次のエントリーの13が得られる。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 403.96,
  "end": 414.46
 },
 {
  "input": "Slide things over once more, and we'll take 1 times 6 plus 2 times 5 plus 3 times 4, which happens to be 28.",
  "translatedText": "もう1度スライドさせて、6を1回、5を2回、4を3回、合計28回とする。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 414.96,
  "end": 421.56
 },
 {
  "input": "One more slide and we get 2 times 6 plus 3 times 5, and that gives us 27.",
  "translatedText": "もう1回滑れば、6の2倍と5の3倍で27になる。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 422.02,
  "end": 427.02
 },
 {
  "input": "And finally the last term will look like 3 times 6.",
  "translatedText": "そして最後の項は、3×6のようになる。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 427.5,
  "end": 430.12
 },
 {
  "input": "If you'd like, you can pull up whatever your favorite programming language is and your favorite library that includes various numerical operations, and you can confirm I'm not lying to you.",
  "translatedText": "お望みなら、お好きなプログラミング言語と、様々な数値演算を含むお好きなライブラリを引っ張り出せば、私が嘘をついていないことが確認できるだろう。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 430.66,
  "end": 438.98
 },
 {
  "input": "If you take the convolution of 1, 2, 3 against 4, 5, 6, this is indeed the result that you'll get.",
  "translatedText": "4、5、6に対して1、2、3の畳み込みをとると、確かにこのような結果になる。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 438.98,
  "end": 444.48
 },
 {
  "input": "We've seen one case where this is a natural and desirable operation, adding up to probability distributions, and another common example would be a moving average.",
  "translatedText": "これが自然で望ましい操作である確率分布への加算であるケースを 1 つ見てき ました。 もう 1 つの一般的な例は移動平均です。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 445.92,
  "end": 453.66
 },
 {
  "input": "Imagine you have some long list of numbers, and you take another smaller list of numbers that all add up to 1.",
  "translatedText": "数値の長いリストがあり、すべて 足すと 1 になる小さな数値の別のリストを取得すると想像してください。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 454.08,
  "end": 459.76
 },
 {
  "input": "In this case, I just have a little list of 5 values and they're all equal to 1 5th.",
  "translatedText": "この場合、5つの値の小さなリストがあり、それらはすべて5分の1に等しい。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 460.1,
  "end": 464.06
 },
 {
  "input": "Then if we do this sliding window convolution process, and kind of close our eyes and sweep under the rug what happens at the very beginning of it, once our smaller list of values entirely overlaps with the bigger one, think about what each term in this convolution really means.",
  "translatedText": "次に、このスライディング ウィ ンドウの畳み込みプロセスを実行し、目を閉じてその最初で何が起こっているかを徹底的に調べ 、小さい値のリストが大きい値のリストと完全に重なったら、この中の各項が何であるかを考 えてください。 畳み込みというのは本当に意味します。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 464.06,
  "end": 478.7
 },
 {
  "input": "At each iteration, what you're doing is multiplying each of the values from your data by 1 5th and adding them all together, which is to say you're taking an average of your data inside this little window.",
  "translatedText": "つまり、この小さなウィンドウの中でデータの平均をとっているのだ。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 479.4,
  "end": 490.52
 },
 {
  "input": "Overall, the process gives you a smoothed out version of the original data, and you could modify this starting with a different little list of numbers, and as long as that little list all adds up to 1, you can still interpret it as a moving average.",
  "translatedText": "全体として、このプロセ スにより、元のデータの平滑化されたバージョンが得られます。 これを、別の小さな数値リストか ら始めて変更することができます。 その小さなリストの合計が 1 になる限り、それを移動デー タとして解釈できます。 平均。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 491.1,
  "end": 502.72
 },
 {
  "input": "In the example shown here, that moving average would be giving more weight towards the central value.",
  "translatedText": "ここに示す例では、移動平均により中心値により 大きな重みが与えられます。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 503.4,
  "end": 507.76
 },
 {
  "input": "This also results in a smoothed out version of the data.",
  "translatedText": "これにより、データが平滑化されたバージョンになります。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 508.42,
  "end": 510.8
 },
 {
  "input": "If you do kind of a two-dimensional analog of this, it gives you a fun algorithm for blurring a given image.",
  "translatedText": "これを 2 次元で類似したものにすると、特定の画像をぼかすための楽しいアルゴリズムが 得られます。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 513.14,
  "end": 518.72
 },
 {
  "input": "And I should say the animations I'm about to show are modified from something I originally made for part of a set of lectures I did with the Julia lab at MIT for a certain open courseware class that included an image processing unit.",
  "translatedText": "今からお見せするアニメーションは、私がMITのジュリア・ラボと行った、画像処理ユニットを含むオープン・コースウェアの講義のために作ったものに手を加えたものだ。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 518.72,
  "end": 531.08
 },
 {
  "input": "There we did a little bit more to dive into the code behind all of this, so if you're curious, I'll leave you some links.",
  "translatedText": "もし興味があれば、リンクを貼っておこう。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 531.56,
  "end": 536.28
 },
 {
  "input": "But focusing back on this blurring example, what's going on is I've got this little 3x3 grid of values that's marching along our original image, and if we zoom in, each one of those values is 1 9th, and what I'm doing at each iteration is multiplying each of those values by the corresponding pixel that it sits on top of.",
  "translatedText": "しか し、このぼやけた例に焦点を戻すと、何が起こっているのかというと、元の画像に沿って進んでい る値の小さな 3x3 グリッドがあり、ズームインすると、これらの値のそれぞれが 1 9 であり、私が何をしているのかということです。 各反復で、それらの値のそれぞれに、その上 にある対応するピクセルが乗算されます。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 536.62,
  "end": 553.62
 },
 {
  "input": "And of course in computer science, we think of colors as little vectors of three values, representing the red, green, and blue components.",
  "translatedText": "そしてもちろん、コンピュータ・サイエンスでは、色を赤、緑、青の成分を表す3つの値の小さなベクトルとして考える。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 553.9,
  "end": 560.2
 },
 {
  "input": "When I multiply all these little values by 1 9th and I add them together, it gives us an average along each color channel, and the corresponding pixel for the image on the right is defined to be that sum.",
  "translatedText": "これらすべての小さな値に 1 9 を乗算して加算すると、各カラー チャネル に沿った平均が得られ、右側の画像の対応するピクセルはその合計として定義され ます。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 560.56,
  "end": 571.2
 },
 {
  "input": "The overall effect, as we do this for every single pixel on the image, is that each one kind of bleeds into all of its neighbors, which gives us a blurrier version than the original.",
  "translatedText": "画像上のすべてのピクセルに対してこれを行うと、全体的な効果として、それぞれの種類が 隣接するすべてのピクセルににじみ出て、元のピクセルよりもぼやけたバージョンが得られます。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 571.94,
  "end": 580.86
 },
 {
  "input": "In the lingo, we'd say that the image on the right is a convolution of our original image with a little grid of values.",
  "translatedText": "専門用語で言えば、右の画像は、元画像を小さな格子状の値で畳み込んだものだ。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 581.72,
  "end": 587.74
 },
 {
  "input": "Or more technically, maybe I should say that it's the convolution with a 180 degree rotated version of that little grid of values.",
  "translatedText": "もっと厳密に言えば、小さなグリッドの値を180度回転させたものとのコンボリューションと言うべきかもしれない。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 588.14,
  "end": 594.4
 },
 {
  "input": "Not that it matters when the grid is symmetric, but it's just worth keeping in mind that the definition of a convolution, as inherited from the pure math context, should always invite you to think about flipping around that second array.",
  "translatedText": "グリッドが対称であるかどうかは重要 ではありませんが、純粋な数学のコンテキストから継承された畳み込みの定義では、常に 2 番目の配列を反転することを考慮する必要があることに留意する価値があります。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 594.62,
  "end": 605.24
 },
 {
  "input": "If we modify this slightly, we can get a much more elegant blurring effect by choosing a different grid of values.",
  "translatedText": "これを少し修正すれば、異なるグリッドの値を選択することで、よりエレガントなぼかし効果を得ることができる。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 605.96,
  "end": 611.1
 },
 {
  "input": "In this case, I have a little 5x5 grid, but the distinction is not so much its size.",
  "translatedText": "この場合、私は5x5の小さなグリッドを持っているが、違いはその大きさではない。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 611.44,
  "end": 615.78
 },
 {
  "input": "If we zoom in, we notice that the value in the middle is a lot bigger than the value towards the edges.",
  "translatedText": "拡大してみると、中央の値が端の値よりもかなり大きいことがわかる。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 615.98,
  "end": 620.54
 },
 {
  "input": "And where this is coming from is they're all sampled from a bell curve, known as a Gaussian distribution.",
  "translatedText": "これはガウス分布と呼ばれるベル曲線からサンプリングされたものだ。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 621.18,
  "end": 625.94
 },
 {
  "input": "That way, when we multiply all of these values by the corresponding pixel that they're sitting on top of, we're giving a lot more weight to that central pixel, and much less towards the ones out at the edge.",
  "translatedText": "こうすることで、これらの値に対応するピクセルを掛け合わせたとき、中心ピクセルの比重が大きくなり、端のピクセルの比重が小さくなる。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 626.8,
  "end": 636.38
 },
 {
  "input": "And just as before, the corresponding pixel on the right is defined to be this sum.",
  "translatedText": "そして、先ほどと同じように、右側の対応するピクセルはこの和と定義される。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 636.8,
  "end": 640.56
 },
 {
  "input": "As we do this process for every single pixel, it gives a blurring effect, which much more authentically simulates the notion of putting your lens out of focus, or something like that.",
  "translatedText": "この処理を1ピクセルごとに行うことで、ぼかし効果が生まれ、レンズのピントが合っていないような状態をよりリアルにシミュレートすることができる。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 641.32,
  "end": 649.72
 },
 {
  "input": "But blurring is far from the only thing that you can do with this idea.",
  "translatedText": "しかし、このアイデアでできることはぼかしだけではありません。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 649.9,
  "end": 653.36
 },
 {
  "input": "For instance, take a look at this little grid of values, which involves some positive numbers on the left, and some negative numbers on the right, which I'll color with blue and red respectively.",
  "translatedText": "例えば、この小さなグリッドを見てみよう。左側には正の数、右側には負の数があり、それぞれ青と赤で色分けしてある。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 653.8,
  "end": 662.9
 },
 {
  "input": "Take a moment to see if you can predict and understand what effect this will have on the final image.",
  "translatedText": "これが最終的な画像にどのような影 響を与えるかを予測して理解できるかどうか、少し時間を取って確認してください。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 663.64,
  "end": 668.48
 },
 {
  "input": "So in this case, I'll just be thinking of the image as grayscale instead of colored, so each of the pixels is just represented by one number instead of three.",
  "translatedText": "つまり、この場合、画像はカラーではなくグレースケールとして考えることにする。したがって、各ピクセルは3つの数字ではなく1つの数字で表されることになる。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 670.72,
  "end": 678.12
 },
 {
  "input": "And one thing worth noticing is that as we do this convolution, it's possible to get negative values.",
  "translatedText": "そして注目すべき点は、この畳み込みを行う際に、負の値を得ることが可能だということだ。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 678.44,
  "end": 683.06
 },
 {
  "input": "For example, at this point here, if we zoom in, the left half of our little grid sits entirely on top of black pixels, which would have a value of zero, but the right half of negative values all sit on top of white pixels, which would have a value of one.",
  "translatedText": "例えば、この時点でズームインしてみると、小さなグリッドの左半分はすべて黒いピクセルの上にあり、このピクセルの値は0となるが、負の値の右半分はすべて白いピクセルの上にあり、このピクセルの値は1となる。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 683.06,
  "end": 695.46
 },
 {
  "input": "So when we multiply corresponding terms and add them together, the results will be very negative.",
  "translatedText": "そのため、対応する項を掛け合わせ、それらを足し合わせると、結果は非常にマイナスになる。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 696.18,
  "end": 700.82
 },
 {
  "input": "And the way I'm displaying this with the image on the right is to color negative values red and positive values blue.",
  "translatedText": "そして、右の画像でこれを表示する方法は、マイナスの値を赤、プラスの値を青に着色することだ。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 701.16,
  "end": 706.36
 },
 {
  "input": "Another thing to notice is that when you're on a patch that's all the same color, everything goes to zero, since the sum of the values in our little grid is zero.",
  "translatedText": "もうひとつ注意しなければならないのは、すべて同じ色のパッチにいるとき、すべてがゼロになるということだ。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 706.88,
  "end": 714.08
 },
 {
  "input": "This is very different from the previous two examples where the sum of our little grid was one, which let us interpret it as a moving average and hence a blur.",
  "translatedText": "これは、小さ なグリッドの合計が 1 だった前の 2 つの例とは大きく異なります。 この例では、それを移 動平均として解釈し、したがってぼやけています。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 715.18,
  "end": 722.18
 },
 {
  "input": "All in all, this little process basically detects wherever there's variation in the pixel value as you move from left to right, and so it gives you a kind of way to pick up on all the vertical edges from your image.",
  "translatedText": "全体として、この小さなプロセスは基本的に、左から右へ移動するにつれてピクセル値に変化がある場所を検出するもので、画像からすべての垂直エッジをピックアップする一種の方法を提供する。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 723.64,
  "end": 733.92
 },
 {
  "input": "And similarly, if we rotated that grid around so that it varies as you move from the top to the bottom, this will be picking up on all the horizontal edges, which in the case of our little pie creature image does result in some pretty demonic eyes.",
  "translatedText": "同様に、グリッドを回転させ、上から下に移動するにつれて変化するようにすると、すべての水平方向のエッジを拾うことになる。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 736.5,
  "end": 749.34
 },
 {
  "input": "This smaller grid, by the way, is often called a kernel, and the beauty here is how just by choosing a different kernel, you can get different image processing effects, not just blurring your edge detection, but also things like sharpening.",
  "translatedText": "ちなみに、この小さいグリッドはしばしばカーネルと呼ばれ、異なるカーネルを選択するだけで、エッジ検出のぼかしだけでなく、シャープネス処理など、さまざまな画像処理効果を得ることができるのがここでの魅力だ。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 750.4,
  "end": 760.84
 },
 {
  "input": "For those of you who have heard of a convolutional neural network, the idea there is to use data to figure out what the kernels should be in the first place, as determined by whatever the neural network wants to detect.",
  "translatedText": "畳み込みニューラルネットワークについて聞いたことがある人のために説明しておくと、そこでの考え方は、ニューラルネットワークが検出したいものによって決定されるカーネルがそもそもどうあるべきかを、データを使って見つけ出すというものだ。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 760.84,
  "end": 771.48
 },
 {
  "input": "Another thing I should maybe bring up is the length of the output.",
  "translatedText": "もう 1 つ取り上げるべき点は、出力の長さで す。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 772.76,
  "end": 775.52
 },
 {
  "input": "For something like the moving average example, you might only want to think about the terms when both of the windows fully align with each other.",
  "translatedText": "移動平均の例のようなものであれば、両方の窓が完全に一致したときのみ、その条件について考えたくなるかもしれない。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 775.82,
  "end": 781.9
 },
 {
  "input": "Or in the image processing example, maybe you want the final output to have the same size as the original.",
  "translatedText": "あるいは、画像処理の例で言えば、最終的な出力がオリジナルと同じサイズであることを望むかもしれない。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 782.12,
  "end": 787.28
 },
 {
  "input": "Now, convolutions as a pure math operation always produce an array that's bigger than the two arrays that you started with, at least assuming one of them doesn't have a length of one.",
  "translatedText": "さて、純粋な数学演算としての畳み込みは、少なくともどちらかの配列の長さが1でないと仮定すれば、常に最初に作った2つの配列よりも大きな配列を作る。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 787.28,
  "end": 796.18
 },
 {
  "input": "Just know that in certain computer science contexts, you often want to deliberately truncate that output.",
  "translatedText": "ただ、ある種のコンピューターサイエンスの文脈では、出力を意図的に切り詰めたくなることがよくあることを知っておいてほしい。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 796.72,
  "end": 801.52
 },
 {
  "input": "Another thing worth highlighting is that in the computer science context, this notion of flipping around that kernel before you let it march across the original often feels really weird and just uncalled for, but again, note that that's what's inherited from the pure math context, where like we saw with the probabilities, it's an incredibly natural thing to do.",
  "translatedText": "もうひとつ強調しておきたいのは、コンピュータ・サイエンスの文脈では、カーネルを原型のまま行進させる前にカーネルを反転させるという考え方は、しばしば実に奇妙で、無用の長物だと感じられるが、これも純粋数学の文脈から受け継いだもので、確率で見たように、これは驚くほど自然なことなのだ。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 804.72,
  "end": 822.44
 },
 {
  "input": "And actually, I can show you one more pure math example where even the programmers should care about this one, because it opens the doors for a much faster algorithm to compute all of these.",
  "translatedText": "そして実は、もうひとつ純粋数学の例を示そう。プログラマーでさえもこの例を気にするはずだ。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 823.02,
  "end": 832.02
 },
 {
  "input": "To set up what I mean by faster here, let me go back and pull up some Python again, and I'm going to create two different relatively big arrays.",
  "translatedText": "ここで私が言う高速化とはどういうことかを説明するために、もう一度Pythonを起動して、2つの異なる比較的大きな配列を作成してみよう。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 832.62,
  "end": 839.78
 },
 {
  "input": "Each one will have a hundred thousand random elements in it, and I'm going to assess the runtime, of the convolve function from the NumPy library.",
  "translatedText": "それぞれに10万個のランダム要素があり、NumPyライブラリのconvolve関数の実行時間を評価するつもりだ。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 839.94,
  "end": 847.54
 },
 {
  "input": "And in this case, it runs it for multiple different iterations, tries to find an average, and it looks like, on this computer at least, it averages at 4.87 seconds.",
  "translatedText": "そしてこの場合、複数の異なる反復を実行し、平均値を求めようとするのだが、少なくともこのコンピューターでは、平均4.87秒になるようだ。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 848.18,
  "end": 856.52
 },
 {
  "input": "By contrast, if I use a different function from the SciPy library called fftConvolve, which is the same thing just implemented differently, that only takes 4.3 milliseconds on average, so three orders of magnitude improvement.",
  "translatedText": "一方、SciPyライブラリのftConvolveという関数を使うと、平均4.3ミリ秒しかかからない。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 856.96,
  "end": 870.16
 },
 {
  "input": "And again, even though it flies under a different name, it's giving the same output that the other convolve function does, it's just doing something to go about it in a cleverer way.",
  "translatedText": "繰り返すが、別の名前で呼ばれていても、他のconvolve関数と同じ出力を出している。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 870.16,
  "end": 879.12
 },
 {
  "input": "Remember how with the probability example, I said another way you could think about the convolution was to create this table of all the pairwise products, and then add up those pairwise products along the diagonals.",
  "translatedText": "確率の例で、畳み込みを考えるもう一つの方法として、すべての一対一の積の表を作り、対角線に沿ってそれらの一対一の積を足し合わせることができると述べたのを覚えているだろうか。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 882.2,
  "end": 892.68
 },
 {
  "input": "There's of course nothing specific to probability.",
  "translatedText": "もちろん確率に特別なものはない。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 893.66,
  "end": 895.5
 },
 {
  "input": "Any time you're convolving two different lists of numbers, you can think about it this way.",
  "translatedText": "2つの異なる数字のリストを畳み込むときは、いつでもこのように考えることができる。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 895.66,
  "end": 899.04
 },
 {
  "input": "Create this kind of multiplication table with all pairwise products, and then each sum along the diagonal corresponds to one of your final outputs.",
  "translatedText": "対になるすべての積でこのような乗算表を作成し、対角線上の各和が最終的な出力の1つに対応する。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 899.04,
  "end": 906.46
 },
 {
  "input": "One context where this view is especially natural is when you multiply together two polynomials.",
  "translatedText": "この見方が特に自然である状況の 1 つは、2 つの多項式を乗算す る場合です。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 907.6,
  "end": 912.8
 },
 {
  "input": "For example, let me take the little grid we already have and replace the top terms with 1, 2x, and 3x squared, and replace the other terms with 4, 5x, and 6x squared.",
  "translatedText": "例えば、すでにある小さなグリッドを使って、上の項を1、2x、3xの2乗に置き換え、他の項を4、5x、6xの2乗に置き換えてみよう。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 913.3,
  "end": 923.6
 },
 {
  "input": "Now, think about what it means when we're creating all of these different pairwise products between the two lists.",
  "translatedText": "ここで、2つのリスト間でさまざまなペアワイズ積を作ることの意味を考えてみよう。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 924.0,
  "end": 928.84
 },
 {
  "input": "What you're doing is essentially expanding out the full product of the two polynomials I have written down, and then when you add up along the diagonal, that corresponds to collecting all like terms.",
  "translatedText": "あなたがやっていることは、本質的に、私が書き下ろした2つの多項式の全積を展開することであり、対角線に沿って足し算をするとき、それはすべての似た項を集めることに相当する。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 929.04,
  "end": 939.9
 },
 {
  "input": "Which is pretty neat.",
  "translatedText": "それはとても素晴らしいことだ。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 940.6,
  "end": 941.5
 },
 {
  "input": "Expanding a polynomial and collecting like terms is exactly the same process as a convolution.",
  "translatedText": "多項式を展開して同じような項を集めるのは、畳み込みとまったく同じプロセスである。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 941.74,
  "end": 946.44
 },
 {
  "input": "But this allows us to do something that's pretty cool, because think about what we're saying here.",
  "translatedText": "なぜなら、ここで言っていることを考えてみてほしい。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 947.74,
  "end": 952.34
 },
 {
  "input": "We're saying if you take two different functions and you multiply them together, which is a simple pointwise operation, that's the same thing as if you had first extracted the coefficients from each one of those, assuming they're polynomials, and then taken a convolution of those two lists of coefficients.",
  "translatedText": "私たちが言っているのは、2つの異なる関数を取り出して掛け合わせた場合、それは単純なポイントワイズ演算であり、多項式だと仮定してそれぞれの関数の係数を抽出し、その2つの係数のリストの畳み込みを取った場合と同じだということだ。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 952.34,
  "end": 968.84
 },
 {
  "input": "What makes that so interesting is that convolutions feel, in principle, a lot more complicated than simple multiplication.",
  "translatedText": "それが面白いのは、コンボリューションは原理的に、単純な掛け算よりもずっと複雑に感じられるからだ。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 969.62,
  "end": 975.36
 },
 {
  "input": "And I don't just mean conceptually they're harder to think about.",
  "translatedText": "単に概念的に難しくなったという意味ではない。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 975.82,
  "end": 978.46
 },
 {
  "input": "I mean, computationally, it requires more steps to perform a convolution than it does to perform a pointwise product of two different lists.",
  "translatedText": "つまり、計算上、コンボリューションを実行するには、2つの異なるリストの点積を実行するよりも多くのステップが必要なのだ。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 978.84,
  "end": 985.76
 },
 {
  "input": "For example, let's say I gave you two really big polynomials, say each one with a hundred different coefficients.",
  "translatedText": "例えば、私が2つの大きな多項式を与えたとしよう。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 986.32,
  "end": 991.9
 },
 {
  "input": "Then if the way you multiply them was to expand out this product, you know, filling in this entire 100 by 100 grid of pairwise products, that would require you to perform 10,000 different products.",
  "translatedText": "もし、この掛け算の方法を、この100×100の格子状の対になる積をすべて埋めていくようなものにすると、1万通りの積を行う必要がある。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 992.74,
  "end": 1003.24
 },
 {
  "input": "And then, when you're collecting all the like terms along the diagonals, that's another set of around 10,000 operations.",
  "translatedText": "そして、対角線上の同類項をすべて集めると、これまた約1万回の演算が必要になる。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 1003.74,
  "end": 1009.86
 },
 {
  "input": "More generally, in the lingo, we'd say the algorithm is O of n squared, meaning for two lists of size n, the way that the number of operations scales is in proportion to the square of n.",
  "translatedText": "より一般的には、専門用語で、このアルゴリズムはn乗のOであると言う。つまり、サイズnの2つのリストに対して、演算回数のスケールはnの2乗に比例するということだ。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 1010.7,
  "end": 1021.14
 },
 {
  "input": "On the other hand, if I think of two polynomials in terms of their outputs, for example, sampling their values at some handful of inputs, then multiplying them only requires as many operations as the number of samples, since again, it's a pointwise operation.",
  "translatedText": "一方、2つの多項式をその出力という観点から考えると、例えば、いくつかの入力でその値をサンプリングし、それを掛け算してもサンプルの数と同じだけの演算で済む。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 1021.82,
  "end": 1035.62
 },
 {
  "input": "And with polynomials, you only need finitely many samples to be able to recover the coefficients.",
  "translatedText": "そして多項式の場合、係数を復元するのに必要なサンプル数は有限である。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 1036.18,
  "end": 1040.54
 },
 {
  "input": "For example, two outputs are enough to uniquely specify a linear polynomial, three outputs would be enough to uniquely specify a quadratic polynomial, and in general, if you know n distinct outputs, that's enough to uniquely specify a polynomial that has n different coefficients.",
  "translatedText": "例えば、一次多項式を一意に指定するには2つの出力で十分であり、二次多項式を一意に指定するには3つの出力で十分である。一般的に、n個の異なる出力を知っていれば、n個の異なる係数を持つ多項式を一意に指定するにはそれで十分である。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 1040.54,
  "end": 1056.74
 },
 {
  "input": "Or, if you prefer, we could phrase this in the language of systems of equations.",
  "translatedText": "あるいは、これを方程式系で表現することもできる。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 1057.44,
  "end": 1060.72
 },
 {
  "input": "Imagine I tell you I have some polynomial, but I don't tell you what the coefficients are.",
  "translatedText": "私がある多項式を持っていると言ったとしよう。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 1061.2,
  "end": 1065.2
 },
 {
  "input": "Those are a mystery to you.",
  "translatedText": "それはあなたにとって謎だ。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 1065.26,
  "end": 1066.52
 },
 {
  "input": "In our example, you might think of this as the product that we're trying to figure out.",
  "translatedText": "私たちの例で言えば、これは私たちが解明しようとしている製品と考えることができるだろう。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 1066.7,
  "end": 1070.18
 },
 {
  "input": "And then, suppose I say, I'll just tell you what the outputs of this polynomial would be if you inputted various different inputs, like 0, 1, 2, 3, on and on, and I give you enough so that you have as many equations as you have unknowns.",
  "translatedText": "そして、0、1、2、3......といったさまざまな異なる入力を入力した場合、この多項式の出力がどうなるかを教えてあげよう。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 1070.18,
  "end": 1083.46
 },
 {
  "input": "It even happens to be a linear system of equations, so that's nice, and in principle, at least, this should be enough to recover the coefficients.",
  "translatedText": "これは偶然にも連立一次方程式である。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 1084.14,
  "end": 1090.9
 },
 {
  "input": "So the rough algorithm outline then would be, whenever you want to convolve two lists of numbers, you treat them like they're coefficients of two polynomials, you sample those polynomials at enough outputs, multiply those samples point-wise, and then solve this system to recover the coefficients as a sneaky backdoor way to find the convolution.",
  "translatedText": "つまり、大まかなアルゴリズムの概略は、2つの数値リストを畳み込みたいときはいつでも、それらを2つの多項式の係数のように扱い、十分な出力でそれらの多項式をサンプリングし、それらのサンプルをポイントごとに乗算し、畳み込みを求める裏技として、係数を回復するためにこの方程式を解く、ということになる。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 1091.74,
  "end": 1110.56
 },
 {
  "input": "And, as I've stated it so far, at least, some of you could rightfully complain, grant, that is an idiotic plan, because, for one thing, just calculating all these samples for one of the polynomials we know already takes on the order of n-squared operations.",
  "translatedText": "というのも、1つには、私たちがすでに知っている多項式の1つについて、これらのサンプルをすべて計算するだけで、n乗の演算が必要だからである。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 1111.42,
  "end": 1125.12
 },
 {
  "input": "Not to mention, solving that system is certainly going to be computationally as difficult as just doing the convolution in the first place.",
  "translatedText": "言うまでもないが、このシステムを解くのは、最初に畳み込みを行うのと同じくらい計算が難しくなる。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 1125.6,
  "end": 1132.1
 },
 {
  "input": "So, like, sure, we have this connection between multiplication and convolutions, but all of the complexity happens in translating from one viewpoint to the other.",
  "translatedText": "つまり、掛け算と畳み込みの間にこのようなつながりがあるのは確かだが、複雑さはすべて、一方の視点から他方の視点に変換する際に起こるのだ。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 1132.6,
  "end": 1140.48
 },
 {
  "input": "But there is a trick, and those of you who know about Fourier transforms and the FFT algorithm might see where this is going.",
  "translatedText": "しかし、トリックがあります。フーリエ変換と FFT アルゴリズムについて知っている人なら、これがどこに向かうのかわかるかもしれません。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 1141.6,
  "end": 1147.74
 },
 {
  "input": "If you're unfamiliar with those topics, what I'm about to say might seem completely out of the blue.",
  "translatedText": "これらのトピックに馴染みのない方にとっては、これから話すことはまったく突拍子もないことに思えるかもしれない。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 1147.74,
  "end": 1152.18
 },
 {
  "input": "Just know that there are certain paths you could have walked in math that make this more of an expected step.",
  "translatedText": "数学において、これをより期待されたステップにすることができる特定の道があることを知っておいてください。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 1152.26,
  "end": 1156.86
 },
 {
  "input": "Basically, the idea is that we have a freedom of choice here.",
  "translatedText": "基本的に、ここには選択の自由があるということだ。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 1157.72,
  "end": 1160.36
 },
 {
  "input": "If instead of evaluating at some arbitrary set of inputs, like 0, 1, 2, 3, on and on, you choose to evaluate on a very specially selected set of complex numbers, specifically the ones that sit evenly spaced on the unit circle, what are known as the roots of unity, this gives us a friendlier system.",
  "translatedText": "0,1,2,3...といった任意の入力セットで評価する代わりに、特別に選ばれた複素数のセット、特に単位円上に等間隔で配置されているもの、いわゆるユニティの根で評価することにすれば、より友好的なシステムが得られる。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 1160.54,
  "end": 1176.88
 },
 {
  "input": "The basic idea is that by finding a number where taking its powers falls into this cycling pattern, it means that the system we generate is going to have a lot of redundancy in the different terms that you're calculating, and by being clever about how you leverage that redundancy, you can save yourself a lot of work.",
  "translatedText": "基本的な考え方は、べき乗がこの循環パターンに該当する数値を見つけることによって、計算するさまざまな条件において、生成されるシステムが多くの冗長性を持つことを意味し、その方法を賢くすることで、その冗長性を活用すれば、多くの作業を節約できます。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 1178.36,
  "end": 1194.46
 },
 {
  "input": "This set of outputs that I've written has a special name.",
  "translatedText": "私が書いたこの一連の出力には特別な名前がついている。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 1196.02,
  "end": 1198.56
 },
 {
  "input": "It's called the discrete Fourier transform of the coefficients, and if you want to learn more, I actually did another lecture for that same Julia MIT class all about discrete Fourier transforms, and there's also a really excellent video on the channel Reducible talking about the fast Fourier transform, which is an algorithm for computing these more quickly.",
  "translatedText": "もっと学びたいなら、私は同じジュリアMITのクラスで離散フーリエ変換についての講義を行ったし、Reducibleというチャンネルで高速フーリエ変換について話している素晴らしいビデオもある。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 1198.9,
  "end": 1217.12
 },
 {
  "input": "Also Veritasium recently did a really good video on FFTs, so you've got lots of options.",
  "translatedText": "また、ベリタシウムは最近、FFTに関するとても良いビデオを制作した。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 1217.48,
  "end": 1221.76
 },
 {
  "input": "And that fast algorithm really is the point for us.",
  "translatedText": "そして、その高速アルゴリズムが私たちにとって本当に重要なのです。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 1222.26,
  "end": 1224.66
 },
 {
  "input": "Again, because of all this redundancy, there exists a method to go from the coefficients to all of these outputs, where instead of doing on the order of n squared operations, you do on the order of n times the log of n operations, which is much much better as you scale to big lists.",
  "translatedText": "繰り返しになるが、このような冗長性があるため、係数からこれらすべての出力に移動する方法が存在する。n乗のオーダーで演算する代わりに、n乗の対数のオーダーで演算するのだ。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 1225.12,
  "end": 1239.2
 },
 {
  "input": "And, importantly, this FFT algorithm goes both ways.",
  "translatedText": "そして重要なのは、このFFTアルゴリズムは双方向に機能するということだ。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 1239.66,
  "end": 1242.54
 },
 {
  "input": "It also lets you go from the outputs to the coefficients.",
  "translatedText": "また、出力から係数に進むこともできます。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 1242.7,
  "end": 1245.48
 },
 {
  "input": "So, bringing it all together, let's look back at our algorithm outline.",
  "translatedText": "では、すべてをまとめて、アルゴリズムのアウトラインを振り返ってみよう。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 1246.22,
  "end": 1249.06
 },
 {
  "input": "Now we can say, whenever you're given two long lists of numbers, and you want to take their convolution, first compute the fast Fourier transform of each one of them, which, in the back of your mind, you can just think of as treating them like they're the coefficients of a polynomial, and evaluating it at a very specially selected set of points.",
  "translatedText": "今言えることは、2つの長い数字のリストが与えられて、それらの畳み込みを取りたいときはいつでも、まずそれぞれの数字の高速フーリエ変換を計算する。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 1249.42,
  "end": 1266.38
 },
 {
  "input": "Then, multiply together the two results that you just got, point-wise, which is nice and fast, and then do an inverse fast Fourier transform, and what that gives you is the sneaky backdoor way to compute the convolution that we were looking for.",
  "translatedText": "そして、今得た2つの結果をポイント単位で掛け合わせ、逆高速フーリエ変換を行うと、求めていたコンボリューションを計算する裏技が得られる。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 1266.9,
  "end": 1278.9
 },
 {
  "input": "But this time, it only involves O of n log n operations.",
  "translatedText": "しかし今回は、n対数nのO演算で済む。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 1279.04,
  "end": 1282.24
 },
 {
  "input": "That's really cool to me.",
  "translatedText": "それは僕にとって本当にクールなことだ。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 1283.14,
  "end": 1284.74
 },
 {
  "input": "This very specific context where convolutions show up, multiplying two polynomials, opens the doors for an algorithm that's relevant everywhere else where convolutions might come up.",
  "translatedText": "2 つの多項式を乗算するという畳み込みが現れるこの非常に特殊な状況は、畳み込みが発生する可能性のある他のあらゆる場所に関連するアルゴリズムへの扉を開きます。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 1285.12,
  "end": 1294.1
 },
 {
  "input": "If you want to add probability distributions, do some large image processing, whatever it might be, and I just think that's such a good example of why you should be excited when you see some operation or concept in math show up in a lot of seemingly unrelated areas.",
  "translatedText": "確率分布を追加したい場合、大規模な画像処理をしたい場合、それが何であれ、数学のある操作や概念が一見無関係に見える多くの分野に現れるのを見ると、なぜ興奮する必要があるのかを示す良い例だと思う。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 1294.18,
  "end": 1307.48
 },
 {
  "input": "If you want a little homework, here's something that's fun to think about.",
  "translatedText": "ちょっとした宿題が欲しいなら、考えるのが楽しいものがある。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 1308.48,
  "end": 1311.5
 },
 {
  "input": "Explain why when you multiply two different numbers, just ordinary multiplication the way we all learn in elementary school, what you're doing is basically a convolution between the digits of those numbers.",
  "translatedText": "2 つの異なる数値を掛けるとき、つまり小学校で習う普通の掛け算では、基本的にこれらの数値の桁間の畳み込みが行われることになる理由を説明してください。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 1311.72,
  "end": 1321.98
 },
 {
  "input": "There's some added steps with carries and the like, but the core step is a convolution.",
  "translatedText": "キャリーなどいくつかのステップが追加されるが、核となるステップはコンボリューションだ。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 1322.5,
  "end": 1326.46
 },
 {
  "input": "In light of the existence of a fast algorithm, what that means is if you have two very large integers, then there exists a way to find their product that's faster than the method we learn in elementary school, that instead of requiring O of n squared operations, only requires O of n log n, which doesn't even feel like it should be possible.",
  "translatedText": "高速なアルゴリズムが存在するということは、2つの非常に大きな整数がある場合、小学校で習う方法よりも高速で、n乗のO演算を必要とせず、n対数nのO演算で済む積を求める方法が存在するということだ。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 1327.28,
  "end": 1344.92
 },
 {
  "input": "The catch is that before this is actually useful in practice, your numbers would have to be absolutely monstrous.",
  "translatedText": "問題は、これが実際に役立つ前に、数値がまったく巨大になる必要があるということです。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 1345.38,
  "end": 1350.84
 },
 {
  "input": "But still, it's cool that such an algorithm exists.",
  "translatedText": "しかし、それでも、このようなアルゴリズムが存在することは素晴らしいことです。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 1351.22,
  "end": 1353.86
 },
 {
  "input": "And next up, we'll turn our attention to the continuous case with a special focus on probability distributions.",
  "translatedText": "そして次は、特に確率分布に焦点を当てた連続的なケースに目を向ける。",
  "model": "DeepL",
  "n_reviews": 0,
  "start": 1355.16,
  "end": 1359.64
 }
]