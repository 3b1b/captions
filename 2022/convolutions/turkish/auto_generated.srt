1
00:00:00,000 --> 00:00:03,958
Size iki farklı sayı listesi veya belki iki farklı işlev verdiğimi ve sizden yeni bir

2
00:00:03,958 --> 00:00:07,824
sayı listesi elde etmek için bu iki listeyi birleştirmenin veya yeni bir işlev elde

3
00:00:07,824 --> 00:00:11,737
etmek için iki işlevi birleştirmenin tüm yollarını düşünmenizi istediğimi varsayalım.

4
00:00:11,737 --> 00:00:16,267
Belki akla gelen basit bir yol, bunları terim terim bir araya getirmektir.

5
00:00:16,267 --> 00:00:20,050
İşlevlerde olduğu gibi, karşılık gelen tüm çıktıları da ekleyebilirsiniz.

6
00:00:20,050 --> 00:00:23,346
Benzer şekilde, iki listeyi terim terimle çarpabilir

7
00:00:23,346 --> 00:00:26,145
ve aynı şeyi işlevler için de yapabilirsiniz.

8
00:00:26,145 --> 00:00:30,151
Ancak her ikisi kadar temel olan ancak çok daha az tartışılan,

9
00:00:30,151 --> 00:00:33,840
evrişim olarak bilinen başka bir tür kombinasyon daha var.

10
00:00:33,840 --> 00:00:36,810
Ancak önceki iki durumdan farklı olarak bu, sayılara

11
00:00:36,810 --> 00:00:39,893
yapabileceğiniz bir işlemden miras kalan bir şey değil.

12
00:00:39,893 --> 00:00:44,716
Sayı listeleri veya birleştirme işlevleri bağlamında gerçekten yeni bir şey.

13
00:00:44,716 --> 00:00:48,576
Her yerde karşımıza çıkıyorlar, görüntü işlemede her yerde mevcutlar,

14
00:00:48,576 --> 00:00:52,491
olasılık teorisinin temel yapılarından biri, diferansiyel denklemlerin

15
00:00:52,491 --> 00:00:56,075
çözümünde çok kullanılıyorlar ve onu neredeyse kesinlikle görmüş

16
00:00:56,075 --> 00:01:00,210
olduğunuz bir bağlam var, olmasa da. bu isimle iki polinomun çarpılmasıdır.

17
00:01:00,210 --> 00:01:04,594
Görsel açıklamalar işinde çalışan biri olarak bu özellikle harika bir konudur,

18
00:01:04,594 --> 00:01:09,033
çünkü kalıplaşmış tanım tek başına ve bağlamdan bağımsız olarak biraz korkutucu

19
00:01:09,033 --> 00:01:13,528
görünebilir, ancak ne söylediğini gerçekten açmak için zaman ayırırsak ve bundan

20
00:01:13,528 --> 00:01:17,135
önce gerçekten nedenini motive edersek böyle bir şey istersiniz,

21
00:01:17,135 --> 00:01:18,800
inanılmaz güzel bir operasyon.

22
00:01:18,800 --> 00:01:21,162
Ve itiraf etmeliyim ki, bu proje için görselleri bir

23
00:01:21,162 --> 00:01:23,436
araya getirirken aslında küçük bir şeyler öğrendim.

24
00:01:23,436 --> 00:01:27,283
İki farklı fonksiyonun evrilmesi durumunda, bunun ne anlama gelebileceğini hayal

25
00:01:27,283 --> 00:01:31,083
edebileceğiniz farklı yollar düşünmeye çalışıyordum ve bunlardan biriyle normal

26
00:01:31,083 --> 00:01:34,218
dağılımların neden bu rolü oynadığına dair biraz aha anı yaşadım.

27
00:01:34,218 --> 00:01:38,445
bir fonksiyon için neden bu kadar doğal bir şekil olduğunu olasılık dahilinde yapıyorlar.

28
00:01:38,445 --> 00:01:41,580
Ama kendimi aşıyorum, bunun için pek çok kurulum var.

29
00:01:41,580 --> 00:01:45,861
Bu videoda asıl odak noktamız ayrık durum üzerinde olacak ve özellikle bunları

30
00:01:45,861 --> 00:01:50,196
hesaplamak için çok beklenmedik ama çok akıllı bir algoritma geliştirmek olacak.

31
00:01:50,196 --> 00:01:57,840
Devam eden vakaya ilişkin tartışmayı ikinci bir kısma aktaracağım.

32
00:01:57,840 --> 00:02:02,357
Görüntü işleme örnekleriyle başlamak çok cazip çünkü görsel olarak en ilgi çekici

33
00:02:02,357 --> 00:02:07,095
olanlar bunlar, ancak görüntü işleme durumunu genel olarak evrişimleri daha az temsil

34
00:02:07,095 --> 00:02:11,888
eden birkaç parça titizlik var, o yüzden bunun yerine işleri olasılıklarla başlatalım,

35
00:02:11,888 --> 00:02:16,626
ve özellikle buradaki herkesin hayatının bir noktasında düşündüğünden emin olduğum en

36
00:02:16,626 --> 00:02:21,530
basit örneklerden biri; bir çift zar atmak ve farklı toplamları görme şansını hesaplamak.

37
00:02:21,530 --> 00:02:24,170
Ve diyebilirsiniz ki sorun değil, sorun değil.

38
00:02:24,170 --> 00:02:27,957
İki zarınızın her birinin altı farklı olası sonucu vardır,

39
00:02:27,957 --> 00:02:32,965
bu da bize toplam 36 farklı olası sonuç çifti verir ve eğer hepsine bakarsak,

40
00:02:32,965 --> 00:02:36,240
belirli bir toplamın kaç çift olduğunu sayabiliriz.

41
00:02:36,240 --> 00:02:40,777
Ve tüm çiftleri bu şekilde bir ızgaraya yerleştirdiğimizde oldukça hoş olan şey,

42
00:02:40,777 --> 00:02:45,650
sabit toplamı olan tüm çiftlerin bu farklı köşegenlerden biri boyunca görülebilmesidir.

43
00:02:45,650 --> 00:02:49,265
Yani sadece bu köşegenlerin her birinde kaç tane bulunduğunu saymak size

44
00:02:49,265 --> 00:02:52,880
belirli bir toplamı görme olasılığınızın ne kadar olduğunu söyleyecektir.

45
00:02:52,880 --> 00:02:55,588
Ben de çok iyi, çok iyi derdim ama aynı soruyu

46
00:02:55,588 --> 00:02:58,699
görselleştirmenin başka yollarını düşünebiliyor musun?

47
00:02:58,699 --> 00:03:01,319
Belirli bir toplamı olan tüm farklı çiftleri düşünmek

48
00:03:01,319 --> 00:03:03,744
için aklınıza gelebilecek başka görüntüler var mı?

49
00:03:03,744 --> 00:03:07,550
Belki biriniz elini kaldırır ve evet bende bir tane var der.

50
00:03:07,550 --> 00:03:12,039
Diyelim ki bu iki farklı olasılık kümesini arka arkaya gözünüzde canlandırıyorsunuz,

51
00:03:12,039 --> 00:03:14,046
ancak ikinci sırayı değiştiriyorsunuz.

52
00:03:14,046 --> 00:03:18,960
Böylece toplamı yediye ulaşan tüm farklı çiftler dikey olarak bu şekilde sıralanır.

53
00:03:18,960 --> 00:03:23,902
Ve eğer alt sırayı tamamen sağa kaydırırsak, toplamı iki olan benzersiz çift,

54
00:03:23,902 --> 00:03:26,309
yani yılanın gözleri aynı hizada olur.

55
00:03:26,309 --> 00:03:29,340
Ve eğer bunu bir birim sağa doğru kaydırırsam,

56
00:03:29,340 --> 00:03:32,886
hizalanan çiftler toplamı üç olan iki farklı çift olur.

57
00:03:32,886 --> 00:03:35,653
Ve genel olarak, bu alt dizinin farklı ofset değerleri,

58
00:03:35,653 --> 00:03:38,716
ki hatırladığım kadarıyla ilk önce ters çevirmem gerekiyordu,

59
00:03:38,716 --> 00:03:41,778
belirli bir toplamı olan tüm farklı çiftleri ortaya çıkarıyor.

60
00:03:41,778 --> 00:03:47,764
Olasılık sorularına gelince, bu hala pek ilgi çekici değil çünkü yaptığımız

61
00:03:47,764 --> 00:03:53,120
tek şey bu kategorilerin her birinde kaç tane sonuç olduğunu saymak.

62
00:03:53,120 --> 00:03:55,423
Ancak bu, bu yüzlerin her birinin ortaya çıkma şansının

63
00:03:55,423 --> 00:03:57,850
eşit olduğu yönündeki örtülü varsayımdan kaynaklanmaktadır.

64
00:03:57,850 --> 00:04:01,897
Peki ya sana tekdüze olmayan özel bir zar setim olduğunu söylesem?

65
00:04:01,897 --> 00:04:05,847
Belki mavi zarın her yüzün gelme olasılığını açıklayan kendi sayıları

66
00:04:05,847 --> 00:04:09,740
vardır ve kırmızı zarın da kendine özgü farklı sayılar dizisi vardır.

67
00:04:09,740 --> 00:04:14,511
Bu durumda, diyelim ki iki gelme olasılığını hesaplamak istiyorsanız,

68
00:04:14,511 --> 00:04:19,895
mavi zarın bir olma olasılığını kırmızı zarın bir olma olasılığını çarparsınız.

69
00:04:19,895 --> 00:04:24,684
Ve üçü görme şansı için, mümkün olan yerlerde iki ayrı çifte bakarsınız ve

70
00:04:24,684 --> 00:04:29,983
karşılık gelen olasılıkları tekrar çarparsınız ve sonra bu iki çarpımı toplarsınız.

71
00:04:29,983 --> 00:04:33,263
Benzer şekilde, dörtlü görme şansı da üç farklı

72
00:04:33,263 --> 00:04:36,748
olasılık çiftini çarparak hepsini toplamayı içerir.

73
00:04:36,748 --> 00:04:41,522
Ve bazı formüller oluşturma ruhuna uygun olarak, bu üst olasılıklara a1,

74
00:04:41,522 --> 00:04:45,903
a2, a3 vb. , alttaki olasılıklara ise b1, b2, b3 vb. adını verelim.

75
00:04:45,903 --> 00:04:49,699
Ve genel olarak, bu süreç, iki farklı sayı dizisini alıp ikincisini ters

76
00:04:49,699 --> 00:04:54,067
çevirdiğimiz ve daha sonra bunları çeşitli farklı ofset değerlerinde sıraladığımız,

77
00:04:54,067 --> 00:04:58,331
bir grup ikili çarpım alıp bunları topladığımız bu süreç, bu işlemlerden biridir.

78
00:04:58,331 --> 00:05:01,139
Evrişimin ne olduğu hakkında düşünmenin temel yolları.

79
00:05:01,139 --> 00:05:06,600
Bunu biraz daha net bir şekilde açıklamak gerekirse, bu süreç boyunca iki,

80
00:05:06,600 --> 00:05:12,789
üç, dört ve 12&#39;ye kadar görme olasılıkları ürettik ve bunları bir değer listesi,

81
00:05:12,789 --> 00:05:17,084
a ve diğerini karıştırarak elde ettik. değerler listesi, b.

82
00:05:17,084 --> 00:05:20,668
Dilde, bu iki dizinin evrişiminin bize bu yeni diziyi,

83
00:05:20,668 --> 00:05:25,816
her biri ikili çarpımların toplamı gibi görünen 11 değerden oluşan yeni diziyi

84
00:05:25,816 --> 00:05:27,120
verdiğini söylerdik.

85
00:05:27,120 --> 00:05:30,592
İsterseniz, aynı işlemi düşünmenin başka bir yolu da,

86
00:05:30,592 --> 00:05:35,158
önce tüm ikili çarpımların bir tablosunu oluşturmak ve ardından tüm bu

87
00:05:35,158 --> 00:05:36,702
köşegenleri toplamaktır.

88
00:05:36,702 --> 00:05:39,323
Yine, bu, bize 11 sayıdan oluşan yeni bir dizi elde

89
00:05:39,323 --> 00:05:42,247
etmek için bu iki sayı dizisini karıştırmanın bir yoludur.

90
00:05:42,247 --> 00:05:46,960
Bu, sürgülü pencerelerin düşündüğü işlemin aynısı, sadece başka bir bakış açısı.

91
00:05:46,960 --> 00:05:50,314
Üzerine küçük bir notasyon koyarak, bunun nasıl yazıldığını görebilirsiniz.

92
00:05:50,314 --> 00:05:55,065
Bu küçük yıldız işaretiyle gösterilen a ve b&#39;nin evrişimi yeni bir listedir ve

93
00:05:55,065 --> 00:05:58,728
bu listenin n&#39;inci elemanı bir toplama benzer ve bu toplam,

94
00:05:58,728 --> 00:06:02,106
i ve j gibi tüm farklı endeks çiftlerinin üzerinden geçer,

95
00:06:02,106 --> 00:06:04,738
böylece toplamı bu endeksler n&#39;ye eşittir.

96
00:06:04,738 --> 00:06:08,089
Biraz ağız dolusu olacak ama örneğin, eğer n 6 ise,

97
00:06:08,089 --> 00:06:12,019
üzerinde duracağımız çiftler 1 ve 5, 2 ve 4, 3 ve 3, 4 ve 2,

98
00:06:12,019 --> 00:06:16,400
5 ve 1, yani toplamı toplayan tüm farklı çiftlerdir. 6&#39;ya kadar.

99
00:06:16,400 --> 00:06:18,882
Ama dürüst olmak gerekirse, nasıl yazarsanız yazın,

100
00:06:18,882 --> 00:06:23,082
süreç için kafanızda tutabileceğiniz görselin önemi açısından notasyon ikinci plandadır.

101
00:06:23,082 --> 00:06:27,053
Burada belki çok basit bir örnek yapmak faydalı olabilir; size 1, 2,

102
00:06:27,053 --> 00:06:30,967
3 listesinin 4, 5, 6 listesiyle evrişiminin ne olduğunu sorabilirim.

103
00:06:30,967 --> 00:06:34,591
Bu listelerin her ikisini de alıp, ikincisinin etrafında dolaştığını ve ardından

104
00:06:34,591 --> 00:06:37,857
kapağından başlayarak tamamen sola doğru başladığını hayal edebilirsiniz.

105
00:06:37,857 --> 00:06:40,330
Daha sonra hizalanan değer çifti 1 ve 4&#39;tür,

106
00:06:40,330 --> 00:06:43,813
bunları birbiriyle çarparız ve bu bize çıktımızın ilk terimini verir.

107
00:06:43,813 --> 00:06:48,719
Alt diziyi bir birim sağa kaydırın, hizalanan çiftler 1 ve 5 ve 2 ve 4&#39;tür,

108
00:06:48,719 --> 00:06:53,932
bu çiftleri çarpın, toplayın ve bu bize çıktımızdaki bir sonraki girdi olan 13&#39;ü

109
00:06:53,932 --> 00:06:54,300
verir.

110
00:06:54,300 --> 00:07:01,591
Bir kez daha yana kaydırırsak 1 çarpı 6, artı 2 çarpı 5, artı 3 çarpı 4, yani 28 olur.

111
00:07:01,591 --> 00:07:05,554
Bir slayt daha, ve 2 çarpı 6 artı 3 çarpı 5 elde ederiz,

112
00:07:05,554 --> 00:07:10,560
bu da bize 27 verir ve son olarak son terim 3 çarpı 6 gibi görünecektir.

113
00:07:10,560 --> 00:07:14,546
İsterseniz en sevdiğiniz programlama dilini ve çeşitli sayısal işlemleri

114
00:07:14,546 --> 00:07:18,807
içeren favori kütüphanenizi açıp size yalan söylemediğimi doğrulayabilirsiniz.

115
00:07:18,807 --> 00:07:22,595
Eğer 1, 2, 3&#39;ün 4, 5, 6&#39;ya karşı evrişimini alırsanız,

116
00:07:22,595 --> 00:07:24,880
gerçekten elde edeceğiniz sonuç budur.

117
00:07:24,880 --> 00:07:28,934
Bunun doğal ve arzu edilen bir işlem olduğu, olasılık dağılımlarına eklenen

118
00:07:28,934 --> 00:07:32,881
bir durum gördük ve diğer bir yaygın örnek de hareketli ortalama olabilir.

119
00:07:32,881 --> 00:07:35,835
Uzun bir sayı listeniz olduğunu ve toplamı 1 olan

120
00:07:35,835 --> 00:07:38,788
daha küçük bir sayı listesi aldığınızı hayal edin.

121
00:07:38,788 --> 00:07:43,381
Bu durumda elimde 5 değerden oluşan küçük bir liste var ve bunların hepsi 1 5&#39;e eşit.

122
00:07:43,381 --> 00:07:47,421
Daha sonra, bu kayan pencere evrişim işlemini yaparsak ve gözlerimizi

123
00:07:47,421 --> 00:07:50,942
kapatırsak ve en başında olanları halının altına süpürürsek,

124
00:07:50,942 --> 00:07:54,463
daha küçük değer listemiz büyük olanla tamamen örtüştüğünde,

125
00:07:54,463 --> 00:07:59,023
bu buradaki her terimin ne olduğunu düşünün. evrişim gerçekten şu anlama gelir.

126
00:07:59,023 --> 00:08:04,963
Her yinelemede yaptığınız şey, verilerinizdeki değerlerin her birini 1/5 ile çarpmak ve

127
00:08:04,963 --> 00:08:10,769
hepsini toplamaktır, yani bu küçük penceredeki verilerinizin ortalamasını alıyorsunuz.

128
00:08:10,769 --> 00:08:13,925
Genel olarak, süreç size orijinal verinin yumuşatılmış bir versiyonunu

129
00:08:13,925 --> 00:08:16,503
verir ve bunu farklı küçük bir sayı listesiyle başlayarak

130
00:08:16,503 --> 00:08:19,793
değiştirebilirsiniz ve bu küçük listenin toplamı 1&#39;e ulaştığı sürece,

131
00:08:19,793 --> 00:08:22,816
onu yine de hareketli bir sayı olarak yorumlayabilirsiniz. ortalama.

132
00:08:22,816 --> 00:08:25,173
Burada gösterilen örnekte, hareketli ortalama,

133
00:08:25,173 --> 00:08:27,781
merkezi değere daha fazla ağırlık veriyor olacaktır.

134
00:08:27,781 --> 00:08:33,200
Bu aynı zamanda verilerin düzeltilmiş bir versiyonuyla da sonuçlanır.

135
00:08:33,200 --> 00:08:36,003
Bunun iki boyutlu bir benzerini yaparsanız, belirli bir görüntüyü

136
00:08:36,003 --> 00:08:38,594
bulanıklaştırmak için eğlenceli bir algoritma elde edersiniz.

137
00:08:38,594 --> 00:08:42,471
Ve birazdan göstereceğim animasyonların, MIT&#39;deki Julia Laboratuvarı&#39;nda,

138
00:08:42,471 --> 00:08:46,537
görüntü işleme birimi içeren belirli bir OpenCourseWare sınıfı için yaptığım bir dizi

139
00:08:46,537 --> 00:08:50,272
dersin bir parçası olarak orijinal olarak yaptığım bir şeyden değiştirildiğini

140
00:08:50,272 --> 00:08:50,887
söylemeliyim.

141
00:08:50,887 --> 00:08:53,808
Tüm bunların arkasındaki koda dalmak için biraz daha çalıştık,

142
00:08:53,808 --> 00:08:56,452
eğer merak ediyorsanız size bazı bağlantılar bırakacağım.

143
00:08:56,452 --> 00:09:00,487
Ancak bu bulanık örneğe tekrar odaklanırsak, orijinal görüntümüz boyunca

144
00:09:00,487 --> 00:09:05,241
ilerleyen 3x3&#39;lük küçük bir değerler ızgarasına sahibim ve eğer yakınlaştırırsak,

145
00:09:05,241 --> 00:09:09,277
bu değerlerin her biri 19&#39;uncu ve ben ne yapıyorum her yinelemede bu

146
00:09:09,277 --> 00:09:13,312
değerlerin her biri, üzerinde bulunduğu karşılık gelen pikselle çarpılır.

147
00:09:13,312 --> 00:09:16,097
Ve tabii ki bilgisayar bilimlerinde renkleri, kırmızı,

148
00:09:16,097 --> 00:09:20,400
yeşil ve mavi bileşenleri temsil eden üç değerin küçük vektörleri olarak düşünüyoruz.

149
00:09:20,400 --> 00:09:23,804
Tüm bu küçük değerleri 19&#39;la çarpıp topladığım zaman,

150
00:09:23,804 --> 00:09:28,912
bu bize her renk kanalı boyunca bir ortalama verir ve sağdaki görüntüye karşılık gelen

151
00:09:28,912 --> 00:09:30,966
piksel bu toplam olarak tanımlanır.

152
00:09:30,966 --> 00:09:35,009
Bunu görüntüdeki her bir piksel için yaptığımız genel etki,

153
00:09:35,009 --> 00:09:40,399
her bir türün tüm komşularına sızmasıdır, bu da bize orijinalinden daha bulanık

154
00:09:40,399 --> 00:09:41,680
bir versiyon verir.

155
00:09:41,680 --> 00:09:44,685
Dilde, sağdaki görüntünün, orijinal görüntümüzün küçük

156
00:09:44,685 --> 00:09:47,800
bir değerler tablosuyla evrişimi olduğunu söyleyebiliriz.

157
00:09:47,800 --> 00:09:51,090
Ya da daha teknik olarak belki de bunun, o küçük değerler ağının

158
00:09:51,090 --> 00:09:54,430
180 derece döndürülmüş versiyonuyla evrişim olduğunu söylemeliyim.

159
00:09:54,430 --> 00:09:58,278
Izgaranın simetrik olması önemli değil, ancak saf matematik bağlamından

160
00:09:58,278 --> 00:10:02,072
miras alınan evrişim tanımının sizi her zaman ikinci dizinin etrafında

161
00:10:02,072 --> 00:10:05,760
dönmeyi düşünmeye davet etmesi gerektiğini akılda tutmakta fayda var.

162
00:10:05,760 --> 00:10:08,519
Bunu biraz değiştirirsek, farklı bir değerler ızgarası seçerek

163
00:10:08,519 --> 00:10:11,059
çok daha zarif bir bulanıklaştırma efekti elde edebiliriz.

164
00:10:11,059 --> 00:10:15,920
Bu durumda, 5x5&#39;lik küçük bir ızgaram var, ancak fark onun boyutunda değil.

165
00:10:15,920 --> 00:10:19,283
Yakınlaştırırsak ortadaki değerin kenarlardaki değerden çok daha

166
00:10:19,283 --> 00:10:22,647
büyük olduğunu fark ederiz ve bunun kaynağı da bunların hepsinin

167
00:10:22,647 --> 00:10:26,010
Gauss dağılımı olarak bilinen bir çan eğrisinden örneklenmesidir.

168
00:10:26,010 --> 00:10:29,389
Bu şekilde, tüm bu değerleri, üzerinde bulundukları karşılık

169
00:10:29,389 --> 00:10:32,989
gelen pikselle çarptığımızda, merkezdeki piksele çok daha fazla,

170
00:10:32,989 --> 00:10:36,367
kenardaki piksellere ise çok daha az ağırlık vermiş oluyoruz.

171
00:10:36,367 --> 00:10:38,480
Ve tıpkı daha önce olduğu gibi sağdaki karşılık

172
00:10:38,480 --> 00:10:40,373
gelen piksel bu toplam olarak tanımlanıyor.

173
00:10:40,373 --> 00:10:45,014
Bu işlemi her bir piksel için yaptığımızda, lensinizi odak dışı bırakma veya buna benzer

174
00:10:45,014 --> 00:10:49,394
bir fikri çok daha gerçekçi bir şekilde simüle eden bir bulanıklaştırma efekti elde

175
00:10:49,394 --> 00:10:49,760
edilir.

176
00:10:49,760 --> 00:10:53,474
Ancak bulanıklaştırma bu fikirle yapabileceğiniz tek şeyden çok uzaktır.

177
00:10:53,474 --> 00:10:57,969
Örneğin, solda bazı pozitif sayılar ve sağda bazı negatif sayılar içeren,

178
00:10:57,969 --> 00:11:03,071
sırasıyla mavi ve kırmızıyla renklendireceğim bu küçük değerler tablosuna bir bakın.

179
00:11:03,071 --> 00:11:06,394
Bunun son görüntü üzerinde ne gibi bir etkisi olacağını tahmin

180
00:11:06,394 --> 00:11:09,769
edip anlayıp anlayamadığınızı görmek için bir dakikanızı ayırın.

181
00:11:09,769 --> 00:11:14,132
Yani bu durumda görüntüyü renkli yerine gri tonlamalı olarak düşüneceğim,

182
00:11:14,132 --> 00:11:18,082
böylece piksellerin her biri üç yerine bir sayıyla temsil ediliyor.

183
00:11:18,082 --> 00:11:20,364
Ve dikkat edilmesi gereken bir şey de bu evrişimi

184
00:11:20,364 --> 00:11:23,102
yaptığımızda negatif değerler elde etmenin mümkün olmasıdır.

185
00:11:23,102 --> 00:11:27,473
Örneğin, bu noktada yakınlaştırırsak, küçük ızgaramızın sol yarısı tamamen siyah

186
00:11:27,473 --> 00:11:30,927
piksellerin üzerinde yer alır, bu da sıfır değerine sahip olur,

187
00:11:30,927 --> 00:11:34,866
ancak negatif değerlerin sağ yarısı beyaz piksellerin üzerinde yer alır,

188
00:11:34,866 --> 00:11:36,000
bu da bir değeri var.

189
00:11:36,000 --> 00:11:39,384
Karşılık gelen terimleri çarpıp bunları topladığımızda sonuçlar

190
00:11:39,384 --> 00:11:42,662
çok negatif olacaktır ve bunu sağdaki resimde gösterme şeklim

191
00:11:42,662 --> 00:11:46,046
negatif değerleri kırmızıya ve pozitif değerleri maviye boyamak.

192
00:11:46,046 --> 00:11:48,998
Dikkat edilmesi gereken bir diğer nokta da, tamamı aynı renk

193
00:11:48,998 --> 00:11:51,757
olan bir parça üzerinde olduğunuzda, küçük ızgaramızdaki

194
00:11:51,757 --> 00:11:54,854
değerlerin toplamı sıfır olduğundan her şeyin sıfıra gitmesidir.

195
00:11:54,854 --> 00:11:59,113
Bu, küçük ızgaramızın toplamının bir olduğu ve onu hareketli bir ortalama ve dolayısıyla

196
00:11:59,113 --> 00:12:02,990
bulanıklık olarak yorumlamamıza olanak tanıyan önceki iki örnekten çok farklıdır.

197
00:12:02,990 --> 00:12:07,625
Sonuçta bu küçük süreç, soldan sağa doğru hareket ettiğinizde piksel

198
00:12:07,625 --> 00:12:11,857
değerinde değişiklik olan her yeri tespit eder ve böylece size

199
00:12:11,857 --> 00:12:16,560
görüntünüzün tüm dikey kenarlarını yakalamanız için bir tür yol sunar.

200
00:12:16,560 --> 00:12:20,755
Benzer şekilde, eğer ızgarayı yukarıdan aşağıya doğru hareket ettikçe

201
00:12:20,755 --> 00:12:24,891
değişecek şekilde döndürürsek, bu tüm yatay kenarlarda birikecektir,

202
00:12:24,891 --> 00:12:29,986
bu da küçük pasta yaratık görüntümüzde bazı oldukça şeytani gözlerle sonuçlanacaktır.

203
00:12:29,986 --> 00:12:33,298
Bu arada, bu daha küçük ızgaraya genellikle çekirdek denir ve buradaki güzel nokta,

204
00:12:33,298 --> 00:12:36,294
farklı bir çekirdek seçerek, yalnızca kenar algılamanızı bulanıklaştırmakla

205
00:12:36,294 --> 00:12:38,936
kalmayıp aynı zamanda keskinleştirme gibi şeyleri de içeren farklı

206
00:12:38,936 --> 00:12:40,710
görüntü işleme efektleri elde edebilmenizdir.

207
00:12:40,710 --> 00:12:44,009
Evrişimli bir sinir ağını duymuş olanlar için buradaki fikir,

208
00:12:44,009 --> 00:12:47,308
sinir ağının tespit etmek istediği şey tarafından belirlenen,

209
00:12:47,308 --> 00:12:51,618
ilk etapta çekirdeklerin ne olması gerektiğini bulmak için verileri kullanmaktır.

210
00:12:51,618 --> 00:12:55,378
Belki gündeme getirmem gereken başka bir şey de çıktının uzunluğu.

211
00:12:55,378 --> 00:12:59,694
Hareketli ortalama örneği gibi bir şey için, yalnızca her iki pencere de birbiriyle

212
00:12:59,694 --> 00:13:03,752
tamamen hizalandığında terimleri düşünmek isteyebilirsiniz veya görüntü işleme

213
00:13:03,752 --> 00:13:07,760
örneğinde son çıktının orijinalle aynı boyuta sahip olmasını isteyebilirsiniz.

214
00:13:07,760 --> 00:13:12,058
Artık saf bir matematik işlemi olarak evrişimler her zaman başladığınız iki diziden daha

215
00:13:12,058 --> 00:13:16,405
büyük bir dizi üretir, en azından bunlardan birinin uzunluğunun bir olmadığını varsayarak.

216
00:13:16,405 --> 00:13:18,766
Belirli bilgisayar bilimi bağlamlarında genellikle bu

217
00:13:18,766 --> 00:13:21,520
çıktıyı kasıtlı olarak kısaltmak istediğinizi bilmeniz yeterli.

218
00:13:21,520 --> 00:13:24,927
Vurgulamaya değer başka bir şey de, bilgisayar bilimi bağlamında,

219
00:13:24,927 --> 00:13:29,160
çekirdeğin orijinalin üzerinden geçmesine izin vermeden önce çekirdeğin etrafında

220
00:13:29,160 --> 00:13:32,876
dönme fikrinin çoğu zaman gerçekten tuhaf ve gereksiz hissettirdiğidir,

221
00:13:32,876 --> 00:13:37,109
ancak bunun saf matematik bağlamından miras alınan şey olduğunu tekrar unutmayın.

222
00:13:37,109 --> 00:13:41,291
olasılıkları göz önünde bulundurarak bunun yapılmasının inanılmaz derecede doğal

223
00:13:41,291 --> 00:13:42,530
bir şey olduğunu gördüm.

224
00:13:42,530 --> 00:13:45,827
Ve aslında size programcıların bile bunu önemsemesi gereken bir

225
00:13:45,827 --> 00:13:48,454
saf matematik örneği daha gösterebilirim çünkü bu,

226
00:13:48,454 --> 00:13:52,370
tüm bunları hesaplamak için çok daha hızlı bir algoritmanın kapılarını açar.

227
00:13:52,370 --> 00:13:55,948
Burada daha hızlı derken neyi kastettiğimi ayarlamak için geri dönüp

228
00:13:55,948 --> 00:13:59,579
biraz python çekeyim ve iki farklı, nispeten büyük dizi oluşturacağım.

229
00:13:59,579 --> 00:14:03,050
Her birinde yüz bin rastgele öğe bulunacak ve ben Numpy

230
00:14:03,050 --> 00:14:07,575
kütüphanesinden evrişim fonksiyonunun çalışma süresini değerlendireceğim.

231
00:14:07,575 --> 00:14:10,952
Ve bu durumda, onu birçok farklı yineleme için çalıştırıyor,

232
00:14:10,952 --> 00:14:15,214
bir ortalama bulmaya çalışıyor ve bu bilgisayarda en azından ortalama 4 gibi

233
00:14:15,214 --> 00:14:16,321
görünüyor.87 saniye.

234
00:14:16,321 --> 00:14:22,458
Buna karşılık, fftconvolve adlı scipy kütüphanesinden farklı bir işlev kullanırsam,

235
00:14:22,458 --> 00:14:27,060
bu sadece farklı şekilde uygulananla aynı şeydir ve yalnızca 4

236
00:14:27,060 --> 00:14:30,640
alır.Ortalama 3 milisaniye, yani üç kat iyileşme.

237
00:14:30,640 --> 00:14:34,554
Ve yine farklı bir isim altında uçsa da diğer evrişim fonksiyonunun yaptığı

238
00:14:34,554 --> 00:14:38,880
çıktının aynısını veriyor, sadece bunu daha akıllıca yapmak için bir şeyler yapıyor.

239
00:14:38,880 --> 00:14:43,030
Olasılık örneğiyle, evrişimi düşünmenin başka bir yolunun,

240
00:14:43,030 --> 00:14:47,533
tüm ikili çarpımların bu tablosunu oluşturmak ve sonra bu ikili

241
00:14:47,533 --> 00:14:52,528
çarpımları köşegenler boyunca toplamak olduğunu söylediğimi hatırlayın.

242
00:14:52,528 --> 00:14:55,984
Elbette olasılığa özgü hiçbir şey yoktur, iki farklı sayı

243
00:14:55,984 --> 00:14:59,321
listesini evriştirdiğinizde bu şekilde düşünebilirsiniz.

244
00:14:59,321 --> 00:15:02,946
Tüm ikili çarpımları içeren bu tür bir çarpım tablosu oluşturun ve ardından

245
00:15:02,946 --> 00:15:06,381
köşegen boyunca her toplam, nihai çıktılarınızdan birine karşılık gelir.

246
00:15:06,381 --> 00:15:12,431
Bu görüşün özellikle doğal olduğu bağlamlardan biri, iki polinomu birlikte çarpmanızdır.

247
00:15:12,431 --> 00:15:17,733
Örneğin, elimizdeki küçük tabloyu alıp üstteki terimleri 1,

248
00:15:17,733 --> 00:15:23,920
2x ve 3x kareyle, diğer terimleri de 4, 5x ve 6x kareyle değiştireyim.

249
00:15:23,920 --> 00:15:26,550
Şimdi iki liste arasında tüm bu farklı ikili çarpımları

250
00:15:26,550 --> 00:15:28,664
oluşturduğumuzun ne anlama geldiğini düşünün.

251
00:15:28,664 --> 00:15:34,438
Yaptığınız şey aslında yazdığım iki polinomun tam çarpımını genişletmek ve sonra tüm

252
00:15:34,438 --> 00:15:39,872
benzer terimleri toplamaya karşılık gelen köşegen boyunca toplama yaptığınızda,

253
00:15:39,872 --> 00:15:45,510
bu oldukça düzgün bir polinomu genişletmek ve benzer terimleri toplamak tam olarak

254
00:15:45,510 --> 00:15:46,937
evrişimle aynı süreç.

255
00:15:46,937 --> 00:15:50,259
Ancak bu bize oldukça hoş bir şey yapmamızı sağlıyor

256
00:15:50,259 --> 00:15:52,642
çünkü burada ne söylediğimizi düşünün.

257
00:15:52,642 --> 00:15:56,932
Diyoruz ki, iki farklı fonksiyon alıp bunları birbiriyle çarparsanız,

258
00:15:56,932 --> 00:16:01,897
ki bu basit bir noktasal işlemdir, bu, sanki polinom olduklarını varsayarak önce

259
00:16:01,897 --> 00:16:07,045
katsayıları her birinden çıkarmış ve sonra bunların evrişimini almış olmanızla aynı

260
00:16:07,045 --> 00:16:08,761
şeydir. iki katsayı listesi.

261
00:16:08,761 --> 00:16:13,100
Bunu bu kadar ilginç kılan şey, evrişimlerin prensipte basit çarpmadan çok daha karmaşık

262
00:16:13,100 --> 00:16:17,391
hissettirmesidir ve sadece kavramsal olarak düşünmenin daha zor olduğunu kastetmiyorum,

263
00:16:17,391 --> 00:16:21,682
hesaplama açısından bir evrişimi gerçekleştirmek için bir evrişimi gerçekleştirmek için

264
00:16:21,682 --> 00:16:26,070
olduğundan daha fazla adım gerektiğini kastediyorum. iki farklı listenin noktasal çarpımı.

265
00:16:26,070 --> 00:16:30,573
Örneğin, diyelim ki size her biri yüz farklı katsayıya sahip iki gerçekten

266
00:16:30,573 --> 00:16:35,376
büyük polinom verdim, o zaman bunları çarpma şekliniz bu çarpımı genişletmekse,

267
00:16:35,376 --> 00:16:40,360
bu 100&#39;e 100&#39;lük ikili çarpım tablosunun tamamını doldurmanızı gerektirir.

268
00:16:40,360 --> 00:16:45,043
10.000 farklı ürün gerçekleştirin ve ardından tüm benzer terimleri köşegenler

269
00:16:45,043 --> 00:16:49,666
boyunca topladığınızda, bu yaklaşık 10.000 işlemden oluşan başka bir dizidir.

270
00:16:49,666 --> 00:16:53,839
Daha genel olarak dilde, algoritmanın O&#39;nun n karesi olduğunu,

271
00:16:53,839 --> 00:16:59,321
yani n boyutlu iki liste için işlem ölçeklerinin sayısının n&#39;nin karesiyle orantılı

272
00:16:59,321 --> 00:17:00,816
olduğunu söyleyebiliriz.

273
00:17:00,816 --> 00:17:04,636
Öte yandan, iki polinomu çıktıları açısından düşünürsem,

274
00:17:04,636 --> 00:17:07,787
örneğin değerlerini birkaç girdide örneklemek,

275
00:17:07,787 --> 00:17:12,345
sonra bunları çarpmak yalnızca örnek sayısı kadar işlem gerektirir,

276
00:17:12,345 --> 00:17:17,774
çünkü yine bu noktasal bir işlemdir ve polinomlarla yalnızca ihtiyacınız vardır.

277
00:17:17,774 --> 00:17:21,126
katsayıları kurtarabilmek için sonlu sayıda örnek.

278
00:17:21,152 --> 00:17:25,214
Örneğin, doğrusal bir polinomu benzersiz şekilde belirtmek için iki çıktı yeterlidir.

279
00:17:25,214 --> 00:17:27,507
İkinci dereceden bir polinomu benzersiz bir şekilde

280
00:17:27,507 --> 00:17:29,360
belirtmek için üç çıktı yeterli olacaktır.

281
00:17:29,360 --> 00:17:32,281
Ve genel olarak, eğer n farklı çıktı biliyorsanız, bu,

282
00:17:32,281 --> 00:17:36,901
n farklı katsayıya sahip bir polinomu benzersiz bir şekilde belirlemek için yeterlidir.

283
00:17:36,901 --> 00:17:41,188
Veya isterseniz bunu denklem sistemleri diliyle ifade edebiliriz.

284
00:17:41,188 --> 00:17:43,792
Size bir polinomum olduğunu söylediğimi ancak katsayıların ne

285
00:17:43,792 --> 00:17:46,480
olduğunu söylemediğimi hayal edin, bunlar sizin için bir sırdır.

286
00:17:46,480 --> 00:17:50,666
Örneğimizde bunu anlamaya çalıştığımız ürün olarak düşünebilirsiniz.

287
00:17:50,666 --> 00:17:54,771
O zaman diyelim ki, size 0, 1, 2, 3 ve benzeri çeşitli farklı girdiler

288
00:17:54,771 --> 00:17:59,050
girerseniz bu polinomun çıktılarının ne olacağını söyleyeceğim ve size şu

289
00:17:59,050 --> 00:18:03,791
sayıda denklem elde etmenize yetecek kadar bilgi vereceğim. bilinmeyenleriniz var.

290
00:18:03,791 --> 00:18:07,245
Hatta doğrusal bir denklem sistemi bile var, bu çok güzel.

291
00:18:07,245 --> 00:18:11,137
Ve en azından prensipte bu, katsayıları geri kazanmak için yeterli olmalıdır.

292
00:18:11,137 --> 00:18:15,516
Yani kaba algoritma taslağı, iki sayı listesini evriştirmek istediğinizde,

293
00:18:15,516 --> 00:18:19,253
onlara iki polinomun katsayılarıymış gibi davranmanız olacaktır.

294
00:18:19,253 --> 00:18:23,332
Bu polinomları yeterli çıktıda örneklersiniz, bu örnekleri nokta

295
00:18:23,332 --> 00:18:27,411
bazında çarparsınız ve ardından evrişimi bulmanın gizli bir arka

296
00:18:27,411 --> 00:18:31,364
kapı yolu olarak katsayıları kurtarmak için sistemi çözersiniz.

297
00:18:31,364 --> 00:18:35,292
Ve en azından şu ana kadar belirttiğim gibi, bazılarınız haklı olarak &quot;Grant,

298
00:18:35,292 --> 00:18:37,564
bu aptalca bir plan&quot; diye şikayet edebilir.

299
00:18:37,564 --> 00:18:42,552
Çünkü bir kere, bildiğimiz polinomlardan biri için tüm bu örnekleri hesaplamak

300
00:18:42,552 --> 00:18:47,667
zaten n kareli işlemler sırasını alıyor; bu sistemi çözmenin hesaplama açısından

301
00:18:47,667 --> 00:18:52,656
kesinlikle ilk etapta evrişimi yapmak kadar zor olacağından bahsetmiyorum bile.

302
00:18:52,656 --> 00:18:56,272
Yani, elbette çarpma ve evrişimler arasında bir bağlantı var,

303
00:18:56,272 --> 00:19:01,054
ancak tüm karmaşıklık bir bakış açısından diğerine çeviri yaparken ortaya çıkıyor.

304
00:19:01,054 --> 00:19:04,280
Ancak bir püf noktası var ve Fourier dönüşümlerini ve FFT

305
00:19:04,280 --> 00:19:07,673
algoritmasını bilenleriniz bunun nereye varacağını görebilir.

306
00:19:07,673 --> 00:19:12,176
Eğer bu konulara yabancıysanız söyleyeceklerim tamamen durup dururken görünebilir.

307
00:19:12,176 --> 00:19:14,660
Sadece bunu daha beklenen bir adım haline getiren,

308
00:19:14,660 --> 00:19:17,582
matematikte yürüyebileceğiniz belirli yollar olduğunu bilin.

309
00:19:17,582 --> 00:19:20,697
Temel olarak fikir, burada seçim özgürlüğüne sahip olduğumuzdur.

310
00:19:20,697 --> 00:19:25,155
Eğer 0, 1, 2, 3 ve benzeri gibi bazı rastgele girdi kümelerini değerlendirmek yerine,

311
00:19:25,155 --> 00:19:28,369
çok özel olarak seçilmiş bir karmaşık sayılar kümesi üzerinde

312
00:19:28,369 --> 00:19:30,080
değerlendirme yapmayı seçerseniz.

313
00:19:30,080 --> 00:19:33,219
Özellikle birim çember üzerinde eşit aralıklarla oturanlar,

314
00:19:33,219 --> 00:19:34,894
birliğin kökleri olarak bilinir.

315
00:19:34,894 --> 00:19:37,364
Bu bize daha dostane bir sistem sağlıyor.

316
00:19:37,364 --> 00:19:42,145
Temel fikir şudur; güçlerini almanın bu döngü düzenine denk geldiği bir sayı bulmak,

317
00:19:42,145 --> 00:19:46,702
ürettiğimiz sistemin, hesapladığınız farklı terimlerle çok fazla fazlalığa sahip

318
00:19:46,702 --> 00:19:51,146
olacağı anlamına gelir ve bunun nasıl yapılacağı konusunda akıllı olunmalıdır.

319
00:19:51,146 --> 00:19:55,252
Bu fazlalıktan yararlanırsanız, kendinizi birçok işten kurtarabilirsiniz.

320
00:19:55,252 --> 00:19:58,600
Yazdığım bu çıktı kümesinin özel bir adı var,

321
00:19:58,600 --> 00:20:02,166
buna katsayıların ayrık Fourier dönüşümü deniyor.

322
00:20:02,166 --> 00:20:05,553
Daha fazlasını öğrenmek istiyorsanız, aynı Julia MIT dersinde

323
00:20:05,553 --> 00:20:09,103
ayrık Fourier dönüşümleri hakkında başka bir ders daha vermiştim.

324
00:20:09,103 --> 00:20:13,097
Ayrıca kanalda, bunları daha hızlı hesaplamak için bir algoritma olan

325
00:20:13,097 --> 00:20:17,263
hızlı Fourier dönüşümü hakkında konuşan, indirgenebilir bir video da var.

326
00:20:17,263 --> 00:20:20,641
Ayrıca Veritasium yakın zamanda FFT&#39;ler hakkında gerçekten iyi bir video hazırladı,

327
00:20:20,641 --> 00:20:21,984
dolayısıyla birçok seçeneğiniz var.

328
00:20:21,984 --> 00:20:24,786
Ve bu hızlı algoritma bizim için gerçekten önemli.

329
00:20:24,786 --> 00:20:29,360
Yine tüm bu fazlalık nedeniyle, katsayılardan tüm bu çıktılara gitmenin bir

330
00:20:29,360 --> 00:20:32,731
yöntemi vardır; burada n kareli işlemler yapmak yerine,

331
00:20:32,731 --> 00:20:37,667
n çarpı n işlemlerin logu mertebesinde yaparsınız ki bu çok fazla büyük listelere

332
00:20:37,667 --> 00:20:39,293
ölçeklendikçe çok daha iyi.

333
00:20:39,293 --> 00:20:42,386
Ve daha da önemlisi bu fft algoritması her iki yönde de çalışır.

334
00:20:42,386 --> 00:20:45,515
Ayrıca çıktılardan katsayılara gitmenizi sağlar.

335
00:20:45,515 --> 00:20:49,054
Hepsini bir araya getirerek algoritma taslağımıza tekrar bakalım.

336
00:20:49,054 --> 00:20:53,469
Şimdi diyebiliriz ki, size iki uzun sayı listesi verildiğinde ve bunların evrişimini

337
00:20:53,469 --> 00:20:57,624
almak istediğinizde, öncelikle her birinin hızlı Fourier dönüşümünü hesaplayın;

338
00:20:57,624 --> 00:21:01,468
aklınızın bir köşesinde bunun onlara şöyle davrandığını düşünebilirsiniz.

339
00:21:01,468 --> 00:21:05,883
bunlar bir polinomun katsayılarıdır ve onu çok özel olarak seçilmiş bir dizi noktada

340
00:21:05,883 --> 00:21:06,766
değerlendirirler.

341
00:21:06,766 --> 00:21:10,259
Daha sonra elde ettiğiniz iki sonucu noktasal olarak çarpın,

342
00:21:10,259 --> 00:21:14,324
ki bu güzel ve hızlıdır ve sonra ters hızlı bir Fourier dönüşümü yapın

343
00:21:14,324 --> 00:21:18,847
ve bu size aradığımız evrişimi hesaplamak için sinsi bir arka kapı yolu sağlar.

344
00:21:18,847 --> 00:21:22,957
Ancak bu sefer sadece O/n log n işlemlerini içeriyor.

345
00:21:22,957 --> 00:21:24,865
Bu benim için gerçekten harika!

346
00:21:24,865 --> 00:21:29,030
İki polinomun çarpılmasıyla evrişimlerin ortaya çıktığı bu çok özel bağlam,

347
00:21:29,030 --> 00:21:33,961
evrişimlerin ortaya çıkabileceği diğer her yerde geçerli olan bir algoritmanın kapılarını

348
00:21:33,961 --> 00:21:34,235
açar.

349
00:21:34,235 --> 00:21:37,461
Olasılık dağılımları eklemek istiyorsanız, her ne olursa olsun,

350
00:21:37,461 --> 00:21:38,822
büyük görüntü işleme yapın.

351
00:21:38,822 --> 00:21:43,336
Ve bence bu, matematikteki bir işlemin veya kavramın görünüşte alakasız birçok alanda

352
00:21:43,336 --> 00:21:47,798
ortaya çıktığını gördüğünüzde neden heyecanlanmanız gerektiğine dair güzel bir örnek.

353
00:21:47,798 --> 00:21:51,967
Eğer küçük bir ev ödevi istiyorsanız işte düşünmesi eğlenceli bir şey.

354
00:21:51,967 --> 00:21:55,234
İki farklı sayıyı çarptığınızda, hepimizin ilkokulda öğrendiği

355
00:21:55,234 --> 00:21:58,657
gibi sıradan çarpma işlemi yaptığınızda, yaptığınız şeyin temelde

356
00:21:58,657 --> 00:22:01,924
bu sayıların rakamları arasında bir evrişim olduğunu açıklayın.

357
00:22:01,924 --> 00:22:06,785
Taşıma ve benzeri bazı ilave adımlar vardır, ancak temel adım bir evrişimdir.

358
00:22:06,785 --> 00:22:10,158
Hızlı bir algoritmanın varlığının ışığında, bunun anlamı,

359
00:22:10,158 --> 00:22:13,879
iki çok büyük tamsayıya sahipseniz, bunların çarpımını bulmanın

360
00:22:13,879 --> 00:22:18,240
ilkokulda öğrendiğimiz yöntemden daha hızlı bir yolu olduğu anlamına gelir.

361
00:22:18,240 --> 00:22:22,460
Bu, O/n kare işlemlerini gerektirmek yerine yalnızca O/n log n&#39;yi gerektirir,

362
00:22:22,460 --> 00:22:25,291
ki bu da mümkün olması gerektiğini bile hissettirmiyor.

363
00:22:25,291 --> 00:22:28,044
İşin püf noktası şu ki, bunun pratikte gerçekten faydalı

364
00:22:28,044 --> 00:22:31,280
olabilmesi için rakamlarınızın kesinlikle canavarca olması gerekir.

365
00:22:31,280 --> 00:22:34,445
Ama yine de böyle bir algoritmanın var olması harika.

366
00:22:34,445 --> 00:22:42,170
Daha sonra dikkatimizi olasılık dağılımlarına

367
00:22:42,170 --> 00:22:50,400
özellikle odaklanarak sürekli duruma çevireceğiz.

