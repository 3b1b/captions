1
00:00:00,000 --> 00:00:03,958
Size iki farklı sayı listesi veya belki iki farklı işlev verdiğimi ve sizden yeni bir

2
00:00:03,958 --> 00:00:07,824
sayı listesi elde etmek için bu iki listeyi birleştirmenin veya yeni bir işlev elde

3
00:00:07,824 --> 00:00:11,737
etmek için iki işlevi birleştirmenin tüm yollarını düşünmenizi istediğimi varsayalım.

4
00:00:11,737 --> 00:00:16,267
Belki akla gelen basit bir yol, bunları terim terim bir araya getirmektir.

5
00:00:16,267 --> 00:00:20,050
İşlevlerde olduğu gibi, karşılık gelen tüm çıktıları da ekleyebilirsiniz.

6
00:00:20,050 --> 00:00:23,346
Benzer şekilde, iki listeyi terim terimle çarpabilir

7
00:00:23,346 --> 00:00:26,145
ve aynı şeyi işlevler için de yapabilirsiniz.

8
00:00:26,145 --> 00:00:30,151
Ancak her ikisi kadar temel olan ancak çok daha az tartışılan,

9
00:00:30,151 --> 00:00:33,840
evrişim olarak bilinen başka bir tür kombinasyon daha var.

10
00:00:33,840 --> 00:00:36,810
Ancak önceki iki durumdan farklı olarak bu, sayılara

11
00:00:36,810 --> 00:00:39,893
yapabileceğiniz bir işlemden miras kalan bir şey değil.

12
00:00:39,893 --> 00:00:44,716
Sayı listeleri veya birleştirme işlevleri bağlamında gerçekten yeni bir şey.

13
00:00:44,716 --> 00:00:48,576
Her yerde karşımıza çıkıyorlar, görüntü işlemede her yerde mevcutlar,

14
00:00:48,576 --> 00:00:52,491
olasılık teorisinin temel yapılarından biri, diferansiyel denklemlerin

15
00:00:52,491 --> 00:00:56,075
çözümünde çok kullanılıyorlar ve onu neredeyse kesinlikle görmüş

16
00:00:56,075 --> 00:01:00,210
olduğunuz bir bağlam var, olmasa da. bu isimle iki polinomun çarpılmasıdır.

17
00:01:00,210 --> 00:01:04,927
Görsel açıklamalar işinde çalışan biri olarak bu özellikle harika bir konudur, çünkü

18
00:01:04,927 --> 00:01:09,754
kalıplaşmış tanım tek başına ve bağlamdan bağımsız olarak biraz korkutucu görünebilir,

19
00:01:09,754 --> 00:01:14,360
ancak ne söylediğini gerçekten açmak için zaman ayırırsak ve bundan önce gerçekten

20
00:01:14,360 --> 00:01:18,800
nedenini motive edersek böyle bir şey istersiniz, inanılmaz güzel bir operasyon.

21
00:01:18,800 --> 00:01:21,162
Ve itiraf etmeliyim ki, bu proje için görselleri bir

22
00:01:21,162 --> 00:01:23,436
araya getirirken aslında küçük bir şeyler öğrendim.

23
00:01:23,436 --> 00:01:27,283
İki farklı fonksiyonun evrilmesi durumunda, bunun ne anlama gelebileceğini hayal

24
00:01:27,283 --> 00:01:31,083
edebileceğiniz farklı yollar düşünmeye çalışıyordum ve bunlardan biriyle normal

25
00:01:31,083 --> 00:01:34,883
dağılımların neden bu rolü oynadığına dair biraz aha anı yaşadım. bir fonksiyon

26
00:01:34,883 --> 00:01:38,445
için neden bu kadar doğal bir şekil olduğunu olasılık dahilinde yapıyorlar.

27
00:01:38,445 --> 00:01:41,580
Ama kendimi aşıyorum, bunun için pek çok kurulum var.

28
00:01:41,580 --> 00:01:45,861
Bu videoda asıl odak noktamız ayrık durum üzerinde olacak ve özellikle bunları

29
00:01:45,861 --> 00:01:50,196
hesaplamak için çok beklenmedik ama çok akıllı bir algoritma geliştirmek olacak.

30
00:01:50,196 --> 00:01:57,840
Devam eden vakaya ilişkin tartışmayı ikinci bir kısma aktaracağım.

31
00:01:57,840 --> 00:02:02,357
Görüntü işleme örnekleriyle başlamak çok cazip çünkü görsel olarak en ilgi çekici

32
00:02:02,357 --> 00:02:07,095
olanlar bunlar, ancak görüntü işleme durumunu genel olarak evrişimleri daha az temsil

33
00:02:07,095 --> 00:02:11,888
eden birkaç parça titizlik var, o yüzden bunun yerine işleri olasılıklarla başlatalım,

34
00:02:11,888 --> 00:02:16,626
ve özellikle buradaki herkesin hayatının bir noktasında düşündüğünden emin olduğum en

35
00:02:16,626 --> 00:02:21,530
basit örneklerden biri; bir çift zar atmak ve farklı toplamları görme şansını hesaplamak.

36
00:02:21,530 --> 00:02:24,170
Ve diyebilirsiniz ki sorun değil, sorun değil.

37
00:02:24,170 --> 00:02:28,150
İki zarınızın her birinin altı farklı olası sonucu vardır, bu

38
00:02:28,150 --> 00:02:32,323
da bize toplam 36 farklı olası sonuç çifti verir ve eğer hepsine

39
00:02:32,323 --> 00:02:36,240
bakarsak, belirli bir toplamın kaç çift olduğunu sayabiliriz.

40
00:02:36,240 --> 00:02:40,777
Ve tüm çiftleri bu şekilde bir ızgaraya yerleştirdiğimizde oldukça hoş olan şey,

41
00:02:40,777 --> 00:02:45,650
sabit toplamı olan tüm çiftlerin bu farklı köşegenlerden biri boyunca görülebilmesidir.

42
00:02:45,650 --> 00:02:49,265
Yani sadece bu köşegenlerin her birinde kaç tane bulunduğunu saymak size

43
00:02:49,265 --> 00:02:52,880
belirli bir toplamı görme olasılığınızın ne kadar olduğunu söyleyecektir.

44
00:02:52,880 --> 00:02:55,588
Ben de çok iyi, çok iyi derdim ama aynı soruyu

45
00:02:55,588 --> 00:02:58,699
görselleştirmenin başka yollarını düşünebiliyor musun?

46
00:02:58,699 --> 00:03:01,319
Belirli bir toplamı olan tüm farklı çiftleri düşünmek

47
00:03:01,319 --> 00:03:03,744
için aklınıza gelebilecek başka görüntüler var mı?

48
00:03:03,744 --> 00:03:07,550
Belki biriniz elini kaldırır ve evet bende bir tane var der.

49
00:03:07,550 --> 00:03:10,983
Diyelim ki bu iki farklı olasılık kümesini arka arkaya gözünüzde

50
00:03:10,983 --> 00:03:14,046
canlandırıyorsunuz, ancak ikinci sırayı değiştiriyorsunuz.

51
00:03:14,046 --> 00:03:18,960
Böylece toplamı yediye ulaşan tüm farklı çiftler dikey olarak bu şekilde sıralanır.

52
00:03:18,960 --> 00:03:22,571
Ve eğer alt sırayı tamamen sağa kaydırırsak, toplamı iki

53
00:03:22,571 --> 00:03:26,309
olan benzersiz çift, yani yılanın gözleri aynı hizada olur.

54
00:03:26,309 --> 00:03:29,340
Ve eğer bunu bir birim sağa doğru kaydırırsam,

55
00:03:29,340 --> 00:03:32,886
hizalanan çiftler toplamı üç olan iki farklı çift olur.

56
00:03:32,886 --> 00:03:37,135
Ve genel olarak, bu alt dizinin farklı ofset değerleri, ki hatırladığım kadarıyla ilk

57
00:03:37,135 --> 00:03:41,284
önce ters çevirmem gerekiyordu, belirli bir toplamı olan tüm farklı çiftleri ortaya

58
00:03:41,284 --> 00:03:41,778
çıkarıyor.

59
00:03:41,778 --> 00:03:47,764
Olasılık sorularına gelince, bu hala pek ilgi çekici değil çünkü yaptığımız

60
00:03:47,764 --> 00:03:53,120
tek şey bu kategorilerin her birinde kaç tane sonuç olduğunu saymak.

61
00:03:53,120 --> 00:03:55,423
Ancak bu, bu yüzlerin her birinin ortaya çıkma şansının

62
00:03:55,423 --> 00:03:57,850
eşit olduğu yönündeki örtülü varsayımdan kaynaklanmaktadır.

63
00:03:57,850 --> 00:04:01,897
Peki ya sana tekdüze olmayan özel bir zar setim olduğunu söylesem?

64
00:04:01,897 --> 00:04:05,847
Belki mavi zarın her yüzün gelme olasılığını açıklayan kendi sayıları

65
00:04:05,847 --> 00:04:09,740
vardır ve kırmızı zarın da kendine özgü farklı sayılar dizisi vardır.

66
00:04:09,740 --> 00:04:14,852
Bu durumda, diyelim ki iki gelme olasılığını hesaplamak istiyorsanız, mavi

67
00:04:14,852 --> 00:04:19,895
zarın bir olma olasılığını kırmızı zarın bir olma olasılığını çarparsınız.

68
00:04:19,895 --> 00:04:24,684
Ve üçü görme şansı için, mümkün olan yerlerde iki ayrı çifte bakarsınız ve

69
00:04:24,684 --> 00:04:29,983
karşılık gelen olasılıkları tekrar çarparsınız ve sonra bu iki çarpımı toplarsınız.

70
00:04:29,983 --> 00:04:33,263
Benzer şekilde, dörtlü görme şansı da üç farklı

71
00:04:33,263 --> 00:04:36,748
olasılık çiftini çarparak hepsini toplamayı içerir.

72
00:04:36,748 --> 00:04:41,260
Ve bazı formüller oluşturma ruhuna uygun olarak, bu üst olasılıklara

73
00:04:41,260 --> 00:04:45,903
a1, a2, a3 vb. , alttaki olasılıklara ise b1, b2, b3 vb. adını verelim.

74
00:04:45,903 --> 00:04:49,699
Ve genel olarak, bu süreç, iki farklı sayı dizisini alıp ikincisini ters

75
00:04:49,699 --> 00:04:53,287
çevirdiğimiz ve daha sonra bunları çeşitli farklı ofset değerlerinde

76
00:04:53,287 --> 00:04:57,083
sıraladığımız, bir grup ikili çarpım alıp bunları topladığımız bu süreç,

77
00:04:57,083 --> 00:05:01,139
bu işlemlerden biridir. Evrişimin ne olduğu hakkında düşünmenin temel yolları.

78
00:05:01,139 --> 00:05:06,600
Bunu biraz daha net bir şekilde açıklamak gerekirse, bu süreç boyunca iki,

79
00:05:06,600 --> 00:05:11,696
üç, dört ve 12&#39;ye kadar görme olasılıkları ürettik ve bunları bir

80
00:05:11,696 --> 00:05:17,084
değer listesi, a ve diğerini karıştırarak elde ettik. değerler listesi, b.

81
00:05:17,084 --> 00:05:22,428
Dilde, bu iki dizinin evrişiminin bize bu yeni diziyi, her biri ikili çarpımların

82
00:05:22,428 --> 00:05:27,120
toplamı gibi görünen 11 değerden oluşan yeni diziyi verdiğini söylerdik.

83
00:05:27,120 --> 00:05:31,557
İsterseniz, aynı işlemi düşünmenin başka bir yolu da, önce tüm ikili

84
00:05:31,557 --> 00:05:36,702
çarpımların bir tablosunu oluşturmak ve ardından tüm bu köşegenleri toplamaktır.

85
00:05:36,702 --> 00:05:39,323
Yine, bu, bize 11 sayıdan oluşan yeni bir dizi elde

86
00:05:39,323 --> 00:05:42,247
etmek için bu iki sayı dizisini karıştırmanın bir yoludur.

87
00:05:42,247 --> 00:05:46,960
Bu, sürgülü pencerelerin düşündüğü işlemin aynısı, sadece başka bir bakış açısı.

88
00:05:46,960 --> 00:05:50,314
Üzerine küçük bir notasyon koyarak, bunun nasıl yazıldığını görebilirsiniz.

89
00:05:50,314 --> 00:05:55,065
Bu küçük yıldız işaretiyle gösterilen a ve b&#39;nin evrişimi yeni bir listedir ve

90
00:05:55,065 --> 00:06:00,045
bu listenin n&#39;inci elemanı bir toplama benzer ve bu toplam, i ve j gibi tüm farklı

91
00:06:00,045 --> 00:06:04,738
endeks çiftlerinin üzerinden geçer, böylece toplamı bu endeksler n&#39;ye eşittir.

92
00:06:04,738 --> 00:06:08,668
Biraz ağız dolusu olacak ama örneğin, eğer n 6 ise, üzerinde

93
00:06:08,668 --> 00:06:12,534
duracağımız çiftler 1 ve 5, 2 ve 4, 3 ve 3, 4 ve 2, 5 ve 1,

94
00:06:12,534 --> 00:06:16,400
yani toplamı toplayan tüm farklı çiftlerdir. 6&#39;ya kadar.

95
00:06:16,400 --> 00:06:19,884
Ama dürüst olmak gerekirse, nasıl yazarsanız yazın, süreç için kafanızda

96
00:06:19,884 --> 00:06:23,082
tutabileceğiniz görselin önemi açısından notasyon ikinci plandadır.

97
00:06:23,082 --> 00:06:27,053
Burada belki çok basit bir örnek yapmak faydalı olabilir; size 1, 2,

98
00:06:27,053 --> 00:06:30,967
3 listesinin 4, 5, 6 listesiyle evrişiminin ne olduğunu sorabilirim.

99
00:06:30,967 --> 00:06:34,591
Bu listelerin her ikisini de alıp, ikincisinin etrafında dolaştığını ve ardından

100
00:06:34,591 --> 00:06:37,857
kapağından başlayarak tamamen sola doğru başladığını hayal edebilirsiniz.

101
00:06:37,857 --> 00:06:40,734
Daha sonra hizalanan değer çifti 1 ve 4&#39;tür, bunları

102
00:06:40,734 --> 00:06:43,813
birbiriyle çarparız ve bu bize çıktımızın ilk terimini verir.

103
00:06:43,813 --> 00:06:48,903
Alt diziyi bir birim sağa kaydırın, hizalanan çiftler 1 ve 5 ve 2 ve 4&#39;tür, bu

104
00:06:48,903 --> 00:06:54,300
çiftleri çarpın, toplayın ve bu bize çıktımızdaki bir sonraki girdi olan 13&#39;ü verir.

105
00:06:54,300 --> 00:07:01,591
Bir kez daha yana kaydırırsak 1 çarpı 6, artı 2 çarpı 5, artı 3 çarpı 4, yani 28 olur.

106
00:07:01,591 --> 00:07:05,971
Bir slayt daha, ve 2 çarpı 6 artı 3 çarpı 5 elde ederiz, bu da

107
00:07:05,971 --> 00:07:10,560
bize 27 verir ve son olarak son terim 3 çarpı 6 gibi görünecektir.

108
00:07:10,560 --> 00:07:14,546
İsterseniz en sevdiğiniz programlama dilini ve çeşitli sayısal işlemleri

109
00:07:14,546 --> 00:07:18,807
içeren favori kütüphanenizi açıp size yalan söylemediğimi doğrulayabilirsiniz.

110
00:07:18,807 --> 00:07:21,933
Eğer 1, 2, 3&#39;ün 4, 5, 6&#39;ya karşı evrişimini

111
00:07:21,933 --> 00:07:24,880
alırsanız, gerçekten elde edeceğiniz sonuç budur.

112
00:07:24,880 --> 00:07:28,934
Bunun doğal ve arzu edilen bir işlem olduğu, olasılık dağılımlarına eklenen

113
00:07:28,934 --> 00:07:32,881
bir durum gördük ve diğer bir yaygın örnek de hareketli ortalama olabilir.

114
00:07:32,881 --> 00:07:35,835
Uzun bir sayı listeniz olduğunu ve toplamı 1 olan

115
00:07:35,835 --> 00:07:38,788
daha küçük bir sayı listesi aldığınızı hayal edin.

116
00:07:38,788 --> 00:07:43,381
Bu durumda elimde 5 değerden oluşan küçük bir liste var ve bunların hepsi 1 5&#39;e eşit.

117
00:07:43,381 --> 00:07:47,421
Daha sonra, bu kayan pencere evrişim işlemini yaparsak ve gözlerimizi

118
00:07:47,421 --> 00:07:51,231
kapatırsak ve en başında olanları halının altına süpürürsek, daha

119
00:07:51,231 --> 00:07:55,156
küçük değer listemiz büyük olanla tamamen örtüştüğünde, bu buradaki

120
00:07:55,156 --> 00:07:59,023
her terimin ne olduğunu düşünün. evrişim gerçekten şu anlama gelir.

121
00:07:59,023 --> 00:08:04,963
Her yinelemede yaptığınız şey, verilerinizdeki değerlerin her birini 1/5 ile çarpmak ve

122
00:08:04,963 --> 00:08:10,769
hepsini toplamaktır, yani bu küçük penceredeki verilerinizin ortalamasını alıyorsunuz.

123
00:08:10,769 --> 00:08:13,925
Genel olarak, süreç size orijinal verinin yumuşatılmış bir versiyonunu

124
00:08:13,925 --> 00:08:16,503
verir ve bunu farklı küçük bir sayı listesiyle başlayarak

125
00:08:16,503 --> 00:08:19,437
değiştirebilirsiniz ve bu küçük listenin toplamı 1&#39;e ulaştığı

126
00:08:19,437 --> 00:08:22,816
sürece, onu yine de hareketli bir sayı olarak yorumlayabilirsiniz. ortalama.

127
00:08:22,816 --> 00:08:25,173
Burada gösterilen örnekte, hareketli ortalama,

128
00:08:25,173 --> 00:08:27,781
merkezi değere daha fazla ağırlık veriyor olacaktır.

129
00:08:27,781 --> 00:08:33,200
Bu aynı zamanda verilerin düzeltilmiş bir versiyonuyla da sonuçlanır.

130
00:08:33,200 --> 00:08:36,003
Bunun iki boyutlu bir benzerini yaparsanız, belirli bir görüntüyü

131
00:08:36,003 --> 00:08:38,594
bulanıklaştırmak için eğlenceli bir algoritma elde edersiniz.

132
00:08:38,594 --> 00:08:42,471
Ve birazdan göstereceğim animasyonların, MIT&#39;deki Julia Laboratuvarı&#39;nda,

133
00:08:42,471 --> 00:08:46,537
görüntü işleme birimi içeren belirli bir OpenCourseWare sınıfı için yaptığım bir dizi

134
00:08:46,537 --> 00:08:50,272
dersin bir parçası olarak orijinal olarak yaptığım bir şeyden değiştirildiğini

135
00:08:50,272 --> 00:08:50,887
söylemeliyim.

136
00:08:50,887 --> 00:08:53,808
Tüm bunların arkasındaki koda dalmak için biraz daha çalıştık,

137
00:08:53,808 --> 00:08:56,452
eğer merak ediyorsanız size bazı bağlantılar bırakacağım.

138
00:08:56,452 --> 00:09:00,487
Ancak bu bulanık örneğe tekrar odaklanırsak, orijinal görüntümüz boyunca

139
00:09:00,487 --> 00:09:04,246
ilerleyen 3x3&#39;lük küçük bir değerler ızgarasına sahibim ve eğer

140
00:09:04,246 --> 00:09:08,503
yakınlaştırırsak, bu değerlerin her biri 19&#39;uncu ve ben ne yapıyorum her

141
00:09:08,503 --> 00:09:13,312
yinelemede bu değerlerin her biri, üzerinde bulunduğu karşılık gelen pikselle çarpılır.

142
00:09:13,312 --> 00:09:16,805
Ve tabii ki bilgisayar bilimlerinde renkleri, kırmızı, yeşil ve mavi

143
00:09:16,805 --> 00:09:20,400
bileşenleri temsil eden üç değerin küçük vektörleri olarak düşünüyoruz.

144
00:09:20,400 --> 00:09:25,683
Tüm bu küçük değerleri 19&#39;la çarpıp topladığım zaman, bu bize her renk kanalı boyunca

145
00:09:25,683 --> 00:09:30,966
bir ortalama verir ve sağdaki görüntüye karşılık gelen piksel bu toplam olarak tanımlanır.

146
00:09:30,966 --> 00:09:36,222
Bunu görüntüdeki her bir piksel için yaptığımız genel etki, her bir türün tüm

147
00:09:36,222 --> 00:09:41,680
komşularına sızmasıdır, bu da bize orijinalinden daha bulanık bir versiyon verir.

148
00:09:41,680 --> 00:09:44,685
Dilde, sağdaki görüntünün, orijinal görüntümüzün küçük

149
00:09:44,685 --> 00:09:47,800
bir değerler tablosuyla evrişimi olduğunu söyleyebiliriz.

150
00:09:47,800 --> 00:09:51,090
Ya da daha teknik olarak belki de bunun, o küçük değerler ağının

151
00:09:51,090 --> 00:09:54,430
180 derece döndürülmüş versiyonuyla evrişim olduğunu söylemeliyim.

152
00:09:54,430 --> 00:09:58,278
Izgaranın simetrik olması önemli değil, ancak saf matematik bağlamından

153
00:09:58,278 --> 00:10:02,072
miras alınan evrişim tanımının sizi her zaman ikinci dizinin etrafında

154
00:10:02,072 --> 00:10:05,760
dönmeyi düşünmeye davet etmesi gerektiğini akılda tutmakta fayda var.

155
00:10:05,760 --> 00:10:08,519
Bunu biraz değiştirirsek, farklı bir değerler ızgarası seçerek

156
00:10:08,519 --> 00:10:11,059
çok daha zarif bir bulanıklaştırma efekti elde edebiliriz.

157
00:10:11,059 --> 00:10:15,920
Bu durumda, 5x5&#39;lik küçük bir ızgaram var, ancak fark onun boyutunda değil.

158
00:10:15,920 --> 00:10:19,283
Yakınlaştırırsak ortadaki değerin kenarlardaki değerden çok daha

159
00:10:19,283 --> 00:10:22,647
büyük olduğunu fark ederiz ve bunun kaynağı da bunların hepsinin

160
00:10:22,647 --> 00:10:26,010
Gauss dağılımı olarak bilinen bir çan eğrisinden örneklenmesidir.

161
00:10:26,010 --> 00:10:29,389
Bu şekilde, tüm bu değerleri, üzerinde bulundukları karşılık

162
00:10:29,389 --> 00:10:32,989
gelen pikselle çarptığımızda, merkezdeki piksele çok daha fazla,

163
00:10:32,989 --> 00:10:36,367
kenardaki piksellere ise çok daha az ağırlık vermiş oluyoruz.

164
00:10:36,367 --> 00:10:38,480
Ve tıpkı daha önce olduğu gibi sağdaki karşılık

165
00:10:38,480 --> 00:10:40,373
gelen piksel bu toplam olarak tanımlanıyor.

166
00:10:40,373 --> 00:10:45,014
Bu işlemi her bir piksel için yaptığımızda, lensinizi odak dışı bırakma veya buna benzer

167
00:10:45,014 --> 00:10:49,394
bir fikri çok daha gerçekçi bir şekilde simüle eden bir bulanıklaştırma efekti elde

168
00:10:49,394 --> 00:10:49,760
edilir.

169
00:10:49,760 --> 00:10:53,474
Ancak bulanıklaştırma bu fikirle yapabileceğiniz tek şeyden çok uzaktır.

170
00:10:53,474 --> 00:10:57,969
Örneğin, solda bazı pozitif sayılar ve sağda bazı negatif sayılar içeren,

171
00:10:57,969 --> 00:11:03,071
sırasıyla mavi ve kırmızıyla renklendireceğim bu küçük değerler tablosuna bir bakın.

172
00:11:03,071 --> 00:11:06,394
Bunun son görüntü üzerinde ne gibi bir etkisi olacağını tahmin

173
00:11:06,394 --> 00:11:09,769
edip anlayıp anlayamadığınızı görmek için bir dakikanızı ayırın.

174
00:11:09,769 --> 00:11:14,132
Yani bu durumda görüntüyü renkli yerine gri tonlamalı olarak düşüneceğim,

175
00:11:14,132 --> 00:11:18,082
böylece piksellerin her biri üç yerine bir sayıyla temsil ediliyor.

176
00:11:18,082 --> 00:11:20,364
Ve dikkat edilmesi gereken bir şey de bu evrişimi

177
00:11:20,364 --> 00:11:23,102
yaptığımızda negatif değerler elde etmenin mümkün olmasıdır.

178
00:11:23,102 --> 00:11:27,473
Örneğin, bu noktada yakınlaştırırsak, küçük ızgaramızın sol yarısı tamamen siyah

179
00:11:27,473 --> 00:11:31,682
piksellerin üzerinde yer alır, bu da sıfır değerine sahip olur, ancak negatif

180
00:11:31,682 --> 00:11:36,000
değerlerin sağ yarısı beyaz piksellerin üzerinde yer alır, bu da bir değeri var.

181
00:11:36,000 --> 00:11:39,384
Karşılık gelen terimleri çarpıp bunları topladığımızda sonuçlar

182
00:11:39,384 --> 00:11:42,662
çok negatif olacaktır ve bunu sağdaki resimde gösterme şeklim

183
00:11:42,662 --> 00:11:46,046
negatif değerleri kırmızıya ve pozitif değerleri maviye boyamak.

184
00:11:46,046 --> 00:11:48,998
Dikkat edilmesi gereken bir diğer nokta da, tamamı aynı renk

185
00:11:48,998 --> 00:11:51,757
olan bir parça üzerinde olduğunuzda, küçük ızgaramızdaki

186
00:11:51,757 --> 00:11:54,854
değerlerin toplamı sıfır olduğundan her şeyin sıfıra gitmesidir.

187
00:11:54,854 --> 00:11:59,113
Bu, küçük ızgaramızın toplamının bir olduğu ve onu hareketli bir ortalama ve dolayısıyla

188
00:11:59,113 --> 00:12:02,990
bulanıklık olarak yorumlamamıza olanak tanıyan önceki iki örnekten çok farklıdır.

189
00:12:02,990 --> 00:12:07,625
Sonuçta bu küçük süreç, soldan sağa doğru hareket ettiğinizde piksel

190
00:12:07,625 --> 00:12:11,857
değerinde değişiklik olan her yeri tespit eder ve böylece size

191
00:12:11,857 --> 00:12:16,560
görüntünüzün tüm dikey kenarlarını yakalamanız için bir tür yol sunar.

192
00:12:16,560 --> 00:12:20,755
Benzer şekilde, eğer ızgarayı yukarıdan aşağıya doğru hareket ettikçe

193
00:12:20,755 --> 00:12:25,251
değişecek şekilde döndürürsek, bu tüm yatay kenarlarda birikecektir, bu da

194
00:12:25,251 --> 00:12:29,986
küçük pasta yaratık görüntümüzde bazı oldukça şeytani gözlerle sonuçlanacaktır.

195
00:12:29,986 --> 00:12:32,785
Bu arada, bu daha küçük ızgaraya genellikle çekirdek denir ve buradaki

196
00:12:32,785 --> 00:12:35,545
güzel nokta, farklı bir çekirdek seçerek, yalnızca kenar algılamanızı

197
00:12:35,545 --> 00:12:38,265
bulanıklaştırmakla kalmayıp aynı zamanda keskinleştirme gibi şeyleri

198
00:12:38,265 --> 00:12:40,710
de içeren farklı görüntü işleme efektleri elde edebilmenizdir.

199
00:12:40,710 --> 00:12:44,328
Evrişimli bir sinir ağını duymuş olanlar için buradaki fikir, sinir

200
00:12:44,328 --> 00:12:47,893
ağının tespit etmek istediği şey tarafından belirlenen, ilk etapta

201
00:12:47,893 --> 00:12:51,618
çekirdeklerin ne olması gerektiğini bulmak için verileri kullanmaktır.

202
00:12:51,618 --> 00:12:55,378
Belki gündeme getirmem gereken başka bir şey de çıktının uzunluğu.

203
00:12:55,378 --> 00:12:59,694
Hareketli ortalama örneği gibi bir şey için, yalnızca her iki pencere de birbiriyle

204
00:12:59,694 --> 00:13:03,752
tamamen hizalandığında terimleri düşünmek isteyebilirsiniz veya görüntü işleme

205
00:13:03,752 --> 00:13:07,760
örneğinde son çıktının orijinalle aynı boyuta sahip olmasını isteyebilirsiniz.

206
00:13:07,760 --> 00:13:12,058
Artık saf bir matematik işlemi olarak evrişimler her zaman başladığınız iki diziden daha

207
00:13:12,058 --> 00:13:16,405
büyük bir dizi üretir, en azından bunlardan birinin uzunluğunun bir olmadığını varsayarak.

208
00:13:16,405 --> 00:13:18,766
Belirli bilgisayar bilimi bağlamlarında genellikle bu

209
00:13:18,766 --> 00:13:21,520
çıktıyı kasıtlı olarak kısaltmak istediğinizi bilmeniz yeterli.

210
00:13:21,520 --> 00:13:25,494
Vurgulamaya değer başka bir şey de, bilgisayar bilimi bağlamında, çekirdeğin

211
00:13:25,494 --> 00:13:29,469
orijinalin üzerinden geçmesine izin vermeden önce çekirdeğin etrafında dönme

212
00:13:29,469 --> 00:13:33,702
fikrinin çoğu zaman gerçekten tuhaf ve gereksiz hissettirdiğidir, ancak bunun saf

213
00:13:33,702 --> 00:13:37,780
matematik bağlamından miras alınan şey olduğunu tekrar unutmayın. olasılıkları

214
00:13:37,780 --> 00:13:42,168
göz önünde bulundurarak bunun yapılmasının inanılmaz derecede doğal bir şey olduğunu

215
00:13:42,168 --> 00:13:42,530
gördüm.

216
00:13:42,530 --> 00:13:45,827
Ve aslında size programcıların bile bunu önemsemesi gereken bir

217
00:13:45,827 --> 00:13:49,073
saf matematik örneği daha gösterebilirim çünkü bu, tüm bunları

218
00:13:49,073 --> 00:13:52,370
hesaplamak için çok daha hızlı bir algoritmanın kapılarını açar.

219
00:13:52,370 --> 00:13:55,948
Burada daha hızlı derken neyi kastettiğimi ayarlamak için geri dönüp

220
00:13:55,948 --> 00:13:59,579
biraz python çekeyim ve iki farklı, nispeten büyük dizi oluşturacağım.

221
00:13:59,579 --> 00:14:03,050
Her birinde yüz bin rastgele öğe bulunacak ve ben Numpy

222
00:14:03,050 --> 00:14:07,575
kütüphanesinden evrişim fonksiyonunun çalışma süresini değerlendireceğim.

223
00:14:07,575 --> 00:14:11,597
Ve bu durumda, onu birçok farklı yineleme için çalıştırıyor, bir ortalama

224
00:14:11,597 --> 00:14:15,619
bulmaya çalışıyor ve bu bilgisayarda en azından ortalama 4 gibi görünüyor.

225
00:14:15,619 --> 00:14:16,321
87 saniye.

226
00:14:16,321 --> 00:14:20,871
Buna karşılık, fftconvolve adlı scipy kütüphanesinden farklı bir işlev

227
00:14:20,871 --> 00:14:26,061
kullanırsam, bu sadece farklı şekilde uygulananla aynı şeydir ve yalnızca 4 alır.

228
00:14:26,061 --> 00:14:30,640
Ortalama 3 milisaniye, yani üç kat iyileşme.

229
00:14:30,640 --> 00:14:34,554
Ve yine farklı bir isim altında uçsa da diğer evrişim fonksiyonunun yaptığı

230
00:14:34,554 --> 00:14:38,880
çıktının aynısını veriyor, sadece bunu daha akıllıca yapmak için bir şeyler yapıyor.

231
00:14:38,880 --> 00:14:43,312
Olasılık örneğiyle, evrişimi düşünmenin başka bir yolunun, tüm

232
00:14:43,312 --> 00:14:47,533
ikili çarpımların bu tablosunu oluşturmak ve sonra bu ikili

233
00:14:47,533 --> 00:14:52,528
çarpımları köşegenler boyunca toplamak olduğunu söylediğimi hatırlayın.

234
00:14:52,528 --> 00:14:55,984
Elbette olasılığa özgü hiçbir şey yoktur, iki farklı sayı

235
00:14:55,984 --> 00:14:59,321
listesini evriştirdiğinizde bu şekilde düşünebilirsiniz.

236
00:14:59,321 --> 00:15:02,946
Tüm ikili çarpımları içeren bu tür bir çarpım tablosu oluşturun ve ardından

237
00:15:02,946 --> 00:15:06,381
köşegen boyunca her toplam, nihai çıktılarınızdan birine karşılık gelir.

238
00:15:06,381 --> 00:15:12,431
Bu görüşün özellikle doğal olduğu bağlamlardan biri, iki polinomu birlikte çarpmanızdır.

239
00:15:12,431 --> 00:15:18,264
Örneğin, elimizdeki küçük tabloyu alıp üstteki terimleri 1, 2x ve

240
00:15:18,264 --> 00:15:23,920
3x kareyle, diğer terimleri de 4, 5x ve 6x kareyle değiştireyim.

241
00:15:23,920 --> 00:15:26,550
Şimdi iki liste arasında tüm bu farklı ikili çarpımları

242
00:15:26,550 --> 00:15:28,664
oluşturduğumuzun ne anlama geldiğini düşünün.

243
00:15:28,664 --> 00:15:34,438
Yaptığınız şey aslında yazdığım iki polinomun tam çarpımını genişletmek ve sonra tüm

244
00:15:34,438 --> 00:15:40,076
benzer terimleri toplamaya karşılık gelen köşegen boyunca toplama yaptığınızda, bu

245
00:15:40,076 --> 00:15:46,189
oldukça düzgün bir polinomu genişletmek ve benzer terimleri toplamak tam olarak evrişimle

246
00:15:46,189 --> 00:15:46,937
aynı süreç.

247
00:15:46,937 --> 00:15:50,259
Ancak bu bize oldukça hoş bir şey yapmamızı sağlıyor

248
00:15:50,259 --> 00:15:52,642
çünkü burada ne söylediğimizi düşünün.

249
00:15:52,642 --> 00:15:57,913
Diyoruz ki, iki farklı fonksiyon alıp bunları birbiriyle çarparsanız, ki bu basit bir

250
00:15:57,913 --> 00:16:03,429
noktasal işlemdir, bu, sanki polinom olduklarını varsayarak önce katsayıları her birinden

251
00:16:03,429 --> 00:16:08,761
çıkarmış ve sonra bunların evrişimini almış olmanızla aynı şeydir. iki katsayı listesi.

252
00:16:08,761 --> 00:16:13,100
Bunu bu kadar ilginç kılan şey, evrişimlerin prensipte basit çarpmadan çok daha karmaşık

253
00:16:13,100 --> 00:16:17,391
hissettirmesidir ve sadece kavramsal olarak düşünmenin daha zor olduğunu kastetmiyorum,

254
00:16:17,391 --> 00:16:21,682
hesaplama açısından bir evrişimi gerçekleştirmek için bir evrişimi gerçekleştirmek için

255
00:16:21,682 --> 00:16:26,070
olduğundan daha fazla adım gerektiğini kastediyorum. iki farklı listenin noktasal çarpımı.

256
00:16:26,070 --> 00:16:30,573
Örneğin, diyelim ki size her biri yüz farklı katsayıya sahip iki gerçekten

257
00:16:30,573 --> 00:16:35,376
büyük polinom verdim, o zaman bunları çarpma şekliniz bu çarpımı genişletmekse,

258
00:16:35,376 --> 00:16:40,360
bu 100&#39;e 100&#39;lük ikili çarpım tablosunun tamamını doldurmanızı gerektirir.

259
00:16:40,360 --> 00:16:45,043
10.000 farklı ürün gerçekleştirin ve ardından tüm benzer terimleri köşegenler

260
00:16:45,043 --> 00:16:49,666
boyunca topladığınızda, bu yaklaşık 10.000 işlemden oluşan başka bir dizidir.

261
00:16:49,666 --> 00:16:55,023
Daha genel olarak dilde, algoritmanın O&#39;nun n karesi olduğunu, yani n boyutlu iki

262
00:16:55,023 --> 00:16:59,881
liste için işlem ölçeklerinin sayısının n&#39;nin karesiyle orantılı olduğunu

263
00:16:59,881 --> 00:17:00,816
söyleyebiliriz.

264
00:17:00,816 --> 00:17:05,977
Öte yandan, iki polinomu çıktıları açısından düşünürsem, örneğin değerlerini

265
00:17:05,977 --> 00:17:11,138
birkaç girdide örneklemek, sonra bunları çarpmak yalnızca örnek sayısı kadar

266
00:17:11,138 --> 00:17:16,434
işlem gerektirir, çünkü yine bu noktasal bir işlemdir ve polinomlarla yalnızca

267
00:17:16,434 --> 00:17:21,126
ihtiyacınız vardır. katsayıları kurtarabilmek için sonlu sayıda örnek.

268
00:17:21,126 --> 00:17:25,490
Örneğin, doğrusal bir polinomu benzersiz bir şekilde belirtmek için iki çıktı yeterlidir,

269
00:17:25,490 --> 00:17:29,564
ikinci dereceden bir polinomu benzersiz bir şekilde belirtmek için üç çıktı yeterli

270
00:17:29,564 --> 00:17:33,589
olacaktır ve genel olarak, n farklı katsayıya sahip bir polinomu benzersiz şekilde

271
00:17:33,589 --> 00:17:37,953
belirtmek için yeterli olan n farklı çıktı biliyorsanız veya isterseniz bunu yapabiliriz.

272
00:17:37,953 --> 00:17:42,026
Bunu denklem sistemleri dilinde ifade edin, size bir polinomum olduğunu söylediğimi

273
00:17:42,026 --> 00:17:46,100
hayal edin, ancak katsayıların ne olduğunu size söylemiyorum, bunlar sizin için bir

274
00:17:46,100 --> 00:17:46,439
sırdır.

275
00:17:46,439 --> 00:17:51,317
Örneğimizde bunu, bulmaya çalıştığımız çarpım olarak düşünebilirsiniz ve sonra size

276
00:17:51,317 --> 00:17:55,905
0, 1, 2 gibi çeşitli farklı girdiler girdiğinizde bu polinomun çıktılarının ne

277
00:17:55,905 --> 00:18:00,725
olacağını söyleyeceğimi varsayalım. , 3, devam ediyor ve size yeterince veriyorum,

278
00:18:00,725 --> 00:18:05,661
böylece bilinmeyenleriniz kadar denkleminiz olur, hatta doğrusal bir denklem sistemi

279
00:18:05,661 --> 00:18:10,481
bile olur, bu güzel ve prensipte en azından bu, katsayıları kurtarmak için yeterli

280
00:18:10,481 --> 00:18:11,061
olmalıdır.

