1
00:00:00,000 --> 00:00:03,817
Size iki farklı sayı listesi veya belki iki farklı işlev verdiğimi ve sizden yeni bir 

2
00:00:03,817 --> 00:00:07,546
sayı listesi elde etmek için bu iki listeyi birleştirmenin veya yeni bir işlev elde 

3
00:00:07,546 --> 00:00:11,320
etmek için iki işlevi birleştirmenin tüm yollarını düşünmenizi istediğimi varsayalım.

4
00:00:12,120 --> 00:00:16,760
Belki akla gelen basit bir yol, bunları terim terim bir araya getirmektir.

5
00:00:17,160 --> 00:00:19,920
İşlevlerde olduğu gibi, karşılık gelen tüm çıktıları da ekleyebilirsiniz.

6
00:00:20,540 --> 00:00:23,319
Benzer şekilde, iki listeyi terim terimle çarpabilir 

7
00:00:23,319 --> 00:00:25,680
ve aynı şeyi işlevler için de yapabilirsiniz.

8
00:00:26,360 --> 00:00:30,077
Ancak her ikisi kadar temel olan ancak çok daha az tartışılan, 

9
00:00:30,077 --> 00:00:33,500
evrişim olarak bilinen başka bir tür kombinasyon daha var.

10
00:00:34,080 --> 00:00:36,896
Ancak önceki iki durumdan farklı olarak bu, sayılara 

11
00:00:36,896 --> 00:00:39,820
yapabileceğiniz bir işlemden miras kalan bir şey değil.

12
00:00:39,980 --> 00:00:44,700
Sayı listeleri veya birleştirme işlevleri bağlamında gerçekten yeni bir şey.

13
00:00:45,320 --> 00:00:49,036
Her yerde karşımıza çıkıyorlar, görüntü işlemede her yerde mevcutlar, 

14
00:00:49,036 --> 00:00:52,806
olasılık teorisinin temel yapılarından biri, diferansiyel denklemlerin 

15
00:00:52,806 --> 00:00:56,257
çözümünde çok kullanılıyorlar ve onu neredeyse kesinlikle görmüş 

16
00:00:56,257 --> 00:01:00,240
olduğunuz bir bağlam var, olmasa da. bu isimle iki polinomun çarpılmasıdır.

17
00:01:00,740 --> 00:01:04,885
Görsel açıklamalar işinde çalışan biri olarak bu özellikle harika bir konudur, 

18
00:01:04,885 --> 00:01:09,083
çünkü kalıplaşmış tanım tek başına ve bağlamdan bağımsız olarak biraz korkutucu 

19
00:01:09,083 --> 00:01:13,334
görünebilir, ancak ne söylediğini gerçekten açmak için zaman ayırırsak ve bundan 

20
00:01:13,334 --> 00:01:16,745
önce gerçekten nedenini motive edersek böyle bir şey istersiniz, 

21
00:01:16,745 --> 00:01:18,320
inanılmaz güzel bir operasyon.

22
00:01:18,960 --> 00:01:21,294
Ve itiraf etmeliyim ki, bu proje için görselleri bir 

23
00:01:21,294 --> 00:01:23,540
araya getirirken aslında küçük bir şeyler öğrendim.

24
00:01:23,540 --> 00:01:27,379
İki farklı fonksiyonun evrilmesi durumunda, bunun ne anlama gelebileceğini hayal 

25
00:01:27,379 --> 00:01:31,172
edebileceğiniz farklı yollar düşünmeye çalışıyordum ve bunlardan biriyle normal 

26
00:01:31,172 --> 00:01:34,300
dağılımların neden bu rolü oynadığına dair biraz aha anı yaşadım. 

27
00:01:34,300 --> 00:01:38,520
bir fonksiyon için neden bu kadar doğal bir şekil olduğunu olasılık dahilinde yapıyorlar.

28
00:01:39,020 --> 00:01:41,520
Ama kendimi aşıyorum, bunun için pek çok kurulum var.

29
00:01:41,840 --> 00:01:46,023
Bu videoda asıl odak noktamız ayrık durum üzerinde olacak ve özellikle bunları 

30
00:01:46,023 --> 00:01:50,260
hesaplamak için çok beklenmedik ama çok akıllı bir algoritma geliştirmek olacak.

31
00:01:50,260 --> 00:01:54,480
Devam eden vakaya ilişkin tartışmayı ikinci bir kısma aktaracağım.

32
00:01:58,580 --> 00:02:02,950
Görüntü işleme örnekleriyle başlamak çok cazip çünkü görsel olarak en ilgi çekici 

33
00:02:02,950 --> 00:02:07,534
olanlar bunlar, ancak görüntü işleme durumunu genel olarak evrişimleri daha az temsil 

34
00:02:07,534 --> 00:02:12,172
eden birkaç parça titizlik var, o yüzden bunun yerine işleri olasılıklarla başlatalım, 

35
00:02:12,172 --> 00:02:16,756
ve özellikle buradaki herkesin hayatının bir noktasında düşündüğünden emin olduğum en 

36
00:02:16,756 --> 00:02:21,500
basit örneklerden biri; bir çift zar atmak ve farklı toplamları görme şansını hesaplamak.

37
00:02:22,460 --> 00:02:24,460
Ve diyebilirsiniz ki sorun değil, sorun değil.

38
00:02:24,680 --> 00:02:28,188
İki zarınızın her birinin altı farklı olası sonucu vardır, 

39
00:02:28,188 --> 00:02:32,827
bu da bize toplam 36 farklı olası sonuç çifti verir ve eğer hepsine bakarsak, 

40
00:02:32,827 --> 00:02:35,860
belirli bir toplamın kaç çift olduğunu sayabiliriz.

41
00:02:36,600 --> 00:02:40,862
Ve tüm çiftleri bu şekilde bir ızgaraya yerleştirdiğimizde oldukça hoş olan şey, 

42
00:02:40,862 --> 00:02:45,440
sabit toplamı olan tüm çiftlerin bu farklı köşegenlerden biri boyunca görülebilmesidir.

43
00:02:45,440 --> 00:02:48,780
Yani sadece bu köşegenlerin her birinde kaç tane bulunduğunu saymak size 

44
00:02:48,780 --> 00:02:52,120
belirli bir toplamı görme olasılığınızın ne kadar olduğunu söyleyecektir.

45
00:02:53,220 --> 00:02:55,751
Ben de çok iyi, çok iyi derdim ama aynı soruyu 

46
00:02:55,751 --> 00:02:58,660
görselleştirmenin başka yollarını düşünebiliyor musun?

47
00:02:59,300 --> 00:03:01,771
Belirli bir toplamı olan tüm farklı çiftleri düşünmek 

48
00:03:01,771 --> 00:03:04,060
için aklınıza gelebilecek başka görüntüler var mı?

49
00:03:04,860 --> 00:03:07,980
Belki biriniz elini kaldırır ve evet bende bir tane var der.

50
00:03:08,280 --> 00:03:12,066
Diyelim ki bu iki farklı olasılık kümesini arka arkaya gözünüzde canlandırıyorsunuz, 

51
00:03:12,066 --> 00:03:13,760
ancak ikinci sırayı değiştiriyorsunuz.

52
00:03:13,760 --> 00:03:18,760
Böylece toplamı yediye ulaşan tüm farklı çiftler dikey olarak bu şekilde sıralanır.

53
00:03:19,360 --> 00:03:24,013
Ve eğer alt sırayı tamamen sağa kaydırırsak, toplamı iki olan benzersiz çift, 

54
00:03:24,013 --> 00:03:26,280
yani yılanın gözleri aynı hizada olur.

55
00:03:26,620 --> 00:03:29,135
Ve eğer bunu bir birim sağa doğru kaydırırsam, 

56
00:03:29,135 --> 00:03:32,080
hizalanan çiftler toplamı üç olan iki farklı çift olur.

57
00:03:32,880 --> 00:03:35,549
Ve genel olarak, bu alt dizinin farklı ofset değerleri, 

58
00:03:35,549 --> 00:03:38,504
ki hatırladığım kadarıyla ilk önce ters çevirmem gerekiyordu, 

59
00:03:38,504 --> 00:03:41,460
belirli bir toplamı olan tüm farklı çiftleri ortaya çıkarıyor.

60
00:03:44,820 --> 00:03:48,947
Olasılık sorularına gelince, bu hala pek ilgi çekici değil çünkü yaptığımız 

61
00:03:48,947 --> 00:03:52,640
tek şey bu kategorilerin her birinde kaç tane sonuç olduğunu saymak.

62
00:03:52,980 --> 00:03:55,482
Ancak bu, bu yüzlerin her birinin ortaya çıkma şansının 

63
00:03:55,482 --> 00:03:58,120
eşit olduğu yönündeki örtülü varsayımdan kaynaklanmaktadır.

64
00:03:58,360 --> 00:04:01,620
Peki ya sana tekdüze olmayan özel bir zar setim olduğunu söylesem?

65
00:04:02,060 --> 00:04:05,937
Belki mavi zarın her yüzün gelme olasılığını açıklayan kendi sayıları 

66
00:04:05,937 --> 00:04:09,760
vardır ve kırmızı zarın da kendine özgü farklı sayılar dizisi vardır.

67
00:04:10,299 --> 00:04:14,556
Bu durumda, diyelim ki iki gelme olasılığını hesaplamak istiyorsanız, 

68
00:04:14,556 --> 00:04:19,360
mavi zarın bir olma olasılığını kırmızı zarın bir olma olasılığını çarparsınız.

69
00:04:19,360 --> 00:04:24,258
Ve üçü görme şansı için, mümkün olan yerlerde iki ayrı çifte bakarsınız ve 

70
00:04:24,258 --> 00:04:29,680
karşılık gelen olasılıkları tekrar çarparsınız ve sonra bu iki çarpımı toplarsınız.

71
00:04:30,100 --> 00:04:33,358
Benzer şekilde, dörtlü görme şansı da üç farklı 

72
00:04:33,358 --> 00:04:36,820
olasılık çiftini çarparak hepsini toplamayı içerir.

73
00:04:36,820 --> 00:04:41,585
Ve bazı formüller oluşturma ruhuna uygun olarak, bu üst olasılıklara a1, 

74
00:04:41,585 --> 00:04:45,960
a2, a3 vb. , alttaki olasılıklara ise b1, b2, b3 vb. adını verelim.

75
00:04:46,400 --> 00:04:49,972
Ve genel olarak, bu süreç, iki farklı sayı dizisini alıp ikincisini ters 

76
00:04:49,972 --> 00:04:54,083
çevirdiğimiz ve daha sonra bunları çeşitli farklı ofset değerlerinde sıraladığımız, 

77
00:04:54,083 --> 00:04:58,097
bir grup ikili çarpım alıp bunları topladığımız bu süreç, bu işlemlerden biridir. 

78
00:04:58,097 --> 00:05:00,740
Evrişimin ne olduğu hakkında düşünmenin temel yolları.

79
00:05:00,740 --> 00:05:06,301
Bunu biraz daha net bir şekilde açıklamak gerekirse, bu süreç boyunca iki, 

80
00:05:06,301 --> 00:05:12,604
üç, dört ve 12'ye kadar görme olasılıkları ürettik ve bunları bir değer listesi, 

81
00:05:12,604 --> 00:05:16,980
a ve diğerini karıştırarak elde ettik. değerler listesi, b.

82
00:05:17,440 --> 00:05:20,975
Dilde, bu iki dizinin evrişiminin bize bu yeni diziyi, 

83
00:05:20,975 --> 00:05:26,054
her biri ikili çarpımların toplamı gibi görünen 11 değerden oluşan yeni diziyi 

84
00:05:26,054 --> 00:05:27,340
verdiğini söylerdik.

85
00:05:27,340 --> 00:05:30,833
İsterseniz, aynı işlemi düşünmenin başka bir yolu da, 

86
00:05:30,833 --> 00:05:35,427
önce tüm ikili çarpımların bir tablosunu oluşturmak ve ardından tüm bu 

87
00:05:35,427 --> 00:05:36,980
köşegenleri toplamaktır.

88
00:05:37,460 --> 00:05:39,965
Yine, bu, bize 11 sayıdan oluşan yeni bir dizi elde 

89
00:05:39,965 --> 00:05:42,760
etmek için bu iki sayı dizisini karıştırmanın bir yoludur.

90
00:05:43,240 --> 00:05:46,460
Bu, sürgülü pencerelerin düşündüğü işlemin aynısı, sadece başka bir bakış açısı.

91
00:05:47,140 --> 00:05:49,800
Üzerine küçük bir notasyon koyarak, bunun nasıl yazıldığını görebilirsiniz.

92
00:05:50,220 --> 00:05:55,041
Bu küçük yıldız işaretiyle gösterilen a ve b'nin evrişimi yeni bir listedir ve 

93
00:05:55,041 --> 00:05:58,760
bu listenin n'inci elemanı bir toplama benzer ve bu toplam, 

94
00:05:58,760 --> 00:06:02,187
i ve j gibi tüm farklı endeks çiftlerinin üzerinden geçer, 

95
00:06:02,187 --> 00:06:04,860
böylece toplamı bu endeksler n'ye eşittir.

96
00:06:05,280 --> 00:06:08,302
Biraz ağız dolusu olacak ama örneğin, eğer n 6 ise, 

97
00:06:08,302 --> 00:06:11,847
üzerinde duracağımız çiftler 1 ve 5, 2 ve 4, 3 ve 3, 4 ve 2, 

98
00:06:11,847 --> 00:06:15,800
5 ve 1, yani toplamı toplayan tüm farklı çiftlerdir. 6'ya kadar.

99
00:06:16,620 --> 00:06:18,744
Ama dürüst olmak gerekirse, nasıl yazarsanız yazın, 

100
00:06:18,744 --> 00:06:22,340
süreç için kafanızda tutabileceğiniz görselin önemi açısından notasyon ikinci plandadır.

101
00:06:23,280 --> 00:06:27,057
Burada belki çok basit bir örnek yapmak faydalı olabilir; size 1, 2, 

102
00:06:27,057 --> 00:06:30,780
3 listesinin 4, 5, 6 listesiyle evrişiminin ne olduğunu sorabilirim.

103
00:06:31,480 --> 00:06:34,741
Bu listelerin her ikisini de alıp, ikincisinin etrafında dolaştığını ve ardından 

104
00:06:34,741 --> 00:06:37,680
kapağından başlayarak tamamen sola doğru başladığını hayal edebilirsiniz.

105
00:06:38,180 --> 00:06:40,405
Daha sonra hizalanan değer çifti 1 ve 4'tür, 

106
00:06:40,405 --> 00:06:43,540
bunları birbiriyle çarparız ve bu bize çıktımızın ilk terimini verir.

107
00:06:43,960 --> 00:06:48,872
Alt diziyi bir birim sağa kaydırın, hizalanan çiftler 1 ve 5 ve 2 ve 4'tür, 

108
00:06:48,872 --> 00:06:54,091
bu çiftleri çarpın, toplayın ve bu bize çıktımızdaki bir sonraki girdi olan 13'ü 

109
00:06:54,091 --> 00:06:54,460
verir.

110
00:06:54,960 --> 00:07:01,560
Bir kez daha yana kaydırırsak 1 çarpı 6, artı 2 çarpı 5, artı 3 çarpı 4, yani 28 olur.

111
00:07:02,020 --> 00:07:05,599
Bir slayt daha, ve 2 çarpı 6 artı 3 çarpı 5 elde ederiz, 

112
00:07:05,599 --> 00:07:10,120
bu da bize 27 verir ve son olarak son terim 3 çarpı 6 gibi görünecektir.

113
00:07:10,660 --> 00:07:14,682
İsterseniz en sevdiğiniz programlama dilini ve çeşitli sayısal işlemleri 

114
00:07:14,682 --> 00:07:18,980
içeren favori kütüphanenizi açıp size yalan söylemediğimi doğrulayabilirsiniz.

115
00:07:18,980 --> 00:07:22,410
Eğer 1, 2, 3'ün 4, 5, 6'ya karşı evrişimini alırsanız, 

116
00:07:22,410 --> 00:07:24,480
gerçekten elde edeceğiniz sonuç budur.

117
00:07:25,920 --> 00:07:29,841
Bunun doğal ve arzu edilen bir işlem olduğu, olasılık dağılımlarına eklenen 

118
00:07:29,841 --> 00:07:33,660
bir durum gördük ve diğer bir yaygın örnek de hareketli ortalama olabilir.

119
00:07:34,080 --> 00:07:36,919
Uzun bir sayı listeniz olduğunu ve toplamı 1 olan 

120
00:07:36,919 --> 00:07:39,760
daha küçük bir sayı listesi aldığınızı hayal edin.

121
00:07:40,100 --> 00:07:44,060
Bu durumda elimde 5 değerden oluşan küçük bir liste var ve bunların hepsi 1 5'e eşit.

122
00:07:44,060 --> 00:07:47,841
Daha sonra, bu kayan pencere evrişim işlemini yaparsak ve gözlerimizi 

123
00:07:47,841 --> 00:07:51,136
kapatırsak ve en başında olanları halının altına süpürürsek, 

124
00:07:51,136 --> 00:07:54,432
daha küçük değer listemiz büyük olanla tamamen örtüştüğünde, 

125
00:07:54,432 --> 00:07:58,700
bu buradaki her terimin ne olduğunu düşünün. evrişim gerçekten şu anlama gelir.

126
00:07:59,400 --> 00:08:05,023
Her yinelemede yaptığınız şey, verilerinizdeki değerlerin her birini 1/5 ile çarpmak ve 

127
00:08:05,023 --> 00:08:10,520
hepsini toplamaktır, yani bu küçük penceredeki verilerinizin ortalamasını alıyorsunuz.

128
00:08:11,100 --> 00:08:14,144
Genel olarak, süreç size orijinal verinin yumuşatılmış bir versiyonunu 

129
00:08:14,144 --> 00:08:16,631
verir ve bunu farklı küçük bir sayı listesiyle başlayarak 

130
00:08:16,631 --> 00:08:19,804
değiştirebilirsiniz ve bu küçük listenin toplamı 1'e ulaştığı sürece, 

131
00:08:19,804 --> 00:08:22,720
onu yine de hareketli bir sayı olarak yorumlayabilirsiniz. ortalama.

132
00:08:23,400 --> 00:08:25,469
Burada gösterilen örnekte, hareketli ortalama, 

133
00:08:25,469 --> 00:08:27,760
merkezi değere daha fazla ağırlık veriyor olacaktır.

134
00:08:28,420 --> 00:08:30,800
Bu aynı zamanda verilerin düzeltilmiş bir versiyonuyla da sonuçlanır.

135
00:08:33,140 --> 00:08:36,039
Bunun iki boyutlu bir benzerini yaparsanız, belirli bir görüntüyü 

136
00:08:36,039 --> 00:08:38,720
bulanıklaştırmak için eğlenceli bir algoritma elde edersiniz.

137
00:08:38,720 --> 00:08:42,618
Ve birazdan göstereceğim animasyonların, MIT'deki Julia Laboratuvarı'nda, 

138
00:08:42,618 --> 00:08:46,706
görüntü işleme birimi içeren belirli bir OpenCourseWare sınıfı için yaptığım bir dizi 

139
00:08:46,706 --> 00:08:50,462
dersin bir parçası olarak orijinal olarak yaptığım bir şeyden değiştirildiğini 

140
00:08:50,462 --> 00:08:51,080
söylemeliyim.

141
00:08:51,560 --> 00:08:54,038
Tüm bunların arkasındaki koda dalmak için biraz daha çalıştık, 

142
00:08:54,038 --> 00:08:56,280
eğer merak ediyorsanız size bazı bağlantılar bırakacağım.

143
00:08:56,620 --> 00:09:00,688
Ancak bu bulanık örneğe tekrar odaklanırsak, orijinal görüntümüz boyunca 

144
00:09:00,688 --> 00:09:05,482
ilerleyen 3x3'lük küçük bir değerler ızgarasına sahibim ve eğer yakınlaştırırsak, 

145
00:09:05,482 --> 00:09:09,551
bu değerlerin her biri 19'uncu ve ben ne yapıyorum her yinelemede bu 

146
00:09:09,551 --> 00:09:13,620
değerlerin her biri, üzerinde bulunduğu karşılık gelen pikselle çarpılır.

147
00:09:13,900 --> 00:09:16,375
Ve tabii ki bilgisayar bilimlerinde renkleri, kırmızı, 

148
00:09:16,375 --> 00:09:20,200
yeşil ve mavi bileşenleri temsil eden üç değerin küçük vektörleri olarak düşünüyoruz.

149
00:09:20,560 --> 00:09:23,988
Tüm bu küçük değerleri 19'la çarpıp topladığım zaman, 

150
00:09:23,988 --> 00:09:29,131
bu bize her renk kanalı boyunca bir ortalama verir ve sağdaki görüntüye karşılık gelen 

151
00:09:29,131 --> 00:09:31,200
piksel bu toplam olarak tanımlanır.

152
00:09:31,940 --> 00:09:35,306
Bunu görüntüdeki her bir piksel için yaptığımız genel etki, 

153
00:09:35,306 --> 00:09:39,794
her bir türün tüm komşularına sızmasıdır, bu da bize orijinalinden daha bulanık 

154
00:09:39,794 --> 00:09:40,860
bir versiyon verir.

155
00:09:41,720 --> 00:09:44,676
Dilde, sağdaki görüntünün, orijinal görüntümüzün küçük 

156
00:09:44,676 --> 00:09:47,740
bir değerler tablosuyla evrişimi olduğunu söyleyebiliriz.

157
00:09:48,140 --> 00:09:51,246
Ya da daha teknik olarak belki de bunun, o küçük değerler ağının 

158
00:09:51,246 --> 00:09:54,400
180 derece döndürülmüş versiyonuyla evrişim olduğunu söylemeliyim.

159
00:09:54,620 --> 00:09:58,226
Izgaranın simetrik olması önemli değil, ancak saf matematik bağlamından 

160
00:09:58,226 --> 00:10:01,783
miras alınan evrişim tanımının sizi her zaman ikinci dizinin etrafında 

161
00:10:01,783 --> 00:10:05,240
dönmeyi düşünmeye davet etmesi gerektiğini akılda tutmakta fayda var.

162
00:10:05,960 --> 00:10:08,636
Bunu biraz değiştirirsek, farklı bir değerler ızgarası seçerek 

163
00:10:08,636 --> 00:10:11,100
çok daha zarif bir bulanıklaştırma efekti elde edebiliriz.

164
00:10:11,440 --> 00:10:15,780
Bu durumda, 5x5'lik küçük bir ızgaram var, ancak fark onun boyutunda değil.

165
00:10:15,980 --> 00:10:19,300
Yakınlaştırırsak ortadaki değerin kenarlardaki değerden çok daha 

166
00:10:19,300 --> 00:10:22,620
büyük olduğunu fark ederiz ve bunun kaynağı da bunların hepsinin 

167
00:10:22,620 --> 00:10:25,940
Gauss dağılımı olarak bilinen bir çan eğrisinden örneklenmesidir.

168
00:10:26,800 --> 00:10:29,925
Bu şekilde, tüm bu değerleri, üzerinde bulundukları karşılık 

169
00:10:29,925 --> 00:10:33,254
gelen pikselle çarptığımızda, merkezdeki piksele çok daha fazla, 

170
00:10:33,254 --> 00:10:36,380
kenardaki piksellere ise çok daha az ağırlık vermiş oluyoruz.

171
00:10:36,800 --> 00:10:38,783
Ve tıpkı daha önce olduğu gibi sağdaki karşılık 

172
00:10:38,783 --> 00:10:40,560
gelen piksel bu toplam olarak tanımlanıyor.

173
00:10:41,320 --> 00:10:45,473
Bu işlemi her bir piksel için yaptığımızda, lensinizi odak dışı bırakma veya buna benzer 

174
00:10:45,473 --> 00:10:49,393
bir fikri çok daha gerçekçi bir şekilde simüle eden bir bulanıklaştırma efekti elde 

175
00:10:49,393 --> 00:10:49,720
edilir.

176
00:10:49,900 --> 00:10:53,360
Ancak bulanıklaştırma bu fikirle yapabileceğiniz tek şeyden çok uzaktır.

177
00:10:53,800 --> 00:10:58,062
Örneğin, solda bazı pozitif sayılar ve sağda bazı negatif sayılar içeren, 

178
00:10:58,062 --> 00:11:02,900
sırasıyla mavi ve kırmızıyla renklendireceğim bu küçük değerler tablosuna bir bakın.

179
00:11:03,640 --> 00:11:06,040
Bunun son görüntü üzerinde ne gibi bir etkisi olacağını tahmin 

180
00:11:06,040 --> 00:11:08,480
edip anlayıp anlayamadığınızı görmek için bir dakikanızı ayırın.

181
00:11:10,720 --> 00:11:14,603
Yani bu durumda görüntüyü renkli yerine gri tonlamalı olarak düşüneceğim, 

182
00:11:14,603 --> 00:11:18,120
böylece piksellerin her biri üç yerine bir sayıyla temsil ediliyor.

183
00:11:18,440 --> 00:11:20,540
Ve dikkat edilmesi gereken bir şey de bu evrişimi 

184
00:11:20,540 --> 00:11:23,060
yaptığımızda negatif değerler elde etmenin mümkün olmasıdır.

185
00:11:23,060 --> 00:11:27,262
Örneğin, bu noktada yakınlaştırırsak, küçük ızgaramızın sol yarısı tamamen siyah 

186
00:11:27,262 --> 00:11:30,583
piksellerin üzerinde yer alır, bu da sıfır değerine sahip olur, 

187
00:11:30,583 --> 00:11:34,370
ancak negatif değerlerin sağ yarısı beyaz piksellerin üzerinde yer alır, 

188
00:11:34,370 --> 00:11:35,460
bu da bir değeri var.

189
00:11:36,180 --> 00:11:39,609
Karşılık gelen terimleri çarpıp bunları topladığımızda sonuçlar 

190
00:11:39,609 --> 00:11:42,930
çok negatif olacaktır ve bunu sağdaki resimde gösterme şeklim 

191
00:11:42,930 --> 00:11:46,360
negatif değerleri kırmızıya ve pozitif değerleri maviye boyamak.

192
00:11:46,880 --> 00:11:49,293
Dikkat edilmesi gereken bir diğer nokta da, tamamı aynı renk 

193
00:11:49,293 --> 00:11:51,548
olan bir parça üzerinde olduğunuzda, küçük ızgaramızdaki 

194
00:11:51,548 --> 00:11:54,080
değerlerin toplamı sıfır olduğundan her şeyin sıfıra gitmesidir.

195
00:11:55,180 --> 00:11:58,844
Bu, küçük ızgaramızın toplamının bir olduğu ve onu hareketli bir ortalama ve dolayısıyla 

196
00:11:58,844 --> 00:12:02,180
bulanıklık olarak yorumlamamıza olanak tanıyan önceki iki örnekten çok farklıdır.

197
00:12:03,640 --> 00:12:07,151
Sonuçta bu küçük süreç, soldan sağa doğru hareket ettiğinizde piksel 

198
00:12:07,151 --> 00:12:10,357
değerinde değişiklik olan her yeri tespit eder ve böylece size 

199
00:12:10,357 --> 00:12:13,920
görüntünüzün tüm dikey kenarlarını yakalamanız için bir tür yol sunar.

200
00:12:16,500 --> 00:12:20,512
Benzer şekilde, eğer ızgarayı yukarıdan aşağıya doğru hareket ettikçe 

201
00:12:20,512 --> 00:12:24,467
değişecek şekilde döndürürsek, bu tüm yatay kenarlarda birikecektir, 

202
00:12:24,467 --> 00:12:29,340
bu da küçük pasta yaratık görüntümüzde bazı oldukça şeytani gözlerle sonuçlanacaktır.

203
00:12:30,400 --> 00:12:33,624
Bu arada, bu daha küçük ızgaraya genellikle çekirdek denir ve buradaki güzel nokta, 

204
00:12:33,624 --> 00:12:36,541
farklı bir çekirdek seçerek, yalnızca kenar algılamanızı bulanıklaştırmakla 

205
00:12:36,541 --> 00:12:39,112
kalmayıp aynı zamanda keskinleştirme gibi şeyleri de içeren farklı 

206
00:12:39,112 --> 00:12:40,840
görüntü işleme efektleri elde edebilmenizdir.

207
00:12:40,840 --> 00:12:44,057
Evrişimli bir sinir ağını duymuş olanlar için buradaki fikir, 

208
00:12:44,057 --> 00:12:47,275
sinir ağının tespit etmek istediği şey tarafından belirlenen, 

209
00:12:47,275 --> 00:12:51,480
ilk etapta çekirdeklerin ne olması gerektiğini bulmak için verileri kullanmaktır.

210
00:12:52,760 --> 00:12:55,520
Belki gündeme getirmem gereken başka bir şey de çıktının uzunluğu.

211
00:12:55,820 --> 00:12:59,814
Hareketli ortalama örneği gibi bir şey için, yalnızca her iki pencere de birbiriyle 

212
00:12:59,814 --> 00:13:03,570
tamamen hizalandığında terimleri düşünmek isteyebilirsiniz veya görüntü işleme 

213
00:13:03,570 --> 00:13:07,280
örneğinde son çıktının orijinalle aynı boyuta sahip olmasını isteyebilirsiniz.

214
00:13:07,280 --> 00:13:11,705
Artık saf bir matematik işlemi olarak evrişimler her zaman başladığınız iki diziden daha 

215
00:13:11,705 --> 00:13:16,180
büyük bir dizi üretir, en azından bunlardan birinin uzunluğunun bir olmadığını varsayarak.

216
00:13:16,720 --> 00:13:18,935
Belirli bilgisayar bilimi bağlamlarında genellikle bu 

217
00:13:18,935 --> 00:13:21,520
çıktıyı kasıtlı olarak kısaltmak istediğinizi bilmeniz yeterli.

218
00:13:24,720 --> 00:13:27,593
Vurgulamaya değer başka bir şey de, bilgisayar bilimi bağlamında, 

219
00:13:27,593 --> 00:13:31,163
çekirdeğin orijinalin üzerinden geçmesine izin vermeden önce çekirdeğin etrafında 

220
00:13:31,163 --> 00:13:34,298
dönme fikrinin çoğu zaman gerçekten tuhaf ve gereksiz hissettirdiğidir, 

221
00:13:34,298 --> 00:13:37,868
ancak bunun saf matematik bağlamından miras alınan şey olduğunu tekrar unutmayın. 

222
00:13:37,868 --> 00:13:41,395
olasılıkları göz önünde bulundurarak bunun yapılmasının inanılmaz derecede doğal 

223
00:13:41,395 --> 00:13:42,440
bir şey olduğunu gördüm.

224
00:13:43,020 --> 00:13:46,035
Ve aslında size programcıların bile bunu önemsemesi gereken bir 

225
00:13:46,035 --> 00:13:48,438
saf matematik örneği daha gösterebilirim çünkü bu, 

226
00:13:48,438 --> 00:13:52,020
tüm bunları hesaplamak için çok daha hızlı bir algoritmanın kapılarını açar.

227
00:13:52,620 --> 00:13:56,174
Burada daha hızlı derken neyi kastettiğimi ayarlamak için geri dönüp 

228
00:13:56,174 --> 00:13:59,780
biraz python çekeyim ve iki farklı, nispeten büyük dizi oluşturacağım.

229
00:13:59,940 --> 00:14:03,239
Her birinde yüz bin rastgele öğe bulunacak ve ben Numpy 

230
00:14:03,239 --> 00:14:07,540
kütüphanesinden evrişim fonksiyonunun çalışma süresini değerlendireceğim.

231
00:14:08,180 --> 00:14:11,399
Ve bu durumda, onu birçok farklı yineleme için çalıştırıyor, 

232
00:14:11,399 --> 00:14:15,464
bir ortalama bulmaya çalışıyor ve bu bilgisayarda en azından ortalama 4 gibi 

233
00:14:15,464 --> 00:14:16,520
görünüyor.87 saniye.

234
00:14:16,960 --> 00:14:22,617
Buna karşılık, fftconvolve adlı scipy kütüphanesinden farklı bir işlev kullanırsam, 

235
00:14:22,617 --> 00:14:26,860
bu sadece farklı şekilde uygulananla aynı şeydir ve yalnızca 4 

236
00:14:26,860 --> 00:14:30,160
alır.Ortalama 3 milisaniye, yani üç kat iyileşme.

237
00:14:30,160 --> 00:14:34,415
Ve yine farklı bir isim altında uçsa da diğer evrişim fonksiyonunun yaptığı 

238
00:14:34,415 --> 00:14:39,120
çıktının aynısını veriyor, sadece bunu daha akıllıca yapmak için bir şeyler yapıyor.

239
00:14:42,200 --> 00:14:45,387
Olasılık örneğiyle, evrişimi düşünmenin başka bir yolunun, 

240
00:14:45,387 --> 00:14:48,844
tüm ikili çarpımların bu tablosunu oluşturmak ve sonra bu ikili 

241
00:14:48,844 --> 00:14:52,680
çarpımları köşegenler boyunca toplamak olduğunu söylediğimi hatırlayın.

242
00:14:53,660 --> 00:14:56,397
Elbette olasılığa özgü hiçbir şey yoktur, iki farklı sayı 

243
00:14:56,397 --> 00:14:59,040
listesini evriştirdiğinizde bu şekilde düşünebilirsiniz.

244
00:14:59,040 --> 00:15:02,850
Tüm ikili çarpımları içeren bu tür bir çarpım tablosu oluşturun ve ardından 

245
00:15:02,850 --> 00:15:06,460
köşegen boyunca her toplam, nihai çıktılarınızdan birine karşılık gelir.

246
00:15:07,600 --> 00:15:12,800
Bu görüşün özellikle doğal olduğu bağlamlardan biri, iki polinomu birlikte çarpmanızdır.

247
00:15:13,300 --> 00:15:18,053
Örneğin, elimizdeki küçük tabloyu alıp üstteki terimleri 1, 

248
00:15:18,053 --> 00:15:23,600
2x ve 3x kareyle, diğer terimleri de 4, 5x ve 6x kareyle değiştireyim.

249
00:15:24,000 --> 00:15:26,683
Şimdi iki liste arasında tüm bu farklı ikili çarpımları 

250
00:15:26,683 --> 00:15:28,840
oluşturduğumuzun ne anlama geldiğini düşünün.

251
00:15:29,040 --> 00:15:34,538
Yaptığınız şey aslında yazdığım iki polinomun tam çarpımını genişletmek ve sonra tüm 

252
00:15:34,538 --> 00:15:39,712
benzer terimleri toplamaya karşılık gelen köşegen boyunca toplama yaptığınızda, 

253
00:15:39,712 --> 00:15:45,081
bu oldukça düzgün bir polinomu genişletmek ve benzer terimleri toplamak tam olarak 

254
00:15:45,081 --> 00:15:46,440
evrişimle aynı süreç.

255
00:15:47,740 --> 00:15:50,419
Ancak bu bize oldukça hoş bir şey yapmamızı sağlıyor 

256
00:15:50,419 --> 00:15:52,340
çünkü burada ne söylediğimizi düşünün.

257
00:15:52,340 --> 00:15:56,731
Diyoruz ki, iki farklı fonksiyon alıp bunları birbiriyle çarparsanız, 

258
00:15:56,731 --> 00:16:01,813
ki bu basit bir noktasal işlemdir, bu, sanki polinom olduklarını varsayarak önce 

259
00:16:01,813 --> 00:16:07,083
katsayıları her birinden çıkarmış ve sonra bunların evrişimini almış olmanızla aynı 

260
00:16:07,083 --> 00:16:08,840
şeydir. iki katsayı listesi.

261
00:16:09,620 --> 00:16:13,666
Bunu bu kadar ilginç kılan şey, evrişimlerin prensipte basit çarpmadan çok daha karmaşık 

262
00:16:13,666 --> 00:16:17,667
hissettirmesidir ve sadece kavramsal olarak düşünmenin daha zor olduğunu kastetmiyorum, 

263
00:16:17,667 --> 00:16:21,668
hesaplama açısından bir evrişimi gerçekleştirmek için bir evrişimi gerçekleştirmek için 

264
00:16:21,668 --> 00:16:25,760
olduğundan daha fazla adım gerektiğini kastediyorum. iki farklı listenin noktasal çarpımı.

265
00:16:26,319 --> 00:16:30,812
Örneğin, diyelim ki size her biri yüz farklı katsayıya sahip iki gerçekten 

266
00:16:30,812 --> 00:16:35,604
büyük polinom verdim, o zaman bunları çarpma şekliniz bu çarpımı genişletmekse, 

267
00:16:35,604 --> 00:16:40,575
bu 100'e 100'lük ikili çarpım tablosunun tamamını doldurmanızı gerektirir. 

268
00:16:40,575 --> 00:16:45,247
10.000 farklı ürün gerçekleştirin ve ardından tüm benzer terimleri köşegenler 

269
00:16:45,247 --> 00:16:49,860
boyunca topladığınızda, bu yaklaşık 10.000 işlemden oluşan başka bir dizidir.

270
00:16:50,700 --> 00:16:54,607
Daha genel olarak dilde, algoritmanın O'nun n karesi olduğunu, 

271
00:16:54,607 --> 00:16:59,740
yani n boyutlu iki liste için işlem ölçeklerinin sayısının n'nin karesiyle orantılı 

272
00:16:59,740 --> 00:17:01,140
olduğunu söyleyebiliriz.

273
00:17:01,820 --> 00:17:05,341
Öte yandan, iki polinomu çıktıları açısından düşünürsem, 

274
00:17:05,341 --> 00:17:08,245
örneğin değerlerini birkaç girdide örneklemek, 

275
00:17:08,245 --> 00:17:12,446
sonra bunları çarpmak yalnızca örnek sayısı kadar işlem gerektirir, 

276
00:17:12,446 --> 00:17:17,450
çünkü yine bu noktasal bir işlemdir ve polinomlarla yalnızca ihtiyacınız vardır. 

277
00:17:17,450 --> 00:17:20,540
katsayıları kurtarabilmek için sonlu sayıda örnek.

278
00:17:20,540 --> 00:17:25,060
Örneğin, doğrusal bir polinomu benzersiz şekilde belirtmek için iki çıktı yeterlidir.

279
00:17:25,660 --> 00:17:27,728
İkinci dereceden bir polinomu benzersiz bir şekilde 

280
00:17:27,728 --> 00:17:29,400
belirtmek için üç çıktı yeterli olacaktır.

281
00:17:29,640 --> 00:17:32,738
Ve genel olarak, eğer n farklı çıktı biliyorsanız, bu, 

282
00:17:32,738 --> 00:17:37,640
n farklı katsayıya sahip bir polinomu benzersiz bir şekilde belirlemek için yeterlidir.

283
00:17:37,780 --> 00:17:40,720
Veya isterseniz bunu denklem sistemleri diliyle ifade edebiliriz.

284
00:17:41,200 --> 00:17:43,817
Size bir polinomum olduğunu söylediğimi ancak katsayıların ne 

285
00:17:43,817 --> 00:17:46,520
olduğunu söylemediğimi hayal edin, bunlar sizin için bir sırdır.

286
00:17:46,700 --> 00:17:50,800
Örneğimizde bunu anlamaya çalıştığımız ürün olarak düşünebilirsiniz.

287
00:17:50,800 --> 00:17:54,759
O zaman diyelim ki, size 0, 1, 2, 3 ve benzeri çeşitli farklı girdiler 

288
00:17:54,759 --> 00:17:58,886
girerseniz bu polinomun çıktılarının ne olacağını söyleyeceğim ve size şu 

289
00:17:58,886 --> 00:18:03,460
sayıda denklem elde etmenize yetecek kadar bilgi vereceğim. bilinmeyenleriniz var.

290
00:18:04,140 --> 00:18:07,340
Hatta doğrusal bir denklem sistemi bile var, bu çok güzel.

291
00:18:07,780 --> 00:18:10,900
Ve en azından prensipte bu, katsayıları geri kazanmak için yeterli olmalıdır.

292
00:18:11,740 --> 00:18:15,657
Yani kaba algoritma taslağı, iki sayı listesini evriştirmek istediğinizde, 

293
00:18:15,657 --> 00:18:19,000
onlara iki polinomun katsayılarıymış gibi davranmanız olacaktır.

294
00:18:19,420 --> 00:18:23,171
Bu polinomları yeterli çıktıda örneklersiniz, bu örnekleri nokta 

295
00:18:23,171 --> 00:18:26,923
bazında çarparsınız ve ardından evrişimi bulmanın gizli bir arka 

296
00:18:26,923 --> 00:18:30,560
kapı yolu olarak katsayıları kurtarmak için sistemi çözersiniz.

297
00:18:31,420 --> 00:18:35,170
Ve en azından şu ana kadar belirttiğim gibi, bazılarınız haklı olarak &quot;Grant, 

298
00:18:35,170 --> 00:18:37,340
bu aptalca bir plan&quot; diye şikayet edebilir.

299
00:18:37,580 --> 00:18:42,379
Çünkü bir kere, bildiğimiz polinomlardan biri için tüm bu örnekleri hesaplamak 

300
00:18:42,379 --> 00:18:47,300
zaten n kareli işlemler sırasını alıyor; bu sistemi çözmenin hesaplama açısından 

301
00:18:47,300 --> 00:18:52,100
kesinlikle ilk etapta evrişimi yapmak kadar zor olacağından bahsetmiyorum bile.

302
00:18:52,600 --> 00:18:55,992
Yani, elbette çarpma ve evrişimler arasında bir bağlantı var, 

303
00:18:55,992 --> 00:19:00,480
ancak tüm karmaşıklık bir bakış açısından diğerine çeviri yaparken ortaya çıkıyor.

304
00:19:01,600 --> 00:19:04,592
Ancak bir püf noktası var ve Fourier dönüşümlerini ve FFT 

305
00:19:04,592 --> 00:19:07,740
algoritmasını bilenleriniz bunun nereye varacağını görebilir.

306
00:19:07,740 --> 00:19:12,180
Eğer bu konulara yabancıysanız söyleyeceklerim tamamen durup dururken görünebilir.

307
00:19:12,260 --> 00:19:14,373
Sadece bunu daha beklenen bir adım haline getiren, 

308
00:19:14,373 --> 00:19:16,860
matematikte yürüyebileceğiniz belirli yollar olduğunu bilin.

309
00:19:17,720 --> 00:19:20,360
Temel olarak fikir, burada seçim özgürlüğüne sahip olduğumuzdur.

310
00:19:20,540 --> 00:19:24,892
Eğer 0, 1, 2, 3 ve benzeri gibi bazı rastgele girdi kümelerini değerlendirmek yerine, 

311
00:19:24,892 --> 00:19:28,029
çok özel olarak seçilmiş bir karmaşık sayılar kümesi üzerinde 

312
00:19:28,029 --> 00:19:29,700
değerlendirme yapmayı seçerseniz.

313
00:19:30,240 --> 00:19:33,239
Özellikle birim çember üzerinde eşit aralıklarla oturanlar, 

314
00:19:33,239 --> 00:19:34,840
birliğin kökleri olarak bilinir.

315
00:19:35,200 --> 00:19:36,880
Bu bize daha dostane bir sistem sağlıyor.

316
00:19:38,360 --> 00:19:42,663
Temel fikir şudur; güçlerini almanın bu döngü düzenine denk geldiği bir sayı bulmak, 

317
00:19:42,663 --> 00:19:46,764
ürettiğimiz sistemin, hesapladığınız farklı terimlerle çok fazla fazlalığa sahip 

318
00:19:46,764 --> 00:19:50,764
olacağı anlamına gelir ve bunun nasıl yapılacağı konusunda akıllı olunmalıdır. 

319
00:19:50,764 --> 00:19:54,460
Bu fazlalıktan yararlanırsanız, kendinizi birçok işten kurtarabilirsiniz.

320
00:19:56,020 --> 00:19:59,051
Yazdığım bu çıktı kümesinin özel bir adı var, 

321
00:19:59,051 --> 00:20:02,280
buna katsayıların ayrık Fourier dönüşümü deniyor.

322
00:20:02,500 --> 00:20:05,741
Daha fazlasını öğrenmek istiyorsanız, aynı Julia MIT dersinde 

323
00:20:05,741 --> 00:20:09,140
ayrık Fourier dönüşümleri hakkında başka bir ders daha vermiştim.

324
00:20:09,220 --> 00:20:13,087
Ayrıca kanalda, bunları daha hızlı hesaplamak için bir algoritma olan 

325
00:20:13,087 --> 00:20:17,120
hızlı Fourier dönüşümü hakkında konuşan, indirgenebilir bir video da var.

326
00:20:17,480 --> 00:20:20,542
Ayrıca Veritasium yakın zamanda FFT'ler hakkında gerçekten iyi bir video hazırladı, 

327
00:20:20,542 --> 00:20:21,760
dolayısıyla birçok seçeneğiniz var.

328
00:20:22,260 --> 00:20:24,660
Ve bu hızlı algoritma bizim için gerçekten önemli.

329
00:20:25,120 --> 00:20:29,560
Yine tüm bu fazlalık nedeniyle, katsayılardan tüm bu çıktılara gitmenin bir 

330
00:20:29,560 --> 00:20:32,831
yöntemi vardır; burada n kareli işlemler yapmak yerine, 

331
00:20:32,831 --> 00:20:37,622
n çarpı n işlemlerin logu mertebesinde yaparsınız ki bu çok fazla büyük listelere 

332
00:20:37,622 --> 00:20:39,200
ölçeklendikçe çok daha iyi.

333
00:20:39,660 --> 00:20:42,540
Ve daha da önemlisi bu fft algoritması her iki yönde de çalışır.

334
00:20:42,700 --> 00:20:45,480
Ayrıca çıktılardan katsayılara gitmenizi sağlar.

335
00:20:46,220 --> 00:20:49,060
Hepsini bir araya getirerek algoritma taslağımıza tekrar bakalım.

336
00:20:49,420 --> 00:20:53,647
Şimdi diyebiliriz ki, size iki uzun sayı listesi verildiğinde ve bunların evrişimini 

337
00:20:53,647 --> 00:20:57,626
almak istediğinizde, öncelikle her birinin hızlı Fourier dönüşümünü hesaplayın; 

338
00:20:57,626 --> 00:21:01,306
aklınızın bir köşesinde bunun onlara şöyle davrandığını düşünebilirsiniz. 

339
00:21:01,306 --> 00:21:05,534
bunlar bir polinomun katsayılarıdır ve onu çok özel olarak seçilmiş bir dizi noktada 

340
00:21:05,534 --> 00:21:06,380
değerlendirirler.

341
00:21:06,899 --> 00:21:10,369
Daha sonra elde ettiğiniz iki sonucu noktasal olarak çarpın, 

342
00:21:10,369 --> 00:21:14,407
ki bu güzel ve hızlıdır ve sonra ters hızlı bir Fourier dönüşümü yapın 

343
00:21:14,407 --> 00:21:18,900
ve bu size aradığımız evrişimi hesaplamak için sinsi bir arka kapı yolu sağlar.

344
00:21:19,040 --> 00:21:22,240
Ancak bu sefer sadece O/n log n işlemlerini içeriyor.

345
00:21:23,139 --> 00:21:24,740
Bu benim için gerçekten harika!

346
00:21:25,120 --> 00:21:29,111
İki polinomun çarpılmasıyla evrişimlerin ortaya çıktığı bu çok özel bağlam, 

347
00:21:29,111 --> 00:21:33,837
evrişimlerin ortaya çıkabileceği diğer her yerde geçerli olan bir algoritmanın kapılarını 

348
00:21:33,837 --> 00:21:34,100
açar.

349
00:21:34,180 --> 00:21:37,569
Olasılık dağılımları eklemek istiyorsanız, her ne olursa olsun, 

350
00:21:37,569 --> 00:21:39,000
büyük görüntü işleme yapın.

351
00:21:39,220 --> 00:21:43,374
Ve bence bu, matematikteki bir işlemin veya kavramın görünüşte alakasız birçok alanda 

352
00:21:43,374 --> 00:21:47,480
ortaya çıktığını gördüğünüzde neden heyecanlanmanız gerektiğine dair güzel bir örnek.

353
00:21:48,480 --> 00:21:51,500
Eğer küçük bir ev ödevi istiyorsanız işte düşünmesi eğlenceli bir şey.

354
00:21:51,720 --> 00:21:55,086
İki farklı sayıyı çarptığınızda, hepimizin ilkokulda öğrendiği 

355
00:21:55,086 --> 00:21:58,613
gibi sıradan çarpma işlemi yaptığınızda, yaptığınız şeyin temelde 

356
00:21:58,613 --> 00:22:01,980
bu sayıların rakamları arasında bir evrişim olduğunu açıklayın.

357
00:22:02,500 --> 00:22:06,460
Taşıma ve benzeri bazı ilave adımlar vardır, ancak temel adım bir evrişimdir.

358
00:22:07,280 --> 00:22:10,400
Hızlı bir algoritmanın varlığının ışığında, bunun anlamı, 

359
00:22:10,400 --> 00:22:13,844
iki çok büyük tamsayıya sahipseniz, bunların çarpımını bulmanın 

360
00:22:13,844 --> 00:22:17,880
ilkokulda öğrendiğimiz yöntemden daha hızlı bir yolu olduğu anlamına gelir.

361
00:22:18,140 --> 00:22:22,198
Bu, O/n kare işlemlerini gerektirmek yerine yalnızca O/n log n'yi gerektirir, 

362
00:22:22,198 --> 00:22:24,920
ki bu da mümkün olması gerektiğini bile hissettirmiyor.

363
00:22:25,380 --> 00:22:27,889
İşin püf noktası şu ki, bunun pratikte gerçekten faydalı 

364
00:22:27,889 --> 00:22:30,840
olabilmesi için rakamlarınızın kesinlikle canavarca olması gerekir.

365
00:22:31,220 --> 00:22:35,340
Ama yine de böyle bir algoritmanın var olması harika.

366
00:22:35,340 --> 00:22:37,422
Daha sonra dikkatimizi olasılık dağılımlarına 

367
00:22:37,422 --> 00:22:39,640
özellikle odaklanarak sürekli duruma çevireceğiz.

