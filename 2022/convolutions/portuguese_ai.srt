1
00:00:00,000 --> 00:00:04,480
Suponha que eu lhe dê duas listas diferentes de números, ou talvez duas funções diferentes, e peça que você pense

2
00:00:04,480 --> 00:00:08,400
em todas as maneiras pelas quais você pode combinar essas duas listas para obter uma nova lista de números,

3
00:00:08,400 --> 00:00:14,000
ou combinar as duas funções para obter uma nova função. . Talvez uma maneira simples que venha à

4
00:00:14,000 --> 00:00:18,640
mente seja simplesmente adicioná-los termo por termo. Da mesma forma com as funções, você pode adicionar

5
00:00:18,640 --> 00:00:24,000
todas as saídas correspondentes. Na mesma linha, você também pode multiplicar as duas listas termo por termo

6
00:00:24,000 --> 00:00:28,720
e fazer a mesma coisa com as funções. Mas há outro tipo de combinação tão

7
00:00:28,720 --> 00:00:33,840
fundamental quanto essas duas, mas muito menos discutida, conhecida como convolução.

8
00:00:33,840 --> 00:00:38,240
Mas, diferentemente dos dois casos anteriores, não é algo meramente herdado de uma operação que você

9
00:00:38,240 --> 00:00:43,360
pode fazer com números. É algo genuinamente novo para o contexto de listas de números ou

10
00:00:43,360 --> 00:00:49,280
de combinação de funções. Eles aparecem em todos os lugares, são onipresentes no processamento de imagens,

11
00:00:49,280 --> 00:00:53,760
são uma construção central na teoria da probabilidade, são muito usados na resolução de equações

12
00:00:53,760 --> 00:00:58,240
diferenciais e são um contexto onde você quase certamente já os viu, se não. com este

13
00:00:58,240 --> 00:01:03,440
nome, está multiplicando dois polinômios. Como alguém no ramo de explicações visuais, este é um

14
00:01:03,440 --> 00:01:08,800
tópico especialmente excelente, porque a definição formulada isoladamente e sem contexto pode parecer um pouco

15
00:01:08,800 --> 00:01:14,080
intimidante, mas se reservarmos um tempo para realmente desvendar o que está dizendo e, antes

16
00:01:14,080 --> 00:01:18,800
disso, realmente motivar o porquê você gostaria de algo assim, é uma operação incrivelmente bonita.

17
00:01:18,800 --> 00:01:22,880
E tenho que admitir, na verdade aprendi uma coisinha ao montar o visual deste

18
00:01:22,880 --> 00:01:26,960
projeto. No caso da convolução de duas funções diferentes, eu estava tentando pensar em maneiras diferentes

19
00:01:26,960 --> 00:01:30,720
de imaginar o que isso poderia significar, e com uma delas tive um momento de surpresa

20
00:01:30,720 --> 00:01:35,840
para saber por que as distribuições normais desempenham o papel que eles fazem isso em probabilidade, por

21
00:01:35,840 --> 00:01:40,320
que é uma forma tão natural para uma função. Mas estou me adiantando, há muita

22
00:01:40,320 --> 00:01:44,800
configuração para isso. Neste vídeo, nosso foco principal será apenas no caso discreto e,

23
00:01:44,800 --> 00:01:49,920
em particular, na construção de um algoritmo muito inesperado, mas muito inteligente, para calculá-los.

24
00:01:49,920 --> 00:01:54,400
E vou estender a discussão do caso contínuo para uma segunda parte.

25
00:01:57,840 --> 00:02:03,120
É muito tentador começar com os exemplos de processamento de imagem, já que eles são visualmente

26
00:02:03,120 --> 00:02:06,880
os mais intrigantes, mas há alguns detalhes que tornam o caso de processamento de imagem menos

27
00:02:06,880 --> 00:02:11,760
representativo das convoluções em geral, então, em vez disso, vamos começar com probabilidade, e em particular

28
00:02:11,760 --> 00:02:15,520
um dos exemplos mais simples que tenho certeza que todos aqui já pensaram em algum momento

29
00:02:15,520 --> 00:02:20,320
de suas vidas, que é lançar um par de dados e descobrir as chances de ver

30
00:02:20,320 --> 00:02:25,600
várias somas diferentes. E você pode dizer, não é um problema, não é um problema. Cada um dos seus dois

31
00:02:25,600 --> 00:02:31,600
dados tem seis resultados possíveis diferentes, o que nos dá um total de 36 pares distintos de

32
00:02:31,600 --> 00:02:35,600
resultados possíveis, e se apenas olharmos para todos eles podemos contar quantos pares têm uma determinada soma.

33
00:02:36,240 --> 00:02:41,120
E organizando todos os pares numa grelha como esta, uma coisa muito boa é que todos os pares que

34
00:02:41,120 --> 00:02:47,040
têm uma soma constante são visíveis ao longo de uma destas diagonais diferentes. Portanto, simplesmente contar quantos

35
00:02:47,040 --> 00:02:51,920
existem em cada uma dessas diagonais lhe dirá a probabilidade de você ver uma determinada soma.

36
00:02:52,880 --> 00:02:57,760
E eu diria, muito bom, muito bom, mas você consegue pensar em alguma outra maneira de visualizar a

37
00:02:57,760 --> 00:03:03,120
mesma pergunta? Outras imagens que podem vir à mente ao pensar em todos os pares distintos que possuem uma

38
00:03:03,120 --> 00:03:08,800
determinada soma? E talvez um de vocês levante a mão e diga: sim, tenho um. Digamos que você imagine

39
00:03:08,800 --> 00:03:14,560
esses dois conjuntos diferentes de possibilidades, cada um seguido, mas você inverte a segunda linha. Dessa forma,

40
00:03:14,560 --> 00:03:20,160
todos os pares diferentes que somam sete se alinham verticalmente assim. E se deslizarmos a

41
00:03:20,160 --> 00:03:24,880
linha inferior totalmente para a direita, então o único par que soma dois, os olhos de cobra, são

42
00:03:24,880 --> 00:03:29,680
os únicos que se alinham. E se eu deslocar isso uma unidade para a direita, os pares que

43
00:03:29,680 --> 00:03:35,440
se alinham são os dois pares diferentes que somam três. E, em geral, diferentes valores de deslocamento desta

44
00:03:35,440 --> 00:03:40,320
matriz inferior, que lembro que tive que virar primeiro, revelam todos os pares distintos que possuem uma

45
00:03:40,320 --> 00:03:48,800
determinada soma. No que diz respeito às questões de probabilidade, isto ainda não é especialmente interessante, porque

46
00:03:48,800 --> 00:03:53,120
tudo o que estamos a fazer é contar quantos resultados existem em cada uma destas categorias.

47
00:03:53,120 --> 00:03:57,280
Mas isso ocorre com a suposição implícita de que há uma chance igual de cada uma dessas faces

48
00:03:57,280 --> 00:04:02,240
aparecer. Mas e se eu lhe dissesse que tenho um conjunto especial de dados que não é uniforme? Talvez o

49
00:04:02,240 --> 00:04:06,800
dado azul tenha seu próprio conjunto de números que descreve as probabilidades de cada face que aparece, e

50
00:04:06,800 --> 00:04:11,920
o dado vermelho tenha seu próprio conjunto distinto de números. Nesse caso, se quiser descobrir, digamos, a

51
00:04:11,920 --> 00:04:17,360
probabilidade de ver um dois, multiplicaria a probabilidade de o dado azul ser um

52
00:04:17,360 --> 00:04:22,000
pela probabilidade de o dado vermelho ser um. E para as chances de ver um

53
00:04:22,000 --> 00:04:26,880
três, você olha para os dois pares distintos onde isso é possível e, novamente, multiplica as

54
00:04:26,880 --> 00:04:32,240
probabilidades correspondentes e depois soma esses dois produtos. Da mesma forma, as chances de

55
00:04:32,240 --> 00:04:36,320
ver um quatro envolvem multiplicar três pares diferentes de possibilidades e adicioná-los

56
00:04:36,320 --> 00:04:41,360
todos. E no espírito de estabelecer algumas fórmulas, vamos nomear essas probabilidades superiores como a1, a2, a3 e assim por

57
00:04:41,360 --> 00:04:48,000
diante, e nomear as inferiores como b1, b2, b3 e assim por diante. E, em geral, este processo,

58
00:04:48,000 --> 00:04:52,080
onde pegamos duas matrizes diferentes de números, invertemos a segunda e depois as alinhamos em

59
00:04:52,080 --> 00:04:56,160
vários valores de deslocamento diferentes, pegamos um monte de produtos em pares e os

60
00:04:56,160 --> 00:05:00,960
somamos, esse é um dos maneiras fundamentais de pensar sobre o que é uma convolução.

61
00:05:00,960 --> 00:05:08,960
Então, só para explicar com mais exatidão, por meio desse processo, geramos probabilidades de ver dois,

62
00:05:08,960 --> 00:05:13,840
três, quatro, e assim por diante até 12, e as obtivemos misturando uma lista de

63
00:05:13,840 --> 00:05:20,080
valores, a, e outra. lista de valores, b. Na linguagem, diríamos que a convolução dessas duas sequências

64
00:05:20,080 --> 00:05:25,600
nos dá esta nova sequência, a nova sequência de 11 valores, cada um dos quais parece uma

65
00:05:25,600 --> 00:05:30,160
soma de produtos aos pares. Se preferir, outra maneira de pensar na mesma operação é primeiro

66
00:05:30,160 --> 00:05:36,240
criar uma tabela de todos os produtos aos pares e depois somar ao longo de todas essas

67
00:05:36,240 --> 00:05:41,120
diagonais. Novamente, essa é uma maneira de misturar essas duas sequências de números para obter uma nova sequência

68
00:05:41,120 --> 00:05:46,400
de 11 números. É a mesma operação que se pensava nas janelas de correr, apenas outra perspectiva.

69
00:05:46,960 --> 00:05:51,280
Colocando uma pequena notação nisso, veja como você pode vê-lo escrito. A convolução de a e

70
00:05:51,280 --> 00:05:57,200
b, denotada por este pequeno asterisco, é uma nova lista, e o enésimo elemento dessa lista parece uma soma, e

71
00:05:57,200 --> 00:06:03,440
essa soma abrange todos os diferentes pares de índices, i e j, de modo que a soma de esses índices

72
00:06:03,440 --> 00:06:09,440
são iguais a n. É meio complicado, mas por exemplo, se n fosse 6, os pares que estamos examinando são 1 e

73
00:06:09,440 --> 00:06:15,680
5, 2 e 4, 3 e 3, 4 e 2, 5 e 1, todos os pares diferentes que se somam para 6.

74
00:06:16,400 --> 00:06:20,640
Mas, honestamente, não importa como você escreva, a notação é de importância secundária em relação ao visual que você

75
00:06:20,640 --> 00:06:26,320
pode ter em mente para o processo. Aqui, talvez ajude fazer um exemplo super simples, onde posso perguntar

76
00:06:26,320 --> 00:06:32,000
qual é a convolução da lista 1, 2, 3, com a lista 4, 5, 6. Você pode imaginar

77
00:06:32,000 --> 00:06:36,160
pegar essas duas listas, virar a segunda e começar com a tampa

78
00:06:36,160 --> 00:06:41,200
totalmente para a esquerda. Então, o par de valores que se alinham são 1 e 4, multiplique-os

79
00:06:41,200 --> 00:06:45,680
e isso nos dará nosso primeiro termo de nossa saída. Deslize a matriz inferior uma unidade para a direita,

80
00:06:45,680 --> 00:06:51,840
os pares que se alinham são 1 e 5 e 2 e 4, multiplique esses pares, some-os e isso nos

81
00:06:51,840 --> 00:06:57,600
dá 13, a próxima entrada em nossa saída. Deslize as coisas mais uma vez e pegaremos 1 vezes 6, mais

82
00:06:57,600 --> 00:07:04,400
2 vezes 5, mais 3 vezes 4, o que dá 28. Mais um slide e obtemos 2 vezes 6, mais

83
00:07:04,400 --> 00:07:10,000
3 vezes 5, e isso nos dá 27 e, finalmente, o último termo será parecido com 3 vezes 6.

84
00:07:10,560 --> 00:07:14,080
Se desejar, você pode acessar qualquer que seja sua linguagem de programação favorita e sua biblioteca

85
00:07:14,080 --> 00:07:18,640
favorita que inclui várias operações numéricas, e pode confirmar que não estou mentindo para você.

86
00:07:18,640 --> 00:07:24,320
Se você pegar a convolução de 1, 2, 3, contra 4, 5, 6, este é de fato o resultado que você obterá.

87
00:07:24,880 --> 00:07:29,200
Vimos um caso em que esta é uma operação natural e desejável, somando-se a distribuições

88
00:07:29,200 --> 00:07:34,640
de probabilidade, e outro exemplo comum seria uma média móvel. Imagine que você tem uma longa

89
00:07:34,640 --> 00:07:39,920
lista de números e pega outra lista menor de números que somam 1. Nesse caso, tenho apenas uma

90
00:07:39,920 --> 00:07:45,280
pequena lista de 5 valores, e todos são iguais a 1 quinto. Então, se fizermos esse processo de

91
00:07:45,280 --> 00:07:49,760
convolução de janela deslizante, fecharmos os olhos e varrermos para debaixo do tapete o que acontece

92
00:07:50,560 --> 00:07:55,120
logo no início, uma vez que nossa lista menor de valores se sobrepõe inteiramente à maior,

93
00:07:55,680 --> 00:08:01,120
pense no que cada termo neste convolução realmente significa. A cada iteração, o que você faz

94
00:08:01,120 --> 00:08:06,400
é multiplicar cada um dos valores dos seus dados por 1/5 e somá-los todos, o que significa

95
00:08:06,400 --> 00:08:12,080
que você está calculando uma média dos seus dados dentro desta pequena janela. No geral, o processo

96
00:08:12,080 --> 00:08:16,800
fornece uma versão suavizada dos dados originais, e você pode modificar isso começando com uma pequena

97
00:08:16,800 --> 00:08:21,280
lista diferente de números, e contanto que toda essa pequena lista some 1, você ainda pode

98
00:08:21,280 --> 00:08:25,840
interpretá-la como uma mudança. média. No exemplo mostrado aqui, essa média móvel daria mais

99
00:08:25,840 --> 00:08:30,720
peso ao valor central. Isso também resulta em uma versão suavizada dos dados.

100
00:08:33,200 --> 00:08:37,840
Se você fizer um análogo bidimensional disso, terá um algoritmo divertido para desfocar uma

101
00:08:37,840 --> 00:08:43,120
determinada imagem. E devo dizer que as animações que estou prestes a mostrar são modificadas de algo que fiz

102
00:08:43,120 --> 00:08:48,160
originalmente para parte de um conjunto de palestras que fiz com o Julia Lab no MIT para uma

103
00:08:48,160 --> 00:08:52,320
determinada aula do OpenCourseWare que incluía uma unidade de processamento de imagem. Lá fizemos um pouco mais para mergulhar

104
00:08:52,320 --> 00:08:56,640
no código por trás de tudo isso, então se você estiver curioso vou deixar alguns links. Mas

105
00:08:56,640 --> 00:09:01,440
focando novamente neste exemplo desfocado, o que está acontecendo é que eu tenho uma pequena grade 3x3 de

106
00:09:01,440 --> 00:09:06,480
valores que marcha ao longo de nossa imagem original, e se aumentarmos o zoom, cada um desses

107
00:09:06,480 --> 00:09:11,120
valores é 19, e o que estou fazendo em cada iteração está multiplicando cada um desses valores pelo

108
00:09:11,120 --> 00:09:16,080
pixel correspondente sobre o qual ele está. E é claro que na ciência da computação pensamos

109
00:09:16,080 --> 00:09:20,400
nas cores como pequenos vetores de três valores, representando os componentes vermelho, verde e azul.

110
00:09:20,400 --> 00:09:25,440
Quando multiplico todos esses pequenos valores por 19 e os adiciono, obtemos uma média ao longo de

111
00:09:25,440 --> 00:09:30,480
cada canal de cor, e o pixel correspondente para a imagem à direita é definido como essa

112
00:09:30,480 --> 00:09:36,320
soma. O efeito geral, ao fazermos isso para cada pixel da imagem, é que cada um se infiltra

113
00:09:36,320 --> 00:09:40,880
em todos os seus vizinhos, o que nos dá uma versão mais desfocada do que a original.

114
00:09:41,680 --> 00:09:46,640
Na linguagem diríamos que a imagem à direita é uma convolução da nossa imagem original com uma pequena

115
00:09:46,640 --> 00:09:52,000
grade de valores. Ou, mais tecnicamente, talvez eu devesse dizer que é a convolução com uma versão

116
00:09:52,000 --> 00:09:56,160
girada em 180 graus daquela pequena grade de valores. Não que isso importe quando a grade

117
00:09:56,160 --> 00:10:00,720
é simétrica, mas vale a pena ter em mente que a definição de uma convolução,

118
00:10:00,720 --> 00:10:05,760
herdada do contexto matemático puro, deve sempre convidá-lo a pensar em inverter essa segunda matriz.

119
00:10:05,760 --> 00:10:10,240
Se modificarmos um pouco isso, poderemos obter um efeito de desfoque muito mais elegante, escolhendo uma grade de

120
00:10:10,240 --> 00:10:15,920
valores diferente. Neste caso tenho uma pequena grade 5x5, mas a distinção não é tanto o seu tamanho.

121
00:10:15,920 --> 00:10:19,920
Se aumentarmos o zoom, notamos que o valor no meio é muito maior do que o valor nas bordas, e de

122
00:10:19,920 --> 00:10:25,360
onde isso vem é que todos eles são amostrados a partir de uma curva em forma de sino, conhecida como

123
00:10:25,360 --> 00:10:30,240
distribuição gaussiana. Dessa forma, quando multiplicamos todos esses valores pelo pixel correspondente sobre o qual eles

124
00:10:30,240 --> 00:10:35,200
estão, estamos dando muito mais peso a esse pixel central e muito menos aos que

125
00:10:35,200 --> 00:10:39,920
estão na borda. E assim como antes, o pixel correspondente à direita é definido como esta

126
00:10:39,920 --> 00:10:45,360
soma. À medida que fazemos esse processo para cada pixel, ocorre um efeito de desfoque que

127
00:10:45,360 --> 00:10:49,760
simula com muito mais autenticidade a noção de tirar o foco da lente ou algo parecido.

128
00:10:49,760 --> 00:10:54,960
Mas desfocar está longe de ser a única coisa que você pode fazer com essa ideia. Por exemplo, dê uma olhada

129
00:10:54,960 --> 00:10:59,600
nesta pequena grade de valores, que envolve alguns números positivos à esquerda e alguns números

130
00:10:59,600 --> 00:11:04,480
negativos à direita, que irei colorir com azul e vermelho respectivamente. Reserve um momento para ver se

131
00:11:04,480 --> 00:11:11,680
você consegue prever e entender o efeito que isso terá na imagem final. Então, neste caso, pensarei na imagem

132
00:11:11,680 --> 00:11:16,560
apenas em tons de cinza em vez de colorida, de modo que cada um dos pixels seja representado apenas por

133
00:11:16,560 --> 00:11:21,280
um número em vez de três. E uma coisa que vale a pena notar é que à medida que fazemos

134
00:11:21,280 --> 00:11:26,240
esta convolução é possível obter valores negativos. Por exemplo, neste ponto aqui, se ampliarmos a metade esquerda de nossa

135
00:11:26,240 --> 00:11:30,960
pequena grade, ela ficará inteiramente em cima dos pixels pretos, o que teria um valor zero, mas a metade

136
00:11:30,960 --> 00:11:35,360
direita dos valores negativos ficaria toda em cima dos pixels brancos, o que teria tem o valor um.

137
00:11:36,000 --> 00:11:40,960
Então, quando multiplicamos os termos correspondentes e os somamos, os resultados serão muito negativos, e a maneira como

138
00:11:40,960 --> 00:11:45,120
estou exibindo isso na imagem à direita é colorir os valores negativos em vermelho e os valores

139
00:11:45,120 --> 00:11:49,520
positivos em azul. Outra coisa a notar é que quando você está em um patch que é todo da mesma

140
00:11:49,520 --> 00:11:55,680
cor, tudo vai para zero, já que a soma dos valores em nossa pequena grade é zero. Isto é muito

141
00:11:55,680 --> 00:11:59,680
diferente dos dois exemplos anteriores, onde a soma da nossa pequena grelha era um, o que nos permite

142
00:11:59,680 --> 00:12:05,760
interpretá-la como uma média móvel e, portanto, um desfoque. Resumindo, esse pequeno processo basicamente detecta onde

143
00:12:05,760 --> 00:12:10,240
quer que haja variação no valor do pixel conforme você se move da esquerda para

144
00:12:10,240 --> 00:12:13,760
a direita e, assim, oferece uma maneira de captar todas as bordas verticais da imagem.

145
00:12:16,560 --> 00:12:20,960
E da mesma forma, se girarmos essa grade de modo que ela varie conforme você se move

146
00:12:20,960 --> 00:12:26,000
de cima para baixo, isso será captado em todas as bordas horizontais, o que no caso da

147
00:12:26,000 --> 00:12:31,520
imagem da nossa pequena criatura torta resulta em alguns lindos olhos demoníacos. A propósito, essa grade menor

148
00:12:31,520 --> 00:12:36,160
costuma ser chamada de kernel, e a beleza aqui é como, apenas escolhendo um kernel diferente, você pode

149
00:12:36,160 --> 00:12:40,240
obter diferentes efeitos de processamento de imagem, não apenas desfocando a detecção de bordas, mas também coisas como

150
00:12:40,240 --> 00:12:44,800
nitidez. Para aqueles que já ouviram falar de uma rede neural convolucional, a ideia é

151
00:12:44,800 --> 00:12:49,600
usar dados para descobrir quais deveriam ser os kernels, conforme determinado por tudo o que

152
00:12:49,600 --> 00:12:55,120
a rede neural deseja detectar. Outra coisa que talvez eu deva mencionar é a duração da

153
00:12:55,120 --> 00:12:59,040
saída. Para algo como o exemplo da média móvel, você pode querer pensar apenas nos termos quando ambas

154
00:12:59,040 --> 00:13:04,080
as janelas estiverem totalmente alinhadas uma com a outra ou, no exemplo de processamento de imagem, talvez

155
00:13:04,080 --> 00:13:09,200
você queira que a saída final tenha o mesmo tamanho do original. Agora, as convoluções como uma operação

156
00:13:09,200 --> 00:13:13,920
matemática pura sempre produzem um array que é maior do que os dois arrays com os quais você começou,

157
00:13:13,920 --> 00:13:17,520
pelo menos assumindo que um deles não tenha o comprimento de um. Saiba apenas que, em certos

158
00:13:17,520 --> 00:13:21,440
contextos da ciência da computação, muitas vezes você deseja truncar deliberadamente essa saída.

159
00:13:21,520 --> 00:13:29,200
Outra coisa que vale a pena destacar é que, no contexto da ciência da computação, essa noção

160
00:13:29,200 --> 00:13:34,080
de inverter o kernel antes de deixá-lo percorrer o original muitas vezes parece muito estranha e desnecessária,

161
00:13:34,080 --> 00:13:38,960
mas, novamente, observe que é isso que é herdado do contexto matemático puro, onde, como nós Vi

162
00:13:38,960 --> 00:13:44,000
com as probabilidades que é uma coisa incrivelmente natural de se fazer. E na verdade posso mostrar

163
00:13:44,000 --> 00:13:48,480
mais um exemplo de matemática pura onde até os programadores deveriam se preocupar com este porque abre

164
00:13:48,480 --> 00:13:53,760
as portas para um algoritmo muito mais rápido para calcular tudo isso. Para configurar o que quero

165
00:13:53,760 --> 00:13:58,560
dizer com mais rápido aqui, deixe-me voltar e puxar um pouco de python novamente e vou criar dois

166
00:13:58,560 --> 00:14:02,880
arrays relativamente grandes diferentes. Cada um terá cem mil elementos aleatórios e vou avaliar

167
00:14:02,880 --> 00:14:08,640
o tempo de execução da função convolve da biblioteca numpy. E neste caso

168
00:14:08,640 --> 00:14:12,800
ele executa várias iterações diferentes, tenta encontrar uma média, e parece que neste computador

169
00:14:12,880 --> 00:14:18,640
pelo menos a média é 4. 87 segundos. Por outro lado, se eu usar uma

170
00:14:18,640 --> 00:14:24,080
função diferente da biblioteca scipy chamada fftconvolve, que é a mesma coisa, apenas implementada de forma

171
00:14:24,080 --> 00:14:30,640
diferente, leva apenas 4. 3 milissegundos em média, ou seja, uma melhoria de três ordens de magnitude.

172
00:14:30,640 --> 00:14:34,800
E, novamente, mesmo que voe com um nome diferente, ele está fornecendo a mesma saída que

173
00:14:34,800 --> 00:14:38,880
a outra função convolve, está apenas fazendo algo para fazer isso de uma maneira mais inteligente.

174
00:14:38,880 --> 00:14:46,800
Lembre-se de como, no exemplo da probabilidade, eu disse que outra maneira de pensar sobre a convolução seria

175
00:14:46,800 --> 00:14:51,520
criar esta tabela de todos os produtos aos pares e, em seguida, somar esses produtos aos pares ao

176
00:14:51,520 --> 00:14:56,560
longo das diagonais. É claro que não há nada específico para probabilidade. Sempre que você está reunindo

177
00:14:56,560 --> 00:15:00,880
duas listas diferentes de números, você pode pensar dessa maneira. Crie esse tipo de tabuada com todos

178
00:15:00,880 --> 00:15:05,520
os produtos aos pares e então cada soma ao longo da diagonal corresponde a um de seus

179
00:15:05,520 --> 00:15:11,680
resultados finais. Um contexto onde esta visão é especialmente natural é quando você multiplica

180
00:15:11,680 --> 00:15:16,240
dois polinômios. Por exemplo, deixe-me pegar a pequena grade que já temos e substituir os termos superiores por

181
00:15:16,240 --> 00:15:23,920
1, 2x e 3x ao quadrado e substituir os outros termos por 4, 5x e 6x ao quadrado.

182
00:15:23,920 --> 00:15:27,920
Agora pense no que significa quando criamos todos esses produtos diferentes em pares entre as

183
00:15:27,920 --> 00:15:32,960
duas listas. O que você está fazendo é essencialmente expandir o produto completo dos dois polinômios

184
00:15:32,960 --> 00:15:38,240
que escrevi e então, quando você soma ao longo da diagonal, isso corresponde à coleta de todos

185
00:15:38,240 --> 00:15:43,920
os termos semelhantes, o que é muito legal, expandir um polinômio e coletar termos semelhantes é

186
00:15:43,920 --> 00:15:50,640
exatamente o mesmo processo que uma convolução. Mas isso nos permite fazer algo muito legal, porque

187
00:15:50,640 --> 00:15:55,360
pense no que estamos dizendo aqui. Estamos dizendo que se você pegar duas funções diferentes

188
00:15:55,360 --> 00:16:00,560
e multiplicá-las, o que é uma operação pontual simples, é a mesma coisa que se você

189
00:16:00,560 --> 00:16:05,920
primeiro extraísse os coeficientes de cada uma delas, assumindo que são polinômios e depois fizesse

190
00:16:05,920 --> 00:16:11,840
uma convolução dessas duas listas de coeficientes. O que torna isso tão interessante é que as

191
00:16:11,840 --> 00:16:16,560
convoluções parecem, em princípio, muito mais complicadas do que a simples multiplicação e não quero dizer apenas

192
00:16:16,560 --> 00:16:21,760
conceitualmente, elas são mais difíceis de pensar, quero dizer, computacionalmente, são necessárias mais etapas para realizar

193
00:16:21,760 --> 00:16:27,040
uma convolução do que para realizar uma produto pontual de duas listas diferentes. Por exemplo, digamos

194
00:16:27,040 --> 00:16:31,920
que eu lhe dei dois polinômios realmente grandes, digamos, cada um com cem coeficientes diferentes, então se

195
00:16:32,480 --> 00:16:37,520
a maneira como você os multiplicou fosse expandindo este produto, você sabe preencher toda essa grade

196
00:16:37,520 --> 00:16:43,600
de 100 por 100 de produtos pareados que exigiriam que você execute 10.000 produtos diferentes e,

197
00:16:43,600 --> 00:16:48,560
quando você coletar todos os termos semelhantes ao longo das diagonais, haverá outro conjunto de cerca de

198
00:16:48,560 --> 00:16:55,200
10.000 operações. De maneira mais geral, no jargão, diríamos que o algoritmo é O de n ao quadrado, significando

199
00:16:55,200 --> 00:17:00,560
para duas listas de tamanho n, da maneira que o número de escalas de operações é proporcional ao quadrado de n.

200
00:17:00,560 --> 00:17:06,320
Por outro lado, se eu pensar em dois polinômios em termos de suas saídas, por

201
00:17:06,320 --> 00:17:11,680
exemplo, amostrar seus valores em algumas entradas, então multiplicá-los requer apenas tantas operações quanto o

202
00:17:11,680 --> 00:17:17,200
número de amostras, já que novamente é uma operação pontual e com polinômios você só

203
00:17:17,200 --> 00:17:22,400
precisa um número finito de amostras para poder recuperar os coeficientes. Por exemplo, duas saídas

204
00:17:22,400 --> 00:17:27,920
são suficientes para especificar exclusivamente um polinômio linear, três saídas seriam suficientes para especificar exclusivamente um polinômio

205
00:17:27,920 --> 00:17:33,680
quadrático e, em geral, se você conhece n saídas distintas, isso é suficiente para especificar exclusivamente

206
00:17:33,680 --> 00:17:38,800
um polinômio que possui n coeficientes diferentes ou, se preferir, poderíamos expresse isso na linguagem dos

207
00:17:38,800 --> 00:17:43,680
sistemas de equações, imagine que eu lhe digo que tenho algum polinômio, mas não lhe digo

208
00:17:43,680 --> 00:17:47,840
quais são os coeficientes, esses são um mistério para você. Em nosso exemplo, você pode pensar nisso

209
00:17:47,840 --> 00:17:52,960
como o produto que estamos tentando descobrir e então suponha que eu diga que vou apenas dizer quais

210
00:17:52,960 --> 00:17:59,600
seriam as saídas deste polinômio se você inserisse várias entradas diferentes, como 0, 1, 2 , 3, e assim

211
00:17:59,600 --> 00:18:04,800
por diante e eu lhe dou o suficiente para que você tenha tantas equações quanto incógnitas. Acontece que

212
00:18:04,800 --> 00:18:09,840
é um sistema linear de equações, então isso é bom e, em princípio, pelo menos, isso deve ser suficiente

213
00:18:09,840 --> 00:18:14,880
para recuperar os coeficientes.

214
00:18:14,880 --> 00:18:20,160


215
00:18:20,160 --> 00:18:26,560


216
00:18:26,560 --> 00:18:32,720


217
00:18:32,720 --> 00:18:38,000


218
00:18:38,000 --> 00:18:43,120


219
00:18:43,120 --> 00:18:47,760


220
00:18:47,760 --> 00:18:53,520


221
00:18:53,520 --> 00:18:58,400


222
00:18:58,400 --> 00:19:04,240


223
00:19:04,240 --> 00:19:09,200


224
00:19:09,200 --> 00:19:13,600


225
00:19:13,600 --> 00:19:18,720


226
00:19:18,720 --> 00:19:23,840


227
00:19:23,840 --> 00:19:30,080


228
00:19:30,080 --> 00:19:34,400


229
00:19:34,400 --> 00:19:41,600


230
00:19:41,600 --> 00:19:46,480


231
00:19:46,480 --> 00:19:51,360


232
00:19:51,360 --> 00:19:57,600


233
00:19:57,600 --> 00:20:03,200


234
00:20:03,200 --> 00:20:08,160


235
00:20:08,160 --> 00:20:12,640


236
00:20:12,640 --> 00:20:17,520


237
00:20:17,520 --> 00:20:22,720


238
00:20:22,720 --> 00:20:28,320


239
00:20:28,320 --> 00:20:33,040


240
00:20:33,040 --> 00:20:38,080


241
00:20:38,080 --> 00:20:43,600


242
00:20:43,600 --> 00:20:48,640


243
00:20:48,640 --> 00:20:53,200


244
00:20:53,200 --> 00:20:58,960


245
00:20:58,960 --> 00:21:03,280


246
00:21:03,280 --> 00:21:08,960


247
00:21:08,960 --> 00:21:14,480


248
00:21:14,480 --> 00:21:18,480


249
00:21:18,480 --> 00:21:25,600


250
00:21:25,600 --> 00:21:30,560


251
00:21:30,560 --> 00:21:35,120


252
00:21:35,120 --> 00:21:39,600


253
00:21:39,600 --> 00:21:44,480


254
00:21:44,480 --> 00:21:50,160


255
00:21:50,160 --> 00:21:54,800


256
00:21:54,800 --> 00:21:59,360


257
00:21:59,360 --> 00:22:04,640


258
00:22:04,640 --> 00:22:10,720


259
00:22:10,720 --> 00:22:16,000


260
00:22:16,000 --> 00:22:20,720


261
00:22:20,720 --> 00:22:26,320


262
00:22:26,320 --> 00:22:31,280


263
00:22:31,280 --> 00:22:36,880


264
00:22:36,880 --> 00:22:51,040


