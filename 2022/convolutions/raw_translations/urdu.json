[
 {
  "input": "Suppose I give you two different lists of numbers, or maybe two different functions, and I ask you to think of all the ways you might combine those two lists to get a new list of numbers, or combine the two functions to get a new function.",
  "model": "nmt",
  "translatedText": "فرض کریں کہ میں آپ کو نمبروں کی دو مختلف فہرستیں دیتا ہوں، یا شاید دو مختلف فنکشنز، اور میں آپ سے ان تمام طریقوں کے بارے میں سوچنے کے لیے کہتا ہوں جن سے آپ ان دو فہرستوں کو یکجا کر کے نمبروں کی نئی فہرست حاصل کر سکتے ہیں، یا ایک نیا فنکشن حاصل کرنے کے لیے دونوں فنکشنز کو یکجا کر سکتے ہیں۔.",
  "time_range": [
   0.0,
   11.737373737373737
  ]
 },
 {
  "input": "Maybe one simple way that comes to mind is to simply add them together term by term.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   11.737373737373737,
   16.26727272727273
  ]
 },
 {
  "input": "Likewise with the functions, you can add all the corresponding outputs.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   16.26727272727273,
   20.050526315789476
  ]
 },
 {
  "input": "In a similar vein, you could also multiply the two lists term by term and do the same thing with the functions.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   20.050526315789476,
   26.14545454545454
  ]
 },
 {
  "input": "But there's another kind of combination just as fundamental as both of those, but a lot less commonly discussed, known as a convolution.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   26.14545454545454,
   33.84
  ]
 },
 {
  "input": "But unlike the previous two cases, it's not something that's merely inherited from an operation you can do to numbers.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   33.84,
   39.89333333333333
  ]
 },
 {
  "input": "It's something genuinely new for the context of lists of numbers or combining functions.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   39.89333333333333,
   44.71666666666667
  ]
 },
 {
  "input": "They show up all over the place, they are ubiquitous in image processing, it's a core construct in the theory of probability, they're used a lot in solving differential equations, and one context where you've almost certainly seen it, if not by this name, is multiplying two polynomials together.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   44.71666666666667,
   60.210526315789465
  ]
 },
 {
  "input": "As someone in the business of visual explanations, this is an especially great topic, because the formulaic definition in isolation and without context can look kind of intimidating, but if we take the time to really unpack what it's saying, and before that actually motivate why you would want something like this, it's an incredibly beautiful operation.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   60.210526315789465,
   78.8
  ]
 },
 {
  "input": "And I have to admit, I actually learned a little something while putting together the visuals for this project.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   78.8,
   83.43636363636364
  ]
 },
 {
  "input": "In the case of convolving two different functions, I was trying to think of different ways you might picture what that could mean, and with one of them I had a little bit of an aha moment for why it is that normal distributions play the role that they do in probability, why it's such a natural shape for a function.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   83.43636363636364,
   98.44571428571427
  ]
 },
 {
  "input": "But I'm getting ahead of myself, there's a lot of setup for that one.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   98.44571428571427,
   101.57999999999998
  ]
 },
 {
  "input": "In this video, our primary focus is just going to be on the discrete case, and in particular building up to a very unexpected but very clever algorithm for computing these.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   101.57999999999998,
   110.19654320987655
  ]
 },
 {
  "input": "And I'll pull out the discussion for the continuous case into a second part.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   110.19654320987655,
   117.84
  ]
 },
 {
  "input": "It's very tempting to open up with the image processing examples, since they're visually the most intriguing, but there are a couple bits of finickiness that make the image processing case less representative of convolutions overall, so instead let's kick things off with probability, and in particular one of the simplest examples that I'm sure everyone here has thought about at some point in their life, which is rolling a pair of dice and figuring out the chances of seeing various different sums.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   117.84,
   141.53
  ]
 },
 {
  "input": "And you might say, not a problem, not a problem.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   141.53,
   144.17000000000002
  ]
 },
 {
  "input": "Each of your two dice has six different possible outcomes, which gives us a total of 36 distinct possible pairs of outcomes, and if we just look through them all we can count up how many pairs have a given sum.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   144.17000000000002,
   156.24
  ]
 },
 {
  "input": "And arranging all the pairs in a grid like this, one pretty nice thing is that all of the pairs that have a constant sum are visible along one of these different diagonals.",
  "model": "nmt",
  "translatedText": "ہوسکتا ہے کہ ایک آسان طریقہ جو ذہن میں آتا ہے وہ یہ ہے کہ انہیں صرف اصطلاح کے لحاظ سے ایک ساتھ شامل کیا جائے۔ اسی طرح فنکشنز کے ساتھ، آپ تمام متعلقہ آؤٹ پٹ شامل کر سکتے ہیں۔ اسی طرح کی رگ میں، آپ دو فہرستوں کی اصطلاح کو ٹرم کے لحاظ سے ضرب بھی دے سکتے ہیں اور افعال کے ساتھ وہی کام کر سکتے ہیں۔ لیکن ان دونوں کی طرح ایک اور قسم کا امتزاج بھی بنیادی ہے، لیکن عام طور پر بہت کم زیر بحث ہے، جسے کنوولوشن کے نام سے جانا جاتا ہے۔ لیکن پچھلے دو کیسز کے برعکس، یہ ایسی چیز نہیں ہے جو محض ایک آپریشن سے وراثت میں ملی ہو جسے آپ نمبرز کے لیے کر سکتے ہیں۔ نمبروں کی فہرستوں یا افعال کو یکجا کرنے کے تناظر میں یہ واقعی نئی چیز ہے۔ وہ ہر جگہ نظر آتے ہیں، وہ امیج پروسیسنگ میں ہر جگہ موجود ہیں، یہ امکان کے نظریہ میں ایک بنیادی تعمیر ہے، یہ تفریق مساوات کو حل کرنے میں بہت زیادہ استعمال ہوتے ہیں، اور ایک سیاق و سباق جہاں آپ نے اسے تقریباً یقینی طور پر دیکھا ہوگا، اگر نہیں اس نام سے، دو کثیر الاضلاع کو ایک ساتھ ضرب کر رہا ہے۔ بصری وضاحت کے کاروبار میں کسی فرد کے طور پر، یہ خاص طور پر ایک بہت اچھا موضوع ہے، کیونکہ تنہائی میں اور سیاق و سباق کے بغیر فارمولک تعریف ایک طرح سے خوفزدہ نظر آتی ہے، لیکن اگر ہم واقعی اس بات کو کھولنے کے لیے وقت نکالیں کہ یہ کیا کہہ رہا ہے، اور اس سے پہلے اصل میں حوصلہ افزائی کریں کہ کیوں آپ کچھ ایسا چاہتے ہیں، یہ ایک ناقابل یقین حد تک خوبصورت آپریشن ہے۔ اور مجھے تسلیم کرنا پڑے گا، میں نے اس پراجیکٹ کے لیے ویژولز کو اکٹھا کرتے ہوئے اصل میں کچھ سیکھا۔ دو مختلف فنکشنز کو ملانے کے معاملے میں، میں مختلف طریقوں کے بارے میں سوچنے کی کوشش کر رہا تھا کہ آپ اس کی تصویر کشی کر سکتے ہیں کہ اس کا کیا مطلب ہو سکتا ہے، اور ان میں سے ایک کے ساتھ مجھے تھوڑا سا آہا لمحہ ملا کہ ایسا کیوں ہے کہ عام تقسیم اس کردار کو ادا کرتی ہے۔ وہ احتمال میں کرتے ہیں، کیوں کہ یہ کسی فنکشن کے لیے قدرتی شکل ہے۔ لیکن میں اپنے آپ سے آگے بڑھ رہا ہوں، اس کے لیے کافی سیٹ اپ ہے۔ اس ویڈیو میں، ہماری بنیادی توجہ صرف مجرد کیس پر مرکوز ہے، اور خاص طور پر ان کی کمپیوٹنگ کے لیے ایک بہت ہی غیر متوقع لیکن بہت ہوشیار الگورتھم کو تیار کرنا ہے۔ اور میں مسلسل کیس کی بحث کو دوسرے حصے میں نکالوں گا۔ امیج پروسیسنگ کی مثالوں کے ساتھ کھولنا بہت پرکشش ہے، کیونکہ وہ بصری طور پر سب سے زیادہ دل چسپ ہیں، لیکن اس میں کچھ نکتہ چینی ہے جو امیج پروسیسنگ کیس کو مجموعی طور پر کم نمائندہ بناتی ہے، لہذا اس کے بجائے آئیے امکانات کے ساتھ چیزوں کو شروع کریں، اور خاص طور پر سب سے آسان مثالوں میں سے ایک جس کے بارے میں مجھے یقین ہے کہ یہاں ہر کسی نے اپنی زندگی کے کسی نہ کسی موڑ پر سوچا ہوگا، جو ڈائس کا ایک جوڑا گھوم رہا ہے اور مختلف مختلف رقمیں دیکھنے کے امکانات کا پتہ لگا رہا ہے۔ اور آپ کہہ سکتے ہیں، کوئی مسئلہ نہیں، مسئلہ نہیں ہے۔ آپ کے دو نرد میں سے ہر ایک کے چھ مختلف ممکنہ نتائج ہوتے ہیں، جو ہمیں نتائج کے کل 36 الگ الگ ممکنہ جوڑے فراہم کرتے ہیں، اور اگر ہم صرف ان سب کو دیکھیں تو ہم گن سکتے ہیں کہ دی گئی رقم میں کتنے جوڑے ہیں۔ اور تمام جوڑوں کو اس طرح ایک گرڈ میں ترتیب دینا، ایک بہت اچھی بات یہ ہے کہ وہ تمام جوڑے جن کی ایک مستقل رقم ہوتی ہے ان مختلف اخترن میں سے کسی ایک کے ساتھ نظر آتے ہیں۔ لہٰذا صرف یہ گننا کہ ان میں سے ہر ایک اخترن پر کتنے موجود ہیں آپ کو بتائے گا کہ آپ کو ایک خاص رقم دیکھنے کے کتنے امکانات ہیں۔ اور میں کہوں گا، بہت اچھا، بہت اچھا، لیکن کیا آپ کسی اور طریقے کے بارے میں سوچ سکتے ہیں جس سے آپ اسی سوال کو تصور کر سکتے ہیں؟ دوسری تصاویر جو ذہن میں آنے والے تمام الگ الگ جوڑوں کے بارے میں سوچ سکتی ہیں جن میں دی گئی رقم ہے؟ اور ہو سکتا ہے کہ آپ میں سے کوئی اپنا ہاتھ اٹھائے اور کہے، ہاں، مجھے ایک مل گیا ہے۔ ہم کہتے ہیں کہ آپ امکانات کے ان دو مختلف سیٹوں کو ایک قطار میں تصویر بناتے ہیں، لیکن آپ اس دوسری قطار کے ارد گرد پلٹ جاتے ہیں۔ اس طرح تمام مختلف جوڑے جو عمودی طور پر سات لائنوں تک جوڑتے ہیں۔ اور اگر ہم اس نیچے والی قطار کو پوری طرح دائیں طرف سلائیڈ کرتے ہیں، تو منفرد جوڑا جو دو تک کا اضافہ کرتا ہے، سانپ کی آنکھیں، صرف وہی ہیں جو سیدھ میں آتی ہیں۔ اور اگر میں اس کو ایک یونٹ سے زیادہ دائیں طرف جھکاتا ہوں، جو جوڑے سیدھ میں رکھتے ہیں وہ دو مختلف جوڑے ہیں جو تین تک جوڑتے ہیں۔ اور عام طور پر، اس نچلی صف کی مختلف آفسیٹ ویلیوز، جو یاد ہے کہ مجھے سب سے پہلے پلٹنا پڑا، ان تمام الگ الگ جوڑوں کو ظاہر کرتا ہے جن کی دی گئی رقم ہے۔ جہاں تک امکانی سوالات کا تعلق ہے، یہ اب بھی خاص طور پر دلچسپ نہیں ہے، کیونکہ ہم صرف یہ گن رہے ہیں کہ ان میں سے ہر ایک زمرے میں کتنے نتائج ہیں۔ لیکن یہ اس مفروضے کے ساتھ ہے کہ ان چہروں میں سے ہر ایک کے سامنے آنے کا مساوی موقع ہے۔ لیکن کیا ہوگا اگر میں آپ کو بتاؤں کہ میرے پاس ڈائس کا ایک خاص سیٹ ہے جو یکساں نہیں ہے؟ ہوسکتا ہے کہ بلیو ڈائی کے پاس نمبروں کا اپنا ایک سیٹ ہو جو سامنے آنے والے ہر چہرے کے امکانات کو بیان کرتا ہے، اور سرخ ڈائی کا اپنا الگ الگ نمبر ہوتا ہے۔ اس صورت میں، اگر آپ یہ معلوم کرنا چاہتے ہیں کہ، ایک دو دیکھنے کے امکان کو، آپ اس امکان کو ضرب دیں گے کہ نیلی ڈائی ایک بار ہے اس امکان سے کہ ریڈ ڈائی ایک ہے۔ اور تین دیکھنے کے امکانات کے لیے، آپ ان دو الگ الگ جوڑوں کو دیکھیں جہاں یہ ممکن ہو، اور دوبارہ، متعلقہ امکانات کو ضرب دیں، اور پھر ان دو مصنوعات کو ایک ساتھ شامل کریں۔ اسی طرح، چار دیکھنے کے امکانات میں امکانات کے تین مختلف جوڑوں کو ایک ساتھ ضرب کرنا اور ان سب کو ایک ساتھ شامل کرنا شامل ہے۔ اور کچھ فارمولوں کو ترتیب دینے کی روح میں، آئیے ان سب سے اوپر کے امکانات کو a1، a2، a3، اور اسی طرح کا نام دیں، اور نیچے والے کو b1، b2، b3، وغیرہ کا نام دیں۔ اور عام طور پر، یہ عمل، جہاں ہم نمبروں کی دو مختلف صفیں لے رہے ہیں، دوسری کو چاروں طرف پلٹ رہے ہیں، اور پھر انہیں مختلف آفسیٹ ویلیوز پر لائننگ کر رہے ہیں، جوڑے کی شکل میں مصنوعات کا ایک گروپ لے کر ان کو شامل کر رہے ہیں، یہ ان میں سے ایک ہے۔ کنوولوشن کیا ہے اس کے بارے میں سوچنے کے بنیادی طریقے۔ تو صرف اس کو تھوڑا سا اور صحیح طور پر ہجے کرنے کے لیے، اس عمل کے ذریعے، ہم نے صرف دو، تین، چار، آن اور آن 12 تک دیکھنے کے امکانات پیدا کیے، اور ہم نے انہیں اقدار کی ایک فہرست، a، اور دوسری کو ملا کر حاصل کیا۔ اقدار کی فہرست، b.",
  "time_range": [
   156.24,
   165.65061224489793
  ]
 },
 {
  "input": "So simply counting how many exist on each of those diagonals will tell you how likely you are to see a particular sum.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   165.65061224489793,
   172.88
  ]
 },
 {
  "input": "And I'd say, very good, very good, but can you think of any other ways that you might visualize the same question?",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   172.88,
   178.699381443299
  ]
 },
 {
  "input": "Other images that can come to mind to think of all the distinct pairs that have a given sum?",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   178.699381443299,
   183.7448
  ]
 },
 {
  "input": "And maybe one of you raises your hand and says, yeah, I've got one.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   183.7448,
   187.55040000000002
  ]
 },
 {
  "input": "Let's say you picture these two different sets of possibilities each in a row, but you flip around that second row.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   187.55040000000002,
   194.04673267326731
  ]
 },
 {
  "input": "That way all of the different pairs which add up to seven line up vertically like this.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   194.04673267326731,
   198.95999999999998
  ]
 },
 {
  "input": "And if we slide that bottom row all the way to the right, then the unique pair that adds up to two, the snake eyes, are the only ones that align.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   198.95999999999998,
   206.30978723404257
  ]
 },
 {
  "input": "And if I schlunk that over one unit to the right, the pairs which align are the two different pairs that add up to three.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   206.30978723404257,
   212.88659793814435
  ]
 },
 {
  "input": "And in general, different offset values of this lower array, which remember I had to flip around first, reveal all the distinct pairs that have a given sum.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   212.88659793814435,
   221.77892473118277
  ]
 },
 {
  "input": "As far as probability questions go, this still isn't especially interesting, because all we're doing is counting how many outcomes there are in each of these categories.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   221.77892473118277,
   233.12
  ]
 },
 {
  "input": "But that is with the implicit assumption that there's an equal chance for each of these faces to come up.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   233.12,
   237.85011494252873
  ]
 },
 {
  "input": "But what if I told you I have a special set of dice that's not uniform?",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   237.85011494252873,
   241.89793103448275
  ]
 },
 {
  "input": "Maybe the blue die has its own set of numbers describing the probabilities for each face coming up, and the red die has its own unique distinct set of numbers.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   241.89793103448275,
   249.740198019802
  ]
 },
 {
  "input": "In that case, if you wanted to figure out, say, the probability of seeing a two, you would multiply the probability that the blue die is a one times the probability that the red die is a one.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   249.740198019802,
   259.89581395348836
  ]
 },
 {
  "input": "And for the chances of seeing a three, you look at the two distinct pairs where that's possible, and again, multiply the corresponding probabilities, and then add those two products together.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   259.89581395348836,
   269.9831578947369
  ]
 },
 {
  "input": "Similarly, the chances of seeing a four involves multiplying together three different pairs of possibilities and adding them all together.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   269.9831578947369,
   276.74893617021274
  ]
 },
 {
  "input": "And in the spirit of setting up some formulas, let's name these top probabilities a1, a2, a3, and so on, and name the bottom ones b1, b2, b3, and so on.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   276.74893617021274,
   285.90315789473686
  ]
 },
 {
  "input": "And in general, this process, where we're taking two different arrays of numbers, flipping the second one around, and then lining them up at various different offset values, taking a bunch of pairwise products and adding them up, that's one of the fundamental ways to think about what a convolution is.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   285.90315789473686,
   301.13977528089885
  ]
 },
 {
  "input": "So just to spell it out a little more exactly, through this process, we just generated probabilities for seeing two, three, four, on and on up to 12, and we got them by mixing together one list of values, a, and another list of values, b.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   301.13977528089885,
   317.0848
  ]
 },
 {
  "input": "In the lingo, we'd say the convolution of those two sequences gives us this new sequence, the new sequence of 11 values, each of which looks like some sum of pairwise products.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   317.0848,
   327.12
  ]
 },
 {
  "input": "If you prefer, another way you could think about the same operation is to first create a table of all the pairwise products, and then add up along all these diagonals.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   327.12,
   336.7023157894737
  ]
 },
 {
  "input": "Again, that's a way of mixing together these two sequences of numbers to get us a new sequence of 11 numbers.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   336.7023157894737,
   342.2477669902912
  ]
 },
 {
  "input": "It's the same operation as the sliding windows thought, just another perspective.",
  "model": "nmt",
  "translatedText": "لنگو میں، ہم یہ کہیں گے کہ ان دو ترتیبوں کا اختلاط ہمیں یہ نیا سلسلہ فراہم کرتا ہے، 11 اقدار کا نیا سلسلہ، جن میں سے ہر ایک جوڑے کی طرح مصنوعات کے کچھ مجموعے کی طرح لگتا ہے۔ اگر آپ ترجیح دیتے ہیں تو، ایک اور طریقہ جس سے آپ اسی آپریشن کے بارے میں سوچ سکتے ہیں وہ یہ ہے کہ سب سے پہلے جوڑے کے لحاظ سے تمام پروڈکٹس کا ایک ٹیبل بنائیں، اور پھر ان تمام ترچھیوں کو شامل کریں۔ ایک بار پھر، یہ نمبروں کی ان دو ترتیبوں کو ملانے کا ایک طریقہ ہے تاکہ ہمیں 11 نمبروں کی ایک نئی ترتیب حاصل ہو سکے۔ یہ وہی آپریشن ہے جیسا کہ سلائیڈنگ ونڈوز نے سوچا تھا، صرف ایک اور نقطہ نظر۔ اس پر تھوڑا سا اشارے ڈالتے ہوئے، یہ ہے کہ آپ اسے کیسے لکھے ہوئے دیکھ سکتے ہیں۔ a اور b کا کنولیشن، اس چھوٹے ستارے سے ظاہر کیا گیا ہے، ایک نئی فہرست ہے، اور اس فہرست کا نواں عنصر ایک رقم کی طرح لگتا ہے، اور یہ رقم انڈیکس کے تمام مختلف جوڑوں، i اور j پر جاتی ہے، تاکہ اس کا مجموعہ وہ اشاریے n کے برابر ہیں۔ یہ ایک قسم کی بات ہے، لیکن مثال کے طور پر، اگر n 6 تھا، تو ہم جن جوڑوں پر جا رہے ہیں وہ ہیں 1 اور 5، 2 اور 4، 3 اور 3، 4 اور 2، 5 اور 1، تمام مختلف جوڑے جو جوڑتے ہیں۔ 6 تک.",
  "time_range": [
   342.2477669902912,
   346.96
  ]
 },
 {
  "input": "Putting a little notation to it, here's how you might see it written down.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   346.96,
   350.3148936170212
  ]
 },
 {
  "input": "The convolution of a and b, denoted with this little asterisk, is a new list, and the nth element of that list looks like a sum, and that sum goes over all different pairs of indices, i and j, so that the sum of those indices is equal to n.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   350.3148936170212,
   364.738969072165
  ]
 },
 {
  "input": "It's kind of a mouthful, but for example, if n was 6, the pairs we're going over are 1 and 5, 2 and 4, 3 and 3, 4 and 2, 5 and 1, all the different pairs that add up to 6.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   364.738969072165,
   376.4
  ]
 },
 {
  "input": "But honestly, however you write it down, the notation is secondary in importance to the visual you might hold in your head for the process.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   376.4,
   383.0824
  ]
 },
 {
  "input": "Here, maybe it helps to do a super simple example, where I might ask you what's the convolution of the list 1, 2, 3, with the list 4, 5, 6.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   383.0824,
   390.9672727272727
  ]
 },
 {
  "input": "You might picture taking both of these lists, flipping around that second one, and then starting with its lid all the way over to the left.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   390.9672727272727,
   397.8576842105264
  ]
 },
 {
  "input": "Then the pair of values which align are 1 and 4, multiply them together, and that gives us our first term of our output.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   397.8576842105264,
   403.8133333333333
  ]
 },
 {
  "input": "Slide that bottom array one unit to the right, the pairs which align are 1 and 5, and 2 and 4, multiply those pairs, add them together, and that gives us 13, the next entry in our output.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   403.8133333333333,
   414.29999999999995
  ]
 },
 {
  "input": "Slide things over once more, and we'll take 1 times 6, plus 2 times 5, plus 3 times 4, which happens to be 28.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   414.29999999999995,
   421.59130434782605
  ]
 },
 {
  "input": "One more slide, and we get 2 times 6, plus 3 times 5, and that gives us 27, and finally the last term will look like 3 times 6.",
  "model": "nmt",
  "translatedText": "لیکن ایمانداری سے، چاہے آپ اسے لکھ لیں، اشارے اس بصری کی اہمیت کے لحاظ سے ثانوی ہے جو آپ اس عمل کے لیے اپنے سر میں رکھ سکتے ہیں۔ یہاں، ہوسکتا ہے کہ یہ ایک انتہائی آسان مثال کرنے میں مدد کرے، جہاں میں آپ سے پوچھ سکتا ہوں کہ فہرست 1، 2، 3، فہرست 4، 5، 6 کے ساتھ کیا ہے؟ آپ ان دونوں فہرستوں کو لے کر، اس دوسری فہرست کے ارد گرد پلٹتے ہوئے، اور پھر اس کے ڈھکن کے ساتھ شروع کرتے ہوئے بائیں طرف پوری طرح سے تصویر لے سکتے ہیں۔ پھر اقدار کا جوڑا جو 1 اور 4 کو سیدھ میں رکھتا ہے، ان کو ایک ساتھ ضرب دیں، اور اس سے ہمیں ہمارے آؤٹ پٹ کی پہلی اصطلاح ملتی ہے۔ اس نیچے والی صف کی ایک اکائی کو دائیں طرف سلائیڈ کریں، جو جوڑے 1 اور 5، اور 2 اور 4 ہیں، ان جوڑوں کو ضرب دیں، ان کو ایک ساتھ جوڑیں، اور یہ ہمیں 13 دیتا ہے، ہماری آؤٹ پٹ میں اگلی انٹری۔ چیزوں کو ایک بار پھر سلائیڈ کریں، اور ہم 1 گنا 6، جمع 2 گنا 5، جمع 3 گنا 4 لیں گے، جو کہ 28 ہوتا ہے۔ ایک اور سلائیڈ، اور ہمیں 2 گنا 6، جمع 3 گنا 5 ملتا ہے، اور اس سے ہمیں 27 ملتا ہے، اور آخر میں آخری اصطلاح 3 گنا 6 کی طرح نظر آئے گی۔ اگر آپ چاہیں تو، آپ اپنی پسندیدہ پروگرامنگ زبان جو بھی ہے، اور اپنی پسندیدہ لائبریری جس میں مختلف عددی آپریشنز شامل ہیں، کھینچ سکتے ہیں، اور آپ تصدیق کر سکتے ہیں کہ میں آپ سے جھوٹ نہیں بول رہا ہوں۔ اگر آپ 4، 5، 6 کے مقابلے میں 1، 2، 3 کا کنولیشن لیتے ہیں، تو یہ واقعی نتیجہ ہے جو آپ کو ملے گا۔ ہم نے ایک ایسا معاملہ دیکھا ہے جہاں یہ ایک قدرتی اور مطلوبہ عمل ہے، جس میں امکانی تقسیم میں اضافہ ہوتا ہے، اور ایک اور عام مثال حرکت پذیری اوسط ہوگی۔ تصور کریں کہ آپ کے پاس نمبروں کی کچھ لمبی فہرست ہے، اور آپ نمبروں کی ایک اور چھوٹی فہرست لیتے ہیں جو سب 1 تک جوڑ دیتے ہیں۔ اس معاملے میں، میرے پاس صرف 5 اقدار کی ایک چھوٹی سی فہرست ہے، اور وہ سب 1 5ویں کے برابر ہیں۔ پھر اگر ہم اس سلائیڈنگ ونڈو کنولیشن کے عمل کو کرتے ہیں، اور اپنی آنکھیں بند کر کے اس قالین کے نیچے جھاڑ دیتے ہیں کہ اس کے بالکل شروع میں کیا ہوتا ہے، ایک بار جب ہماری اقدار کی چھوٹی فہرست بڑی سے مکمل طور پر اوور لیپ ہو جاتی ہے، تو سوچیں کہ اس میں ہر اصطلاح کیا ہے؟ convolution واقعی کا مطلب ہے.",
  "time_range": [
   421.59130434782605,
   430.56
  ]
 },
 {
  "input": "If you'd like, you can pull up whatever your favorite programming language is, and your favorite library that includes various numerical operations, and you can confirm I'm not lying to you.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   430.56,
   438.8070588235294
  ]
 },
 {
  "input": "If you take the convolution of 1, 2, 3, against 4, 5, 6, this is indeed the result that you'll get.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   438.8070588235294,
   444.88
  ]
 },
 {
  "input": "We've seen one case where this is a natural and desirable operation, adding up to probability distributions, and another common example would be a moving average.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   444.88,
   452.8816161616162
  ]
 },
 {
  "input": "Imagine you have some long list of numbers, and you take another smaller list of numbers that all add up to 1.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   452.8816161616162,
   458.78857142857146
  ]
 },
 {
  "input": "In this case, I just have a little list of 5 values, and they're all equal to 1 5th.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   458.78857142857146,
   463.38166666666666
  ]
 },
 {
  "input": "Then if we do this sliding window convolution process, and kind of close our eyes and sweep under the rug what happens at the very beginning of it, once our smaller list of values entirely overlaps with the bigger one, think about what each term in this convolution really means.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   463.38166666666666,
   479.0233333333333
  ]
 },
 {
  "input": "At each iteration, what you're doing is multiplying each of the values from your data by 1 5th, and adding them all together, which is to say you're taking an average of your data inside this little window.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   479.0233333333333,
   490.76923076923083
  ]
 },
 {
  "input": "Overall, the process gives you a smoothed out version of the original data, and you could modify this starting with a different little list of numbers, and as long as that little list all adds up to 1, you can still interpret it as a moving average.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   490.76923076923083,
   502.816
  ]
 },
 {
  "input": "In the example shown here, that moving average would be giving more weight towards the central value.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   502.816,
   507.78150537634406
  ]
 },
 {
  "input": "This also results in a smoothed out version of the data.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   507.78150537634406,
   513.2
  ]
 },
 {
  "input": "If you do kind of a two-dimensional analog of this, it gives you a fun algorithm for blurring a given image.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   513.2,
   518.5942857142858
  ]
 },
 {
  "input": "And I should say the animations I'm about to show are modified from something I originally made for part of a set of lectures I did with the Julia Lab at MIT for a certain OpenCourseWare class that included an image processing unit.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   518.5942857142858,
   530.8871111111112
  ]
 },
 {
  "input": "There we did a little bit more to dive into the code behind all of this, so if you're curious I'll leave you some links.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   530.8871111111112,
   536.4521739130435
  ]
 },
 {
  "input": "But focusing back on this blurring example, what's going on is I've got this little 3x3 grid of values that's marching along our original image, and if we zoom in, each one of those values is 1 9th, and what I'm doing at each iteration is multiplying each of those values by the corresponding pixel that it sits on top of.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   536.4521739130435,
   553.3128421052633
  ]
 },
 {
  "input": "And of course in computer science we think of colors as little vectors of three values, representing the red, green, and blue components.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   553.3128421052633,
   560.4
  ]
 },
 {
  "input": "When I multiply all these little values by 1 9th and I add them together, it gives us an average along each color channel, and the corresponding pixel for the image on the right is defined to be that sum.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   560.4,
   570.9666666666666
  ]
 },
 {
  "input": "The overall effect, as we do this for every single pixel on the image, is that each one kind of bleeds into all of its neighbors, which gives us a blurrier version than the original.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   570.9666666666666,
   581.68
  ]
 },
 {
  "input": "In the lingo we'd say that the image on the right is a convolution of our original image with a little grid of values.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   581.68,
   587.800412371134
  ]
 },
 {
  "input": "Or more technically maybe I should say that it's the convolution with a 180 degree rotated version of that little grid of values.",
  "model": "nmt",
  "translatedText": "ہر تکرار پر، آپ جو کچھ کر رہے ہیں وہ ہے آپ کے ڈیٹا سے ہر ایک قدر کو 1 5ویں سے ضرب دینا، اور ان سب کو ایک ساتھ شامل کرنا، جس کا مطلب یہ ہے کہ آپ اس چھوٹی سی ونڈو کے اندر اپنے ڈیٹا کا اوسط لے رہے ہیں۔ مجموعی طور پر، یہ عمل آپ کو اصل ڈیٹا کا ایک ہموار ورژن فراہم کرتا ہے، اور آپ نمبروں کی ایک مختلف چھوٹی فہرست کے ساتھ شروع ہونے والے اس میں ترمیم کر سکتے ہیں، اور جب تک کہ اس چھوٹی سی فہرست میں 1 تک کا اضافہ ہو جائے، تب بھی آپ اسے حرکت پذیری کے طور پر بیان کر سکتے ہیں۔ اوسط یہاں دکھائی گئی مثال میں، وہ متحرک اوسط مرکزی قدر کی طرف زیادہ وزن دے گی۔ اس کے نتیجے میں ڈیٹا کا ہموار ورژن بھی نکلتا ہے۔ اگر آپ اس کا دو جہتی اینالاگ کرتے ہیں، تو یہ آپ کو دی گئی تصویر کو دھندلا کرنے کے لیے ایک تفریحی الگورتھم فراہم کرتا ہے۔ اور مجھے یہ کہنا چاہیے کہ جو اینیمیشنز میں دکھانے جا رہا ہوں ان میں ترمیم کی گئی ہے جو میں نے اصل میں لیکچرز کے ایک سیٹ کے لیے بنایا تھا جو میں نے MIT میں جولیا لیب کے ساتھ ایک مخصوص OpenCourseWare کلاس کے لیے کیا تھا جس میں امیج پروسیسنگ یونٹ شامل تھا۔ وہاں ہم نے ان سب کے پیچھے کوڈ میں غوطہ لگانے کے لئے تھوڑا سا مزید کیا، لہذا اگر آپ جاننا چاہتے ہیں تو میں آپ کو کچھ لنکس چھوڑ دوں گا۔ لیکن اس دھندلاپن والی مثال پر توجہ مرکوز کرتے ہوئے، کیا ہو رہا ہے کہ مجھے قدروں کا یہ چھوٹا سا 3x3 گرڈ ملا ہے جو ہماری اصل تصویر کے ساتھ چل رہا ہے، اور اگر ہم زوم ان کریں، تو ان میں سے ہر ایک قدر 19ویں نمبر پر ہے، اور میں کیا کر رہا ہوں۔ ہر تکرار پر ان اقدار میں سے ہر ایک کو متعلقہ پکسل سے ضرب دے رہا ہے جس کے اوپر یہ بیٹھا ہے۔ اور یقیناً کمپیوٹر سائنس میں ہم رنگوں کو تین قدروں کے چھوٹے ویکٹر کے طور پر سوچتے ہیں، جو سرخ، سبز اور نیلے اجزاء کی نمائندگی کرتے ہیں۔ جب میں ان تمام چھوٹی قدروں کو 19ویں سے ضرب کرتا ہوں اور ان کو ایک ساتھ جوڑتا ہوں، تو یہ ہمیں ہر رنگ چینل کے ساتھ اوسط دیتا ہے، اور دائیں طرف کی تصویر کے لیے متعلقہ پکسل کو اس رقم سے تعبیر کیا جاتا ہے۔ مجموعی اثر، جیسا کہ ہم تصویر پر ہر ایک پکسل کے لیے کرتے ہیں، یہ ہے کہ ہر ایک قسم کا خون اس کے تمام پڑوسیوں میں بہہ جاتا ہے، جو ہمیں اصل سے زیادہ دھندلا ورژن فراہم کرتا ہے۔ لنگو میں ہم یہ کہیں گے کہ دائیں طرف کی تصویر قدروں کے ایک چھوٹے سے گرڈ کے ساتھ ہماری اصل تصویر کی شکل ہے۔ یا زیادہ تکنیکی طور پر شاید مجھے یہ کہنا چاہئے کہ یہ قدروں کے اس چھوٹے گرڈ کے 180 ڈگری گھومنے والے ورژن کے ساتھ کنولیشن ہے۔ ایسا نہیں ہے کہ جب گرڈ ہم آہنگ ہے تو اس سے کوئی فرق نہیں پڑتا ہے، لیکن یہ بات ذہن میں رکھنے کے قابل ہے کہ ایک کنولیشن کی تعریف، جیسا کہ خالص ریاضی کے سیاق و سباق سے وراثت میں ملی ہے، آپ کو ہمیشہ اس دوسری صف کے گرد پلٹنے کے بارے میں سوچنے کی دعوت دیتی ہے۔ اگر ہم اس میں تھوڑا سا ترمیم کرتے ہیں تو ہم قدروں کے مختلف گرڈ کو منتخب کر کے بہت زیادہ خوبصورت دھندلا اثر حاصل کر سکتے ہیں۔ اس معاملے میں میرے پاس تھوڑا سا 5x5 گرڈ ہے، لیکن فرق اس کا سائز اتنا زیادہ نہیں ہے۔ اگر ہم زوم ان کرتے ہیں تو ہم نے دیکھا کہ بیچ میں موجود قدر کناروں کی طرف کی قدر سے بہت بڑی ہے، اور یہ کہاں سے آرہا ہے، یہ سب ایک گھنٹی کے منحنی خطوط سے نمونے ہیں، جسے Gaussian ڈسٹری بیوشن کہا جاتا ہے۔ اس طرح جب ہم ان تمام اقدار کو اسی پکسل سے ضرب دیتے ہیں جس کے وہ اوپر بیٹھے ہوئے ہیں، تو ہم اس مرکزی پکسل کو بہت زیادہ وزن دیتے ہیں اور کنارے پر موجود قیمتوں کی طرف بہت کم۔ اور بالکل اسی طرح جیسے دائیں طرف متعلقہ پکسل سے پہلے اس رقم کی تعریف کی گئی ہے۔ جیسا کہ ہم یہ عمل ہر ایک پکسل کے لیے کرتے ہیں یہ ایک دھندلا اثر دیتا ہے جو کہ آپ کے لینس کو فوکس یا اس جیسی کسی چیز سے باہر رکھنے کے تصور کو زیادہ مستند طور پر نقل کرتا ہے۔ لیکن دھندلاپن صرف ایک چیز سے دور ہے جو آپ اس خیال کے ساتھ کر سکتے ہیں۔ مثال کے طور پر قدروں کے اس چھوٹے سے گرڈ پر ایک نظر ڈالیں، جس میں بائیں طرف کچھ مثبت نمبر اور دائیں طرف کچھ منفی نمبر شامل ہیں، جنہیں میں بالترتیب نیلے اور سرخ سے رنگ دوں گا۔ یہ دیکھنے کے لیے تھوڑا وقت نکالیں کہ کیا آپ اندازہ لگا سکتے ہیں اور سمجھ سکتے ہیں کہ اس کا حتمی تصویر پر کیا اثر پڑے گا۔ تو اس صورت میں میں تصویر کو صرف رنگین کی بجائے گرے اسکیل کے طور پر سوچوں گا، لہذا ہر پکسل کو صرف تین کے بجائے ایک نمبر سے ظاہر کیا جاتا ہے۔ اور ایک بات قابل غور ہے کہ جب ہم یہ کنوولوشن کرتے ہیں تو منفی اقدار حاصل کرنا ممکن ہے۔ مثال کے طور پر اس مقام پر اگر ہم اپنے چھوٹے گرڈ کے بائیں آدھے حصے میں زوم کریں تو بلیک پکسلز کے اوپر مکمل طور پر بیٹھتا ہے، جس کی قدر صفر ہوگی، لیکن منفی قدروں کا دائیں نصف تمام سفید پکسلز کے اوپر بیٹھتا ہے، جو ایک کی قیمت ہے.",
  "time_range": [
   587.800412371134,
   594.4305617977527
  ]
 },
 {
  "input": "Not that it matters when the grid is symmetric, but it's just worth keeping in mind that the definition of a convolution, as inherited from the pure math context, should always invite you to think about flipping around that second array.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   594.4305617977527,
   605.76
  ]
 },
 {
  "input": "If we modify this slightly we can get a much more elegant blurring effect by choosing a different grid of values.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   605.76,
   611.059793814433
  ]
 },
 {
  "input": "In this case I have a little 5x5 grid, but the distinction is not so much its size.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   611.059793814433,
   615.92
  ]
 },
 {
  "input": "If we zoom in we notice that the value in the middle is a lot bigger than the value towards the edges, and where this is coming from is they're all sampled from a bell curve, known as a Gaussian distribution.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   615.92,
   626.0106666666667
  ]
 },
 {
  "input": "That way when we multiply all of these values by the corresponding pixel that they're sitting on top of, we're giving a lot more weight to that central pixel and much less towards the ones out at the edge.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   626.0106666666667,
   636.3678350515464
  ]
 },
 {
  "input": "And just as before the corresponding pixel on the right is defined to be this sum.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   636.3678350515464,
   640.3733333333332
  ]
 },
 {
  "input": "As we do this process for every single pixel it gives a blurring effect which much more authentically simulates the notion of putting your lens out of focus or something like that.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   640.3733333333332,
   649.76
  ]
 },
 {
  "input": "But blurring is far from the only thing that you can do with this idea.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   649.76,
   653.4742857142857
  ]
 },
 {
  "input": "For instance take a look at this little grid of values, which involves some positive numbers on the left and some negative numbers on the right, which I'll color with blue and red respectively.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   653.4742857142857,
   663.0713402061855
  ]
 },
 {
  "input": "Take a moment to see if you can predict and understand what effect this will have on the final image.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   663.0713402061855,
   669.7697959183673
  ]
 },
 {
  "input": "So in this case I'll just be thinking of the image as grayscale instead of colored, so each of the pixels is just represented by one number instead of three.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   669.7697959183673,
   678.0825806451612
  ]
 },
 {
  "input": "And one thing worth noticing is that as we do this convolution it's possible to get negative values.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   678.0825806451612,
   683.1020408163265
  ]
 },
 {
  "input": "For example at this point here if we zoom in the left half of our little grid sits entirely on top of black pixels, which would have a value of zero, but the right half of negative values all sit on top of white pixels, which would have a value of one.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   683.1020408163265,
   696.0
  ]
 },
 {
  "input": "So when we multiply corresponding terms and add them together the results will be very negative, and the way I'm displaying this with the image on the right is to color negative values red and positive values blue.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   696.0,
   706.0463157894737
  ]
 },
 {
  "input": "Another thing to notice is that when you're on a patch that's all the same color everything goes to zero since the sum of the values in our little grid is zero.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   706.0463157894737,
   714.8544329896907
  ]
 },
 {
  "input": "This is very different from the previous two examples where the sum of our little grid was one, which let us interpret it as a moving average and hence a blur.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   714.8544329896907,
   722.9902222222222
  ]
 },
 {
  "input": "All in all this little process basically detects wherever there's variation in the pixel value as you move from left to right, and so it gives you a kind of way to pick up on all the vertical edges from your image.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   722.9902222222222,
   736.56
  ]
 },
 {
  "input": "And similarly if we rotated that grid around so that it varies as you move from the top to the bottom this will be picking up on all the horizontal edges, which in the case of our little pie creature image does result in some pretty demonic eyes.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   736.56,
   749.9866666666667
  ]
 },
 {
  "input": "This smaller grid by the way is often called a kernel, and the beauty here is how just by choosing a different kernel you can get different image processing effects, not just blurring your edge detection but also things like sharpening.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   749.9866666666667,
   760.7101030927836
  ]
 },
 {
  "input": "For those of you who have heard of a convolutional neural network the idea there is to use data to figure out what the kernels should be in the first place as determined by whatever the neural network wants to detect.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   760.7101030927836,
   771.6180645161292
  ]
 },
 {
  "input": "Another thing I should maybe bring up is the length of the output.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   771.6180645161292,
   775.3784615384616
  ]
 },
 {
  "input": "For something like the moving average example you might only want to think about the terms when both of the windows fully align with each other, or in the image processing example maybe you want the final output to have the same size as the original.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   775.3784615384616,
   787.7600000000001
  ]
 },
 {
  "input": "Now convolutions as a pure math operation always produce an array that's bigger than the two arrays that you started with, at least assuming one of them doesn't have a length of one.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   787.7600000000001,
   796.4057142857143
  ]
 },
 {
  "input": "Just know that in certain computer science contexts you often want to deliberately truncate that output.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   796.4057142857143,
   801.52
  ]
 },
 {
  "input": "Another thing worth highlighting is that in the computer science context this notion of flipping around that kernel before you let it march across the original often feels really weird and just uncalled for, but again note that that's what's inherited from the pure math context where like we saw with the probabilities it's an incredibly natural thing to do.",
  "model": "nmt",
  "translatedText": "لہذا جب ہم متعلقہ اصطلاحات کو ضرب دیں گے اور انہیں ایک ساتھ جوڑیں گے تو نتائج بہت منفی ہوں گے، اور جس طرح میں اسے دائیں طرف کی تصویر کے ساتھ دکھا رہا ہوں وہ ہے منفی اقدار کو سرخ اور مثبت اقدار کو نیلے رنگ میں رنگنا۔ ایک اور بات قابل غور ہے کہ جب آپ کسی ایسے پیچ پر ہوتے ہیں جس کا رنگ ایک جیسا ہوتا ہے تو ہر چیز صفر ہوجاتی ہے کیونکہ ہمارے چھوٹے گرڈ میں اقدار کا مجموعہ صفر ہوتا ہے۔ یہ پچھلی دو مثالوں سے بہت مختلف ہے جہاں ہمارے چھوٹے گرڈ کا مجموعہ ایک تھا، جس کی وجہ سے ہم اسے حرکت پذیر اوسط اور اس وجہ سے ایک دھندلا پن سے تعبیر کرتے ہیں۔ یہ تمام چھوٹا سا عمل بنیادی طور پر پتہ لگاتا ہے کہ جب بھی آپ بائیں سے دائیں منتقل ہوتے ہیں تو پکسل ویلیو میں جہاں کہیں بھی فرق ہوتا ہے، اور اس طرح یہ آپ کو اپنی تصویر سے تمام عمودی کناروں کو اٹھانے کا ایک طریقہ فراہم کرتا ہے۔ اور اسی طرح اگر ہم اس گرڈ کو اس طرح گھمائیں کہ جب آپ اوپر سے نیچے کی طرف بڑھیں گے تو یہ مختلف ہو جائے گا، یہ تمام افقی کناروں کو اٹھا لے گا، جس کے نتیجے میں ہماری چھوٹی پائی مخلوق کی تصویر کے نتیجے میں کچھ خوبصورت شیطانی آنکھیں نکلتی ہیں۔ ویسے اس چھوٹے گرڈ کو اکثر دانا کہا جاتا ہے، اور یہاں کی خوبصورتی یہ ہے کہ کس طرح صرف ایک مختلف دانا کا انتخاب کرکے آپ مختلف امیج پروسیسنگ اثرات حاصل کرسکتے ہیں، نہ صرف اپنے کنارے کی نشاندہی کو دھندلا کرتے ہیں بلکہ تیز کرنے جیسی چیزوں کو بھی۔ آپ میں سے ان لوگوں کے لیے جنہوں نے کنوولیشنل نیورل نیٹ ورک کے بارے میں سنا ہے یہ خیال یہ ہے کہ ڈیٹا کا استعمال یہ معلوم کرنے کے لیے کیا جائے کہ دانا کو پہلے کیا ہونا چاہیے جیسا کہ نیورل نیٹ ورک کسی بھی چیز کا پتہ لگانا چاہتا ہے۔ ایک اور چیز جو مجھے شاید لانی چاہئے وہ ہے آؤٹ پٹ کی لمبائی۔ موونگ ایوریج مثال جیسی کسی چیز کے لیے آپ صرف ان شرائط کے بارے میں سوچنا چاہیں گے جب دونوں ونڈوز ایک دوسرے کے ساتھ مکمل طور پر سیدھ میں ہوں، یا امیج پروسیسنگ کی مثال میں ہو سکتا ہے کہ آپ چاہتے ہیں کہ حتمی آؤٹ پٹ کا سائز اصل جیسا ہو۔ اب ایک خالص ریاضی کے آپریشن کے طور پر convolutions ہمیشہ ایک ایسی صف پیدا کرتی ہے جو ان دو صفوں سے بڑی ہوتی ہے جن کے ساتھ آپ نے شروعات کی تھی، کم از کم یہ فرض کرتے ہوئے کہ ان میں سے ایک کی لمبائی ایک نہیں ہے۔ بس اتنا جان لیں کہ کمپیوٹر سائنس کے کچھ سیاق و سباق میں آپ اکثر جان بوجھ کر اس آؤٹ پٹ کو چھوٹا کرنا چاہتے ہیں۔ ایک اور بات جس کو اجاگر کرنا ضروری ہے وہ یہ ہے کہ کمپیوٹر سائنس کے تناظر میں اس دانا کے گرد گھومنے کا یہ تصور اس سے پہلے کہ آپ اسے اصل کے پار جانے دیں اکثر واقعی عجیب اور محض غیر ضروری محسوس ہوتا ہے، لیکن پھر نوٹ کریں کہ خالص ریاضی کے سیاق و سباق سے یہی وراثت میں ملا ہے۔ امکانات کے ساتھ دیکھا کہ یہ ایک ناقابل یقین حد تک قدرتی چیز ہے۔ اور درحقیقت میں آپ کو ایک اور خالص ریاضی کی مثال دکھا سکتا ہوں جہاں پروگرامرز کو بھی اس کی پرواہ کرنی چاہیے کیونکہ یہ ان سب کی گنتی کرنے کے لیے بہت تیز الگورتھم کے دروازے کھول دیتا ہے۔ یہاں تیزی سے میرا مطلب ترتیب دینے کے لیے مجھے واپس جانے دیں اور کچھ ازگر کو دوبارہ کھینچوں اور میں دو مختلف نسبتاً بڑی صفیں بنانے جا رہا ہوں۔ ہر ایک میں ایک لاکھ بے ترتیب عناصر ہوں گے اور میں numpy لائبریری سے convolve فنکشن کے رن ٹائم کا جائزہ لینے جا رہا ہوں۔ اور اس معاملے میں یہ اسے متعدد مختلف تکرار کے لیے چلاتا ہے، اوسط تلاش کرنے کی کوشش کرتا ہے، اور ایسا لگتا ہے کہ اس کمپیوٹر پر کم از کم اس کی اوسط 4 ہے۔ 87 سیکنڈ اس کے برعکس اگر میں scipy لائبریری سے ایک مختلف فنکشن استعمال کرتا ہوں جسے fftconvolve کہا جاتا ہے جو ایک ہی چیز ہے جس کو مختلف طریقے سے لاگو کیا جاتا ہے جس میں صرف 4 لگتے ہیں۔ اوسطاً 3 ملی سیکنڈز، تو شدت میں بہتری کے تین آرڈر۔ اور ایک بار پھر اگرچہ یہ ایک مختلف نام سے اڑتا ہے یہ وہی آؤٹ پٹ دے رہا ہے جو دوسرے convolve فنکشن کرتا ہے، یہ صرف اس کے بارے میں ہوشیار طریقے سے جانے کے لیے کچھ کر رہا ہے۔ یاد رکھیں کہ کس طرح احتمال کی مثال کے ساتھ میں نے کہا کہ ایک اور طریقہ جس سے آپ کنوولوشن کے بارے میں سوچ سکتے ہیں وہ یہ تھا کہ تمام جوڑے کی شکل کی مصنوعات کی یہ جدول بنائیں اور پھر ان جوڑے کی شکل والی مصنوعات کو اخترن کے ساتھ شامل کریں۔ یقیناً امکان کے لیے کوئی خاص بات نہیں ہے جب بھی آپ نمبروں کی دو مختلف فہرستوں کو جوڑ رہے ہوں آپ اس کے بارے میں اس طرح سوچ سکتے ہیں۔ اس قسم کی ضرب کی میز کو تمام جوڑے کے مطابق مصنوعات کے ساتھ بنائیں اور پھر اخترن کے ساتھ ہر رقم آپ کے حتمی نتائج میں سے ایک سے مساوی ہو۔ ایک سیاق و سباق جہاں یہ نقطہ نظر خاص طور پر فطری ہے وہ ہے جب آپ دو کثیر الاضلاع کو ایک ساتھ ضرب کرتے ہیں۔ مثال کے طور پر مجھے وہ چھوٹی گرڈ لینے دیں جو ہمارے پاس پہلے سے موجود ہے اور اوپر کی اصطلاحات کو 1، 2x اور 3x مربع سے بدل دوں اور دوسری اصطلاحات کو 4، 5x اور 6x مربع سے بدل دوں۔ اب اس کے بارے میں سوچیں کہ جب ہم دونوں فہرستوں کے درمیان ان تمام مختلف جوڑیوں کی مصنوعات بنا رہے ہیں تو اس کا کیا مطلب ہے۔ آپ جو کچھ کر رہے ہیں وہ بنیادی طور پر میں نے لکھے ہوئے دو کثیر الاضلاع کی مکمل پیداوار کو بڑھانا ہے اور پھر جب آپ اخترن کے ساتھ جوڑتے ہیں جو کہ تمام جیسی اصطلاحات کو جمع کرنے کے مساوی ہے جو کہ ایک کثیر نام کو پھیلانا اور اصطلاحات کی طرح جمع کرنا بالکل صاف ہے۔ ایک کنولیشن کے طور پر ایک ہی عمل.",
  "time_range": [
   801.52,
   822.5300000000001
  ]
 },
 {
  "input": "And actually I can show you one more pure math example where even the programmers should care about this one because it opens the doors for a much faster algorithm to compute all of these.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   822.5300000000001,
   832.3705263157894
  ]
 },
 {
  "input": "To set up what I mean by faster here let me go back and pull up some python again and I'm going to create two different relatively big arrays.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   832.3705263157894,
   839.5793258426966
  ]
 },
 {
  "input": "Each one will have a hundred thousand random elements in it and I'm going to assess the runtime of the convolve function from the numpy library.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   839.5793258426966,
   847.575652173913
  ]
 },
 {
  "input": "And in this case it runs it for multiple different iterations, tries to find an average, and it looks like on this computer at least it averages at 4.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   847.575652173913,
   855.6195121951218
  ]
 },
 {
  "input": "87 seconds.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   855.6195121951218,
   856.3219512195121
  ]
 },
 {
  "input": "By contrast if I use a different function from the scipy library called fftconvolve which is the same thing just implemented differently that only takes 4.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   856.3219512195121,
   866.0616666666667
  ]
 },
 {
  "input": "3 milliseconds on average, so three orders of magnitude improvement.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   866.0616666666667,
   870.64
  ]
 },
 {
  "input": "And again even though it flies under a different name it's giving the same output that the other convolve function does, it's just doing something to go about it in a cleverer way.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   870.64,
   878.88
  ]
 },
 {
  "input": "Remember how with the probability example I said another way you could think about the convolution was to create this table of all the pairwise products and then add up those pairwise products along the diagonals.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   878.88,
   892.5279999999999
  ]
 },
 {
  "input": "There's of course nothing specific to probability anytime you're convolving two different lists of numbers you can think about it this way.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   892.5279999999999,
   899.3212371134019
  ]
 },
 {
  "input": "Create this kind of multiplication table with all pairwise products and then each sum along the diagonal corresponds to one of your final outputs.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   899.3212371134019,
   906.3810752688172
  ]
 },
 {
  "input": "One context where this view is especially natural is when you multiply together two polynomials.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   906.3810752688172,
   912.4316483516483
  ]
 },
 {
  "input": "For example let me take the little grid we already have and replace the top terms with 1, 2x, and 3x squared and replace the other terms with 4, 5x, and 6x squared.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   912.4316483516483,
   923.92
  ]
 },
 {
  "input": "Now think about what it means when we're creating all of these different pairwise products between the two lists.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   923.92,
   928.6645454545454
  ]
 },
 {
  "input": "What you're doing is essentially expanding out the full product of the two polynomials I have written down and then when you add up along the diagonal that corresponds to collecting all like terms which is pretty neat expanding a polynomial and collecting like terms is exactly the same process as a convolution.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   928.6645454545454,
   946.9371428571429
  ]
 },
 {
  "input": "But this allows us to do something that's pretty cool because think about what we're saying here.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   946.9371428571429,
   952.6424242424243
  ]
 },
 {
  "input": "We're saying if you take two different functions and you multiply them together which is a simple pointwise operation that's the same thing as if you had first extracted the coefficients from each one of those assuming they're polynomials and then taken a convolution of those two lists of coefficients.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   952.6424242424243,
   968.7615999999999
  ]
 },
 {
  "input": "What makes that so interesting is that convolutions feel in principle a lot more complicated than simple multiplication and I don't just mean conceptually they're harder to think about I mean computationally it requires more steps to perform a convolution than it does to perform a pointwise product of two different lists.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   968.7615999999999,
   986.0702040816327
  ]
 },
 {
  "input": "For example let's say I gave you two really big polynomials say each one with a hundred different coefficients then if the way you multiply them was to expand out this product you know filling in this entire 100 by 100 grid of pairwise products that would require you to perform 10,000 different products and then when you're collecting all the like terms along the diagonals that's another set of around 10,000 operations.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   986.0702040816327,
   1009.6666666666665
  ]
 },
 {
  "input": "More generally in the lingo we'd say the algorithm is O of n squared meaning for two lists of size n the way that the number of operations scales is in proportion to the square of n.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   1009.6666666666665,
   1020.816
  ]
 },
 {
  "input": "On the other hand if I think of two polynomials in terms of their outputs for example sampling their values at some handful of inputs then multiplying them only requires as many operations as the number of samples since again it's a pointwise operation and with polynomials you only need finitely many samples to be able to recover the coefficients.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   1020.816,
   1041.126530612245
  ]
 },
 {
  "input": "For example two outputs are enough to uniquely specify a linear polynomial three outputs would be enough to uniquely specify a quadratic polynomial and in general if you know n distinct outputs that's enough to uniquely specify a polynomial that has n different coefficients or if you prefer we could phrase this in the language of systems of equations imagine I tell you I have some polynomial but I don't tell you what the coefficients are those are a mystery to you.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   1041.126530612245,
   1066.439603960396
  ]
 },
 {
  "input": "In our example you might think of this as the product that we're trying to figure out and then suppose I say I'll just tell you what the outputs of this polynomial would be if you inputted various different inputs like 0, 1, 2, 3, on and on and I give you enough so that you have as many equations as you have unknowns it even happens to be a linear system of equations so that's nice and in principle at least this should be enough to recover the coefficients.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   1066.439603960396,
   1091.0618181818181
  ]
 }
]