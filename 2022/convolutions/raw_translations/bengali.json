[
 {
  "input": "Suppose I give you two different lists of numbers, or maybe two different functions, and I ask you to think of all the ways you might combine those two lists to get a new list of numbers, or combine the two functions to get a new function.",
  "model": "nmt",
  "translatedText": "ধরুন আমি আপনাকে সংখ্যার দুটি ভিন্ন তালিকা দিচ্ছি, অথবা হয়তো দুটি ভিন্ন ফাংশন দিচ্ছি, এবং আমি আপনাকে সেই সব উপায় সম্পর্কে ভাবতে বলি যেভাবে আপনি এই দুটি তালিকাকে একত্রিত করে সংখ্যার একটি নতুন তালিকা পেতে পারেন, অথবা একটি নতুন ফাংশন পেতে দুটি ফাংশনকে একত্রিত করতে পারেন।.",
  "time_range": [
   0.0,
   11.737373737373737
  ]
 },
 {
  "input": "Maybe one simple way that comes to mind is to simply add them together term by term.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   11.737373737373737,
   16.26727272727273
  ]
 },
 {
  "input": "Likewise with the functions, you can add all the corresponding outputs.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   16.26727272727273,
   20.050526315789476
  ]
 },
 {
  "input": "In a similar vein, you could also multiply the two lists term by term and do the same thing with the functions.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   20.050526315789476,
   26.14545454545454
  ]
 },
 {
  "input": "But there's another kind of combination just as fundamental as both of those, but a lot less commonly discussed, known as a convolution.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   26.14545454545454,
   33.84
  ]
 },
 {
  "input": "But unlike the previous two cases, it's not something that's merely inherited from an operation you can do to numbers.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   33.84,
   39.89333333333333
  ]
 },
 {
  "input": "It's something genuinely new for the context of lists of numbers or combining functions.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   39.89333333333333,
   44.71666666666667
  ]
 },
 {
  "input": "They show up all over the place, they are ubiquitous in image processing, it's a core construct in the theory of probability, they're used a lot in solving differential equations, and one context where you've almost certainly seen it, if not by this name, is multiplying two polynomials together.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   44.71666666666667,
   60.210526315789465
  ]
 },
 {
  "input": "As someone in the business of visual explanations, this is an especially great topic, because the formulaic definition in isolation and without context can look kind of intimidating, but if we take the time to really unpack what it's saying, and before that actually motivate why you would want something like this, it's an incredibly beautiful operation.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   60.210526315789465,
   78.8
  ]
 },
 {
  "input": "And I have to admit, I actually learned a little something while putting together the visuals for this project.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   78.8,
   83.43636363636364
  ]
 },
 {
  "input": "In the case of convolving two different functions, I was trying to think of different ways you might picture what that could mean, and with one of them I had a little bit of an aha moment for why it is that normal distributions play the role that they do in probability, why it's such a natural shape for a function.",
  "model": "nmt",
  "translatedText": "হয়তো একটি সহজ উপায় যা মনে আসে তা হ'ল কেবলমাত্র সেগুলিকে শব্দ দ্বারা একত্রে যুক্ত করা। একইভাবে ফাংশনগুলির সাথে, আপনি সমস্ত সংশ্লিষ্ট আউটপুট যোগ করতে পারেন। অনুরূপ শিরায়, আপনি দুটি তালিকার পদকে পদ দ্বারা গুণ করতে পারেন এবং ফাংশনগুলির সাথে একই জিনিস করতে পারেন। কিন্তু এই দুটির মতই মৌলিক আরেকটি সংমিশ্রণ আছে, কিন্তু সাধারণভাবে অনেক কম আলোচনা করা হয়, যা কনভল্যুশন নামে পরিচিত। কিন্তু পূর্ববর্তী দুটি ক্ষেত্রে ভিন্ন, এটি এমন কিছু নয় যা কেবলমাত্র একটি অপারেশন থেকে উত্তরাধিকারসূত্রে পাওয়া যায় যা আপনি সংখ্যায় করতে পারেন। সংখ্যার তালিকা বা ফাংশন একত্রিত করার ক্ষেত্রে এটি সত্যিকারের নতুন কিছু। এগুলি সমস্ত জায়গায় দেখা যায়, তারা ইমেজ প্রক্রিয়াকরণে সর্বব্যাপী, এটি সম্ভাব্যতার তত্ত্বের একটি মূল গঠন, তারা ডিফারেনশিয়াল সমীকরণগুলি সমাধান করার জন্য অনেক বেশি ব্যবহৃত হয়, এবং একটি প্রসঙ্গ যেখানে আপনি এটি প্রায় অবশ্যই দেখেছেন, যদি না হয় এই নামে, দুটি বহুপদকে একসাথে গুণ করছে। ভিজ্যুয়াল ব্যাখ্যার ব্যবসায় একজন হিসাবে, এটি একটি বিশেষভাবে দুর্দান্ত বিষয়, কারণ বিচ্ছিন্নভাবে এবং প্রসঙ্গ ছাড়া সূত্রের সংজ্ঞাটি এক ধরণের ভয় দেখাতে পারে, তবে আমরা যদি এটি যা বলছে তা আনপ্যাক করার জন্য সময় নিই এবং তার আগে প্রকৃতপক্ষে কেন অনুপ্রাণিত করি আপনি এইরকম কিছু চাইবেন, এটি একটি অবিশ্বাস্যভাবে সুন্দর অপারেশন। এবং আমাকে স্বীকার করতে হবে, এই প্রকল্পের ভিজ্যুয়ালগুলিকে একত্রিত করার সময় আমি আসলে কিছুটা শিখেছি। দুটি ভিন্ন ফাংশনকে সংঘটিত করার ক্ষেত্রে, আমি বিভিন্ন উপায়ে চিন্তা করার চেষ্টা করছিলাম যে আপনি এটির অর্থ কী হতে পারে তা চিত্রিত করতে পারেন এবং তাদের মধ্যে একটির সাথে আমার কিছুটা আহা মুহূর্ত ছিল যে কেন সাধারণ বিতরণগুলি ভূমিকা পালন করে তারা সম্ভাব্যতা করে, কেন এটি একটি ফাংশনের জন্য এমন একটি প্রাকৃতিক আকৃতি। কিন্তু আমি নিজের থেকে এগিয়ে আছি, এর জন্য অনেক সেটআপ আছে। এই ভিডিওতে, আমাদের প্রাথমিক ফোকাস শুধুমাত্র বিচ্ছিন্ন ক্ষেত্রে, এবং বিশেষ করে এইগুলি গণনা করার জন্য একটি খুব অপ্রত্যাশিত কিন্তু খুব চতুর অ্যালগরিদম তৈরি করা হচ্ছে। এবং আমি একটি দ্বিতীয় অংশে অবিচ্ছিন্ন মামলার আলোচনাটি বের করব। ইমেজ প্রসেসিং উদাহরণগুলি দিয়ে খোলার জন্য এটি খুব লোভনীয়, যেহেতু সেগুলি দৃশ্যত সবচেয়ে আকর্ষণীয়, কিন্তু কিছু সূক্ষ্মতা রয়েছে যা ইমেজ প্রসেসিং কেসকে সামগ্রিকভাবে কনভল্যুশনের কম প্রতিনিধি করে তোলে, তাই এর পরিবর্তে সম্ভাব্যতার সাথে জিনিসগুলি বন্ধ করা যাক, এবং বিশেষ করে একটি সহজ উদাহরণ যা আমি নিশ্চিত যে এখানে প্রত্যেকেই তাদের জীবনের কোনো না কোনো সময়ে চিন্তা করেছে, যা একজোড়া পাশা ঘোরাচ্ছে এবং বিভিন্ন বিভিন্ন অঙ্ক দেখার সম্ভাবনা খুঁজে বের করছে। এবং আপনি বলতে পারেন, সমস্যা নয়, সমস্যা নয়। আপনার দুটি ডাইসের প্রতিটির ছয়টি ভিন্ন সম্ভাব্য ফলাফল রয়েছে, যা আমাদের মোট 36 টি স্বতন্ত্র সম্ভাব্য জোড়া ফলাফল দেয়, এবং আমরা যদি সেগুলি সবগুলি দেখি তবে আমরা গণনা করতে পারি কত জোড়া একটি প্রদত্ত যোগফল আছে। এবং এইভাবে একটি গ্রিডে সমস্ত জোড়া সাজানো, একটি খুব সুন্দর জিনিস হল যে সমস্ত জোড়াগুলির একটি ধ্রুবক যোগফল এই বিভিন্ন কর্ণের একটি বরাবর দৃশ্যমান। সুতরাং এই কর্ণগুলির প্রতিটিতে কতগুলি বিদ্যমান তা কেবলমাত্র গণনা করলেই আপনি একটি নির্দিষ্ট যোগফল দেখতে কতটা সম্ভাবনাময় তা আপনাকে বলে দেবে। এবং আমি বলব, খুব ভাল, খুব ভাল, কিন্তু আপনি কি অন্য কোন উপায়ের কথা ভাবতে পারেন যা আপনি একই প্রশ্নটি কল্পনা করতে পারেন?",
  "time_range": [
   83.43636363636364,
   98.44571428571427
  ]
 },
 {
  "input": "But I'm getting ahead of myself, there's a lot of setup for that one.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   98.44571428571427,
   101.57999999999998
  ]
 },
 {
  "input": "In this video, our primary focus is just going to be on the discrete case, and in particular building up to a very unexpected but very clever algorithm for computing these.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   101.57999999999998,
   110.19654320987655
  ]
 },
 {
  "input": "And I'll pull out the discussion for the continuous case into a second part.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   110.19654320987655,
   117.84
  ]
 },
 {
  "input": "It's very tempting to open up with the image processing examples, since they're visually the most intriguing, but there are a couple bits of finickiness that make the image processing case less representative of convolutions overall, so instead let's kick things off with probability, and in particular one of the simplest examples that I'm sure everyone here has thought about at some point in their life, which is rolling a pair of dice and figuring out the chances of seeing various different sums.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   117.84,
   141.53
  ]
 },
 {
  "input": "And you might say, not a problem, not a problem.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   141.53,
   144.17000000000002
  ]
 },
 {
  "input": "Each of your two dice has six different possible outcomes, which gives us a total of 36 distinct possible pairs of outcomes, and if we just look through them all we can count up how many pairs have a given sum.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   144.17000000000002,
   156.24
  ]
 },
 {
  "input": "And arranging all the pairs in a grid like this, one pretty nice thing is that all of the pairs that have a constant sum are visible along one of these different diagonals.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   156.24,
   165.65061224489793
  ]
 },
 {
  "input": "So simply counting how many exist on each of those diagonals will tell you how likely you are to see a particular sum.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   165.65061224489793,
   172.88
  ]
 },
 {
  "input": "And I'd say, very good, very good, but can you think of any other ways that you might visualize the same question?",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   172.88,
   178.699381443299
  ]
 },
 {
  "input": "Other images that can come to mind to think of all the distinct pairs that have a given sum?",
  "model": "nmt",
  "translatedText": "অন্যান্য ইমেজ যে মনে আসতে পারে সব স্বতন্ত্র জোড়া যে একটি প্রদত্ত যোগফল আছে?",
  "time_range": [
   178.699381443299,
   183.7448
  ]
 },
 {
  "input": "And maybe one of you raises your hand and says, yeah, I've got one.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   183.7448,
   187.55040000000002
  ]
 },
 {
  "input": "Let's say you picture these two different sets of possibilities each in a row, but you flip around that second row.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   187.55040000000002,
   194.04673267326731
  ]
 },
 {
  "input": "That way all of the different pairs which add up to seven line up vertically like this.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   194.04673267326731,
   198.95999999999998
  ]
 },
 {
  "input": "And if we slide that bottom row all the way to the right, then the unique pair that adds up to two, the snake eyes, are the only ones that align.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   198.95999999999998,
   206.30978723404257
  ]
 },
 {
  "input": "And if I schlunk that over one unit to the right, the pairs which align are the two different pairs that add up to three.",
  "model": "nmt",
  "translatedText": "এবং হয়ত আপনাদের মধ্যে কেউ হাত তুলে বলে, হ্যাঁ, আমি একটা পেয়েছি। ধরা যাক আপনি একটি সারিতে এই দুটি ভিন্ন সেটের সম্ভাবনার ছবি তুলেছেন, কিন্তু আপনি সেই দ্বিতীয় সারির চারপাশে উল্টে যাচ্ছেন। এই ভাবে বিভিন্ন জোড়া যা সাত লাইন পর্যন্ত যোগ করে উল্লম্বভাবে এভাবে। এবং যদি আমরা সেই নীচের সারিটিকে ডানদিকে স্লাইড করি, তাহলে অনন্য জোড়া যা দুটি পর্যন্ত যোগ করে, সাপের চোখ, একমাত্র সারিবদ্ধ করে। এবং যদি আমি ডানদিকে এক ইউনিটের উপরে এটিকে শুল্ক করি, যে জোড়াগুলি সারিবদ্ধ করা হয় সেগুলি দুটি ভিন্ন জোড়া যা তিনটি পর্যন্ত যোগ করে। এবং সাধারণভাবে, এই নিম্ন অ্যারের বিভিন্ন অফসেট মান, যা মনে রাখবেন আমি প্রথমে চারপাশে উল্টাতে হবে, সমস্ত স্বতন্ত্র জোড়া প্রকাশ করে যেগুলির একটি প্রদত্ত যোগফল রয়েছে। যতদূর সম্ভাবনার প্রশ্নগুলি যায়, এটি এখনও বিশেষভাবে আকর্ষণীয় নয়, কারণ আমরা যা করছি তা গণনা করা হচ্ছে এই প্রতিটি বিভাগে কতগুলি ফলাফল রয়েছে। কিন্তু এটি অন্তর্নিহিত অনুমানের সাথে যে এই প্রতিটি মুখের জন্য সমান সুযোগ রয়েছে। কিন্তু যদি আমি আপনাকে বলি যে আমার কাছে একটি বিশেষ পাশা আছে যা অভিন্ন নয়?",
  "time_range": [
   206.30978723404257,
   212.88659793814435
  ]
 },
 {
  "input": "And in general, different offset values of this lower array, which remember I had to flip around first, reveal all the distinct pairs that have a given sum.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   212.88659793814435,
   221.77892473118277
  ]
 },
 {
  "input": "As far as probability questions go, this still isn't especially interesting, because all we're doing is counting how many outcomes there are in each of these categories.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   221.77892473118277,
   233.12
  ]
 },
 {
  "input": "But that is with the implicit assumption that there's an equal chance for each of these faces to come up.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   233.12,
   237.85011494252873
  ]
 },
 {
  "input": "But what if I told you I have a special set of dice that's not uniform?",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   237.85011494252873,
   241.89793103448275
  ]
 },
 {
  "input": "Maybe the blue die has its own set of numbers describing the probabilities for each face coming up, and the red die has its own unique distinct set of numbers.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   241.89793103448275,
   249.740198019802
  ]
 },
 {
  "input": "In that case, if you wanted to figure out, say, the probability of seeing a two, you would multiply the probability that the blue die is a one times the probability that the red die is a one.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   249.740198019802,
   259.89581395348836
  ]
 },
 {
  "input": "And for the chances of seeing a three, you look at the two distinct pairs where that's possible, and again, multiply the corresponding probabilities, and then add those two products together.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   259.89581395348836,
   269.9831578947369
  ]
 },
 {
  "input": "Similarly, the chances of seeing a four involves multiplying together three different pairs of possibilities and adding them all together.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   269.9831578947369,
   276.74893617021274
  ]
 },
 {
  "input": "And in the spirit of setting up some formulas, let's name these top probabilities a1, a2, a3, and so on, and name the bottom ones b1, b2, b3, and so on.",
  "model": "nmt",
  "translatedText": "হতে পারে ব্লু ডাই এর নিজস্ব সংখ্যার সেট রয়েছে যা প্রতিটি মুখের সম্ভাব্যতা বর্ণনা করে এবং লাল ডাই এর নিজস্ব স্বতন্ত্র স্বতন্ত্র সংখ্যা রয়েছে। সেক্ষেত্রে, যদি আপনি বের করতে চান, বলুন, একটি দুটি দেখার সম্ভাবনা, আপনি সম্ভাবনাকে গুণ করবেন যে নীল ডাইটি একটি সম্ভাবনার এক গুণ যে লাল ডাইটি একটি। এবং একটি তিনটি দেখার সম্ভাবনার জন্য, আপনি দুটি স্বতন্ত্র জোড়ার দিকে তাকান যেখানে এটি সম্ভব, এবং আবার, সংশ্লিষ্ট সম্ভাব্যতাগুলিকে গুণ করুন এবং তারপরে সেই দুটি পণ্য একসাথে যোগ করুন। একইভাবে, চারটি দেখার সম্ভাবনার সাথে তিনটি ভিন্ন জোড়া সম্ভাবনাকে একসাথে গুণ করা এবং সেগুলিকে একসাথে যোগ করা জড়িত। এবং কিছু সূত্র সেট আপ করার চেতনায়, আসুন এই শীর্ষ সম্ভাবনাগুলির নাম রাখি a1, a2, a3, এবং তাই, এবং নীচেরগুলির নাম রাখি b1, b2, b3, ইত্যাদি। এবং সাধারণভাবে, এই প্রক্রিয়াটি, যেখানে আমরা সংখ্যার দুটি ভিন্ন অ্যারে নিচ্ছি, দ্বিতীয়টিকে চারপাশে ফ্লিপ করছি, এবং তারপরে বিভিন্ন অফসেট মানগুলিতে তাদের লাইন আপ করছি, একগুচ্ছ পেয়ারওয়াইজ পণ্য নিয়েছি এবং সেগুলি যোগ করছি, এটি একটি একটি কনভল্যুশন কি তা নিয়ে চিন্তা করার মৌলিক উপায়। তাই এটিকে আরও একটু সঠিকভাবে বানান করার জন্য, এই প্রক্রিয়াটির মাধ্যমে, আমরা কেবলমাত্র 12 পর্যন্ত দুই, তিন, চার, অন এবং অন দেখার সম্ভাবনা তৈরি করেছি, এবং আমরা একটি মানের তালিকা, a, এবং আরেকটি মিশ্রিত করে সেগুলি পেয়েছি। মানের তালিকা, খ.",
  "time_range": [
   276.74893617021274,
   285.90315789473686
  ]
 },
 {
  "input": "And in general, this process, where we're taking two different arrays of numbers, flipping the second one around, and then lining them up at various different offset values, taking a bunch of pairwise products and adding them up, that's one of the fundamental ways to think about what a convolution is.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   285.90315789473686,
   301.13977528089885
  ]
 },
 {
  "input": "So just to spell it out a little more exactly, through this process, we just generated probabilities for seeing two, three, four, on and on up to 12, and we got them by mixing together one list of values, a, and another list of values, b.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   301.13977528089885,
   317.0848
  ]
 },
 {
  "input": "In the lingo, we'd say the convolution of those two sequences gives us this new sequence, the new sequence of 11 values, each of which looks like some sum of pairwise products.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   317.0848,
   327.12
  ]
 },
 {
  "input": "If you prefer, another way you could think about the same operation is to first create a table of all the pairwise products, and then add up along all these diagonals.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   327.12,
   336.7023157894737
  ]
 },
 {
  "input": "Again, that's a way of mixing together these two sequences of numbers to get us a new sequence of 11 numbers.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   336.7023157894737,
   342.2477669902912
  ]
 },
 {
  "input": "It's the same operation as the sliding windows thought, just another perspective.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   342.2477669902912,
   346.96
  ]
 },
 {
  "input": "Putting a little notation to it, here's how you might see it written down.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   346.96,
   350.3148936170212
  ]
 },
 {
  "input": "The convolution of a and b, denoted with this little asterisk, is a new list, and the nth element of that list looks like a sum, and that sum goes over all different pairs of indices, i and j, so that the sum of those indices is equal to n.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   350.3148936170212,
   364.738969072165
  ]
 },
 {
  "input": "It's kind of a mouthful, but for example, if n was 6, the pairs we're going over are 1 and 5, 2 and 4, 3 and 3, 4 and 2, 5 and 1, all the different pairs that add up to 6.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   364.738969072165,
   376.4
  ]
 },
 {
  "input": "But honestly, however you write it down, the notation is secondary in importance to the visual you might hold in your head for the process.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   376.4,
   383.0824
  ]
 },
 {
  "input": "Here, maybe it helps to do a super simple example, where I might ask you what's the convolution of the list 1, 2, 3, with the list 4, 5, 6.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   383.0824,
   390.9672727272727
  ]
 },
 {
  "input": "You might picture taking both of these lists, flipping around that second one, and then starting with its lid all the way over to the left.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   390.9672727272727,
   397.8576842105264
  ]
 },
 {
  "input": "Then the pair of values which align are 1 and 4, multiply them together, and that gives us our first term of our output.",
  "model": "nmt",
  "translatedText": "লিঙ্গোতে, আমরা বলতে চাই যে এই দুটি ক্রমগুলির আবর্তন আমাদের এই নতুন ক্রম, 11টি মানের নতুন ক্রম দেয়, যার প্রত্যেকটি জুটিযুক্ত পণ্যের কিছু সমষ্টির মতো দেখায়। আপনি যদি পছন্দ করেন, একই ক্রিয়াকলাপ সম্পর্কে আপনি ভাবতে পারেন এমন আরেকটি উপায় হল প্রথমে সমস্ত পেয়ারওয়াইজ পণ্যগুলির একটি টেবিল তৈরি করা, এবং তারপর এই সমস্ত কর্ণ বরাবর যোগ করা। আবার, এই দুটি সংখ্যার ক্রমকে একত্রে মিশ্রিত করার একটি উপায় আমাদের 11টি সংখ্যার একটি নতুন ক্রম পেতে। এটি স্লাইডিং উইন্ডোজের মত একই অপারেশন, অন্য একটি দৃষ্টিকোণ। এটিতে একটি সামান্য স্বরলিপি রেখে, এখানে আপনি কীভাবে এটি লিখিত দেখতে পারেন। a এবং b-এর আবর্তন, এই ছোট তারকাচিহ্ন দ্বারা চিহ্নিত, একটি নতুন তালিকা, এবং সেই তালিকার nম উপাদানটি একটি যোগফলের মতো দেখায়, এবং সেই যোগফলটি সমস্ত বিভিন্ন জোড়া সূচক, i এবং j-এর উপর চলে যায়, যাতে যোগফল এই সূচকগুলি n এর সমান। এটা একটা মুখের মত, কিন্তু উদাহরণস্বরূপ, যদি n 6 হয়, তাহলে আমরা যে জোড়ার উপরে যাচ্ছি তা হল 1 এবং 5, 2 এবং 4, 3 এবং 3, 4 এবং 2, 5 এবং 1, সমস্ত বিভিন্ন জোড়া যা যোগ করে থেকে 6। কিন্তু সৎভাবে, আপনি এটি লিখে রাখুন না কেন, স্বরলিপিটি প্রক্রিয়াটির জন্য আপনার মাথায় যে ভিজ্যুয়ালটি ধরে রাখতে পারে তার গুরুত্বের ক্ষেত্রে এটি গৌণ। এখানে, সম্ভবত এটি একটি অতি সাধারণ উদাহরণ করতে সাহায্য করে, যেখানে আমি আপনাকে জিজ্ঞাসা করতে পারি 4, 5, 6 তালিকার সাথে তালিকা 1, 2, 3-এর কনভল্যুশন কী। আপনি এই তালিকা দুটি নিয়ে ছবি তুলতে পারেন, সেই দ্বিতীয়টির চারপাশে ঘুরতে পারেন, এবং তারপরে এটির ঢাকনা দিয়ে শুরু করে বাম দিকে সমস্ত পথ। তারপর মানগুলির জোড়া যা 1 এবং 4 সারিবদ্ধ, তাদের একসাথে গুণ করুন এবং এটি আমাদের আউটপুটের প্রথম মেয়াদ দেয়। নীচের অ্যারেটির একটি ইউনিট ডানদিকে স্লাইড করুন, যে জোড়াগুলি সারিবদ্ধ 1 এবং 5 এবং 2 এবং 4, সেই জোড়াগুলিকে গুণ করুন, তাদের একসাথে যোগ করুন এবং এটি আমাদের আউটপুটে পরবর্তী এন্ট্রি দেয় 13। জিনিসগুলিকে আরও একবার স্লাইড করুন, এবং আমরা 1 গুণ 6, যোগ 2 গুণ 5, প্লাস 3 গুণ 4 নেব, যা 28 হবে। আরও একটি স্লাইড, এবং আমরা 2 গুণ 6, প্লাস 3 গুণ 5 পাই, এবং এটি আমাদের দেয় 27, এবং অবশেষে শেষ পদটি 3 গুণ 6 এর মত দেখাবে। আপনি যদি চান, আপনি আপনার প্রিয় প্রোগ্রামিং ভাষা যাই হোক না কেন, এবং আপনার পছন্দের লাইব্রেরি যা বিভিন্ন সংখ্যাসূচক ক্রিয়াকলাপ অন্তর্ভুক্ত করতে পারেন, এবং আপনি নিশ্চিত করতে পারেন যে আমি আপনার সাথে মিথ্যা বলছি না। আপনি যদি 4, 5, 6 এর বিপরীতে 1, 2, 3-এর কনভোল্যুশন নেন, তাহলে এটিই প্রকৃতপক্ষে ফলাফল যা আপনি পাবেন। আমরা একটি কেস দেখেছি যেখানে এটি একটি স্বাভাবিক এবং পছন্দসই অপারেশন, সম্ভাব্যতা বন্টন পর্যন্ত যোগ করে, এবং আরেকটি সাধারণ উদাহরণ একটি চলমান গড় হবে। কল্পনা করুন আপনার কাছে সংখ্যার কিছু দীর্ঘ তালিকা আছে, এবং আপনি সংখ্যার আরও একটি ছোট তালিকা নিন যা সবগুলি 1 পর্যন্ত যোগ করে। এই ক্ষেত্রে, আমার কাছে 5টি মানের একটি ছোট তালিকা রয়েছে এবং সেগুলি সবগুলি 1 5তমের সমান। তারপরে যদি আমরা এই স্লাইডিং উইন্ডো কনভ্যুলেশন প্রক্রিয়াটি করি এবং এক প্রকার আমাদের চোখ বন্ধ করি এবং এর একেবারে শুরুতে যা ঘটবে তার নীচে ঝাড়ু দিয়ে ফেলি, একবার আমাদের ছোট মানের তালিকাটি বড়টির সাথে সম্পূর্ণরূপে ওভারল্যাপ হয়ে গেলে, এর প্রতিটি পদটি কী তা নিয়ে চিন্তা করুন। convolution সত্যিই মানে.",
  "time_range": [
   397.8576842105264,
   403.8133333333333
  ]
 },
 {
  "input": "Slide that bottom array one unit to the right, the pairs which align are 1 and 5, and 2 and 4, multiply those pairs, add them together, and that gives us 13, the next entry in our output.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   403.8133333333333,
   414.29999999999995
  ]
 },
 {
  "input": "Slide things over once more, and we'll take 1 times 6, plus 2 times 5, plus 3 times 4, which happens to be 28.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   414.29999999999995,
   421.59130434782605
  ]
 },
 {
  "input": "One more slide, and we get 2 times 6, plus 3 times 5, and that gives us 27, and finally the last term will look like 3 times 6.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   421.59130434782605,
   430.56
  ]
 },
 {
  "input": "If you'd like, you can pull up whatever your favorite programming language is, and your favorite library that includes various numerical operations, and you can confirm I'm not lying to you.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   430.56,
   438.8070588235294
  ]
 },
 {
  "input": "If you take the convolution of 1, 2, 3, against 4, 5, 6, this is indeed the result that you'll get.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   438.8070588235294,
   444.88
  ]
 },
 {
  "input": "We've seen one case where this is a natural and desirable operation, adding up to probability distributions, and another common example would be a moving average.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   444.88,
   452.8816161616162
  ]
 },
 {
  "input": "Imagine you have some long list of numbers, and you take another smaller list of numbers that all add up to 1.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   452.8816161616162,
   458.78857142857146
  ]
 },
 {
  "input": "In this case, I just have a little list of 5 values, and they're all equal to 1 5th.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   458.78857142857146,
   463.38166666666666
  ]
 },
 {
  "input": "Then if we do this sliding window convolution process, and kind of close our eyes and sweep under the rug what happens at the very beginning of it, once our smaller list of values entirely overlaps with the bigger one, think about what each term in this convolution really means.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   463.38166666666666,
   479.0233333333333
  ]
 },
 {
  "input": "At each iteration, what you're doing is multiplying each of the values from your data by 1 5th, and adding them all together, which is to say you're taking an average of your data inside this little window.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   479.0233333333333,
   490.76923076923083
  ]
 },
 {
  "input": "Overall, the process gives you a smoothed out version of the original data, and you could modify this starting with a different little list of numbers, and as long as that little list all adds up to 1, you can still interpret it as a moving average.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   490.76923076923083,
   502.816
  ]
 },
 {
  "input": "In the example shown here, that moving average would be giving more weight towards the central value.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   502.816,
   507.78150537634406
  ]
 },
 {
  "input": "This also results in a smoothed out version of the data.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   507.78150537634406,
   513.2
  ]
 },
 {
  "input": "If you do kind of a two-dimensional analog of this, it gives you a fun algorithm for blurring a given image.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   513.2,
   518.5942857142858
  ]
 },
 {
  "input": "And I should say the animations I'm about to show are modified from something I originally made for part of a set of lectures I did with the Julia Lab at MIT for a certain OpenCourseWare class that included an image processing unit.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   518.5942857142858,
   530.8871111111112
  ]
 },
 {
  "input": "There we did a little bit more to dive into the code behind all of this, so if you're curious I'll leave you some links.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   530.8871111111112,
   536.4521739130435
  ]
 },
 {
  "input": "But focusing back on this blurring example, what's going on is I've got this little 3x3 grid of values that's marching along our original image, and if we zoom in, each one of those values is 1 9th, and what I'm doing at each iteration is multiplying each of those values by the corresponding pixel that it sits on top of.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   536.4521739130435,
   553.3128421052633
  ]
 },
 {
  "input": "And of course in computer science we think of colors as little vectors of three values, representing the red, green, and blue components.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   553.3128421052633,
   560.4
  ]
 },
 {
  "input": "When I multiply all these little values by 1 9th and I add them together, it gives us an average along each color channel, and the corresponding pixel for the image on the right is defined to be that sum.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   560.4,
   570.9666666666666
  ]
 },
 {
  "input": "The overall effect, as we do this for every single pixel on the image, is that each one kind of bleeds into all of its neighbors, which gives us a blurrier version than the original.",
  "model": "nmt",
  "translatedText": "প্রতিটি পুনরাবৃত্তিতে, আপনি যা করছেন তা হল আপনার ডেটা থেকে প্রতিটি মানকে 1 5ম দ্বারা গুণ করা, এবং সেগুলিকে একসাথে যোগ করা, যার অর্থ হল আপনি এই ছোট উইন্ডোটির মধ্যে আপনার ডেটার গড় নিচ্ছেন। সামগ্রিকভাবে, প্রক্রিয়াটি আপনাকে মূল ডেটার একটি মসৃণ সংস্করণ দেয়, এবং আপনি সংখ্যার একটি ভিন্ন ছোট তালিকা দিয়ে শুরু করে এটি পরিবর্তন করতে পারেন, এবং যতক্ষণ না সেই ছোট্ট তালিকাটি 1 পর্যন্ত যোগ করে, আপনি এখনও এটিকে একটি চলমান হিসাবে ব্যাখ্যা করতে পারেন গড় এখানে দেখানো উদাহরণে, চলমান গড় কেন্দ্রীয় মানের দিকে আরও বেশি ওজন দেবে। এর ফলে ডেটার একটি মসৃণ সংস্করণ তৈরি হয়। আপনি যদি এটির একটি দ্বি-মাত্রিক অ্যানালগ করেন তবে এটি আপনাকে একটি প্রদত্ত চিত্রকে অস্পষ্ট করার জন্য একটি মজাদার অ্যালগরিদম দেয়। এবং আমার বলা উচিত যে আমি যে অ্যানিমেশনগুলি দেখাতে যাচ্ছি তা এমন কিছু থেকে পরিবর্তিত হয়েছে যা আমি মূলত এমআইটি-তে জুলিয়া ল্যাবের সাথে একটি নির্দিষ্ট ওপেনকোর্সওয়্যার ক্লাসের জন্য বক্তৃতাগুলির একটি সেটের অংশের জন্য তৈরি করেছি যাতে একটি চিত্র প্রক্রিয়াকরণ ইউনিট অন্তর্ভুক্ত ছিল। সেখানে আমরা এই সবের পিছনের কোডে ডুব দেওয়ার জন্য একটু বেশি করেছি, তাই আপনি যদি কৌতূহলী হন তবে আমি আপনাকে কিছু লিঙ্ক ছেড়ে দেব। কিন্তু এই অস্পষ্ট উদাহরণের উপর আবার ফোকাস করে, যা হচ্ছে তা হল আমি এই ছোট 3x3 মানগুলির গ্রিড পেয়েছি যা আমাদের আসল চিত্রের সাথে অগ্রসর হচ্ছে, এবং যদি আমরা জুম ইন করি, সেই মানগুলির প্রতিটি 19তম, এবং আমি কী করছি প্রতিটি পুনরাবৃত্তিতে সেই মানগুলির প্রতিটিকে সংশ্লিষ্ট পিক্সেল দ্বারা গুণ করা হচ্ছে যা এটি উপরে বসেছে। এবং অবশ্যই কম্পিউটার বিজ্ঞানে আমরা রংকে তিনটি মানের ছোট ভেক্টর হিসেবে ভাবি, যা লাল, সবুজ এবং নীল উপাদানের প্রতিনিধিত্ব করে। যখন আমি এই সমস্ত ছোট মানগুলিকে 1 9 তম দ্বারা গুণ করি এবং আমি সেগুলিকে একসাথে যোগ করি, তখন এটি আমাদের প্রতিটি রঙের চ্যানেলে একটি গড় দেয় এবং ডানদিকের চিত্রের জন্য সংশ্লিষ্ট পিক্সেলটিকে সেই সমষ্টি হিসাবে সংজ্ঞায়িত করা হয়। সামগ্রিক প্রভাব, যেমনটি আমরা চিত্রের প্রতিটি একক পিক্সেলের জন্য করি, তা হল প্রতিটি এক ধরণের রক্তপাত তার সমস্ত প্রতিবেশীদের মধ্যে হয়, যা আমাদের আসলটির চেয়ে একটি অস্পষ্ট সংস্করণ দেয়। লিঙ্গোতে আমরা বলতে চাই যে ডানদিকের চিত্রটি আমাদের আসল চিত্রের একটি রূপান্তর যার সাথে সামান্য গ্রিড রয়েছে। অথবা আরো টেকনিক্যালি হয়ত আমার বলা উচিত যে এটি একটি 180 ডিগ্রী ঘোরানো সংস্করণের সাথে মানগুলির সেই ছোট গ্রিডের কনভল্যুশন। গ্রিড যখন সিমেট্রিক হয় তখন সেটা গুরুত্বপূর্ণ নয়, কিন্তু এটা মনে রাখা দরকার যে একটি কনভোলিউশনের সংজ্ঞা, বিশুদ্ধ গণিতের প্রেক্ষাপট থেকে উত্তরাধিকারসূত্রে প্রাপ্ত, আপনাকে সর্বদা সেই দ্বিতীয় অ্যারের চারপাশে ঘুরতে ঘুরতে ভাবতে আমন্ত্রণ জানাতে হবে। যদি আমরা এটিকে কিছুটা পরিবর্তন করি তবে আমরা একটি ভিন্ন মানের গ্রিড বেছে নিয়ে অনেক বেশি মার্জিত ঝাপসা প্রভাব পেতে পারি। এই ক্ষেত্রে আমার একটি সামান্য 5x5 গ্রিড আছে, তবে পার্থক্যটি এর আকার এত বেশি নয়। আমরা যদি জুম ইন করি তবে আমরা লক্ষ্য করি যে মাঝখানের মানটি প্রান্তের দিকের মানের চেয়ে অনেক বড়, এবং এটি যেখান থেকে আসছে তা হল সেগুলি একটি বেল কার্ভ থেকে নমুনা করা হয়েছে, যা গাউসিয়ান ডিস্ট্রিবিউশন নামে পরিচিত। এইভাবে যখন আমরা এই সমস্ত মানগুলিকে সংশ্লিষ্ট পিক্সেল দ্বারা গুণ করি যেটি তারা উপরে বসে আছে, আমরা সেই কেন্দ্রীয় পিক্সেলটিকে অনেক বেশি ওজন দিচ্ছি এবং প্রান্তে থাকা পিক্সেলগুলির প্রতি অনেক কম। এবং ঠিক যেমন ডানদিকে সংশ্লিষ্ট পিক্সেলের আগে এই যোগফলকে সংজ্ঞায়িত করা হয়েছে। যেহেতু আমরা প্রতিটি পিক্সেলের জন্য এই প্রক্রিয়াটি করি এটি একটি ঝাপসা প্রভাব দেয় যা আপনার লেন্সকে ফোকাসের বাইরে রাখার ধারণাকে আরও বেশি প্রামাণিকভাবে অনুকরণ করে। তবে ঝাপসা করা একমাত্র জিনিস থেকে দূরে যা আপনি এই ধারণাটি দিয়ে করতে পারেন। উদাহরণস্বরূপ, মানগুলির এই ছোট গ্রিডটি দেখুন, যার মধ্যে বাম দিকে কিছু ধনাত্মক সংখ্যা এবং ডানদিকে কিছু ঋণাত্মক সংখ্যা রয়েছে, যা আমি যথাক্রমে নীল এবং লাল দিয়ে রঙ করব। আপনি ভবিষ্যদ্বাণী করতে এবং চূড়ান্ত চিত্রের উপর এটি কী প্রভাব ফেলবে তা বুঝতে পারেন কিনা তা দেখার জন্য একটু সময় নিন। তাই এই ক্ষেত্রে আমি শুধু রঙিন পরিবর্তে গ্রেস্কেল হিসাবে ইমেজ চিন্তা করা হবে, তাই প্রতিটি পিক্সেল শুধুমাত্র তিনটি পরিবর্তে একটি সংখ্যা দ্বারা প্রতিনিধিত্ব করা হয়.",
  "time_range": [
   570.9666666666666,
   581.68
  ]
 },
 {
  "input": "In the lingo we'd say that the image on the right is a convolution of our original image with a little grid of values.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   581.68,
   587.800412371134
  ]
 },
 {
  "input": "Or more technically maybe I should say that it's the convolution with a 180 degree rotated version of that little grid of values.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   587.800412371134,
   594.4305617977527
  ]
 },
 {
  "input": "Not that it matters when the grid is symmetric, but it's just worth keeping in mind that the definition of a convolution, as inherited from the pure math context, should always invite you to think about flipping around that second array.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   594.4305617977527,
   605.76
  ]
 },
 {
  "input": "If we modify this slightly we can get a much more elegant blurring effect by choosing a different grid of values.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   605.76,
   611.059793814433
  ]
 },
 {
  "input": "In this case I have a little 5x5 grid, but the distinction is not so much its size.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   611.059793814433,
   615.92
  ]
 },
 {
  "input": "If we zoom in we notice that the value in the middle is a lot bigger than the value towards the edges, and where this is coming from is they're all sampled from a bell curve, known as a Gaussian distribution.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   615.92,
   626.0106666666667
  ]
 },
 {
  "input": "That way when we multiply all of these values by the corresponding pixel that they're sitting on top of, we're giving a lot more weight to that central pixel and much less towards the ones out at the edge.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   626.0106666666667,
   636.3678350515464
  ]
 },
 {
  "input": "And just as before the corresponding pixel on the right is defined to be this sum.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   636.3678350515464,
   640.3733333333332
  ]
 },
 {
  "input": "As we do this process for every single pixel it gives a blurring effect which much more authentically simulates the notion of putting your lens out of focus or something like that.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   640.3733333333332,
   649.76
  ]
 },
 {
  "input": "But blurring is far from the only thing that you can do with this idea.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   649.76,
   653.4742857142857
  ]
 },
 {
  "input": "For instance take a look at this little grid of values, which involves some positive numbers on the left and some negative numbers on the right, which I'll color with blue and red respectively.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   653.4742857142857,
   663.0713402061855
  ]
 },
 {
  "input": "Take a moment to see if you can predict and understand what effect this will have on the final image.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   663.0713402061855,
   669.7697959183673
  ]
 },
 {
  "input": "So in this case I'll just be thinking of the image as grayscale instead of colored, so each of the pixels is just represented by one number instead of three.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   669.7697959183673,
   678.0825806451612
  ]
 },
 {
  "input": "And one thing worth noticing is that as we do this convolution it's possible to get negative values.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   678.0825806451612,
   683.1020408163265
  ]
 },
 {
  "input": "For example at this point here if we zoom in the left half of our little grid sits entirely on top of black pixels, which would have a value of zero, but the right half of negative values all sit on top of white pixels, which would have a value of one.",
  "model": "nmt",
  "translatedText": "এবং লক্ষ্য করার মতো একটি জিনিস হল যে আমরা এই রূপান্তরটি করার সাথে সাথে নেতিবাচক মানগুলি পাওয়া সম্ভব। উদাহরণস্বরূপ এখানে এই সময়ে যদি আমরা আমাদের ছোট গ্রিডের বাম অর্ধেক জুম করি তাহলে সম্পূর্ণরূপে কালো পিক্সেলের উপরে বসে, যার মান শূন্য হবে, কিন্তু নেতিবাচক মানগুলির ডান অর্ধেক সব সাদা পিক্সেলের উপরে বসে, যা হবে একটি মান আছে.",
  "time_range": [
   683.1020408163265,
   696.0
  ]
 },
 {
  "input": "So when we multiply corresponding terms and add them together the results will be very negative, and the way I'm displaying this with the image on the right is to color negative values red and positive values blue.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   696.0,
   706.0463157894737
  ]
 },
 {
  "input": "Another thing to notice is that when you're on a patch that's all the same color everything goes to zero since the sum of the values in our little grid is zero.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   706.0463157894737,
   714.8544329896907
  ]
 },
 {
  "input": "This is very different from the previous two examples where the sum of our little grid was one, which let us interpret it as a moving average and hence a blur.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   714.8544329896907,
   722.9902222222222
  ]
 },
 {
  "input": "All in all this little process basically detects wherever there's variation in the pixel value as you move from left to right, and so it gives you a kind of way to pick up on all the vertical edges from your image.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   722.9902222222222,
   736.56
  ]
 },
 {
  "input": "And similarly if we rotated that grid around so that it varies as you move from the top to the bottom this will be picking up on all the horizontal edges, which in the case of our little pie creature image does result in some pretty demonic eyes.",
  "model": "nmt",
  "translatedText": "সুতরাং যখন আমরা সংশ্লিষ্ট পদগুলিকে গুণ করি এবং সেগুলিকে একত্রে যোগ করি ফলাফলগুলি খুব নেতিবাচক হবে, এবং আমি যেভাবে এটিকে ডানদিকের চিত্রের সাথে প্রদর্শন করছি তা হল নেতিবাচক মানগুলিকে লাল এবং ধনাত্মক মানগুলিকে নীল করা। লক্ষ্য করার আরেকটি বিষয় হল যে আপনি যখন একই রঙের প্যাচে থাকবেন তখন সবকিছু শূন্য হয়ে যায় যেহেতু আমাদের ছোট গ্রিডে মানগুলির যোগফল শূন্য। এটি পূর্ববর্তী দুটি উদাহরণ থেকে খুব আলাদা যেখানে আমাদের ছোট গ্রিডের যোগফল ছিল এক, যা আমরা এটিকে চলমান গড় হিসাবে ব্যাখ্যা করি এবং তাই একটি অস্পষ্ট। সব মিলিয়ে এই সামান্য প্রক্রিয়াটি মূলত সনাক্ত করে যেখানে আপনি বাম থেকে ডানে যাওয়ার সাথে সাথে পিক্সেলের মানের বৈচিত্র্য রয়েছে, এবং তাই এটি আপনাকে আপনার চিত্র থেকে সমস্ত উল্লম্ব প্রান্তগুলি বেছে নেওয়ার এক ধরণের উপায় দেয়। এবং একইভাবে যদি আমরা সেই গ্রিডটিকে চারপাশে ঘুরিয়ে দেই যাতে আপনি উপরের থেকে নীচের দিকে যাওয়ার সাথে সাথে এটি পরিবর্তিত হয় এটি সমস্ত অনুভূমিক প্রান্তে উঠবে, যা আমাদের ছোট পাই প্রাণীর চিত্রের ক্ষেত্রে কিছু সুন্দর দানবীয় চোখ দেখায়। এই ছোট গ্রিডটিকে প্রায়শই কার্নেল বলা হয়, এবং এখানে সৌন্দর্য হল কিভাবে একটি ভিন্ন কার্নেল বেছে নেওয়ার মাধ্যমে আপনি বিভিন্ন ইমেজ প্রসেসিং ইফেক্ট পেতে পারেন, শুধু আপনার প্রান্ত সনাক্তকরণকে ঝাপসা নয় বরং ধারালো করার মতো জিনিসগুলিও পেতে পারেন৷ আপনারা যারা কনভোল্যুশনাল নিউরাল নেটওয়ার্কের কথা শুনেছেন তাদের ধারণা হল নিউরাল নেটওয়ার্ক যা সনাক্ত করতে চায় তার দ্বারা নির্ধারিত কার্নেলগুলি প্রথমে কী হওয়া উচিত তা নির্ধারণ করতে ডেটা ব্যবহার করা। আরেকটি জিনিস আমি হয়তো আনতে হবে আউটপুট দৈর্ঘ্য.",
  "time_range": [
   736.56,
   749.9866666666667
  ]
 },
 {
  "input": "This smaller grid by the way is often called a kernel, and the beauty here is how just by choosing a different kernel you can get different image processing effects, not just blurring your edge detection but also things like sharpening.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   749.9866666666667,
   760.7101030927836
  ]
 },
 {
  "input": "For those of you who have heard of a convolutional neural network the idea there is to use data to figure out what the kernels should be in the first place as determined by whatever the neural network wants to detect.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   760.7101030927836,
   771.6180645161292
  ]
 },
 {
  "input": "Another thing I should maybe bring up is the length of the output.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   771.6180645161292,
   775.3784615384616
  ]
 },
 {
  "input": "For something like the moving average example you might only want to think about the terms when both of the windows fully align with each other, or in the image processing example maybe you want the final output to have the same size as the original.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   775.3784615384616,
   787.7600000000001
  ]
 },
 {
  "input": "Now convolutions as a pure math operation always produce an array that's bigger than the two arrays that you started with, at least assuming one of them doesn't have a length of one.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   787.7600000000001,
   796.4057142857143
  ]
 },
 {
  "input": "Just know that in certain computer science contexts you often want to deliberately truncate that output.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   796.4057142857143,
   801.52
  ]
 },
 {
  "input": "Another thing worth highlighting is that in the computer science context this notion of flipping around that kernel before you let it march across the original often feels really weird and just uncalled for, but again note that that's what's inherited from the pure math context where like we saw with the probabilities it's an incredibly natural thing to do.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   801.52,
   822.5300000000001
  ]
 },
 {
  "input": "And actually I can show you one more pure math example where even the programmers should care about this one because it opens the doors for a much faster algorithm to compute all of these.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   822.5300000000001,
   832.3705263157894
  ]
 },
 {
  "input": "To set up what I mean by faster here let me go back and pull up some python again and I'm going to create two different relatively big arrays.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   832.3705263157894,
   839.5793258426966
  ]
 },
 {
  "input": "Each one will have a hundred thousand random elements in it and I'm going to assess the runtime of the convolve function from the numpy library.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   839.5793258426966,
   847.575652173913
  ]
 },
 {
  "input": "And in this case it runs it for multiple different iterations, tries to find an average, and it looks like on this computer at least it averages at 4.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   847.575652173913,
   855.6195121951218
  ]
 },
 {
  "input": "87 seconds.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   855.6195121951218,
   856.3219512195121
  ]
 },
 {
  "input": "By contrast if I use a different function from the scipy library called fftconvolve which is the same thing just implemented differently that only takes 4.",
  "model": "nmt",
  "translatedText": "চলন্ত গড় উদাহরণের মতো কিছুর জন্য আপনি কেবলমাত্র সেই শর্তগুলি সম্পর্কে ভাবতে চাইতে পারেন যখন উভয় উইন্ডো একে অপরের সাথে সম্পূর্ণভাবে সারিবদ্ধ হয়, বা চিত্র প্রক্রিয়াকরণের উদাহরণে আপনি চান যে চূড়ান্ত আউটপুটটি আসলটির মতো একই আকারে থাকুক। এখন একটি বিশুদ্ধ গণিত অপারেশন হিসাবে কনভল্যুশনগুলি সর্বদা একটি অ্যারে তৈরি করে যা আপনি যে দুটি অ্যারে দিয়ে শুরু করেছিলেন তার চেয়ে বড়, অন্তত ধরে নিন তাদের একটির দৈর্ঘ্য নেই। শুধু জেনে রাখুন যে নির্দিষ্ট কম্পিউটার বিজ্ঞান প্রসঙ্গে আপনি প্রায়শই ইচ্ছাকৃতভাবে সেই আউটপুটটি ছাঁটাই করতে চান। আরেকটি বিষয় হাইলাইট করার মতো বিষয় হল যে কম্পিউটার বিজ্ঞানের প্রেক্ষাপটে সেই কার্নেলের চারপাশে উল্টে যাওয়ার এই ধারণাটি আপনি এটিকে মূল জুড়ে যেতে দেওয়ার আগে প্রায়শই সত্যিই অদ্ভুত এবং কেবল অনাকাক্সিক্ষত মনে হয়, কিন্তু আবার মনে রাখবেন যে এটিই বিশুদ্ধ গণিত প্রসঙ্গ থেকে উত্তরাধিকারসূত্রে পাওয়া যায় যেখানে আমরা যেমন সম্ভাব্যতার সাথে দেখেছি এটি একটি অবিশ্বাস্যভাবে স্বাভাবিক জিনিস। এবং প্রকৃতপক্ষে আমি আপনাকে আরও একটি বিশুদ্ধ গণিত উদাহরণ দেখাতে পারি যেখানে এমনকি প্রোগ্রামারদেরও এটি সম্পর্কে যত্ন নেওয়া উচিত কারণ এটি এই সবগুলি গণনা করার জন্য অনেক দ্রুত অ্যালগরিদমের দরজা খুলে দেয়। আমি এখানে দ্রুত বলতে যা বোঝাতে চাই তা সেট আপ করার জন্য আমাকে ফিরে যেতে দিন এবং আবার কিছু পাইথন টানুন এবং আমি দুটি ভিন্ন অপেক্ষাকৃত বড় অ্যারে তৈরি করতে যাচ্ছি। প্রতিটিতে এক লক্ষ এলোমেলো উপাদান থাকবে এবং আমি নম্পি লাইব্রেরি থেকে কনভল ফাংশনের রানটাইম মূল্যায়ন করতে যাচ্ছি। এবং এই ক্ষেত্রে এটি একাধিক ভিন্ন পুনরাবৃত্তির জন্য এটি চালায়, একটি গড় খুঁজে বের করার চেষ্টা করে এবং এটি এই কম্পিউটারে অন্তত 4-এ গড় দেখায়। 87 সেকেন্ড। বিপরীতে যদি আমি fftconvolve নামক স্কিপি লাইব্রেরি থেকে একটি ভিন্ন ফাংশন ব্যবহার করি যা একই জিনিসটি ভিন্নভাবে প্রয়োগ করা হয় যা শুধুমাত্র 4 লাগে। গড়ে 3 মিলিসেকেন্ড, তাই মাত্রার উন্নতির তিনটি অর্ডার। এবং আবার যদিও এটি একটি ভিন্ন নামে উড়ে যায় এটি একই আউটপুট দেয় যা অন্য কনভল ফাংশন করে, এটি একটি চতুর উপায়ে এটি সম্পর্কে যেতে কিছু করছে। মনে রাখবেন কিভাবে সম্ভাব্যতার উদাহরণের সাথে আমি বলেছিলাম অন্য যেভাবে আপনি কনভোল্যুশন সম্পর্কে চিন্তা করতে পারেন তা হল সমস্ত পেয়ারওয়াইজ প্রোডাক্টের এই টেবিল তৈরি করা এবং তারপর সেই পেয়ারওয়াইজ প্রোডাক্টগুলিকে কর্ণ বরাবর যোগ করা। অবশ্যই সম্ভাব্যতার জন্য নির্দিষ্ট কিছু নেই যেকোন সময় আপনি সংখ্যার দুটি ভিন্ন তালিকাকে আবদ্ধ করছেন আপনি এইভাবে এটি সম্পর্কে চিন্তা করতে পারেন। সমস্ত জোড়া ভিত্তিক পণ্যের সাথে এই ধরণের গুণের সারণী তৈরি করুন এবং তারপরে তির্যক বরাবর প্রতিটি যোগফল আপনার চূড়ান্ত আউটপুটগুলির একটির সাথে মিলে যায়। একটি প্রেক্ষাপট যেখানে এই দৃষ্টিভঙ্গি বিশেষভাবে স্বাভাবিক তা হল যখন আপনি দুটি বহুপদকে একসাথে গুণ করেন। উদাহরন স্বরূপ আমাকে আমাদের কাছে ইতিমধ্যেই থাকা ছোট্ট গ্রিডটি নেওয়া যাক এবং উপরের পদগুলিকে 1, 2x, এবং 3x বর্গ দিয়ে প্রতিস্থাপন করি এবং অন্যান্য পদগুলিকে 4, 5x এবং 6x বর্গ দিয়ে প্রতিস্থাপন করি। এখন চিন্তা করুন এর অর্থ কী আমরা যখন দুটি তালিকার মধ্যে এই সমস্ত ভিন্ন জোড়া পণ্য তৈরি করছি। আপনি যা করছেন তা হল মূলত আমি যে দুটি বহুপদকে লিখেছি তার সম্পূর্ণ গুণফলকে প্রসারিত করা এবং তারপরে আপনি যখন তির্যক বরাবর যোগ করেন যেটি সবকটি মত পদ সংগ্রহের সাথে মিলে যায় যা একটি বহুপদী সম্প্রসারণ করা এবং পদের মতো সংগ্রহ করা ঠিক হল একটি convolution হিসাবে একই প্রক্রিয়া.",
  "time_range": [
   856.3219512195121,
   866.0616666666667
  ]
 },
 {
  "input": "3 milliseconds on average, so three orders of magnitude improvement.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   866.0616666666667,
   870.64
  ]
 },
 {
  "input": "And again even though it flies under a different name it's giving the same output that the other convolve function does, it's just doing something to go about it in a cleverer way.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   870.64,
   878.88
  ]
 },
 {
  "input": "Remember how with the probability example I said another way you could think about the convolution was to create this table of all the pairwise products and then add up those pairwise products along the diagonals.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   878.88,
   892.5279999999999
  ]
 },
 {
  "input": "There's of course nothing specific to probability anytime you're convolving two different lists of numbers you can think about it this way.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   892.5279999999999,
   899.3212371134019
  ]
 },
 {
  "input": "Create this kind of multiplication table with all pairwise products and then each sum along the diagonal corresponds to one of your final outputs.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   899.3212371134019,
   906.3810752688172
  ]
 },
 {
  "input": "One context where this view is especially natural is when you multiply together two polynomials.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   906.3810752688172,
   912.4316483516483
  ]
 },
 {
  "input": "For example let me take the little grid we already have and replace the top terms with 1, 2x, and 3x squared and replace the other terms with 4, 5x, and 6x squared.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   912.4316483516483,
   923.92
  ]
 },
 {
  "input": "Now think about what it means when we're creating all of these different pairwise products between the two lists.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   923.92,
   928.6645454545454
  ]
 },
 {
  "input": "What you're doing is essentially expanding out the full product of the two polynomials I have written down and then when you add up along the diagonal that corresponds to collecting all like terms which is pretty neat expanding a polynomial and collecting like terms is exactly the same process as a convolution.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   928.6645454545454,
   946.9371428571429
  ]
 },
 {
  "input": "But this allows us to do something that's pretty cool because think about what we're saying here.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   946.9371428571429,
   952.6424242424243
  ]
 },
 {
  "input": "We're saying if you take two different functions and you multiply them together which is a simple pointwise operation that's the same thing as if you had first extracted the coefficients from each one of those assuming they're polynomials and then taken a convolution of those two lists of coefficients.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   952.6424242424243,
   968.7615999999999
  ]
 },
 {
  "input": "What makes that so interesting is that convolutions feel in principle a lot more complicated than simple multiplication and I don't just mean conceptually they're harder to think about I mean computationally it requires more steps to perform a convolution than it does to perform a pointwise product of two different lists.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   968.7615999999999,
   986.0702040816327
  ]
 },
 {
  "input": "For example let's say I gave you two really big polynomials say each one with a hundred different coefficients then if the way you multiply them was to expand out this product you know filling in this entire 100 by 100 grid of pairwise products that would require you to perform 10,000 different products and then when you're collecting all the like terms along the diagonals that's another set of around 10,000 operations.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   986.0702040816327,
   1009.6666666666665
  ]
 },
 {
  "input": "More generally in the lingo we'd say the algorithm is O of n squared meaning for two lists of size n the way that the number of operations scales is in proportion to the square of n.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   1009.6666666666665,
   1020.816
  ]
 },
 {
  "input": "On the other hand if I think of two polynomials in terms of their outputs for example sampling their values at some handful of inputs then multiplying them only requires as many operations as the number of samples since again it's a pointwise operation and with polynomials you only need finitely many samples to be able to recover the coefficients.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   1020.816,
   1041.126530612245
  ]
 },
 {
  "input": "For example two outputs are enough to uniquely specify a linear polynomial three outputs would be enough to uniquely specify a quadratic polynomial and in general if you know n distinct outputs that's enough to uniquely specify a polynomial that has n different coefficients or if you prefer we could phrase this in the language of systems of equations imagine I tell you I have some polynomial but I don't tell you what the coefficients are those are a mystery to you.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   1041.126530612245,
   1066.439603960396
  ]
 },
 {
  "input": "In our example you might think of this as the product that we're trying to figure out and then suppose I say I'll just tell you what the outputs of this polynomial would be if you inputted various different inputs like 0, 1, 2, 3, on and on and I give you enough so that you have as many equations as you have unknowns it even happens to be a linear system of equations so that's nice and in principle at least this should be enough to recover the coefficients.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   1066.439603960396,
   1091.0618181818181
  ]
 }
]