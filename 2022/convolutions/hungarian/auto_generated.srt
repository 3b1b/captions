1
00:00:00,000 --> 00:00:03,773
Tegyük fel, hogy adok két különböző számlistát, vagy esetleg két különböző függvényt, 

2
00:00:03,773 --> 00:00:06,800
és megkérem, hogy gondolja végig, hogyan kombinálhatná a két listát, 

3
00:00:06,800 --> 00:00:10,047
hogy egy új számlistát kapjon, vagy hogyan kombinálhatná a két függvényt, 

4
00:00:10,047 --> 00:00:11,320
hogy egy új függvényt kapjon.

5
00:00:12,120 --> 00:00:14,311
Talán az egyik egyszerű módszer, ami eszünkbe jut, 

6
00:00:14,311 --> 00:00:16,760
hogy egyszerűen összeadjuk őket kifejezésről kifejezésre.

7
00:00:17,160 --> 00:00:19,920
Hasonlóképpen a függvényeknél is hozzáadhatja az összes megfelelő kimenetet.

8
00:00:20,540 --> 00:00:23,499
Hasonló módon a két listát termenként is megszorozhatod, 

9
00:00:23,499 --> 00:00:25,680
és ugyanezt a függvényekkel is megteheted.

10
00:00:26,360 --> 00:00:29,698
De van egy másik fajta kombináció is, amely ugyanolyan alapvető, 

11
00:00:29,698 --> 00:00:33,500
mint a kettő, de sokkal kevésbé ismert, és amelyet konvolúciónak neveznek.

12
00:00:34,080 --> 00:00:36,733
De az előző két esettől eltérően ez nem olyasmi, 

13
00:00:36,733 --> 00:00:39,820
ami pusztán egy számokkal végezhető műveletből öröklődik.

14
00:00:39,980 --> 00:00:42,545
Ez valami igazán újdonság a számok listáinak vagy 

15
00:00:42,545 --> 00:00:44,700
a függvények kombinálásának kontextusában.

16
00:00:45,320 --> 00:00:48,759
Mindenütt felbukkannak, mindenütt jelen vannak a képfeldolgozásban, 

17
00:00:48,759 --> 00:00:51,389
a valószínűségelmélet egyik alapvető konstrukciója, 

18
00:00:51,389 --> 00:00:55,334
sokat használják differenciálegyenletek megoldásánál, és egy olyan kontextus, 

19
00:00:55,334 --> 00:00:58,773
ahol szinte biztosan találkoztál már velük, ha nem is ezen a néven, 

20
00:00:58,773 --> 00:01:00,240
az két polinom összeszorzása.

21
00:01:00,740 --> 00:01:05,421
Mint valaki, aki a vizuális magyarázatokkal foglalkozik, ez egy különösen nagyszerű téma, 

22
00:01:05,421 --> 00:01:09,894
mert a formulaszerű definíció önmagában és kontextus nélkül eléggé ijesztőnek tűnhet, 

23
00:01:09,894 --> 00:01:14,471
de ha időt szánunk arra, hogy valóban kibontjuk, mit is mond, és előtte még motiváljuk, 

24
00:01:14,471 --> 00:01:18,320
hogy miért akarsz valami ilyesmit, akkor ez egy hihetetlenül szép művelet.

25
00:01:18,960 --> 00:01:21,179
És be kell vallanom, hogy tanultam is valamit, 

26
00:01:21,179 --> 00:01:23,540
miközben összeállítottam a projekt látványterveit.

27
00:01:23,540 --> 00:01:27,353
Két különböző függvény összevonása esetén próbáltam különböző módokon gondolkodni, 

28
00:01:27,353 --> 00:01:31,489
hogy mit jelenthet ez, és az egyiknél egy kis "aha" pillanatot kaptam, hogy miért van az, 

29
00:01:31,489 --> 00:01:35,119
hogy a normális eloszlások olyan szerepet játszanak a valószínűségszámításban, 

30
00:01:35,119 --> 00:01:38,520
mint amilyet játszanak, miért olyan természetes alakja ez egy függvénynek.

31
00:01:39,020 --> 00:01:41,520
De elébe megyek a dolgoknak, ehhez még rengeteg előkészület van.

32
00:01:41,840 --> 00:01:45,335
Ebben a videóban elsősorban csak a diszkrét esetre koncentrálunk, 

33
00:01:45,335 --> 00:01:49,518
és különösen egy nagyon váratlan, de nagyon okos algoritmus kidolgozására ezek 

34
00:01:49,518 --> 00:01:50,260
kiszámítására.

35
00:01:50,260 --> 00:01:54,480
A folyamatos esetről szóló vitát pedig egy második részbe húzom ki.

36
00:01:58,580 --> 00:02:01,653
Nagy a kísértés, hogy a képfeldolgozási példákkal kezdjük, 

37
00:02:01,653 --> 00:02:05,299
mivel vizuálisan ezek a legérdekesebbek, de van néhány olyan apróság, 

38
00:02:05,299 --> 00:02:09,779
ami miatt a képfeldolgozási eset kevésbé reprezentatív a konvolúciókkal kapcsolatban, 

39
00:02:09,779 --> 00:02:12,436
ezért inkább kezdjük a dolgokat a valószínűséggel, 

40
00:02:12,436 --> 00:02:16,916
és különösen az egyik legegyszerűbb példával, amin biztosan mindenki gondolkodott már 

41
00:02:16,916 --> 00:02:21,500
valamikor az életében, ami egy kockadobás és a különböző összegek esélyének kiszámítása.

42
00:02:22,460 --> 00:02:24,460
És azt mondhatnád, hogy nem probléma, nem probléma.

43
00:02:24,680 --> 00:02:27,988
Mindkét kockának hat különböző lehetséges kimenetele van, 

44
00:02:27,988 --> 00:02:31,068
ami összesen 36 különböző lehetséges eredménypárt ad, 

45
00:02:31,068 --> 00:02:35,860
és ha mindegyiket átnézzük, meg tudjuk számolni, hogy hány párnak van adott összege.

46
00:02:36,600 --> 00:02:40,351
És ha az összes párt így elrendezzük egy rácson, az egyik szép dolog az, 

47
00:02:40,351 --> 00:02:43,024
hogy az összes olyan pár, amelynek összege állandó, 

48
00:02:43,024 --> 00:02:45,440
látható a különböző átlósok valamelyike mentén.

49
00:02:45,440 --> 00:02:48,804
Tehát egyszerűen megszámolva, hogy hányan vannak az egyes átlósokon, 

50
00:02:48,804 --> 00:02:52,120
megtudhatjuk, hogy milyen valószínűséggel látunk egy adott összeget.

51
00:02:53,220 --> 00:02:56,445
És azt mondanám, hogy nagyon jó, nagyon jó, de tudtok-e más módot, 

52
00:02:56,445 --> 00:02:58,660
ahogyan ugyanezt a kérdést vizualizálhatnátok?

53
00:02:59,300 --> 00:03:02,838
Egyéb képek, amelyek eszünkbe juthatnak, hogy az összes különböző párra gondoljunk, 

54
00:03:02,838 --> 00:03:04,060
amelyeknek adott összege van?

55
00:03:04,860 --> 00:03:07,980
És talán valamelyikőtök felemeli a kezét, és azt mondja, hogy igen, nekem van egy.

56
00:03:08,280 --> 00:03:12,292
Tegyük fel, hogy a lehetőségek két különböző halmazát egy-egy sorban képzeled el, 

57
00:03:12,292 --> 00:03:13,760
de megfordítod a második sort.

58
00:03:13,760 --> 00:03:18,760
Így az összes különböző pár, amelyek összege hét, függőlegesen sorakozik fel, így.

59
00:03:19,360 --> 00:03:22,347
És ha az alsó sort egészen jobbra csúsztatjuk, akkor az egyetlen pár, 

60
00:03:22,347 --> 00:03:25,933
amelyik kettőt ad össze, a kígyószemek, az egyetlenek, amelyek egy vonalban vannak, 

61
00:03:25,933 --> 00:03:28,921
és ha ezt egy egységgel jobbra csúsztatom, akkor a két különböző pár, 

62
00:03:28,921 --> 00:03:32,080
amelyik egy vonalban van, az a két különböző pár, amelyik hármat ad össze.

63
00:03:32,880 --> 00:03:35,910
És általában ennek az alsó tömbnek a különböző eltolási értékei, 

64
00:03:35,910 --> 00:03:39,921
amelyeket először meg kellett fordítanom, megmutatják az összes olyan különálló párt, 

65
00:03:39,921 --> 00:03:41,460
amelyeknek van egy adott összege.

66
00:03:44,820 --> 00:03:48,938
Ami a valószínűségi kérdéseket illeti, ez még mindig nem különösebben érdekes, 

67
00:03:48,938 --> 00:03:52,640
mert csak azt számoljuk, hogy hány eredmény van az egyes kategóriákban.

68
00:03:52,980 --> 00:03:55,312
De ez azzal a hallgatólagos feltételezéssel történik, 

69
00:03:55,312 --> 00:03:58,120
hogy mindegyik arcnak egyenlő esélye van arra, hogy felbukkanjon.

70
00:03:58,360 --> 00:04:01,620
De mi lenne, ha azt mondanám, hogy van egy különleges kockakészletem, ami nem egységes?

71
00:04:02,060 --> 00:04:04,425
Lehet, hogy a kék kockának saját számsorozata van, 

72
00:04:04,425 --> 00:04:07,255
amely leírja az egyes oldalak megjelenésének valószínűségét, 

73
00:04:07,255 --> 00:04:09,760
a piros kockának pedig saját, egyedi számsorozata van.

74
00:04:10,300 --> 00:04:14,012
Ebben az esetben, ha ki akarod számolni, mondjuk, a 2-es valószínűségét, 

75
00:04:14,012 --> 00:04:17,368
akkor megszoroznád annak a valószínűségét, hogy a kék kocka 1-es, 

76
00:04:17,368 --> 00:04:19,860
azzal a valószínűséggel, hogy a piros kocka 1-es.

77
00:04:20,279 --> 00:04:25,062
A 3-as valószínűségét pedig megnézzük, hogy melyik két különböző párban lehetséges ez, 

78
00:04:25,062 --> 00:04:29,680
és ismét megszorozzuk a megfelelő valószínűségeket, majd összeadjuk a két eredményt.

79
00:04:30,100 --> 00:04:33,884
Hasonlóképpen, a 4-es esélye három különböző lehetőségpár 

80
00:04:33,884 --> 00:04:36,820
összeszorzásával és összeadásával adható meg.

81
00:04:36,820 --> 00:04:41,520
És a képletek felállításának szellemében nevezzük el ezeket a felső valószínűségeket a 1, 

82
00:04:41,520 --> 00:04:45,960
a 2, a 3, és így tovább, az alsó valószínűségeket pedig b 1, b 2, b 3, és így tovább.

83
00:04:46,400 --> 00:04:50,341
És általában véve ez a folyamat, amikor két különböző számsort veszünk, 

84
00:04:50,341 --> 00:04:54,940
a másodikat megfordítjuk, majd különböző eltolási értékekkel felsorakoztatjuk őket, 

85
00:04:54,940 --> 00:04:57,897
egy csomó páros szorzatot veszünk és összeadjuk őket, 

86
00:04:57,897 --> 00:05:01,620
ez az egyik alapvető módja annak, hogy elgondoljuk, mi a konvolúció.

87
00:05:04,860 --> 00:05:08,789
Tehát, hogy egy kicsit pontosabban kifejtsem, ezzel a folyamattal most 

88
00:05:08,789 --> 00:05:12,663
generáltunk valószínűségeket a 2, 3, 4, és így tovább, egészen 12-ig, 

89
00:05:12,663 --> 00:05:16,980
és ezeket úgy kaptuk meg, hogy összekevertük az a és a b értékek egy listáját.

90
00:05:17,440 --> 00:05:22,230
A szakzsargonban azt mondanánk, hogy a két sorozat konvolúciója adja ezt az új sorozatot, 

91
00:05:22,230 --> 00:05:25,210
a 11 érték új sorozatát, amelyek mindegyike úgy néz ki, 

92
00:05:25,210 --> 00:05:27,340
mint a páros szorzat összegének összege.

93
00:05:27,340 --> 00:05:30,651
Ha szeretné, ugyanezt a műveletet úgy is elgondolhatja, 

94
00:05:30,651 --> 00:05:34,791
hogy először létrehoz egy táblázatot az összes páronkénti szorzatról, 

95
00:05:34,791 --> 00:05:36,980
majd összeadja az összes átló mentén.

96
00:05:37,460 --> 00:05:40,469
Ez is egy módja annak, hogy összekeverjük ezt a két számsorozatot, 

97
00:05:40,469 --> 00:05:42,760
hogy egy új, 11 számból álló számsorozatot kapjunk.

98
00:05:43,240 --> 00:05:46,460
Ez ugyanaz a művelet, mint a tolóablakok, csak más szemszögből.

99
00:05:47,140 --> 00:05:49,800
Egy kis jegyzeteléssel a következőt láthatod leírva.

100
00:05:50,220 --> 00:05:54,499
Az a és b konvolúciója, amit ezzel a kis csillaggal jelölünk, egy új lista, 

101
00:05:54,499 --> 00:05:58,159
és ennek a listának az n-edik eleme úgy néz ki, mint egy összeg, 

102
00:05:58,159 --> 00:06:01,932
és ez az összeg átmegy az összes különböző i és j indexpáron, úgy, 

103
00:06:01,932 --> 00:06:04,860
hogy ezeknek az indexeknek az összege egyenlő n-nel.

104
00:06:05,280 --> 00:06:10,221
Elég nagy a szó, de például, ha n 6, akkor az 1 és 5, 2 és 4, 

105
00:06:10,221 --> 00:06:15,800
3 és 3, 4 és 2, 5 és 1, vagyis az összes olyan pár, amelyek összege 6.

106
00:06:16,620 --> 00:06:19,519
De őszintén szólva, bárhogy is írja le, a jelölés másodlagos jelentőségű 

107
00:06:19,519 --> 00:06:22,340
ahhoz a képi megjelenítéshez képest, amit a fejében tart a folyamatról.

108
00:06:23,280 --> 00:06:27,246
Itt talán segít egy szuper egyszerű példa, ahol megkérdezhetem, 

109
00:06:27,246 --> 00:06:30,780
hogy mi az 1, 2, 3 lista konvolúciója a 4, 5, 6 listával.

110
00:06:31,480 --> 00:06:35,470
Elképzelheted, hogy fogod a két listát, megfordítod a másodikat, 

111
00:06:35,470 --> 00:06:37,680
majd a fedelét egészen balra kezded.

112
00:06:38,180 --> 00:06:40,497
Ezután az 1 és 4 értékpár, amelyek egybevágnak, 

113
00:06:40,497 --> 00:06:43,540
szorozzuk össze őket, és ez adja a kimenetünk első kifejezését.

114
00:06:43,960 --> 00:06:48,250
Csúsztassuk az alsó tömböt egy egységgel jobbra, az egymáshoz illeszkedő párok az 1, 

115
00:06:48,250 --> 00:06:51,532
5 és a 2 és 4, szorozzuk meg ezeket a párokat, adjuk össze őket, 

116
00:06:51,532 --> 00:06:54,460
és ez adja a 13-at, a következő bejegyzést a kimenetünkön.

117
00:06:54,960 --> 00:06:58,436
Csúsztassuk át a dolgokat még egyszer, és vegyük az 1-szer 

118
00:06:58,436 --> 00:07:01,560
6 plusz 2-szer 5 plusz 3-szor 4, ami történetesen 28.

119
00:07:02,020 --> 00:07:07,020
Még egy csúszás, és megkapjuk a 2-szer 6 plusz 3-szor 5, és ez 27-et ad.

120
00:07:07,500 --> 00:07:10,120
És végül az utolsó kifejezés úgy fog kinézni, hogy 3-szor 6.

121
00:07:10,660 --> 00:07:14,567
Ha szeretnéd, előveheted a kedvenc programozási nyelvedet és a kedvenc könyvtáradat, 

122
00:07:14,567 --> 00:07:16,819
amely különböző numerikus műveleteket tartalmaz, 

123
00:07:16,819 --> 00:07:18,980
és meggyőződhetsz róla, hogy nem hazudok neked.

124
00:07:18,980 --> 00:07:22,280
Ha az 1, 2, 3 konvolúcióját vesszük a 4, 5, 6 ellenében, 

125
00:07:22,280 --> 00:07:24,480
akkor valóban ezt az eredményt kapjuk.

126
00:07:25,920 --> 00:07:29,500
Láttunk egy esetet, amikor ez egy természetes és kívánatos művelet, 

127
00:07:29,500 --> 00:07:33,660
a valószínűségi eloszlások összeadása, és egy másik gyakori példa a mozgóátlag.

128
00:07:34,080 --> 00:07:37,636
Képzeljük el, hogy van egy hosszú számlista, és veszünk egy másik, 

129
00:07:37,636 --> 00:07:39,760
kisebb számlistát, amelyek mindegyike 1.

130
00:07:40,100 --> 00:07:42,645
Ebben az esetben csak egy 5 értéket tartalmazó kis listám van, 

131
00:07:42,645 --> 00:07:44,060
és mindegyik egyenlő 1 5. értékkel.

132
00:07:44,060 --> 00:07:47,257
Aztán ha elvégezzük ezt a csúszóablakos konvolúciós folyamatot, 

133
00:07:47,257 --> 00:07:51,404
és becsukjuk a szemünket, és a szőnyeg alá söpörjük azt, ami a legelején történik, 

134
00:07:51,404 --> 00:07:55,052
amint a kisebb értéklistánk teljesen átfed a nagyobbal, gondoljuk végig, 

135
00:07:55,052 --> 00:07:58,700
hogy mit jelentenek valójában az egyes kifejezések ebben a konvolúcióban.

136
00:07:59,400 --> 00:08:04,995
Minden egyes iterációnál az adatok minden egyes értékét megszorozzuk 1/5-tel, 

137
00:08:04,995 --> 00:08:10,520
és összeadjuk őket, vagyis átlagot veszünk az adatokból ebben a kis ablakban.

138
00:08:11,100 --> 00:08:15,025
Összességében a folyamat az eredeti adatok egy kisimított változatát adja, 

139
00:08:15,025 --> 00:08:17,904
és ezt egy másik kis számlistával kezdve módosíthatja, 

140
00:08:17,904 --> 00:08:20,364
és amíg ez a kis lista mindegyike 1-re adódik, 

141
00:08:20,364 --> 00:08:22,720
addig még mindig mozgóátlagként értelmezhető.

142
00:08:23,400 --> 00:08:27,760
Az itt bemutatott példában ez a mozgóátlag nagyobb súlyt adna a központi értéknek.

143
00:08:28,420 --> 00:08:30,800
Ez szintén az adatok kisimított változatát eredményezi.

144
00:08:33,140 --> 00:08:35,630
Ha ennek egyfajta kétdimenziós analógiáját csináljuk, 

145
00:08:35,630 --> 00:08:38,720
akkor egy szórakoztató algoritmust kapunk egy adott kép elmosására.

146
00:08:38,720 --> 00:08:41,490
És azt kell mondanom, hogy az animációk, amelyeket most mutatok, 

147
00:08:41,490 --> 00:08:45,113
olyanból vannak módosítva, amit eredetileg egy előadássorozat részeként készítettem, 

148
00:08:45,113 --> 00:08:48,011
amelyet az MIT Julia laborjával együtt csináltam egy bizonyos nyílt 

149
00:08:48,011 --> 00:08:51,080
tananyag osztály számára, amely egy képfeldolgozó egységet tartalmazott.

150
00:08:51,560 --> 00:08:54,203
Ott egy kicsit jobban belemerültünk a kódba, ami mindezek mögött van, 

151
00:08:54,203 --> 00:08:56,280
szóval ha kíváncsiak vagytok, itt hagyok néhány linket.

152
00:08:56,620 --> 00:08:59,925
De visszatérve erre az elmosódási példára, az történik, 

153
00:08:59,925 --> 00:09:04,293
hogy van ez a kis 3x3-as értékrács, amely végigvonul az eredeti képünkön, 

154
00:09:04,293 --> 00:09:07,422
és ha ráközelítünk, minden egyes érték 1 9-ed része, 

155
00:09:07,422 --> 00:09:12,262
és minden egyes iterációnál minden egyes értéket megszorzok a megfelelő pixellel, 

156
00:09:12,262 --> 00:09:13,620
amelynek a tetején van.

157
00:09:13,900 --> 00:09:16,363
És természetesen az informatikában a színekre úgy gondolunk, 

158
00:09:16,363 --> 00:09:18,705
mint három értékből álló kis vektorokra, amelyek a piros, 

159
00:09:18,705 --> 00:09:20,200
zöld és kék komponenseket képviselik.

160
00:09:20,560 --> 00:09:24,550
Ha ezeket a kis értékeket megszorzom 1 9-gyel, és összeadom őket, 

161
00:09:24,550 --> 00:09:28,116
akkor minden egyes színcsatorna mentén kapunk egy átlagot, 

162
00:09:28,116 --> 00:09:31,200
és a jobb oldali kép megfelelő pixele ez az összeg.

163
00:09:31,940 --> 00:09:35,395
Mivel ezt a kép minden egyes pixelénél elvégezzük, az általános hatás az, 

164
00:09:35,395 --> 00:09:38,338
hogy minden egyes pixel átfolyik az összes szomszédos pixelbe, 

165
00:09:38,338 --> 00:09:40,860
ami az eredetinél elmosódottabb változatot eredményez.

166
00:09:41,720 --> 00:09:44,589
A szakzsargonban azt mondanánk, hogy a jobb oldali 

167
00:09:44,589 --> 00:09:47,740
kép az eredeti képünk konvolúciója egy kis értékráccsal.

168
00:09:48,140 --> 00:09:51,296
Vagy technikailag talán azt kellene mondanom, hogy ez a kis 

169
00:09:51,296 --> 00:09:54,400
értékrács 180 fokban elforgatott változatának konvolúciója.

170
00:09:54,620 --> 00:09:57,797
Nem mintha számítana, ha a rács szimmetrikus, de érdemes észben tartani, 

171
00:09:57,797 --> 00:10:01,279
hogy a konvolúció definíciójának, ahogyan azt a tiszta matematikai kontextusból 

172
00:10:01,279 --> 00:10:04,543
örököltük, mindig arra kell ösztönöznie, hogy gondolkodjunk a második tömb 

173
00:10:04,543 --> 00:10:05,240
megfordításáról.

174
00:10:05,960 --> 00:10:08,506
Ha ezt kissé módosítjuk, sokkal elegánsabb elmosódási 

175
00:10:08,506 --> 00:10:11,100
hatást érhetünk el egy másik értékrács kiválasztásával.

176
00:10:11,440 --> 00:10:15,780
Ebben az esetben van egy kis 5x5-ös rácsom, de a különbség nem annyira a mérete.

177
00:10:15,980 --> 00:10:19,257
Ha ráközelítünk, észrevehetjük, hogy a középső érték sokkal nagyobb, 

178
00:10:19,257 --> 00:10:20,540
mint a széleken lévő érték.

179
00:10:21,180 --> 00:10:23,739
És ez abból adódik, hogy mindannyian egy haranggörbéből, 

180
00:10:23,739 --> 00:10:25,940
az úgynevezett Gauss-eloszlásból veszik a mintát.

181
00:10:26,800 --> 00:10:30,269
Így, amikor ezeket az értékeket megszorozzuk a megfelelő pixellel, 

182
00:10:30,269 --> 00:10:34,360
amelyen felül helyezkednek el, sokkal nagyobb súlyt adunk a központi pixelnek, 

183
00:10:34,360 --> 00:10:36,380
és sokkal kevesebbet a szélén lévőknek.

184
00:10:36,800 --> 00:10:39,876
És ugyanúgy, mint korábban, a megfelelő pixel a jobb oldalon úgy van definiálva, 

185
00:10:39,876 --> 00:10:40,560
hogy ez az összeg.

186
00:10:41,320 --> 00:10:45,155
Mivel ezt a folyamatot minden egyes pixelre elvégezzük, elmosódást eredményez, 

187
00:10:45,155 --> 00:10:48,700
ami sokkal hitelesebben szimulálja azt, amikor az objektív nem fókuszál, 

188
00:10:48,700 --> 00:10:49,720
vagy valami hasonlót.

189
00:10:49,900 --> 00:10:53,360
De az elmosódás messze nem az egyetlen dolog, amit ezzel az ötlettel tehet.

190
00:10:53,800 --> 00:10:58,008
Nézzük meg például ezt a kis értékrácsot, amely a bal oldalon pozitív számokat, 

191
00:10:58,008 --> 00:11:01,532
a jobb oldalon pedig negatív számokat tartalmaz, amelyeket kékkel, 

192
00:11:01,532 --> 00:11:02,900
illetve pirossal színezek.

193
00:11:03,640 --> 00:11:06,694
Szánjon rá egy pillanatot, hogy meg tudja-e jósolni és megértse, 

194
00:11:06,694 --> 00:11:08,480
milyen hatással lesz ez a végső képre.

195
00:11:10,720 --> 00:11:14,760
Tehát ebben az esetben a képet színes helyett szürkeárnyalatosnak fogom tekinteni, 

196
00:11:14,760 --> 00:11:18,120
így minden egyes pixel három helyett csak egy számmal lesz ábrázolva.

197
00:11:18,440 --> 00:11:21,495
És egy dolog, amit érdemes megjegyezni, hogy miközben ezt a konvolúciót végezzük, 

198
00:11:21,495 --> 00:11:23,060
lehetséges, hogy negatív értékeket kapunk.

199
00:11:23,060 --> 00:11:27,213
Például ezen a ponton, ha ráközelítünk, a kis rács bal fele teljesen 

200
00:11:27,213 --> 00:11:30,524
fekete pixeleken helyezkedik el, amelyek értéke nulla, 

201
00:11:30,524 --> 00:11:35,460
de a negatív értékek jobb fele fehér pixeleken helyezkedik el, amelyek értéke egy.

202
00:11:36,180 --> 00:11:39,320
Amikor tehát a megfelelő kifejezéseket megszorozzuk és összeadjuk, 

203
00:11:39,320 --> 00:11:40,820
az eredmény nagyon negatív lesz.

204
00:11:41,160 --> 00:11:44,553
Ezt a jobb oldali képen úgy jelenítem meg, hogy a negatív értékeket pirosra, 

205
00:11:44,553 --> 00:11:46,360
a pozitív értékeket pedig kékre színezem.

206
00:11:46,880 --> 00:11:50,097
Egy másik dolog, amit észre kell vennünk, hogy amikor egy olyan folton vagyunk, 

207
00:11:50,097 --> 00:11:52,028
amely mind egyforma színű, minden nullára megy, 

208
00:11:52,028 --> 00:11:54,080
mivel a mi kis rácsunkban az értékek összege nulla.

209
00:11:55,180 --> 00:11:58,637
Ez nagyban különbözik az előző két példától, ahol a kis rácsunk összege egy volt, 

210
00:11:58,637 --> 00:12:02,180
ami lehetővé tette számunkra, hogy mozgóátlagként, és így elmosódásként értelmezzük.

211
00:12:03,640 --> 00:12:06,753
Mindent egybevetve, ez a kis folyamat alapvetően azt érzékeli, 

212
00:12:06,753 --> 00:12:10,114
hogy hol van változás a pixelértékben, ahogy balról jobbra haladsz, 

213
00:12:10,114 --> 00:12:13,920
és így egyfajta módot ad arra, hogy a képed összes függőleges szélét kiszűrd.

214
00:12:16,500 --> 00:12:19,463
És hasonlóképpen, ha elforgatnánk a rácsot úgy, 

215
00:12:19,463 --> 00:12:23,907
hogy a felülről lefelé haladva változzon, akkor ez az összes vízszintes 

216
00:12:23,907 --> 00:12:29,340
széleket felvenné, ami a mi kis pite lényünk esetében elég démoni szemeket eredményezne.

217
00:12:30,400 --> 00:12:33,568
Ezt a kisebb rácsot egyébként gyakran nevezik kernelnek, és a szépség itt az, 

218
00:12:33,568 --> 00:12:36,899
hogy pusztán egy másik kernel kiválasztásával különböző képfeldolgozási hatásokat 

219
00:12:36,899 --> 00:12:40,149
érhetsz el, nem csak az élek felismerésének elmosását, hanem olyan dolgokat is, 

220
00:12:40,149 --> 00:12:40,840
mint az élesítés.

221
00:12:40,840 --> 00:12:44,001
Azoknak, akik már hallottak a konvolúciós neurális hálózatról, 

222
00:12:44,001 --> 00:12:46,912
az ötlet lényege, hogy az adatok segítségével kitaláljuk, 

223
00:12:46,912 --> 00:12:50,175
hogy a neurális hálózat által felderítendő dolgok alapján milyen 

224
00:12:50,175 --> 00:12:51,480
kerneleket kell használni.

225
00:12:52,760 --> 00:12:55,520
Egy másik dolog, amit talán fel kellene hoznom, az a kimenet hossza.

226
00:12:55,820 --> 00:12:59,712
Az olyan esetekben, mint a mozgóátlag példa, csak akkor érdemes a feltételekre gondolni, 

227
00:12:59,712 --> 00:13:01,900
amikor mindkét ablak teljesen egybeesik egymással.

228
00:13:02,120 --> 00:13:04,749
Vagy a képfeldolgozási példában, talán azt szeretné, 

229
00:13:04,749 --> 00:13:07,280
ha a végső kimenet mérete megegyezne az eredetivel.

230
00:13:07,280 --> 00:13:09,481
A konvolúció, mint tiszta matematikai művelet, 

231
00:13:09,481 --> 00:13:12,666
mindig egy olyan tömböt eredményez, amely nagyobb, mint a két tömb, 

232
00:13:12,666 --> 00:13:16,180
amivel kezdted, legalábbis feltételezve, hogy az egyiknek nem egy a hossza.

233
00:13:16,720 --> 00:13:18,951
Csak azt kell tudni, hogy bizonyos számítástechnikai 

234
00:13:18,951 --> 00:13:21,520
kontextusokban gyakran szándékosan le kell vágni a kimenetet.

235
00:13:24,720 --> 00:13:28,328
Egy másik dolog, amit érdemes kiemelni, hogy a számítástechnikai kontextusban 

236
00:13:28,328 --> 00:13:32,492
ez a gondolat, hogy megfordítjuk a kernelt, mielőtt hagyjuk, hogy átvonuljon az eredetin, 

237
00:13:32,492 --> 00:13:35,916
gyakran nagyon furcsának és szükségtelennek tűnik, de ismét megjegyezzük, 

238
00:13:35,916 --> 00:13:39,108
hogy ez az, amit a tiszta matematikai kontextusból örököltünk, ahol, 

239
00:13:39,108 --> 00:13:42,440
ahogy a valószínűségeknél láttuk, ez egy hihetetlenül természetes dolog.

240
00:13:43,020 --> 00:13:45,773
És tulajdonképpen még egy tiszta matematikai példát tudok mutatni, 

241
00:13:45,773 --> 00:13:48,156
ahol még a programozóknak is érdemes foglalkozniuk ezzel, 

242
00:13:48,156 --> 00:13:50,869
mert ez megnyitja a kapukat egy sokkal gyorsabb algoritmus előtt, 

243
00:13:50,869 --> 00:13:52,020
amely mindezeket kiszámítja.

244
00:13:52,620 --> 00:13:55,874
Ahhoz, hogy felállítsuk, mit értek itt gyorsabb alatt, hadd menjek vissza, 

245
00:13:55,874 --> 00:13:59,780
és vegyek elő újra egy kis Pythont, és hozzak létre két különböző, viszonylag nagy tömböt.

246
00:13:59,940 --> 00:14:02,752
Mindegyikben százezer véletlenszerű elem lesz, 

247
00:14:02,752 --> 00:14:07,540
és a NumPy könyvtárból származó convolve függvény futási idejét fogom értékelni.

248
00:14:08,180 --> 00:14:11,276
Ebben az esetben több különböző iteráción keresztül futtatja, 

249
00:14:11,276 --> 00:14:15,471
megpróbál egy átlagot találni, és úgy tűnik, hogy legalábbis ezen a számítógépen az 

250
00:14:15,471 --> 00:14:16,520
átlag 4,87 másodperc.

251
00:14:16,960 --> 00:14:21,400
Ezzel szemben, ha a SciPy könyvtár fftConvolve nevű függvényét használom, 

252
00:14:21,400 --> 00:14:24,520
ami ugyanaz a dolog, csak másképp van megvalósítva, 

253
00:14:24,520 --> 00:14:28,060
akkor ez átlagosan csak 4,3 milliszekundumot vesz igénybe, 

254
00:14:28,060 --> 00:14:30,160
tehát három nagyságrendnyi javulás.

255
00:14:30,160 --> 00:14:34,389
És ismétlem, bár más néven fut, ugyanazt a kimenetet adja, 

256
00:14:34,389 --> 00:14:39,120
mint a másik convolve függvény, csak valamivel okosabban csinálja.

257
00:14:42,200 --> 00:14:44,855
Emlékezzünk, hogy a valószínűségi példánál azt mondtam, 

258
00:14:44,855 --> 00:14:48,080
hogy a konvolúcióról úgy is gondolkodhatunk, hogy létrehozzuk ezt a 

259
00:14:48,080 --> 00:14:51,399
táblázatot az összes páros szorzatról, majd összeadjuk ezeket a páros 

260
00:14:51,399 --> 00:14:52,680
szorzatokat az átló mentén.

261
00:14:53,660 --> 00:14:55,500
A valószínűséggel kapcsolatban természetesen nincs semmi konkrétum.

262
00:14:55,660 --> 00:14:59,040
Bármikor, amikor két különböző számlistát összevonunk, gondolkodhatunk így.

263
00:14:59,040 --> 00:15:02,595
Hozzon létre egy ilyen szorzótáblát az összes páronkénti szorzattal, 

264
00:15:02,595 --> 00:15:06,460
majd az átló mentén minden egyes összeg megfelel az egyik végső kimenetnek.

265
00:15:07,600 --> 00:15:10,850
Egy olyan kontextus, ahol ez a nézet különösen természetes, 

266
00:15:10,850 --> 00:15:12,800
amikor két polinomot szorzunk össze.

267
00:15:13,300 --> 00:15:18,972
Vegyük például a már meglévő kis rácsot, és cseréljük ki a felső tagokat 1, 

268
00:15:18,972 --> 00:15:23,600
2x és 3x négyzetre, a többi tagot pedig 4, 5x és 6x négyzetre.

269
00:15:24,000 --> 00:15:26,484
Most gondoljuk végig, hogy mit jelent, amikor létrehozzuk 

270
00:15:26,484 --> 00:15:28,840
ezeket a különböző páros termékeket a két lista között.

271
00:15:29,040 --> 00:15:34,562
Amit te csinálsz, az lényegében a két polinom teljes szorzatának kibontása, amit leírtam, 

272
00:15:34,562 --> 00:15:39,900
és amikor az átló mentén összeadsz, az megfelel az összes hasonló tag összegyűjtésének.

273
00:15:40,600 --> 00:15:41,500
Ami nagyon szép.

274
00:15:41,740 --> 00:15:45,610
Egy polinom kibontása és a hasonló tagok összegyűjtése pontosan ugyanaz a folyamat, 

275
00:15:45,610 --> 00:15:46,440
mint a konvolúció.

276
00:15:47,740 --> 00:15:49,884
De ez lehetővé teszi számunkra, hogy olyasmit tegyünk, 

277
00:15:49,884 --> 00:15:52,340
ami nagyon király, mert gondoljatok bele, hogy mit mondunk itt.

278
00:15:52,340 --> 00:15:56,936
Azt mondjuk, hogy ha veszünk két különböző függvényt, és összeszorozzuk őket, 

279
00:15:56,936 --> 00:15:59,765
ami egy egyszerű pontszerű művelet, az ugyanaz, 

280
00:15:59,765 --> 00:16:04,184
mintha először kivettük volna az együtthatókat mindegyikből, feltételezve, 

281
00:16:04,184 --> 00:16:08,840
hogy polinomok, és aztán a két együtthatólista konvolúcióját végeztük volna el.

282
00:16:09,620 --> 00:16:14,067
Ezt az teszi olyan érdekessé, hogy a konvolúció elvileg sokkal bonyolultabbnak tűnik, 

283
00:16:14,067 --> 00:16:15,360
mint az egyszerű szorzás.

284
00:16:15,820 --> 00:16:18,460
És nem csak fogalmilag értem, hogy nehezebb rájuk gondolni.

285
00:16:18,840 --> 00:16:23,435
Úgy értem, hogy számítási szempontból több lépést igényel egy konvolúció végrehajtása, 

286
00:16:23,435 --> 00:16:25,760
mint két különböző lista pontszerű szorzata.

287
00:16:26,320 --> 00:16:29,211
Tegyük fel például, hogy adok két nagyon nagy polinomot, 

288
00:16:29,211 --> 00:16:31,900
mondjuk mindkettőnek száz különböző együtthatója van.

289
00:16:32,740 --> 00:16:37,198
Aztán ha úgy szoroznád meg őket, hogy ezt a terméket kiterjesztenéd, tudod, 

290
00:16:37,198 --> 00:16:40,248
kitöltve a páros termékek teljes 100x100-as rácsát, 

291
00:16:40,248 --> 00:16:43,240
akkor 10 000 különböző terméket kellene elvégezned.

292
00:16:43,740 --> 00:16:46,872
És ha összegyűjtjük az összes hasonló kifejezést az átló mentén, 

293
00:16:46,872 --> 00:16:49,860
akkor ez egy újabb, körülbelül 10 000 műveletből álló sorozat.

294
00:16:50,700 --> 00:16:53,379
Általánosabban, a szakzsargonban azt mondanánk, 

295
00:16:53,379 --> 00:16:56,282
hogy az algoritmus O of n négyzet, ami azt jelenti, 

296
00:16:56,282 --> 00:17:01,140
hogy két n méretű lista esetén a műveletek száma az n négyzetével arányosan skálázódik.

297
00:17:01,820 --> 00:17:05,395
Másrészt, ha két polinomra a kimeneteik szempontjából gondolok, 

298
00:17:05,395 --> 00:17:09,027
például néhány maréknyi bemenetnél mintavételezem az értékeiket, 

299
00:17:09,027 --> 00:17:12,938
akkor a szorzásuk csak annyi műveletet igényel, ahány mintavétel van, 

300
00:17:12,938 --> 00:17:15,619
hiszen megint csak pontszerű műveletről van szó.

301
00:17:16,180 --> 00:17:18,848
A polinomok esetében pedig csak véges számú mintára van szükség ahhoz, 

302
00:17:18,848 --> 00:17:20,540
hogy az együtthatókat vissza lehessen nyerni.

303
00:17:20,540 --> 00:17:24,849
Például két kimenet elegendő egy lineáris polinom egyértelmű meghatározásához, 

304
00:17:24,849 --> 00:17:28,994
három kimenet elegendő egy kvadratikus polinom egyértelmű meghatározásához, 

305
00:17:28,994 --> 00:17:31,667
és általában, ha n különböző kimenetet ismerünk, 

306
00:17:31,667 --> 00:17:34,667
az elég egy olyan polinom egyértelmű meghatározásához, 

307
00:17:34,667 --> 00:17:36,740
amelynek n különböző együtthatója van.

308
00:17:37,440 --> 00:17:40,720
Vagy ha úgy tetszik, akkor ezt az egyenletrendszerek nyelvén is megfogalmazhatjuk.

309
00:17:41,200 --> 00:17:43,444
Képzeld el, hogy elmondom neked, hogy van egy polinom, 

310
00:17:43,444 --> 00:17:45,200
de nem mondom meg, hogy mik az együtthatói.

311
00:17:45,260 --> 00:17:46,520
Azok rejtélyesek számodra.

312
00:17:46,700 --> 00:17:50,180
Példánkban úgy gondolhatsz erre, mint a termékre, amelyet megpróbálunk kitalálni.

313
00:17:50,180 --> 00:17:52,927
És akkor tegyük fel, hogy azt mondom, hogy megmondom, 

314
00:17:52,927 --> 00:17:55,471
hogy mik lennének ennek a polinomnak a kimenetei, 

315
00:17:55,471 --> 00:17:59,643
ha különböző különböző bemeneteket adnánk meg, például 0, 1, 2, 3, és így tovább, 

316
00:17:59,643 --> 00:18:03,460
és annyit adok meg, hogy annyi egyenletünk legyen, ahány ismeretlenünk van.

317
00:18:04,140 --> 00:18:07,081
Ez történetesen egy lineáris egyenletrendszer, ami szép, 

318
00:18:07,081 --> 00:18:10,900
és elvileg legalábbis elégnek kell lennie az együtthatók visszanyeréséhez.

319
00:18:11,740 --> 00:18:16,185
Tehát a durva algoritmus vázlata az lenne, hogy amikor két számlistát akarsz konvolválni, 

320
00:18:16,185 --> 00:18:19,100
úgy kezeled őket, mintha két polinom együtthatói lennének, 

321
00:18:19,100 --> 00:18:21,915
elég sok kimeneten veszel mintát ezekből a polinomokból, 

322
00:18:21,915 --> 00:18:25,521
pontonként megszorozod ezeket a mintákat, majd megoldod ezt a rendszert, 

323
00:18:25,521 --> 00:18:29,275
hogy visszanyerd az együtthatókat, mint egy alattomos hátsó ajtós módszer a 

324
00:18:29,275 --> 00:18:30,560
konvolúció megtalálásához.

325
00:18:31,420 --> 00:18:35,727
És ahogyan eddig elmondtam, legalábbis néhányan joggal panaszkodhatnak, 

326
00:18:35,727 --> 00:18:40,214
hogy ez egy idióta terv, mert egyrészt csak az összes minta kiszámítása az 

327
00:18:40,214 --> 00:18:45,120
általunk már ismert polinomok egyikére n-négyzetes nagyságrendű műveletet igényel.

328
00:18:45,600 --> 00:18:49,016
Arról nem is beszélve, hogy ennek a rendszernek a megoldása számítási szempontból 

329
00:18:49,016 --> 00:18:52,100
biztosan ugyanolyan nehéz lesz, mintha csak a konvolúciót végeznénk eleve.

330
00:18:52,600 --> 00:18:56,107
Szóval, persze, van ez a kapcsolat a szorzás és a konvolúció között, 

331
00:18:56,107 --> 00:19:00,480
de az egész komplexitás az egyik nézőpontból a másikba való átfordítás során történik.

332
00:19:01,600 --> 00:19:04,861
De van egy trükk, és azok, akik ismerik a Fourier-transzformációkat 

333
00:19:04,861 --> 00:19:07,740
és az FFT algoritmust, talán értik, hová akarunk kilyukadni.

334
00:19:07,740 --> 00:19:10,881
Ha nem ismeri ezeket a témákat, akkor lehet, hogy amit most mondani fogok, 

335
00:19:10,881 --> 00:19:12,180
teljesen váratlannak fog tűnni.

336
00:19:12,260 --> 00:19:15,609
Csak tudd, hogy vannak bizonyos utak, amelyeket a matematikában bejárhattál volna, 

337
00:19:15,609 --> 00:19:16,860
így ez inkább egy elvárt lépés.

338
00:19:17,720 --> 00:19:20,360
Alapvetően az az elképzelés, hogy itt a választás szabadsága érvényesül.

339
00:19:20,540 --> 00:19:24,562
Ha ahelyett, hogy a bemenetek egy tetszőleges halmazán, például 0, 1, 2, 3, stb. 

340
00:19:24,562 --> 00:19:28,734
értékelnénk, úgy döntünk, hogy a komplex számok egy nagyon speciálisan kiválasztott 

341
00:19:28,734 --> 00:19:32,658
halmazán értékelünk, különösen azokon, amelyek egyenletesen helyezkednek el az 

342
00:19:32,658 --> 00:19:36,880
egységkörön, az úgynevezett egységgyökökön, akkor egy barátságosabb rendszert kapunk.

343
00:19:38,360 --> 00:19:40,878
Az alapgondolat az, hogy ha olyan számot találunk, 

344
00:19:40,878 --> 00:19:44,385
amelynek a hatványai ebbe a ciklikus mintázatba esnek, az azt jelenti, 

345
00:19:44,385 --> 00:19:48,681
hogy az általunk generált rendszerben sok redundancia lesz a különböző kifejezésekben, 

346
00:19:48,681 --> 00:19:52,583
amelyeket kiszámítunk, és azzal, hogy ügyesen kihasználjuk ezt a redundanciát, 

347
00:19:52,583 --> 00:19:54,460
sok munkát spórolhatunk meg magunknak.

348
00:19:56,020 --> 00:19:58,560
Az általam írt kimeneteknek különleges neve van.

349
00:19:58,900 --> 00:20:02,309
Ezt az együtthatók diszkrét Fourier-transzformációjának hívják, 

350
00:20:02,309 --> 00:20:06,731
és ha többet szeretnél megtudni, akkor egy másik előadást is tartottam ugyanezen a 

351
00:20:06,731 --> 00:20:09,608
Julia MIT órán a diszkrét Fourier-transzformációkról, 

352
00:20:09,608 --> 00:20:12,271
és van egy nagyon jó videó a Reducible csatornán, 

353
00:20:12,271 --> 00:20:16,374
ami a gyors Fourier-transzformációról szól, ami egy algoritmus ezek gyorsabb 

354
00:20:16,374 --> 00:20:17,120
kiszámítására.

355
00:20:17,480 --> 00:20:20,631
A Veritasium is készített nemrég egy nagyon jó videót az FFT-kről, 

356
00:20:20,631 --> 00:20:21,760
így sok lehetőséged van.

357
00:20:22,260 --> 00:20:24,660
És ez a gyors algoritmus a lényeg számunkra.

358
00:20:25,120 --> 00:20:28,603
Ismétlem, a redundancia miatt létezik egy módszer az együtthatókból az 

359
00:20:28,603 --> 00:20:31,252
összes ilyen kimenetre való átmenetre, ahol ahelyett, 

360
00:20:31,252 --> 00:20:33,999
hogy az n négyzetes műveletek nagyságrendjét végeznénk, 

361
00:20:33,999 --> 00:20:37,728
az n-szer n logaritmusú műveletek nagyságrendjét végezzük, ami sokkal jobb, 

362
00:20:37,728 --> 00:20:39,200
ahogy nagy listákra skálázunk.

363
00:20:39,660 --> 00:20:42,540
És ami fontos, ez az FFT algoritmus mindkét irányba működik.

364
00:20:42,700 --> 00:20:45,480
A kimenetekből az együtthatókra is át lehet lépni.

365
00:20:46,220 --> 00:20:49,060
Tehát, ha mindezt összefoglaltuk, nézzük vissza az algoritmus vázlatát.

366
00:20:49,420 --> 00:20:52,790
Most azt mondhatjuk, hogy amikor két hosszú számlistát kapunk, 

367
00:20:52,790 --> 00:20:57,070
és a konvolúciójukat akarjuk megadni, először számítsuk ki mindegyiknek a gyors 

368
00:20:57,070 --> 00:20:59,959
Fourier-transzformációját, amire gondolhatunk úgy is, 

369
00:20:59,959 --> 00:21:02,741
mintha egy polinom együtthatójaként kezelnénk őket, 

370
00:21:02,741 --> 00:21:06,380
és egy nagyon speciálisan kiválasztott pontkészletben kiértékelnénk.

371
00:21:06,900 --> 00:21:10,713
Ezután szorozzuk össze a két eredményt, amit az imént kaptunk, pontonként, 

372
00:21:10,713 --> 00:21:14,577
ami szép és gyors, majd végezzünk egy inverz gyors Fourier-transzformációt, 

373
00:21:14,577 --> 00:21:18,900
és ez adja meg a sunyi hátsó ajtó módját a konvolúció kiszámításának, amit kerestünk.

374
00:21:19,040 --> 00:21:22,240
De ezúttal csak O n log n műveletet igényel.

375
00:21:23,140 --> 00:21:24,740
Ez nagyon király számomra.

376
00:21:25,120 --> 00:21:29,534
Ez a nagyon speciális konvolúciós kontextus - két polinom szorzása - megnyitja az ajtót 

377
00:21:29,534 --> 00:21:33,648
egy olyan algoritmus előtt, amely mindenhol máshol, ahol konvolúció előfordulhat, 

378
00:21:33,648 --> 00:21:34,100
releváns.

379
00:21:34,180 --> 00:21:38,113
Ha valószínűségi eloszlásokat akarsz hozzáadni, nagyméretű képfeldolgozást végezni, 

380
00:21:38,113 --> 00:21:41,017
bármi is legyen az, és szerintem ez egy nagyon jó példa arra, 

381
00:21:41,017 --> 00:21:44,389
hogy miért kell izgatottnak lenned, amikor egy matematikai művelet vagy 

382
00:21:44,389 --> 00:21:47,480
koncepció látszólag egymástól független területeken is megjelenik.

383
00:21:48,480 --> 00:21:51,500
Ha szeretnél egy kis házi feladatot, itt van valami, amin jó elgondolkodni.

384
00:21:51,720 --> 00:21:54,885
Magyarázd el, hogy amikor két különböző számot szorzolsz, 

385
00:21:54,885 --> 00:21:58,487
a szokásos szorzást, ahogyan azt az általános iskolában tanultuk, 

386
00:21:58,487 --> 00:22:01,980
akkor alapvetően a számok számjegyei közötti konvolúciót végzed.

387
00:22:02,500 --> 00:22:06,460
Van néhány további lépés a hordozással és hasonlókkal, de az alapvető lépés a konvolúció.

388
00:22:07,280 --> 00:22:10,176
A gyors algoritmus létezésének fényében ez azt jelenti, 

389
00:22:10,176 --> 00:22:14,522
hogy ha van két nagyon nagy egész szám, akkor létezik egy olyan módszer a szorzatuk 

390
00:22:14,522 --> 00:22:18,401
megtalálására, amely gyorsabb, mint az általános iskolában tanult módszer, 

391
00:22:18,401 --> 00:22:22,643
amely ahelyett, hogy O n négyzetes műveletet igényelne, csak O n log n-t igényel, 

392
00:22:22,643 --> 00:22:24,920
ami nem is tűnik úgy, hogy lehetséges lenne.

393
00:22:25,380 --> 00:22:28,757
A bökkenő az, hogy ahhoz, hogy ez a gyakorlatban valóban hasznos legyen, 

394
00:22:28,757 --> 00:22:30,840
a számoknak abszolút szörnyűnek kell lenniük.

395
00:22:31,220 --> 00:22:33,860
De ettől függetlenül nagyon jó, hogy létezik ilyen algoritmus.

396
00:22:35,160 --> 00:22:37,714
A következőkben pedig a folytonos esetre fordítjuk figyelmünket, 

397
00:22:37,714 --> 00:22:39,640
különös tekintettel a valószínűségi eloszlásokra.

