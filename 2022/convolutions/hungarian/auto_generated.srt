1
00:00:00,000 --> 00:00:02,547
Tegyük fel, hogy adok neked két különböző számlistát, 

2
00:00:02,547 --> 00:00:05,801
vagy esetleg két különböző függvényt, és arra kérlek, gondold végig, 

3
00:00:05,801 --> 00:00:08,820
hogyan kombinálhatod ezt a két listát, hogy új számlistát kapj, 

4
00:00:08,820 --> 00:00:11,320
vagy a két függvény kombinálásával új függvényt kapj.

5
00:00:12,120 --> 00:00:16,760
Talán az egyik egyszerű módszer, ami eszünkbe jut, az, hogy szóról szóra összeadjuk őket.

6
00:00:17,160 --> 00:00:19,920
Hasonlóan a függvényekhez, hozzáadhatja az összes megfelelő kimenetet.

7
00:00:20,540 --> 00:00:23,766
Hasonló módon megszorozhatja a két listát kifejezésenként, 

8
00:00:23,766 --> 00:00:25,680
és ugyanezt teheti a függvényekkel.

9
00:00:26,360 --> 00:00:29,765
De van egy másik fajta kombináció, amely ugyanolyan alapvető, 

10
00:00:29,765 --> 00:00:33,500
mint a kettő, de sokkal ritkábban tárgyalják, konvolúcióként ismert.

11
00:00:34,080 --> 00:00:37,107
De az előző két esettől eltérően ez nem pusztán 

12
00:00:37,107 --> 00:00:39,820
egy számokkal végzett műveletből öröklődik.

13
00:00:39,980 --> 00:00:44,700
Ez valami igazán új a számlisták vagy a függvények kombinálása szempontjából.

14
00:00:45,320 --> 00:00:49,036
Mindenhol megjelennek, mindenütt jelen vannak a képfeldolgozásban, 

15
00:00:49,036 --> 00:00:51,753
ez a valószínűségelmélet alapvető konstrukciója, 

16
00:00:51,753 --> 00:00:56,080
sokat használják differenciálegyenletek megoldásában, és egy olyan kontextus, 

17
00:00:56,080 --> 00:01:00,240
ahol szinte biztosan láttad, ha nem ezen a néven két polinomot összeszoroz.

18
00:01:00,740 --> 00:01:05,005
A vizuális magyarázatokkal foglalkozó emberként ez egy különösen jó téma, 

19
00:01:05,005 --> 00:01:09,847
mert a képletes definíció elszigetelten és kontextus nélkül megfélemlítőnek tűnhet, 

20
00:01:09,847 --> 00:01:14,631
de ha szánunk időt arra, hogy valóban kibontsuk, amit mond, és előtte megindítjuk, 

21
00:01:14,631 --> 00:01:18,320
hogy miért. valami ilyesmit szeretne, hihetetlenül szép művelet.

22
00:01:18,960 --> 00:01:21,498
És be kell vallanom, tanultam egy kicsit, miközben 

23
00:01:21,498 --> 00:01:23,540
összeállítottam a projekt látványvilágát.

24
00:01:23,540 --> 00:01:28,123
Két különböző függvény összevonása esetén különböző módokon próbáltam elképzelni, 

25
00:01:28,123 --> 00:01:31,868
hogy ez mit jelenthet, és az egyiknél volt egy kis aha pillanatom, 

26
00:01:31,868 --> 00:01:35,613
hogy miért játsszák a normál eloszlások azt a szerepet, valószínű, 

27
00:01:35,613 --> 00:01:38,520
hogy miért olyan természetes alakja egy függvénynek.

28
00:01:39,020 --> 00:01:41,520
De előre haladok, nagyon sok beállítás van ehhez.

29
00:01:41,840 --> 00:01:45,498
Ebben a videóban elsősorban a diszkrét esetre összpontosítunk, 

30
00:01:45,498 --> 00:01:50,260
és különösen egy nagyon váratlan, de nagyon okos algoritmusra ezek kiszámításához.

31
00:01:50,260 --> 00:01:54,480
A folyamatos eset vitáját pedig kihúzom egy második részbe.

32
00:01:58,580 --> 00:02:01,030
Nagyon csábító a képfeldolgozási példákkal nyitni, 

33
00:02:01,030 --> 00:02:04,105
mivel vizuálisan ezek a legérdekesebbek, de van néhány apróság, 

34
00:02:04,105 --> 00:02:08,238
ami miatt a képfeldolgozási eset kevésbé reprezentálja a konvolúciókat összességében, 

35
00:02:08,238 --> 00:02:10,592
ezért inkább kezdjük a dolgokat valószínűséggel, 

36
00:02:10,592 --> 00:02:14,052
és különösen az egyik legegyszerűbb példa, amelyre biztos vagyok benne, 

37
00:02:14,052 --> 00:02:17,127
hogy itt mindenki elgondolkodott az élete egy bizonyos pontján, 

38
00:02:17,127 --> 00:02:20,971
ami egy pár kockával dobott, és a különböző összegek megtekintésének esélyeinek 

39
00:02:20,971 --> 00:02:21,500
kitalálása.

40
00:02:22,460 --> 00:02:24,460
És mondhatod, nem probléma, nem probléma.

41
00:02:24,680 --> 00:02:27,934
Mind a két kockádnak hat különböző lehetséges kimenetele van, 

42
00:02:27,934 --> 00:02:30,821
ami összesen 36 különböző lehetséges kimenetelpárt ad, 

43
00:02:30,821 --> 00:02:33,812
és ha csak végignézzük az összeset, meg tudjuk számolni, 

44
00:02:33,812 --> 00:02:35,860
hogy hány párnak van egy adott összege.

45
00:02:36,600 --> 00:02:41,019
És az összes párt így egy rácsba rendezve, egy nagyon szép dolog az, 

46
00:02:41,019 --> 00:02:45,440
hogy az összes állandó összegű pár látható a különböző átlók egyikén.

47
00:02:45,440 --> 00:02:48,780
Tehát egyszerűen csak megszámolja, hány van az egyes átlókon, 

48
00:02:48,780 --> 00:02:52,120
megmutatja, mekkora valószínűséggel lát egy bizonyos összeget.

49
00:02:53,220 --> 00:02:58,660
És azt mondanám, nagyon jó, nagyon jó, de tud más módon elképzelni ugyanezt a kérdést?

50
00:02:59,300 --> 00:03:02,805
Egyéb képek, amelyek eszünkbe juthatnak, ha az összes különálló párra gondolunk, 

51
00:03:02,805 --> 00:03:04,060
amelyeknek adott összege van?

52
00:03:04,860 --> 00:03:07,980
És lehet, hogy egyikőtök felemeli a kezét, és azt mondja: igen, van egy.

53
00:03:08,280 --> 00:03:12,265
Tegyük fel, hogy ezt a két különböző lehetőségkészletet egymás után képzeli el, 

54
00:03:12,265 --> 00:03:13,760
de megfordítja a második sort.

55
00:03:13,760 --> 00:03:18,760
Így az összes különböző pár, amely összesen hét, így függőlegesen sorakozik.

56
00:03:19,360 --> 00:03:23,139
És ha ezt az alsó sort egészen jobbra csúsztatjuk, akkor az egyedülálló pár, 

57
00:03:23,139 --> 00:03:26,280
amely kettőt ad, a kígyószemek az egyetlenek, amelyek igazodnak.

58
00:03:26,620 --> 00:03:29,350
És ha ezt egy egységnél jobbra csúsztatom, akkor az egymáshoz 

59
00:03:29,350 --> 00:03:32,080
igazodó párok a két különböző pár, amelyek összeadódnak három.

60
00:03:32,880 --> 00:03:36,336
Általánosságban elmondható, hogy ennek az alsó tömbnek a különböző eltolási értékei, 

61
00:03:36,336 --> 00:03:38,857
amelyek emlékeznek arra, hogy először meg kellett fordítanom, 

62
00:03:38,857 --> 00:03:41,460
felfedik az összes különálló párt, amelyeknek adott összege van.

63
00:03:44,820 --> 00:03:49,080
Ami a valószínűségi kérdéseket illeti, ez még mindig nem különösebben érdekes, 

64
00:03:49,080 --> 00:03:52,640
mert csak azt számoljuk, hány eredmény van az egyes kategóriákban.

65
00:03:52,980 --> 00:03:55,470
De ez azzal a burkolt feltételezéssel van így, 

66
00:03:55,470 --> 00:03:58,120
hogy minden arcnak egyenlő esélye van felbukkanni.

67
00:03:58,360 --> 00:04:01,620
De mi lenne, ha azt mondanám, hogy van egy speciális kockakészletem, ami nem egységes?

68
00:04:02,060 --> 00:04:04,568
Lehet, hogy a kék kocka saját számkészlettel rendelkezik, 

69
00:04:04,568 --> 00:04:07,164
amely leírja az egyes arcok felbukkanásának valószínűségét, 

70
00:04:07,164 --> 00:04:09,760
a piros kocka pedig saját egyedi számkészlettel rendelkezik.

71
00:04:10,299 --> 00:04:12,489
Ebben az esetben, ha például azt akarná kitalálni, 

72
00:04:12,489 --> 00:04:16,139
hogy mekkora valószínűséggel lát egy kettőt, akkor megszorozná annak valószínűségét, 

73
00:04:16,139 --> 00:04:19,360
hogy a kék kocka 1-szerese annak a valószínűségnek, hogy a piros kocka egy.

74
00:04:19,360 --> 00:04:22,023
És annak esélye érdekében, hogy hármast lásson, 

75
00:04:22,023 --> 00:04:24,908
nézze meg a két különálló párt, ahol ez lehetséges, 

76
00:04:24,908 --> 00:04:29,680
és ismét megszorozza a megfelelő valószínűségeket, majd összeadja ezt a két szorzatot.

77
00:04:30,100 --> 00:04:33,138
Hasonlóképpen, annak az esélye, hogy négyet látunk, 

78
00:04:33,138 --> 00:04:36,820
három különböző lehetőségpárt össze kell szorozni és összeadni.

79
00:04:36,820 --> 00:04:42,136
Néhány képlet felállításának szellemében nevezzük el ezeket a felső valószínűségeket a1, 

80
00:04:42,136 --> 00:04:45,960
a2, a3 és így tovább, az alsókat pedig b1, b2, b3 és így tovább.

81
00:04:46,400 --> 00:04:49,870
És általában, ez a folyamat, ahol veszünk két különböző számtömböt, 

82
00:04:49,870 --> 00:04:54,105
megfordítjuk a másodikat, majd sorba rendezzük őket különböző eltolási értékekkel, 

83
00:04:54,105 --> 00:04:56,861
veszünk egy csomó páros szorzatot és összeadjuk őket, 

84
00:04:56,861 --> 00:05:00,740
ez az egyik alapvető módja annak, hogy gondolkodjunk arról, mi a konvolúció.

85
00:05:00,740 --> 00:05:03,833
Tehát, hogy egy kicsit pontosabban fogalmazzuk meg, 

86
00:05:03,833 --> 00:05:07,581
ezen a folyamaton keresztül csak valószínűségeket generáltunk, 

87
00:05:07,581 --> 00:05:11,090
hogy kettő, három, négy, 12-ig és 12-ig láthatók legyenek, 

88
00:05:11,090 --> 00:05:14,838
és ezeket úgy kaptuk meg, hogy összekevertünk egy értéklistát, 

89
00:05:14,838 --> 00:05:16,980
a-t és egy másikat. értékjegyzék, b.

90
00:05:17,440 --> 00:05:20,574
A szóhasználatban azt mondanánk, hogy ennek a két sorozatnak a 

91
00:05:20,574 --> 00:05:24,504
konvolúciója adja nekünk ezt az új sorozatot, a 11 értékből álló új sorozatot, 

92
00:05:24,504 --> 00:05:27,340
amelyek mindegyike páronkénti szorzatok összegének tűnik.

93
00:05:27,340 --> 00:05:31,463
Ha úgy tetszik, egy másik módja annak, hogy ugyanarra a műveletre gondoljon, 

94
00:05:31,463 --> 00:05:35,319
ha először hozzon létre egy táblázatot az összes páronkénti szorzatról, 

95
00:05:35,319 --> 00:05:36,980
majd összeadja az összes átlót.

96
00:05:37,460 --> 00:05:40,515
Ez egy módja annak, hogy összekeverjük ezt a két számsorozatot, 

97
00:05:40,515 --> 00:05:42,760
hogy egy új, 11 számból álló sorozatot kapjunk.

98
00:05:43,240 --> 00:05:46,460
Ez ugyanaz a művelet, mint a tolóablakok gondolták, csak egy másik perspektíva.

99
00:05:47,140 --> 00:05:49,800
Egy kis jelöléssel a következőképpen láthatod leírva.

100
00:05:50,220 --> 00:05:55,120
Az a és b konvolúciója, amelyet ezzel a kis csillaggal jelölünk, egy új lista, 

101
00:05:55,120 --> 00:05:58,036
és ennek a lista n-edik eleme összegnek tűnik, 

102
00:05:58,036 --> 00:06:02,502
és ez az összeg átmegy az összes különböző indexpáron, az i-n és a j-n, 

103
00:06:02,502 --> 00:06:04,860
így az ezek az indexek egyenlők n-nel.

104
00:06:05,280 --> 00:06:10,734
Ez amolyan falat, de például ha n 6, akkor a párok, amelyeken átmegyünk, az 1 és 5, 

105
00:06:10,734 --> 00:06:15,800
2 és 4, 3 és 3, 4 és 2, 5 és 1, a különböző párok, amelyek összeadódnak. 6-ra.

106
00:06:16,620 --> 00:06:20,745
De őszintén szólva, bárhogyan írja is le, a jelölés másodlagos fontosságú ahhoz képest, 

107
00:06:20,745 --> 00:06:22,340
amit a folyamathoz a fejében tart.

108
00:06:23,280 --> 00:06:26,862
Itt talán segít egy szuper egyszerű példa, ahol megkérdezhetem, 

109
00:06:26,862 --> 00:06:30,780
mi a konvolúciója az 1. , 2. , 3. listának és a 4. , 5. , 6. listának.

110
00:06:31,480 --> 00:06:35,515
Elképzelheti, hogy mindkét listát felveszi, megfordítja a másodikat, 

111
00:06:35,515 --> 00:06:37,680
majd a fedelével kezdi egészen balra.

112
00:06:38,180 --> 00:06:41,629
Ezután az egymáshoz igazodó értékpár 1 és 4, szorozzuk meg őket, 

113
00:06:41,629 --> 00:06:43,540
és ez adja a kimenetünk első tagját.

114
00:06:43,960 --> 00:06:48,295
Csúsztassa az alsó tömböt egy egységgel jobbra, az egymáshoz igazodó párok 1 és 5, 

115
00:06:48,295 --> 00:06:51,325
valamint 2 és 4, szorozd meg ezeket a párokat, add össze, 

116
00:06:51,325 --> 00:06:54,460
és így 13-at kapunk, a következő bejegyzést a kimenetünkben.

117
00:06:54,960 --> 00:06:57,930
Csúsztassa át a dolgokat még egyszer, és 1-szer 6-ot, 

118
00:06:57,930 --> 00:07:01,560
plusz 2-szer 5-öt, plusz 3-szor 4-et veszünk, ami történetesen 28.

119
00:07:02,020 --> 00:07:05,612
Még egy dia, és 2-szer 6-ot kapunk, plusz 3-szor 5-öt, 

120
00:07:05,612 --> 00:07:10,120
és így 27-et kapunk, és végül az utolsó tag 3-szor 6-nak fog kinézni.

121
00:07:10,660 --> 00:07:14,575
Ha szeretné, előhívhatja a kedvenc programozási nyelvét, és kedvenc könyvtárát, 

122
00:07:14,575 --> 00:07:18,980
amely különféle numerikus műveleteket tartalmaz, és megerősítheti, hogy nem hazudok neked.

123
00:07:18,980 --> 00:07:24,480
Ha az 1, 2, 3 és 4, 5, 6 konvolúcióját felveszi, akkor valóban ezt az eredményt kapja.

124
00:07:25,920 --> 00:07:29,415
Láttunk egy olyan esetet, amikor ez természetes és kívánatos művelet, 

125
00:07:29,415 --> 00:07:33,660
a valószínűségi eloszlások összeadásával, egy másik gyakori példa pedig a mozgóátlag.

126
00:07:34,080 --> 00:07:38,365
Képzeld el, hogy van egy hosszú számlistád, és veszel egy másik kisebb számlistát, 

127
00:07:38,365 --> 00:07:39,760
amelyek mindegyike 1-et ad.

128
00:07:40,100 --> 00:07:44,060
Ebben az esetben csak van egy kis listám 5 értékből, és mindegyik egyenlő 15-tel.

129
00:07:44,060 --> 00:07:47,102
Aztán ha végrehajtjuk ezt a csúszóablak-konvolúciós folyamatot, 

130
00:07:47,102 --> 00:07:50,239
és valahogy becsukjuk a szemünket, és a szőnyeg alá söpörjük azt, 

131
00:07:50,239 --> 00:07:53,899
ami a legelején történik, ha a kisebb értéklistánk teljesen átfedésben van a 

132
00:07:53,899 --> 00:07:57,131
nagyobb értékkel, akkor gondoljuk át, hogy mi az egyes kifejezések. 

133
00:07:57,131 --> 00:07:58,700
a konvolúció valóban azt jelenti.

134
00:07:59,400 --> 00:08:04,223
Minden iterációnál megszorozod az adataidból származó értékeket 15-tel, 

135
00:08:04,223 --> 00:08:09,515
és összeadod az összeset, ami azt jelenti, hogy ebben a kis ablakban az adatok 

136
00:08:09,515 --> 00:08:10,520
átlagát veszed.

137
00:08:11,100 --> 00:08:15,335
Összességében a folyamat az eredeti adatok kiegyenlített változatát adja meg, 

138
00:08:15,335 --> 00:08:18,321
és ezt módosíthatja egy másik kis számlistával kezdve, 

139
00:08:18,321 --> 00:08:22,720
és amíg ez a kis lista összesen 1-et tesz ki, akkor is értelmezheti mozgóképként.

140
00:08:23,400 --> 00:08:25,891
átlagos. Az itt bemutatott példában ez a mozgóátlag 

141
00:08:25,891 --> 00:08:27,760
nagyobb súlyt adna a központi értéknek.

142
00:08:28,420 --> 00:08:30,800
Ez egyben az adatok kisimított változatát is eredményezi.

143
00:08:33,140 --> 00:08:35,609
Ha ennek egyfajta kétdimenziós analógját készíti, 

144
00:08:35,609 --> 00:08:38,720
akkor egy szórakoztató algoritmust ad egy adott kép elmosására.

145
00:08:38,720 --> 00:08:41,548
És azt kell mondanom, hogy az animációk, amelyeket most mutatok, 

146
00:08:41,548 --> 00:08:45,378
olyan módosítások, amelyeket eredetileg egy olyan előadássorozat részeként készítettem, 

147
00:08:45,378 --> 00:08:49,252
amelyet a Julia Laborral tartottam az MIT-n egy bizonyos OpenCourseWare osztály számára, 

148
00:08:49,252 --> 00:08:51,080
amely képfeldolgozó egységet tartalmazott.

149
00:08:51,560 --> 00:08:54,669
Ott egy kicsit többet tettünk, hogy belemerüljünk az egész mögött meghúzódó kódba, 

150
00:08:54,669 --> 00:08:56,280
így ha kíváncsi vagy, hagyok néhány linket.

151
00:08:56,620 --> 00:08:59,839
De visszagondolva erre az elmosódó példára, az történik, 

152
00:08:59,839 --> 00:09:04,075
hogy megvan ez a kis 3x3-as értékrács, ami az eredeti képünk mentén halad, 

153
00:09:04,075 --> 00:09:07,859
és ha nagyítunk, ezek az értékek mindegyike 19. , és mit csinálok. 

154
00:09:07,859 --> 00:09:12,151
minden iterációnál az értékek mindegyikét megszorozza a megfelelő pixellel, 

155
00:09:12,151 --> 00:09:13,620
amelyik tetején található.

156
00:09:13,900 --> 00:09:16,363
És természetesen az informatikában a színekre úgy gondolunk, 

157
00:09:16,363 --> 00:09:18,705
mint három értékből álló kis vektorokra, amelyek a piros, 

158
00:09:18,705 --> 00:09:20,200
zöld és kék komponenseket képviselik.

159
00:09:20,560 --> 00:09:24,520
Ha ezeket a kis értékeket megszorzom 1 9-eddel, és összeadom őket, 

160
00:09:24,520 --> 00:09:27,298
akkor az egyes színcsatornákon átlagot kapunk, 

161
00:09:27,298 --> 00:09:31,200
és a jobb oldali kép megfelelő pixelét ez az összeg határozza meg.

162
00:09:31,940 --> 00:09:35,849
Az általános hatás, ahogy ezt a kép minden egyes pixelére tesszük, az, 

163
00:09:35,849 --> 00:09:38,602
hogy mindegyik beszivárog az összes szomszédjába, 

164
00:09:38,602 --> 00:09:40,860
ami az eredetinél homályosabb verziót ad.

165
00:09:41,720 --> 00:09:44,730
A szóhasználatban azt mondanánk, hogy a jobb oldali kép az 

166
00:09:44,730 --> 00:09:47,740
eredeti képünk egy kis értékrácsával egybeeső konvolúciója.

167
00:09:48,140 --> 00:09:51,366
Vagy technikailag talán azt kellene mondanom, hogy ez a konvolúció 

168
00:09:51,366 --> 00:09:54,400
ennek a kis értékrácsnak a 180 fokkal elforgatott változatával.

169
00:09:54,620 --> 00:09:58,114
Nem mintha az számít, mikor szimmetrikus a rács, de érdemes észben tartani, 

170
00:09:58,114 --> 00:10:02,021
hogy a konvolúció definíciója, amint azt a tiszta matematikai kontextusból örökölte, 

171
00:10:02,021 --> 00:10:05,240
mindig arra ösztönözze Önt, hogy gondolkodjon el a második tömb körül.

172
00:10:05,960 --> 00:10:08,836
Ha ezt kissé módosítjuk, akkor más értékrács kiválasztásával 

173
00:10:08,836 --> 00:10:11,100
sokkal elegánsabb elmosódási hatást érhetünk el.

174
00:10:11,440 --> 00:10:15,780
Ebben az esetben van egy kis 5x5-ös rácsom, de a különbség nem annyira a méret.

175
00:10:15,980 --> 00:10:19,332
Ha ráközelítünk, észrevesszük, hogy a középső érték sokkal nagyobb, 

176
00:10:19,332 --> 00:10:22,044
mint a szélek felé eső érték, és ahonnan ez származik, 

177
00:10:22,044 --> 00:10:25,940
az összes mintát egy haranggörbéből vettük, amelyet Gauss-eloszlásnak neveznek.

178
00:10:26,800 --> 00:10:31,563
Így amikor ezeket az értékeket megszorozzuk a megfelelő pixellel, amelyik tetején ülnek, 

179
00:10:31,563 --> 00:10:36,380
sokkal nagyobb súlyt adunk ennek a központi pixelnek, és sokkal kevésbé a szélén lévőknek.

180
00:10:36,800 --> 00:10:40,560
És csakúgy, mint korábban, a jobb oldali megfelelő pixelt ez az összeg határozza meg.

181
00:10:41,320 --> 00:10:43,950
Mivel ezt a folyamatot minden egyes pixelnél elvégezzük, 

182
00:10:43,950 --> 00:10:47,412
elmosódási hatást ad, ami sokkal hitelesebben szimulálja azt a gondolatot, 

183
00:10:47,412 --> 00:10:49,720
hogy az objektívet eltünteti vagy valami hasonlót.

184
00:10:49,900 --> 00:10:53,360
De az elmosódás messze nem az egyetlen dolog, amit ezzel az ötlettel tehet.

185
00:10:53,800 --> 00:10:56,505
Például vessünk egy pillantást erre a kis értékrácsra, 

186
00:10:56,505 --> 00:10:59,555
amely tartalmaz néhány pozitív számot a bal oldalon és néhány 

187
00:10:59,555 --> 00:11:02,900
negatív számot a jobb oldalon, amelyeket kékre és pirosra színezünk.

188
00:11:03,640 --> 00:11:06,570
Szánjon rá egy pillanatot, hogy meg tudja-e jósolni és megérteni, 

189
00:11:06,570 --> 00:11:08,480
hogy ez milyen hatással lesz a végső képre.

190
00:11:10,720 --> 00:11:14,295
Tehát ebben az esetben a képre csak szürkeárnyalatosnak fogok gondolni, 

191
00:11:14,295 --> 00:11:18,120
nem pedig színesre, tehát minden képpontot három helyett csak egy szám jelöl.

192
00:11:18,440 --> 00:11:20,633
És egy dolog, amit érdemes megjegyezni, az az, 

193
00:11:20,633 --> 00:11:23,060
hogy a konvolúció során negatív értékeket kaphatunk.

194
00:11:23,060 --> 00:11:27,157
Például ezen a ponton, ha nagyítunk, a kis rácsunk bal fele teljes egészében 

195
00:11:27,157 --> 00:11:30,776
a fekete pixelek tetején helyezkedik el, aminek értéke nulla lenne, 

196
00:11:30,776 --> 00:11:35,460
de a negatív értékek jobb fele mind a fehér képpontok tetején található, ami értéke egy.

197
00:11:36,180 --> 00:11:39,121
Tehát ha a megfelelő kifejezéseket megszorozzuk és összeadjuk, 

198
00:11:39,121 --> 00:11:42,857
az eredmény nagyon negatív lesz, és ezt a jobb oldali képpel úgy jelenítem meg, 

199
00:11:42,857 --> 00:11:46,360
hogy a negatív értékeket pirosra, a pozitív értékeket pedig kékre színezem.

200
00:11:46,880 --> 00:11:49,907
Egy másik dolog, amit észre kell venni, hogy ha egy olyan foltot használ, 

201
00:11:49,907 --> 00:11:51,993
amely ugyanolyan színű, akkor minden nullára megy, 

202
00:11:51,993 --> 00:11:54,080
mivel a mi kis rácsunkban az értékek összege nulla.

203
00:11:55,180 --> 00:11:58,945
Ez nagyban különbözik az előző két példától, ahol a mi kis rácsunk összege egy volt, 

204
00:11:58,945 --> 00:12:02,180
ami lehetővé tette, hogy mozgóátlagként és így elmosódásként értelmezzük.

205
00:12:03,640 --> 00:12:06,513
Összességében ez a kis folyamat alapvetően észleli, 

206
00:12:06,513 --> 00:12:10,106
hogy hol van eltérés a pixelértékben, ahogy balról jobbra mozog, 

207
00:12:10,106 --> 00:12:13,920
és így egyfajta módot ad a kép függőleges széleinek feltérképezésére.

208
00:12:16,500 --> 00:12:19,566
És hasonlóképpen, ha megforgattuk a rácsot úgy, 

209
00:12:19,566 --> 00:12:24,612
hogy a felülről lefelé haladva változik, ez az összes vízszintes élt felveszi, 

210
00:12:24,612 --> 00:12:29,340
ami a mi kis pite lényképünk esetében igencsak démoni szemeket eredményez.

211
00:12:30,400 --> 00:12:34,013
Ezt a kisebb rácsot egyébként gyakran kernelnek is nevezik, és itt az a szépség, 

212
00:12:34,013 --> 00:12:37,895
hogy egy másik kernel kiválasztásával különböző képfeldolgozási effektusokat érhet el, 

213
00:12:37,895 --> 00:12:40,840
nem csak az élészlelés elmosódását, hanem például az élesítést is.

214
00:12:40,840 --> 00:12:44,581
Azok számára, akik hallottak a konvolúciós neurális hálózatról, az az ötlet, 

215
00:12:44,581 --> 00:12:48,322
hogy adatokat használjanak annak kiderítésére, hogy mik legyenek a kernelek, 

216
00:12:48,322 --> 00:12:51,480
amit az határozza meg, hogy a neurális hálózat mit akar észlelni.

217
00:12:52,760 --> 00:12:55,520
Egy másik dolog, amit talán fel kell emelnem, az a kimenet hossza.

218
00:12:55,820 --> 00:12:58,205
A mozgóátlagos példához hasonló eseteknél előfordulhat, 

219
00:12:58,205 --> 00:13:00,335
hogy csak akkor érdemes a kifejezésekre gondolni, 

220
00:13:00,335 --> 00:13:02,465
amikor mindkét ablak teljesen egymáshoz igazodik, 

221
00:13:02,465 --> 00:13:04,766
vagy a képfeldolgozási példában esetleg azt szeretné, 

222
00:13:04,766 --> 00:13:07,280
hogy a végső kimenet az eredetivel megegyező méretű legyen.

223
00:13:07,280 --> 00:13:09,584
A konvolúciók, mint pusztán matematikai műveletek, 

224
00:13:09,584 --> 00:13:12,565
mindig olyan tömböt hoznak létre, amely nagyobb, mint a két tömb, 

225
00:13:12,565 --> 00:13:16,180
amellyel elkezdte, legalábbis feltételezve, hogy az egyiknek nem egy hosszúsága.

226
00:13:16,720 --> 00:13:19,228
Csak tudd, hogy bizonyos számítástechnikai kontextusokban 

227
00:13:19,228 --> 00:13:21,520
gyakran akarod szándékosan csonkolni ezt a kimenetet.

228
00:13:24,720 --> 00:13:28,340
Egy másik dolog, amit érdemes kiemelni, hogy számítástechnikai kontextusban 

229
00:13:28,340 --> 00:13:32,436
az az elképzelés, hogy a kernelt körül kell forgatni, mielőtt átengednéd az eredetit, 

230
00:13:32,436 --> 00:13:36,247
gyakran nagyon furcsának és szükségtelennek tűnik, de ismételten jegyezzük meg, 

231
00:13:36,247 --> 00:13:39,248
hogy ez az, amit a tiszta matematikai kontextusból örököltünk. 

232
00:13:39,248 --> 00:13:42,440
nagy valószínűséggel látta, hogy ez hihetetlenül természetes dolog.

233
00:13:43,020 --> 00:13:45,843
És tulajdonképpen mutathatok még egy tiszta matematikai példát, 

234
00:13:45,843 --> 00:13:48,093
ahol még a programozóknak is törődniük kell ezzel, 

235
00:13:48,093 --> 00:13:52,020
mert megnyitja a kaput egy sokkal gyorsabb algoritmus előtt, amely mindezeket kiszámítja.

236
00:13:52,620 --> 00:13:55,811
Ahhoz, hogy beállítsam, mit értek itt gyorsabb alatt, hadd menjek vissza, 

237
00:13:55,811 --> 00:13:58,054
és húzzak fel megint egy pythont, és két különböző, 

238
00:13:58,054 --> 00:13:59,780
viszonylag nagy tömböt fogok létrehozni.

239
00:13:59,940 --> 00:14:03,101
Mindegyikben százezer véletlenszerű elem lesz, 

240
00:14:03,101 --> 00:14:07,540
és felmérem a convolve függvény futási idejét a numpy könyvtárból.

241
00:14:08,180 --> 00:14:11,080
És ebben az esetben több különböző iterációra futtatja, 

242
00:14:11,080 --> 00:14:13,619
megpróbálja megtalálni az átlagot, és úgy tűnik, 

243
00:14:13,619 --> 00:14:16,520
ezen a számítógépen legalább 4-es az átlag.87 másodperc.

244
00:14:16,960 --> 00:14:22,046
Ezzel szemben, ha a scipy könyvtártól eltérő, fftconvolve nevű függvényt használok, 

245
00:14:22,046 --> 00:14:25,982
ami ugyanaz, csak másképp van megvalósítva, akkor csak 4-et vesz 

246
00:14:25,982 --> 00:14:30,160
igénybe.Átlagosan 3 ezredmásodperc, tehát három nagyságrendű javulás.

247
00:14:30,160 --> 00:14:34,226
És még egyszer, bár más néven repül, ugyanazt a kimenetet adja, 

248
00:14:34,226 --> 00:14:39,120
mint a másik convolve függvény, csak tesz valamit, hogy ügyesebben járjon el.

249
00:14:42,200 --> 00:14:44,957
Emlékezzen arra, hogy a valószínűségi példában azt mondtam, 

250
00:14:44,957 --> 00:14:48,405
hogy a konvolúció másik módja az volt, hogy létrehozza ezt a táblázatot az 

251
00:14:48,405 --> 00:14:51,944
összes páronkénti szorzatról, majd összeadja ezeket a páronkénti szorzatokat 

252
00:14:51,944 --> 00:14:52,680
az átlók mentén.

253
00:14:53,660 --> 00:14:56,329
Természetesen nincs semmi konkrét a valószínűségre vonatkozóan, 

254
00:14:56,329 --> 00:14:59,040
amikor két különböző számlistát von össze, és így gondolhatja át.

255
00:14:59,040 --> 00:15:02,750
Hozzon létre egy ilyen szorzótáblát az összes páronkénti szorzattal, 

256
00:15:02,750 --> 00:15:06,460
majd az átló mentén minden összeg megfelel az egyik végső kimenetnek.

257
00:15:07,600 --> 00:15:10,729
Az egyik olyan kontextus, ahol ez a nézet különösen természetes, 

258
00:15:10,729 --> 00:15:12,800
az az, amikor két polinomot összeszorozunk.

259
00:15:13,300 --> 00:15:19,134
Például hadd vegyem a már meglévő kis rácsot, és cseréljem le a felső tagokat 1, 

260
00:15:19,134 --> 00:15:23,600
2x és 3x négyzetre, a többi tagot pedig 4, 5x és 6x négyzetre.

261
00:15:24,000 --> 00:15:26,527
Most gondolja át, mit jelent az, amikor ezeket a különböző 

262
00:15:26,527 --> 00:15:28,840
páronkénti termékeket hozzuk létre a két lista között.

263
00:15:29,040 --> 00:15:33,254
Amit csinálsz, az lényegében az általam felírt két polinom teljes szorzatának 

264
00:15:33,254 --> 00:15:36,118
kiterjesztése, majd amikor összeadod az átló mentén, 

265
00:15:36,118 --> 00:15:40,279
amely megfelel az összes hasonló kifejezés összegyűjtésének, ami elég ügyes, 

266
00:15:40,279 --> 00:15:44,386
egy polinom kiterjesztése és a hasonló kifejezések összegyűjtése pontosan a 

267
00:15:44,386 --> 00:15:46,440
ugyanaz a folyamat, mint a konvolúció.

268
00:15:47,740 --> 00:15:50,631
De ez lehetővé teszi számunkra, hogy valami nagyon menőt tegyünk, 

269
00:15:50,631 --> 00:15:52,340
mert gondoljunk arra, amit itt mondunk.

270
00:15:52,340 --> 00:15:56,581
Azt mondjuk, ha veszünk két különböző függvényt, és összeszorozzuk őket, 

271
00:15:56,581 --> 00:15:59,369
ami egy egyszerű pontszerű művelet, az ugyanaz, 

272
00:15:59,369 --> 00:16:03,727
mintha először mindegyikből kivontuk volna az együtthatókat, feltételezve, 

273
00:16:03,727 --> 00:16:08,840
hogy ezek polinomok, majd konvolúciót vettünk volna ezekből. az együtthatók két listája.

274
00:16:09,620 --> 00:16:14,292
Az teszi ezt olyan érdekessé, hogy a konvolúciók elvileg sokkal bonyolultabbnak tűnnek, 

275
00:16:14,292 --> 00:16:17,265
mint az egyszerű szorzás, és nem csak fogalmilag értem, 

276
00:16:17,265 --> 00:16:20,716
hogy nehezebb elgondolkodni rajtuk, hanem számítási szempontból, 

277
00:16:20,716 --> 00:16:23,211
több lépést igényel a konvolúció végrehajtása, 

278
00:16:23,211 --> 00:16:25,760
mint egy két különböző lista pontszerű szorzata.

279
00:16:26,319 --> 00:16:29,831
Például tegyük fel, hogy adtam neked két igazán nagy polinomot, 

280
00:16:29,831 --> 00:16:32,465
mondjuk mindegyik száz különböző együtthatóval, 

281
00:16:32,465 --> 00:16:36,581
akkor ha a szorzás módja ennek a szorzatnak a kibontása volt, akkor tudod, 

282
00:16:36,581 --> 00:16:39,763
hogy kitöltöd a teljes 100x100-as páros szorzatok rácsát, 

283
00:16:39,763 --> 00:16:43,055
amihez szükség lenne végezzen el 10 000 különböző terméket, 

284
00:16:43,055 --> 00:16:46,896
majd amikor összegyűjti az összes hasonló kifejezést az átlók mentén, 

285
00:16:46,896 --> 00:16:49,860
az egy újabb körülbelül 10 000 műveletből álló halmaz.

286
00:16:50,700 --> 00:16:53,770
Általánosabban a nyelvhasználatban azt mondanánk, 

287
00:16:53,770 --> 00:16:58,376
hogy az algoritmus n négyzetes jelentése O két n méretű lista esetén, úgy, 

288
00:16:58,376 --> 00:17:01,140
hogy a műveletek száma arányos n négyzetével.

289
00:17:01,820 --> 00:17:05,552
Másrészt, ha két polinomra gondolok a kimeneteik szempontjából, 

290
00:17:05,552 --> 00:17:08,818
például mintavételezzük az értékeket néhány bemenetnél, 

291
00:17:08,818 --> 00:17:12,608
akkor a szorzásuk csak annyi műveletet igényel, ahány minta van, 

292
00:17:12,608 --> 00:17:16,749
mivel ez ismét egy pontszerű művelet, és polinomokkal csak annyi kell. 

293
00:17:16,749 --> 00:17:20,540
véges sok mintát, hogy vissza lehessen állítani az együtthatókat.

294
00:17:20,540 --> 00:17:25,060
Például két kimenet elegendő egy lineáris polinom egyedi meghatározásához.

295
00:17:25,660 --> 00:17:29,400
Három kimenet elegendő lenne egy másodfokú polinom egyedi meghatározásához.

296
00:17:29,640 --> 00:17:33,548
És általában, ha n különböző kimenetet ismer, az elegendő egy n 

297
00:17:33,548 --> 00:17:37,640
különböző együtthatóval rendelkező polinom egyedi meghatározásához.

298
00:17:37,780 --> 00:17:40,720
Vagy ha úgy tetszik, ezt az egyenletrendszerek nyelvén is megfogalmazhatjuk.

299
00:17:41,200 --> 00:17:43,580
Képzeld el, azt mondom, hogy van néhány polinomom, 

300
00:17:43,580 --> 00:17:46,520
de nem mondom meg, mik az együtthatók, ezek rejtélyek számodra.

301
00:17:46,700 --> 00:17:50,800
Példánkban ezt úgy gondolhatja, mint azt a terméket, amelyet megpróbálunk kitalálni.

302
00:17:50,800 --> 00:17:53,965
Akkor tegyük fel, hogy azt mondom, hogy csak megmondom, 

303
00:17:53,965 --> 00:17:58,486
mik lennének ennek a polinomnak a kimenetei, ha különféle bemeneteket írnál be, 

304
00:17:58,486 --> 00:18:03,460
például 0, 1, 2, 3, be és on, és adok neked annyi egyenletet, mint vannak ismeretleneid.

305
00:18:04,140 --> 00:18:07,340
Ez még egy lineáris egyenletrendszer is, szóval ez szép.

306
00:18:07,780 --> 00:18:10,900
És elvileg ennek elegendőnek kell lennie az együtthatók visszanyeréséhez.

307
00:18:11,740 --> 00:18:15,888
Tehát az algoritmus durva felvázolása az lenne, ha két számlistát össze akar vonni, 

308
00:18:15,888 --> 00:18:19,000
akkor úgy kezeli őket, mintha két polinom együtthatói lennének.

309
00:18:19,420 --> 00:18:22,269
Elegendő kimeneten mintát vesz ezekből a polinomokból, 

310
00:18:22,269 --> 00:18:25,948
pontonként megszorozza ezeket a mintákat, majd megoldja a rendszert az 

311
00:18:25,948 --> 00:18:30,560
együtthatók visszanyerésére, mint a konvolúció megtalálásának rejtélyes, hátsó kapujában.

312
00:18:31,420 --> 00:18:35,200
És ahogy eddig legalábbis kijelentettem, néhányan joggal panaszkodhatnának, 

313
00:18:35,200 --> 00:18:37,340
hogy &quot;Grant, ez egy idióta terv&quot;.

314
00:18:37,580 --> 00:18:41,952
Mert egyrészt pusztán ezeknek a mintáknak a kiszámítása az egyik általunk ismert 

315
00:18:41,952 --> 00:18:46,000
polinomra már n négyzetes művelet nagyságát veszi fel, nem beszélve arról, 

316
00:18:46,000 --> 00:18:50,588
hogy ennek a rendszernek a megoldása minden bizonnyal olyan nehéz lesz számításilag, 

317
00:18:50,588 --> 00:18:52,100
mint a konvolúció elvégzése.

318
00:18:52,600 --> 00:18:56,150
Tehát bizonyosan megvan ez a kapcsolat a szorzás és a konvolúció között, 

319
00:18:56,150 --> 00:19:00,480
de az összes bonyolultság az egyik nézőpontból a másikba történő fordítás során történik.

320
00:19:01,600 --> 00:19:05,108
De van egy trükk, és azok, akik ismerik a Fourier-transzformációkat 

321
00:19:05,108 --> 00:19:07,740
és az FFT-algoritmust, láthatják, hogy ez hol tart.

322
00:19:07,740 --> 00:19:12,180
Ha nem jártas ezekben a témákban, a mondanivalóm teljesen váratlannak tűnhet.

323
00:19:12,260 --> 00:19:15,364
Csak tudd, hogy vannak bizonyos utak, amelyeket bejárhattál volna a matematikában, 

324
00:19:15,364 --> 00:19:16,860
amelyek miatt ez inkább elvárható lépés.

325
00:19:17,720 --> 00:19:20,360
Alapvetően az az elképzelés, hogy itt szabadon választhatunk.

326
00:19:20,540 --> 00:19:23,695
Ha ahelyett, hogy valamilyen tetszőleges bemeneti készleten (például 0, 

327
00:19:23,695 --> 00:19:25,930
1, 2, 3, be és on) végezne kiértékelést, úgy dönt, 

328
00:19:25,930 --> 00:19:29,700
hogy a komplex számok egy nagyon speciálisan kiválasztott halmazán végez kiértékelést.

329
00:19:30,240 --> 00:19:33,026
Pontosabban azokat, amelyek egyenletesen ülnek az egységkörön, 

330
00:19:33,026 --> 00:19:34,840
amelyeket az egység gyökereinek nevezünk.

331
00:19:35,200 --> 00:19:36,880
Ez egy barátságosabb rendszert ad nekünk.

332
00:19:38,360 --> 00:19:40,800
Az alapötlet az, hogy ha találunk egy olyan számot, 

333
00:19:40,800 --> 00:19:44,555
ahol a hatalom felvétele beleesik ebbe a kerékpározási mintába, az azt jelenti, 

334
00:19:44,555 --> 00:19:48,545
hogy az általunk generált rendszernek sok redundanciája lesz az Ön által kiszámított 

335
00:19:48,545 --> 00:19:50,986
különböző feltételek mellett, és ha okosak vagyunk, 

336
00:19:50,986 --> 00:19:54,460
hogyan Ha kihasználja ezt a redundanciát, sok munkát megspórolhat magának.

337
00:19:56,020 --> 00:19:59,565
Ennek a kimeneti halmaznak, amit írtam, van egy speciális neve, 

338
00:19:59,565 --> 00:20:02,280
az együtthatók diszkrét Fourier-transzformációja.

339
00:20:02,500 --> 00:20:05,564
És ha többet szeretne megtudni, tulajdonképpen egy másik előadást 

340
00:20:05,564 --> 00:20:09,140
tartottam ugyanarra a Julia MIT órára, a diszkrét Fourier-transzformációkról.

341
00:20:09,220 --> 00:20:12,246
És van egy igazán kiváló videó is a redukálható csatornán, 

342
00:20:12,246 --> 00:20:16,401
amely a gyors Fourier-transzformációról szól, amely egy algoritmus ezek gyorsabb 

343
00:20:16,401 --> 00:20:17,120
kiszámítására.

344
00:20:17,480 --> 00:20:20,643
A Veritasium is nemrégiben készített egy nagyon jó videót az FFT-n, 

345
00:20:20,643 --> 00:20:21,760
így sok lehetőséged van.

346
00:20:22,260 --> 00:20:24,660
És ez a gyors algoritmus valóban a lényeg számunkra.

347
00:20:25,120 --> 00:20:29,523
A redundancia miatt is létezik egy módszer, amellyel az együtthatóktól az összes 

348
00:20:29,523 --> 00:20:34,035
kimenethez lehet eljutni, ahol ahelyett, hogy n négyzetes műveletet hajtana végre, 

349
00:20:34,035 --> 00:20:37,786
az n művelet logjának n-szeresét hajtja végre, ami sok. sokkal jobb, 

350
00:20:37,786 --> 00:20:39,200
ha nagy listákra léptetsz.

351
00:20:39,660 --> 00:20:42,540
És ami fontos, ez az fft algoritmus mindkét irányban működik.

352
00:20:42,700 --> 00:20:45,480
Azt is lehetővé teszi, hogy a kimenetekről az együtthatókra lépjen.

353
00:20:46,220 --> 00:20:49,060
Tehát az egészet összeadva tekintsük vissza az algoritmus vázlatát.

354
00:20:49,420 --> 00:20:52,885
Most már azt mondhatjuk, hogy amikor két hosszú számlistát kapsz, 

355
00:20:52,885 --> 00:20:56,823
és fel akarod venni a konvolúciójukat, először számítsd ki mindegyik gyors 

356
00:20:56,823 --> 00:21:01,339
Fourier-transzformációját, amit a fejedben úgy gondolhatsz, mintha úgy kezelnéd őket. 

357
00:21:01,339 --> 00:21:05,697
ezek egy polinom együtthatói, és egy nagyon speciálisan kiválasztott ponthalmazban 

358
00:21:05,697 --> 00:21:06,380
értékelik ki.

359
00:21:06,899 --> 00:21:11,386
Ezután szorozzuk meg az imént kapott két eredményt pontszerűen, ami szép és gyors, 

360
00:21:11,386 --> 00:21:14,737
majd hajtsunk végre egy inverz gyors Fourier-transzformációt, 

361
00:21:14,737 --> 00:21:18,900
és ez az általunk keresett konvolúció kiszámításának sunyi backdoor módszere.

362
00:21:19,040 --> 00:21:22,240
Ezúttal azonban csak n/n log n műveletet tartalmaz.

363
00:21:23,139 --> 00:21:24,740
Ez nagyon klassz nekem!

364
00:21:25,120 --> 00:21:28,113
Ez a nagyon specifikus kontextus, ahol a konvolúciók megjelennek, 

365
00:21:28,113 --> 00:21:31,424
megszorozva két polinomot, megnyitja a kaput egy olyan algoritmus előtt, 

366
00:21:31,424 --> 00:21:34,100
amely mindenhol releváns, ahol konvolúciók merülhetnek fel.

367
00:21:34,180 --> 00:21:36,590
Ha valószínűségi eloszlásokat szeretne hozzáadni, 

368
00:21:36,590 --> 00:21:39,000
végezzen nagy képfeldolgozást, bármi legyen is az.

369
00:21:39,220 --> 00:21:42,932
És azt hiszem, ez egy jó példa arra, hogy miért kell izgulni, amikor azt látja, 

370
00:21:42,932 --> 00:21:47,015
hogy a matematikában egy művelet vagy koncepció megjelenik sok látszólag nem kapcsolódó 

371
00:21:47,015 --> 00:21:47,480
területen.

372
00:21:48,480 --> 00:21:51,500
Ha szeretnél egy kis házi feladatot, itt van valami, amire szórakoztató elgondolkodni.

373
00:21:51,720 --> 00:21:55,617
Magyarázza el, hogy amikor két különböző számot szorozunk, csak a közönséges szorzást, 

374
00:21:55,617 --> 00:21:59,157
ahogyan mindannyian az általános iskolában tanuljuk, akkor az, amit csinálunk, 

375
00:21:59,157 --> 00:22:01,980
alapvetően ezeknek a számoknak a számjegyei közötti konvolúció.

376
00:22:02,500 --> 00:22:04,893
Van néhány további lépés a hordozókkal és hasonlókkal, 

377
00:22:04,893 --> 00:22:06,460
de az alapvető lépés egy konvolúció.

378
00:22:07,280 --> 00:22:09,918
A gyors algoritmus létezésének fényében ez azt jelenti, 

379
00:22:09,918 --> 00:22:13,310
hogy ha két nagyon nagy egész számunk van, akkor létezik olyan módszer, 

380
00:22:13,310 --> 00:22:15,854
amellyel megtalálhatjuk a terméküket, amely gyorsabb, 

381
00:22:15,854 --> 00:22:17,880
mint az általános iskolában tanult módszer.

382
00:22:18,140 --> 00:22:21,090
Ez ahelyett, hogy n-ből O négyzetes műveletet igényelne, 

383
00:22:21,090 --> 00:22:24,920
csak n log n-ből O-t igényel, ami nem is úgy tűnik, hogy lehetséges lenne.

384
00:22:25,380 --> 00:22:28,665
A bökkenő az, hogy mielőtt ez valóban hasznos lenne a gyakorlatban, 

385
00:22:28,665 --> 00:22:30,840
a számoknak teljesen szörnyűnek kell lenniük.

386
00:22:31,220 --> 00:22:35,340
De mégis jó, hogy létezik ilyen algoritmus.

387
00:22:35,340 --> 00:22:37,689
A következőkben figyelmünket a folytonos esetre fordítjuk, 

388
00:22:37,689 --> 00:22:39,640
különös tekintettel a valószínűségi eloszlásokra.

