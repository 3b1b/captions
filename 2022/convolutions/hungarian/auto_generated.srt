1
00:00:00,000 --> 00:00:02,640
Tegyük fel, hogy adok neked két különböző számlistát,

2
00:00:02,640 --> 00:00:06,015
vagy esetleg két különböző függvényt, és arra kérlek, gondold végig,

3
00:00:06,015 --> 00:00:09,145
hogyan kombinálhatod ezt a két listát, hogy új számlistát kapj,

4
00:00:09,145 --> 00:00:11,737
vagy a két függvény kombinálásával új függvényt kapj.

5
00:00:11,737 --> 00:00:16,267
Talán az egyik egyszerű módszer, ami eszünkbe jut, az, hogy szóról szóra összeadjuk őket.

6
00:00:16,267 --> 00:00:20,050
Hasonlóan a függvényekhez, hozzáadhatja az összes megfelelő kimenetet.

7
00:00:20,050 --> 00:00:23,876
Hasonló módon megszorozhatja a két listát kifejezésenként,

8
00:00:23,876 --> 00:00:26,145
és ugyanezt teheti a függvényekkel.

9
00:00:26,145 --> 00:00:29,815
De van egy másik fajta kombináció, amely ugyanolyan alapvető,

10
00:00:29,815 --> 00:00:33,840
mint a kettő, de sokkal ritkábban tárgyalják, konvolúcióként ismert.

11
00:00:33,840 --> 00:00:37,032
De az előző két esettől eltérően ez nem pusztán

12
00:00:37,032 --> 00:00:39,893
egy számokkal végzett műveletből öröklődik.

13
00:00:39,893 --> 00:00:44,716
Ez valami igazán új a számlisták vagy a függvények kombinálása szempontjából.

14
00:00:44,716 --> 00:00:48,575
Mindenhol megjelennek, mindenütt jelen vannak a képfeldolgozásban,

15
00:00:48,575 --> 00:00:51,398
ez a valószínűségelmélet alapvető konstrukciója,

16
00:00:51,398 --> 00:00:55,890
sokat használják differenciálegyenletek megoldásában, és egy olyan kontextus,

17
00:00:55,890 --> 00:01:00,210
ahol szinte biztosan láttad, ha nem ezen a néven két polinomot összeszoroz.

18
00:01:00,210 --> 00:01:04,720
A vizuális magyarázatokkal foglalkozó emberként ez egy különösen jó téma,

19
00:01:04,720 --> 00:01:09,840
mert a képletes definíció elszigetelten és kontextus nélkül megfélemlítőnek tűnhet,

20
00:01:09,840 --> 00:01:14,899
de ha szánunk időt arra, hogy valóban kibontsuk, amit mond, és előtte megindítjuk,

21
00:01:14,899 --> 00:01:18,800
hogy miért. valami ilyesmit szeretne, hihetetlenül szép művelet.

22
00:01:18,800 --> 00:01:21,370
És be kell vallanom, tanultam egy kicsit, miközben

23
00:01:21,370 --> 00:01:23,436
összeállítottam a projekt látványvilágát.

24
00:01:23,436 --> 00:01:28,028
Két különböző függvény összevonása esetén különböző módokon próbáltam elképzelni,

25
00:01:28,028 --> 00:01:31,781
hogy ez mit jelenthet, és az egyiknél volt egy kis aha pillanatom,

26
00:01:31,781 --> 00:01:35,533
hogy miért játsszák a normál eloszlások azt a szerepet, valószínű,

27
00:01:35,533 --> 00:01:38,445
hogy miért olyan természetes alakja egy függvénynek.

28
00:01:38,445 --> 00:01:41,580
De előre haladok, nagyon sok beállítás van ehhez.

29
00:01:41,580 --> 00:01:45,323
Ebben a videóban elsősorban a diszkrét esetre összpontosítunk,

30
00:01:45,323 --> 00:01:50,196
és különösen egy nagyon váratlan, de nagyon okos algoritmusra ezek kiszámításához.

31
00:01:50,196 --> 00:01:57,840
A folyamatos eset vitáját pedig kihúzom egy második részbe.

32
00:01:57,840 --> 00:02:00,372
Nagyon csábító a képfeldolgozási példákkal nyitni,

33
00:02:00,372 --> 00:02:03,551
mivel vizuálisan ezek a legérdekesebbek, de van néhány apróság,

34
00:02:03,551 --> 00:02:07,822
ami miatt a képfeldolgozási eset kevésbé reprezentálja a konvolúciókat összességében,

35
00:02:07,822 --> 00:02:10,256
ezért inkább kezdjük a dolgokat valószínűséggel,

36
00:02:10,256 --> 00:02:13,831
és különösen az egyik legegyszerűbb példa, amelyre biztos vagyok benne,

37
00:02:13,831 --> 00:02:17,010
hogy itt mindenki elgondolkodott az élete egy bizonyos pontján,

38
00:02:17,010 --> 00:02:20,983
ami egy pár kockával dobott, és a különböző összegek megtekintésének esélyeinek

39
00:02:20,983 --> 00:02:21,530
kitalálása.

40
00:02:21,530 --> 00:02:24,170
És mondhatod, nem probléma, nem probléma.

41
00:02:24,170 --> 00:02:27,683
Mind a két kockádnak hat különböző lehetséges kimenetele van,

42
00:02:27,683 --> 00:02:30,800
ami összesen 36 különböző lehetséges kimenetelpárt ad,

43
00:02:30,800 --> 00:02:34,030
és ha csak végignézzük az összeset, meg tudjuk számolni,

44
00:02:34,030 --> 00:02:36,240
hogy hány párnak van egy adott összege.

45
00:02:36,240 --> 00:02:40,945
És az összes párt így egy rácsba rendezve, egy nagyon szép dolog az,

46
00:02:40,945 --> 00:02:45,650
hogy az összes állandó összegű pár látható a különböző átlók egyikén.

47
00:02:45,650 --> 00:02:49,265
Tehát egyszerűen csak megszámolja, hány van az egyes átlókon,

48
00:02:49,265 --> 00:02:52,880
megmutatja, mekkora valószínűséggel lát egy bizonyos összeget.

49
00:02:52,880 --> 00:02:58,699
És azt mondanám, nagyon jó, nagyon jó, de tud más módon elképzelni ugyanezt a kérdést?

50
00:02:58,699 --> 00:03:02,414
Egyéb képek, amelyek eszünkbe juthatnak, ha az összes különálló párra gondolunk,

51
00:03:02,414 --> 00:03:03,744
amelyeknek adott összege van?

52
00:03:03,744 --> 00:03:07,550
És lehet, hogy egyikőtök felemeli a kezét, és azt mondja: igen, van egy.

53
00:03:07,550 --> 00:03:12,275
Tegyük fel, hogy ezt a két különböző lehetőségkészletet egymás után képzeli el,

54
00:03:12,275 --> 00:03:14,046
de megfordítja a második sort.

55
00:03:14,046 --> 00:03:18,960
Így az összes különböző pár, amely összesen hét, így függőlegesen sorakozik.

56
00:03:18,960 --> 00:03:22,973
És ha ezt az alsó sort egészen jobbra csúsztatjuk, akkor az egyedülálló pár,

57
00:03:22,973 --> 00:03:26,309
amely kettőt ad, a kígyószemek az egyetlenek, amelyek igazodnak.

58
00:03:26,309 --> 00:03:29,598
És ha ezt egy egységnél jobbra csúsztatom, akkor az egymáshoz

59
00:03:29,598 --> 00:03:32,886
igazodó párok a két különböző pár, amelyek összeadódnak három.

60
00:03:32,886 --> 00:03:36,468
Általánosságban elmondható, hogy ennek az alsó tömbnek a különböző eltolási értékei,

61
00:03:36,468 --> 00:03:39,081
amelyek emlékeznek arra, hogy először meg kellett fordítanom,

62
00:03:39,081 --> 00:03:41,778
felfedik az összes különálló párt, amelyeknek adott összege van.

63
00:03:41,778 --> 00:03:47,957
Ami a valószínűségi kérdéseket illeti, ez még mindig nem különösebben érdekes,

64
00:03:47,957 --> 00:03:53,120
mert csak azt számoljuk, hány eredmény van az egyes kategóriákban.

65
00:03:53,120 --> 00:03:55,411
De ez azzal a burkolt feltételezéssel van így,

66
00:03:55,411 --> 00:03:57,850
hogy minden arcnak egyenlő esélye van felbukkanni.

67
00:03:57,850 --> 00:04:01,897
De mi lenne, ha azt mondanám, hogy van egy speciális kockakészletem, ami nem egységes?

68
00:04:01,897 --> 00:04:04,453
Lehet, hogy a kék kocka saját számkészlettel rendelkezik,

69
00:04:04,453 --> 00:04:07,096
amely leírja az egyes arcok felbukkanásának valószínűségét,

70
00:04:07,096 --> 00:04:09,740
a piros kocka pedig saját egyedi számkészlettel rendelkezik.

71
00:04:09,740 --> 00:04:12,194
Ebben az esetben, ha például azt akarná kitalálni,

72
00:04:12,194 --> 00:04:16,285
hogy mekkora valószínűséggel lát egy kettőt, akkor megszorozná annak valószínűségét,

73
00:04:16,285 --> 00:04:19,895
hogy a kék kocka 1-szerese annak a valószínűségnek, hogy a piros kocka egy.

74
00:04:19,895 --> 00:04:22,498
És annak esélye érdekében, hogy hármast lásson,

75
00:04:22,498 --> 00:04:25,319
nézze meg a két különálló párt, ahol ez lehetséges,

76
00:04:25,319 --> 00:04:29,983
és ismét megszorozza a megfelelő valószínűségeket, majd összeadja ezt a két szorzatot.

77
00:04:29,983 --> 00:04:33,042
Hasonlóképpen, annak az esélye, hogy négyet látunk,

78
00:04:33,042 --> 00:04:36,748
három különböző lehetőségpárt össze kell szorozni és összeadni.

79
00:04:36,748 --> 00:04:42,073
Néhány képlet felállításának szellemében nevezzük el ezeket a felső valószínűségeket a1,

80
00:04:42,073 --> 00:04:45,903
a2, a3 és így tovább, az alsókat pedig b1, b2, b3 és így tovább.

81
00:04:45,903 --> 00:04:49,590
És általában, ez a folyamat, ahol veszünk két különböző számtömböt,

82
00:04:49,590 --> 00:04:54,090
megfordítjuk a másodikat, majd sorba rendezzük őket különböző eltolási értékekkel,

83
00:04:54,090 --> 00:04:57,018
veszünk egy csomó páros szorzatot és összeadjuk őket,

84
00:04:57,018 --> 00:05:01,139
ez az egyik alapvető módja annak, hogy gondolkodjunk arról, mi a konvolúció.

85
00:05:01,139 --> 00:05:04,176
Tehát, hogy egy kicsit pontosabban fogalmazzuk meg,

86
00:05:04,176 --> 00:05:07,856
ezen a folyamaton keresztül csak valószínűségeket generáltunk,

87
00:05:07,856 --> 00:05:11,302
hogy kettő, három, négy, 12-ig és 12-ig láthatók legyenek,

88
00:05:11,302 --> 00:05:14,982
és ezeket úgy kaptuk meg, hogy összekevertünk egy értéklistát,

89
00:05:14,982 --> 00:05:17,084
a-t és egy másikat. értékjegyzék, b.

90
00:05:17,084 --> 00:05:20,261
A szóhasználatban azt mondanánk, hogy ennek a két sorozatnak a

91
00:05:20,261 --> 00:05:24,245
konvolúciója adja nekünk ezt az új sorozatot, a 11 értékből álló új sorozatot,

92
00:05:24,245 --> 00:05:27,120
amelyek mindegyike páronkénti szorzatok összegének tűnik.

93
00:05:27,120 --> 00:05:31,219
Ha úgy tetszik, egy másik módja annak, hogy ugyanarra a műveletre gondoljon,

94
00:05:31,219 --> 00:05:35,052
ha először hozzon létre egy táblázatot az összes páronkénti szorzatról,

95
00:05:35,052 --> 00:05:36,702
majd összeadja az összes átlót.

96
00:05:36,702 --> 00:05:39,899
Ez egy módja annak, hogy összekeverjük ezt a két számsorozatot,

97
00:05:39,899 --> 00:05:42,247
hogy egy új, 11 számból álló sorozatot kapjunk.

98
00:05:42,247 --> 00:05:46,960
Ez ugyanaz a művelet, mint a tolóablakok gondolták, csak egy másik perspektíva.

99
00:05:46,960 --> 00:05:50,314
Egy kis jelöléssel a következőképpen láthatod leírva.

100
00:05:50,314 --> 00:05:55,143
Az a és b konvolúciója, amelyet ezzel a kis csillaggal jelölünk, egy új lista,

101
00:05:55,143 --> 00:05:58,015
és ennek a lista n-edik eleme összegnek tűnik,

102
00:05:58,015 --> 00:06:02,416
és ez az összeg átmegy az összes különböző indexpáron, az i-n és a j-n,

103
00:06:02,416 --> 00:06:04,738
így az ezek az indexek egyenlők n-nel.

104
00:06:04,738 --> 00:06:10,785
Ez amolyan falat, de például ha n 6, akkor a párok, amelyeken átmegyünk, az 1 és 5,

105
00:06:10,785 --> 00:06:16,400
2 és 4, 3 és 3, 4 és 2, 5 és 1, a különböző párok, amelyek összeadódnak. 6-ra.

106
00:06:16,400 --> 00:06:21,220
De őszintén szólva, bárhogyan írja is le, a jelölés másodlagos fontosságú ahhoz képest,

107
00:06:21,220 --> 00:06:23,082
amit a folyamathoz a fejében tart.

108
00:06:23,082 --> 00:06:26,848
Itt talán segít egy szuper egyszerű példa, ahol megkérdezhetem,

109
00:06:26,848 --> 00:06:30,967
mi a konvolúciója az 1. , 2. , 3. listának és a 4. , 5. , 6. listának.

110
00:06:30,967 --> 00:06:35,452
Elképzelheti, hogy mindkét listát felveszi, megfordítja a másodikat,

111
00:06:35,452 --> 00:06:37,857
majd a fedelével kezdi egészen balra.

112
00:06:37,857 --> 00:06:41,690
Ezután az egymáshoz igazodó értékpár 1 és 4, szorozzuk meg őket,

113
00:06:41,690 --> 00:06:43,813
és ez adja a kimenetünk első tagját.

114
00:06:43,813 --> 00:06:48,143
Csúsztassa az alsó tömböt egy egységgel jobbra, az egymáshoz igazodó párok 1 és 5,

115
00:06:48,143 --> 00:06:51,169
valamint 2 és 4, szorozd meg ezeket a párokat, add össze,

116
00:06:51,169 --> 00:06:54,300
és így 13-at kapunk, a következő bejegyzést a kimenetünkben.

117
00:06:54,300 --> 00:06:57,581
Csúsztassa át a dolgokat még egyszer, és 1-szer 6-ot,

118
00:06:57,581 --> 00:07:01,591
plusz 2-szer 5-öt, plusz 3-szor 4-et veszünk, ami történetesen 28.

119
00:07:01,591 --> 00:07:05,569
Még egy dia, és 2-szer 6-ot kapunk, plusz 3-szor 5-öt,

120
00:07:05,569 --> 00:07:10,560
és így 27-et kapunk, és végül az utolsó tag 3-szor 6-nak fog kinézni.

121
00:07:10,560 --> 00:07:14,440
Ha szeretné, előhívhatja a kedvenc programozási nyelvét, és kedvenc könyvtárát,

122
00:07:14,440 --> 00:07:18,807
amely különféle numerikus műveleteket tartalmaz, és megerősítheti, hogy nem hazudok neked.

123
00:07:18,807 --> 00:07:24,880
Ha az 1, 2, 3 és 4, 5, 6 konvolúcióját felveszi, akkor valóban ezt az eredményt kapja.

124
00:07:24,880 --> 00:07:28,493
Láttunk egy olyan esetet, amikor ez természetes és kívánatos művelet,

125
00:07:28,493 --> 00:07:32,881
a valószínűségi eloszlások összeadásával, egy másik gyakori példa pedig a mozgóátlag.

126
00:07:32,881 --> 00:07:37,338
Képzeld el, hogy van egy hosszú számlistád, és veszel egy másik kisebb számlistát,

127
00:07:37,338 --> 00:07:38,788
amelyek mindegyike 1-et ad.

128
00:07:38,788 --> 00:07:43,381
Ebben az esetben csak van egy kis listám 5 értékből, és mindegyik egyenlő 15-tel.

129
00:07:43,381 --> 00:07:46,631
Aztán ha végrehajtjuk ezt a csúszóablak-konvolúciós folyamatot,

130
00:07:46,631 --> 00:07:49,983
és valahogy becsukjuk a szemünket, és a szőnyeg alá söpörjük azt,

131
00:07:49,983 --> 00:07:53,894
ami a legelején történik, ha a kisebb értéklistánk teljesen átfedésben van a

132
00:07:53,894 --> 00:07:57,347
nagyobb értékkel, akkor gondoljuk át, hogy mi az egyes kifejezések.

133
00:07:57,347 --> 00:07:59,023
a konvolúció valóban azt jelenti.

134
00:07:59,023 --> 00:08:04,117
Minden iterációnál megszorozod az adataidból származó értékeket 15-tel,

135
00:08:04,117 --> 00:08:09,707
és összeadod az összeset, ami azt jelenti, hogy ebben a kis ablakban az adatok

136
00:08:09,707 --> 00:08:10,769
átlagát veszed.

137
00:08:10,769 --> 00:08:15,160
Összességében a folyamat az eredeti adatok kiegyenlített változatát adja meg,

138
00:08:15,160 --> 00:08:18,256
és ezt módosíthatja egy másik kis számlistával kezdve,

139
00:08:18,256 --> 00:08:22,816
és amíg ez a kis lista összesen 1-et tesz ki, akkor is értelmezheti mozgóképként.

140
00:08:22,816 --> 00:08:25,653
átlagos. Az itt bemutatott példában ez a mozgóátlag

141
00:08:25,653 --> 00:08:27,781
nagyobb súlyt adna a központi értéknek.

142
00:08:27,781 --> 00:08:33,200
Ez egyben az adatok kisimított változatát is eredményezi.

143
00:08:33,200 --> 00:08:35,586
Ha ennek egyfajta kétdimenziós analógját készíti,

144
00:08:35,586 --> 00:08:38,594
akkor egy szórakoztató algoritmust ad egy adott kép elmosására.

145
00:08:38,594 --> 00:08:41,407
És azt kell mondanom, hogy az animációk, amelyeket most mutatok,

146
00:08:41,407 --> 00:08:45,216
olyan módosítások, amelyeket eredetileg egy olyan előadássorozat részeként készítettem,

147
00:08:45,216 --> 00:08:49,069
amelyet a Julia Laborral tartottam az MIT-n egy bizonyos OpenCourseWare osztály számára,

148
00:08:49,069 --> 00:08:50,887
amely képfeldolgozó egységet tartalmazott.

149
00:08:50,887 --> 00:08:54,552
Ott egy kicsit többet tettünk, hogy belemerüljünk az egész mögött meghúzódó kódba,

150
00:08:54,552 --> 00:08:56,452
így ha kíváncsi vagy, hagyok néhány linket.

151
00:08:56,452 --> 00:08:59,645
De visszagondolva erre az elmosódó példára, az történik,

152
00:08:59,645 --> 00:09:03,846
hogy megvan ez a kis 3x3-as értékrács, ami az eredeti képünk mentén halad,

153
00:09:03,846 --> 00:09:07,599
és ha nagyítunk, ezek az értékek mindegyike 19. , és mit csinálok.

154
00:09:07,599 --> 00:09:11,856
minden iterációnál az értékek mindegyikét megszorozza a megfelelő pixellel,

155
00:09:11,856 --> 00:09:13,312
amelyik tetején található.

156
00:09:13,312 --> 00:09:16,084
És természetesen az informatikában a színekre úgy gondolunk,

157
00:09:16,084 --> 00:09:18,719
mint három értékből álló kis vektorokra, amelyek a piros,

158
00:09:18,719 --> 00:09:20,400
zöld és kék komponenseket képviselik.

159
00:09:20,400 --> 00:09:24,333
Ha ezeket a kis értékeket megszorzom 1 9-eddel, és összeadom őket,

160
00:09:24,333 --> 00:09:27,092
akkor az egyes színcsatornákon átlagot kapunk,

161
00:09:27,092 --> 00:09:30,966
és a jobb oldali kép megfelelő pixelét ez az összeg határozza meg.

162
00:09:30,966 --> 00:09:35,662
Az általános hatás, ahogy ezt a kép minden egyes pixelére tesszük, az,

163
00:09:35,662 --> 00:09:38,968
hogy mindegyik beszivárog az összes szomszédjába,

164
00:09:38,968 --> 00:09:41,680
ami az eredetinél homályosabb verziót ad.

165
00:09:41,680 --> 00:09:44,740
A szóhasználatban azt mondanánk, hogy a jobb oldali kép az

166
00:09:44,740 --> 00:09:47,800
eredeti képünk egy kis értékrácsával egybeeső konvolúciója.

167
00:09:47,800 --> 00:09:51,217
Vagy technikailag talán azt kellene mondanom, hogy ez a konvolúció

168
00:09:51,217 --> 00:09:54,430
ennek a kis értékrácsnak a 180 fokkal elforgatott változatával.

169
00:09:54,430 --> 00:09:58,157
Nem mintha az számít, mikor szimmetrikus a rács, de érdemes észben tartani,

170
00:09:58,157 --> 00:10:02,326
hogy a konvolúció definíciója, amint azt a tiszta matematikai kontextusból örökölte,

171
00:10:02,326 --> 00:10:05,760
mindig arra ösztönözze Önt, hogy gondolkodjon el a második tömb körül.

172
00:10:05,760 --> 00:10:08,725
Ha ezt kissé módosítjuk, akkor más értékrács kiválasztásával

173
00:10:08,725 --> 00:10:11,059
sokkal elegánsabb elmosódási hatást érhetünk el.

174
00:10:11,059 --> 00:10:15,920
Ebben az esetben van egy kis 5x5-ös rácsom, de a különbség nem annyira a méret.

175
00:10:15,920 --> 00:10:19,316
Ha ráközelítünk, észrevesszük, hogy a középső érték sokkal nagyobb,

176
00:10:19,316 --> 00:10:22,064
mint a szélek felé eső érték, és ahonnan ez származik,

177
00:10:22,064 --> 00:10:26,010
az összes mintát egy haranggörbéből vettük, amelyet Gauss-eloszlásnak neveznek.

178
00:10:26,010 --> 00:10:31,160
Így amikor ezeket az értékeket megszorozzuk a megfelelő pixellel, amelyik tetején ülnek,

179
00:10:31,160 --> 00:10:36,367
sokkal nagyobb súlyt adunk ennek a központi pixelnek, és sokkal kevésbé a szélén lévőknek.

180
00:10:36,367 --> 00:10:40,373
És csakúgy, mint korábban, a jobb oldali megfelelő pixelt ez az összeg határozza meg.

181
00:10:40,373 --> 00:10:43,313
Mivel ezt a folyamatot minden egyes pixelnél elvégezzük,

182
00:10:43,313 --> 00:10:47,181
elmosódási hatást ad, ami sokkal hitelesebben szimulálja azt a gondolatot,

183
00:10:47,181 --> 00:10:49,760
hogy az objektívet eltünteti vagy valami hasonlót.

184
00:10:49,760 --> 00:10:53,474
De az elmosódás messze nem az egyetlen dolog, amit ezzel az ötlettel tehet.

185
00:10:53,474 --> 00:10:56,327
Például vessünk egy pillantást erre a kis értékrácsra,

186
00:10:56,327 --> 00:10:59,543
amely tartalmaz néhány pozitív számot a bal oldalon és néhány

187
00:10:59,543 --> 00:11:03,071
negatív számot a jobb oldalon, amelyeket kékre és pirosra színezünk.

188
00:11:03,071 --> 00:11:07,127
Szánjon rá egy pillanatot, hogy meg tudja-e jósolni és megérteni,

189
00:11:07,127 --> 00:11:09,769
hogy ez milyen hatással lesz a végső képre.

190
00:11:09,769 --> 00:11:13,786
Tehát ebben az esetben a képre csak szürkeárnyalatosnak fogok gondolni,

191
00:11:13,786 --> 00:11:18,082
nem pedig színesre, tehát minden képpontot három helyett csak egy szám jelöl.

192
00:11:18,082 --> 00:11:20,465
És egy dolog, amit érdemes megjegyezni, az az,

193
00:11:20,465 --> 00:11:23,102
hogy a konvolúció során negatív értékeket kaphatunk.

194
00:11:23,102 --> 00:11:27,364
Például ezen a ponton, ha nagyítunk, a kis rácsunk bal fele teljes egészében

195
00:11:27,364 --> 00:11:31,128
a fekete pixelek tetején helyezkedik el, aminek értéke nulla lenne,

196
00:11:31,128 --> 00:11:36,000
de a negatív értékek jobb fele mind a fehér képpontok tetején található, ami értéke egy.

197
00:11:36,000 --> 00:11:38,903
Tehát ha a megfelelő kifejezéseket megszorozzuk és összeadjuk,

198
00:11:38,903 --> 00:11:42,590
az eredmény nagyon negatív lesz, és ezt a jobb oldali képpel úgy jelenítem meg,

199
00:11:42,590 --> 00:11:46,046
hogy a negatív értékeket pirosra, a pozitív értékeket pedig kékre színezem.

200
00:11:46,046 --> 00:11:49,749
Egy másik dolog, amit észre kell venni, hogy ha egy olyan foltot használ,

201
00:11:49,749 --> 00:11:52,302
amely ugyanolyan színű, akkor minden nullára megy,

202
00:11:52,302 --> 00:11:54,854
mivel a mi kis rácsunkban az értékek összege nulla.

203
00:11:54,854 --> 00:11:59,231
Ez nagyban különbözik az előző két példától, ahol a mi kis rácsunk összege egy volt,

204
00:11:59,231 --> 00:12:02,990
ami lehetővé tette, hogy mozgóátlagként és így elmosódásként értelmezzük.

205
00:12:02,990 --> 00:12:06,783
Összességében ez a kis folyamat alapvetően észleli,

206
00:12:06,783 --> 00:12:11,526
hogy hol van eltérés a pixelértékben, ahogy balról jobbra mozog,

207
00:12:11,526 --> 00:12:16,560
és így egyfajta módot ad a kép függőleges széleinek feltérképezésére.

208
00:12:16,560 --> 00:12:19,766
És hasonlóképpen, ha megforgattuk a rácsot úgy,

209
00:12:19,766 --> 00:12:25,043
hogy a felülről lefelé haladva változik, ez az összes vízszintes élt felveszi,

210
00:12:25,043 --> 00:12:29,986
ami a mi kis pite lényképünk esetében igencsak démoni szemeket eredményez.

211
00:12:29,986 --> 00:12:33,698
Ezt a kisebb rácsot egyébként gyakran kernelnek is nevezik, és itt az a szépség,

212
00:12:33,698 --> 00:12:37,685
hogy egy másik kernel kiválasztásával különböző képfeldolgozási effektusokat érhet el,

213
00:12:37,685 --> 00:12:40,710
nem csak az élészlelés elmosódását, hanem például az élesítést is.

214
00:12:40,710 --> 00:12:44,545
Azok számára, akik hallottak a konvolúciós neurális hálózatról, az az ötlet,

215
00:12:44,545 --> 00:12:48,380
hogy adatokat használjanak annak kiderítésére, hogy mik legyenek a kernelek,

216
00:12:48,380 --> 00:12:51,618
amit az határozza meg, hogy a neurális hálózat mit akar észlelni.

217
00:12:51,618 --> 00:12:55,378
Egy másik dolog, amit talán fel kell emelnem, az a kimenet hossza.

218
00:12:55,378 --> 00:12:57,956
A mozgóátlagos példához hasonló eseteknél előfordulhat,

219
00:12:57,956 --> 00:13:00,257
hogy csak akkor érdemes a kifejezésekre gondolni,

220
00:13:00,257 --> 00:13:02,558
amikor mindkét ablak teljesen egymáshoz igazodik,

221
00:13:02,558 --> 00:13:05,044
vagy a képfeldolgozási példában esetleg azt szeretné,

222
00:13:05,044 --> 00:13:07,760
hogy a végső kimenet az eredetivel megegyező méretű legyen.

223
00:13:07,760 --> 00:13:09,998
A konvolúciók, mint pusztán matematikai műveletek,

224
00:13:09,998 --> 00:13:12,894
mindig olyan tömböt hoznak létre, amely nagyobb, mint a két tömb,

225
00:13:12,894 --> 00:13:16,405
amellyel elkezdte, legalábbis feltételezve, hogy az egyiknek nem egy hosszúsága.

226
00:13:16,405 --> 00:13:19,078
Csak tudd, hogy bizonyos számítástechnikai kontextusokban

227
00:13:19,078 --> 00:13:21,520
gyakran akarod szándékosan csonkolni ezt a kimenetet.

228
00:13:21,520 --> 00:13:25,812
Egy másik dolog, amit érdemes kiemelni, hogy számítástechnikai kontextusban

229
00:13:25,812 --> 00:13:30,669
az az elképzelés, hogy a kernelt körül kell forgatni, mielőtt átengednéd az eredetit,

230
00:13:30,669 --> 00:13:35,187
gyakran nagyon furcsának és szükségtelennek tűnik, de ismételten jegyezzük meg,

231
00:13:35,187 --> 00:13:38,745
hogy ez az, amit a tiszta matematikai kontextusból örököltünk.

232
00:13:38,745 --> 00:13:42,530
nagy valószínűséggel látta, hogy ez hihetetlenül természetes dolog.

233
00:13:42,530 --> 00:13:45,617
És tulajdonképpen mutathatok még egy tiszta matematikai példát,

234
00:13:45,617 --> 00:13:48,077
ahol még a programozóknak is törődniük kell ezzel,

235
00:13:48,077 --> 00:13:52,370
mert megnyitja a kaput egy sokkal gyorsabb algoritmus előtt, amely mindezeket kiszámítja.

236
00:13:52,370 --> 00:13:55,584
Ahhoz, hogy beállítsam, mit értek itt gyorsabb alatt, hadd menjek vissza,

237
00:13:55,584 --> 00:13:57,842
és húzzak fel megint egy pythont, és két különböző,

238
00:13:57,842 --> 00:13:59,579
viszonylag nagy tömböt fogok létrehozni.

239
00:13:59,579 --> 00:14:02,905
Mindegyikben százezer véletlenszerű elem lesz,

240
00:14:02,905 --> 00:14:07,575
és felmérem a convolve függvény futási idejét a numpy könyvtárból.

241
00:14:07,575 --> 00:14:10,617
És ebben az esetben több különböző iterációra futtatja,

242
00:14:10,617 --> 00:14:13,279
megpróbálja megtalálni az átlagot, és úgy tűnik,

243
00:14:13,279 --> 00:14:16,321
ezen a számítógépen legalább 4-es az átlag.87 másodperc.

244
00:14:16,321 --> 00:14:21,838
Ezzel szemben, ha a scipy könyvtártól eltérő, fftconvolve nevű függvényt használok,

245
00:14:21,838 --> 00:14:26,108
ami ugyanaz, csak másképp van megvalósítva, akkor csak 4-et vesz

246
00:14:26,108 --> 00:14:30,640
igénybe.Átlagosan 3 ezredmásodperc, tehát három nagyságrendű javulás.

247
00:14:30,640 --> 00:14:34,380
És még egyszer, bár más néven repül, ugyanazt a kimenetet adja,

248
00:14:34,380 --> 00:14:38,880
mint a másik convolve függvény, csak tesz valamit, hogy ügyesebben járjon el.

249
00:14:38,880 --> 00:14:42,471
Emlékezzen arra, hogy a valószínűségi példában azt mondtam,

250
00:14:42,471 --> 00:14:46,961
hogy a konvolúció másik módja az volt, hogy létrehozza ezt a táblázatot az

251
00:14:46,961 --> 00:14:51,570
összes páronkénti szorzatról, majd összeadja ezeket a páronkénti szorzatokat

252
00:14:51,570 --> 00:14:52,528
az átlók mentén.

253
00:14:52,528 --> 00:14:55,898
Természetesen nincs semmi konkrét a valószínűségre vonatkozóan,

254
00:14:55,898 --> 00:14:59,321
amikor két különböző számlistát von össze, és így gondolhatja át.

255
00:14:59,321 --> 00:15:02,851
Hozzon létre egy ilyen szorzótáblát az összes páronkénti szorzattal,

256
00:15:02,851 --> 00:15:06,381
majd az átló mentén minden összeg megfelel az egyik végső kimenetnek.

257
00:15:06,381 --> 00:15:10,022
Az egyik olyan kontextus, ahol ez a nézet különösen természetes,

258
00:15:10,022 --> 00:15:12,431
az az, amikor két polinomot összeszorozunk.

259
00:15:12,431 --> 00:15:18,939
Például hadd vegyem a már meglévő kis rácsot, és cseréljem le a felső tagokat 1,

260
00:15:18,939 --> 00:15:23,920
2x és 3x négyzetre, a többi tagot pedig 4, 5x és 6x négyzetre.

261
00:15:23,920 --> 00:15:26,397
Most gondolja át, mit jelent az, amikor ezeket a különböző

262
00:15:26,397 --> 00:15:28,664
páronkénti termékeket hozzuk létre a két lista között.

263
00:15:28,664 --> 00:15:33,090
Amit csinálsz, az lényegében az általam felírt két polinom teljes szorzatának

264
00:15:33,090 --> 00:15:36,098
kiterjesztése, majd amikor összeadod az átló mentén,

265
00:15:36,098 --> 00:15:40,467
amely megfelel az összes hasonló kifejezés összegyűjtésének, ami elég ügyes,

266
00:15:40,467 --> 00:15:44,780
egy polinom kiterjesztése és a hasonló kifejezések összegyűjtése pontosan a

267
00:15:44,780 --> 00:15:46,937
ugyanaz a folyamat, mint a konvolúció.

268
00:15:46,937 --> 00:15:50,523
De ez lehetővé teszi számunkra, hogy valami nagyon menőt tegyünk,

269
00:15:50,523 --> 00:15:52,642
mert gondoljunk arra, amit itt mondunk.

270
00:15:52,642 --> 00:15:56,785
Azt mondjuk, ha veszünk két különböző függvényt, és összeszorozzuk őket,

271
00:15:56,785 --> 00:15:59,510
ami egy egyszerű pontszerű művelet, az ugyanaz,

272
00:15:59,510 --> 00:16:03,766
mintha először mindegyikből kivontuk volna az együtthatókat, feltételezve,

273
00:16:03,766 --> 00:16:08,761
hogy ezek polinomok, majd konvolúciót vettünk volna ezekből. az együtthatók két listája.

274
00:16:08,761 --> 00:16:13,771
Az teszi ezt olyan érdekessé, hogy a konvolúciók elvileg sokkal bonyolultabbnak tűnnek,

275
00:16:13,771 --> 00:16:16,960
mint az egyszerű szorzás, és nem csak fogalmilag értem,

276
00:16:16,960 --> 00:16:20,661
hogy nehezebb elgondolkodni rajtuk, hanem számítási szempontból,

277
00:16:20,661 --> 00:16:23,337
több lépést igényel a konvolúció végrehajtása,

278
00:16:23,337 --> 00:16:26,070
mint egy két különböző lista pontszerű szorzata.

279
00:16:26,070 --> 00:16:29,590
Például tegyük fel, hogy adtam neked két igazán nagy polinomot,

280
00:16:29,590 --> 00:16:32,230
mondjuk mindegyik száz különböző együtthatóval,

281
00:16:32,230 --> 00:16:36,355
akkor ha a szorzás módja ennek a szorzatnak a kibontása volt, akkor tudod,

282
00:16:36,355 --> 00:16:39,546
hogy kitöltöd a teljes 100x100-as páros szorzatok rácsát,

283
00:16:39,546 --> 00:16:42,846
amihez szükség lenne végezzen el 10 000 különböző terméket,

284
00:16:42,846 --> 00:16:46,696
majd amikor összegyűjti az összes hasonló kifejezést az átlók mentén,

285
00:16:46,696 --> 00:16:49,666
az egy újabb körülbelül 10 000 műveletből álló halmaz.

286
00:16:49,666 --> 00:16:52,945
Általánosabban a nyelvhasználatban azt mondanánk,

287
00:16:52,945 --> 00:16:57,864
hogy az algoritmus n négyzetes jelentése O két n méretű lista esetén, úgy,

288
00:16:57,864 --> 00:17:00,816
hogy a műveletek száma arányos n négyzetével.

289
00:17:00,816 --> 00:17:04,865
Másrészt, ha két polinomra gondolok a kimeneteik szempontjából,

290
00:17:04,865 --> 00:17:08,408
például mintavételezzük az értékeket néhány bemenetnél,

291
00:17:08,408 --> 00:17:12,521
akkor a szorzásuk csak annyi műveletet igényel, ahány minta van,

292
00:17:12,521 --> 00:17:17,013
mivel ez ismét egy pontszerű művelet, és polinomokkal csak annyi kell.

293
00:17:17,013 --> 00:17:21,126
véges sok mintát, hogy vissza lehessen állítani az együtthatókat.

294
00:17:21,152 --> 00:17:25,214
Például két kimenet elegendő egy lineáris polinom egyedi meghatározásához.

295
00:17:25,214 --> 00:17:29,360
Három kimenet elegendő lenne egy másodfokú polinom egyedi meghatározásához.

296
00:17:29,360 --> 00:17:33,044
És általában, ha n különböző kimenetet ismer, az elegendő egy n

297
00:17:33,044 --> 00:17:36,901
különböző együtthatóval rendelkező polinom egyedi meghatározásához.

298
00:17:36,901 --> 00:17:41,188
Vagy ha úgy tetszik, ezt az egyenletrendszerek nyelvén is megfogalmazhatjuk.

299
00:17:41,188 --> 00:17:43,555
Képzeld el, azt mondom, hogy van néhány polinomom,

300
00:17:43,555 --> 00:17:46,480
de nem mondom meg, mik az együtthatók, ezek rejtélyek számodra.

301
00:17:46,480 --> 00:17:50,666
Példánkban ezt úgy gondolhatja, mint azt a terméket, amelyet megpróbálunk kitalálni.

302
00:17:50,666 --> 00:17:53,947
Akkor tegyük fel, hogy azt mondom, hogy csak megmondom,

303
00:17:53,947 --> 00:17:58,635
mik lennének ennek a polinomnak a kimenetei, ha különféle bemeneteket írnál be,

304
00:17:58,635 --> 00:18:03,791
például 0, 1, 2, 3, be és on, és adok neked annyi egyenletet, mint vannak ismeretleneid.

305
00:18:03,791 --> 00:18:07,245
Ez még egy lineáris egyenletrendszer is, szóval ez szép.

306
00:18:07,245 --> 00:18:11,137
És elvileg ennek elegendőnek kell lennie az együtthatók visszanyeréséhez.

307
00:18:11,137 --> 00:18:15,775
Tehát az algoritmus durva felvázolása az lenne, ha két számlistát össze akar vonni,

308
00:18:15,775 --> 00:18:19,253
akkor úgy kezeli őket, mintha két polinom együtthatói lennének.

309
00:18:19,253 --> 00:18:22,351
Elegendő kimeneten mintát vesz ezekből a polinomokból,

310
00:18:22,351 --> 00:18:26,351
pontonként megszorozza ezeket a mintákat, majd megoldja a rendszert az

311
00:18:26,351 --> 00:18:31,364
együtthatók visszanyerésére, mint a konvolúció megtalálásának rejtélyes, hátsó kapujában.

312
00:18:31,364 --> 00:18:35,324
És ahogy eddig legalábbis kijelentettem, néhányan joggal panaszkodhatnának,

313
00:18:35,324 --> 00:18:37,564
hogy &quot;Grant, ez egy idióta terv&quot;.

314
00:18:37,564 --> 00:18:42,108
Mert egyrészt pusztán ezeknek a mintáknak a kiszámítása az egyik általunk ismert

315
00:18:42,108 --> 00:18:46,316
polinomra már n négyzetes művelet nagyságát veszi fel, nem beszélve arról,

316
00:18:46,316 --> 00:18:51,085
hogy ennek a rendszernek a megoldása minden bizonnyal olyan nehéz lesz számításilag,

317
00:18:51,085 --> 00:18:52,656
mint a konvolúció elvégzése.

318
00:18:52,656 --> 00:18:56,440
Tehát bizonyosan megvan ez a kapcsolat a szorzás és a konvolúció között,

319
00:18:56,440 --> 00:19:01,054
de az összes bonyolultság az egyik nézőpontból a másikba történő fordítás során történik.

320
00:19:01,054 --> 00:19:04,837
De van egy trükk, és azok, akik ismerik a Fourier-transzformációkat

321
00:19:04,837 --> 00:19:07,673
és az FFT-algoritmust, láthatják, hogy ez hol tart.

322
00:19:07,673 --> 00:19:12,176
Ha nem jártas ezekben a témákban, a mondanivalóm teljesen váratlannak tűnhet.

323
00:19:12,176 --> 00:19:15,824
Csak tudd, hogy vannak bizonyos utak, amelyeket bejárhattál volna a matematikában,

324
00:19:15,824 --> 00:19:17,582
amelyek miatt ez inkább elvárható lépés.

325
00:19:17,582 --> 00:19:20,697
Alapvetően az az elképzelés, hogy itt szabadon választhatunk.

326
00:19:20,697 --> 00:19:23,929
Ha ahelyett, hogy valamilyen tetszőleges bemeneti készleten (például 0,

327
00:19:23,929 --> 00:19:26,219
1, 2, 3, be és on) végezne kiértékelést, úgy dönt,

328
00:19:26,219 --> 00:19:30,080
hogy a komplex számok egy nagyon speciálisan kiválasztott halmazán végez kiértékelést.

329
00:19:30,080 --> 00:19:32,996
Pontosabban azokat, amelyek egyenletesen ülnek az egységkörön,

330
00:19:32,996 --> 00:19:34,894
amelyeket az egység gyökereinek nevezünk.

331
00:19:34,894 --> 00:19:37,364
Ez egy barátságosabb rendszert ad nekünk.

332
00:19:37,364 --> 00:19:40,076
Az alapötlet az, hogy ha találunk egy olyan számot,

333
00:19:40,076 --> 00:19:44,248
ahol a hatalom felvétele beleesik ebbe a kerékpározási mintába, az azt jelenti,

334
00:19:44,248 --> 00:19:48,681
hogy az általunk generált rendszernek sok redundanciája lesz az Ön által kiszámított

335
00:19:48,681 --> 00:19:51,393
különböző feltételek mellett, és ha okosak vagyunk,

336
00:19:51,393 --> 00:19:55,252
hogyan Ha kihasználja ezt a redundanciát, sok munkát megspórolhat magának.

337
00:19:55,252 --> 00:19:59,168
Ennek a kimeneti halmaznak, amit írtam, van egy speciális neve,

338
00:19:59,168 --> 00:20:02,166
az együtthatók diszkrét Fourier-transzformációja.

339
00:20:02,166 --> 00:20:05,368
És ha többet szeretne megtudni, tulajdonképpen egy másik előadást

340
00:20:05,368 --> 00:20:09,103
tartottam ugyanarra a Julia MIT órára, a diszkrét Fourier-transzformációkról.

341
00:20:09,103 --> 00:20:12,229
És van egy igazán kiváló videó is a redukálható csatornán,

342
00:20:12,229 --> 00:20:16,521
amely a gyors Fourier-transzformációról szól, amely egy algoritmus ezek gyorsabb

343
00:20:16,521 --> 00:20:17,263
kiszámítására.

344
00:20:17,263 --> 00:20:20,752
A Veritasium is nemrégiben készített egy nagyon jó videót az FFT-n,

345
00:20:20,752 --> 00:20:21,984
így sok lehetőséged van.

346
00:20:21,984 --> 00:20:24,786
És ez a gyors algoritmus valóban a lényeg számunkra.

347
00:20:24,786 --> 00:20:29,323
A redundancia miatt is létezik egy módszer, amellyel az együtthatóktól az összes

348
00:20:29,323 --> 00:20:33,972
kimenethez lehet eljutni, ahol ahelyett, hogy n négyzetes műveletet hajtana végre,

349
00:20:33,972 --> 00:20:37,836
az n művelet logjának n-szeresét hajtja végre, ami sok. sokkal jobb,

350
00:20:37,836 --> 00:20:39,293
ha nagy listákra léptetsz.

351
00:20:39,293 --> 00:20:42,386
És ami fontos, ez az fft algoritmus mindkét irányban működik.

352
00:20:42,386 --> 00:20:45,515
Azt is lehetővé teszi, hogy a kimenetekről az együtthatókra lépjen.

353
00:20:45,515 --> 00:20:49,054
Tehát az egészet összeadva tekintsük vissza az algoritmus vázlatát.

354
00:20:49,054 --> 00:20:52,673
Most már azt mondhatjuk, hogy amikor két hosszú számlistát kapsz,

355
00:20:52,673 --> 00:20:56,786
és fel akarod venni a konvolúciójukat, először számítsd ki mindegyik gyors

356
00:20:56,786 --> 00:21:01,502
Fourier-transzformációját, amit a fejedben úgy gondolhatsz, mintha úgy kezelnéd őket.

357
00:21:01,502 --> 00:21:06,053
ezek egy polinom együtthatói, és egy nagyon speciálisan kiválasztott ponthalmazban

358
00:21:06,053 --> 00:21:06,766
értékelik ki.

359
00:21:06,766 --> 00:21:11,283
Ezután szorozzuk meg az imént kapott két eredményt pontszerűen, ami szép és gyors,

360
00:21:11,283 --> 00:21:14,657
majd hajtsunk végre egy inverz gyors Fourier-transzformációt,

361
00:21:14,657 --> 00:21:18,847
és ez az általunk keresett konvolúció kiszámításának sunyi backdoor módszere.

362
00:21:18,847 --> 00:21:22,957
Ezúttal azonban csak n/n log n műveletet tartalmaz.

363
00:21:22,957 --> 00:21:24,865
Ez nagyon klassz nekem!

364
00:21:24,865 --> 00:21:27,989
Ez a nagyon specifikus kontextus, ahol a konvolúciók megjelennek,

365
00:21:27,989 --> 00:21:31,443
megszorozva két polinomot, megnyitja a kaput egy olyan algoritmus előtt,

366
00:21:31,443 --> 00:21:34,235
amely mindenhol releváns, ahol konvolúciók merülhetnek fel.

367
00:21:34,235 --> 00:21:36,529
Ha valószínűségi eloszlásokat szeretne hozzáadni,

368
00:21:36,529 --> 00:21:38,822
végezzen nagy képfeldolgozást, bármi legyen is az.

369
00:21:38,822 --> 00:21:42,856
És azt hiszem, ez egy jó példa arra, hogy miért kell izgulni, amikor azt látja,

370
00:21:42,856 --> 00:21:47,294
hogy a matematikában egy művelet vagy koncepció megjelenik sok látszólag nem kapcsolódó

371
00:21:47,294 --> 00:21:47,798
területen.

372
00:21:47,798 --> 00:21:51,967
Ha szeretnél egy kis házi feladatot, itt van valami, amire szórakoztató elgondolkodni.

373
00:21:51,967 --> 00:21:55,750
Magyarázza el, hogy amikor két különböző számot szorozunk, csak a közönséges szorzást,

374
00:21:55,750 --> 00:21:59,185
ahogyan mindannyian az általános iskolában tanuljuk, akkor az, amit csinálunk,

375
00:21:59,185 --> 00:22:01,924
alapvetően ezeknek a számoknak a számjegyei közötti konvolúció.

376
00:22:01,924 --> 00:22:04,862
Van néhány további lépés a hordozókkal és hasonlókkal,

377
00:22:04,862 --> 00:22:06,785
de az alapvető lépés egy konvolúció.

378
00:22:06,785 --> 00:22:09,636
A gyors algoritmus létezésének fényében ez azt jelenti,

379
00:22:09,636 --> 00:22:13,302
hogy ha két nagyon nagy egész számunk van, akkor létezik olyan módszer,

380
00:22:13,302 --> 00:22:16,051
amellyel megtalálhatjuk a terméküket, amely gyorsabb,

381
00:22:16,051 --> 00:22:18,240
mint az általános iskolában tanult módszer.

382
00:22:18,240 --> 00:22:21,308
Ez ahelyett, hogy n-ből O négyzetes műveletet igényelne,

383
00:22:21,308 --> 00:22:25,291
csak n log n-ből O-t igényel, ami nem is úgy tűnik, hogy lehetséges lenne.

384
00:22:25,291 --> 00:22:28,895
A bökkenő az, hogy mielőtt ez valóban hasznos lenne a gyakorlatban,

385
00:22:28,895 --> 00:22:31,280
a számoknak teljesen szörnyűnek kell lenniük.

386
00:22:31,280 --> 00:22:34,445
De mégis jó, hogy létezik ilyen algoritmus.

387
00:22:34,445 --> 00:22:37,479
A következőkben figyelmünket a folytonos esetre fordítjuk,

388
00:22:37,479 --> 00:22:40,000
különös tekintettel a valószínűségi eloszlásokra.

