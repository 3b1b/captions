1
00:00:00,000 --> 00:00:03,633
Припустімо, я даю вам два різні списки чисел або, можливо, дві різні функції, 

2
00:00:03,633 --> 00:00:07,360
і я прошу вас подумати про всі способи, якими ви можете поєднати ці два списки, 

3
00:00:07,360 --> 00:00:11,320
щоб отримати новий список чисел, або поєднати дві функції, щоб отримати нову функцію.

4
00:00:12,120 --> 00:00:14,582
Можливо, один простий спосіб, який спадає на думку, 

5
00:00:14,582 --> 00:00:16,760
це просто скласти їх разом термін за терміном.

6
00:00:17,160 --> 00:00:19,920
Так само з функціями ви можете додати всі відповідні виходи.

7
00:00:20,540 --> 00:00:23,258
У подібному ключі ви також можете помножити два списки 

8
00:00:23,258 --> 00:00:25,680
термін за терміном і зробити те саме з функціями.

9
00:00:26,360 --> 00:00:29,692
Але є ще один вид комбінації, такий же фундаментальний, 

10
00:00:29,692 --> 00:00:33,500
як обидва, але набагато рідше обговорюваний, відомий як згортка.

11
00:00:34,080 --> 00:00:36,625
Але на відміну від попередніх двох випадків, це не те, 

12
00:00:36,625 --> 00:00:39,820
що просто успадковано від операції, яку ви можете виконати з числами.

13
00:00:39,980 --> 00:00:44,700
Це щось справді нове для контексту списків чисел або комбінування функцій.

14
00:00:45,320 --> 00:00:48,558
Вони з’являються скрізь, вони всюдисущі в обробці зображень, 

15
00:00:48,558 --> 00:00:52,434
це основна конструкція в теорії ймовірності, вони часто використовуються 

16
00:00:52,434 --> 00:00:54,930
під час розв’язування диференціальних рівнянь, 

17
00:00:54,930 --> 00:00:57,532
і в одному контексті ви майже напевно це бачили, 

18
00:00:57,532 --> 00:01:00,240
якщо ні під цією назвою множить два поліноми разом.

19
00:01:00,740 --> 00:01:04,780
Для тих, хто займається візуальними поясненнями, це особливо чудова тема, 

20
00:01:04,780 --> 00:01:09,420
тому що шаблонне визначення в ізоляції та без контексту може виглядати дещо лякаюче, 

21
00:01:09,420 --> 00:01:13,133
але якщо ми приділимо час, щоб справді розгадати, що воно говорить, 

22
00:01:13,133 --> 00:01:16,627
а перед тим фактично мотивувати, чому ви б хотіли щось подібне, 

23
00:01:16,627 --> 00:01:18,320
це неймовірно красива операція.

24
00:01:18,960 --> 00:01:21,298
І я повинен визнати, що я дійсно дещо навчився, 

25
00:01:21,298 --> 00:01:23,540
збираючи візуальні елементи для цього проекту.

26
00:01:23,540 --> 00:01:27,843
У випадку згортання двох різних функцій я намагався придумати різні способи, 

27
00:01:27,843 --> 00:01:32,818
якими можна уявити, що це може означати, і з одним із них у мене виник невеликий момент, 

28
00:01:32,818 --> 00:01:36,284
чому нормальні розподіли відіграють таку роль. вони ймовірно, 

29
00:01:36,284 --> 00:01:38,520
чому це така природна форма для функції.

30
00:01:39,020 --> 00:01:41,520
Але я забігаю вперед, там багато налаштувань для цього.

31
00:01:41,840 --> 00:01:45,901
У цьому відео наша основна увага буде зосереджена лише на дискретному випадку, і, 

32
00:01:45,901 --> 00:01:50,260
зокрема, на розробці дуже несподіваного, але дуже розумного алгоритму для їх обчислення.

33
00:01:50,260 --> 00:01:54,480
І я витягну обговорення безперервного випадку в другу частину.

34
00:01:58,580 --> 00:02:01,562
Дуже спокусливо розпочати приклади обробки зображень, 

35
00:02:01,562 --> 00:02:05,317
оскільки вони візуально найбільш інтригуючі, але є кілька тонкощів, 

36
00:02:05,317 --> 00:02:09,239
які роблять процес обробки зображень менш репрезентативним для звивин, 

37
00:02:09,239 --> 00:02:12,663
тому замість цього давайте почнемо з ймовірності, і, зокрема, 

38
00:02:12,663 --> 00:02:15,700
один із найпростіших прикладів, про який, я впевнений, 

39
00:02:15,700 --> 00:02:20,395
кожен тут думав колись у своєму житті, а це кидання пари кубиків і визначення шансів 

40
00:02:20,395 --> 00:02:21,500
побачити різні суми.

41
00:02:22,460 --> 00:02:24,460
І ви можете сказати, не проблема, не проблема.

42
00:02:24,680 --> 00:02:28,230
Кожен із ваших двох кубиків має шість різних можливих результатів, 

43
00:02:28,230 --> 00:02:31,144
що дає нам загалом 36 різних можливих пар результатів, 

44
00:02:31,144 --> 00:02:35,860
і якщо ми просто переглянемо їх усі, то зможемо порахувати, скільки пар мають певну суму.

45
00:02:36,600 --> 00:02:41,150
І якщо розташувати всі пари в подібній сітці, то одна дуже приємна річ полягає в тому, 

46
00:02:41,150 --> 00:02:45,440
що всі пари, які мають постійну суму, видно вздовж однієї з цих різних діагоналей.

47
00:02:45,440 --> 00:02:49,680
Тож простий підрахунок кількості на кожній із цих діагоналей покаже вам, 

48
00:02:49,680 --> 00:02:52,120
наскільки ймовірно ви побачите певну суму.

49
00:02:53,220 --> 00:02:55,777
І я б сказав, дуже добре, дуже добре, але чи можете ви 

50
00:02:55,777 --> 00:02:58,660
придумати якісь інші способи візуалізації того самого питання?

51
00:02:59,300 --> 00:03:02,969
Інші образи, які можуть прийти в голову, щоб подумати про всі різні пари, 

52
00:03:02,969 --> 00:03:04,060
які мають задану суму?

53
00:03:04,860 --> 00:03:07,980
І, можливо, хтось із вас підніме руку і скаже: «Так, у мене є».

54
00:03:08,280 --> 00:03:12,121
Скажімо, ви уявляєте ці два різні набори можливостей кожен у рядку, 

55
00:03:12,121 --> 00:03:13,760
але ви гортаєте другий рядок.

56
00:03:13,760 --> 00:03:16,716
Таким чином усі різні пари, які в сумі становлять сім, 

57
00:03:16,716 --> 00:03:18,760
вишиковуються вертикально таким чином.

58
00:03:19,360 --> 00:03:23,020
І якщо ми зсунемо цей нижній рядок до кінця вправо, тоді унікальна пара, 

59
00:03:23,020 --> 00:03:26,280
яка в сумі додає два, очі змії, будуть єдиними, які вирівнюються.

60
00:03:26,620 --> 00:03:29,164
І якщо я переставлю це на одну одиницю праворуч, пари, 

61
00:03:29,164 --> 00:03:32,080
які вирівнюються, є двома різними парами, які в сумі дають три.

62
00:03:32,880 --> 00:03:37,029
І загалом, різні значення зміщення цього нижнього масиву, які пам’ятають, 

63
00:03:37,029 --> 00:03:41,460
що я мав спочатку перевернути, виявляють усі різні пари, які мають задану суму.

64
00:03:44,820 --> 00:03:48,705
Що стосується ймовірнісних питань, це все ще не особливо цікаво, тому що все, 

65
00:03:48,705 --> 00:03:52,640
що ми робимо, це підраховуємо, скільки результатів є в кожній із цих категорій.

66
00:03:52,980 --> 00:03:58,120
Але це з неявним припущенням, що для кожного з цих облич є однакові шанси з’явитися.

67
00:03:58,360 --> 00:04:01,620
Але що, якби я сказав вам, що у мене є спеціальний набір неоднорідних кубиків?

68
00:04:02,060 --> 00:04:04,774
Можливо, блакитний кубик має свій власний набір чисел, 

69
00:04:04,774 --> 00:04:07,341
що описує ймовірності для кожної грані, що випадає, 

70
00:04:07,341 --> 00:04:09,760
а червоний кубик має свій унікальний набір чисел.

71
00:04:10,299 --> 00:04:13,941
У такому випадку, якби ви хотіли обчислити, скажімо, ймовірність побачити двійку, 

72
00:04:13,941 --> 00:04:16,872
ви б помножили ймовірність того, що синій кубик дорівнює одиниці, 

73
00:04:16,872 --> 00:04:19,360
на ймовірність того, що червоний кубик дорівнює одиниці.

74
00:04:19,360 --> 00:04:24,744
І щоб отримати шанси побачити трійку, ви дивитеся на дві різні пари, де це можливо, 

75
00:04:24,744 --> 00:04:29,680
і знову множите відповідні ймовірності, а потім додаєте ці два добутки разом.

76
00:04:30,100 --> 00:04:33,375
Подібним чином шанси побачити четвірку включають множення 

77
00:04:33,375 --> 00:04:36,820
разом трьох різних пар можливостей і додавання їх усіх разом.

78
00:04:36,820 --> 00:04:42,289
І в дусі створення деяких формул давайте назвемо ці найвищі ймовірності a1, 

79
00:04:42,289 --> 00:04:45,960
a2, a3 і так далі, а нижні — b1, b2, b3 і так далі.

80
00:04:46,400 --> 00:04:51,321
І загалом, цей процес, коли ми беремо два різні масиви чисел, повертаємо другий, 

81
00:04:51,321 --> 00:04:54,420
а потім шикуємо їх за різними значеннями зміщення, 

82
00:04:54,420 --> 00:04:59,767
беремо купу попарних добутків і додаємо їх, це один із основні способи уявлення про те, 

83
00:04:59,767 --> 00:05:00,740
що таке згортка.

84
00:05:00,740 --> 00:05:05,736
Щоб сформулювати це трохи точніше, за допомогою цього процесу ми просто 

85
00:05:05,736 --> 00:05:11,219
згенерували ймовірності для того, щоб побачити два, три, чотири, і далі до 12, 

86
00:05:11,219 --> 00:05:16,980
і ми отримали їх, змішавши разом один список значень, a та інший список значень, б.

87
00:05:17,440 --> 00:05:21,666
На жаргоні ми б сказали, що згортка цих двох послідовностей дає нам цю нову 

88
00:05:21,666 --> 00:05:24,336
послідовність, нову послідовність з 11 значень, 

89
00:05:24,336 --> 00:05:27,340
кожне з яких виглядає як деяка сума попарних добутків.

90
00:05:27,340 --> 00:05:32,078
Якщо ви віддаєте перевагу, інший спосіб, яким ви можете подумати про ту саму операцію, 

91
00:05:32,078 --> 00:05:36,980
це спочатку створити таблицю всіх попарних добутків, а потім підсумувати всі ці діагоналі.

92
00:05:37,460 --> 00:05:40,669
Знову ж таки, це спосіб змішування цих двох послідовностей чисел, 

93
00:05:40,669 --> 00:05:42,760
щоб отримати нову послідовність з 11 чисел.

94
00:05:43,240 --> 00:05:46,460
Це та сама операція, що і розсувні вікна, просто інша перспектива.

95
00:05:47,140 --> 00:05:49,800
Додавши до цього невеликі позначки, ось як ви можете це побачити.

96
00:05:50,220 --> 00:05:55,173
Згортка a і b, позначена цією маленькою зірочкою, є новим списком, 

97
00:05:55,173 --> 00:06:01,680
і n-й елемент цього списку виглядає як сума, і ця сума охоплює всі різні пари індексів, 

98
00:06:01,680 --> 00:06:04,860
i і j, так що сума ці індекси дорівнюють n.

99
00:06:05,280 --> 00:06:10,709
Це наче ковток, але, наприклад, якщо n дорівнює 6, то пари, які ми розглядаємо, 

100
00:06:10,709 --> 00:06:15,800
це 1 і 5, 2 і 4, 3 і 3, 4 і 2, 5 і 1, усі різні пари, які складаються до 6.

101
00:06:16,620 --> 00:06:19,578
Але чесно кажучи, як би ви це не записали, нотація має другорядне значення 

102
00:06:19,578 --> 00:06:22,340
порівняно з візуалом, який ви можете тримати в голові під час процесу.

103
00:06:23,280 --> 00:06:26,511
Тут, можливо, допоможе зробити дуже простий приклад, 

104
00:06:26,511 --> 00:06:30,780
де я можу запитати вас, яка згортка списку 1, 2, 3 зі списком 4, 5, 6.

105
00:06:31,480 --> 00:06:34,270
Ви можете собі уявити, як ви берете обидва ці списки, 

106
00:06:34,270 --> 00:06:37,680
гортаєте другий, а потім починаєте з його кришки до кінця ліворуч.

107
00:06:38,180 --> 00:06:40,409
Тоді пара значень, які вирівнюються, це 1 і 4, 

108
00:06:40,409 --> 00:06:43,540
перемножуємо їх разом, і це дає нам перший член нашого результату.

109
00:06:43,960 --> 00:06:47,121
Посуньте цей нижній масив на одну одиницю вправо, пари, 

110
00:06:47,121 --> 00:06:50,564
які вирівнюються, це 1 і 5, а також 2 і 4, помножте ці пари, 

111
00:06:50,564 --> 00:06:54,460
додайте їх разом, і це дасть нам 13, наступний запис у наших виводах.

112
00:06:54,960 --> 00:06:58,089
Пересуньте все ще раз, і ми візьмемо 1 помножити на 6, 

113
00:06:58,089 --> 00:07:01,560
плюс 2 помножити на 5, плюс 3 помножити на 4, що дорівнює 28.

114
00:07:02,020 --> 00:07:05,985
Ще один слайд, і ми отримаємо 2 помножити на 6 плюс 3 помножити на 5, 

115
00:07:05,985 --> 00:07:10,120
і це дає нам 27, і нарешті останній член виглядатиме як 3 помножити на 6.

116
00:07:10,660 --> 00:07:13,360
Якщо ви хочете, ви можете вибрати будь-яку вашу улюблену мову 

117
00:07:13,360 --> 00:07:17,106
програмування та вашу улюблену бібліотеку, яка містить різноманітні числові операції, 

118
00:07:17,106 --> 00:07:18,980
і ви можете підтвердити, що я вам не брешу.

119
00:07:18,980 --> 00:07:24,480
Якщо ви візьмете згортку 1, 2, 3 проти 4, 5, 6, це справді результат, який ви отримаєте.

120
00:07:25,920 --> 00:07:29,100
Ми бачили один випадок, коли це природна і бажана операція, 

121
00:07:29,100 --> 00:07:33,660
що додає до розподілу ймовірностей, і іншим поширеним прикладом було б ковзне середнє.

122
00:07:34,080 --> 00:07:38,680
Уявіть, що у вас є довгий список чисел, і ви берете ще один менший список чисел, 

123
00:07:38,680 --> 00:07:39,760
які в сумі дають 1.

124
00:07:40,100 --> 00:07:44,060
У цьому випадку я маю невеликий список із 5 значень, і всі вони дорівнюють 15-му.

125
00:07:44,060 --> 00:07:48,940
Тоді, якщо ми зробимо цей процес згортання ковзного вікна, закриємо очі та заховаємо те, 

126
00:07:48,940 --> 00:07:53,326
що відбувається на самому початку, як тільки наш менший список значень повністю 

127
00:07:53,326 --> 00:07:58,261
збігається з більшим, подумайте про те, що означає кожен термін у цьому згортка насправді 

128
00:07:58,261 --> 00:07:58,700
означає.

129
00:07:59,400 --> 00:08:05,290
На кожній ітерації ви множите кожне значення з ваших даних на 15 і додаєте їх усі разом, 

130
00:08:05,290 --> 00:08:10,520
що означає, що ви берете середнє значення своїх даних у цьому маленькому вікні.

131
00:08:11,100 --> 00:08:15,192
Загалом, процес дає вам згладжену версію вихідних даних, і ви можете змінити це, 

132
00:08:15,192 --> 00:08:18,930
починаючи з іншого невеликого списку чисел, і доки цей невеликий список у 

133
00:08:18,930 --> 00:08:22,720
сумі дорівнює 1, ви все одно можете інтерпретувати це як рухливий середній.

134
00:08:23,400 --> 00:08:27,760
У наведеному тут прикладі ковзне середнє надає більшу вагу центральному значенню.

135
00:08:28,420 --> 00:08:30,800
Це також призводить до згладженої версії даних.

136
00:08:33,140 --> 00:08:35,502
Якщо ви зробите такий собі двовимірний аналог, 

137
00:08:35,502 --> 00:08:38,720
ви отримаєте цікавий алгоритм для розмивання певного зображення.

138
00:08:38,720 --> 00:08:42,821
І я повинен сказати, що анімації, які я збираюся показати, змінені з того, 

139
00:08:42,821 --> 00:08:45,446
що я спочатку створив для частини серії лекцій, 

140
00:08:45,446 --> 00:08:49,111
які я проводив у Julia Lab в MIT для певного класу OpenCourseWare, 

141
00:08:49,111 --> 00:08:51,080
який включав блок обробки зображень.

142
00:08:51,560 --> 00:08:54,332
Там ми зробили трохи більше, щоб зануритися в код, що стоїть за всім цим, 

143
00:08:54,332 --> 00:08:56,280
тому, якщо вам цікаво, я залишу вам кілька посилань.

144
00:08:56,620 --> 00:08:59,850
Але повернемося до цього прикладу розмиття. Що відбувається, 

145
00:08:59,850 --> 00:09:04,510
я маю маленьку сітку значень 3x3, яка рухається вздовж нашого оригінального зображення, 

146
00:09:04,510 --> 00:09:07,688
і якщо ми збільшимо масштаб, кожне з цих значень буде 19-м, 

147
00:09:07,688 --> 00:09:12,243
і що я роблю на кожній ітерації кожне з цих значень множиться на відповідний піксель, 

148
00:09:12,243 --> 00:09:13,620
над яким воно знаходиться.

149
00:09:13,900 --> 00:09:17,752
І, звичайно, в інформатиці ми розглядаємо кольори як маленькі вектори трьох значень, 

150
00:09:17,752 --> 00:09:20,200
що представляють червоний, зелений і синій компоненти.

151
00:09:20,560 --> 00:09:24,050
Коли я множу всі ці маленькі значення на 19 і додаю їх разом, 

152
00:09:24,050 --> 00:09:27,259
це дає нам середнє значення по кожному колірному каналу, 

153
00:09:27,259 --> 00:09:31,200
і відповідний піксель для зображення праворуч визначається як ця сума.

154
00:09:31,940 --> 00:09:35,698
Загальний ефект, оскільки ми робимо це для кожного окремого пікселя на зображенні, 

155
00:09:35,698 --> 00:09:38,641
полягає в тому, що кожен піксель перетікає в усіх своїх сусідів, 

156
00:09:38,641 --> 00:09:40,860
що дає нам більш розмиту версію, ніж оригінальна.

157
00:09:41,720 --> 00:09:44,730
На жаргоні ми б сказали, що зображення праворуч є згорткою 

158
00:09:44,730 --> 00:09:47,740
нашого оригінального зображення з невеликою сіткою значень.

159
00:09:48,140 --> 00:09:50,487
Або більш технічно, можливо, я повинен сказати, 

160
00:09:50,487 --> 00:09:54,400
що це згортка з поверненою на 180 градусів версією цієї маленької сітки значень.

161
00:09:54,620 --> 00:09:58,608
Не те, щоб це мало значення, коли сітка є симетричною, але просто варто пам’ятати, 

162
00:09:58,608 --> 00:10:01,972
що визначення згортки, успадковане з чистого математичного контексту, 

163
00:10:01,972 --> 00:10:05,240
має завжди спонукати вас подумати про гортання цього другого масиву.

164
00:10:05,960 --> 00:10:09,815
Якщо ми трохи змінимо це, ми зможемо отримати набагато елегантніший ефект розмиття, 

165
00:10:09,815 --> 00:10:11,100
вибравши іншу сітку значень.

166
00:10:11,440 --> 00:10:13,681
У цьому випадку у мене невелика сітка 5x5, але 

167
00:10:13,681 --> 00:10:15,780
відмінність полягає не стільки в її розмірі.

168
00:10:15,980 --> 00:10:20,004
Якщо ми збільшимо масштаб, то помітимо, що значення в середині набагато більше, 

169
00:10:20,004 --> 00:10:22,469
ніж значення до країв, і це відбувається з того, 

170
00:10:22,469 --> 00:10:25,940
що всі вони взяті з дзвоноподібної кривої, відомої як розподіл Гауса.

171
00:10:26,800 --> 00:10:30,138
Таким чином, коли ми множимо всі ці значення на відповідний піксель, 

172
00:10:30,138 --> 00:10:34,154
над яким вони сидять, ми надаємо набагато більшої ваги цьому центральному пікселю, 

173
00:10:34,154 --> 00:10:36,380
а тим, що знаходяться на краю, набагато менше.

174
00:10:36,800 --> 00:10:40,560
І так само, як і раніше, відповідний піксель праворуч визначається як ця сума.

175
00:10:41,320 --> 00:10:44,165
Оскільки ми виконуємо цей процес для кожного окремого пікселя, 

176
00:10:44,165 --> 00:10:47,100
це дає ефект розмиття, який набагато достовірніше імітує поняття 

177
00:10:47,100 --> 00:10:49,720
розміщення вашого об’єктива поза фокусом або щось подібне.

178
00:10:49,900 --> 00:10:53,360
Але розмиття - далеко не єдине, що ви можете зробити з цією ідеєю.

179
00:10:53,800 --> 00:10:56,435
Подивіться, наприклад, на цю невелику сітку значень, 

180
00:10:56,435 --> 00:11:00,264
яка містить кілька додатних чисел ліворуч і кілька від’ємних чисел праворуч, 

181
00:11:00,264 --> 00:11:02,900
які я розфарбую синім і червоним кольором відповідно.

182
00:11:03,640 --> 00:11:06,701
Знайдіть хвилинку, щоб перевірити, чи можете ви передбачити та зрозуміти, 

183
00:11:06,701 --> 00:11:08,480
який вплив це матиме на кінцеве зображення.

184
00:11:10,720 --> 00:11:14,070
Тож у цьому випадку я буду думати про зображення як у градаціях сірого, 

185
00:11:14,070 --> 00:11:18,120
а не як кольорове, тому кожен піксель буде представлено лише одним числом, а не трьома.

186
00:11:18,440 --> 00:11:21,621
І одна річ, яку варто зауважити, це те, що коли ми виконуємо цю згортку, 

187
00:11:21,621 --> 00:11:23,060
можна отримати від’ємні значення.

188
00:11:23,060 --> 00:11:26,775
Наприклад, у цій точці тут, якщо ми збільшимо ліву половину нашої маленької сітки, 

189
00:11:26,775 --> 00:11:29,237
вона буде повністю розташована поверх чорних пікселів, 

190
00:11:29,237 --> 00:11:32,281
які матимуть нульове значення, але права половина від’ємних значень 

191
00:11:32,281 --> 00:11:35,460
буде розташована поверх білих пікселів, що буде мають значення одиниці.

192
00:11:36,180 --> 00:11:39,330
Отже, коли ми перемножуємо відповідні члени та додаємо їх разом, 

193
00:11:39,330 --> 00:11:42,627
результати будуть дуже негативними, і я відображаю це на зображенні 

194
00:11:42,627 --> 00:11:46,360
праворуч — це фарбую від’ємні значення в червоний колір, а додатні — у синій.

195
00:11:46,880 --> 00:11:49,918
Ще одна річ, яку слід зауважити, це те, що коли ви перебуваєте на патчі, 

196
00:11:49,918 --> 00:11:53,497
який має один колір, усе стає нульовим, оскільки сума значень у нашій маленькій сітці 

197
00:11:53,497 --> 00:11:54,080
дорівнює нулю.

198
00:11:55,180 --> 00:11:57,375
Це дуже відрізняється від двох попередніх прикладів, 

199
00:11:57,375 --> 00:12:00,813
де сума нашої маленької сітки була одиницею, що дозволило нам інтерпретувати її як 

200
00:12:00,813 --> 00:12:02,180
ковзне середнє і, отже, розмиття.

201
00:12:03,640 --> 00:12:07,268
Загалом, цей маленький процес виявляє будь-які коливання значення 

202
00:12:07,268 --> 00:12:10,951
пікселів під час руху зліва направо, і тому він дає вам своєрідний 

203
00:12:10,951 --> 00:12:13,920
спосіб виявити всі вертикальні краї вашого зображення.

204
00:12:16,500 --> 00:12:19,903
І так само, якщо ми обертаємо цю сітку так, щоб вона змінювалася, 

205
00:12:19,903 --> 00:12:24,389
коли ви рухаєтеся від верху до низу, це буде підбиратися на всіх горизонтальних краях, 

206
00:12:24,389 --> 00:12:28,514
що у випадку з нашим маленьким зображенням пиріжкової істоти призведе до гарних 

207
00:12:28,514 --> 00:12:29,340
демонічних очей.

208
00:12:30,400 --> 00:12:33,981
Цю меншу сітку, до речі, часто називають ядром, і принадність тут полягає в тому, 

209
00:12:33,981 --> 00:12:37,520
що просто вибравши інше ядро, ви можете отримати різні ефекти обробки зображень, 

210
00:12:37,520 --> 00:12:40,840
не лише розмиваючи виявлення країв, але й такі речі, як збільшення різкості.

211
00:12:40,840 --> 00:12:44,690
Для тих із вас, хто чув про згорточну нейронну мережу, ідея полягає в тому, 

212
00:12:44,690 --> 00:12:48,642
щоб використовувати дані, щоб з’ясувати, якими мають бути ядра в першу чергу, 

213
00:12:48,642 --> 00:12:51,480
як це визначається тим, що нейронна мережа хоче виявити.

214
00:12:52,760 --> 00:12:55,520
Інша річ, яку я, можливо, повинен згадати, це довжина виводу.

215
00:12:55,820 --> 00:12:59,640
Для чогось на кшталт прикладу ковзного середнього ви можете думати лише про терміни, 

216
00:12:59,640 --> 00:13:03,639
коли обидва вікна повністю вирівнюються одне з одним, або у прикладі обробки зображення, 

217
00:13:03,639 --> 00:13:07,280
можливо, ви хочете, щоб кінцевий результат мав такий самий розмір, як і оригінал.

218
00:13:07,280 --> 00:13:10,839
Тепер згортки як чиста математична операція завжди створюють масив, 

219
00:13:10,839 --> 00:13:14,190
більший за два масиви, з яких ви почали, принаймні припускаючи, 

220
00:13:14,190 --> 00:13:16,180
що один із них не має довжини одиниці.

221
00:13:16,720 --> 00:13:19,246
Просто знайте, що в певних контекстах інформатики 

222
00:13:19,246 --> 00:13:21,520
ви часто хочете навмисно скоротити цей вихід.

223
00:13:24,720 --> 00:13:27,383
Ще одна річ, яку варто підкреслити, полягає в тому, 

224
00:13:27,383 --> 00:13:30,558
що в контексті інформатики це поняття гортати ядро перед тим, 

225
00:13:30,558 --> 00:13:35,116
як ви дасте йому пройти через оригінал, часто здається дуже дивним і просто непотрібним, 

226
00:13:35,116 --> 00:13:39,520
але знову зауважте, що це те, що успадковано від чистого математичного контексту, де, 

227
00:13:39,520 --> 00:13:42,440
як ми бачив з ймовірністю, що це неймовірно природна річ.

228
00:13:43,020 --> 00:13:46,005
І фактично я можу показати вам ще один чистий математичний приклад, 

229
00:13:46,005 --> 00:13:48,156
про який навіть програмісти повинні піклуватися, 

230
00:13:48,156 --> 00:13:52,020
тому що він відкриває двері для набагато швидшого алгоритму для обчислення всього цього.

231
00:13:52,620 --> 00:13:54,950
Щоб налаштувати те, що я маю на увазі під швидшим тут, 

232
00:13:54,950 --> 00:13:57,449
дозвольте мені повернутися і знову витягнути якийсь пітон, 

233
00:13:57,449 --> 00:13:59,780
і я збираюся створити два різні відносно великі масиви.

234
00:13:59,940 --> 00:14:03,188
У кожному з них буде сто тисяч випадкових елементів, 

235
00:14:03,188 --> 00:14:07,540
і я збираюся оцінити час виконання функції convolve з бібліотеки numpy.

236
00:14:08,180 --> 00:14:11,094
І в цьому випадку він запускає його для кількох різних ітерацій, 

237
00:14:11,094 --> 00:14:13,291
намагається знайти середнє значення, і виглядає, 

238
00:14:13,291 --> 00:14:16,520
що на цьому комп’ютері принаймні середнє значення становить 4.87 секунд.

239
00:14:16,960 --> 00:14:21,360
На відміну від цього, якщо я використовую іншу функцію з бібліотеки scipy 

240
00:14:21,360 --> 00:14:25,581
під назвою fftconvolve, яка є тією самою, лише реалізованою по-іншому, 

241
00:14:25,581 --> 00:14:30,160
що займає лише 4.У середньому 3 мілісекунди, тобто покращення на три порядки.

242
00:14:30,160 --> 00:14:33,209
І знову ж таки, незважаючи на те, що він літає під іншою назвою, 

243
00:14:33,209 --> 00:14:35,976
він видає той самий результат, що й інша функція convolve, 

244
00:14:35,976 --> 00:14:39,120
але він просто робить щось, щоб зробити це більш розумним способом.

245
00:14:42,200 --> 00:14:45,693
Пам’ятайте, як у прикладі ймовірності я сказав, що ще один спосіб, 

246
00:14:45,693 --> 00:14:49,968
яким ви можете думати про згортку, це створити цю таблицю всіх попарних добутків, 

247
00:14:49,968 --> 00:14:52,680
а потім додати ці попарні добутки вздовж діагоналей.

248
00:14:53,660 --> 00:14:55,836
Звичайно, немає нічого конкретного щодо ймовірності, 

249
00:14:55,836 --> 00:14:59,040
коли ви складаєте два різні списки чисел, ви можете думати про це таким чином.

250
00:14:59,040 --> 00:15:02,272
Створіть таку таблицю множення з усіма попарними продуктами, 

251
00:15:02,272 --> 00:15:06,460
а потім кожна сума по діагоналі відповідає одному з ваших кінцевих результатів.

252
00:15:07,600 --> 00:15:12,800
Один контекст, де цей погляд особливо природний, це коли ви множите разом два поліноми.

253
00:15:13,300 --> 00:15:17,714
Наприклад, дозвольте мені взяти маленьку сітку, яку ми вже маємо, 

254
00:15:17,714 --> 00:15:23,600
і замінити верхні члени на 1, 2x і 3x у квадраті, а інші члени на 4, 5x і 6x у квадраті.

255
00:15:24,000 --> 00:15:26,491
А тепер подумайте, що це означає, коли ми створюємо 

256
00:15:26,491 --> 00:15:28,840
всі ці різні попарні продукти між двома списками.

257
00:15:29,040 --> 00:15:33,297
Те, що ви робите, по суті, розширюєте повний добуток двох поліномів, 

258
00:15:33,297 --> 00:15:36,876
які я записав, а потім, коли ви додаєте вздовж діагоналі, 

259
00:15:36,876 --> 00:15:41,071
яка відповідає збору всіх подібних доданків, що є досить акуратним, 

260
00:15:41,071 --> 00:15:46,440
розширюючи поліном і збираючи подібні доданки, це точно той самий процес, що й згортка.

261
00:15:47,740 --> 00:15:52,340
Але це дозволяє нам робити щось дуже круте, тому що подумайте про те, що ми тут говоримо.

262
00:15:52,340 --> 00:15:56,974
Ми говоримо, що якщо ви берете дві різні функції та перемножуєте їх разом, 

263
00:15:56,974 --> 00:16:00,002
що є простою поточковою операцією, це те ж саме, 

264
00:16:00,002 --> 00:16:04,266
що якби ви спочатку витягли коефіцієнти з кожної з них, припускаючи, 

265
00:16:04,266 --> 00:16:08,840
що вони є поліномами, а потім зробили згортку цих два списки коефіцієнтів.

266
00:16:09,620 --> 00:16:13,483
Що робить це таким цікавим, так це те, що згортки в принципі здаються набагато 

267
00:16:13,483 --> 00:16:17,200
складнішими, ніж просте множення, і я маю на увазі не просто концептуально, 

268
00:16:17,200 --> 00:16:21,407
що про них важче думати, я маю на увазі, що з обчислювальної точки зору для виконання 

269
00:16:21,407 --> 00:16:25,760
згортки потрібно більше кроків, ніж для виконання поточковий добуток двох різних списків.

270
00:16:26,319 --> 00:16:30,352
Наприклад, скажімо, я дав вам два справді великі поліноми, скажімо, 

271
00:16:30,352 --> 00:16:34,206
кожен із сотнею різних коефіцієнтів, тоді, якби ви їх помножили, 

272
00:16:34,206 --> 00:16:38,831
щоб розширити цей добуток, який ви знаєте, заповнивши всю цю сітку 100 на 100 

273
00:16:38,831 --> 00:16:43,337
попарних добутків, що вимагатиме від вас виконайте 10 000 різних продуктів, 

274
00:16:43,337 --> 00:16:47,191
а потім, коли ви збираєте всі подібні терміни вздовж діагоналей, 

275
00:16:47,191 --> 00:16:49,860
це ще один набір приблизно з 10 000 операцій.

276
00:16:50,700 --> 00:16:54,934
У більш загальному жаргоні ми б сказали, що алгоритм є O з n у квадраті, 

277
00:16:54,934 --> 00:16:57,950
що означає для двох списків розміром n таким чином, 

278
00:16:57,950 --> 00:17:01,140
що кількість масштабів операцій пропорційна квадрату n.

279
00:17:01,820 --> 00:17:06,295
З іншого боку, якщо я думаю про два поліноми в термінах їхніх виходів, наприклад, 

280
00:17:06,295 --> 00:17:08,915
вибірка їхніх значень на кількох вхідних даних, 

281
00:17:08,915 --> 00:17:12,517
тоді їх множення потребує лише стільки операцій, скільки вибірок, 

282
00:17:12,517 --> 00:17:17,210
оскільки це знову ж таки поточкова операція, а з поліномами вам потрібно лише кінцеву 

283
00:17:17,210 --> 00:17:20,540
кількість вибірок, щоб мати можливість відновити коефіцієнти.

284
00:17:20,540 --> 00:17:25,060
Наприклад, двох виходів достатньо, щоб однозначно визначити лінійний поліном.

285
00:17:25,660 --> 00:17:29,400
Трьох вихідних даних було б достатньо, щоб однозначно визначити квадратичний поліном.

286
00:17:29,640 --> 00:17:33,575
І взагалі, якщо ви знаєте n різних виходів, цього достатньо, 

287
00:17:33,575 --> 00:17:37,640
щоб однозначно вказати поліном, який має n різних коефіцієнтів.

288
00:17:37,780 --> 00:17:40,720
Або, якщо хочете, ми могли б сформулювати це мовою систем рівнянь.

289
00:17:41,200 --> 00:17:43,689
Уявіть, що я кажу вам, що у мене є якийсь поліном, 

290
00:17:43,689 --> 00:17:46,520
але я не кажу вам, які це коефіцієнти, це для вас загадка.

291
00:17:46,700 --> 00:17:50,800
У нашому прикладі ви можете подумати про це як про продукт, який ми намагаємося з’ясувати.

292
00:17:50,800 --> 00:17:55,664
Тоді припустімо, я кажу, що я просто скажу вам, якими були б результати цього полінома, 

293
00:17:55,664 --> 00:18:00,308
якби ви ввели різні вхідні дані, такі як 0, 1, 2, 3, і далі, і я дам вам достатньо, 

294
00:18:00,308 --> 00:18:03,460
щоб у вас було стільки рівнянь, скільки у вас є невідомі.

295
00:18:04,140 --> 00:18:07,340
Це навіть лінійна система рівнянь, так що це добре.

296
00:18:07,780 --> 00:18:10,900
Принаймні в принципі цього має бути достатньо для відновлення коефіцієнтів.

297
00:18:11,740 --> 00:18:14,644
Таким чином, приблизний нарис алгоритму буде такий: щоразу, 

298
00:18:14,644 --> 00:18:19,000
коли ви хочете згорнути два списки чисел, ви розглядаєте їх як коефіцієнти двох поліномів.

299
00:18:19,420 --> 00:18:22,856
Ви відбираєте ці поліноми з достатньою кількістю виходів, 

300
00:18:22,856 --> 00:18:26,293
множите ці зразки поточково, а потім розв’язуєте систему, 

301
00:18:26,293 --> 00:18:30,560
щоб відновити коефіцієнти як прихований бекдорний спосіб знайти згортку.

302
00:18:31,420 --> 00:18:35,640
І як я вже казав, принаймні, дехто з вас міг би справедливо скаржитися: 

303
00:18:35,640 --> 00:18:37,340
«Гранте, це ідіотський план».

304
00:18:37,580 --> 00:18:42,027
Тому що, з одного боку, просто обчислення всіх цих зразків для одного з поліномів, 

305
00:18:42,027 --> 00:18:45,081
які ми знаємо, уже займає порядок n квадратних операцій, 

306
00:18:45,081 --> 00:18:48,563
не кажучи вже про те, що розв’язування цієї системи, безперечно, 

307
00:18:48,563 --> 00:18:52,100
буде обчислювально таким же складним, як просто виконання згортки.

308
00:18:52,600 --> 00:18:56,232
Отже, звичайно, у нас є зв’язок між множенням і згортками, 

309
00:18:56,232 --> 00:19:00,480
але вся складність виникає при перекладі з однієї точки зору на іншу.

310
00:19:01,600 --> 00:19:06,018
Але є хитрість, і ті з вас, хто знає про перетворення Фур’є та алгоритм БПФ, 

311
00:19:06,018 --> 00:19:07,740
можуть зрозуміти, куди це йде.

312
00:19:07,740 --> 00:19:10,532
Якщо ви не знайомі з цими темами, те, що я збираюся сказати, 

313
00:19:10,532 --> 00:19:12,180
може здатися абсолютно несподіваним.

314
00:19:12,260 --> 00:19:15,256
Просто знайте, що є певні шляхи, якими ви могли б пройти в математиці, 

315
00:19:15,256 --> 00:19:16,860
які роблять цей крок більш очікуваним.

316
00:19:17,720 --> 00:19:20,360
В основному ідея полягає в тому, що ми маємо тут свободу вибору.

317
00:19:20,540 --> 00:19:25,310
Якщо замість довільного набору вхідних даних, таких як 0, 1, 2, 3, і далі, 

318
00:19:25,310 --> 00:19:29,700
ви обираєте обчислення спеціально вибраного набору комплексних чисел.

319
00:19:30,240 --> 00:19:34,840
Зокрема ті, які рівномірно розташовані на одиничному колі, відомі як корені єдності.

320
00:19:35,200 --> 00:19:36,880
Це дає нам більш дружню систему.

321
00:19:38,360 --> 00:19:40,806
Основна ідея полягає в тому, що, знайшовши число, 

322
00:19:40,806 --> 00:19:44,623
у якому відбір його потужностей потрапляє в цей циклічний шаблон, це означає, 

323
00:19:44,623 --> 00:19:48,294
що система, яку ми створюємо, матиме багато надлишкових у різних термінах, 

324
00:19:48,294 --> 00:19:52,551
які ви обчислюєте, і якщо ми розумно розберемося, як Ви використовуєте цю надмірність, 

325
00:19:52,551 --> 00:19:54,460
ви можете заощадити собі багато роботи.

326
00:19:56,020 --> 00:19:59,175
Цей набір результатів, який я написав, має спеціальну назву, 

327
00:19:59,175 --> 00:20:02,280
він називається дискретним перетворенням Фур’є коефіцієнтів.

328
00:20:02,500 --> 00:20:05,800
І якщо ви хочете дізнатися більше, я прочитав ще одну лекцію для того самого класу 

329
00:20:05,800 --> 00:20:09,140
Джулії в Массачусетському технологічному інституті про дискретні перетворення Фур’є.

330
00:20:09,220 --> 00:20:12,041
Також на каналі reducible є справді чудове відео, 

331
00:20:12,041 --> 00:20:17,120
де розповідається про швидке перетворення Фур’є, яке є алгоритмом для швидшого обчислення.

332
00:20:17,480 --> 00:20:20,379
Крім того, Veritasium нещодавно зняв дуже гарне відео про ШПФ, 

333
00:20:20,379 --> 00:20:21,760
тому у вас є багато варіантів.

334
00:20:22,260 --> 00:20:24,660
І цей швидкий алгоритм справді є головним для нас.

335
00:20:25,120 --> 00:20:28,486
Знову ж таки, через усю цю надлишковість існує метод переходу від 

336
00:20:28,486 --> 00:20:32,823
коефіцієнтів до всіх цих виходів, де замість виконання операцій порядку n квадратів, 

337
00:20:32,823 --> 00:20:35,935
ви виконуєте порядок порядку n помножених на log n операцій, 

338
00:20:35,935 --> 00:20:39,200
що є набагато набагато краще, якщо ви масштабуєте великі списки.

339
00:20:39,660 --> 00:20:42,540
І що важливо, цей алгоритм FFT працює в обох напрямках.

340
00:20:42,700 --> 00:20:45,480
Це також дозволяє переходити від результатів до коефіцієнтів.

341
00:20:46,220 --> 00:20:49,060
Отже, об’єднавши все це, давайте поглянемо на схему нашого алгоритму.

342
00:20:49,420 --> 00:20:53,541
Тепер ми можемо сказати, що коли вам дають два довгі списки чисел і ви хочете 

343
00:20:53,541 --> 00:20:57,662
взяти їх згортку, спочатку обчисліть швидке перетворення Фур’є кожного з них, 

344
00:20:57,662 --> 00:21:01,941
що в глибині вашої свідомості ви можете просто подумати як трактувати їх як вони 

345
00:21:01,941 --> 00:21:06,380
є коефіцієнтами полінома та оцінюють його за дуже спеціально вибраним набором точок.

346
00:21:06,899 --> 00:21:10,494
Потім помножте два результати, які ви щойно отримали, по точках, 

347
00:21:10,494 --> 00:21:14,586
що добре та швидко, а потім виконайте зворотне швидке перетворення Фур’є, 

348
00:21:14,586 --> 00:21:18,900
і ви отримаєте прихований бекдорний спосіб обчислення згортки, який ми шукали.

349
00:21:19,040 --> 00:21:22,240
Але цього разу він включає лише O з n log n операцій.

350
00:21:23,139 --> 00:21:24,740
Для мене це дуже круто!

351
00:21:25,120 --> 00:21:29,414
Цей дуже специфічний контекст, де згортки з’являються, множачи два поліноми, 

352
00:21:29,414 --> 00:21:34,100
відкриває двері для алгоритму, який актуальний скрізь, де можуть з’являтися згортки.

353
00:21:34,180 --> 00:21:38,054
Якщо ви хочете додати розподіли ймовірностей, виконайте велику обробку зображень, 

354
00:21:38,054 --> 00:21:39,000
якою б вона не була.

355
00:21:39,220 --> 00:21:42,300
І я вважаю, що це такий гарний приклад того, чому ви повинні радіти, 

356
00:21:42,300 --> 00:21:45,917
коли бачите, що якась операція чи концепція в математиці з’являється в багатьох, 

357
00:21:45,917 --> 00:21:47,480
здавалося б, непов’язаних областях.

358
00:21:48,480 --> 00:21:51,500
Якщо ви хочете трохи домашнього завдання, ось щось, про що цікаво подумати.

359
00:21:51,720 --> 00:21:56,377
Поясніть, чому коли ви множите два різні числа, просто звичайне множення, 

360
00:21:56,377 --> 00:22:01,980
як ми всі вчимося в початковій школі, те, що ви робите, є згорткою між цифрами цих чисел.

361
00:22:02,500 --> 00:22:06,460
Є деякі додаткові кроки з переносом тощо, але основним кроком є згортка.

362
00:22:07,280 --> 00:22:09,997
У світлі існування швидкого алгоритму це означає, 

363
00:22:09,997 --> 00:22:14,455
що якщо у вас є два дуже великі цілі числа, то існує спосіб знайти їхній продукт, 

364
00:22:14,455 --> 00:22:17,880
який є швидшим, ніж метод, який ми вивчаємо в початковій школі.

365
00:22:18,140 --> 00:22:22,730
Що замість O з n квадратичних операцій вимагає лише O з n log n, 

366
00:22:22,730 --> 00:22:24,920
що навіть не здається можливим.

367
00:22:25,380 --> 00:22:28,675
Заковика в тому, що перш ніж це дійсно стане корисним на практиці, 

368
00:22:28,675 --> 00:22:30,840
ваші цифри повинні бути абсолютно жахливими.

369
00:22:31,220 --> 00:22:35,340
Але все одно круто, що такий алгоритм існує.

370
00:22:35,340 --> 00:22:37,577
Далі ми звернемо нашу увагу на неперервний випадок 

371
00:22:37,577 --> 00:22:39,640
з особливим акцентом на розподілі ймовірностей.

