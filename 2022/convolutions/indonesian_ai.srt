1
00:00:00,000 --> 00:00:04,480
Misalkan saya memberi Anda dua daftar angka yang berbeda, atau mungkin dua fungsi yang berbeda, dan saya

2
00:00:04,480 --> 00:00:08,400
meminta Anda memikirkan semua cara untuk menggabungkan kedua daftar tersebut untuk mendapatkan daftar angka baru, atau

3
00:00:08,400 --> 00:00:14,000
menggabungkan kedua fungsi tersebut untuk mendapatkan fungsi baru. . Mungkin salah satu cara sederhana yang terlintas

4
00:00:14,000 --> 00:00:18,640
dalam pikiran adalah dengan menjumlahkannya istilah demi istilah. Begitu pula dengan fungsinya, Anda dapat menambahkan semua

5
00:00:18,640 --> 00:00:24,000
output yang sesuai. Dengan cara yang sama, Anda juga dapat mengalikan dua daftar suku demi suku

6
00:00:24,000 --> 00:00:28,720
dan melakukan hal yang sama dengan fungsinya. Namun ada jenis kombinasi lain yang

7
00:00:28,720 --> 00:00:33,840
sama mendasarnya dengan keduanya, namun jarang dibahas, yang dikenal sebagai konvolusi.

8
00:00:33,840 --> 00:00:38,240
Namun tidak seperti dua kasus sebelumnya, ini bukanlah sesuatu yang hanya diwarisi dari operasi yang dapat

9
00:00:38,240 --> 00:00:43,360
Anda lakukan terhadap angka. Ini adalah sesuatu yang benar-benar baru untuk konteks daftar angka

10
00:00:43,360 --> 00:00:49,280
atau fungsi penggabungan. Mereka muncul di mana-mana, mereka ada di mana-mana dalam pemrosesan gambar,

11
00:00:49,280 --> 00:00:53,760
ini adalah konstruksi inti dalam teori probabilitas, mereka banyak digunakan dalam menyelesaikan persamaan diferensial,

12
00:00:53,760 --> 00:00:58,240
dan satu konteks di mana Anda hampir pasti pernah melihatnya, jika tidak dengan

13
00:00:58,240 --> 00:01:03,440
nama ini, mengalikan dua polinomial. Sebagai seseorang yang berkecimpung dalam bidang penjelasan visual, ini adalah

14
00:01:03,440 --> 00:01:08,800
topik yang sangat bagus, karena definisi yang dirumuskan secara terpisah dan tanpa konteks bisa terlihat agak

15
00:01:08,800 --> 00:01:14,080
mengintimidasi, namun jika kita meluangkan waktu untuk benar-benar membongkar apa yang dikatakannya, dan sebelum itu benar-benar

16
00:01:14,080 --> 00:01:18,800
memotivasi alasannya Anda pasti menginginkan sesuatu seperti ini, ini adalah operasi yang luar biasa indah.

17
00:01:18,800 --> 00:01:22,880
Dan harus saya akui, saya sebenarnya belajar sedikit saat menyusun visual untuk proyek

18
00:01:22,880 --> 00:01:26,960
ini. Dalam kasus menggabungkan dua fungsi yang berbeda, saya mencoba memikirkan cara berbeda

19
00:01:26,960 --> 00:01:30,720
untuk menggambarkan apa artinya, dan dengan salah satu dari mereka saya punya sedikit

20
00:01:30,720 --> 00:01:35,840
momen aha mengapa distribusi normal memainkan peran itu. kemungkinan besar mereka melakukannya, mengapa

21
00:01:35,840 --> 00:01:40,320
itu merupakan bentuk alami untuk suatu fungsi. Tapi saya terlalu terburu-buru, ada banyak

22
00:01:40,320 --> 00:01:44,800
pengaturan untuk itu. Dalam video ini, fokus utama kita hanyalah pada kasus terpisah,

23
00:01:44,800 --> 00:01:49,920
dan khususnya membangun algoritma yang sangat tidak terduga namun sangat cerdas untuk menghitungnya.

24
00:01:49,920 --> 00:01:54,400
Dan pembahasan kasus lanjutan ini akan saya tarik menjadi bagian kedua.

25
00:01:57,840 --> 00:02:03,120
Sangat menggoda untuk membuka diri dengan contoh pemrosesan gambar, karena secara visual paling menarik,

26
00:02:03,120 --> 00:02:06,880
namun ada beberapa kerumitan yang membuat kasus pemrosesan gambar kurang mewakili konvolusi secara

27
00:02:06,880 --> 00:02:11,760
keseluruhan, jadi mari kita mulai dengan probabilitas, dan khususnya salah satu contoh paling sederhana

28
00:02:11,760 --> 00:02:15,520
yang saya yakin semua orang di sini pernah memikirkannya pada suatu saat dalam

29
00:02:15,520 --> 00:02:20,320
hidup mereka, yaitu melempar sepasang dadu dan mencari tahu peluang untuk melihat berbagai

30
00:02:20,320 --> 00:02:25,600
jumlah yang berbeda. Dan Anda mungkin berkata, bukan masalah, bukan masalah. Masing-masing dari dua dadu Anda

31
00:02:25,600 --> 00:02:31,600
memiliki enam kemungkinan hasil yang berbeda, yang memberi kita total 36 kemungkinan pasangan hasil yang berbeda,

32
00:02:31,600 --> 00:02:35,600
dan jika kita melihat semuanya, kita dapat menghitung berapa banyak pasangan yang memiliki jumlah tertentu.

33
00:02:36,240 --> 00:02:41,120
Dan menyusun semua pasangan dalam kotak seperti ini, satu hal yang cukup menyenangkan adalah semua pasangan

34
00:02:41,120 --> 00:02:47,040
yang memiliki jumlah konstan terlihat di sepanjang salah satu diagonal yang berbeda. Jadi, menghitung berapa banyak

35
00:02:47,040 --> 00:02:51,920
yang ada pada masing-masing diagonal tersebut akan memberi tahu Anda seberapa besar kemungkinan Anda melihat jumlah tertentu.

36
00:02:52,880 --> 00:02:57,760
Dan menurut saya, sangat bagus, sangat bagus, tetapi bisakah Anda memikirkan cara lain untuk memvisualisasikan pertanyaan

37
00:02:57,760 --> 00:03:03,120
yang sama? Gambaran lain yang dapat terlintas dalam pikiran saat memikirkan semua pasangan berbeda yang memiliki jumlah

38
00:03:03,120 --> 00:03:08,800
tertentu? Dan mungkin salah satu dari Anda mengangkat tangan dan berkata, ya, saya punya. Katakanlah Anda membayangkan dua

39
00:03:08,800 --> 00:03:14,560
rangkaian kemungkinan berbeda ini masing-masing dalam satu baris, tetapi Anda membalik baris kedua tersebut. Dengan begitu

40
00:03:14,560 --> 00:03:20,160
semua pasangan berbeda yang berjumlah tujuh berbaris secara vertikal seperti ini. Dan jika kita

41
00:03:20,160 --> 00:03:24,880
geser baris terbawah itu ke kanan, maka hanya pasangan unik yang berjumlah dua, mata

42
00:03:24,880 --> 00:03:29,680
ular, yang sejajar. Dan jika saya urutkan satu unit ke kanan, pasangan yang sejajar

43
00:03:29,680 --> 00:03:35,440
adalah dua pasangan berbeda yang berjumlah tiga. Dan secara umum, nilai offset berbeda dari

44
00:03:35,440 --> 00:03:40,320
array bawah ini, ingat saya harus membaliknya terlebih dahulu, mengungkapkan semua pasangan berbeda yang memiliki

45
00:03:40,320 --> 00:03:48,800
jumlah tertentu. Sejauh menyangkut pertanyaan probabilitas, hal ini masih kurang menarik, karena yang

46
00:03:48,800 --> 00:03:53,120
kami lakukan hanyalah menghitung berapa banyak hasil yang ada di masing-masing kategori ini.

47
00:03:53,120 --> 00:03:57,280
Tapi itu dengan asumsi implisit bahwa ada peluang yang sama untuk masing-masing wajah ini

48
00:03:57,280 --> 00:04:02,240
muncul. Tapi bagaimana jika saya bilang saya punya satu set dadu khusus yang tidak seragam? Mungkin

49
00:04:02,240 --> 00:04:06,800
dadu biru mempunyai kumpulan angkanya sendiri yang menggambarkan probabilitas setiap wajah yang muncul, dan

50
00:04:06,800 --> 00:04:11,920
dadu merah mempunyai kumpulan angka uniknya sendiri. Dalam hal ini, jika Anda ingin mengetahui,

51
00:04:11,920 --> 00:04:17,360
katakanlah, peluang munculnya angka dua, Anda perlu mengalikan peluang munculnya dadu biru dengan probabilitas satu

52
00:04:17,360 --> 00:04:22,000
kali peluang munculnya dadu merah dengan angka satu. Dan untuk peluang melihat angka tiga,

53
00:04:22,000 --> 00:04:26,880
Anda melihat dua pasangan berbeda yang memungkinkan, dan sekali lagi, kalikan probabilitas yang

54
00:04:26,880 --> 00:04:32,240
sesuai, lalu jumlahkan kedua hasil kali tersebut. Demikian pula, peluang melihat angka

55
00:04:32,240 --> 00:04:36,320
empat melibatkan mengalikan tiga pasang kemungkinan berbeda dan menjumlahkan semuanya.

56
00:04:36,320 --> 00:04:41,360
Dan dalam semangat membuat beberapa rumus, beri nama probabilitas teratas ini a1, a2, a3, dan

57
00:04:41,360 --> 00:04:48,000
seterusnya, dan beri nama probabilitas terbawah b1, b2, b3, dan seterusnya. Dan secara umum, proses ini,

58
00:04:48,000 --> 00:04:52,080
dimana kita mengambil dua susunan angka yang berbeda, membalik susunan angka yang kedua, dan kemudian

59
00:04:52,080 --> 00:04:56,160
menyejajarkannya pada berbagai nilai offset yang berbeda, mengambil sekumpulan hasil perkalian berpasangan dan menjumlahkannya,

60
00:04:56,160 --> 00:05:00,960
itulah salah satu proses yang paling penting. cara mendasar untuk berpikir tentang apa itu konvolusi.

61
00:05:00,960 --> 00:05:08,960
Jadi untuk menjelaskannya lebih tepatnya, melalui proses ini, kita hanya menghasilkan probabilitas untuk melihat

62
00:05:08,960 --> 00:05:13,840
dua, tiga, empat, terus menerus hingga 12, dan kita mendapatkannya dengan menggabungkan satu daftar

63
00:05:13,840 --> 00:05:20,080
nilai, a, dan lainnya. daftar nilai, b. Dalam istilahnya, kita dapat mengatakan bahwa konvolusi kedua

64
00:05:20,080 --> 00:05:25,600
rangkaian tersebut memberi kita rangkaian baru ini, rangkaian baru yang terdiri dari 11 nilai, yang masing-masing

65
00:05:25,600 --> 00:05:30,160
terlihat seperti penjumlahan perkalian berpasangan. Jika mau, cara lain untuk melakukan operasi yang sama

66
00:05:30,160 --> 00:05:36,240
adalah dengan terlebih dahulu membuat tabel semua hasil kali berpasangan, lalu menjumlahkan semua

67
00:05:36,240 --> 00:05:41,120
diagonalnya. Sekali lagi, itu adalah cara menggabungkan dua rangkaian angka ini untuk menghasilkan rangkaian

68
00:05:41,120 --> 00:05:46,400
11 angka baru. Ini adalah operasi yang sama seperti yang dipikirkan oleh jendela geser, hanya perspektif lain.

69
00:05:46,960 --> 00:05:51,280
Dengan memberikan sedikit notasi, beginilah cara Anda melihatnya tertulis. Konvolusi a dan b, dilambangkan

70
00:05:51,280 --> 00:05:57,200
dengan tanda bintang kecil ini, adalah sebuah daftar baru, dan elemen ke-n dari daftar tersebut terlihat seperti sebuah

71
00:05:57,200 --> 00:06:03,440
penjumlahan, dan jumlah tersebut mencakup semua pasangan indeks yang berbeda, i dan j, sehingga jumlah dari indeks tersebut

72
00:06:03,440 --> 00:06:09,440
sama dengan n. Agak rumit, tapi misalnya, jika n adalah 6, pasangan yang kita bahas adalah 1 dan 5,

73
00:06:09,440 --> 00:06:15,680
2 dan 4, 3 dan 3, 4 dan 2, 5 dan 1, semua pasangan berbeda yang dijumlahkan ke 6.

74
00:06:16,400 --> 00:06:20,640
Tapi sejujurnya, bagaimana pun Anda menuliskannya, notasi adalah hal kedua yang penting dibandingkan visual yang

75
00:06:20,640 --> 00:06:26,320
mungkin Anda ingat selama proses tersebut. Di sini, mungkin akan membantu jika saya memberikan contoh yang sangat sederhana, di

76
00:06:26,320 --> 00:06:32,000
mana saya mungkin bertanya kepada Anda apa konvolusi dari daftar 1, 2, 3, dengan daftar 4, 5, 6. Anda mungkin membayangkan

77
00:06:32,000 --> 00:06:36,160
mengambil kedua daftar ini, membalik daftar kedua, dan kemudian memulai dengan penutupnya

78
00:06:36,160 --> 00:06:41,200
hingga ke kiri. Kemudian pasangan nilai yang sejajar adalah 1 dan 4, kalikan keduanya,

79
00:06:41,200 --> 00:06:45,680
dan itu menghasilkan suku pertama dari keluaran kita. Geser array bawah satu unit ke kanan, pasangan

80
00:06:45,680 --> 00:06:51,840
yang sejajar adalah 1 dan 5, dan 2 dan 4, kalikan pasangan tersebut, jumlahkan, dan hasilnya

81
00:06:51,840 --> 00:06:57,600
adalah 13, entri berikutnya dalam keluaran kita. Geser semuanya sekali lagi, dan kita akan ambil 1 kali 6, ditambah

82
00:06:57,600 --> 00:07:04,400
2 kali 5, ditambah 3 kali 4, yang hasilnya adalah 28. Satu slide lagi, dan kita mendapatkan 2 kali

83
00:07:04,400 --> 00:07:10,000
6, ditambah 3 kali 5, dan hasilnya adalah 27, dan akhirnya suku terakhirnya akan terlihat seperti 3 kali 6.

84
00:07:10,560 --> 00:07:14,080
Jika mau, Anda dapat menggunakan bahasa pemrograman apa pun favorit Anda, dan perpustakaan favorit Anda

85
00:07:14,080 --> 00:07:18,640
yang mencakup berbagai operasi numerik, dan Anda dapat mengonfirmasi bahwa saya tidak berbohong kepada Anda.

86
00:07:18,640 --> 00:07:24,320
Jika Anda mengambil konvolusi 1, 2, 3 melawan 4, 5, 6, inilah hasil yang akan Anda dapatkan.

87
00:07:24,880 --> 00:07:29,200
Kita telah melihat satu kasus di mana ini adalah operasi alami dan diinginkan, menambahkan hingga

88
00:07:29,200 --> 00:07:34,640
distribusi probabilitas, dan contoh umum lainnya adalah rata-rata bergerak. Bayangkan Anda memiliki daftar angka yang

89
00:07:34,640 --> 00:07:39,920
panjang, dan Anda mengambil daftar angka lain yang lebih kecil yang semuanya berjumlah 1. Dalam hal ini, saya

90
00:07:39,920 --> 00:07:45,280
hanya memiliki daftar kecil berisi 5 nilai, dan semuanya sama dengan 15. Lalu jika kita melakukan proses konvolusi

91
00:07:45,280 --> 00:07:49,760
jendela geser ini, dan menutup mata dan mengabaikan apa yang terjadi pada awalnya, setelah

92
00:07:50,560 --> 00:07:55,120
daftar nilai kita yang lebih kecil tumpang tindih dengan daftar nilai yang lebih besar, pikirkan

93
00:07:55,680 --> 00:08:01,120
tentang setiap suku di dalamnya. konvolusi sebenarnya berarti. Pada setiap iterasi, yang Anda lakukan

94
00:08:01,120 --> 00:08:06,400
adalah mengalikan masing-masing nilai dari data Anda dengan 15, dan menjumlahkan semuanya, artinya

95
00:08:06,400 --> 00:08:12,080
Anda mengambil rata-rata data Anda di dalam jendela kecil ini. Secara keseluruhan, proses ini

96
00:08:12,080 --> 00:08:16,800
memberi Anda versi data asli yang diperhalus, dan Anda dapat memodifikasinya dimulai dengan daftar

97
00:08:16,800 --> 00:08:21,280
angka kecil yang berbeda, dan selama daftar kecil itu semuanya berjumlah 1, Anda masih dapat

98
00:08:21,280 --> 00:08:25,840
menafsirkannya sebagai perpindahan. rata-rata. Dalam contoh yang ditunjukkan di sini, rata-rata pergerakan tersebut akan memberi

99
00:08:25,840 --> 00:08:30,720
bobot lebih pada nilai sentral. Hal ini juga menghasilkan versi data yang lebih halus.

100
00:08:33,200 --> 00:08:37,840
Jika Anda membuat analog dua dimensi seperti ini, ini memberi Anda algoritme menyenangkan untuk mengaburkan

101
00:08:37,840 --> 00:08:43,120
gambar tertentu. Dan menurut saya animasi yang akan saya tampilkan dimodifikasi dari sesuatu yang awalnya

102
00:08:43,120 --> 00:08:48,160
saya buat untuk bagian dari serangkaian kuliah yang saya lakukan dengan Julia Lab di MIT

103
00:08:48,160 --> 00:08:52,320
untuk kelas OpenCourseWare tertentu yang menyertakan unit pemrosesan gambar. Di sana kami melakukan sedikit lebih banyak

104
00:08:52,320 --> 00:08:56,640
untuk menyelami kode di balik semua ini, jadi jika Anda penasaran saya akan meninggalkan beberapa tautan untuk Anda. Tapi

105
00:08:56,640 --> 00:09:01,440
fokus kembali pada contoh kabur ini, apa yang terjadi adalah saya punya kotak kecil 3x3

106
00:09:01,440 --> 00:09:06,480
nilai yang berbaris di sepanjang gambar asli kita, dan jika kita memperbesar, masing-masing nilai tersebut adalah

107
00:09:06,480 --> 00:09:11,120
1 9, dan apa yang saya lakukan pada setiap iterasi adalah mengalikan masing-masing nilai tersebut

108
00:09:11,120 --> 00:09:16,080
dengan piksel yang sesuai di atasnya. Dan tentu saja dalam ilmu komputer kita menganggap

109
00:09:16,080 --> 00:09:20,400
warna sebagai vektor kecil dari tiga nilai, yang mewakili komponen merah, hijau, dan biru.

110
00:09:20,400 --> 00:09:25,440
Saat saya mengalikan semua nilai kecil ini dengan 19 dan menjumlahkannya, hasilnya adalah rata-rata di

111
00:09:25,440 --> 00:09:30,480
setiap saluran warna, dan piksel yang sesuai untuk gambar di sebelah kanan didefinisikan sebagai jumlah

112
00:09:30,480 --> 00:09:36,320
tersebut. Efek keseluruhannya, saat kita melakukan ini untuk setiap piksel pada gambar, adalah setiap jenis

113
00:09:36,320 --> 00:09:40,880
piksel akan merembes ke semua tetangganya, sehingga menghasilkan versi yang lebih buram daripada aslinya.

114
00:09:41,680 --> 00:09:46,640
Dalam istilah tersebut, kami mengatakan bahwa gambar di sebelah kanan adalah konvolusi dari gambar asli kami dengan

115
00:09:46,640 --> 00:09:52,000
sedikit kisi nilai. Atau lebih teknisnya mungkin saya harus mengatakan bahwa ini adalah konvolusi dengan

116
00:09:52,000 --> 00:09:56,160
versi grid nilai kecil yang diputar 180 derajat. Hal ini tidak menjadi masalah jika

117
00:09:56,160 --> 00:10:00,720
kisi-kisinya simetris, namun perlu diingat bahwa definisi konvolusi, seperti yang diwarisi dari konteks

118
00:10:00,720 --> 00:10:05,760
matematika murni, harus selalu mengajak Anda berpikir untuk membalik array kedua tersebut.

119
00:10:05,760 --> 00:10:10,240
Jika kita memodifikasinya sedikit, kita bisa mendapatkan efek kabur yang lebih elegan dengan memilih grid nilai

120
00:10:10,240 --> 00:10:15,920
yang berbeda. Dalam hal ini saya memiliki grid kecil berukuran 5x5, namun perbedaannya tidak terlalu banyak pada ukurannya.

121
00:10:15,920 --> 00:10:19,920
Jika kita memperbesar, kita melihat bahwa nilai di tengah jauh lebih besar daripada nilai di

122
00:10:19,920 --> 00:10:25,360
tepinya, dan hal ini berasal dari sampel dari kurva lonceng, yang dikenal sebagai distribusi

123
00:10:25,360 --> 00:10:30,240
Gaussian. Dengan demikian, ketika kita mengalikan semua nilai ini dengan piksel yang sesuai di

124
00:10:30,240 --> 00:10:35,200
atasnya, kita memberikan lebih banyak bobot pada piksel pusat tersebut dan lebih sedikit bobot pada

125
00:10:35,200 --> 00:10:39,920
piksel di tepinya. Dan seperti sebelumnya, piksel terkait di sebelah kanan didefinisikan sebagai jumlah

126
00:10:39,920 --> 00:10:45,360
ini. Saat kami melakukan proses ini untuk setiap piksel, hal ini memberikan efek kabur

127
00:10:45,360 --> 00:10:49,760
yang secara lebih autentik menyimulasikan gagasan membuat lensa Anda tidak fokus atau semacamnya.

128
00:10:49,760 --> 00:10:54,960
Namun pengaburan bukanlah satu-satunya hal yang dapat Anda lakukan dengan ide ini. Sebagai contoh, lihatlah kotak nilai

129
00:10:54,960 --> 00:10:59,600
kecil ini, yang melibatkan beberapa angka positif di sebelah kiri dan beberapa angka negatif di sebelah

130
00:10:59,600 --> 00:11:04,480
kanan, yang akan saya warnai masing-masing dengan warna biru dan merah. Luangkan waktu sejenak untuk melihat

131
00:11:04,480 --> 00:11:11,680
apakah Anda dapat memprediksi dan memahami apa pengaruhnya terhadap gambar akhir. Jadi dalam hal ini saya

132
00:11:11,680 --> 00:11:16,560
hanya akan menganggap gambar sebagai skala abu-abu, bukan berwarna, sehingga setiap piksel hanya diwakili oleh

133
00:11:16,560 --> 00:11:21,280
satu angka, bukan tiga. Dan satu hal yang perlu diperhatikan adalah saat kita melakukan konvolusi ini,

134
00:11:21,280 --> 00:11:26,240
ada kemungkinan kita mendapatkan nilai negatif. Sebagai contoh pada titik ini di sini jika kita memperbesar bagian

135
00:11:26,240 --> 00:11:30,960
kiri dari grid kecil kita seluruhnya berada di atas piksel hitam, yang akan memiliki nilai nol, namun

136
00:11:30,960 --> 00:11:35,360
bagian kanan dari nilai-nilai negatif semuanya berada di atas piksel putih, yang akan mempunyai nilai satu.

137
00:11:36,000 --> 00:11:40,960
Jadi ketika kita mengalikan suku-suku yang bersesuaian dan menjumlahkannya, hasilnya akan sangat negatif, dan cara saya

138
00:11:40,960 --> 00:11:45,120
menampilkannya dengan gambar di sebelah kanan adalah dengan mewarnai nilai negatif dengan merah dan nilai

139
00:11:45,120 --> 00:11:49,520
positif dengan biru. Hal lain yang perlu diperhatikan adalah ketika Anda berada di patch yang warnanya

140
00:11:49,520 --> 00:11:55,680
sama, semuanya menjadi nol karena jumlah nilai di grid kecil kita adalah nol. Ini sangat berbeda

141
00:11:55,680 --> 00:11:59,680
dari dua contoh sebelumnya di mana jumlah grid kecil kita adalah satu, yang memungkinkan kita

142
00:11:59,680 --> 00:12:05,760
menafsirkannya sebagai rata-rata bergerak dan karenanya menjadi kabur. Secara keseluruhan, proses kecil ini pada dasarnya

143
00:12:05,760 --> 00:12:10,240
mendeteksi di mana pun ada variasi dalam nilai piksel saat Anda bergerak dari kiri ke

144
00:12:10,240 --> 00:12:13,760
kanan, sehingga memberi Anda semacam cara untuk mengambil semua tepi vertikal dari gambar Anda.

145
00:12:16,560 --> 00:12:20,960
Demikian pula jika kita memutar kotak tersebut sehingga bervariasi saat Anda bergerak dari

146
00:12:20,960 --> 00:12:26,000
atas ke bawah, ini akan menangkap semua tepi horizontal, yang dalam kasus

147
00:12:26,000 --> 00:12:31,520
gambar makhluk pai kecil kita menghasilkan beberapa mata setan. Grid yang lebih kecil ini

148
00:12:31,520 --> 00:12:36,160
sering disebut kernel, dan keindahannya di sini adalah bahwa hanya dengan memilih kernel yang berbeda Anda

149
00:12:36,160 --> 00:12:40,240
bisa mendapatkan efek pemrosesan gambar yang berbeda, tidak hanya mengaburkan deteksi tepi Anda tetapi juga hal-hal seperti

150
00:12:40,240 --> 00:12:44,800
penajaman. Bagi Anda yang pernah mendengar tentang jaringan saraf konvolusional, idenya adalah menggunakan

151
00:12:44,800 --> 00:12:49,600
data untuk mencari tahu kernel apa yang seharusnya ditentukan oleh apa pun yang ingin

152
00:12:49,600 --> 00:12:55,120
dideteksi oleh jaringan saraf. Hal lain yang mungkin harus saya kemukakan adalah panjang outputnya.

153
00:12:55,120 --> 00:12:59,040
Untuk contoh seperti rata-rata bergerak, Anda mungkin hanya ingin memikirkan ketentuan ketika

154
00:12:59,040 --> 00:13:04,080
kedua jendela sejajar satu sama lain, atau dalam contoh pemrosesan gambar mungkin Anda

155
00:13:04,080 --> 00:13:09,200
ingin hasil akhir memiliki ukuran yang sama dengan aslinya. Sekarang konvolusi sebagai operasi

156
00:13:09,200 --> 00:13:13,920
matematika murni selalu menghasilkan larik yang lebih besar dari dua larik yang Anda mulai, setidaknya

157
00:13:13,920 --> 00:13:17,520
dengan asumsi salah satunya tidak memiliki panjang satu larik. Ketahuilah bahwa dalam konteks

158
00:13:17,520 --> 00:13:21,440
ilmu komputer tertentu Anda sering kali ingin dengan sengaja memotong keluaran tersebut.

159
00:13:21,520 --> 00:13:29,200
Hal lain yang perlu disoroti adalah bahwa dalam konteks ilmu komputer, gagasan membalik kernel sebelum

160
00:13:29,200 --> 00:13:34,080
membiarkannya berjalan sesuai aslinya sering kali terasa sangat aneh dan tidak pantas, tetapi sekali lagi

161
00:13:34,080 --> 00:13:38,960
perhatikan bahwa itulah yang diwarisi dari konteks matematika murni di mana seperti kita melihat

162
00:13:38,960 --> 00:13:44,000
dengan kemungkinan itu adalah hal yang sangat wajar untuk dilakukan. Dan sebenarnya saya dapat menunjukkan kepada

163
00:13:44,000 --> 00:13:48,480
Anda satu lagi contoh matematika murni yang bahkan para pemrogram pun harus memperhatikan hal ini karena ini

164
00:13:48,480 --> 00:13:53,760
membuka pintu bagi algoritma yang jauh lebih cepat untuk menghitung semua ini. Untuk mengatur apa yang saya maksud

165
00:13:53,760 --> 00:13:58,560
dengan lebih cepat di sini biarkan saya kembali dan menarik beberapa python lagi dan saya akan membuat dua array

166
00:13:58,560 --> 00:14:02,880
berbeda yang relatif besar. Masing-masing akan memiliki seratus ribu elemen acak di dalamnya dan

167
00:14:02,880 --> 00:14:08,640
saya akan menilai runtime fungsi convolve dari perpustakaan numpy. Dan dalam hal

168
00:14:08,640 --> 00:14:12,800
ini ia menjalankannya untuk beberapa iterasi yang berbeda, mencoba menemukan rata-rata, dan sepertinya di

169
00:14:12,880 --> 00:14:18,640
komputer ini setidaknya rata-ratanya adalah 4. 87 detik. Sebaliknya jika saya menggunakan fungsi yang berbeda

170
00:14:18,640 --> 00:14:24,080
dari perpustakaan scipy yang disebut fftconvolve yang merupakan hal yang sama hanya diimplementasikan secara berbeda

171
00:14:24,080 --> 00:14:30,640
yang hanya membutuhkan 4. Rata-rata 3 milidetik, sehingga terjadi peningkatan tiga kali lipat.

172
00:14:30,640 --> 00:14:34,800
Dan sekali lagi, meskipun ia menggunakan nama yang berbeda, ia memberikan keluaran yang sama dengan

173
00:14:34,800 --> 00:14:38,880
fungsi konvolusi lainnya, ia hanya melakukan sesuatu untuk melakukannya dengan cara yang lebih cerdas.

174
00:14:38,880 --> 00:14:46,800
Ingat bagaimana dengan contoh probabilitas saya mengatakan cara lain untuk memikirkan konvolusi adalah

175
00:14:46,800 --> 00:14:51,520
dengan membuat tabel semua perkalian berpasangan dan kemudian menjumlahkan perkalian berpasangan tersebut di

176
00:14:51,520 --> 00:14:56,560
sepanjang diagonal. Tentu saja tidak ada sesuatu yang spesifik mengenai probabilitas setiap kali Anda menggabungkan dua

177
00:14:56,560 --> 00:15:00,880
daftar angka yang berbeda, Anda dapat memikirkannya dengan cara ini. Buat tabel perkalian seperti ini dengan

178
00:15:00,880 --> 00:15:05,520
semua hasil kali berpasangan dan kemudian setiap jumlah sepanjang diagonal sesuai dengan salah satu hasil

179
00:15:05,520 --> 00:15:11,680
akhir Anda. Salah satu konteks di mana pandangan ini sangat alami adalah ketika Anda mengalikan

180
00:15:11,680 --> 00:15:16,240
dua polinomial. Misalnya izinkan saya mengambil kotak kecil yang sudah kita miliki dan mengganti suku teratas

181
00:15:16,240 --> 00:15:23,920
dengan 1, 2x, dan 3x kuadrat dan mengganti suku lainnya dengan 4, 5x, dan 6x kuadrat.

182
00:15:23,920 --> 00:15:27,920
Sekarang pikirkan apa artinya ketika kita membuat semua produk berpasangan yang berbeda di antara

183
00:15:27,920 --> 00:15:32,960
kedua daftar. Apa yang Anda lakukan pada dasarnya adalah memperluas produk lengkap dari dua polinomial

184
00:15:32,960 --> 00:15:38,240
yang telah saya tulis dan kemudian ketika Anda menjumlahkan sepanjang diagonal, itu sesuai dengan

185
00:15:38,240 --> 00:15:43,920
mengumpulkan semua suku serupa yang cukup rapi memperluas polinomial dan mengumpulkan suku-suku serupa adalah

186
00:15:43,920 --> 00:15:50,640
persisnya proses yang sama seperti konvolusi. Namun hal ini memungkinkan kami melakukan sesuatu yang cukup keren karena

187
00:15:50,640 --> 00:15:55,360
pikirkan apa yang kami katakan di sini. Maksudnya, jika Anda mengambil dua fungsi berbeda dan mengalikannya,

188
00:15:55,360 --> 00:16:00,560
yang merupakan operasi pointwise sederhana, hal ini sama saja seperti jika Anda terlebih dahulu mengekstrak

189
00:16:00,560 --> 00:16:05,920
koefisien dari masing-masing fungsi tersebut dengan asumsi bahwa fungsi tersebut adalah polinomial dan kemudian melakukan

190
00:16:05,920 --> 00:16:11,840
konvolusi dari fungsi tersebut. dua daftar koefisien. Apa yang membuatnya menarik adalah bahwa konvolusi pada

191
00:16:11,840 --> 00:16:16,560
prinsipnya terasa jauh lebih rumit daripada perkalian sederhana dan saya tidak hanya bermaksud secara konseptual,

192
00:16:16,560 --> 00:16:21,760
konvolusi lebih sulit untuk dipikirkan. Maksud saya, secara komputasi, diperlukan lebih banyak langkah untuk melakukan

193
00:16:21,760 --> 00:16:27,040
konvolusi daripada melakukan a produk pointwise dari dua daftar yang berbeda. Sebagai contoh, katakanlah

194
00:16:27,040 --> 00:16:31,920
saya memberi Anda dua polinomial yang sangat besar, katakanlah masing-masing polinomial dengan seratus koefisien berbeda,

195
00:16:32,480 --> 00:16:37,520
lalu jika cara Anda mengalikannya adalah dengan memperluas hasil perkalian ini, Anda tahu mengisi seluruh kotak

196
00:16:37,520 --> 00:16:43,600
perkalian berpasangan berukuran 100 kali 100 yang mengharuskan Anda melakukannya melakukan 10.000 produk berbeda dan

197
00:16:43,600 --> 00:16:48,560
kemudian ketika Anda mengumpulkan semua suku serupa di sepanjang diagonal, itu adalah kumpulan sekitar 10.000

198
00:16:48,560 --> 00:16:55,200
operasi lainnya. Secara lebih umum dalam istilah kita akan mengatakan bahwa algoritme adalah O dari n

199
00:16:55,200 --> 00:17:00,560
kuadrat yang berarti dua daftar berukuran n dengan cara jumlah skala operasi sebanding dengan kuadrat n.

200
00:17:00,560 --> 00:17:06,320
Di sisi lain jika saya memikirkan dua polinomial dalam hal keluarannya, misalnya mengambil

201
00:17:06,320 --> 00:17:11,680
sampel nilainya pada beberapa masukan, lalu mengalikannya hanya memerlukan operasi sebanyak jumlah

202
00:17:11,680 --> 00:17:17,200
sampel karena sekali lagi ini adalah operasi yang tepat dan dengan polinomial Anda

203
00:17:17,200 --> 00:17:22,400
hanya perlu banyak sampel hingga dapat memperoleh kembali koefisiennya. Misalnya dua keluaran cukup

204
00:17:22,400 --> 00:17:27,920
untuk secara unik menentukan polinomial linier, tiga keluaran akan cukup untuk secara unik menentukan polinomial kuadrat

205
00:17:27,920 --> 00:17:33,680
dan secara umum jika Anda mengetahui n keluaran berbeda, itu cukup untuk secara unik menentukan polinomial

206
00:17:33,680 --> 00:17:38,800
yang memiliki n koefisien berbeda atau jika Anda mau, kita bisa ungkapan ini dalam bahasa

207
00:17:38,800 --> 00:17:43,680
sistem persamaan bayangkan Saya beri tahu Anda bahwa saya mempunyai beberapa polinomial tetapi saya tidak memberi

208
00:17:43,680 --> 00:17:47,840
tahu Anda berapa koefisiennya, hal itu merupakan misteri bagi Anda. Dalam contoh kita, Anda mungkin menganggap

209
00:17:47,840 --> 00:17:52,960
ini sebagai hasil kali yang ingin kita cari tahu, lalu misalkan saya katakan, saya akan memberi

210
00:17:52,960 --> 00:17:59,600
tahu Anda berapa keluaran polinomial ini jika Anda memasukkan berbagai masukan berbeda seperti 0, 1, 2

211
00:17:59,600 --> 00:18:04,800
, 3, terus dan terus dan saya memberi Anda cukup sehingga Anda memiliki persamaan sebanyak yang

212
00:18:04,800 --> 00:18:09,840
Anda tidak tahu, bahkan sistem persamaan linier jadi itu bagus dan pada prinsipnya setidaknya ini cukup

213
00:18:09,840 --> 00:18:14,880
untuk memulihkan koefisien.

214
00:18:14,880 --> 00:18:20,160


215
00:18:20,160 --> 00:18:26,560


216
00:18:26,560 --> 00:18:32,720


217
00:18:32,720 --> 00:18:38,000


218
00:18:38,000 --> 00:18:43,120


219
00:18:43,120 --> 00:18:47,760


220
00:18:47,760 --> 00:18:53,520


221
00:18:53,520 --> 00:18:58,400


222
00:18:58,400 --> 00:19:04,240


223
00:19:04,240 --> 00:19:09,200


224
00:19:09,200 --> 00:19:13,600


225
00:19:13,600 --> 00:19:18,720


226
00:19:18,720 --> 00:19:23,840


227
00:19:23,840 --> 00:19:30,080


228
00:19:30,080 --> 00:19:34,400


229
00:19:34,400 --> 00:19:41,600


230
00:19:41,600 --> 00:19:46,480


231
00:19:46,480 --> 00:19:51,360


232
00:19:51,360 --> 00:19:57,600


233
00:19:57,600 --> 00:20:03,200


234
00:20:03,200 --> 00:20:08,160


235
00:20:08,160 --> 00:20:12,640


236
00:20:12,640 --> 00:20:17,520


237
00:20:17,520 --> 00:20:22,720


238
00:20:22,720 --> 00:20:28,320


239
00:20:28,320 --> 00:20:33,040


240
00:20:33,040 --> 00:20:38,080


241
00:20:38,080 --> 00:20:43,600


242
00:20:43,600 --> 00:20:48,640


243
00:20:48,640 --> 00:20:53,200


244
00:20:53,200 --> 00:20:58,960


245
00:20:58,960 --> 00:21:03,280


246
00:21:03,280 --> 00:21:08,960


247
00:21:08,960 --> 00:21:14,480


248
00:21:14,480 --> 00:21:18,480


249
00:21:18,480 --> 00:21:25,600


250
00:21:25,600 --> 00:21:30,560


251
00:21:30,560 --> 00:21:35,120


252
00:21:35,120 --> 00:21:39,600


253
00:21:39,600 --> 00:21:44,480


254
00:21:44,480 --> 00:21:50,160


255
00:21:50,160 --> 00:21:54,800


256
00:21:54,800 --> 00:21:59,360


257
00:21:59,360 --> 00:22:04,640


258
00:22:04,640 --> 00:22:10,720


259
00:22:10,720 --> 00:22:16,000


260
00:22:16,000 --> 00:22:20,720


261
00:22:20,720 --> 00:22:26,320


262
00:22:26,320 --> 00:22:31,280


263
00:22:31,280 --> 00:22:36,880


264
00:22:36,880 --> 00:22:51,040


