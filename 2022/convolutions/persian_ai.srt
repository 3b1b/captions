1
00:00:00,000 --> 00:00:04,480
فرض کنید من دو لیست مختلف از اعداد، یا شاید دو تابع متفاوت را به شما می‌دهم، و از شما می‌خواهم به تمام

2
00:00:04,480 --> 00:00:08,400
روش‌هایی فکر کنید که می‌توانید این دو فهرست را برای به دست آوردن یک لیست جدید از اعداد ترکیب کنید، یا این

3
00:00:08,400 --> 00:00:14,000
دو تابع را برای به دست آوردن یک تابع جدید ترکیب کنید. . شاید یکی از راه‌های ساده‌ای که به ذهن می‌رسد این

4
00:00:14,000 --> 00:00:18,640
باشد که آن‌ها را به سادگی با هم جمع کنیم. به همین ترتیب با توابع، می توانید تمام خروجی های

5
00:00:18,640 --> 00:00:24,000
مربوطه را اضافه کنید. در روشی مشابه، می‌توانید دو فهرست را در ترم ضرب کنید و

6
00:00:24,000 --> 00:00:28,720
همین کار را با توابع انجام دهید. اما نوع دیگری از ترکیب وجود دارد که به همان اندازه

7
00:00:28,720 --> 00:00:33,840
هر دوی آنها اساسی است، اما بسیار کمتر مورد بحث قرار می گیرد، که به عنوان پیچیدگی شناخته می شود.

8
00:00:33,840 --> 00:00:38,240
اما برخلاف دو مورد قبلی، این چیزی نیست که صرفاً از عملیاتی به ارث رسیده باشد که

9
00:00:38,240 --> 00:00:43,360
بتوانید روی اعداد انجام دهید. این چیزی واقعاً جدید برای زمینه فهرست اعداد یا

10
00:00:43,360 --> 00:00:49,280
ترکیب توابع است. آنها در همه جا ظاهر می شوند، در پردازش تصویر در همه جا حاضر

11
00:00:49,280 --> 00:00:53,760
هستند، این یک ساختار اصلی در نظریه احتمال است، آنها در حل معادلات دیفرانسیل بسیار استفاده می شوند، و

12
00:00:53,760 --> 00:00:58,240
زمینه ای که تقریباً مطمئناً آن را دیده اید، اگر نه. با این نام، دو چند جمله ای

13
00:00:58,240 --> 00:01:03,440
را با هم ضرب می کند. به عنوان کسی که در تجارت توضیحات بصری فعالیت می کند، این موضوع

14
00:01:03,440 --> 00:01:08,800
بسیار عالی است، زیرا تعریف فرمولی به صورت مجزا و بدون زمینه می تواند ترسناک به نظر برسد، اما

15
00:01:08,800 --> 00:01:14,080
اگر وقت بگذاریم تا واقعاً آنچه را که می گوید باز کنیم و قبل از آن در واقع انگیزه

16
00:01:14,080 --> 00:01:18,800
ایجاد کنیم که چرا شما چیزی شبیه به این را می خواهید، این یک عمل فوق العاده زیبا است.

17
00:01:18,800 --> 00:01:22,880
و باید اعتراف کنم، در واقع در کنار هم قرار دادن تصاویری برای این پروژه، چیزهای کوچکی

18
00:01:22,880 --> 00:01:26,960
یاد گرفتم. در مورد در هم آمیختن دو تابع مختلف، سعی می کردم به راه های مختلفی

19
00:01:26,960 --> 00:01:30,720
فکر کنم که بتوانید معنی آن را تصور کنید، و با یکی از آنها کمی آها داشتم

20
00:01:30,720 --> 00:01:35,840
که چرا توزیع های عادی نقشی را ایفا می کنند. آنها به احتمال زیاد انجام می دهند،

21
00:01:35,840 --> 00:01:40,320
چرا این یک شکل طبیعی برای یک تابع است. اما من دارم از خودم جلو می گیرم، تنظیمات

22
00:01:40,320 --> 00:01:44,800
زیادی برای آن وجود دارد. در این ویدیو، تمرکز اصلی ما فقط بر روی موارد گسسته

23
00:01:44,800 --> 00:01:49,920
است، و به ویژه ایجاد یک الگوریتم بسیار غیرمنتظره اما بسیار هوشمندانه برای محاسبه این موارد.

24
00:01:49,920 --> 00:01:54,400
و من بحث برای مورد مستمر را به بخش دوم می کشم.

25
00:01:57,840 --> 00:02:03,120
بسیار وسوسه انگیز است که نمونه های پردازش تصویر را باز کنیم، زیرا آنها از نظر

26
00:02:03,120 --> 00:02:06,880
بصری جذاب ترین هستند، اما چند نکته ظریف وجود دارد که باعث می شود کیس

27
00:02:06,880 --> 00:02:11,760
پردازش تصویر کمتر نماینده کانولوشن ها باشد، بنابراین در عوض اجازه دهید کارها را با

28
00:02:11,760 --> 00:02:15,520
احتمال شروع کنیم. و به ویژه یکی از ساده‌ترین نمونه‌هایی که مطمئنم همه اینجا در مقطعی

29
00:02:15,520 --> 00:02:20,320
از زندگی خود به آن فکر کرده‌اند، یعنی انداختن یک جفت تاس و کشف شانس

30
00:02:20,320 --> 00:02:25,600
دیدن مبالغ مختلف. و ممکن است بگویید، مشکل نیست، مشکل نیست. هر یک از دو تاس

31
00:02:25,600 --> 00:02:31,600
شما دارای شش نتیجه ممکن متفاوت است که در مجموع 36 جفت نتیجه ممکن متمایز را به ما

32
00:02:31,600 --> 00:02:35,600
می دهد، و اگر فقط به همه آنها نگاه کنیم، می توانیم تعداد جفت ها را حساب کنیم.

33
00:02:36,240 --> 00:02:41,120
و مرتب کردن همه جفت ها در یک شبکه مانند این، یک چیز بسیار خوب این است که همه جفت هایی

34
00:02:41,120 --> 00:02:47,040
که دارای مجموع ثابت هستند در امتداد یکی از این قطرهای مختلف قابل مشاهده هستند. بنابراین به سادگی شمارش تعداد موجود

35
00:02:47,040 --> 00:02:51,920
در هر یک از آن مورب ها به شما نشان می دهد که چقدر احتمال دارد یک مجموع خاص را ببینید.

36
00:02:52,880 --> 00:02:57,760
و من می‌توانم بگویم، بسیار خوب، بسیار خوب، اما آیا می‌توانید راه‌های دیگری برای تجسم همان سؤال در

37
00:02:57,760 --> 00:03:03,120
نظر بگیرید؟ تصاویر دیگری که می تواند به ذهن متبادر شود تا به تمام جفت های متمایز که دارای مجموع معین هستند

38
00:03:03,120 --> 00:03:08,800
فکر کنید؟ و شاید یکی از شما دستش را بلند کند و بگوید، بله، من یکی دارم. فرض کنید این دو مجموعه

39
00:03:08,800 --> 00:03:14,560
متفاوت از احتمالات را هر کدام پشت سر هم تصویر می کنید، اما آن ردیف دوم را ورق می زنید. به این

40
00:03:14,560 --> 00:03:20,160
ترتیب تمام جفت‌های مختلف که مجموعاً به هفت می‌رسد، به‌طور عمودی به این شکل قرار می‌گیرند. و اگر آن ردیف

41
00:03:20,160 --> 00:03:24,880
پایین را تا انتها به سمت راست بلغزانیم، آنگاه جفت منحصربه‌فردی که به دو عدد می‌رسد، چشم‌های مار، تنها

42
00:03:24,880 --> 00:03:29,680
آن‌هایی هستند که همسو می‌شوند. و اگر آن را بیش از یک واحد به سمت راست پرت کنم، جفت هایی که تراز

43
00:03:29,680 --> 00:03:35,440
می شوند دو جفت مختلف هستند که مجموع آنها سه می شود. و به طور کلی، مقادیر مختلف افست این آرایه

44
00:03:35,440 --> 00:03:40,320
پایین‌تر، که به یاد داشته باشید ابتدا باید به اطراف برگردم، همه جفت‌های متمایز را نشان می‌دهد که دارای

45
00:03:40,320 --> 00:03:48,800
مجموع معین هستند. تا آنجایی که سوالات احتمالی مطرح می شود، این هنوز به خصوص جالب نیست، زیرا تمام کاری

46
00:03:48,800 --> 00:03:53,120
که ما انجام می دهیم این است که تعداد نتایج در هر یک از این دسته ها را بشماریم.

47
00:03:53,120 --> 00:03:57,280
اما این با این فرض ضمنی است که شانس برابری برای هر یک از این چهره ها وجود

48
00:03:57,280 --> 00:04:02,240
دارد. اما اگر به شما بگویم یک مجموعه تاس خاص دارم که یکنواخت نیست چه؟ شاید قالب

49
00:04:02,240 --> 00:04:06,800
آبی مجموعه ای از اعداد خاص خود را داشته باشد که احتمالات را برای هر چهره ای که بالا می آید توصیف می

50
00:04:06,800 --> 00:04:11,920
کند، و قالب قرمز مجموعه اعداد متمایز منحصر به فرد خود را دارد. در آن صورت، اگر می‌خواهید مثلاً احتمال

51
00:04:11,920 --> 00:04:17,360
دیدن یک دو را بفهمید، احتمال اینکه قالب آبی یک عدد است را ضرب

52
00:04:17,360 --> 00:04:22,000
کنید در احتمال یک بودن قالب قرمز. و برای شانس دیدن سه، شما به دو

53
00:04:22,000 --> 00:04:26,880
جفت متمایز در جایی که ممکن است نگاه کنید، و دوباره، احتمالات مربوطه را ضرب کنید، و

54
00:04:26,880 --> 00:04:32,240
سپس آن دو محصول را با هم جمع کنید. به طور مشابه، شانس دیدن یک چهار

55
00:04:32,240 --> 00:04:36,320
شامل ضرب کردن سه جفت احتمال مختلف و جمع کردن همه آنها با هم

56
00:04:36,320 --> 00:04:41,360
است. و با روح تنظیم چند فرمول، این احتمالات بالا را a1، a2، a3 و غیره نامگذاری می

57
00:04:41,360 --> 00:04:48,000
کنیم و موارد پایین را b1، b2، b3 و غیره می نامیم. و به طور کلی، این فرآیند، که

58
00:04:48,000 --> 00:04:52,080
در آن ما دو آرایه مختلف از اعداد را می گیریم، دومی را به اطراف برمی گردانیم، و سپس آنها

59
00:04:52,080 --> 00:04:56,160
را در مقادیر مختلف افست ردیف می کنیم، دسته ای از محصولات جفتی را می گیریم و آنها را

60
00:04:56,160 --> 00:05:00,960
با هم جمع می کنیم، این یکی از موارد است. راه های اساسی برای فکر کردن به اینکه پیچیدگی چیست.

61
00:05:00,960 --> 00:05:08,960
بنابراین فقط برای توضیح دقیق تر، از طریق این فرآیند، ما فقط احتمالاتی را برای دیدن دو، سه،

62
00:05:08,960 --> 00:05:13,840
چهار، روی و روی تا 12 ایجاد کردیم و با ترکیب کردن یک لیست از مقادیر، a و

63
00:05:13,840 --> 00:05:20,080
دیگری، آنها را به دست آوردیم. فهرست مقادیر، ب. در زبان انگلیسی، می‌توان گفت که پیچیدگی آن دو

64
00:05:20,080 --> 00:05:25,600
دنباله، این توالی جدید را به ما می‌دهد، دنباله جدیدی از 11 مقدار، که هر کدام شبیه به

65
00:05:25,600 --> 00:05:30,160
مجموعه‌ای از محصولات زوجی هستند. اگر ترجیح می دهید، راه دیگری که می توانید در مورد همان عملیات فکر

66
00:05:30,160 --> 00:05:36,240
کنید این است که ابتدا جدولی از تمام محصولات جفتی ایجاد کنید و سپس در امتداد همه این مورب ها جمع

67
00:05:36,240 --> 00:05:41,120
کنید. باز هم، این راهی است که این دو دنباله اعداد را با هم مخلوط می کنیم تا دنباله ای جدید از 11

68
00:05:41,120 --> 00:05:46,400
عدد به دست آوریم. این همان عملیاتی است که پنجره های کشویی فکر می کردند، فقط یک چشم انداز دیگر.

69
00:05:46,960 --> 00:05:51,280
با قرار دادن یک نماد کوچک روی آن، در اینجا نحوه نوشتن آن را مشاهده می کنید. پیچیدگی a و b که

70
00:05:51,280 --> 00:05:57,200
با این ستاره کوچک نشان داده می شود، یک لیست جدید است و عنصر n از آن لیست شبیه یک جمع است

71
00:05:57,200 --> 00:06:03,440
و این مجموع روی همه جفت های مختلف شاخص ها، i و j می رود، به طوری که مجموع این شاخص

72
00:06:03,440 --> 00:06:09,440
ها برابر n است. این نوعی لقمه است، اما به عنوان مثال، اگر n 6 بود، جفت هایی که می رویم 1 و

73
00:06:09,440 --> 00:06:15,680
5، 2 و 4، 3 و 3، 4 و 2، 5 و 1 هستند، همه جفت های مختلفی که جمع می شوند. به 6.

74
00:06:16,400 --> 00:06:20,640
اما صادقانه بگویم، هر طور که آن را بنویسید، نماد از نظر اهمیت در درجه دوم اهمیت بصری است که ممکن

75
00:06:20,640 --> 00:06:26,320
است برای این فرآیند در ذهن خود نگه دارید. در اینجا، شاید انجام یک مثال بسیار ساده کمک کند، جایی که

76
00:06:26,320 --> 00:06:32,000
ممکن است از شما بپرسم که پیچیدگی لیست 1، 2، 3، با لیست 4، 5، 6 چیست. ممکن است تصور کنید

77
00:06:32,000 --> 00:06:36,160
که هر دوی این لیست ها را گرفته اید، لیست دوم را ورق می زنید و سپس با درب آن

78
00:06:36,160 --> 00:06:41,200
به سمت چپ شروع می کنید. سپس جفت مقادیری که 1 و 4 هستند، آنها را با هم ضرب می

79
00:06:41,200 --> 00:06:45,680
کنیم و این اولین جمله خروجی ما را به ما می دهد. آرایه پایینی را یک واحد به سمت راست بلغزانید، جفت

80
00:06:45,680 --> 00:06:51,840
هایی که 1 و 5 و 2 و 4 هستند، آن جفت ها را ضرب کنید، آنها را با هم جمع کنید، و این

81
00:06:51,840 --> 00:06:57,600
به ما 13 می دهد، ورودی بعدی در خروجی. یک بار دیگر چیزها را روی صفحه بکشید، و ما 1 ضربدر 6، به علاوه 2

82
00:06:57,600 --> 00:07:04,400
ضربدر 5، به علاوه 3 ضربدر 4 را می گیریم که اتفاقاً 28 می شود. یک اسلاید دیگر، و ما 2 ضربدر 6، به اضافه 3

83
00:07:04,400 --> 00:07:10,000
ضرب در 5 می گیریم، و این به ما 27 می دهد، و در نهایت ترم آخر مانند 3 ضرب در 6 به نظر می رسد.

84
00:07:10,560 --> 00:07:14,080
اگر بخواهید، می‌توانید هر زبان برنامه‌نویسی مورد علاقه‌تان و کتابخانه مورد علاقه‌تان را که شامل عملیات‌های

85
00:07:14,080 --> 00:07:18,640
عددی مختلف است، بالا بکشید، و می‌توانید تأیید کنید که من به شما دروغ نمی‌گویم.

86
00:07:18,640 --> 00:07:24,320
اگر انحراف 1، 2، 3 را در مقابل 4، 5، 6 بگیرید، این در واقع نتیجه ای است که به دست خواهید آورد.

87
00:07:24,880 --> 00:07:29,200
ما یک مورد را دیده‌ایم که در آن این یک عملیات طبیعی و مطلوب است و به

88
00:07:29,200 --> 00:07:34,640
توزیع‌های احتمال اضافه می‌شود، و مثال رایج دیگر میانگین متحرک است. تصور کنید یک لیست طولانی از اعداد

89
00:07:34,640 --> 00:07:39,920
دارید و یک لیست کوچکتر از اعداد را انتخاب می کنید که مجموع آنها 1 می شود. در این مورد، من فقط

90
00:07:39,920 --> 00:07:45,280
یک لیست کوچک از 5 مقدار دارم، و همه آنها برابر با 1 5 هستند. سپس اگر این فرآیند پیچش پنجره کشویی

91
00:07:45,280 --> 00:07:49,760
را انجام دهیم، و به نوعی چشمانمان را ببندیم و آنچه را که در همان ابتدای آن اتفاق

92
00:07:50,560 --> 00:07:55,120
می‌افتد، زیر فرش بکشیم، وقتی فهرست کوچک‌تر مقادیر ما کاملاً با مقادیر بزرگ‌تر همپوشانی پیدا کرد، به این

93
00:07:55,680 --> 00:08:01,120
فکر کنید که هر عبارت در این چیست. پیچیدگی واقعاً یعنی در هر تکرار، کاری که انجام می‌دهید این

94
00:08:01,120 --> 00:08:06,400
است که هر یک از مقادیر داده‌های خود را در 1 5 ضرب می‌کنید، و همه آنها را با هم

95
00:08:06,400 --> 00:08:12,080
جمع می‌کنید، به این معنی که میانگین داده‌های خود را در این پنجره کوچک می‌گیرید. به طور کلی، این فرآیند

96
00:08:12,080 --> 00:08:16,800
یک نسخه هموار از داده های اصلی را به شما ارائه می دهد، و می توانید این را با یک لیست

97
00:08:16,800 --> 00:08:21,280
کوچک متفاوت از اعداد تغییر دهید، و تا زمانی که آن لیست کوچک به 1 برسد، همچنان می توانید آن را

98
00:08:21,280 --> 00:08:25,840
به عنوان یک متحرک تفسیر کنید. میانگین. در مثالی که در اینجا نشان داده شده است، میانگین متحرک وزن

99
00:08:25,840 --> 00:08:30,720
بیشتری به سمت مقدار مرکزی می دهد. این همچنین منجر به یک نسخه هموار از داده ها می شود.

100
00:08:33,200 --> 00:08:37,840
اگر یک آنالوگ دو بعدی از آن انجام دهید، یک الگوریتم سرگرم کننده برای محو کردن یک تصویر داده شده به

101
00:08:37,840 --> 00:08:43,120
شما می دهد. و باید بگویم انیمیشن‌هایی که می‌خواهم نشان دهم از چیزی که من در ابتدا

102
00:08:43,120 --> 00:08:48,160
برای بخشی از مجموعه سخنرانی‌هایی که با آزمایشگاه جولیا در MIT برای یک کلاس OpenCourseWare انجام

103
00:08:48,160 --> 00:08:52,320
دادم اصلاح شده‌اند که شامل یک واحد پردازش تصویر بود. در آنجا ما کمی بیشتر کار کردیم

104
00:08:52,320 --> 00:08:56,640
تا به کد پشت همه اینها بپردازیم، بنابراین اگر کنجکاو هستید چند لینک برای شما می گذارم. اما

105
00:08:56,640 --> 00:09:01,440
با تمرکز بر روی این مثال تار، اتفاقی که می افتد این است که من این شبکه کوچک 3x3 از مقادیر

106
00:09:01,440 --> 00:09:06,480
را دارم که در امتداد تصویر اصلی ما حرکت می کند، و اگر بزرگنمایی کنیم، هر یک از آن مقادیر 1

107
00:09:06,480 --> 00:09:11,120
9 است، و کاری که من انجام می دهم در هر تکرار، هر یک از آن مقادیر را در پیکسل مربوطه

108
00:09:11,120 --> 00:09:16,080
ای که بالای آن قرار دارد ضرب می کند. و البته در علوم کامپیوتر ما رنگ ها را بردارهای کوچکی

109
00:09:16,080 --> 00:09:20,400
از سه مقدار در نظر می گیریم که نشان دهنده مولفه های قرمز، سبز و آبی هستند.

110
00:09:20,400 --> 00:09:25,440
وقتی همه این مقادیر کوچک را در 19 ضرب می‌کنم و آنها را با هم جمع می‌کنم، میانگینی را

111
00:09:25,440 --> 00:09:30,480
در امتداد هر کانال رنگی به ما می‌دهد و پیکسل مربوطه برای تصویر سمت راست همان مجموع تعریف

112
00:09:30,480 --> 00:09:36,320
می‌شود. اثر کلی، همانطور که ما این کار را برای هر پیکسل روی تصویر انجام می‌دهیم، این است

113
00:09:36,320 --> 00:09:40,880
که هر یک به همه همسایگان خود وارد می‌شود، که نسخه‌ای مبهم‌تر از نسخه اصلی به ما می‌دهد.

114
00:09:41,680 --> 00:09:46,640
در زبان ما می گوییم که تصویر سمت راست پیچیدگی تصویر اصلی ما با شبکه کوچکی

115
00:09:46,640 --> 00:09:52,000
از مقادیر است. یا از نظر فنی تر، شاید باید بگویم که این پیچیدگی با یک نسخه

116
00:09:52,000 --> 00:09:56,160
چرخشی 180 درجه از آن شبکه کوچک مقادیر است. نه اینکه متقارن بودن شبکه مهم باشد،

117
00:09:56,160 --> 00:10:00,720
اما فقط باید در نظر داشت که تعریف کانولوشن، همانطور که از زمینه ریاضی خالص به ارث

118
00:10:00,720 --> 00:10:05,760
رسیده است، همیشه باید شما را به فکر کردن در مورد آن آرایه دوم دعوت کند.

119
00:10:05,760 --> 00:10:10,240
اگر این را کمی تغییر دهیم، می‌توانیم با انتخاب شبکه‌ای متفاوت از مقادیر، جلوه تاری بسیار زیباتری به

120
00:10:10,240 --> 00:10:15,920
دست آوریم. در این مورد من یک شبکه کوچک 5x5 دارم، اما تمایز آن به اندازه آن نیست.

121
00:10:15,920 --> 00:10:19,920
اگر بزرگنمایی کنیم متوجه می‌شویم که مقدار در وسط بسیار بزرگتر از مقدار به سمت لبه‌ها است، و از جایی

122
00:10:19,920 --> 00:10:25,360
که این مقدار می‌آید این است که همه آنها از یک منحنی زنگی، که به عنوان توزیع گاوسی شناخته می‌شود،

123
00:10:25,360 --> 00:10:30,240
نمونه‌برداری شده‌اند. به این ترتیب وقتی همه این مقادیر را در پیکسل متناظری که در بالای آن قرار

124
00:10:30,240 --> 00:10:35,200
دارند ضرب می کنیم، وزن بسیار بیشتری به پیکسل مرکزی می دهیم و به پیکسل هایی که در لبه

125
00:10:35,200 --> 00:10:39,920
قرار دارند بسیار کمتر. و درست مانند قبل پیکسل مربوطه در سمت راست به این مجموع تعریف شده

126
00:10:39,920 --> 00:10:45,360
است. همانطور که ما این فرآیند را برای هر پیکسل انجام می‌دهیم، جلوه‌ای تار ایجاد می‌کند که

127
00:10:45,360 --> 00:10:49,760
به‌طور واقعی‌تر تصور خارج کردن لنز شما از فوکوس یا چیزی شبیه به آن را شبیه‌سازی می‌کند.

128
00:10:49,760 --> 00:10:54,960
اما محو کردن تنها کاری است که می توانید با این ایده انجام دهید. به عنوان مثال به این شبکه

129
00:10:54,960 --> 00:10:59,600
کوچک مقادیر، که شامل تعدادی اعداد مثبت در سمت چپ و برخی اعداد منفی در سمت راست است،

130
00:10:59,600 --> 00:11:04,480
نگاهی بیندازید، که من به ترتیب با آبی و قرمز رنگ می‌کنم. چند لحظه وقت بگذارید تا ببینید آیا

131
00:11:04,480 --> 00:11:11,680
می توانید پیش بینی کنید و بفهمید که چه تاثیری بر تصویر نهایی خواهد داشت یا خیر. بنابراین در این مورد، من فقط

132
00:11:11,680 --> 00:11:16,560
تصویر را به‌جای رنگی، به‌عنوان مقیاس خاکستری در نظر می‌گیرم، بنابراین هر یک از پیکسل‌ها فقط با یک عدد

133
00:11:16,560 --> 00:11:21,280
به جای سه نمایش داده می‌شوند. و نکته ای که ارزش توجه دارد این است که با انجام این

134
00:11:21,280 --> 00:11:26,240
پیچیدگی امکان دریافت مقادیر منفی وجود دارد. به عنوان مثال، در این نقطه، اگر در نیمه چپ

135
00:11:26,240 --> 00:11:30,960
بزرگنمایی کنیم، شبکه کوچک ما کاملاً روی پیکسل‌های سیاه قرار می‌گیرد که مقدار آن صفر

136
00:11:30,960 --> 00:11:35,360
است، اما نیمه سمت راست مقادیر منفی روی پیکسل‌های سفید قرار می‌گیرند. ارزش یک دارند

137
00:11:36,000 --> 00:11:40,960
بنابراین وقتی عبارت‌های متناظر را ضرب می‌کنیم و آنها را با هم جمع می‌کنیم، نتایج بسیار منفی خواهد بود، و روشی

138
00:11:40,960 --> 00:11:45,120
که من این را با تصویر سمت راست نشان می‌دهم این است که مقادیر منفی را قرمز و مقادیر مثبت

139
00:11:45,120 --> 00:11:49,520
را آبی رنگ می‌کنیم. نکته دیگری که باید به آن توجه کنید این است که وقتی روی یک وصله همرنگ

140
00:11:49,520 --> 00:11:55,680
هستید همه چیز به صفر می رسد زیرا مجموع مقادیر در شبکه کوچک ما صفر است. این بسیار متفاوت

141
00:11:55,680 --> 00:11:59,680
از دو مثال قبلی است که در آن مجموع شبکه کوچک ما یک بود، که به ما اجازه می دهد آن

142
00:11:59,680 --> 00:12:05,760
را به عنوان میانگین متحرک و در نتیجه تاری تفسیر کنیم. در مجموع، این فرآیند کوچک اساساً هر جا

143
00:12:05,760 --> 00:12:10,240
که تغییری در مقدار پیکسل وجود داشته باشد، هنگام حرکت از چپ به راست، شناسایی

144
00:12:10,240 --> 00:12:13,760
می‌کند، و بنابراین نوعی روش برای برداشتن تمام لبه‌های عمودی تصویر به شما ارائه می‌دهد.

145
00:12:16,560 --> 00:12:20,960
و به طور مشابه، اگر شبکه را به اطراف بچرخانیم تا با حرکت از بالا

146
00:12:20,960 --> 00:12:26,000
به پایین تغییر کند، تمام لبه‌های افقی جمع می‌شود، که در مورد تصویر موجود

147
00:12:26,000 --> 00:12:31,520
کوچک پای ما، منجر به چشم‌های شیطانی بسیار زیبایی می‌شود. به هر حال، این شبکه کوچک‌تر

148
00:12:31,520 --> 00:12:36,160
اغلب هسته نامیده می‌شود، و زیبایی اینجاست که چگونه فقط با انتخاب یک هسته متفاوت می‌توانید جلوه‌های پردازش تصویر

149
00:12:36,160 --> 00:12:40,240
متفاوتی را دریافت کنید، نه تنها تشخیص لبه‌های خود را محو کنید، بلکه چیزهایی مانند شارپ کردن را نیز محو

150
00:12:40,240 --> 00:12:44,800
کنید. برای کسانی از شما که نام یک شبکه عصبی کانولوشنال را شنیده‌اید، این ایده این است

151
00:12:44,800 --> 00:12:49,600
که از داده‌ها برای فهمیدن اینکه هسته‌ها در وهله اول باید چه باشند، همانطور که شبکه

152
00:12:49,600 --> 00:12:55,120
عصبی می‌خواهد تشخیص دهد، مشخص می‌شود. نکته دیگری که شاید باید مطرح کنم طول خروجی است.

153
00:12:55,120 --> 00:12:59,040
برای چیزی مانند مثال میانگین متحرک، ممکن است بخواهید فقط زمانی که هر دو پنجره

154
00:12:59,040 --> 00:13:04,080
به طور کامل با یکدیگر هماهنگ هستند، به شرایط فکر کنید، یا در مثال پردازش

155
00:13:04,080 --> 00:13:09,200
تصویر ممکن است بخواهید خروجی نهایی با اندازه اصلی باشد. اکنون کانولوشن‌ها به‌عنوان یک عملیات

156
00:13:09,200 --> 00:13:13,920
ریاضی محض همیشه آرایه‌ای را تولید می‌کنند که بزرگ‌تر از دو آرایه‌ای است که شما با آن شروع

157
00:13:13,920 --> 00:13:17,520
کرده‌اید، حداقل با فرض اینکه طول یکی از آنها یک نباشد. فقط بدانید که در

158
00:13:17,520 --> 00:13:21,440
زمینه‌های خاص علم کامپیوتر اغلب می‌خواهید عمداً آن خروجی را کوتاه کنید.

159
00:13:21,520 --> 00:13:29,200
نکته دیگری که ارزش برجسته کردن دارد این است که در زمینه علم کامپیوتر، این تصور از ورق زدن آن هسته قبل

160
00:13:29,200 --> 00:13:34,080
از اینکه اجازه دهید آن را در سراسر نسخه اصلی قرار دهید، اغلب بسیار عجیب و غریب و غیرقابل استفاده به نظر

161
00:13:34,080 --> 00:13:38,960
می رسد، اما دوباره توجه داشته باشید که این همان چیزی است که از زمینه ریاضی خالص به ارث رسیده است،

162
00:13:38,960 --> 00:13:44,000
جایی که مانند ما با احتمالات دیدم که این یک کار فوق العاده طبیعی است. و در واقع می توانم یک مثال

163
00:13:44,000 --> 00:13:48,480
ریاضی خالص دیگر را به شما نشان دهم که در آن حتی برنامه نویسان نیز باید به این مورد اهمیت

164
00:13:48,480 --> 00:13:53,760
دهند زیرا درها را برای الگوریتم بسیار سریعتری برای محاسبه همه اینها باز می کند. برای تنظیم سریعتر منظورم، اجازه

165
00:13:53,760 --> 00:13:58,560
دهید به عقب برگردم و دوباره تعدادی پایتون را بالا بکشم و دو آرایه نسبتا بزرگ

166
00:13:58,560 --> 00:14:02,880
متفاوت ایجاد کنم. هر کدام صد هزار عنصر تصادفی در خود خواهند داشت و من

167
00:14:02,880 --> 00:14:08,640
قصد دارم زمان اجرای تابع convolve را از کتابخانه numpy ارزیابی کنم. و در این مورد

168
00:14:08,640 --> 00:14:12,800
آن را برای چندین تکرار مختلف اجرا می‌کند، سعی می‌کند میانگینی را پیدا کند و به نظر می‌رسد که

169
00:14:12,880 --> 00:14:18,640
در این رایانه حداقل میانگین آن 4 است. 87 ثانیه در مقابل، اگر من از یک تابع متفاوت از

170
00:14:18,640 --> 00:14:24,080
کتابخانه scipy به نام fftconvolve استفاده کنم که همان چیزی است که فقط به طور متفاوت پیاده سازی شده است

171
00:14:24,080 --> 00:14:30,640
که فقط 4 طول می کشد. به طور متوسط 3 میلی ثانیه، بنابراین سه مرتبه بهبود.

172
00:14:30,640 --> 00:14:34,800
و دوباره حتی اگر با نام دیگری پرواز می کند، همان خروجی را می دهد که تابع convolve

173
00:14:34,800 --> 00:14:38,880
دیگر انجام می دهد، فقط کاری انجام می دهد تا آن را به روشی هوشمندانه انجام دهد.

174
00:14:38,880 --> 00:14:46,800
به یاد داشته باشید که چگونه با مثال احتمالی که گفتم روش دیگری که می‌توانید در مورد کانولوشن فکر کنید

175
00:14:46,800 --> 00:14:51,520
این بود که این جدول از همه محصولات زوجی ایجاد کنید و سپس آن محصولات زوجی را در امتداد

176
00:14:51,520 --> 00:14:56,560
قطرها جمع کنید. البته هیچ چیز خاصی در مورد احتمال وجود ندارد هر زمان که شما دو لیست مختلف از اعداد را

177
00:14:56,560 --> 00:15:00,880
در هم می پیچید و می توانید از این طریق به آن فکر کنید. این نوع جدول ضرب را با همه

178
00:15:00,880 --> 00:15:05,520
حاصل های جفتی ایجاد کنید و سپس هر جمع در طول مورب با یکی از خروجی های نهایی شما

179
00:15:05,520 --> 00:15:11,680
مطابقت دارد. یکی از زمینه هایی که این دیدگاه به ویژه طبیعی است، زمانی است که دو چند جمله ای را با هم

180
00:15:11,680 --> 00:15:16,240
ضرب می کنید. به عنوان مثال، اجازه دهید شبکه کوچکی را که در حال حاضر داریم، در نظر بگیرم و عبارت های بالا

181
00:15:16,240 --> 00:15:23,920
را با 1، 2x، و 3x مربع جایگزین کنیم و سایر عبارت ها را با 4، 5x، و 6x مربع جایگزین کنیم.

182
00:15:23,920 --> 00:15:27,920
حالا به این فکر کنید که وقتی ما در حال ایجاد همه این محصولات جفتی مختلف بین این دو لیست هستیم،

183
00:15:27,920 --> 00:15:32,960
به چه معناست. کاری که شما انجام می‌دهید اساساً گسترش حاصلضرب کامل دو چند جمله‌ای است که

184
00:15:32,960 --> 00:15:38,240
من یادداشت کرده‌ام و سپس هنگامی که در امتداد قطری که مربوط به جمع‌آوری همه

185
00:15:38,240 --> 00:15:43,920
عبارت‌های مشابه است که بسیار منظم است، جمع آوری یک چند جمله‌ای و جمع‌آوری عبارت‌های مشابه،

186
00:15:43,920 --> 00:15:50,640
دقیقاً برابر است. همان فرآیند کانولوشن اما این به ما امکان می‌دهد کاری انجام دهیم که بسیار جالب

187
00:15:50,640 --> 00:15:55,360
است زیرا به آنچه در اینجا می‌گوییم فکر کنید. ما می گوییم اگر شما دو تابع مختلف را بگیرید و آنها

188
00:15:55,360 --> 00:16:00,560
را با هم ضرب کنید، این یک عمل نقطه ای ساده است، این همان چیزی است که اگر ابتدا ضرایب

189
00:16:00,560 --> 00:16:05,920
را از هر یک از آنها استخراج کرده باشید، با فرض اینکه چند جمله ای هستند و سپس کانولوشنی از

190
00:16:05,920 --> 00:16:11,840
آن ها را گرفته باشید. دو لیست از ضرایب چیزی که آن را بسیار جالب می کند این است که

191
00:16:11,840 --> 00:16:16,560
کانولوشن ها اصولاً بسیار پیچیده تر از ضرب ساده به نظر می رسند و منظور من فقط از نظر مفهومی

192
00:16:16,560 --> 00:16:21,760
نیست که فکر کردن به آنها سخت تر است، منظورم این است که از نظر محاسباتی برای انجام یک کانولوشن

193
00:16:21,760 --> 00:16:27,040
به مراحل بیشتری نیاز دارد تا انجام یک کانولوشن. محصول نقطه ای از دو لیست مختلف. به عنوان مثال، فرض

194
00:16:27,040 --> 00:16:31,920
کنید من به شما دو چند جمله‌ای بسیار بزرگ دادم، مثلاً هر کدام با صد ضرایب مختلف، سپس اگر

195
00:16:32,480 --> 00:16:37,520
روش ضرب آنها به این صورت بود که این محصول را بسط دهید، می‌دانید که تمام این شبکه 100 در

196
00:16:37,520 --> 00:16:43,600
100 از محصولات زوجی را پر می‌کنید که به شما نیاز دارد. 10000 محصول مختلف را انجام دهید و

197
00:16:43,600 --> 00:16:48,560
سپس هنگامی که تمام عبارات مشابه را در امتداد مورب ها جمع آوری می کنید، مجموعه دیگری از حدود

198
00:16:48,560 --> 00:16:55,200
10000 عملیات است. به طور کلی تر، در زبان انگلیسی می گوییم که الگوریتم O از n معنای مربع

199
00:16:55,200 --> 00:17:00,560
برای دو لیست با اندازه n است، به طوری که تعداد مقیاس های عملیات متناسب با مربع n است.

200
00:17:00,560 --> 00:17:06,320
از سوی دیگر، اگر من به دو چند جمله ای از نظر خروجی فکر کنم، مثلاً مقادیر

201
00:17:06,320 --> 00:17:11,680
آنها را در تعداد انگشت شماری از ورودی ها نمونه برداری کنم، ضرب آنها فقط به تعداد

202
00:17:11,680 --> 00:17:17,200
نمونه ها نیاز دارد، زیرا دوباره این یک عملیات نقطه ای است و با چند جمله ای

203
00:17:17,200 --> 00:17:22,400
ها فقط به آن نیاز دارید. تعداد محدودی نمونه برای بازیابی ضرایب. به عنوان مثال، دو خروجی

204
00:17:22,400 --> 00:17:27,920
برای تعیین منحصر به فرد یک چند جمله ای خطی کافی است، سه خروجی برای تعیین منحصر به فرد یک

205
00:17:27,920 --> 00:17:33,680
چند جمله ای درجه دوم کافی است و به طور کلی اگر n خروجی مجزا را می شناسید برای مشخص

206
00:17:33,680 --> 00:17:38,800
کردن یک چند جمله ای که دارای n ضریب متفاوت است کافی است یا اگر ترجیح می دهید می توانیم

207
00:17:38,800 --> 00:17:43,680
عبارت این را در زبان سیستم های معادلات تصور کنید من به شما می گویم چند جمله ای دارم اما

208
00:17:43,680 --> 00:17:47,840
به شما نمی گویم چه ضرایبی هستند که برای شما یک معما هستند. در مثال ما ممکن است این را به

209
00:17:47,840 --> 00:17:52,960
عنوان محصولی در نظر بگیرید که ما در حال تلاش برای کشف کردن آن هستیم و سپس فرض کنید من می

210
00:17:52,960 --> 00:17:59,600
گویم اگر ورودی های مختلف مانند 0، 1، 2 را وارد کنید، فقط به شما می گویم خروجی های این چند جمله

211
00:17:59,600 --> 00:18:04,800
ای چه خواهد بود. , 3, on and on و من به اندازه کافی به شما می دهم تا به تعداد

212
00:18:04,800 --> 00:18:09,840
مجهولات معادله داشته باشید حتی اتفاقاً یک سیستم خطی از معادلات است بنابراین خوب است و در اصل حداقل این باید

213
00:18:09,840 --> 00:18:14,880
برای بازیابی ضرایب کافی باشد.

214
00:18:14,880 --> 00:18:20,160


215
00:18:20,160 --> 00:18:26,560


216
00:18:26,560 --> 00:18:32,720


217
00:18:32,720 --> 00:18:38,000


218
00:18:38,000 --> 00:18:43,120


219
00:18:43,120 --> 00:18:47,760


220
00:18:47,760 --> 00:18:53,520


221
00:18:53,520 --> 00:18:58,400


222
00:18:58,400 --> 00:19:04,240


223
00:19:04,240 --> 00:19:09,200


224
00:19:09,200 --> 00:19:13,600


225
00:19:13,600 --> 00:19:18,720


226
00:19:18,720 --> 00:19:23,840


227
00:19:23,840 --> 00:19:30,080


228
00:19:30,080 --> 00:19:34,400


229
00:19:34,400 --> 00:19:41,600


230
00:19:41,600 --> 00:19:46,480


231
00:19:46,480 --> 00:19:51,360


232
00:19:51,360 --> 00:19:57,600


233
00:19:57,600 --> 00:20:03,200


234
00:20:03,200 --> 00:20:08,160


235
00:20:08,160 --> 00:20:12,640


236
00:20:12,640 --> 00:20:17,520


237
00:20:17,520 --> 00:20:22,720


238
00:20:22,720 --> 00:20:28,320


239
00:20:28,320 --> 00:20:33,040


240
00:20:33,040 --> 00:20:38,080


241
00:20:38,080 --> 00:20:43,600


242
00:20:43,600 --> 00:20:48,640


243
00:20:48,640 --> 00:20:53,200


244
00:20:53,200 --> 00:20:58,960


245
00:20:58,960 --> 00:21:03,280


246
00:21:03,280 --> 00:21:08,960


247
00:21:08,960 --> 00:21:14,480


248
00:21:14,480 --> 00:21:18,480


249
00:21:18,480 --> 00:21:25,600


250
00:21:25,600 --> 00:21:30,560


251
00:21:30,560 --> 00:21:35,120


252
00:21:35,120 --> 00:21:39,600


253
00:21:39,600 --> 00:21:44,480


254
00:21:44,480 --> 00:21:50,160


255
00:21:50,160 --> 00:21:54,800


256
00:21:54,800 --> 00:21:59,360


257
00:21:59,360 --> 00:22:04,640


258
00:22:04,640 --> 00:22:10,720


259
00:22:10,720 --> 00:22:16,000


260
00:22:16,000 --> 00:22:20,720


261
00:22:20,720 --> 00:22:26,320


262
00:22:26,320 --> 00:22:31,280


263
00:22:31,280 --> 00:22:36,880


264
00:22:36,880 --> 00:22:51,040


