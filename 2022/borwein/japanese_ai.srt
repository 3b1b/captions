1
00:00:00,000 --> 00:00:02,840
時々、宇宙があなたにちょっかいをかけているように感じることがあります。

2
00:00:02,840 --> 00:00:07,720
画面には一連の計算が表示されていますが、心配しないでください。すぐに、それぞれの計算が実際に何を言っているのかを解いて視覚化します。

3
00:00:07,720 --> 00:00:10,240


4
00:00:10,480 --> 00:00:16,960
ここで注目していただきたいのは、シーケンスが、たとえランダムであっても、非常に予測可能なパターンに従っていることと、各計算がどのようにして偶然 pi に等しくなるかということです。

5
00:00:17,280 --> 00:00:22,880
そして、何らかの理由でコンピューター上で単にこれらを評価していたとしたら、これは永遠に続くパターンだと思うかもしれません。

6
00:00:22,920 --> 00:00:25,640


7
00:00:25,960 --> 00:00:32,200
しかし、そうではありません。 ある時点で停止し、pi に等しくなるのではなく、pi

8
00:00:32,680 --> 00:00:34,680
よりかろうじて小さい値が得られます。

9
00:00:38,880 --> 00:00:40,880
さて、ここで何が起こっているのかを掘り下げてみましょう。

10
00:00:40,880 --> 00:00:44,680
今日の物語の主人公は、x を x で割った関数の正弦です。

11
00:00:45,120 --> 00:00:48,600
これは実際、数学や工学の分野でよく登場するため、sinc という独自の名前が付けられています。通常の振動正弦曲線から始めて、それから遠ざかるにつれてそれを押しつぶすというような考え方が考えられます。

12
00:00:48,880 --> 00:00:52,280
x に

13
00:00:52,600 --> 00:00:58,920
1 を乗じてゼロにします。

14
00:00:59,040 --> 00:01:05,360
そして、賢明な方は、x が 0 に等しい場合に何が起こるか尋ねるかもしれません。これを代入すると、0 を 0 で割ったように見えるからです。

15
00:01:05,360 --> 00:01:09,160
そして、皆さんの中でさらに聡明な人、おそらく微積分の授業を終えたばかりの人は、値が 0 に近づくほど、関数は

16
00:01:09,480 --> 00:01:14,640
1 に近づくことを指摘できるでしょう。

17
00:01:14,880 --> 00:01:20,200
したがって、単純に sinc 関数を 0 から 1 に等しくなるように再定義すると、素晴らしい連続曲線が得られます。

18
00:01:20,520 --> 00:01:27,080
これらすべては少しずつです。実際に関心があるのは、この曲線の負の無限大から無限大までの積分です。これは、曲線と X

19
00:01:27,320 --> 00:01:33,800
軸の間の領域、より正確には符号付きの領域を意味すると考えられます。面積。つまり、X

20
00:01:34,000 --> 00:01:37,760
軸のグラフの正の部分で囲まれたすべての面積を加算し、グラフと X

21
00:01:38,000 --> 00:01:42,000
軸の負の部分で囲まれたすべての部分を減算します。

22
00:01:42,320 --> 00:01:46,760
最初に見たように、これが正確に pi

23
00:01:47,000 --> 00:01:53,080
と評価される場合がたまたまあります。これは素晴らしいことですが、少し奇妙でもあります。通常の微積分ツールを使用してこれにどのようにアプローチするかは完全には明らかではありません。

24
00:01:53,600 --> 00:01:56,320
ビデオの終わりの方で、これを行う方法のコツを紹介します。

25
00:01:56,720 --> 00:02:02,960
冒頭で説明したシーケンスを進めて、次のステップは sinc 関数のコピーを取得することです。ここで x を

26
00:02:03,400 --> 00:02:08,200
3 で割った値を代入します。基本的には同じグラフのように見えますが、水平方向に 3 倍に引き伸ばされます。

27
00:02:08,520 --> 00:02:10,920
これら

28
00:02:11,120 --> 00:02:16,000
2

29
00:02:16,040 --> 00:02:19,760
つの関数を掛け合わせると、質量が中央に向かって集中しているように見える、より複雑な波が得られます。通常の関数では、これにより領域が完全に変化すると予想されます。

30
00:02:19,960 --> 00:02:23,360
このように積分をランダムに変更して、何も変わらないと期待することはできません。

31
00:02:23,760 --> 00:02:28,360
したがって、この結果が pi と等しいこと、つまり何も変わっていないことは、すでに少し奇妙です。

32
00:02:28,760 --> 00:02:31,040
これもリストに追加すべきもう 1 つの謎です。

33
00:02:31,040 --> 00:02:36,480
そして、シーケンスの次のステップでは、sinc 関数のさらに拡張されたバージョンを 5 倍にし、それをすでに得ている値で乗算し、曲線全体の下の符号付き領域を再度調べます。これは再び

34
00:02:36,960 --> 00:02:44,240
pi に等しくなります。 。

35
00:02:45,000 --> 00:02:50,760
そして、このように続きます。 反復のたびに、新しい奇数だけ拡張し、それを現在の値に乗算します。

36
00:02:51,240 --> 00:02:54,600
気づくかもしれない点の 1 つは、入力 x が

37
00:02:55,000 --> 00:02:59,600
0 に等しい場合を除いて、この関数のすべての部分が 1 より小さい値で徐々に乗算されていることです。

38
00:03:00,040 --> 00:03:04,440
したがって、シーケンスが進むにつれて、物事がどんどん押しつぶされていき、どちらかというとエリアが小さくなることは予想されるでしょう。

39
00:03:04,720 --> 00:03:07,320


40
00:03:08,400 --> 00:03:13,560
最終的にはまさにそのとおりになりますが、奇妙なのは、非常に長い間安定したままであり、もちろんより適切なことに、値 15

41
00:03:13,560 --> 00:03:20,800
でブレイクするときも、ほんのわずかな量でブレイクすることです。

42
00:03:21,080 --> 00:03:23,840
そして、これが何らかの数値エラーの結果であると考える前に、おそらく浮動小数点演算で何かを行っているためです。これをより正確に計算すると、最後の積分の正確な値は次のとおりです。これは特定の分数です。分子と分母が不合理な円周率。

43
00:03:23,840 --> 00:03:27,960


44
00:03:28,200 --> 00:03:35,760


45
00:03:35,760 --> 00:03:38,600
両方とも約4000億です。

46
00:03:39,280 --> 00:03:44,880
このパターンは、ジョナサンとデビッド

47
00:03:44,880 --> 00:03:50,120
ボーワインの父子ペアによる論文で説明されています。これは非常に興味深いもので、研究仲間がコンピュータ代数システムを使用してこれらの積分を計算していたとき、これは次のとおりである必要があると仮定したことについて彼らが言及しました。ある種のバグ。

48
00:03:50,120 --> 00:03:52,520


49
00:03:52,520 --> 00:03:57,080
しかし、これはバグではなく、実際の現象であり、実際にはそれよりも奇妙です。

50
00:03:57,080 --> 00:04:01,560
これらすべての積分を取得し、さらに別の係数 x

51
00:04:01,560 --> 00:04:04,400
の 2

52
00:04:04,400 --> 00:04:07,520
コサインを含めると、やはり値が完全に変わると思われるでしょうが、このように新しいものをランダムに積分して積分することはできません。ずっと pi

53
00:04:07,520 --> 00:04:13,920
と等しくなり続けます。それよりも長くなり、113 番に到達するまで中断されません。

54
00:04:13,920 --> 00:04:18,680
そして、それが壊れるときは、想像できるほどわずかで、まったく微妙な量です。

55
00:04:18,680 --> 00:04:22,880
そこで自然な疑問は、いったいここで何が起こっているのかということです。

56
00:04:22,880 --> 00:04:26,560
そして幸運なことに、これらすべてについて実際に満足のいく説明があります。

57
00:04:26,560 --> 00:04:31,440
これについて私が考えている方法は、最初はまったく関係がないように見えますが、同様のパターンを示し、113

58
00:04:31,440 --> 00:04:37,280
という数字に到達するまで値が非常に安定している現象を示すことです。

59
00:04:37,280 --> 00:04:41,120
15 という数字に到達すると、ほんのわずかな量だけ変化します。

60
00:04:41,120 --> 00:04:44,960
その後、この一見無関係に見える現象が、隠れてすべての積分式と同じであるが、隠れている理由を説明します。

61
00:04:44,960 --> 00:04:48,960


62
00:04:48,960 --> 00:04:51,840
そこで、まったく違うように見えることに注目して、rect of x を呼び出す関数について考えてみましょう。この関数は、入力が負の

63
00:04:51,840 --> 00:04:55,120
1/2 と 1/2 の間にある場合は

64
00:04:55,120 --> 00:05:00,560
1 に等しく、それ以外の場合は 0 に等しいと定義されています。

65
00:05:00,560 --> 00:05:05,040
。 基本的に、関数はこの退屈なステップです。

66
00:05:05,040 --> 00:05:09,600
これは、定義する一連の関数の最初のものになるため、これを f1 of

67
00:05:09,600 --> 00:05:15,600
x と呼びます。シーケンス内の各新しい関数は、前の関数の一種の移動平均になります。

68
00:05:15,600 --> 00:05:21,520
たとえば、この 2 回目の反復を定義する方法は、幅が 3

69
00:05:21,520 --> 00:05:26,160
分の 1 であるこのスライディング

70
00:05:26,160 --> 00:05:28,960
ウィンドウを取得し、特定の入力 x に対して、ウィンドウがその入力 x

71
00:05:28,960 --> 00:05:34,080
の中心にあるとき、以下に示す新しい関数の値を取得することです。 , は、そのウィンドウ内で上の最初の関数の平均値と等しくなるように定義されます。

72
00:05:34,080 --> 00:05:38,000
たとえば、ウィンドウが十分に左にある場合、ウィンドウ内のすべての値は 0 になるため、下のグラフは

73
00:05:38,000 --> 00:05:40,160
0 を示します。

74
00:05:40,160 --> 00:05:43,120
そのウィンドウがプラトーを少し超え始めるとすぐに、平均値は 0

75
00:05:43,120 --> 00:05:47,120
より少し大きくなり、以下のグラフでそれがわかります。

76
00:05:47,120 --> 00:05:52,320
そして、ウィンドウのちょうど半分が 1 のプラトーを超え、その半分が 0 になると、下のグラフの対応する値が

77
00:05:52,320 --> 00:05:56,560
2 分の 1 になり、ポイントがわかります。

78
00:05:56,560 --> 00:06:01,840
注目していただきたい重要な点は、ウィンドウが完全に上のプラトーにあり、すべての値が 1

79
00:06:01,840 --> 00:06:05,360
である場合、平均値も 1

80
00:06:05,360 --> 00:06:08,160
になるため、下部の関数でこのプラトーが得られることです。

81
00:06:08,160 --> 00:06:10,720
この一番下の関数を x の f2

82
00:06:10,720 --> 00:06:15,360
と呼びましょう。考えていただきたいのは、その 2 番目の関数のプラトーの長さです。

83
00:06:15,360 --> 00:06:16,320
どのくらいの幅にすればよいでしょうか？

84
00:06:16,960 --> 00:06:21,520
少し考えてみると、上の台地の左端と下の台地の左端の間の距離は、ウィンドウの幅のちょうど半分、つまり 3

85
00:06:21,520 --> 00:06:26,000
分の 1

86
00:06:26,000 --> 00:06:27,600
の半分になります。

87
00:06:27,600 --> 00:06:31,440
同様に右側では、プラトーのエッジ間の距離はウィンドウ幅の半分であるため、全体としては 1 からそのウィンドウ幅を引いたもの、つまり 1 から

88
00:06:31,440 --> 00:06:36,720
3 分の 1 を引いたものになります。

89
00:06:37,360 --> 00:06:41,520
これから計算する値、つまり壊れるまでしばらく安定しているように見える値は、入力 0

90
00:06:42,080 --> 00:06:44,640
でのこの関数の値です。この関数の値は、プラトー内にあるため、これらの反復の両方で 1

91
00:06:44,640 --> 00:06:49,120
に等しくなります。

92
00:06:49,120 --> 00:06:52,880
次の反復では、最後の関数の移動平均を取得しますが、今回は幅が 5 分の

93
00:06:52,880 --> 00:06:55,840
1 のウィンドウを使用します。

94
00:06:55,840 --> 00:06:58,880
このウィンドウをスライドすると、前の関数の滑らかなバージョンが得られる理由を考えるのは、ちょっと楽しいです。

95
00:06:58,880 --> 00:07:01,920


96
00:07:01,920 --> 00:07:06,400
繰り返しになりますが、注目していただきたい重要な点は、そのウィンドウが完全に前の関数のプラトー内にある場合、定義上、一番下の関数が 1

97
00:07:06,400 --> 00:07:11,360
に等しくなる仕組みです。

98
00:07:11,920 --> 00:07:16,160
今回は、下部の台地の長さは、前の台地の長さから 1 から 3 分の 1

99
00:07:16,160 --> 00:07:19,520
を引いたものから、ウィンドウの幅から 5 分の 1 を引いたものになります。

100
00:07:19,520 --> 00:07:22,880
推論は前と同じで、ウィンドウの中央が上部の台地にある点から、ウィンドウ全体がその台地の内側にあり、ウィンドウの幅の半分で、同様に右側にある場所まで移動します。

101
00:07:22,880 --> 00:07:28,000
。

102
00:07:28,000 --> 00:07:31,120


103
00:07:31,120 --> 00:07:35,600
もう一度言いますが、記録する値は、入力が 0 の場合のこの関数の出力であり、この場合も正確に

104
00:07:35,600 --> 00:07:37,200
1 になります。

105
00:07:38,400 --> 00:07:41,840
次の反復は、ウィンドウ幅が 7 分の 1 である移動平均です。

106
00:07:41,840 --> 00:07:44,320
プラトーは 1 対 7 だけ小さくなります。

107
00:07:44,320 --> 00:07:48,400
1 対 9 でもう 1 回反復すると、プラトーはその分だけ小さくなります。

108
00:07:48,400 --> 00:07:50,720
さらに進んでいくと、プラトーはどんどん薄くなっていきます。

109
00:07:51,680 --> 00:07:56,240
また、プラトーのすぐ外側で、関数が実際に 1 に非常に近いことにも注目してください。これは、常に

110
00:07:56,240 --> 00:08:00,480
1 のプラトーと隣接するプラトーとの間の平均の結果であり、それら自体が実際に

111
00:08:00,480 --> 00:08:02,160
1 に非常に近いためです。

112
00:08:02,960 --> 00:08:07,520
このすべてが中断されるのは、幅が 15 分の

113
00:08:07,520 --> 00:08:09,840
1 のウィンドウを全体にわたってスライドさせる反復に到達したときです。

114
00:08:10,560 --> 00:08:14,400
この時点で、前のプラトーは実際にはウィンドウ自体よりも薄くなります。

115
00:08:14,400 --> 00:08:20,240
したがって、入力 x が 0 であっても、この移動平均は 1 よりわずかに小さくなければなりません。

116
00:08:20,960 --> 00:08:24,000
ここでの 15 という数字の唯一の特別な点は、これらの奇数の分数の逆数、3 分の 1

117
00:08:24,000 --> 00:08:26,720
と 5 分の 1

118
00:08:26,720 --> 00:08:29,520
と 7 分の 1 を繰り返し加算し続けると、15

119
00:08:29,520 --> 00:08:33,520
分の 1 に達するとその合計が大きくなるということです。 1より大きい。

120
00:08:33,520 --> 00:08:38,160
そして、縮小するプラトーのコンテキストでは、幅 1

121
00:08:38,160 --> 00:08:41,120
のプラトーから始まり、現在は完全に消えてしまうほどに縮小しています。

122
00:08:41,680 --> 00:08:47,040
重要なのは、これを一見ランダムな手順で定義した関数のシーケンスとして、これらすべての関数の値を入力 0 で計算するように依頼すると、最初は安定しているように見えるパターンが得られるということです。

123
00:08:47,040 --> 00:08:50,800
1 1 1

124
00:08:50,800 --> 00:08:55,280
1 1 1

125
00:08:55,280 --> 00:09:00,000
ですが、8 回目の反復に到達するまでに、わずかに、かろうじて不足します。

126
00:09:00,800 --> 00:09:05,440
これは、pi pi pi

127
00:09:05,440 --> 00:09:10,160
pi pi で安定した値が、ぎりぎり下回るまで安定した値を示す、前に見た積分に似ていますが、似ているだけではない、と私は主張します。

128
00:09:10,160 --> 00:09:15,440
そして偶然にも、移動平均プロセスで得られた 1 よりわずかに小さいこの定数は、まさに一連の積分において

129
00:09:15,440 --> 00:09:20,240
pi の前に位置する係数です。

130
00:09:20,240 --> 00:09:24,720
したがって、2 つの状況は質的に似ているだけでなく、量的にも同じです。

131
00:09:25,360 --> 00:09:29,840
そして、積分値の中に x 項の

132
00:09:29,840 --> 00:09:33,040
2 コサインを追加すると、パターンが破綻するまでずっと長く続くことになります。類推すると、これは同じセットアップに相当しますが、最初の関数にはさらに長いプラトーがあり、x

133
00:09:33,040 --> 00:09:36,240
が負の 1 から

134
00:09:36,240 --> 00:09:39,120
1 まで伸びています。つまり、その長さは

135
00:09:39,120 --> 00:09:43,200
2 です。

136
00:09:43,200 --> 00:09:46,960
したがって、この繰り返しの移動平均プロセスを実行して、ウィンドウをどんどん小さくしていき、プラトー全体に食い込むまでにかなりの時間がかかります。

137
00:09:46,960 --> 00:09:50,960


138
00:09:51,520 --> 00:09:55,920
より具体的には、関連する計算は、これらの奇数の逆数を合計が 2

139
00:09:55,920 --> 00:09:59,520
より大きくなるまでどれくらいの時間加算する必要があるかを尋ねることです。

140
00:09:59,520 --> 00:10:03,360
そして、113 という数字に到達するまで行かなければならないことがわかりました。これは、そこにある積分パターンが

141
00:10:03,360 --> 00:10:08,400
113 に到達するまで続くという事実に対応します。

142
00:10:09,280 --> 00:10:12,400
ところで、これらの奇数の逆数、1/3、1/1、1/5、1

143
00:10:12,400 --> 00:10:15,520
には特別なことは何もないことを強調しておきます。

144
00:10:15,520 --> 00:10:19,440
それはたまたま、ボーワイン夫妻が論文で強調した一連の値であり、その一連がオタク界隈で少し有名になったのだ。

145
00:10:19,440 --> 00:10:22,240


146
00:10:22,240 --> 00:10:26,960
より一般的には、これらの sinc 関数に任意の正の数値シーケンスを挿入することができ、それらの数値の合計が 1

147
00:10:26,960 --> 00:10:31,520
未満である限り、式は pi と等しくなります。

148
00:10:31,520 --> 00:10:35,440
しかし、それらが 1 より大きくなるとすぐに、式は pi を少し下回ります。

149
00:10:35,440 --> 00:10:39,680
これらの移動平均と類似点があると私が信じているのであれば、その理由が分かると思います。

150
00:10:40,240 --> 00:10:44,960
しかし、もちろん、燃えるような疑問は、いったいなぜこの 2

151
00:10:44,960 --> 00:10:46,240
つの状況が相互に関係があるのかということです。

152
00:10:46,240 --> 00:10:50,560
ここから、この議論には、フーリエ変換と畳み込みという 2

153
00:10:50,560 --> 00:10:53,760
つの少し重い機構が導入されます。

154
00:10:53,760 --> 00:10:57,760
これについて私が説明したいのは、このビデオの残りの部分を費やして、これら

155
00:10:57,760 --> 00:11:02,000
2

156
00:11:02,000 --> 00:11:06,160
つのトピックのいずれかに精通しているとは必ずしも想定せずに、議論がどのように進むかについての概要を理解してから説明することです。畳み込みに特化したビデオで詳細が真実である理由。

157
00:11:06,160 --> 00:11:08,160


158
00:11:08,240 --> 00:11:12,320
特に、畳み込み定理と呼ばれるものは、信じられないほど美しく、この特定の非常に難解な質問を超えて役立つためです。

159
00:11:12,320 --> 00:11:16,240


160
00:11:19,600 --> 00:11:24,160
まず、この関数の正弦 x を x

161
00:11:24,160 --> 00:11:28,800
で除算することに焦点を当て、その曲線の下の符号付き領域が pi に等しい理由を示す代わりに、入力 x

162
00:11:28,800 --> 00:11:33,760
を pi と x

163
00:11:33,760 --> 00:11:38,560
の積で置き換える単純な置換を行います。これには、グラフを pi 倍だけ水平方向に押しつぶす効果があるため、領域は pi

164
00:11:38,560 --> 00:11:43,360
倍に縮小されます。つまり、新しい目標は、右側の積分が正確に 1 に等しい理由を示すことです。

165
00:11:43,360 --> 00:11:47,760
ちなみに、一部のエンジニアリングの文脈では、この関数の内側に pi を付けて

166
00:11:47,760 --> 00:11:51,840
sinc という名前を使用します。正規化された関数、つまり関数の下の面積が

167
00:11:51,840 --> 00:11:54,640
1 に等しいことは非常に優れていることが多いためです。

168
00:11:54,640 --> 00:11:57,680
重要なのは、この積分を右側に示すことは、積分を左側に示すこととまったく同じであり、変数を変更するだけであるということです。

169
00:11:57,680 --> 00:12:00,400


170
00:12:00,480 --> 00:12:04,080
そして、シーケンス内の他のすべての積分についても同様に、それぞれを調べて、x を

171
00:12:04,080 --> 00:12:09,680
pi と

172
00:12:09,680 --> 00:12:14,240
x の積で置き換えます。ここから、これらすべての積分は移動平均の例に類似しているだけでなく、両方の積分が類似しているという主張になります。これらのうち、まったく同じものを計算する

173
00:12:14,240 --> 00:12:16,160
2 つの異なる方法です。

174
00:12:16,160 --> 00:12:20,560
そして、この関係は、この sinc 関数、または内部に

175
00:12:20,560 --> 00:12:24,960
pi を含むエンジニアの sinc

176
00:12:24,960 --> 00:12:26,320
関数が、いわゆるフーリエ変換を使用する rect 関数に関連付けられているという事実に帰着します。

177
00:12:26,320 --> 00:12:29,440
フーリエ変換について聞いたことがない場合でも、フーリエ変換についてできることがいくつかあります。

178
00:12:29,440 --> 00:12:32,560


179
00:12:32,560 --> 00:12:36,880
よく説明されるのは、関数を純粋な周波数の束の合計として分解したい場合、または無限関数の場合は純粋な周波数の束の連続積分である場合、フーリエ変換で次のことがわかるというものです。それらすべての構成部品のすべての強さと位相。

180
00:12:36,880 --> 00:12:41,040


181
00:12:41,040 --> 00:12:44,880


182
00:12:44,880 --> 00:12:46,960


183
00:12:46,960 --> 00:12:51,280
しかし、ここで本当に知っておく必要があるのは、これは

184
00:12:51,280 --> 00:12:56,080
1

185
00:12:56,080 --> 00:12:59,760
つの関数を取り込んで新しい関数を吐き出すものであり、多くの場合、それは元の関数の情報を別の言語で言い換えたものであると考えられるということです。新しい視点から見てみます。

186
00:12:59,760 --> 00:13:00,480


187
00:13:01,040 --> 00:13:05,200
たとえば、先ほども述べたように、フーリエ変換を行うこの新しい言語で書かれたこの sinc 関数は、トップ

188
00:13:05,200 --> 00:13:08,880
ハット Rect 関数に似ています。

189
00:13:08,880 --> 00:13:12,480
ちなみに、これは y

190
00:13:12,480 --> 00:13:15,760
軸に関して対称な関数のフーリエ変換の良い点であり、それ自体が逆変換になります。

191
00:13:15,760 --> 00:13:20,080
そして実際には、もう少し一般的な事実として、sinc

192
00:13:20,080 --> 00:13:23,840
関数の引き伸ばしたバージョンを変換すると、k

193
00:13:23,840 --> 00:13:28,400
倍水平に引き伸ばされて、引き伸ばされて押しつぶされたバージョンが得られるということです。このrect関数。

194
00:13:28,400 --> 00:13:32,400
しかし、もちろん、これらはすべて、この翻訳を実際に行うことができない限り、単なる意味のない単語や専門用語です。

195
00:13:32,400 --> 00:13:34,880


196
00:13:34,880 --> 00:13:39,760
フーリエ変換が数学にとってなぜこれほど役立つのかという本当の考え方は、特定の関数に関するステートメントや質問を取り上げ、その関数の変換されたバージョンに関してそれらが何に対応しているかを調べるとき、それらのステートメントとこの新しい言語では、質問は非常に異なって見えることがよくあります。

197
00:13:39,760 --> 00:13:43,840


198
00:13:43,840 --> 00:13:48,240


199
00:13:48,240 --> 00:13:51,840


200
00:13:51,840 --> 00:13:54,880
そして場合によっては、質問への答えがはるかに簡単になることがあります。

201
00:13:55,440 --> 00:13:59,840
たとえば、非常に優れた小さな事実の 1

202
00:13:59,840 --> 00:14:04,000
つ、もう

203
00:14:04,000 --> 00:14:09,760
1

204
00:14:09,760 --> 00:14:13,360
つ、示すべき事柄のリストにあることは、ある関数の積分を負の無限大から無限大まで計算したい場合、その曲線全体の下のこの符号付き領域は同じであるということです。つまり、入力ゼロでその関数のフーリエ変換バージョンを単純に評価するだけです。

205
00:14:13,920 --> 00:14:17,200
これは実際には定義から飛び出してくる事実です。

206
00:14:17,200 --> 00:14:22,160
そして、これは、右側のフーリエ変換された関数の個々の出力が左側の元の関数に関するある種のグローバル情報に対応するという、より一般的な雰囲気を表しています。

207
00:14:22,160 --> 00:14:26,640


208
00:14:26,640 --> 00:14:28,560


209
00:14:28,560 --> 00:14:33,520
私たちの特定のケースでは、この sinc

210
00:14:33,520 --> 00:14:37,840
関数と rect

211
00:14:37,840 --> 00:14:41,760
関数がこのようなフーリエ変換に関連しているということを信じていただけるのであれば、それは積分を説明していますが、そうでなければ計算するのが非常に難しいことになります。なぜなら、すべての符号付き領域を示しているからです。これは、rect を

212
00:14:41,760 --> 00:14:45,040
1 であるゼロで評価するのと同じことです。

213
00:14:45,440 --> 00:14:48,480
さて、あなたは文句を言うかもしれませんが、確かに、これは敷居の下に問題を移動させるだけです。

214
00:14:48,480 --> 00:14:52,960
確かに、このフーリエ変換を計算することは、それがどのようなものであっても、元の積分を計算するのと同じくらい難しいでしょう。

215
00:14:52,960 --> 00:14:54,160


216
00:14:54,160 --> 00:14:58,480
しかし、これらのフーリエ変換を計算するためのヒントやコツがたくさんあるということです。

217
00:14:58,480 --> 00:15:03,040
そしてさらに、それを実行すると、その積分だけではなく、より多くの情報が得られます。

218
00:15:03,040 --> 00:15:05,680
計算を行うことで、かなりの利益が得られます。

219
00:15:06,320 --> 00:15:10,160
さて、私たちが探している関連性を説明するもう

220
00:15:10,160 --> 00:15:14,880
1

221
00:15:14,880 --> 00:15:19,440
つの重要な事実は、2

222
00:15:19,440 --> 00:15:23,600
つの異なる関数があり、その積をとり、その積のフーリエ変換の合計をとった場合、それは同じになるということです。あたかも元の関数のフーリエ変換を個別に取得し、畳み込みとして知られる新しい種類の演算を使用してそれらを組み合わせたかのように、次のビデオで詳しく説明します。

223
00:15:23,600 --> 00:15:28,240


224
00:15:28,240 --> 00:15:32,000
さて、畳み込みについては説明すべきことがたくさんありますが、結論としては、これらの長方形関数を使用した特定のケースでは、畳み込みは、これまでずっと話してきた移動平均の

225
00:15:32,000 --> 00:15:37,680


226
00:15:37,680 --> 00:15:41,600
1

227
00:15:41,600 --> 00:15:46,080


228
00:15:46,080 --> 00:15:51,360
つを組み合わせたものとまったく同じであるということになります。あるコンテキストでの積分は、別のコンテキストでゼロで評価するように見えるという前述の事実に加えて、信じていただければ、あるコンテキストでの乗算は、この新しい演算である畳み込みに対応します。この例では、単純に移動平均と考える必要があります。これらの

229
00:15:51,360 --> 00:15:55,280


230
00:15:55,280 --> 00:16:00,240
sinc

231
00:16:00,240 --> 00:16:04,960


232
00:16:04,960 --> 00:16:09,280
関数をどんどん乗算すると、これらの漸進的移動平均と常にゼロで評価されるという観点から考えることができる理由を説明します。これにより、最終的に何かが壊れる前になぜそのような安定した値が期待されるのかについて、非常に素晴らしい直感が得られます。プラトーの端が少しずつ中心に近づくにつれて、下に向かっていきます。

233
00:16:09,280 --> 00:16:13,440


234
00:16:13,440 --> 00:16:18,720
ちなみに、この最後の重要な事実には特別な名前があり、畳み込み定理と呼ばれます。これについても、さらに詳しく説明します。

235
00:16:18,720 --> 00:16:23,680
3

236
00:16:23,680 --> 00:16:28,560


237
00:16:28,560 --> 00:16:33,200
つの魔法の事実を並べ立てて、すべてはそこから導かれると言ってここで話を終えるのは少し満足できないかもしれないことは承知していますが、フーリエ変換のような強力なツールがなぜ難しい問題に非常に役立つのかを少しでも垣間見ることができれば幸いです。

238
00:16:33,200 --> 00:16:39,280
これは、難しい問題が簡単に見えるように視点を変えるための体系的な方法です。

239
00:16:39,280 --> 00:16:44,560
少なくとも、畳み込み定理のような美しいものについて学ぶ動機を与えることができれば幸いです。

240
00:16:44,560 --> 00:16:48,400


241
00:16:48,400 --> 00:16:53,920
もう 1 つの小さなティーザーとして、この畳み込み定理のもう

242
00:16:53,920 --> 00:16:58,480
1 つの興味深い結果は、2 つの大きな数の積を非常に迅速に

243
00:16:58,480 --> 00:17:01,840
(可能であると考えられているよりもはるかに速く) 計算できるアルゴリズムへの扉を開くことです。

244
00:17:02,800 --> 00:17:05,840
それでは、次のビデオでお会いしましょう。

