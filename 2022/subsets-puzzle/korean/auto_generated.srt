1
00:00:00,000 --> 00:00:02,791
잠시 후 퍼즐을 하나 출제할 텐데요, 

2
00:00:02,791 --> 00:00:06,247
사실 꽤 어려운 퍼즐이지만 그 전에 스포일러를 

3
00:00:06,247 --> 00:00:10,102
드리자면 이 문제를 푸는 방식이 복소수를 사용한다는 

4
00:00:10,102 --> 00:00:10,900
사실입니다.

5
00:00:11,560 --> 00:00:14,217
퍼즐이 순전히 개별적인 질문이라는 점을 

6
00:00:14,217 --> 00:00:17,480
감안하면 터무니없어 보인다는 데 동의할 것입니다.

7
00:00:17,800 --> 00:00:20,260
정수와 그 합에 대해서만 묻습니다.

8
00:00:20,660 --> 00:00:24,560
지평선 어디에도 상상이나 연속성은 찾아볼 수 없습니다.

9
00:00:25,280 --> 00:00:27,953
이산 수학에서 복소수가 비합리적으로 유용한 경우는, 

10
00:00:27,953 --> 00:00:30,720
표현을 빌리자면, 이산 수학에만 국한된 것은 아닙니다.

11
00:00:31,160 --> 00:00:34,807
더 유명한 예를 들자면 수학자들이 소수를 이해하는 

12
00:00:34,807 --> 00:00:37,152
현대적 방법, 즉 소수의 분포, 

13
00:00:37,152 --> 00:00:40,539
특정 영역에서의 밀도 등에 대한 질문은 입력과 

14
00:00:40,539 --> 00:00:44,056
출력이 복소수인 특수하게 설계된 함수를 연구하는 

15
00:00:44,056 --> 00:00:45,620
것과 관련이 있습니다.

16
00:00:46,120 --> 00:00:47,632
여러분 중 일부는 이것이 유명한 리만 

17
00:00:47,632 --> 00:00:49,360
가설의 내용이라는 것을 알고 있을 것입니다.

18
00:00:49,680 --> 00:00:51,848
기본적으로 특별히 설계된 기능이 있으며, 

19
00:00:51,848 --> 00:00:54,488
겉으로 보기에는 소수의 불연속적인 세계와는 무관해 

20
00:00:54,488 --> 00:00:54,960
보입니다.

21
00:00:55,060 --> 00:00:57,000
매끄럽고 복잡한 가치가 있습니다.

22
00:00:57,000 --> 00:00:59,460
하지만 내부적으로는 불연속 소수에 

23
00:00:59,460 --> 00:01:02,180
대해 원하는 모든 정보를 인코딩합니다.

24
00:01:02,600 --> 00:01:05,298
그리고 가장 중요한 것은 소수에 대한 특정 질문은 

25
00:01:05,298 --> 00:01:07,708
소수 자체를 직접 분석하는 것보다 이 함수를 

26
00:01:07,708 --> 00:01:10,600
분석하는 것이 더 쉽게 답을 구할 수 있다는 것입니다.

27
00:01:11,260 --> 00:01:13,367
물론, 잠시 후에 공유할 우리의 

28
00:01:13,367 --> 00:01:16,060
퍼즐은 리만 가설보다 훨씬 더 순수합니다.

29
00:01:16,260 --> 00:01:17,420
장난감 문제입니다.

30
00:01:17,880 --> 00:01:19,994
하지만 영상 말미에 이 문제를 해결하기 

31
00:01:19,994 --> 00:01:22,301
위해 사용하는 기술, 즉 우리가 이 자리에 

32
00:01:22,301 --> 00:01:24,416
모인 진짜 이유가 리만 가설로 이어지는 

33
00:01:24,416 --> 00:01:26,820
설정과 실제로 어떻게 비슷한지 공유하겠습니다.

34
00:01:27,000 --> 00:01:28,788
그리고 소수의 정리와 그 정리를 

35
00:01:28,788 --> 00:01:30,180
둘러싼 모든 생각의 순환.

36
00:01:34,900 --> 00:01:36,967
오늘의 퍼즐은 T2 안드레스쿠와 

37
00:01:36,967 --> 00:01:39,380
주 밍펑이 쓴 이 책에서 가져왔습니다.

38
00:01:39,480 --> 00:01:41,843
기본적으로 국제 수학 올림피아드 미국 

39
00:01:41,843 --> 00:01:44,320
대표팀 훈련에 사용되는 문제 모음입니다.

40
00:01:44,940 --> 00:01:47,700
2장, 고급 문제로 넘어가면 10번 문제에서 

41
00:01:47,700 --> 00:01:50,240
겉보기에는 순진해 보이는 질문을 던집니다.

42
00:01:50,920 --> 00:01:54,351
집합 1의 원소의 합을 5로 나눌 수 있는 

43
00:01:54,351 --> 00:01:57,640
2000까지의 부분집합의 개수를 구합니다.

44
00:01:59,180 --> 00:02:01,420
분석하는 데 시간이 조금 걸릴 수 있습니다.

45
00:02:01,640 --> 00:02:03,571
예를 들어 3, 1, 4 집합과 같은 

46
00:02:03,571 --> 00:02:05,320
것은 하위 집합이 될 수 있습니다.

47
00:02:05,660 --> 00:02:08,060
모든 요소는 빅 세트의 요소이기도 합니다.

48
00:02:08,580 --> 00:02:10,592
그리고 3 더하기 1 더하기 4의 

49
00:02:10,592 --> 00:02:12,500
합은 8이므로 고려되지 않습니다.

50
00:02:12,600 --> 00:02:13,540
이는 집계에 포함되지 않았습니다.

51
00:02:13,840 --> 00:02:16,041
반면 2, 3, 5 집합과 같은 

52
00:02:16,041 --> 00:02:18,120
하위 집합은 합계가 10입니다.

53
00:02:18,440 --> 00:02:19,719
이는 5로 나눌 수 있으므로 

54
00:02:19,719 --> 00:02:20,920
계산할 수 있는 숫자입니다.

55
00:02:21,400 --> 00:02:24,269
처음에 제가 만든 미리보기 애니메이션은 본질적으로 

56
00:02:24,269 --> 00:02:27,140
이 질문에 답하기 위한 무차별 대입 프로그램입니다.

57
00:02:27,720 --> 00:02:30,542
가능한 모든 다른 부분 집합을 반복하여 

58
00:02:30,542 --> 00:02:32,724
각 부분 집합의 합을 구하고, 

59
00:02:32,724 --> 00:02:36,060
5의 배수를 찾을 때마다 카운터를 증가시킵니다.

60
00:02:36,760 --> 00:02:38,649
여기서 잠시 멈추고 전체 하위 집합이 

61
00:02:38,649 --> 00:02:40,630
몇 개나 있는지 생각해 보는 것도 좋은 

62
00:02:40,630 --> 00:02:42,520
준비 질문이 될 수 있을 것 같습니다.

63
00:02:42,820 --> 00:02:44,160
이 5의 배수는 잊어버리세요.

64
00:02:44,420 --> 00:02:46,560
이 프로그램이 종료되는 데 얼마나 걸리나요?

65
00:02:48,060 --> 00:02:49,640
많은 분들이 알고 계시겠지만, 

66
00:02:49,640 --> 00:02:51,500
답은 2의 거듭제곱 2,000입니다.

67
00:02:52,120 --> 00:02:54,545
여기서 기본 개념은 하위 집합을 구성할 때 

68
00:02:54,545 --> 00:02:57,274
2,000개의 서로 다른 이진 선택이 가능하다는 

69
00:02:57,274 --> 00:02:57,780
것입니다.

70
00:02:58,000 --> 00:02:59,480
요소를 포함하나요, 포함하지 않나요?

71
00:03:00,080 --> 00:03:02,233
그리고 이러한 모든 선택은 서로 독립적이므로 하위 

72
00:03:02,233 --> 00:03:04,155
집합을 구성할 때 선택할 수 있는 총 개수는 

73
00:03:04,155 --> 00:03:06,385
2×2×2×2×2×2×2×2×2×2×2×2×2×2×2

74
00:03:06,385 --> 00:03:08,615
×2×2×2×2×2×2×2×2×2×2×2×2×2×2×

75
00:03:08,615 --> 00:03:09,000
2입니다.

76
00:03:09,800 --> 00:03:13,240
우리 프로그램을 생각하면 엄청나게 큰 숫자입니다.

77
00:03:13,620 --> 00:03:16,527
따라서 우주에서 상상할 수 있는 모든 물리적 

78
00:03:16,527 --> 00:03:19,435
자원을 동원해 이 무차별적 접근 방식을 항상 

79
00:03:19,435 --> 00:03:22,460
사용한다고 해도 표면을 긁는 데 그칠 뿐입니다.

80
00:03:23,060 --> 00:03:25,180
물론 우리는 그보다 훨씬 더 영리해야 합니다.

81
00:03:25,560 --> 00:03:28,611
대략적인 근사치로 답을 추측해 본다면 전체 하위 

82
00:03:28,611 --> 00:03:31,774
집합의 5분의 1 정도일 것이라고 추측할 수 있을 

83
00:03:31,774 --> 00:03:32,340
것입니다.

84
00:03:32,540 --> 00:03:33,908
이 모든 합계는 대략 5를 곱한 

85
00:03:33,908 --> 00:03:35,580
값으로 균등하게 분포되어 있을 것입니다.

86
00:03:36,000 --> 00:03:38,080
예, 그것은 사실이며 괜찮은 근사치입니다.

87
00:03:38,500 --> 00:03:40,209
하지만 질문의 핵심이자 진정한 

88
00:03:40,209 --> 00:03:42,220
도전은 정확한 답변을 얻는 것입니다.

89
00:03:42,720 --> 00:03:45,561
정수가 아니기 때문에 실제 답이 될 수는 없지만, 

90
00:03:45,561 --> 00:03:48,200
정답은 조금 더 많거나 조금 더 적은 것일까요?

91
00:03:48,520 --> 00:03:50,340
아니면 그보다 훨씬 많거나 적을 수도 있습니다.

92
00:03:50,600 --> 00:03:52,161
이 오류를 파악하기 위해 어떤 

93
00:03:52,161 --> 00:03:53,540
전술을 사용할 수 있을까요?

94
00:03:55,680 --> 00:03:57,845
분명히 말하지만, 이 강의는 목적지보다는 

95
00:03:57,845 --> 00:03:59,540
여정에 더 중점을 두고 있습니다.

96
00:04:00,260 --> 00:04:01,682
이런 식으로 하위 집합을 필터링하고 

97
00:04:01,682 --> 00:04:02,820
계산해야 하는 경우가 있나요?

98
00:04:03,300 --> 00:04:05,160
거의 확실하게 그렇지 않을 것입니다.

99
00:04:05,360 --> 00:04:07,112
하지만 장난감 문제든 아니든, 

100
00:04:07,112 --> 00:04:09,277
이 문제는 충분히 도전적인 문제이며, 

101
00:04:09,277 --> 00:04:12,061
이 문제를 해결하면 다른 종류의 도전적인 문제와 

102
00:04:12,061 --> 00:04:14,020
관련된 기술을 개발할 수 있습니다.

103
00:04:14,020 --> 00:04:17,298
제가 여러분과 공유하고자 하는 솔루션에는 적어도 

104
00:04:17,298 --> 00:04:20,820
두 가지의 매우 놀랍고 아름다운 우여곡절이 있습니다.

105
00:04:21,300 --> 00:04:25,120
복소수가 깜짝 등장할 것이라고 이미 예견했지만, 

106
00:04:25,120 --> 00:04:28,092
그보다 훨씬 더 이상하고 예상치 못한 

107
00:04:28,092 --> 00:04:30,640
또 다른 이상한 반전이 있습니다.

108
00:04:31,300 --> 00:04:33,653
하지만 일단 퍼즐에 대한 이해를 돕기 위해 

109
00:04:33,653 --> 00:04:36,398
모든 훌륭한 문제 해결자가 해야 하는 것처럼 1, 

110
00:04:36,398 --> 00:04:38,555
2, 3, 4, 5 세트로 시도해 보는 

111
00:04:38,555 --> 00:04:40,320
간단한 예부터 시작해 보겠습니다.

112
00:04:40,980 --> 00:04:43,301
연필과 종이로 이 문제를 풀고 있다면, 

113
00:04:43,301 --> 00:04:46,150
국제해사기구에서 훈련 중인 학생이라면 2~5개의 

114
00:04:46,150 --> 00:04:49,000
하위 집합을 모두 나열하는 것도 나쁘지 않습니다.

115
00:04:49,340 --> 00:04:51,240
32개에 불과해 그리 많지 않습니다.

116
00:04:55,680 --> 00:04:58,214
이 모든 것을 머릿속으로 정리하는 방법은 

117
00:04:58,214 --> 00:05:00,749
여러 가지가 있겠지만, 우리가 신경 쓰는 

118
00:05:00,749 --> 00:05:03,064
것은 그 합계이므로 모든 것을 하나씩 

119
00:05:03,064 --> 00:05:06,040
살펴보고 그 합계를 계산하는 것이 자연스럽습니다.

120
00:05:06,520 --> 00:05:08,822
여기 유튜브에서 하는 건 컴퓨터가 있으니까 조금 

121
00:05:08,822 --> 00:05:11,040
속임수를 써서 총액이 얼마인지 보여드리겠습니다.

122
00:05:11,040 --> 00:05:13,395
또한 약간의 속임수를 써서 이 모든 것을 

123
00:05:13,395 --> 00:05:15,546
다시 정렬하여 모두 같은 액수를 가진 

124
00:05:15,546 --> 00:05:17,800
컬렉션으로 암시적으로 정리해 보겠습니다.

125
00:05:18,500 --> 00:05:20,348
예를 들어, 6을 더하는 3개의 하위 

126
00:05:20,348 --> 00:05:22,814
집합이 있다면 이 작은 상자 안에 모두 들어가고, 

127
00:05:22,814 --> 00:05:24,839
10을 더하는 3개의 하위 집합이 있다면 

128
00:05:24,839 --> 00:05:26,600
이 작은 상자 안에 모두 들어갑니다.

129
00:05:27,260 --> 00:05:29,920
그리고 전체적으로 우리가 관심 있는 부분 집합, 

130
00:05:29,920 --> 00:05:32,580
즉 합이 5로 나눌 수 있는 부분 집합은 왼쪽에 

131
00:05:32,580 --> 00:05:35,240
배치되어 있으며 총 8개가 있는 것처럼 보입니다.

132
00:05:36,340 --> 00:05:40,062
아, 그리고 빈 집합을 계산할 때 그 합을 0으로 

133
00:05:40,062 --> 00:05:43,520
간주하고 5의 배수로 간주한다고 말해야겠습니다.

134
00:05:43,940 --> 00:05:45,640
끝으로, 이 모든 것이 매우 자연스러운 

135
00:05:45,640 --> 00:05:47,340
선택이라는 점에 동의해 주셨으면 합니다.

136
00:05:48,140 --> 00:05:49,804
잠시 시간을 내어 이 답변과 휴리스틱적으로 

137
00:05:49,804 --> 00:05:51,260
예상할 수 있는 답변을 비교해 보세요.

138
00:05:51,800 --> 00:05:54,464
전체 32개의 하위 집합 중 5분의 

139
00:05:54,464 --> 00:05:56,995
1이 6.4이므로 적어도 이 작은 

140
00:05:56,995 --> 00:06:00,060
예제에서는 정답이 이보다 조금 더 큽니다.

141
00:06:00,360 --> 00:06:02,540
마음 한구석에 숨겨두고 싶었던 이야기일 수도 있습니다.

142
00:06:03,720 --> 00:06:06,439
솔직히 말씀드리자면 동영상에서 어떻게 

143
00:06:06,439 --> 00:06:08,900
동기를 부여해야 할지 모르겠습니다.

144
00:06:08,900 --> 00:06:11,191
개인적으로 저는 수학이 스스로 발견할 수 있는 

145
00:06:11,191 --> 00:06:12,777
것처럼 느껴질 때를 좋아하는데, 

146
00:06:12,777 --> 00:06:15,068
여러분과 제가 함께 앉아 이 문제를 풀다 보면 

147
00:06:15,068 --> 00:06:17,271
자연스럽게 여러 가지 단계를 밟을 수 있다고 

148
00:06:17,271 --> 00:06:17,800
생각합니다.

149
00:06:18,240 --> 00:06:20,480
부분집합에 어떤 구조가 있는지 이해하려고 

150
00:06:20,480 --> 00:06:22,721
할 수도 있고, 다른 작은 예제에서 여러 

151
00:06:22,721 --> 00:06:24,961
반복을 통해 이 합계가 어떻게 5의 배수 

152
00:06:24,961 --> 00:06:27,105
분포로 분포되는지 살펴보고, 이를 통해 

153
00:06:27,105 --> 00:06:29,345
귀납적으로 어떤 종류의 증명을 도출하려고 

154
00:06:29,345 --> 00:06:30,320
할 수도 있습니다.

155
00:06:31,040 --> 00:06:33,300
이 강의의 초기 버전을 몇몇 고객과 공유했을 때, 

156
00:06:33,300 --> 00:06:35,400
사람들은 멋진 선형 대수 접근법을 제시했습니다.

157
00:06:35,720 --> 00:06:37,580
이 모든 것이 훌륭하고 좋습니다.

158
00:06:37,580 --> 00:06:39,558
대신 여기서는 생성 함수라는 

159
00:06:39,558 --> 00:06:41,660
것에 대해 알려드리고자 합니다.

160
00:06:42,120 --> 00:06:44,434
그리고 사후에 '그래, 이게 효과가 있다는 

161
00:06:44,434 --> 00:06:46,556
건 알겠는데 도대체 어떻게 그런 생각을 

162
00:06:46,556 --> 00:06:49,160
했을까'라고 생각할 수 있는 전술 중 하나입니다.

163
00:06:49,920 --> 00:06:51,140
솔직히 잘 모르겠습니다.

164
00:06:51,420 --> 00:06:53,837
생성 함수를 이해하기 전의 시기와 그 이후의 

165
00:06:53,837 --> 00:06:56,255
시기가 있는데, 이 두 시기를 연결하는 것은 

166
00:06:56,255 --> 00:06:58,480
비약적인 발전 외에는 생각할 수 없습니다.

167
00:06:59,380 --> 00:07:02,377
다항식 1 더하기 x 곱하기 1 더하기 x 제곱하기 

168
00:07:02,377 --> 00:07:05,272
1 더하기 x 세제곱하기 1 더하기 x 곱하기 1 

169
00:07:05,272 --> 00:07:07,959
더하기 x 네 번째에서 다섯 번째까지를 고려해 

170
00:07:07,959 --> 00:07:08,580
보겠습니다.

171
00:07:08,980 --> 00:07:10,298
이제, 이게 어디서 온 거냐고 

172
00:07:10,298 --> 00:07:11,540
당연히 물어보실 수도 있겠죠?

173
00:07:11,580 --> 00:07:13,160
다항식은 사물과 어떤 관련이 있을까요?

174
00:07:13,520 --> 00:07:16,340
지금 변수 X는 무엇을 나타내야 할까요?

175
00:07:17,160 --> 00:07:19,120
그리고 기본적으로 X는 순전히 기호일 뿐입니다.

176
00:07:19,440 --> 00:07:22,060
여기서 다항식을 작성한 유일한 이유는 

177
00:07:22,060 --> 00:07:24,556
대수적으로 다항식을 확장하는 행위가 

178
00:07:24,556 --> 00:07:28,300
부분집합을 구성하는 행위와 완전히 일치하기 때문입니다.

179
00:07:28,300 --> 00:07:31,077
그리고 중요한 것은 합이 같은 하위 집합이 

180
00:07:31,077 --> 00:07:33,970
모두 함께 묶이는 우리가 원하는 그룹화가 이 

181
00:07:33,970 --> 00:07:36,980
작업을 수행하면 자동으로 이루어진다는 점입니다.

182
00:07:37,400 --> 00:07:38,440
제가 무슨 뜻인지 보여드리겠습니다.

183
00:07:39,020 --> 00:07:41,113
이 표현을 확장하면 기본적으로 다섯 

184
00:07:41,113 --> 00:07:43,520
가지 이진 선택을 하는 것으로 귀결됩니다.

185
00:07:43,800 --> 00:07:45,800
각 괄호 안의 용어 중 어떤 용어를 선택하시겠습니까?

186
00:07:46,600 --> 00:07:49,844
각 괄호에서 1을 선택하면 요소를 

187
00:07:49,844 --> 00:07:53,260
선택하지 않은 빈 집합에 해당합니다.

188
00:07:53,980 --> 00:07:56,334
반면, 1항에서 X를 선택한 다음 

189
00:07:56,334 --> 00:07:58,937
다른 모든 항에서 1을 선택하면 숫자 

190
00:07:58,937 --> 00:08:01,540
1만 포함된 싱글톤 집합에 해당합니다.

191
00:08:02,200 --> 00:08:04,791
마찬가지로, X 제곱 항을 다른 모든 

192
00:08:04,791 --> 00:08:08,000
항에서 선택하면 2가 포함된 집합에 해당합니다.

193
00:08:08,520 --> 00:08:10,474
x제곱항을 선택하기만 하면 숫자 

194
00:08:10,474 --> 00:08:12,320
3이 포함된 집합에 해당합니다.

195
00:08:13,100 --> 00:08:16,506
하지만 흥미롭게도 1항과 x제곱항을 선택한 다음 다른 

196
00:08:16,506 --> 00:08:19,800
모든 항에서 x를 선택하면 어떻게 되는지 살펴보세요.

197
00:08:20,280 --> 00:08:23,026
이것은 1과 2가 있고 다른 모든 것에서 아무것도 

198
00:08:23,026 --> 00:08:25,380
없는 하위 집합을 선택하는 것에 해당합니다.

199
00:08:25,380 --> 00:08:27,750
하지만 다항식에서는 확장하는 

200
00:08:27,750 --> 00:08:30,120
방식이 x입방체처럼 보입니다.

201
00:08:30,260 --> 00:08:32,640
따라서 합이 3인 하위 집합에서 나온 

202
00:08:32,640 --> 00:08:35,360
두 개의 서로 다른 x 제곱 항이 있습니다.

203
00:08:36,080 --> 00:08:37,833
솔직히 제가 여기서 추구하는 패턴은 

204
00:08:37,833 --> 00:08:39,763
여기서 모든 것을 확장할 때 어떤 일이 

205
00:08:39,763 --> 00:08:41,516
일어나는지 잠시 멈춰서 생각해 보는 

206
00:08:41,516 --> 00:08:44,059
시간을 가지면 가장 쉽게 이해할 수 있는 패턴입니다.

207
00:08:44,660 --> 00:08:46,786
기본적으로 가능한 모든 하위 집합은 

208
00:08:46,786 --> 00:08:49,020
이 확장의 용어 중 하나에 해당합니다.

209
00:08:49,680 --> 00:08:53,310
그리고 중요한 점은 그 확장으로부터 얻는 항의 

210
00:08:53,310 --> 00:08:56,940
지수가 해당 하위 집합의 합과 같다는 것입니다.

211
00:08:57,600 --> 00:08:59,697
큰 소리로 말하면 다소 혼란스러울 수 있지만, 

212
00:08:59,697 --> 00:09:01,876
다시 한번 생각해 보면 무슨 말인지 알 수 있을 

213
00:09:01,876 --> 00:09:02,280
것입니다.

214
00:09:02,620 --> 00:09:05,345
예를 들어, 모든 먼지가 가라앉고 여기에 

215
00:09:05,345 --> 00:09:08,069
32개의 항을 모두 모으면 그 중 3개의 

216
00:09:08,069 --> 00:09:10,676
항이 10번째 항이고, 그 각각은 합이 

217
00:09:10,676 --> 00:09:13,520
10인 원소를 선택한 것에서 나온 것입니다.

218
00:09:14,540 --> 00:09:16,417
일반적으로 다항식을 작성할 때는 

219
00:09:16,417 --> 00:09:18,400
같은 항을 모두 모아서 작성합니다.

220
00:09:18,680 --> 00:09:21,509
x에서 10번째까지 세 개의 복사본이 있는 대신, 

221
00:09:21,509 --> 00:09:24,440
x에서 10번째까지 앞에 계수 3이 표시될 것입니다.

222
00:09:24,440 --> 00:09:27,097
따라서 이러한 각 계수는 특정 합을 가진 

223
00:09:27,097 --> 00:09:29,640
하위 집합의 수를 인코딩하는 방법입니다.

224
00:09:30,460 --> 00:09:33,685
처음에 말씀드린 것처럼 이것은 생성 함수라는 것의 

225
00:09:33,685 --> 00:09:36,680
예시로, 각각의 양의 정수와 관련된 답이 있는 

226
00:09:36,680 --> 00:09:39,790
질문이 있을 때, 즉 우리의 경우 특정 값에 몇 

227
00:09:39,790 --> 00:09:42,900
개의 부분 집합이 합산되는지를 계산하는 것입니다.

228
00:09:43,480 --> 00:09:46,433
해당 질문에 대한 답에 해당하는 계수를 

229
00:09:46,433 --> 00:09:49,655
가진 다항식을 만들면, 이 다항식의 속성을 

230
00:09:49,655 --> 00:09:52,877
수학적으로 조작하고 분석하여 원래 질문에서 

231
00:09:52,877 --> 00:09:56,100
놀랄 만큼 많은 통찰력을 얻을 수 있습니다.

232
00:09:56,660 --> 00:09:58,804
함수 생성의 예는 무수히 많지만, 

233
00:09:58,804 --> 00:10:01,626
특히 재미있는 예 하나를 소개하자면 피보나치 

234
00:10:01,626 --> 00:10:04,900
수를 공부할 때 같은 아이디어를 사용할 수 있습니다.

235
00:10:05,340 --> 00:10:08,612
따라서 이 다항식의 모든 계수는 피보나치 수이며, 

236
00:10:08,612 --> 00:10:10,950
이 경우 무한 다항식이므로 실제로는 

237
00:10:10,950 --> 00:10:12,820
거듭제곱이라고 불러야 합니다.

238
00:10:13,520 --> 00:10:15,732
자세한 내용은 여기서 자세히 설명하지 않겠지만 

239
00:10:15,732 --> 00:10:17,860
궁금해하는 분들을 위해 화면에 남겨두겠습니다.

240
00:10:18,220 --> 00:10:20,984
기본 개념은 피보나치 수를 정의하는 데 사용되는 

241
00:10:20,984 --> 00:10:23,748
규칙(각 피보나치 수는 앞의 두 개의 합)을 이 

242
00:10:23,748 --> 00:10:26,820
함수의 관점에서 방정식으로 표현할 수 있다는 것입니다.

243
00:10:27,580 --> 00:10:29,289
이 방정식을 통해 해당 함수를 

244
00:10:29,289 --> 00:10:31,200
다른 형식으로 작성할 수 있습니다.

245
00:10:32,180 --> 00:10:35,793
그리고 여기서는 대부분의 세부 사항은 생략하지만, 

246
00:10:35,793 --> 00:10:38,116
여기에 약간의 부분 분수 분해, 

247
00:10:38,116 --> 00:10:41,729
저기에 약간의 기하급수 거듭제곱 확장을 넣으면 각 

248
00:10:41,729 --> 00:10:45,342
개별 피보나치 수에 대한 정확한 폐형식을 얻을 수 

249
00:10:45,342 --> 00:10:47,020
있습니다. 정말 멋지죠.

250
00:10:47,580 --> 00:10:50,080
저는 이 예시를 통해 생성 함수에 대한 아이디어가 

251
00:10:50,080 --> 00:10:52,670
우리의 특정 예시를 훨씬 뛰어넘는다는 사실을 빙산의 

252
00:10:52,670 --> 00:10:55,260
일각에 불과하다는 것을 보여드리기 위해 언급했습니다.

253
00:10:56,460 --> 00:11:00,034
이제 특정 문제에서 12345만 있는 간단한 예제에서 

254
00:11:00,034 --> 00:11:03,252
최대 2000까지의 모든 숫자가 있는 큰 예제로 

255
00:11:03,252 --> 00:11:06,231
확장하면 해당 생성 함수에는 1 더하기 x, 

256
00:11:06,231 --> 00:11:09,686
1 더하기 x 제곱 등 2000개의 서로 다른 이항 

257
00:11:09,686 --> 00:11:12,785
항, 즉 1 더하기 x에서 2000까지의 항이 

258
00:11:12,785 --> 00:11:13,500
포함됩니다.

259
00:11:13,500 --> 00:11:16,591
그리고 이것을 확장하면 계수가 우리가 원하는 

260
00:11:16,591 --> 00:11:19,560
모든 정보를 알려준다는 아이디어가 있습니다.

261
00:11:20,060 --> 00:11:22,207
실제로 확장하는 것은 미친 짓이지만, 

262
00:11:22,207 --> 00:11:24,457
원칙적으로 어떤 모습일지 마음 한구석에 

263
00:11:24,457 --> 00:11:26,400
담아두는 것이 도움이 될 것입니다.

264
00:11:26,800 --> 00:11:29,485
예를 들어, 원칙적으로 이를 확장하면 

265
00:11:29,485 --> 00:11:31,914
25차 항에 대한 X 앞의 계수가 

266
00:11:31,914 --> 00:11:34,600
142가 된다는 것을 알 수 있습니다.

267
00:11:35,520 --> 00:11:38,579
그리고 이것은 합이 25인 142개의 서로 

268
00:11:38,579 --> 00:11:41,640
다른 하위 집합이 있다는 사실에 해당합니다.

269
00:11:42,280 --> 00:11:45,024
따라서 여기서 생성 함수를 분석하는 

270
00:11:45,024 --> 00:11:47,769
기술은 식을 실제로 확장하지 않고도 

271
00:11:47,769 --> 00:11:51,200
이러한 계수에 대한 사실을 추론하는 것입니다.

272
00:11:55,880 --> 00:11:59,322
이제부터는 이 확장을 좀 더 추상적으로 써보겠습니다. 

273
00:11:59,322 --> 00:12:01,732
n은 0부터 대문자 N까지의 합으로, 

274
00:12:01,732 --> 00:12:04,831
여기서 c는 우리가 모르는 계수를 알려주는 하위 

275
00:12:04,831 --> 00:12:05,520
계수입니다.

276
00:12:05,880 --> 00:12:08,060
이 모든 것이 블랙박스로 시작됩니다.

277
00:12:08,360 --> 00:12:11,116
그리고 앞으로는 이것을 실제 함수로 취급하기 시작할 

278
00:12:11,116 --> 00:12:13,683
것입니다. x를 입력하고 출력이 무엇인지 확인한 

279
00:12:13,683 --> 00:12:16,440
다음 계수에 대해 무엇을 알려주는지 물어볼 것입니다.

280
00:12:17,060 --> 00:12:18,726
예를 들어, 아주 쉽게 입력할 수 있는 

281
00:12:18,726 --> 00:12:20,620
것은 'x = 0'과 같이 입력하는 것입니다.

282
00:12:21,120 --> 00:12:22,988
이 경우 중요한 것은 위의 팩터링 형식을 

283
00:12:22,988 --> 00:12:25,100
사용하여 평가하는 방법을 알고 있다는 것입니다.

284
00:12:25,380 --> 00:12:27,700
모든 항목에 x를 0으로 연결하면 모든 

285
00:12:27,700 --> 00:12:30,020
항이 1처럼 보이므로 답은 1이 됩니다.

286
00:12:30,360 --> 00:12:32,615
그리고 확장된 형태에서는 X가 포함된 

287
00:12:32,615 --> 00:12:34,656
모든 항이 사라지고 0이 되어 첫 

288
00:12:34,656 --> 00:12:37,020
번째 항인 c sub 0만 남게 됩니다.

289
00:12:37,800 --> 00:12:40,600
이 경우에는 그다지 흥미롭지 않습니다.

290
00:12:40,600 --> 00:12:43,016
이는 기본적으로 하나의 빈 세트가 있다는 뜻이지만, 

291
00:12:43,016 --> 00:12:45,183
이제 막 발을 담그고 있다는 의미로 해석할 수 

292
00:12:45,183 --> 00:12:45,600
있습니다.

293
00:12:46,040 --> 00:12:47,891
다음 예로, f를 1로 평가하는 

294
00:12:47,891 --> 00:12:49,640
것에 대해 잠시 생각해 보세요.

295
00:12:50,460 --> 00:12:53,512
이 모든 X에 1을 꽂으면 모든 항이 

296
00:12:53,512 --> 00:12:57,001
2처럼 보이므로 총 2에 2를 2,000배 

297
00:12:57,001 --> 00:13:00,200
곱한 값이 나오는 식을 사용하면 됩니다.

298
00:13:00,720 --> 00:13:04,118
반면에 확장된 식에서 x를 1로 연결하면 이 

299
00:13:04,118 --> 00:13:07,517
모든 x의 거듭제곱이 1이 되므로 본질적으로 

300
00:13:07,517 --> 00:13:11,460
모든 계수를 더하는 것이므로 생각해보면 꽤 멋집니다.

301
00:13:11,740 --> 00:13:14,284
함수를 하나의 숫자로 평가하는 것만으로도 

302
00:13:14,284 --> 00:13:17,160
모든 계수의 합이 무엇인지 추론할 수 있습니다.

303
00:13:17,680 --> 00:13:20,939
특정 예제에서는 이러한 계수의 합이 무엇인지 

304
00:13:20,939 --> 00:13:24,460
이미 알고 있기 때문에 그다지 흥미롭지 않습니다.

305
00:13:24,960 --> 00:13:27,550
각 계수는 특정 합을 가진 하위 집합의 

306
00:13:27,550 --> 00:13:30,140
수를 계산하므로, 계수를 더하면 2에서 

307
00:13:30,140 --> 00:13:33,320
2,000까지의 모든 하위 집합을 세는 것입니다.

308
00:13:34,220 --> 00:13:36,573
하지만 이 함수를 음수 1로 평가해 달라고 

309
00:13:36,573 --> 00:13:39,320
요청하면 정말 새로운 사실을 알려드릴 수 있습니다.

310
00:13:39,720 --> 00:13:41,220
잠시 시간을 내어 그 의미를 생각해 보세요.

311
00:13:43,340 --> 00:13:45,910
음수 1을 연결하면 다시 우리가 알고 있는 것, 

312
00:13:45,910 --> 00:13:48,290
즉 상단의 인수분해 식부터 시작하고 여기서는 

313
00:13:48,290 --> 00:13:50,100
첫 번째 항을 보기만 하면 됩니다.

314
00:13:50,440 --> 00:13:52,809
x를 입력하면 첫 번째 괄호는 0이 

315
00:13:52,809 --> 00:13:55,060
되므로 전체 식은 0이어야 합니다.

316
00:13:55,640 --> 00:13:57,930
하지만 모든 계수를 사용하여 확장된 

317
00:13:57,930 --> 00:14:00,220
식에 적용하면 어떤 결과가 나올까요?

318
00:14:00,720 --> 00:14:04,120
그리고 이 솔루션이 취하는 이상한 회전을 최대한 

319
00:14:04,120 --> 00:14:07,268
암시하기 위해, 이 식에서 음수 1의 다양한 

320
00:14:07,268 --> 00:14:10,920
거듭제곱을 회전의 관점에서 시각화해 보셨으면 합니다.

321
00:14:11,460 --> 00:14:13,523
첫 번째 항인 0에 대한 음수 1은 

322
00:14:13,523 --> 00:14:16,000
0에서 1까지의 벡터로 그려볼 수 있습니다.

323
00:14:16,580 --> 00:14:19,443
그러면 음수 1에서 첫 번째 거듭제곱은 

324
00:14:19,443 --> 00:14:22,176
음수 1 그 자체로, 마지막 용어에서 

325
00:14:22,176 --> 00:14:25,040
180도 회전한 것으로 생각하면 됩니다.

326
00:14:25,540 --> 00:14:28,300
그런 다음 음수 1의 제곱을 취하면 양수 1이 됩니다.

327
00:14:28,540 --> 00:14:30,580
다시 180도 회전합니다.

328
00:14:30,580 --> 00:14:33,331
일반적으로 여기서 연속되는 각 용어는 

329
00:14:33,331 --> 00:14:35,820
180도 회전하는 것처럼 보입니다.

330
00:14:36,180 --> 00:14:38,851
대수적으로 해석하면 짝수 계수와 홀수 계수 

331
00:14:38,851 --> 00:14:41,300
사이에 진동하는 합이 있다는 뜻이지만, 

332
00:14:41,300 --> 00:14:43,860
시각적으로 생각하면 이해가 쉬울 것입니다.

333
00:14:44,260 --> 00:14:47,033
이 표현은 모든 생성 함수에 해당되지만, 

334
00:14:47,033 --> 00:14:49,203
특수 생성 함수의 경우 이 값, 

335
00:14:49,203 --> 00:14:52,580
즉 교대 합이 0이어야 한다는 것을 알고 있습니다.

336
00:14:53,040 --> 00:14:55,970
이를 해석하는 한 가지 방법은 짝수 계수와 홀수 계수 

337
00:14:55,970 --> 00:14:58,900
사이에 동일한 균형이 있다는 것을 알려준다는 것입니다.

338
00:14:59,460 --> 00:15:02,804
그리고 작은 예제의 맥락에서 이러한 계수는 하위 

339
00:15:02,804 --> 00:15:06,520
집합에 대한 사실을 인코딩하고 있다는 점을 기억하세요.

340
00:15:06,760 --> 00:15:09,767
따라서 모든 짝수 계수와 홀수 계수 사이에 

341
00:15:09,767 --> 00:15:13,026
동일한 균형이 있다면 모든 하위 집합의 절반은 

342
00:15:13,026 --> 00:15:16,160
짝수 합계이고 절반은 홀수 합계라는 뜻입니다.

343
00:15:16,660 --> 00:15:20,111
하지만 처음에는 어떻게 표시할지 명확하지 않았고, 

344
00:15:20,111 --> 00:15:23,440
생성 기능을 사용하면 바로 튀어나올 수 있습니다.

345
00:15:24,480 --> 00:15:27,282
다시 한 번, 우리가 어디로 가고 있는지 

346
00:15:27,282 --> 00:15:30,207
암시하기 위해 마지막으로 평가한 두 가지를 

347
00:15:30,207 --> 00:15:33,620
더한 다음 절반으로 나누어 다시 작성해 보겠습니다.

348
00:15:35,100 --> 00:15:38,265
생각해보면 짝수 계수는 모두 걸러내고 

349
00:15:38,265 --> 00:15:41,280
홀수 계수는 모두 죽이는 방식입니다.

350
00:15:41,900 --> 00:15:44,886
따라서 짝수 계수의 합이 모두 짝수인 

351
00:15:44,886 --> 00:15:48,300
부분집합의 총합이 전체의 절반처럼 보인다는 

352
00:15:48,300 --> 00:15:52,140
사실을 특히 깔끔하게 쓸 수 있는 방법이 됩니다.

353
00:15:52,620 --> 00:15:55,073
이는 말할 필요도 없이 우리가 대답하고자 

354
00:15:55,073 --> 00:15:57,100
하는 실제 질문과 매우 흡사합니다.

355
00:15:57,100 --> 00:16:00,514
우리가 하고 싶은 것은 함수 f에 대해 할 수 있는 

356
00:16:00,514 --> 00:16:03,928
영리한 방법과 이를 평가하기 위해 잘 선택된 숫자를 

357
00:16:03,928 --> 00:16:07,460
찾아 5의 배수에 해당하는 모든 계수를 얻는 것입니다.

358
00:16:08,000 --> 00:16:10,392
다시 한 번 이 계수가 우리에게 무엇을 인코딩하는지 

359
00:16:10,392 --> 00:16:12,620
생각해보면 마지막 질문에 대한 답이 될 것입니다.

360
00:16:12,760 --> 00:16:14,810
합계가 5로 나눌 수 있는 하위 

361
00:16:14,810 --> 00:16:16,860
집합의 총 개수를 세는 것입니다.

362
00:16:18,900 --> 00:16:22,205
이 작업을 수행하는 요령은 입력의 연속적인 거듭제곱이 

363
00:16:22,205 --> 00:16:25,400
앞뒤로 회전하는 방금 한 작업을 일반화하는 것입니다.

364
00:16:25,900 --> 00:16:28,677
하지만 이번에는 매번 회전하는 것이 아니라 

365
00:16:28,677 --> 00:16:31,340
어떻게든 5의 주기로 회전하기를 원합니다.

366
00:16:31,740 --> 00:16:34,220
이를 위해 복잡한 평면으로 확장합니다.

367
00:16:34,640 --> 00:16:37,908
위에서 값을 찾아서 그 값을 연속적으로 

368
00:16:37,908 --> 00:16:41,177
거듭제곱하면 1/5씩 회전하여 주파수가 

369
00:16:41,177 --> 00:16:44,000
5인 프로세스를 만들 수 있습니다.

370
00:16:44,700 --> 00:16:46,958
한 발 물러서서 복소수에 대해 생각해보라고 

371
00:16:46,958 --> 00:16:49,500
하는 것이 다소 터무니없다는 것을 알고 있습니다.

372
00:16:49,860 --> 00:16:52,199
이산 수학인 수 세기 문제로 시작했지만, 

373
00:16:52,199 --> 00:16:54,640
그렇게 어려운 문제는 아니었으면 좋겠습니다.

374
00:16:55,400 --> 00:16:57,371
다시 한 번 말씀드리지만, 제가 솔루션의 

375
00:16:57,371 --> 00:16:59,257
여러 가지 이상한 반전을 설명하기 위해 

376
00:16:59,257 --> 00:17:01,399
그림을 그리는 이유는 더 넓은 수학 체계에서 

377
00:17:01,399 --> 00:17:03,800
보면 실제로 그렇게 이상한 것이 아니기 때문입니다.

378
00:17:04,140 --> 00:17:06,920
우리가 적용하려는 트릭은 정수의 불연속형 

379
00:17:06,920 --> 00:17:09,458
문제를 더 잘 이해하기 위해 복소수를 

380
00:17:09,458 --> 00:17:12,359
사용하는 다른 많은 사례와 매우 유사합니다.

381
00:17:12,740 --> 00:17:16,367
따라서 스스로 발견할 수 있는 것처럼 느껴질수록 

382
00:17:16,367 --> 00:17:19,861
실제로는 이 생각의 원에서 미래의 어떤 문제를 

383
00:17:19,861 --> 00:17:23,220
해결할 때 스스로 발견하게 될 수도 있습니다.

384
00:17:28,560 --> 00:17:31,017
복소수 구체적으로 말하자면, 제가 관심 

385
00:17:31,017 --> 00:17:33,363
있는 복소수는 제타라고 이름 붙일 수 

386
00:17:33,363 --> 00:17:36,380
있으며 단위 원 주위의 1/5 바퀴에 위치합니다.

387
00:17:36,780 --> 00:17:38,990
따라서 각도는 파이의 5분의 

388
00:17:38,990 --> 00:17:41,340
2 라디안이고 크기는 1입니다.

389
00:17:42,060 --> 00:17:44,493
즉, 표준 오일러 공식 표기법을 사용하면 

390
00:17:44,493 --> 00:17:46,926
해당 숫자를 2π의 거듭제곱에 5를 곱한 

391
00:17:46,926 --> 00:17:49,360
값인 e로 명시적으로 표기할 수 있습니다.

392
00:17:49,640 --> 00:17:53,812
이 표기법이 익숙하지 않다면 실제 부분은 72도의 

393
00:17:53,812 --> 00:17:57,239
코사인, 72는 전체 회전의 5분의 1, 

394
00:17:57,239 --> 00:18:01,560
허수 부분은 72도의 사인이라고 생각할 수 있습니다.

395
00:18:02,540 --> 00:18:04,102
하지만 솔직히 말해서 명시적인 

396
00:18:04,102 --> 00:18:05,940
가치에 대해 생각할 필요는 없습니다.

397
00:18:06,200 --> 00:18:08,452
그 대신 이 숫자가 가진 속성에 

398
00:18:08,452 --> 00:18:10,580
초점을 맞추는 것이 중요합니다.

399
00:18:11,100 --> 00:18:14,419
예를 들어, 제곱을 하면 크기가 1이므로 제곱의 

400
00:18:14,419 --> 00:18:17,738
크기도 1이지만 단위 원을 중심으로 1/5 바퀴 

401
00:18:17,738 --> 00:18:21,180
회전하므로 이제 1/5 바퀴 2바퀴를 돌게 됩니다.

402
00:18:22,280 --> 00:18:24,951
마찬가지로 3의 3승으로 올리면 한 바퀴의 

403
00:18:24,951 --> 00:18:27,511
5분의 3이 되고, 4의 4승으로 올리면 

404
00:18:27,511 --> 00:18:29,403
한 바퀴의 5분의 4가 되고, 

405
00:18:29,403 --> 00:18:32,520
5의 5승으로 올리면 다시 1로 돌아가는 식입니다.

406
00:18:32,860 --> 00:18:35,600
0의 거듭제곱으로 올린 것과 같은 원리입니다.

407
00:18:35,800 --> 00:18:37,600
이 주기는 다섯 학기마다 이루어집니다.

408
00:18:37,860 --> 00:18:39,200
이것이 바로 우리가 신경 쓰는 부분입니다.

409
00:18:39,760 --> 00:18:42,103
이 숫자들은 특별한 이름을 가지고 있는데, 

410
00:18:42,103 --> 00:18:44,641
바로 5의 다섯 번째 뿌리가 1이라는 방정식을 

411
00:18:44,641 --> 00:18:47,180
풀기 때문에 5의 다섯 번째 뿌리라고 불립니다.

412
00:18:47,180 --> 00:18:49,240
1의 다섯 번째 뿌리입니다.

413
00:18:49,460 --> 00:18:51,947
누군가에게 이 방정식을 제시한다면 아마도 

414
00:18:51,947 --> 00:18:54,760
대답은 분명히 'z는 1'이라고 말할 것입니다.

415
00:18:55,280 --> 00:18:56,775
그러나 복잡한 평면에는 네 가지 

416
00:18:56,775 --> 00:18:58,520
다른 답이 있다는 아이디어가 있습니다.

417
00:18:58,980 --> 00:19:00,780
네 개의 숫자를 다섯 번째까지 올리면 

418
00:19:00,780 --> 00:19:02,665
하나의 숫자가 나오는데, 이를 집합으로 

419
00:19:02,665 --> 00:19:04,380
생각하면 매우 유용할 때가 많습니다.

420
00:19:04,880 --> 00:19:07,440
이 방정식을 기억해두면 잠시 후에 도움이 될 것입니다.

421
00:19:08,700 --> 00:19:12,174
앞에서 1의 f와 음의 f를 더하여 홀수 

422
00:19:12,174 --> 00:19:15,800
항 중에서 이 취소를 얻은 것과 유사하게, 

423
00:19:15,800 --> 00:19:19,274
이 다섯 개의 숫자에서 모두 f를 평가한 

424
00:19:19,274 --> 00:19:22,900
다음 더하면 취소를 얻을 수 있을 것입니다.

425
00:19:23,240 --> 00:19:25,152
다소 복잡해 보일 수 있지만, 

426
00:19:25,152 --> 00:19:28,302
x의 f가 단순히 x와 같은 경우처럼 아주 간단한 

427
00:19:28,302 --> 00:19:29,540
예를 들어보겠습니다.

428
00:19:30,000 --> 00:19:32,179
이 경우, 이 다섯 가지 용어를 더하면 

429
00:19:32,179 --> 00:19:34,160
통합의 뿌리 자체를 더하는 것입니다.

430
00:19:34,520 --> 00:19:36,140
제타에서 0까지, 제타에서 1까지, 

431
00:19:36,140 --> 00:19:37,680
그리고 제타에서 4까지 계속됩니다.

432
00:19:38,240 --> 00:19:40,218
복소수를 더할 때는 끝이 꼬리에 있는 

433
00:19:40,218 --> 00:19:42,480
벡터를 더하는 것과 같다고 생각하면 됩니다.

434
00:19:42,900 --> 00:19:46,026
따라서 제로에 제타를 더하면 이렇게 되고, 

435
00:19:46,026 --> 00:19:49,023
제타 제곱을 더하면 마지막 벡터의 꼬리를 

436
00:19:49,023 --> 00:19:52,280
마지막 벡터의 끝으로 가져와서 이렇게 됩니다.

437
00:19:52,980 --> 00:19:55,142
그런 다음 마찬가지로 제타의 꼬리를 

438
00:19:55,142 --> 00:19:57,197
제타의 끝으로 가져온 다음 제타도 

439
00:19:57,197 --> 00:19:59,467
마찬가지로 네 번째까지 가져가면 전체 

440
00:19:59,467 --> 00:20:01,846
합이 실제로 0으로 다시 반복되는 것을 

441
00:20:01,846 --> 00:20:02,820
볼 수 있습니다.

442
00:20:03,360 --> 00:20:05,840
이 다섯 가지 용어가 모두 숫자 0을 중심으로 

443
00:20:05,840 --> 00:20:08,320
균등하게 균형을 이루고 있다고 생각하면 됩니다.

444
00:20:08,880 --> 00:20:10,620
질량 중심은 원점에 있습니다.

445
00:20:11,700 --> 00:20:13,984
이제 조금 덜 사소한 예로 x의 f가 x의 

446
00:20:13,984 --> 00:20:16,460
제곱인 경우를 생각해 보면 도움이 될 것입니다.

447
00:20:17,360 --> 00:20:18,818
따라서 제타를 0으로 제곱하면 

448
00:20:18,818 --> 00:20:20,020
제타가 0으로 유지됩니다.

449
00:20:20,260 --> 00:20:21,980
이것은 1등을 멋지게 표현한 것일 뿐입니다.

450
00:20:22,640 --> 00:20:24,980
제타를 제곱하면 제타 자체가 제곱됩니다.

451
00:20:25,440 --> 00:20:27,547
따라서 여기 이 점이 제타 제곱 

452
00:20:27,547 --> 00:20:30,240
점으로 넘어가는 것을 상상할 수 있습니다.

453
00:20:30,720 --> 00:20:32,680
제타 제곱이 제타 제곱에서 제타 제곱으로 이동합니다.

454
00:20:33,200 --> 00:20:34,480
이 점이 제타에서 네 번째 점으로 

455
00:20:34,480 --> 00:20:35,760
넘어가는 것을 상상할 수 있습니다.

456
00:20:36,580 --> 00:20:39,417
제타 큐브는 제타에서 여섯 번째 제타로 이동하는데, 

457
00:20:39,417 --> 00:20:41,276
이는 5회마다 반복되므로 제타에서 

458
00:20:41,276 --> 00:20:42,940
하나로 이동하는 것과 같습니다.

459
00:20:43,420 --> 00:20:44,880
따라서 이 점이 위로 이동합니다.

460
00:20:46,420 --> 00:20:49,146
마지막으로 제타를 네 번째 제곱으로 줄여서 

461
00:20:49,146 --> 00:20:51,646
제타를 여덟 번째 제곱으로 줄이면 제타 

462
00:20:51,646 --> 00:20:54,600
큐브와 같게 되는데, 이렇게 그릴 수 있습니다.

463
00:20:55,560 --> 00:20:58,871
특히 제가 여기에 화살표를 모두 그려 놓았기 때문에 

464
00:20:58,871 --> 00:21:01,725
생각하기에 조금 혼란스러워 보일 수 있지만, 

465
00:21:01,725 --> 00:21:04,694
이 모든 다른 용어로 이동하여 각도를 두 배로 

466
00:21:04,694 --> 00:21:07,663
늘리도록 프로그래밍하면 전체적인 효과는 이러한 

467
00:21:07,663 --> 00:21:10,632
용어를 섞는 것이기 때문에 한 번쯤 생각해 볼 

468
00:21:10,632 --> 00:21:11,660
가치가 있습니다.

469
00:21:12,000 --> 00:21:14,231
숫자는 같지만 순서가 다르므로 

470
00:21:14,231 --> 00:21:16,200
합계는 여전히 0이 됩니다.

471
00:21:16,960 --> 00:21:21,011
마찬가지로, 제가 권장하는 X큐브를 가지고 이 연습을 

472
00:21:21,011 --> 00:21:24,657
진행하면서 이 점들이 각각 어디로 가는지 따라가 

473
00:21:24,657 --> 00:21:28,438
보면, 이 용어들을 제곱할 때 각각의 각도에 3을 

474
00:21:28,438 --> 00:21:32,084
곱하면 다시 이리저리 섞이게 된다는 것을 알 수 

475
00:21:32,084 --> 00:21:32,760
있습니다.

476
00:21:33,140 --> 00:21:36,183
같은 용어가 다른 순서로 나열된 경우, 

477
00:21:36,183 --> 00:21:39,503
당연히 함수 x에서 네 번째까지 같은 일이 

478
00:21:39,503 --> 00:21:42,961
일어나지만, 결정적으로 상황이 달라지는 것은 

479
00:21:42,961 --> 00:21:46,420
함수 x에서 다섯 번째까지를 고려할 때입니다.

480
00:21:47,060 --> 00:21:49,588
이 경우 제타를 5의 제곱으로 

481
00:21:49,588 --> 00:21:51,820
올리면 정의상 1이 됩니다.

482
00:21:52,540 --> 00:21:53,870
마찬가지로 제타 제곱을 5의 

483
00:21:53,870 --> 00:21:55,200
거듭제곱한 값은 1이 됩니다.

484
00:21:55,560 --> 00:21:58,076
이 모든 것이 하나로 연결되고 통합의 뿌리이며, 

485
00:21:58,076 --> 00:21:59,940
결국 이것이 인생의 모든 목적입니다.

486
00:22:00,440 --> 00:22:04,208
따라서 이 경우 함수를 적용하여 모두 더하면 0이 

487
00:22:04,208 --> 00:22:07,841
되어 취소되는 대신 일종의 건설적인 간섭을 얻게 

488
00:22:07,841 --> 00:22:08,380
됩니다.

489
00:22:08,780 --> 00:22:11,440
모두 1과 같으므로 합은 5와 같습니다.

490
00:22:12,060 --> 00:22:15,120
따라서 한 걸음 물러서서 이 모든 예가 무엇을 

491
00:22:15,120 --> 00:22:18,416
의미하는지 생각해 보면, 기본적으로 이 식은 5로 

492
00:22:18,416 --> 00:22:21,595
나눌 수 없는 x의 거듭제곱은 0이 되지만 5로 

493
00:22:21,595 --> 00:22:24,891
나눌 수 있는 x의 거듭제곱은 0이 아닌 무언가로 

494
00:22:24,891 --> 00:22:25,480
변합니다.

495
00:22:25,900 --> 00:22:28,380
이것이 바로 우리가 찾고 있는 필터의 종류입니다.

496
00:22:29,020 --> 00:22:31,646
실제 함수가 단순한 x의 거듭제곱보다 훨씬 더 

497
00:22:31,646 --> 00:22:34,272
복잡하다고 걱정하신다면, 기본적으로 모든 것이 

498
00:22:34,272 --> 00:22:37,000
선형적이기 때문에 모든 것이 아주 잘 작동합니다.

499
00:22:37,700 --> 00:22:42,013
f가 거대한 다항식이고 이 큰 합계를 평가하고 

500
00:22:42,013 --> 00:22:46,658
싶다면, 열마다 제타의 거듭제곱을 더하면 대부분의 

501
00:22:46,658 --> 00:22:51,303
경우 모든 거듭제곱이 서로 상쇄되어 0이 되지만, 

502
00:22:51,303 --> 00:22:56,279
모든 거듭제곱이 5의 배수인 경우 건설적으로 간섭하여 

503
00:22:56,279 --> 00:23:01,090
해당 계수가 무엇이든 5배가 되는 것으로 생각할 수 

504
00:23:01,090 --> 00:23:01,920
있습니다.

505
00:23:02,040 --> 00:23:05,171
잡초 속에서는 애초에 우리가 왜 여기에 왔는지 

506
00:23:05,171 --> 00:23:08,543
잊기 쉽지만, 각 계수는 특정 값에 몇 개의 부분 

507
00:23:08,543 --> 00:23:11,795
집합을 더하는지를 알려주므로 우리가 원하는 것은 

508
00:23:11,795 --> 00:23:14,565
5의 배수인 모든 계수를 더하는 것이고, 

509
00:23:14,565 --> 00:23:17,817
지금 우리가 가진 것은 이를 명시적으로 수행하는 

510
00:23:17,817 --> 00:23:18,540
방법입니다.

511
00:23:18,800 --> 00:23:21,408
이 함수를 5개의 서로 다른 통합의 

512
00:23:21,408 --> 00:23:24,539
뿌리로 평가하면 이상하게 보일 수 있지만, 

513
00:23:24,539 --> 00:23:27,540
5로 나누기만 하면 원하는 합이 나옵니다.

514
00:23:28,480 --> 00:23:30,220
제 생각에는 정말 멋지다고 생각합니다.

515
00:23:30,220 --> 00:23:33,960
이산 수학 문제인 부분집합에 관한 질문이 있는데, 

516
00:23:33,960 --> 00:23:37,566
이 질문에 답할 수 있는 방법은 신중하게 선택한 

517
00:23:37,566 --> 00:23:41,040
복소수에 대해 미친 다항식을 평가하는 것입니다.

518
00:23:41,520 --> 00:23:44,078
복소수는 이산 수학과 기묘한 관계를 가지고 있기 

519
00:23:44,078 --> 00:23:46,921
때문에 수학을 많이 할수록 덜 미친 것처럼 보이지만, 

520
00:23:46,921 --> 00:23:49,480
실제로는 두 가지 방법이 없을 정도로 훌륭합니다.

521
00:23:50,340 --> 00:23:54,219
하지만 다항식에 대한 이 거친 표현식을 실제로 평가할 

522
00:23:54,219 --> 00:23:58,100
수 있어야만 유용하다고 불평하는 분들도 계실 것입니다.

523
00:23:58,620 --> 00:24:00,776
우리가 익히 알고 있는 다항식의 형태, 

524
00:24:00,776 --> 00:24:02,834
우리가 익숙한 형태는 1 더하기 x, 

525
00:24:02,834 --> 00:24:05,383
1 더하기 x 제곱, 그리고 1 더하기 x에서 

526
00:24:05,383 --> 00:24:07,931
2,000까지 계속되는 인수분해 형태라는 것을 

527
00:24:07,931 --> 00:24:08,520
기억하세요.

528
00:24:09,220 --> 00:24:11,264
우리가 실제로 소매를 걷어붙이고 정직한 

529
00:24:11,264 --> 00:24:13,494
계산을 할 수 없다면 지금까지의 모든 것은 

530
00:24:13,494 --> 00:24:15,260
의미 없는 상징적 놀이일 뿐이며, 

531
00:24:15,260 --> 00:24:17,583
하나의 어려운 문제를 다른 문제로 밀어붙이는 

532
00:24:17,583 --> 00:24:18,420
것에 불과합니다.

533
00:24:18,900 --> 00:24:20,695
이것이 우리 주장의 마지막 핵심이므로 

534
00:24:20,695 --> 00:24:22,320
한 걸음 물러서서 심호흡을 하세요.

535
00:24:22,700 --> 00:24:24,518
사실 생각만큼 나쁘지는 않지만, 

536
00:24:24,518 --> 00:24:27,043
우리에게 필요한 단결의 뿌리 중 하나인 제타 

537
00:24:27,043 --> 00:24:29,467
자체를 어떻게 평가할 수 있을지 생각해보는 

538
00:24:29,467 --> 00:24:30,780
것부터 시작해보겠습니다.

539
00:24:31,780 --> 00:24:33,928
즉, 1 더하기 제타, 1 더하기 제곱 제타, 

540
00:24:33,928 --> 00:24:35,498
1 더하기 제곱 제타, 1 더하기 

541
00:24:35,498 --> 00:24:36,820
제곱 제타 식으로 계산됩니다.

542
00:24:37,060 --> 00:24:39,736
중요한 것은 처음 다섯 학기가 지나면 제타의 힘이 

543
00:24:39,736 --> 00:24:42,222
반복되기 때문에 모든 것이 반복되기 시작한다는 

544
00:24:42,222 --> 00:24:42,700
점입니다.

545
00:24:43,220 --> 00:24:46,225
최대 2,000개까지의 전체 표현식은 기본적으로 

546
00:24:46,225 --> 00:24:49,120
이 표현식을 400번 복사하는 것에 불과합니다.

547
00:24:49,600 --> 00:24:52,061
이 표현을 평가하기는 여전히 어렵게 느껴질 수 

548
00:24:52,061 --> 00:24:54,806
있지만, 2천 개의 다른 용어를 곱하는 것보다 훨씬 

549
00:24:54,806 --> 00:24:55,280
쉽습니다.

550
00:24:55,280 --> 00:24:57,555
이를 시각화할 수 있는 방법은 통합의 

551
00:24:57,555 --> 00:24:59,939
뿌리를 각각 가져가되 기본적으로 하나를 

552
00:24:59,939 --> 00:25:02,540
추가하여 모두 오른쪽으로 이동하는 것입니다.

553
00:25:03,060 --> 00:25:05,710
이 그림은 실제로 우리가 예상할 수 있는 수치적 

554
00:25:05,710 --> 00:25:08,360
해답에 대한 기하학적 직관을 아주 잘 보여줍니다.

555
00:25:08,880 --> 00:25:12,108
우리가 원하는 것은 이 다섯 개의 서로 다른 복소수, 

556
00:25:12,108 --> 00:25:14,260
즉 다섯 개의 노란색 점의 곱입니다.

557
00:25:14,820 --> 00:25:17,434
복소수에 대해 한두 가지 알고 있다면, 

558
00:25:17,434 --> 00:25:20,286
복소수는 공액쌍으로 나오므로 이 다섯 개의 

559
00:25:20,286 --> 00:25:23,020
노란색 선의 길이를 곱하기만 하면 됩니다.

560
00:25:23,680 --> 00:25:26,376
예를 들어, 가장 오른쪽에 있는 점은 1에 

561
00:25:26,376 --> 00:25:28,624
제타를 더한 다섯 번째에 해당하며, 

562
00:25:28,624 --> 00:25:31,658
다이어그램에서는 제타에 0을 더한 1로 표시하고 

563
00:25:31,658 --> 00:25:32,220
있습니다.

564
00:25:32,720 --> 00:25:34,536
하지만 어느 쪽이든 둘 다 숫자 2를 

565
00:25:34,536 --> 00:25:36,440
멋지게 쓰는 방법일 뿐이니 상관없습니다.

566
00:25:36,980 --> 00:25:39,341
그 옆에는 1에 제타를 더한 값과 1에 

567
00:25:39,341 --> 00:25:41,916
제타를 더한 값에서 네 번째까지가 있는데, 

568
00:25:41,916 --> 00:25:44,600
둘 다 크기가 같고 이 선의 길이가 같습니다.

569
00:25:44,940 --> 00:25:46,680
그리고 여기에 L1이라는 이름을 붙이겠습니다.

570
00:25:47,080 --> 00:25:48,600
따라서 해당 길이의 서로 다른 두 

571
00:25:48,600 --> 00:25:50,280
복사본에 L1의 제곱을 곱해야 합니다.

572
00:25:51,020 --> 00:25:53,513
마찬가지로 나머지 두 값인 제타 제곱에 

573
00:25:53,513 --> 00:25:56,006
1을 더한 값과 제타 제곱에 1을 더한 

574
00:25:56,006 --> 00:25:58,160
값도 길이가 같으며 공액 쌍입니다.

575
00:25:58,580 --> 00:26:00,200
따라서 이 길이를 L2라고 부르겠습니다.

576
00:26:00,880 --> 00:26:02,340
따라서 우리 제품에는 해당 L2의 

577
00:26:02,340 --> 00:26:03,800
복사본이 두 개 포함되어야 합니다.

578
00:26:04,340 --> 00:26:06,949
느슨한 휴리스틱으로 추측해본다면, 

579
00:26:06,949 --> 00:26:09,971
L1은 1보다 약간 긴 길이이고 L2는 

580
00:26:09,971 --> 00:26:13,680
1보다 약간 짧은 길이라는 것을 알 수 있습니다.

581
00:26:13,960 --> 00:26:16,673
따라서 최종적인 답변은 아마도 두 가지 정도, 

582
00:26:16,673 --> 00:26:19,700
확실하지는 않지만 그 정도 수준에서 결정될 것입니다.

583
00:26:19,700 --> 00:26:21,987
이를 정확한 답변으로 바꾸려면 

584
00:26:21,987 --> 00:26:24,140
전체 표현을 확장하면 됩니다.

585
00:26:24,520 --> 00:26:26,050
솔직히 32개의 다른 용어가 있을 

586
00:26:26,050 --> 00:26:27,420
뿐이니 그렇게 나쁘지 않습니다.

587
00:26:33,320 --> 00:26:35,213
좋아요, 오랫동안 저와 함께 해오셨으니 

588
00:26:35,213 --> 00:26:37,020
이제 많이 지치셨을 거라는 걸 알아요.

589
00:26:37,280 --> 00:26:39,930
하지만 이 모든 논증에는 마지막 단계를 생각보다 

590
00:26:39,930 --> 00:26:42,680
훨씬 간단하게 만드는 마지막 비결이 하나 있습니다.

591
00:26:43,260 --> 00:26:44,440
그리고 우리가 현재 어디에 있는지 다시 

592
00:26:44,440 --> 00:26:45,620
한 번 상기하기 위해 요약해 보겠습니다.

593
00:26:45,820 --> 00:26:47,799
그래서 우리는 합을 5로 나눌 수 

594
00:26:47,799 --> 00:26:49,675
있는 1부터 2000까지의 하위 

595
00:26:49,675 --> 00:26:52,280
집합의 개수를 세는 이 질문으로 시작했습니다.

596
00:26:52,740 --> 00:26:55,889
그런 다음 계수가 각 값 n에 대해 특정 합을 갖는 

597
00:26:55,889 --> 00:26:59,040
하위 집합의 수를 알려주는 이 다항식을 구성했습니다.

598
00:26:59,960 --> 00:27:01,702
따라서 우리가 원하는 것은 다항식의 

599
00:27:01,702 --> 00:27:03,620
다섯 번째 계수를 모두 더하는 것입니다.

600
00:27:04,780 --> 00:27:07,633
그런 다음 이 다항식을 모든 다섯 번째 근에 

601
00:27:07,633 --> 00:27:10,258
대한 함수로 평가한 다음 합산하면 원하는 

602
00:27:10,258 --> 00:27:13,340
필터를 정확히 얻을 수 있다는 것을 확인했습니다.

603
00:27:13,600 --> 00:27:15,765
여기서는 이러한 용어 중 하나인 제타의 

604
00:27:15,765 --> 00:27:17,930
f를 평가하고 있는데, 이는 기본적으로 

605
00:27:17,930 --> 00:27:19,800
5개의 복소수의 곱으로 귀결됩니다.

606
00:27:20,540 --> 00:27:23,400
해당 제품을 실제로 평가하는 매우 매끄러운 방법으로, 

607
00:27:23,400 --> 00:27:24,640
마지막 비결이 있습니다.

608
00:27:25,320 --> 00:27:27,820
이 숫자를 통합의 뿌리라고 설명한 것을 기억하세요.

609
00:27:28,200 --> 00:27:30,580
z는 다섯 번째가 1이 되는 방정식을 푸는 것입니다.

610
00:27:31,060 --> 00:27:33,663
이를 다른 방식으로 생각하면 다항식 z에서 다섯 번째 

611
00:27:33,663 --> 00:27:36,180
마이너스 1을 뺀 값의 근이라고 생각할 수 있습니다.

612
00:27:36,920 --> 00:27:39,673
이제 다항식 z를 다섯 번째에서 1을 뺀 

613
00:27:39,673 --> 00:27:42,426
값으로 인수분해하면 다음과 같이 각 근에 

614
00:27:42,426 --> 00:27:45,300
해당하는 인수가 하나씩 있다는 뜻이 됩니다.

615
00:27:45,300 --> 00:27:47,160
각 뿌리에서 z를 뺀 값입니다.

616
00:27:47,840 --> 00:27:50,943
이 표현은 모든 것을 확장할 때 발생해야 하는 

617
00:27:50,943 --> 00:27:54,046
모든 미친 취소를 생각할 때 일종의 마법 같은 

618
00:27:54,046 --> 00:27:57,031
표현이지만, 오른쪽의 표현이 여기 맨 위에서 

619
00:27:57,031 --> 00:27:59,776
평가해야 하는 것과 거의 동일하게 보이기 

620
00:27:59,776 --> 00:28:02,880
때문에 사실이며 현재 우리에게 매우 유용합니다.

621
00:28:03,300 --> 00:28:04,790
기본적으로 플러스 기호가 있었으면 

622
00:28:04,790 --> 00:28:06,360
하는 곳에 마이너스 기호만 있습니다.

623
00:28:07,680 --> 00:28:10,240
요령은 z를 음수와 같은 값으로 연결하는 것입니다.

624
00:28:10,800 --> 00:28:12,396
그렇게 하면 본질적으로 우리가 

625
00:28:12,396 --> 00:28:13,900
원하는 것을 부정하게 됩니다.

626
00:28:13,900 --> 00:28:18,061
음수 1을 곱하면 음수 1 마이너스 1 또는 음수 

627
00:28:18,061 --> 00:28:22,520
2로 시작했던 왼쪽이 2가 되는 것을 알 수 있습니다.

628
00:28:23,240 --> 00:28:26,320
그런 다음 오른쪽이 평가하려는 항목으로 바뀝니다.

629
00:28:27,000 --> 00:28:29,575
따라서 앞서 우리의 기하학적 직관이 

630
00:28:29,575 --> 00:28:32,151
암시했듯이 답은 두 개 정도일 뿐만 

631
00:28:32,151 --> 00:28:35,500
아니라 마법처럼 정확하게 두 개로 밝혀졌습니다.

632
00:28:36,380 --> 00:28:39,848
왜냐하면 우리가 평가하고자 하는 더 큰 표현, 

633
00:28:39,848 --> 00:28:43,450
즉 단결의 모든 다른 뿌리에 F를 더하면 단결의 

634
00:28:43,450 --> 00:28:47,320
첫 번째 뿌리에서 그 가치를 알 수 있기 때문입니다.

635
00:28:47,580 --> 00:28:49,220
400의 제곱에 2를 곱한 값입니다.

636
00:28:49,820 --> 00:28:53,940
제타 제곱 또는 제타 제곱의 거듭제곱을 

637
00:28:53,940 --> 00:28:58,060
하면 순서가 바뀐 것일 뿐 동일한 숫자 

638
00:28:58,060 --> 00:29:02,180
목록을 얻을 수 있다는 점을 기억하세요.

639
00:29:02,880 --> 00:29:06,120
유일하게 다른 점은 제타에서 0으로 평가할 때입니다.

640
00:29:06,840 --> 00:29:08,350
하지만 제타에서 0은 숫자 1을 

641
00:29:08,350 --> 00:29:09,945
멋지게 표현하는 방법이며, 우리는 

642
00:29:09,945 --> 00:29:11,960
이것을 1로 평가하는 방법을 알고 있습니다.

643
00:29:12,220 --> 00:29:13,080
이는 쉬운 일 중 하나입니다.

644
00:29:13,140 --> 00:29:13,900
앞서 이 작업을 수행했습니다.

645
00:29:14,200 --> 00:29:16,979
이 괄호는 모두 2로 바뀌므로 2에 2를 

646
00:29:16,979 --> 00:29:19,880
곱하면 2,000배가 되는 것처럼 보입니다.

647
00:29:20,520 --> 00:29:22,990
이제 마지막으로 계산 질문에 대한 

648
00:29:22,990 --> 00:29:25,720
매우 명확한 정직한 답변이 나왔습니다.

649
00:29:26,160 --> 00:29:29,706
5로 나눌 수 있는 계수를 모두 더하기 위해, 

650
00:29:29,706 --> 00:29:33,390
즉 5로 나눌 수 있는 합을 가진 총 부분집합이 

651
00:29:33,390 --> 00:29:35,982
몇 개인지 세는 방법을 기억하면, 

652
00:29:35,982 --> 00:29:39,665
방금 계산한 이 이상한 복잡한 식의 5분의 1은 

653
00:29:39,665 --> 00:29:42,939
2에 2를 더한 4에 2를 더한 400으로 

654
00:29:42,939 --> 00:29:44,440
계산할 수 있습니다.

655
00:29:45,520 --> 00:29:47,440
여기서 이 답변이 말이 되는지 

656
00:29:47,440 --> 00:29:49,360
간단히 확인해 볼 수 있습니다.

657
00:29:50,040 --> 00:29:53,788
예를 들어 1 2 3 4 5 집합의 작은 경우에서 

658
00:29:53,788 --> 00:29:57,269
방금 수행한 것과 동일한 추론을 수행하면 답은 

659
00:29:57,269 --> 00:29:59,679
2의 5분의 1에서 5분의 5, 

660
00:29:59,679 --> 00:30:03,026
즉 총 하위 집합 수에 2의 4를 더한 값인 

661
00:30:03,026 --> 00:30:06,373
32의 5분의 1에 8을 더한 값인 8이라는 

662
00:30:06,373 --> 00:30:07,980
것을 알 수 있습니다.

663
00:30:08,440 --> 00:30:10,231
그리고 이 모든 것을 명시적으로 

664
00:30:10,231 --> 00:30:12,420
살펴봤을 때 사실 그것이 정답이었습니다.

665
00:30:17,500 --> 00:30:19,766
어려운 퍼즐을 풀기 위해 시간을 투자할 

666
00:30:19,766 --> 00:30:22,033
가치가 있다면, 그 퍼즐에 대해 생각해 

667
00:30:22,033 --> 00:30:24,300
보는 시간을 갖는 것도 가치가 있습니다.

668
00:30:24,420 --> 00:30:25,200
이를 통해 무엇을 얻을 수 있나요?

669
00:30:29,640 --> 00:30:31,907
우리가 짐작했던 것처럼 전체 하위 집합의 

670
00:30:31,907 --> 00:30:33,582
5분의 1이 실제로 무엇이며, 

671
00:30:33,582 --> 00:30:36,047
이 오류 용어는 통합의 거대한 뿌리 조합에서 

672
00:30:36,047 --> 00:30:38,117
파괴적이지 않은 간섭으로 인해 어떻게 

673
00:30:38,117 --> 00:30:39,300
생겨났는지 설명합니다.

674
00:30:40,120 --> 00:30:43,983
하지만 다시 말하지만, 이 질문을 흥미롭게 만드는 

675
00:30:43,983 --> 00:30:46,881
것은 답이 아니라 문제를 푸는 방식, 

676
00:30:46,881 --> 00:30:50,606
즉 이해하고자 하는 이산 수열을 다항식의 계수로 

677
00:30:50,606 --> 00:30:54,332
취급한 다음 그 다항식을 복소수 값으로 평가하는 

678
00:30:54,332 --> 00:30:55,160
방식입니다.

679
00:30:55,740 --> 00:30:59,094
이 두 단계 모두 처음에는 매우 의외일 수 있지만, 

680
00:30:59,094 --> 00:31:01,639
수학의 다른 곳에서 찾을 수 있는 매우 

681
00:31:01,639 --> 00:31:04,300
일반적이고 강력한 기법과 관련이 있습니다.

682
00:31:04,900 --> 00:31:08,640
예를 들어, 수업의 맨 위에는 우리가 사용할 기술이 

683
00:31:08,640 --> 00:31:12,251
소수를 연구하는 방식과 리만 가설 등으로 이어지는 

684
00:31:12,251 --> 00:31:16,120
일련의 아이디어와 정신이 비슷할 것이라고 약속했습니다.

685
00:31:16,500 --> 00:31:18,645
이제 이것은 매우 아름다운 주제이므로 

686
00:31:18,645 --> 00:31:20,689
여기서 급조된 버전을 마지막에 끼워 

687
00:31:20,689 --> 00:31:23,040
넣는 것이 약간 범죄처럼 보일 정도입니다.

688
00:31:23,340 --> 00:31:25,598
제 생각에는 제타 기능에 대해 얼마 전에 

689
00:31:25,598 --> 00:31:27,758
약속했던 동영상을 시간을 들여서 제대로 

690
00:31:27,758 --> 00:31:29,820
만드는 것이 옳은 일이라고 생각합니다.

691
00:31:30,440 --> 00:31:33,060
하지만 궁금하신 분들을 위해 설명하지 않고 화면에 몇 

692
00:31:33,060 --> 00:31:35,680
가지를 띄우는 것을 허락해 주신다면 두 가지가 어떻게 

693
00:31:35,680 --> 00:31:38,300
평행한 것인지 두세 문장 버전으로 설명해 드리겠습니다.

694
00:31:39,020 --> 00:31:42,344
부분집합 퍼즐과 마찬가지로, 리만이 소수를 연구하는 

695
00:31:42,344 --> 00:31:45,211
방식은 우리가 이해하고자 하는 불연속 수열, 

696
00:31:45,211 --> 00:31:48,536
즉 소수에 대한 정보를 담고 있는 수열을 찾은 다음 

697
00:31:48,536 --> 00:31:51,517
그 수열의 계수를 항으로 하는 함수를 고려하는 

698
00:31:51,517 --> 00:31:52,320
것이었습니다.

699
00:31:53,120 --> 00:31:56,090
이 경우 다항식이 아니라 디리클레 급수 

700
00:31:56,090 --> 00:31:59,735
또는 디리클레 급수라고 부르는 관련 구조이지만, 

701
00:31:59,735 --> 00:32:01,760
본질적인 개념은 동일합니다.

702
00:32:02,160 --> 00:32:04,931
그런 다음 이러한 계수에 대한 정보를 

703
00:32:04,931 --> 00:32:07,836
알아내는 방법은 이 함수가 복잡한 값의 

704
00:32:07,836 --> 00:32:11,400
입력에 대해 어떻게 작동하는지 연구하는 것입니다.

705
00:32:12,360 --> 00:32:16,120
리만이 복소수 분석의 선구자였기 때문에 그의 경우의 

706
00:32:16,120 --> 00:32:18,324
기술은 훨씬 더 정교해졌지만, 

707
00:32:18,324 --> 00:32:22,084
이렇게 실수를 넘어 영역을 확장하면 수학자가 계수를 

708
00:32:22,084 --> 00:32:25,584
추론하는 데 훨씬 더 많은 힘을 얻을 수 있다는 

709
00:32:25,584 --> 00:32:27,400
사실은 여전히 유효합니다.

710
00:32:28,700 --> 00:32:32,069
일부 시청자에게는 이 모든 것이 왜 복소수가 이런 

711
00:32:32,069 --> 00:32:35,318
식으로 불합리하게 유용할까 하는 의문을 남길 수 

712
00:32:35,318 --> 00:32:35,920
있습니다.

713
00:32:36,660 --> 00:32:39,155
정확히 답하기 어려운 질문이지만, 

714
00:32:39,155 --> 00:32:42,833
방금 한 퍼즐을 생각해보면 다양한 입력을 연결하면 

715
00:32:42,833 --> 00:32:46,248
계수에 대한 숨겨진 정보가 드러나는 상황이었기 

716
00:32:46,248 --> 00:32:49,794
때문에, 입력이 많을수록 더 좋은 작업을 할 수 

717
00:32:49,794 --> 00:32:53,472
있으므로 복소면처럼 더 풍부한 수의 공간에 자신을 

718
00:32:53,472 --> 00:32:55,180
열어두는 것과 같습니다.

719
00:32:55,840 --> 00:32:57,602
하지만 여기서 여러분이 얻었으면 

720
00:32:57,602 --> 00:32:59,560
하는 보다 구체적인 직관이 있습니다.

721
00:33:00,060 --> 00:33:03,054
퍼즐에서 우리가 원했던 관련 사실, 

722
00:33:03,054 --> 00:33:06,947
즉 5번째 계수의 합은 일종의 빈도 문제였고, 

723
00:33:06,947 --> 00:33:11,139
다른 구조가 아닌 복소수가 유용한 이유는 연속되는 

724
00:33:11,139 --> 00:33:15,182
제품이 이러한 순환 동작을 갖도록 값을 찾을 수 

725
00:33:15,182 --> 00:33:16,680
있었기 때문입니다.

726
00:33:17,000 --> 00:33:20,772
특히 단위 원과 합집합의 근에 대한 값을 사용하여 

727
00:33:20,772 --> 00:33:24,140
주파수 정보를 파악하는 것은 매우 유익합니다.

728
00:33:24,400 --> 00:33:26,400
이 아이디어가 얼마나 도움이 되는지 

729
00:33:26,400 --> 00:33:28,300
아무리 강조해도 지나치지 않습니다.

730
00:33:28,580 --> 00:33:31,250
수천 가지 사례 중 한 가지를 예로 들자면, 

731
00:33:31,250 --> 00:33:33,707
1990년대에 피터 쇼어는 양자 컴퓨터가 

732
00:33:33,707 --> 00:33:35,950
기존 컴퓨터보다 훨씬 빠르게 큰 수를 

733
00:33:35,950 --> 00:33:38,300
인수분해할 수 있는 방법을 발견했습니다.

734
00:33:38,620 --> 00:33:40,943
현재 쇼의 알고리즘이라고 부르는 것이 

735
00:33:40,943 --> 00:33:43,156
어떻게 작동하는지 자세히 살펴보면, 

736
00:33:43,156 --> 00:33:45,812
이 아이디어의 핵심은 일종의 주파수 정보를 

737
00:33:45,812 --> 00:33:48,800
감지하기 위해 통일성의 루트를 사용하는 것입니다.

738
00:33:49,320 --> 00:33:52,137
보다 일반적으로 이것은 푸리에 변환과 푸리에 급수, 

739
00:33:52,137 --> 00:33:54,177
그리고 그로부터 이어지는 무한히 많은 

740
00:33:54,177 --> 00:33:56,120
주제의 근간이 되는 핵심 개념입니다.

741
00:33:56,980 --> 00:33:59,504
함수 생성 자체에 대한 주제에 관해서는 여기서는 

742
00:33:59,504 --> 00:34:01,841
표면적인 부분만 다루었으며, 더 자세히 알고 

743
00:34:01,841 --> 00:34:04,553
싶으시다면 Herbert Wilf의 재미있는 이름의 

744
00:34:04,553 --> 00:34:07,358
책 'Generating Functionology'를 

745
00:34:07,358 --> 00:34:08,199
적극 추천합니다.

746
00:34:08,540 --> 00:34:09,966
또한, 이 아이디어로 근육을 조금 

747
00:34:09,966 --> 00:34:11,618
더 단련하고 싶은 분들을 위해 재미있는 

748
00:34:11,618 --> 00:34:13,120
퍼즐 몇 개를 화면에 띄워두겠습니다.

