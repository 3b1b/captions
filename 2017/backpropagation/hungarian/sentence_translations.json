[
 {
  "input": "Here, we tackle backpropagation, the core algorithm behind how neural networks learn.",
  "translatedText": "Itt a visszaterjesztéssel, a neurális hálózatok tanulásának alapvető algoritmusával foglalkozunk.",
  "model": "DeepL",
  "n_reviews": 1,
  "start": 4.06,
  "end": 8.88
 },
 {
  "input": "After a quick recap for where we are, the first thing I'll do is an intuitive walkthrough for what the algorithm is actually doing, without any reference to the formulas.",
  "translatedText": "Az eddig tanultak gyors összefoglalója után egy intuitív áttekintés adok arról, hogy mit csinál az algoritmus valójában, a képletekre való hivatkozás nélkül.",
  "model": "DeepL",
  "n_reviews": 1,
  "start": 9.4,
  "end": 17
 },
 {
  "input": "Then, for those of you who do want to dive into the math, the next video goes into the calculus underlying all this.",
  "translatedText": "Majd a következő videó fog a mindezek alapjául szolgáló számításokkal foglalkozni, a matek rajongók számára.",
  "model": "DeepL",
  "n_reviews": 1,
  "start": 17.66,
  "end": 23.02
 },
 {
  "input": "If you watched the last two videos, or if you're just jumping in with the appropriate background, you know what a neural network is, and how it feeds forward information.",
  "translatedText": "Ha megnézted az előző két videót, vagy megfelelő a háttértudásod, akkor tudod, mi az a neurális hálózat, és hogyan továbbítódik benne az információ.",
  "model": "DeepL",
  "n_reviews": 1,
  "start": 23.82,
  "end": 31
 },
 {
  "input": "Here, we're doing the classic example of recognizing handwritten digits whose pixel values get fed into the first layer of the network with 784 neurons, and I've been showing a network with two hidden layers having just 16 neurons each, and an output layer of 10 neurons, indicating which digit the network is choosing as its answer.",
  "translatedText": "A kézzel írt számjegyek felismerésének klasszikus példáját mutattam be, amelyek pixelértékei a hálózat 784 neuronból álló első rétegébe kerülnek. A hálózatnak továbba van két 16 neuronból álló rejtett rétege, és egy 10 neuronból álló kimeneti rétege. Ez jelzi számunkra, hogy a hálózat melyik számjegyet választja válaszként.",
  "model": "DeepL",
  "n_reviews": 1,
  "start": 31.68,
  "end": 49.04
 },
 {
  "input": "I'm also expecting you to understand gradient descent, as described in the last video, and how what we mean by learning is that we want to find which weights and biases minimize a certain cost function.",
  "translatedText": "Arra is számítok, hogy megértetted az előző videóban bemutatott gradiens ereszkedést, és azt, hogy a tanulás alatt azt értjük, hogy meg akarjuk találni azokat a súlyokat, melyek minimalizálnak egy bizonyos költségfüggvényt.",
  "model": "DeepL",
  "n_reviews": 1,
  "start": 50.04,
  "end": 61.26
 },
 {
  "input": "As a quick reminder, for the cost of a single training example, you take the output the network gives, along with the output you wanted it to give, and add up the squares of the differences between each component.",
  "translatedText": "Gyors emlékeztetőül: egyetlen képzési példa költségének meghatározásához venned kell a hálózat által adott kimenetet és a kívánt kimenetet, majd összeadod az egyes komponensek közötti különbségek négyzetét.",
  "model": "DeepL",
  "n_reviews": 1,
  "start": 62.04,
  "end": 74.6
 },
 {
  "input": "Doing this for all of your tens of thousands of training examples and averaging the results, this gives you the total cost of the network.",
  "translatedText": "Ha ezt az összes több tízezer képzési példára elvégezzük, és az eredményeket átlagoljuk, akkor megkapjuk a hálózat teljes költségét.",
  "model": "DeepL",
  "n_reviews": 1,
  "start": 75.38,
  "end": 82.2
 },
 {
  "input": "And as if that's not enough to think about, as described in the last video, the thing that we're looking for is the negative gradient of this cost function, which tells you how you need to change all of the weights and biases, all of these connections, so as to most efficiently decrease the cost.",
  "translatedText": "És ha ez még nem lenne elég bonyolult, a dolog, amit keresünk, az ennek a költségfüggvénynek a negatív gradiense. Ahogy az előző videóban bemutattam, ez megmondja, hogyan kell megváltoztatni az összes súlyt és eltolósúlyt, az összes összeköttetést, hogy a leghatékonyabban csökkentsük a költséget.",
  "model": "DeepL",
  "n_reviews": 1,
  "start": 82.2,
  "end": 98.32
 },
 {
  "input": "Backpropagation, the topic of this video, is an algorithm for computing that crazy complicated gradient.",
  "translatedText": "A visszaterjesztés, amiről ez a videó szól, egy algoritmus ennek az őrülten bonyolult gradiensnek a kiszámítására.",
  "model": "DeepL",
  "n_reviews": 1,
  "start": 103.26,
  "end": 108.58
 },
 {
  "input": "And the one idea from the last video that I really want you to hold firmly in your mind right now is that because thinking of the gradient vector as a direction in 13,000 dimensions is, to put it lightly, beyond the scope of our imaginations, there's another way you can think about it.",
  "translatedText": "Korábban elhangzott egy gondolat, amit nagyon szeretném, ha a fejetekbe vésnétek. Mivel a gradiens vektor 13000 dimenziós irányként való elképzelése, hogy finoman fogalmazzak, meghaladja a képzeletünk határait, van egy másik mód, ahogyan gondolkodhatunk róla.",
  "model": "DeepL",
  "n_reviews": 1,
  "start": 109.14,
  "end": 123.58
 },
 {
  "input": "The magnitude of each component here is telling you how sensitive the cost function is to each weight and bias.",
  "translatedText": "Az egyes komponensek nagysága itt azt mutatja meg, hogy a költségfüggvény mennyire érzékeny az egyes súlyokra változására.",
  "model": "DeepL",
  "n_reviews": 1,
  "start": 124.6,
  "end": 130.94
 },
 {
  "input": "For example, let's say you go through the process I'm about to describe, and you compute the negative gradient, and the component associated with the weight on this edge here comes out to be 3.2, while the component associated with this edge here comes out as 0.1.",
  "translatedText": "Tegyük fel például, hogy a hamarosan bemutatott visszaterjesztés módszerrel kiszámítjuk a negatív gradienst, és az itt lévő él súlyához tartozó komponens 3,2 lesz, míg az itt lévő élhez tartozó komponens 0,1 lesz.",
  "model": "DeepL",
  "n_reviews": 1,
  "start": 131.8,
  "end": 146.26
 },
 {
  "input": "The way you would interpret that is that the cost of the function is 32 times more sensitive to changes in that first weight, so if you were to wiggle that value just a little bit, it's going to cause some change to the cost, and that change is 32 times greater than what the same wiggle to that second weight would give.",
  "translatedText": "Ezt úgy értelmezhetjük, hogy a függvény költsége 32-szer érzékenyebb az első súly változására. Tehát ha csak egy kicsit is megmozgatjuk ezt az értéket, az a költségben okozni fog némi változást, és ez a változás 32-szer nagyobb, mint amit ugyanez a második súly megingatása eredményezne.",
  "model": "DeepL",
  "n_reviews": 1,
  "start": 146.82,
  "end": 163.06
 },
 {
  "input": "Personally, when I was first learning about backpropagation, I think the most confusing aspect was just the notation and the index chasing of it all.",
  "translatedText": "Személy szerint, amikor először tanultam a visszaterjesztésről, azt hiszem, a legösszezavaróbb része a jelölésrendszer megértése volt.",
  "model": "DeepL",
  "n_reviews": 1,
  "start": 168.42,
  "end": 175.74
 },
 {
  "input": "But once you unwrap what each part of this algorithm is really doing, each individual effect it's having is actually pretty intuitive, it's just that there's a lot of little adjustments getting layered on top of each other.",
  "translatedText": "De ha egyszer felgöngyölíted, hogy mit is csinál valójában az algoritmus minden egyes része, akkor azok valójában elég intuitívak, csak közben olyan sok apró kiigazítás van egymásra rétegezve.",
  "model": "DeepL",
  "n_reviews": 1,
  "start": 176.22,
  "end": 186.64
 },
 {
  "input": "So I'm going to start things off here with a complete disregard for the notation, and just step through the effects each training example has on the weights and biases.",
  "translatedText": "Ezért itt most a jelöléseket teljesen figyelmen kívül fogom hagyni, és csak végigmegyek az egyes minta példák súlyokra gyakorolt hatásain.",
  "model": "DeepL",
  "n_reviews": 1,
  "start": 187.74,
  "end": 196.12
 },
 {
  "input": "Because the cost function involves averaging a certain cost per example over all the tens of thousands of training examples, the way we adjust the weights and biases for a single gradient descent step also depends on every single example.",
  "translatedText": "Mivel a költségfüggvény egy bizonyos költség per példa érték átlagolását jelenti az összes több tízezer minta példára, a súlyok és eltolósúlyok beállításának módja egyetlen gradiens ereszkedés lépésnél szintén minden egyes példától függ.",
  "model": "DeepL",
  "n_reviews": 1,
  "start": 197.02,
  "end": 211.04
 },
 {
  "input": "Or rather, in principle it should, but for computational efficiency we'll do a little trick later to keep you from needing to hit every single example for every step.",
  "translatedText": "Vagyis elvileg kellene, de a számítási hatékonyság érdekében később egy kis trükköt alkalmazunk, hogy ne kelljen minden lépésnél mindent végigszámolni.",
  "model": "DeepL",
  "n_reviews": 1,
  "start": 211.68,
  "end": 219.2
 },
 {
  "input": "In other cases, right now, all we're going to do is focus our attention on one single example, this image of a 2.",
  "translatedText": "Most viszont csak egyetlen példára fogunk koncentrálni, erre a képre, amely egy 2-est ábrázol.",
  "model": "DeepL",
  "n_reviews": 1,
  "start": 219.2,
  "end": 225.96
 },
 {
  "input": "What effect should this one training example have on how the weights and biases get adjusted?",
  "translatedText": "Milyen hatással lesz ez az egyetlen képzési példa a súlyok és eltolósúlyok beállítására?",
  "model": "DeepL",
  "n_reviews": 1,
  "start": 226.72,
  "end": 231.48
 },
 {
  "input": "Let's say we're at a point where the network is not well trained yet, so the activations in the output are going to look pretty random, maybe something like 0.5, 0.8, 0.2, on and on.",
  "translatedText": "Tegyük fel, hogy a hálózat még nincs jól betanítva, így a kimeneten megjelenő aktivációk eléggé véletlenszerűnek fognak tűnni. Mondjuk legyen 0,5, 0,8, 0,2, és így tovább.",
  "model": "DeepL",
  "n_reviews": 1,
  "start": 232.68,
  "end": 242
 },
 {
  "input": "We can't directly change those activations, we only have influence on the weights and biases.",
  "translatedText": "Ezeket az értékeket közvetlenül nem tudjuk megváltoztatni, csak a súlyokra van ráhatásunk.",
  "model": "DeepL",
  "n_reviews": 1,
  "start": 242.52,
  "end": 247.16
 },
 {
  "input": "But it's helpful to keep track of which adjustments we wish should take place to that output layer.",
  "translatedText": "De hasznos, ha nyomon követjük, hogy milyen változásokat szeretnénk elérni az adott kimeneti rétegen.",
  "model": "DeepL",
  "n_reviews": 1,
  "start": 247.16,
  "end": 252.58
 },
 {
  "input": "And since we want it to classify the image as a 2, we want that third value to get nudged up while all the others get nudged down.",
  "translatedText": "És mivel az a cél, hogy a képet 2-esnek azonosítsa, azt akarjuk, hogy a harmadik értéket feljebb tolja, míg a többit lefelé tolja.",
  "model": "DeepL",
  "n_reviews": 1,
  "start": 253.36,
  "end": 261.26
 },
 {
  "input": "Moreover, the sizes of these nudges should be proportional to how far away each current value is from its target value.",
  "translatedText": "Ezen túlmenően a tologatások méretének arányosnak kell lennie azzal, hogy az egyes aktuális értékek milyen messze vannak a célértéktől.",
  "model": "DeepL",
  "n_reviews": 1,
  "start": 262.06,
  "end": 269.52
 },
 {
  "input": "For example, the increase to that number 2 neuron's activation is in a sense more important than the decrease to the number 8 neuron, which is already pretty close to where it should be.",
  "translatedText": "Például a 2-es számú neuron aktivációjának növelése bizonyos értelemben fontosabb, mint a 8-as számú neuron csökkentése, amely már elég közel van ahhoz, ahol lennie kellene.",
  "model": "DeepL",
  "n_reviews": 1,
  "start": 270.22,
  "end": 280.9
 },
 {
  "input": "So zooming in further, let's focus just on this one neuron, the one whose activation we wish to increase.",
  "translatedText": "Tehát koncentráljunk csak erre az egy neuronra. Arra, amelynek az aktivációját növelni szeretnénk.",
  "model": "DeepL",
  "n_reviews": 1,
  "start": 282.04,
  "end": 287.28
 },
 {
  "input": "Remember, that activation is defined as a certain weighted sum of all the activations in the previous layer, plus a bias, which is all then plugged into something like the sigmoid squishification function, or a ReLU.",
  "translatedText": "Ne feledjük, hogy az aktiváció az előző rétegben lévő összes aktiváció bizonyos súlyozott összegeként van definiálva, plusz az eltolósúly. Ezeket aztán valami olyan függvénybe illesztjük, mint a szigmoid tömörítő függvény, vagy egy ReLU.",
  "model": "DeepL",
  "n_reviews": 1,
  "start": 288.18,
  "end": 301.04
 },
 {
  "input": "So there are three different avenues that can team up together to help increase that activation.",
  "translatedText": "Tehát három különböző módja van az aktiváció növelésének, amelyek együttesen fejtik ki hatásuk.",
  "model": "DeepL",
  "n_reviews": 1,
  "start": 301.64,
  "end": 307.02
 },
 {
  "input": "You can increase the bias, you can increase the weights, and you can change the activations from the previous layer.",
  "translatedText": "Növelheted az eltolósúlyt, növelheted a súlyokat, és megváltoztathatod az előző réteg aktivációit.",
  "model": "DeepL",
  "n_reviews": 1,
  "start": 307.44,
  "end": 314.04
 },
 {
  "input": "Focusing on how the weights should be adjusted, notice how the weights actually have differing levels of influence.",
  "translatedText": "A súlyok beállításának módjára összpontosítva figyeljük meg, hogy a súlyok valójában különböző mértékű befolyással bírnak.",
  "model": "DeepL",
  "n_reviews": 1,
  "start": 314.94,
  "end": 320.86
 },
 {
  "input": "The connections with the brightest neurons from the preceding layer have the biggest effect since those weights are multiplied by larger activation values.",
  "translatedText": "Az előző réteg legvilágosabb neuronjaihoz tartozó kapcsolatoknak van a legnagyobb hatása, mivel ezek a súlyok nagyobb aktivációs értékekkel vannak megszorozva.",
  "model": "DeepL",
  "n_reviews": 1,
  "start": 321.44,
  "end": 329.1
 },
 {
  "input": "So if you were to increase one of those weights, it actually has a stronger influence on the ultimate cost function than increasing the weights of connections with dimmer neurons, at least as far as this one training example is concerned.",
  "translatedText": "Tehát ha növeljük az egyik ilyen súlyt, az valójában erősebb hatással van a végső költségfüggvényre, mint a halványabb neuronokkal rendelkező kapcsolatok súlyának növelése, legalábbis ami ezt a konkrét példát illeti.",
  "model": "DeepL",
  "n_reviews": 1,
  "start": 331.46,
  "end": 343.48
 },
 {
  "input": "Remember, when we talk about gradient descent, we don't just care about whether each component should get nudged up or down, we care about which ones give you the most bang for your buck.",
  "translatedText": "Ne feledd, amikor gradiens ereszkedésről beszélünk, nem csak az érdekel minket, hogy az egyes komponenseket fel vagy le kell-e tolni, hanem az is, hogy melyik a leghatásosabb.",
  "model": "DeepL",
  "n_reviews": 1,
  "start": 344.42,
  "end": 353.22
 },
 {
  "input": "This, by the way, is at least somewhat reminiscent of a theory in neuroscience for how biological networks of neurons learn, Hebbian theory, often summed up in the phrase, neurons that fire together wire together.",
  "translatedText": "Ez egyébként némileg emlékeztet az idegtudományok egyik elméletére, a Hebb-elméletre, amely a biológiai neuronhálózatok tanulásáról azt mondja ki, hogy az egyszerre tüzelő neuronok közötti kapcsolat megerősödik.",
  "model": "DeepL",
  "n_reviews": 1,
  "start": 355.02,
  "end": 366.46
 },
 {
  "input": "Here, the biggest increases to weights, the biggest strengthening of connections, happens between neurons which are the most active, and the ones which we wish to become more active.",
  "translatedText": "Itt a súlyok legnagyobb növekedése, a neuronok közti kapcsolatok legnagyobb megerősödése a legaktívabb neuronok között történik, és azok között, amelyeket aktívabbá szeretnénk tenni.",
  "model": "DeepL",
  "n_reviews": 1,
  "start": 367.26,
  "end": 377.28
 },
 {
  "input": "In a sense, the neurons that are firing while seeing a 2 get more strongly linked to those firing when thinking about a 2.",
  "translatedText": "Azok az idegsejtek, amelyek akkor tüzelnek, amikor 2-est látnak, erősebben kapcsolódnak azokhoz, amelyeknek 2-esre kell gondolniuk.",
  "model": "DeepL",
  "n_reviews": 1,
  "start": 377.94,
  "end": 384.48
 },
 {
  "input": "To be clear, I'm not in a position to make statements one way or another about whether artificial networks of neurons behave anything like biological brains, and this fires together wire together idea comes with a couple meaningful asterisks, but taken as a very loose analogy, I find it interesting to note.",
  "translatedText": "Azért tisztáznék valamit. Közel sem vagyok idegtudós, hogy kijelenthessem a neuronok mesterséges hálózatairól, hogy úgy viselkednek, mint a biológiai agyak. A nemrég említett összefüggéshez is tartozik jó pár fontos kiegészítés, de ettől még rá szeretnék mutatni az ilyen érdekes hasonlóságokra.",
  "model": "DeepL",
  "n_reviews": 1,
  "start": 385.4,
  "end": 401.02
 },
 {
  "input": "Anyway, the third way we can help increase this neuron's activation is by changing all the activations in the previous layer.",
  "translatedText": "Mindenesetre a harmadik mód, amivel segíthetünk növelni ennek a neuronnak az aktivációját, az az előző réteg összes aktivációjának megváltoztatása.",
  "model": "DeepL",
  "n_reviews": 1,
  "start": 401.94,
  "end": 409.04
 },
 {
  "input": "Namely, if everything connected to that digit 2 neuron with a positive weight got brighter, and if everything connected with a negative weight got dimmer, then that digit 2 neuron would become more active.",
  "translatedText": "Ha ugyanis minden, ami pozitív súllyal kapcsolódik a 2-es számjegyű neuronhoz, világosabbá válna, és ha minden, ami negatív súllyal kapcsolódik, halványabbá válna, akkor a 2-es számjegyű neuron aktivációja növekedne.",
  "model": "DeepL",
  "n_reviews": 1,
  "start": 409.04,
  "end": 420.68
 },
 {
  "input": "And similar to the weight changes, you're going to get the most bang for your buck by seeking changes that are proportional to the size of the corresponding weights.",
  "translatedText": "És a súlyváltozásokhoz hasonlóan, akkor éred el a legjobb hatást, ha a megfelelő súlyok méretével arányos változtatásokat csinálsz.",
  "model": "DeepL",
  "n_reviews": 1,
  "start": 422.54,
  "end": 430.28
 },
 {
  "input": "Now of course, we cannot directly influence those activations, we only have control over the weights and biases.",
  "translatedText": "Na persze nem tudjuk közvetlenül befolyásolni ezeket az aktivációkat, csak a súlyokra van ráhatásunk.",
  "model": "DeepL",
  "n_reviews": 1,
  "start": 432.14,
  "end": 437.48
 },
 {
  "input": "But just as with the last layer, it's helpful to keep a note of what those desired changes are.",
  "translatedText": "De az utolsó réteghez hasonlóan hasznos megnézni, hogy mik ezek a kívánt változtatások.",
  "model": "DeepL",
  "n_reviews": 1,
  "start": 437.48,
  "end": 444.12
 },
 {
  "input": "But keep in mind, zooming out one step here, this is only what that digit 2 output neuron wants.",
  "translatedText": "De ne feledjük, hogy eddig csak azt néztük, amit a 2-es számjegyű kimeneti neuron akar.",
  "model": "DeepL",
  "n_reviews": 1,
  "start": 444.58,
  "end": 449.2
 },
 {
  "input": "Remember, we also want all the other neurons in the last layer to become less active, and each of those other output neurons has its own thoughts about what should happen to that second to last layer.",
  "translatedText": "Azt is szeretnénk, hogy az utolsó réteg összes többi neuronja kevésbé legyen aktív, márpedig minden egyes kimeneti neuronnak megvan a saját igénye, hogy mi történjen az utolsó előtti rétegben.",
  "model": "DeepL",
  "n_reviews": 1,
  "start": 449.76,
  "end": 459.6
 },
 {
  "input": "So, the desire of this digit 2 neuron is added together with the desires of all the other output neurons for what should happen to this second to last layer, again in proportion to the corresponding weights, and in proportion to how much each of those neurons needs to change.",
  "translatedText": "Tehát ennek a 2-es számjegyű neuronnak a kívánságát, hogy mi történjen az utolsó előtti réteggel, együtt kell figyelembe venni az összes többi kimeneti neuron kívánságával. Ismét a megfelelő súlyok arányában, és annak arányában, hogy az egyes kimeneti neuronoknak mennyit kell változniuk.",
  "model": "DeepL",
  "n_reviews": 1,
  "start": 462.7,
  "end": 480.72
 },
 {
  "input": "This right here is where the idea of propagating backwards comes in.",
  "translatedText": "Itt jön a képbe a visszafelé terjedés gondolata.",
  "model": "DeepL",
  "n_reviews": 1,
  "start": 481.6,
  "end": 485.48
 },
 {
  "input": "By adding together all these desired effects, you basically get a list of nudges that you want to happen to this second to last layer.",
  "translatedText": "Ha ezeket a kívánt hatásokat összeadjuk, akkor alapvetően egy listát kapunk azokról a módosításokról, amelyeket az utolsó előtti rétegben szeretnénk elérni.",
  "model": "DeepL",
  "n_reviews": 1,
  "start": 485.82,
  "end": 493.36
 },
 {
  "input": "And once you have those, you can recursively apply the same process to the relevant weights and biases that determine those values, repeating the same process I just walked through and moving backwards through the network.",
  "translatedText": "És ha ezek megvannak, akkor ugyanezt a folyamatot rekurzívan alkalmazhatjuk a releváns súlyokra, amelyek meghatározzák ezeket az értékeket, megismételve az előbb elvégzett módszert visszafelé haladva a hálózaton.",
  "model": "DeepL",
  "n_reviews": 1,
  "start": 494.22,
  "end": 505.1
 },
 {
  "input": "And zooming out a bit further, remember that this is all just how a single training example wishes to nudge each one of those weights and biases.",
  "translatedText": "És ne feledjük, hogy mindezzel csak egyetlen gyakorló példára kaptuk meg, hogy hogyan kívánja az egyes súlyokat és eltolósúlyokat befolyásolni.",
  "model": "DeepL",
  "n_reviews": 1,
  "start": 508.96,
  "end": 517
 },
 {
  "input": "If we only listened to what that 2 wanted, the network would ultimately be incentivized just to classify all images as a 2.",
  "translatedText": "Ha csak arra figyelnénk, hogy mit akar ez a 2, a hálózatot végül arra ösztönöznénk, hogy minden képet 2-esnek minősítsen.",
  "model": "DeepL",
  "n_reviews": 1,
  "start": 517.48,
  "end": 523.22
 },
 {
  "input": "So what you do is go through this same backprop routine for every other training example, recording how each of them would like to change the weights and biases, and average together those desired changes.",
  "translatedText": "Tehát az a teendőd, hogy ugyanezt a visszaterjesztés rutint végigcsinálod minden más képzési példánál, rögzíted, hogy mindegyikük hogyan szeretné megváltoztatni a súlyokat, és ezeket a kívánt változásokat átlagolod.",
  "model": "DeepL",
  "n_reviews": 1,
  "start": 524.06,
  "end": 536
 },
 {
  "input": "This collection here of the averaged nudges to each weight and bias is, loosely speaking, the negative gradient of the cost function referenced in the last video, or at least something proportional to it.",
  "translatedText": "Ha az egyes súlyokra alkalmazni kívánt átlagolt tologatásokat így összegyűjtjük, akkor nem mást kapunk, mint az utolsó videóban említett költségfüggvény negatív gradiensét, vagy legalábbis valami ahhoz arányosat.",
  "model": "DeepL",
  "n_reviews": 1,
  "start": 541.72,
  "end": 553.68
 },
 {
  "input": "I say loosely speaking only because I have yet to get quantitatively precise about those nudges, but if you understood every change I just referenced, why some are proportionally bigger than others, and how they all need to be added together, you understand the mechanics for what backpropagation is actually doing.",
  "translatedText": "Csak azért nem mondom, hogy pontosan annyi, mert még nem beszéltem kvantitatívan a tolások méretéről, de ha megértettél mindent, amire az imént utaltam, hogy egyes módosítások miért nagyobbak másoknál, és hogyan kell ezeket összeadni, akkor összességében érted mit csinál valójában a visszaterjesztés.",
  "model": "DeepL",
  "n_reviews": 1,
  "start": 554.38,
  "end": 571
 },
 {
  "input": "By the way, in practice, it takes computers an extremely long time to add up the influence of every training example every gradient descent step.",
  "translatedText": "Egyébként a gyakorlatban a számítógépeknek rendkívül sok időbe telik, hogy minden egyes gyakorló példa hatását összeadják minden egyes gradiens ereszkedési lépésben.",
  "model": "DeepL",
  "n_reviews": 1,
  "start": 573.96,
  "end": 582.44
 },
 {
  "input": "So here's what's commonly done instead.",
  "translatedText": "Ezért a következőt szokták tenni helyette.",
  "model": "DeepL",
  "n_reviews": 1,
  "start": 583.14,
  "end": 584.82
 },
 {
  "input": "You randomly shuffle your training data and then divide it into a whole bunch of mini-batches, let's say each one having 100 training examples.",
  "translatedText": "A képzési adatokat véletlenszerűen összekeverik, majd egy csomó kis csoportra osztják, mondjuk mindegyikben 100 képzési példával.",
  "model": "DeepL",
  "n_reviews": 1,
  "start": 585.48,
  "end": 592.42
 },
 {
  "input": "Then you compute a step according to the mini-batch.",
  "translatedText": "Ezután a visszaterjesztést külön csoportonként végzik el.",
  "model": "DeepL",
  "n_reviews": 1,
  "start": 592.94,
  "end": 596.2
 },
 {
  "input": "It's not going to be the actual gradient of the cost function, which depends on all of the training data, not this tiny subset, so it's not the most efficient step downhill, but each mini-batch does give you a pretty good approximation, and more importantly, it gives you a significant computational speedup.",
  "translatedText": "A költségfüggvény tényleges gradiense az összes minta adattól függ, nem csak egy apró részhalmaztól, így nem a legmeredekebb csökkenést érik le, de minden egyes csoport elég jó közelítést ad, és ami még fontosabb, ez jelentős számítási sebességnövekedést eredményez.",
  "model": "DeepL",
  "n_reviews": 1,
  "start": 596.96,
  "end": 612.12
 },
 {
  "input": "If you were to plot the trajectory of your network under the relevant cost surface, it would be a little more like a drunk man stumbling aimlessly down a hill but taking quick steps, rather than a carefully calculating man determining the exact downhill direction of each step before taking a very slow and careful step in that direction.",
  "translatedText": "Ha a költségfelületen ábrázolni szeretnéd a megtett lépéseket, az inkább hasonlítana egy részeg emberre, aki céltalanul botorkál lefelé a hegyről, de gyors lépéseket tesz, mint egy körültekintő emberre, aki minden egyes lépésnél pontosan meghatározza a lejtő irányát, mielőtt nagyon lassan és óvatosan lépne abba az irányba.",
  "model": "DeepL",
  "n_reviews": 1,
  "start": 612.82,
  "end": 630.16
 },
 {
  "input": "This technique is referred to as stochastic gradient descent.",
  "translatedText": "Ezt a technikát sztochasztikus gradiens ereszkedésnek nevezik.",
  "model": "DeepL",
  "n_reviews": 1,
  "start": 631.54,
  "end": 634.66
 },
 {
  "input": "There's a lot going on here, so let's just sum it up for ourselves, shall we?",
  "translatedText": "Elég sok mindenről beszéltünk, úgyhogy foglaljuk össze magunknak, jó?",
  "model": "DeepL",
  "n_reviews": 1,
  "start": 635.96,
  "end": 639.62
 },
 {
  "input": "Backpropagation is the algorithm for determining how a single training example would like to nudge the weights and biases, not just in terms of whether they should go up or down, but in terms of what relative proportions to those changes cause the most rapid decrease to the cost.",
  "translatedText": "A visszaterjesztés az az algoritmus, amely meghatározza, hogy egyetlen minta példa esetén hogyan kell eltolni a súlyokat. Nem csak annyit, hogy felfelé vagy lefelé kell, hanem azt is, hogy e változások milyen relatív arányban okozzák a leggyorsabb csökkenést a költségben.",
  "model": "DeepL",
  "n_reviews": 1,
  "start": 640.44,
  "end": 655.56
 },
 {
  "input": "A true gradient descent step would involve doing this for all your tens of thousands of training examples and averaging the desired changes you get.",
  "translatedText": "Egy valódi gradiens ereszkedés lépés azt jelentené, hogy ezt több tízezer minta példán végzed el, és átlagolod a megkapott kívánt változásokat.",
  "model": "DeepL",
  "n_reviews": 1,
  "start": 656.26,
  "end": 664.2
 },
 {
  "input": "But that's computationally slow, so instead you randomly subdivide the data into mini-batches and compute each step with respect to a mini-batch.",
  "translatedText": "De ez számítási szempontból lassú, ezért ehelyett az adatokat véletlenszerűen csoportokra osztjuk, és minden egyes lépést egy csoportra vonatkoztatva számolunk ki.",
  "model": "DeepL",
  "n_reviews": 1,
  "start": 664.86,
  "end": 673.24
 },
 {
  "input": "Repeatedly going through all of the mini-batches and making these adjustments, you will converge towards a local minimum of the cost function, which is to say your network will end up doing a really good job on the training examples.",
  "translatedText": "Ha ismételten végigmész az összes csoporton, és elvégzed ezeket a beállításokat, akkor a költségfüggvény lokális minimuma felé konvergálsz, ami azt jelenti, hogy a hálózatod végül nagyon jó munkát fog végezni a minta példákon.",
  "model": "DeepL",
  "n_reviews": 1,
  "start": 674,
  "end": 685.54
 },
 {
  "input": "So with all of that said, every line of code that would go into implementing backprop actually corresponds with something you have now seen, at least in informal terms.",
  "translatedText": "Mindez után, minden egyes sor kód, ami a visszaterjesztés megvalósításához szükséges, valójában megfelel valaminek, amit eddig láttál, legalábbis informálisan.",
  "model": "DeepL",
  "n_reviews": 1,
  "start": 687.24,
  "end": 696.72
 },
 {
  "input": "But sometimes knowing what the math does is only half the battle, and just representing the damn thing is where it gets all muddled and confusing.",
  "translatedText": "De néha az, hogy tudjuk, mit csinál a matematika, csak a küzdelem fele. Mindennek ábrázolása az, ahol zavarossá válik az egész.",
  "model": "DeepL",
  "n_reviews": 1,
  "start": 697.56,
  "end": 704.12
 },
 {
  "input": "So for those of you who do want to go deeper, the next video goes through the same ideas that were just presented here, but in terms of the underlying calculus, which should hopefully make it a little more familiar as you see the topic in other resources.",
  "translatedText": "Azok számára, akik szeretnének mélyebbre ásni, a következő videó ugyanezeket az ötleteket veszi végig, de már a matematikai jelölésrendszer bevezetésével, hogy a témáról szóló más forrásokban látottakat is követhetővé tegyem.",
  "model": "DeepL",
  "n_reviews": 1,
  "start": 704.86,
  "end": 716.42
 },
 {
  "input": "Before that, one thing worth emphasizing is that for this algorithm to work, and this goes for all sorts of machine learning beyond just neural networks, you need a lot of training data.",
  "translatedText": "Egy dolgot még mindenképpen hangsúlyoznék: ahhoz, hogy ez az algoritmus működjön, nagyon sok minta adatra van szükség, és ez mindenféle gépi tanulásra vonatkozik.",
  "model": "DeepL",
  "n_reviews": 1,
  "start": 717.34,
  "end": 725.9
 },
 {
  "input": "In our case, one thing that makes handwritten digits such a nice example is that there exists the MNIST database, with so many examples that have been labeled by humans.",
  "translatedText": "A mi esetünkben a számjegyfelismerést az teszi ilyen szép példává, hogy létezik az MNIST adatbázis, amely nagyon sok olyan képet tartalmaz, amelyet emberek címkéztek fel.",
  "model": "DeepL",
  "n_reviews": 1,
  "start": 726.42,
  "end": 734.74
 },
 {
  "input": "So a common challenge that those of you working in machine learning will be familiar with is just getting the labeled training data you actually need, whether that's having people label tens of thousands of images, or whatever other data type you might be dealing with.",
  "translatedText": "A gépi tanulással dolgozók számára nem ismeretlen, hogy mekkora kihívás a szükséges mennyiségű címkézett képzési adathoz jutni, legyen szó akár esetenként több tízezer kép vagy bármilyen más adattípus egyesével felcímkézéséről.",
  "model": "DeepL",
  "n_reviews": 1,
  "start": 735.3,
  "end": 747.1
 }
]
