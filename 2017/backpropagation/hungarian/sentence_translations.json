[
 {
  "input": "Here, we tackle backpropagation, the core algorithm behind how neural networks learn. ",
  "translatedText": "Itt foglalkozunk a visszaterjesztéssel, a neurális hálózatok tanulási folyamatának alapvető algoritmusával. ",
  "model": "nmt",
  "time_range": [
   4.0600000000000005,
   8.88
  ]
 },
 {
  "input": "After a quick recap for where we are, the first thing I'll do is an intuitive walkthrough for what the algorithm is actually doing, without any reference to the formulas. ",
  "translatedText": "Miután röviden összefoglalom, hol tartunk, először egy intuitív áttekintést teszek arról, hogy mit is csinál az algoritmus, a képletekre való hivatkozás nélkül. ",
  "model": "nmt",
  "time_range": [
   9.4,
   17.0
  ]
 },
 {
  "input": "Then, for those of you who do want to dive into the math, the next video goes into the calculus underlying all this. ",
  "translatedText": "Aztán azok számára, akik szeretnének belemerülni a matematikába, a következő videó a mindezek alapjául szolgáló kalkulussal foglalkozik. ",
  "model": "nmt",
  "time_range": [
   17.66,
   23.02
  ]
 },
 {
  "input": "If you watched the last two videos, or if you're just jumping in with the appropriate background, you know what a neural network is, and how it feeds forward information. ",
  "translatedText": "Ha megnézte az utolsó két videót, vagy ha csak a megfelelő háttérrel ugrik be, akkor tudja, mi az a neurális hálózat, és hogyan továbbítja az információkat. ",
  "model": "nmt",
  "time_range": [
   23.82,
   31.0
  ]
 },
 {
  "input": "Here, we're doing the classic example of recognizing handwritten digits whose pixel values get fed into the first layer of the network with 784 neurons, and I've been showing a network with two hidden layers having just 16 neurons each, and an output layer of 10 neurons, indicating which digit the network is choosing as its answer. ",
  "translatedText": "Itt a klasszikus példát tesszük a kézzel írt számjegyek felismerésére, amelyek pixelértékei a hálózat első rétegébe kerülnek, 784 neuronnal, és bemutattam egy hálózatot két rejtett réteggel, amelyek mindegyike mindössze 16 neuronból áll, és egy kimenet. 10 neuronból álló réteg, jelezve, hogy a hálózat melyik számjegyet választja válaszul. ",
  "model": "nmt",
  "time_range": [
   31.68,
   49.04
  ]
 },
 {
  "input": "I'm also expecting you to understand gradient descent, as described in the last video, and how what we mean by learning is that we want to find which weights and biases minimize a certain cost function. ",
  "translatedText": "Azt is elvárom tőled, hogy megértsd a gradiens süllyedést, amint azt az utolsó videóban leírtuk, és hogyan értjük tanulás alatt azt, hogy meg akarjuk találni, mely súlyok és torzítások minimalizálnak egy bizonyos költségfüggvényt. ",
  "model": "nmt",
  "time_range": [
   50.04,
   61.26
  ]
 },
 {
  "input": "As a quick reminder, for the cost of a single training example, you take the output the network gives, along with the output you wanted it to give, and add up the squares of the differences between each component. ",
  "translatedText": "Gyors emlékeztetőként, egyetlen betanítási példa költségéhez vegye ki a hálózat által adott kimenetet a kívánt kimenettel együtt, és adja össze az egyes összetevők közötti különbségek négyzetét. ",
  "model": "nmt",
  "time_range": [
   62.04,
   74.6
  ]
 },
 {
  "input": "Doing this for all of your tens of thousands of training examples and averaging the results, this gives you the total cost of the network. ",
  "translatedText": "Ha ezt megteszi a több tízezer képzési példájához, és átlagolja az eredményeket, akkor ez megadja a hálózat teljes költségét. ",
  "model": "nmt",
  "time_range": [
   75.38,
   83.02
  ]
 },
 {
  "input": "As if that's not enough to think about, as described in the last video, the thing that we're looking for is the negative gradient of this cost function, which tells you how you need to change all of the weights and biases, all of these connections, so as to most efficiently decrease the cost. ",
  "translatedText": "Mintha nem lenne elég ezen gondolkodni, ahogy az utolsó videóban is le van írva, a keresett dolog ennek a költségfüggvénynek a negatív gradiense, amely megmondja, hogyan kell módosítania az összes súlyozást és torzítást, ezeket a kapcsolatokat a költségek leghatékonyabb csökkentése érdekében. ",
  "model": "nmt",
  "time_range": [
   83.02,
   98.32
  ]
 },
 {
  "input": "Backpropagation, the topic of this video, is an algorithm for computing that crazy complicated gradient. ",
  "translatedText": "A backpropagation, ennek a videónak a témája, egy algoritmus ennek az őrülten bonyolult gradiensnek a kiszámításához. ",
  "model": "nmt",
  "time_range": [
   103.26,
   109.58
  ]
 },
 {
  "input": "The one idea from the last video that I really want you to hold firmly in your mind right now is that because thinking of the gradient vector as a direction in 13,000 dimensions is, to put it lightly, beyond the scope of our imaginations, there's another way you can think about it. ",
  "translatedText": "Az utolsó videó egyetlen gondolata, amit nagyon szeretném, ha most szilárdan a fejedben tartsd, az az, hogy mivel a gradiens vektort 13 000 dimenziós iránynak tekinteni, enyhén szólva túlmutat a képzeletünkön, van egy másik ahogyan gondolkodhatsz rajta. ",
  "model": "nmt",
  "time_range": [
   109.58,
   123.58
  ]
 },
 {
  "input": "The magnitude of each component here is telling you how sensitive the cost function is to each weight and bias. ",
  "translatedText": "Az egyes komponensek nagysága itt megmutatja, hogy a költségfüggvény mennyire érzékeny az egyes súlyokra és torzításokra. ",
  "model": "nmt",
  "time_range": [
   124.6,
   130.94
  ]
 },
 {
  "input": "For example, let's say you go through the process I'm about to describe, and compute the negative gradient, and the component associated with the weight on this edge here comes out to be 3.2, while the component associated with this edge here comes out as 0.1. ",
  "translatedText": "Tegyük fel például, hogy végigmegy azon a folyamaton, amelyet leírok, és kiszámítja a negatív gradienst, és az ezen az élen lévő súlyhoz tartozó összetevő itt 3 lesz. 2, míg az ehhez az élhez tartozó komponens itt 0-ként jelenik meg. 1. ",
  "model": "nmt",
  "time_range": [
   131.8,
   146.26
  ]
 },
 {
  "input": "The way you would interpret that is that the cost of the function is 32 times more sensitive to changes in that first weight, so if you were to wiggle that value a little bit, it's going to cause some change to the cost, and that change is 32 times greater than what the same wiggle to that second weight would give. ",
  "translatedText": "Ezt úgy értelmeznéd, hogy a függvény költsége 32-szer érzékenyebb az első súly változásaira, tehát ha egy kicsit mozgatnád ezt az értéket, az némi változást fog okozni a költségekben, és ez a változás 32-szer nagyobb, mint amit az adott második súlynak ugyanaz a mozgása adna. ",
  "model": "nmt",
  "time_range": [
   146.82,
   163.06
  ]
 },
 {
  "input": "Personally, when I was first learning about backpropagation, I think the most confusing aspect was just the notation and index chasing of it all. ",
  "translatedText": "Személy szerint, amikor először tanultam a visszaszaporításról, azt hiszem, a legzavaróbb szempont az egész jelölése és indexelése volt. ",
  "model": "nmt",
  "time_range": [
   168.42000000000002,
   175.74
  ]
 },
 {
  "input": "But once you unwrap what each part of this algorithm is really doing, each individual effect it's having is actually pretty intuitive, it's just that there's a lot of little adjustments getting layered on top of each other. ",
  "translatedText": "De ha egyszer kibontja, hogy ennek az algoritmusnak az egyes részei valójában mit csinálnak, minden egyes hatás, amelyet kifejtenek, valójában meglehetősen intuitív, csak arról van szó, hogy sok apró beállítás kerül egymásra. ",
  "model": "nmt",
  "time_range": [
   176.22,
   186.64
  ]
 },
 {
  "input": "So I'm going to start things off here with a complete disregard for the notation, and just step through the effects each training example has on the weights and biases. ",
  "translatedText": "Úgyhogy a jelölések teljes figyelmen kívül hagyásával kezdem a dolgokat, és csak végig kell lépnem az egyes edzési példák súlyozására és torzításaira gyakorolt hatásain. ",
  "model": "nmt",
  "time_range": [
   187.74,
   196.12
  ]
 },
 {
  "input": "Because the cost function involves averaging a certain cost per example over all the tens of thousands of training examples, the way we adjust the weights and biases for a single gradient descent step also depends on every single example. ",
  "translatedText": "Mivel a költségfüggvény magában foglalja egy bizonyos példánkénti költség átlagolását a több tízezer képzési példában, az is, hogy hogyan állítjuk be a súlyokat és a torzításokat egyetlen gradiens süllyedési lépéshez, minden egyes példától függ. ",
  "model": "nmt",
  "time_range": [
   197.02,
   211.04
  ]
 },
 {
  "input": "Or rather, in principle it should, but for computational efficiency we'll do a little trick later to keep you from needing to hit every single example for every step. ",
  "translatedText": "Illetve elvileg kellene, de a számítási hatékonyság érdekében később teszünk egy kis trükköt, hogy ne kelljen minden egyes példát eltalálni minden lépésnél. ",
  "model": "nmt",
  "time_range": [
   211.68,
   219.2
  ]
 },
 {
  "input": "In other cases, right now, all we're going to do is focus our attention on one single example, this image of a 2. ",
  "translatedText": "Más esetekben jelenleg csak egyetlen példára összpontosítjuk figyelmünket, erre a 2-es képre. ",
  "model": "nmt",
  "time_range": [
   219.2,
   225.96
  ]
 },
 {
  "input": "What effect should this one training example have on how the weights and biases get adjusted? ",
  "translatedText": "Milyen hatással lehet ennek az egyetlen edzési példának a súlyok és a torzítások beállítására? ",
  "model": "nmt",
  "time_range": [
   226.72,
   231.48
  ]
 },
 {
  "input": "Let's say we're at a point where the network is not well trained yet, so the activations in the output are going to look pretty random, maybe something like 0.5, 0.8, 0.2, on and on. ",
  "translatedText": "Tegyük fel, hogy egy olyan ponton vagyunk, ahol a hálózat még nem megfelelően képzett, így a kimenet aktiválásai elég véletlenszerűek lesznek, talán valami 0-nak. 5, 0.8, 0.2, tovább és tovább. ",
  "model": "nmt",
  "time_range": [
   232.68,
   242.0
  ]
 },
 {
  "input": "We can't directly change those activations, we only have influence on the weights and biases, but it's helpful to keep track of which adjustments we wish should take place to that output layer. ",
  "translatedText": "Ezeket az aktiválásokat közvetlenül nem tudjuk megváltoztatni, csak a súlyokra és torzításokra van befolyásunk, de hasznos nyomon követni, hogy az adott kimeneti rétegen milyen módosításokat szeretnénk végrehajtani. ",
  "model": "nmt",
  "time_range": [
   242.52,
   252.58
  ]
 },
 {
  "input": "And since we want it to classify the image as a 2, we want that third value to get nudged up while all the others get nudged down. ",
  "translatedText": "És mivel azt akarjuk, hogy a képet 2-esnek minősítse, azt akarjuk, hogy a harmadik érték felfelé, míg az összes többi lefelé kerüljön. ",
  "model": "nmt",
  "time_range": [
   253.36,
   261.26
  ]
 },
 {
  "input": "Moreover, the sizes of these nudges should be proportional to how far away each current value is from its target value. ",
  "translatedText": "Ezen túlmenően, ezeknek a lökéseknek a méretének arányosnak kell lennie azzal, hogy az egyes aktuális értékek milyen távolságra vannak a célértéktől. ",
  "model": "nmt",
  "time_range": [
   262.06,
   269.52
  ]
 },
 {
  "input": "For example, the increase to that number 2 neuron's activation is in a sense more important than the decrease to the number 8 neuron, which is already pretty close to where it should be. ",
  "translatedText": "Például a 2-es számú neuron aktiválásának növekedése bizonyos értelemben fontosabb, mint a 8-as számú neuron csökkenése, amely már elég közel van ahhoz, ahol lennie kellene. ",
  "model": "nmt",
  "time_range": [
   270.22,
   280.9
  ]
 },
 {
  "input": "So zooming in further, let's focus just on this one neuron, the one whose activation we wish to increase. ",
  "translatedText": "Tehát tovább közelítve csak erre az egyetlen neuronra koncentráljunk, arra, amelynek aktiválását szeretnénk növelni. ",
  "model": "nmt",
  "time_range": [
   282.04,
   287.28
  ]
 },
 {
  "input": "Remember, that activation is defined as a certain weighted sum of all the activations in the previous layer, plus a bias, which is all then plugged into something like the sigmoid squishification function, or a ReLU. ",
  "translatedText": "Ne feledje, hogy az aktiválás az előző réteg összes aktiválásának egy bizonyos súlyozott összegeként van definiálva, plusz egy torzítás, amely azután valami olyasmihez van csatlakoztatva, mint a szigmoid squishification függvény vagy egy ReLU. ",
  "model": "nmt",
  "time_range": [
   288.18,
   301.04
  ]
 },
 {
  "input": "So there are three different avenues that can team up together to help increase that activation. ",
  "translatedText": "Tehát három különböző út áll rendelkezésre, amelyek összefoghatnak az aktiválás növelése érdekében. ",
  "model": "nmt",
  "time_range": [
   301.64,
   307.02
  ]
 },
 {
  "input": "You can increase the bias, you can increase the weights, and you can change the activations from the previous layer. ",
  "translatedText": "Növelheti a torzítást, növelheti a súlyokat, és módosíthatja az előző réteg aktiválásait. ",
  "model": "nmt",
  "time_range": [
   307.44,
   314.04
  ]
 },
 {
  "input": "Focusing on how the weights should be adjusted, notice how the weights actually have differing levels of influence. ",
  "translatedText": "Arra összpontosítva, hogyan kell beállítani a súlyokat, figyelje meg, hogy a súlyok valójában milyen mértékben befolyásolják. ",
  "model": "nmt",
  "time_range": [
   314.94,
   320.86
  ]
 },
 {
  "input": "The connections with the brightest neurons from the preceding layer have the biggest effect since those weights are multiplied by larger activation values. ",
  "translatedText": "Az előző réteg legfényesebb neuronjaival való kapcsolatoknak van a legnagyobb hatása, mivel ezek a súlyok megszorozódnak a nagyobb aktiválási értékekkel. ",
  "model": "nmt",
  "time_range": [
   321.44,
   329.1
  ]
 },
 {
  "input": "So if you were to increase one of those weights, it actually has a stronger influence on the ultimate cost function than increasing the weights of connections with dimmer neurons, at least as far as this one training example is concerned. ",
  "translatedText": "Tehát, ha növelné az egyik súlyt, az valójában erősebb hatással van a végső költségfüggvényre, mint a halványabb neuronokkal való kapcsolatok súlyának növelése, legalábbis ami ezt az egy gyakorlati példát illeti. ",
  "model": "nmt",
  "time_range": [
   331.46,
   343.48
  ]
 },
 {
  "input": "Remember, when we talk about gradient descent, we don't just care about whether each component should get nudged up or down, we care about which ones give you the most bang for your buck. ",
  "translatedText": "Ne feledje, amikor gradiens süllyedésről beszélünk, nem csak azzal foglalkozunk, hogy az egyes komponensek felfelé vagy lefelé mozduljanak el, hanem az is, hogy melyik adják a legtöbbet a pénzéért. ",
  "model": "nmt",
  "time_range": [
   344.42,
   353.22
  ]
 },
 {
  "input": "This, by the way, is at least somewhat reminiscent of a theory in neuroscience for how biological networks of neurons learn, Hebbian theory, often summed up in the phrase, neurons that fire together wire together. ",
  "translatedText": "Ez egyébként legalább valamelyest emlékeztet az idegtudomány egy elméletére, amely szerint a neuronok biológiai hálózatai hogyan tanulnak, a hebbi elméletet, amelyet gyakran a következő kifejezéssel foglalnak össze: az idegsejtek, amelyek együtt tüzelnek össze. ",
  "model": "nmt",
  "time_range": [
   355.02000000000004,
   366.46
  ]
 },
 {
  "input": "Here, the biggest increases to weights, the biggest strengthening of connections, happens between neurons which are the most active and the ones which we wish to become more active. ",
  "translatedText": "Itt a legnagyobb súlynövekedés, a kapcsolatok legnagyobb erősödése a legaktívabb és az aktívabbá tenni kívánt idegsejtek között történik. ",
  "model": "nmt",
  "time_range": [
   367.26,
   377.28
  ]
 },
 {
  "input": "In a sense, the neurons that are firing while seeing a 2 get more strongly linked to those firing when thinking about it. ",
  "translatedText": "Bizonyos értelemben azok a neuronok, amelyek tüzelnek, miközben 2-t látnak, erősebben kapcsolódnak azokhoz, amelyek tüzelnek, ha rágondolunk. ",
  "model": "nmt",
  "time_range": [
   377.94,
   384.48
  ]
 },
 {
  "input": "To be clear, I'm not in a position to make statements one way or another about whether artificial networks of neurons behave anything like biological brains, and this fires together wire together idea comes with a couple meaningful asterisks, but taken as a very loose analogy, I find it interesting to note. ",
  "translatedText": "Az egyértelműség kedvéért nem vagyok abban a helyzetben, hogy ilyen vagy olyan kijelentéseket tegyek arról, hogy a mesterséges neuronhálózatok úgy viselkednek-e, mint a biológiai agyak, és ez az ötlet összekapcsolja a vezetékeket, és néhány jelentőségteljes csillaggal együtt jár, de nagyon laza. hasonlattal, érdekesnek találom megjegyezni. ",
  "model": "nmt",
  "time_range": [
   385.4,
   401.02
  ]
 },
 {
  "input": "Anyway, the third way we can help increase this neuron's activation is by changing all the activations in the previous layer. ",
  "translatedText": "Egyébként a harmadik módja annak, hogy fokozzuk ennek a neuronnak az aktiválását, az az, hogy megváltoztatjuk az előző réteg összes aktiválását. ",
  "model": "nmt",
  "time_range": [
   401.94,
   409.04
  ]
 },
 {
  "input": "Namely, if everything connected to that digit 2 neuron with a positive weight got brighter, and if everything connected with a negative weight got dimmer, then that digit 2 neuron would become more active. ",
  "translatedText": "Ugyanis, ha a pozitív súllyal rendelkező 2-es számjegyű neuronhoz kapcsolódó minden fényesebbé válna, és ha minden negatív súllyal kapcsolatos halványodna, akkor az a 2-es számjegyű neuron aktívabbá válna. ",
  "model": "nmt",
  "time_range": [
   409.04,
   420.68
  ]
 },
 {
  "input": "And similar to the weight changes, you're going to get the most bang for your buck by seeking changes that are proportional to the size of the corresponding weights. ",
  "translatedText": "És hasonlóan a súlyváltozásokhoz, a legtöbbet úgy érheti el, ha olyan változtatásokat keres, amelyek arányosak a megfelelő súlyok méretével. ",
  "model": "nmt",
  "time_range": [
   422.54,
   430.28
  ]
 },
 {
  "input": "Now of course, we cannot directly influence those activations, we only have control over the weights and biases. ",
  "translatedText": "Természetesen ezeket az aktiválásokat közvetlenül nem tudjuk befolyásolni, csak a súlyokat és a torzításokat tudjuk ellenőrizni. ",
  "model": "nmt",
  "time_range": [
   432.14,
   437.48
  ]
 },
 {
  "input": "But just as with the last layer, it's helpful to keep a note of what those desired changes are. ",
  "translatedText": "De csakúgy, mint az utolsó rétegnél, hasznos feljegyezni, hogy melyek ezek a kívánt változtatások. ",
  "model": "nmt",
  "time_range": [
   437.48,
   444.12
  ]
 },
 {
  "input": "But keep in mind, zooming out one step here, this is only what that digit 2 output neuron wants. ",
  "translatedText": "De ne feledje, ha itt egy lépést kicsinyít, csak ez az, amit a 2-es számjegyű kimeneti neuron akar. ",
  "model": "nmt",
  "time_range": [
   444.58,
   449.2
  ]
 },
 {
  "input": "Remember, we also want all the other neurons in the last layer to become less active, and each of those other output neurons has its own thoughts about what should happen to that second to last layer. ",
  "translatedText": "Ne feledje, azt is szeretnénk, hogy az utolsó rétegben lévő összes többi neuron kevésbé legyen aktív, és ezeknek a többi kimeneti neuronnak megvan a maga gondolata arról, hogy mi történjen az utolsó réteggel. ",
  "model": "nmt",
  "time_range": [
   449.76,
   459.6
  ]
 },
 {
  "input": "So the desire of this digit 2 neuron is added together with the desires of all the other output neurons for what should happen to this second to last layer, again in proportion to the corresponding weights, and in proportion to how much each of those neurons needs to change. ",
  "translatedText": "Tehát ennek a 2-es számjegyű neuronnak a vágya összeadódik az összes többi kimeneti neuron azon vágyaival, hogy mi történjen ezzel a második-utolsó réteggel, ismét a megfelelő súlyok arányában, és annak arányában, hogy mennyire van szüksége az egyes neuronoknak. változtatni. ",
  "model": "nmt",
  "time_range": [
   462.7,
   480.72
  ]
 },
 {
  "input": "This right here is where the idea of propagating backwards comes in. ",
  "translatedText": "Itt jön a képbe a visszafelé terjedés ötlete. ",
  "model": "nmt",
  "time_range": [
   481.6,
   485.48
  ]
 },
 {
  "input": "By adding together all these desired effects, you basically get a list of nudges that you want to happen to this second to last layer. ",
  "translatedText": "Ha ezeket a kívánt hatásokat összeadjuk, akkor alapvetően egy listát kapunk azokról a lökésekről, amelyeket ezzel az utolsó réteggel szeretnénk elérni. ",
  "model": "nmt",
  "time_range": [
   485.82,
   493.36
  ]
 },
 {
  "input": "And once you have those, you can recursively apply the same process to the relevant weights and biases that determine those values, repeating the same process I just walked through and moving backwards through the network. ",
  "translatedText": "És ha ezek megvannak, rekurzív módon alkalmazhatja ugyanazt a folyamatot a releváns súlyokra és torzításokra, amelyek meghatározzák ezeket az értékeket, megismételve ugyanazt a folyamatot, amelyen az imént végigmentem, és visszafelé haladva a hálózaton. ",
  "model": "nmt",
  "time_range": [
   494.22,
   505.1
  ]
 },
 {
  "input": "And zooming out a bit further, remember that this is all just how a single training example wishes to nudge each one of those weights and biases. ",
  "translatedText": "És kicsit tovább kicsinyítve, ne feledje, hogy egyetlen edzési példa csak így kívánja elmozdítani ezeket a súlyokat és elfogultságokat. ",
  "model": "nmt",
  "time_range": [
   508.96,
   517.0
  ]
 },
 {
  "input": "If we only listened to what that 2 wanted, the network would ultimately be incentivized just to classify all images as a 2. ",
  "translatedText": "Ha csak arra figyelnénk, hogy mit akar ez a 2, akkor a hálózat végül arra ösztönözne, hogy minden képet 2-esnek minősítsen. ",
  "model": "nmt",
  "time_range": [
   517.48,
   523.22
  ]
 },
 {
  "input": "So what you do is go through this same backprop routine for every other training example, recording how each of them would like to change the weights and biases, and average together those desired changes. ",
  "translatedText": "Tehát ugyanazt a backprop rutint kell végrehajtania minden más edzési példánál, rögzítve, hogy mindegyikük hogyan szeretné megváltoztatni a súlyokat és a torzításokat, és együtt átlagolja a kívánt változtatásokat. ",
  "model": "nmt",
  "time_range": [
   524.06,
   536.0
  ]
 },
 {
  "input": "This collection here of the averaged nudges to each weight and bias is, loosely speaking, the negative gradient of the cost function referenced in the last video, or at least something proportional to it. ",
  "translatedText": "Az egyes súlyokra és torzításokra vonatkozó átlagolt lökések itt található gyűjteménye, lazán szólva, az utolsó videóban hivatkozott költségfüggvény negatív gradiense, vagy legalábbis valami azzal arányos. ",
  "model": "nmt",
  "time_range": [
   541.72,
   553.68
  ]
 },
 {
  "input": "I say loosely speaking only because I have yet to get quantitatively precise about those nudges, but if you understood every change I just referenced, why some are proportionally bigger than others, and how they all need to be added together, you understand the mechanics for what backpropagation is actually doing. ",
  "translatedText": "Csak azért mondom lazán szólva, mert még nem kell mennyiségileg pontosítani ezeket a lökéseket, de ha megértetted az imént hivatkozott változtatásokat, miért nagyobbak egyesek arányosan nagyobbak, mint mások, és hogyan kell ezeket összeadni, akkor megérted a mechanikát. hogy valójában mit csinál a backpropagation. ",
  "model": "nmt",
  "time_range": [
   554.38,
   571.0
  ]
 },
 {
  "input": "By the way, in practice, it takes computers an extremely long time to add up the influence of every training example every gradient descent step. ",
  "translatedText": "Egyébként a gyakorlatban a számítógépeknek rendkívül sok időbe telik, hogy minden edzéspélda hatását összeadják minden gradiens süllyedési lépésnél. ",
  "model": "nmt",
  "time_range": [
   573.96,
   582.44
  ]
 },
 {
  "input": "So here's what's commonly done instead. ",
  "translatedText": "Tehát itt van, amit általában csinálnak helyette. ",
  "model": "nmt",
  "time_range": [
   583.14,
   584.82
  ]
 },
 {
  "input": "You randomly shuffle your training data and divide it into a whole bunch of mini-batches, let's say each one having 100 training examples. ",
  "translatedText": "Véletlenszerűen összekeveri az edzési adatokat, és felosztja egy csomó mini kötegre, mondjuk mindegyiknek 100 edzési példája van. ",
  "model": "nmt",
  "time_range": [
   585.48,
   592.42
  ]
 },
 {
  "input": "Then you compute a step according to the mini-batch. ",
  "translatedText": "Ezután kiszámít egy lépést a mini-köteg szerint. ",
  "model": "nmt",
  "time_range": [
   592.9399999999999,
   597.28
  ]
 },
 {
  "input": "It's not the actual gradient of the cost function, which depends on all of the training data, not this tiny subset, so it's not the most efficient step downhill, but each mini-batch does give you a pretty good approximation, and more importantly it gives you a significant computational speedup. ",
  "translatedText": "Ez nem a költségfüggvény tényleges gradiense, amely az összes betanítási adattól függ, nem ettől az apró részhalmaztól, tehát nem ez a leghatékonyabb lépés lefelé, de minden mini köteg elég jó közelítést ad, és ami még fontosabb. jelentős számítási sebességet biztosít. ",
  "model": "nmt",
  "time_range": [
   597.28,
   612.12
  ]
 },
 {
  "input": "If you were to plot the trajectory of your network under the relevant cost surface, it would be a little more like a drunk man stumbling aimlessly down a hill but taking quick steps, rather than a carefully calculating man determining the exact downhill direction of each step before taking a very slow and careful step in that direction. ",
  "translatedText": "Ha a megfelelő költségfelület alatt ábrázolná a hálózatának pályáját, az egy kicsit inkább olyan lenne, mint egy részeg ember, aki céltalanul botorkál le a dombról, de gyors lépéseket tesz, nem pedig egy gondosan számító ember, aki meghatározza minden lépés pontos lefelé irányát. mielőtt nagyon lassú és óvatos lépést tenne abba az irányba. ",
  "model": "nmt",
  "time_range": [
   612.82,
   630.16
  ]
 },
 {
  "input": "This technique is referred to as stochastic gradient descent. ",
  "translatedText": "Ezt a technikát sztochasztikus gradiens süllyedésnek nevezik. ",
  "model": "nmt",
  "time_range": [
   631.54,
   634.66
  ]
 },
 {
  "input": "There's a lot going on here, so let's just sum it up for ourselves, shall we? ",
  "translatedText": "Sok minden történik itt, úgyhogy foglaljuk össze magunknak, jó? ",
  "model": "nmt",
  "time_range": [
   635.96,
   639.62
  ]
 },
 {
  "input": "Backpropagation is the algorithm for determining how a single training example would like to nudge the weights and biases, not just in terms of whether they should go up or down, but in terms of what relative proportions to those changes cause the most rapid decrease to the cost. ",
  "translatedText": "A visszapropagálás az az algoritmus, amely meghatározza, hogy egy edzési példa hogyan kívánja eltolni a súlyokat és torzításokat, nemcsak abból a szempontból, hogy felfelé vagy lefelé kell-e menni, hanem abból a szempontból, hogy ezeknek a változásoknak milyen relatív aránya okozza a leggyorsabb csökkenést költség. ",
  "model": "nmt",
  "time_range": [
   640.44,
   655.56
  ]
 },
 {
  "input": "A true gradient descent step would involve doing this for all your tens and thousands of training examples and averaging the desired changes you get, but that's computationally slow, so instead you randomly subdivide the data into mini-batches and compute each step with respect to a mini-batch. ",
  "translatedText": "Egy igazi gradiens süllyedési lépés azt jelentené, hogy ezt minden tíz és ezer képzési példánál meg kell tenni, és átlagolni kell a kívánt változtatásokat, de ez számításilag lassú, ezért ehelyett véletlenszerűen felosztja az adatokat mini kötegekre, és minden lépést egy mini-tétel. ",
  "model": "nmt",
  "time_range": [
   656.26,
   673.24
  ]
 },
 {
  "input": "Repeatedly going through all the mini-batches and making these adjustments, you will converge towards a local minimum of the cost function, which is to say your network will end up doing a really good job on the training examples. ",
  "translatedText": "Az összes mini-kötegelt ismételten végignézve és végrehajtva ezeket a beállításokat, a költségfüggvény helyi minimuma felé közeledik, ami azt jelenti, hogy a hálózat végül nagyon jó munkát fog végezni a képzési példákon. ",
  "model": "nmt",
  "time_range": [
   674.0,
   685.54
  ]
 },
 {
  "input": "So with all of that said, every line of code that would go into implementing backprop actually corresponds with something you have now seen, at least in informal terms. ",
  "translatedText": "Tehát mindezekkel együtt minden kódsor, amely a backprop megvalósításához felhasználható, valójában megfelel valaminek, amit most láttál, legalábbis informális értelemben. ",
  "model": "nmt",
  "time_range": [
   687.24,
   696.72
  ]
 },
 {
  "input": "But sometimes knowing what the math does is only half the battle, and just representing the damn thing is where it gets all muddled and confusing. ",
  "translatedText": "De néha csak a fele a sikernek tudnia, hogy mit csinál a matematika, és csak az átkozott dolgot képviselni az, ahol minden zavarossá és zavarossá válik. ",
  "model": "nmt",
  "time_range": [
   697.56,
   704.12
  ]
 },
 {
  "input": "So, for those of you who do want to go deeper, the next video goes through the same ideas that were just presented here, but in terms of the underlying calculus, which should hopefully make it a little more familiar as you see the topic in other resources. ",
  "translatedText": "Tehát azok számára, akik szeretnének mélyebbre menni, a következő videó ugyanazokat a gondolatokat járja át, amelyeket itt bemutattunk, de a mögöttes kalkuláció tekintetében, ami remélhetőleg egy kicsit ismerősebbé teszi a témát egyéb források. ",
  "model": "nmt",
  "time_range": [
   704.86,
   716.42
  ]
 },
 {
  "input": "Before that, one thing worth emphasizing is that for this algorithm to work, and this goes for all sorts of machine learning beyond just neural networks, you need a lot of training data. ",
  "translatedText": "Előtte érdemes hangsúlyozni, hogy ahhoz, hogy ez az algoritmus működjön, és ez a neurális hálózatokon kívül mindenféle gépi tanulásra is vonatkozik, sok betanítási adatra van szükség. ",
  "model": "nmt",
  "time_range": [
   717.34,
   725.9
  ]
 },
 {
  "input": "In our case, one thing that makes handwritten digits such a nice example is that there exists the MNIST database, with so many examples that have been labeled by humans. ",
  "translatedText": "A mi esetünkben az egyik dolog, ami a kézzel írt számjegyeket ilyen szép példává teszi, az az, hogy létezik az MNIST adatbázis, rengeteg olyan példával, amelyeket emberek címkéztek fel. ",
  "model": "nmt",
  "time_range": [
   726.42,
   734.74
  ]
 },
 {
  "input": "So a common challenge that those of you working in machine learning will be familiar with is just getting the labeled training data you actually need, whether that's having people label tens of thousands of images, or whatever other data type you might be dealing with. ",
  "translatedText": "Tehát a gépi tanulásban dolgozók számára ismert gyakori kihívás az, hogy megkapja a ténylegesen szükséges címkézett képzési adatokat, legyen szó akár több tízezer kép felcímkézéséről, vagy bármilyen más adattípusról, amellyel esetleg foglalkoznia kell. ",
  "model": "nmt",
  "time_range": [
   735.3,
   747.1
  ]
 }
]