[
 {
  "input": "Here, we tackle backpropagation, the core algorithm behind how neural networks learn. ",
  "translatedText": "Ở đây, chúng tôi giải quyết vấn đề lan truyền ngược, thuật toán cốt lõi đằng sau cách mạng lưới thần kinh học hỏi. ",
  "model": "nmt",
  "time_range": [
   0.0,
   9.64
  ]
 },
 {
  "input": "After a quick recap for where we are, the first thing I'll do is an intuitive walkthrough for what the algorithm is actually doing, without any reference to the formulas. ",
  "translatedText": "Sau khi tóm tắt nhanh về vị trí của chúng ta, điều đầu tiên tôi sẽ làm là hướng dẫn trực quan về những gì thuật toán thực sự đang thực hiện mà không cần tham chiếu đến các công thức. ",
  "model": "nmt",
  "time_range": [
   9.64,
   17.4
  ]
 },
 {
  "input": "Then, for those of you who do want to dive into the math, the next video goes into the calculus underlying all this. ",
  "translatedText": "Sau đó, dành cho những ai muốn đi sâu vào toán học, video tiếp theo sẽ đi sâu vào phép tính cơ bản của tất cả những điều này. ",
  "model": "nmt",
  "time_range": [
   17.4,
   24.04
  ]
 },
 {
  "input": "If you watched the last two videos, or if you're just jumping in with the appropriate background, you know what a neural network is, and how it feeds forward information. ",
  "translatedText": "Nếu bạn đã xem hai video cuối cùng hoặc nếu bạn chỉ bắt đầu với nền tảng thích hợp, thì bạn sẽ biết mạng lưới thần kinh là gì và cách nó truyền thông tin chuyển tiếp. ",
  "model": "nmt",
  "time_range": [
   24.04,
   31.08
  ]
 },
 {
  "input": "Here, we're doing the classic example of recognizing handwritten digits whose pixel values get fed into the first layer of the network with 784 neurons, and I've been showing a network with two hidden layers having just 16 neurons each, and an output layer of 10 neurons, indicating which digit the network is choosing as its answer. ",
  "translatedText": "Ở đây, chúng tôi đang thực hiện một ví dụ cổ điển về việc nhận dạng các chữ số viết tay có giá trị pixel được đưa vào lớp đầu tiên của mạng có 784 nơ-ron và tôi đã hiển thị một mạng có hai lớp ẩn, mỗi lớp chỉ có 16 nơ-ron và một đầu ra lớp gồm 10 nơ-ron, cho biết mạng đang chọn chữ số nào làm câu trả lời. ",
  "model": "nmt",
  "time_range": [
   31.08,
   49.52
  ]
 },
 {
  "input": "I'm also expecting you to understand gradient descent, as described in the last video, and how what we mean by learning is that we want to find which weights and biases minimize a certain cost function. ",
  "translatedText": "Tôi cũng mong bạn hiểu độ dốc giảm dần, như được mô tả trong video trước và ý nghĩa của việc học là chúng tôi muốn tìm ra trọng số và độ lệch nào giảm thiểu một hàm chi phí nhất định. ",
  "model": "nmt",
  "time_range": [
   49.52,
   62.08
  ]
 },
 {
  "input": "As a quick reminder, for the cost of a single training example, you take the output the network gives, along with the output you wanted it to give, and add up the squares of the differences between each component. ",
  "translatedText": "Xin nhắc lại, với chi phí cho một ví dụ đào tạo, bạn lấy đầu ra mà mạng cung cấp, cùng với đầu ra mà bạn muốn nó cung cấp, rồi cộng các bình phương của sự khác biệt giữa mỗi thành phần. ",
  "model": "nmt",
  "time_range": [
   62.08,
   75.56
  ]
 },
 {
  "input": "Doing this for all of your tens of thousands of training examples and averaging the results, this gives you the total cost of the network. ",
  "translatedText": "Thực hiện việc này cho tất cả hàng chục nghìn ví dụ đào tạo của bạn và tính trung bình các kết quả, điều này sẽ mang lại cho bạn tổng chi phí của mạng. ",
  "model": "nmt",
  "time_range": [
   75.56,
   83.04
  ]
 },
 {
  "input": "As if that's not enough to think about, as described in the last video, the thing that we're looking for is the negative gradient of this cost function, which tells you how you need to change all of the weights and biases, all of these connections, so as to most efficiently decrease the cost. ",
  "translatedText": "Như thể nghĩ thế vẫn chưa đủ, như được mô tả trong video trước, thứ mà chúng ta đang tìm kiếm là gradient âm của hàm chi phí này, nó cho bạn biết cách bạn cần thay đổi tất cả trọng số và độ lệch, tất cả những kết nối này, để giảm chi phí một cách hiệu quả nhất. ",
  "model": "nmt",
  "time_range": [
   83.04,
   103.08
  ]
 },
 {
  "input": "Backpropagation, the topic of this video, is an algorithm for computing that crazy complicated gradient. ",
  "translatedText": "Lan truyền ngược, chủ đề của video này, là một thuật toán để tính toán độ dốc cực kỳ phức tạp đó. ",
  "model": "nmt",
  "time_range": [
   103.08,
   109.6
  ]
 },
 {
  "input": "The one idea from the last video that I really want you to hold firmly in your mind right now is that because thinking of the gradient vector as a direction in 13,000 dimensions is, to put it lightly, beyond the scope of our imaginations, there's another way you can think about it. ",
  "translatedText": "Một ý tưởng từ video trước mà tôi thực sự muốn bạn ghi nhớ ngay bây giờ là vì coi vectơ gradient như một hướng trong 13.000 chiều, nói một cách nhẹ nhàng, ngoài phạm vi trí tưởng tượng của chúng ta, còn có một ý tưởng khác. cách bạn có thể nghĩ về nó. ",
  "model": "nmt",
  "time_range": [
   109.6,
   124.62
  ]
 },
 {
  "input": "The magnitude of each component here is telling you how sensitive the cost function is to each weight and bias. ",
  "translatedText": "Độ lớn của từng thành phần ở đây cho bạn biết mức độ nhạy cảm của hàm chi phí đối với từng trọng số và độ lệch. ",
  "model": "nmt",
  "time_range": [
   124.62,
   131.82
  ]
 },
 {
  "input": "For example, let's say you go through the process I'm about to describe, and compute the negative gradient, and the component associated with the weight on this edge here comes out to be 3.2, while the component associated with this edge here comes out as 0.1. ",
  "translatedText": "Ví dụ: giả sử bạn thực hiện quy trình mà tôi sắp mô tả và tính gradient âm và thành phần liên quan đến trọng số trên cạnh này ở đây sẽ là 3.2, trong khi thành phần được liên kết với cạnh này ở đây là 0.1. ",
  "model": "nmt",
  "time_range": [
   131.82,
   146.94
  ]
 },
 {
  "input": "The way you would interpret that is that the cost of the function is 32 times more sensitive to changes in that first weight, so if you were to wiggle that value a little bit, it's going to cause some change to the cost, and that change is 32 times greater than what the same wiggle to that second weight would give. ",
  "translatedText": "Theo cách bạn giải thích thì chi phí của hàm nhạy cảm hơn 32 lần với những thay đổi về trọng số đầu tiên đó, vì vậy nếu bạn thay đổi giá trị đó một chút, điều đó sẽ gây ra một số thay đổi về chi phí và thay đổi đó lớn hơn 32 lần so với lực lắc của vật nặng thứ hai đó. ",
  "model": "nmt",
  "time_range": [
   146.94,
   165.58
  ]
 },
 {
  "input": "Personally, when I was first learning about backpropagation, I think the most confusing aspect was just the notation and index chasing of it all. ",
  "translatedText": "Cá nhân tôi, khi lần đầu tiên tìm hiểu về lan truyền ngược, tôi nghĩ khía cạnh khó hiểu nhất chỉ là ký hiệu và chỉ số của nó. ",
  "model": "nmt",
  "time_range": [
   165.58,
   175.82
  ]
 },
 {
  "input": "But once you unwrap what each part of this algorithm is really doing, each individual effect it's having is actually pretty intuitive, it's just that there's a lot of little adjustments getting layered on top of each other. ",
  "translatedText": "Nhưng một khi bạn khám phá ra chức năng thực sự của từng phần của thuật toán này, mỗi hiệu ứng riêng lẻ mà nó mang lại thực sự khá trực quan, chỉ là có rất nhiều điều chỉnh nhỏ được xếp chồng lên nhau. ",
  "model": "nmt",
  "time_range": [
   175.82,
   187.74
  ]
 },
 {
  "input": "So I'm going to start things off here with a complete disregard for the notation, and just step through the effects each training example has on the weights and biases. ",
  "translatedText": "Vì vậy, tôi sẽ bắt đầu mọi thứ ở đây với việc hoàn toàn không quan tâm đến ký hiệu và chỉ xem qua tác động của mỗi ví dụ huấn luyện đối với trọng số và độ lệch. ",
  "model": "nmt",
  "time_range": [
   187.74,
   197.38
  ]
 },
 {
  "input": "Because the cost function involves averaging a certain cost per example over all the tens of thousands of training examples, the way we adjust the weights and biases for a single gradient descent step also depends on every single example. ",
  "translatedText": "Bởi vì hàm chi phí liên quan đến việc tính trung bình một chi phí nhất định cho mỗi ví dụ trong tất cả hàng chục nghìn ví dụ huấn luyện, nên cách chúng ta điều chỉnh trọng số và độ lệch cho một bước giảm độ dốc cũng phụ thuộc vào từng ví dụ. ",
  "model": "nmt",
  "time_range": [
   197.38,
   211.74
  ]
 },
 {
  "input": "Or rather, in principle it should, but for computational efficiency we'll do a little trick later to keep you from needing to hit every single example for every step. ",
  "translatedText": "Hay đúng hơn, về nguyên tắc là như vậy, nhưng để đạt hiệu quả tính toán, chúng tôi sẽ thực hiện một thủ thuật nhỏ sau để giúp bạn không cần phải xem từng ví dụ cho mỗi bước. ",
  "model": "nmt",
  "time_range": [
   211.74,
   219.86
  ]
 },
 {
  "input": "In other cases, right now, all we're going to do is focus our attention on one single example, this image of a 2. ",
  "translatedText": "Trong các trường hợp khác, ngay bây giờ, tất cả những gì chúng ta sẽ làm là tập trung sự chú ý vào một ví dụ duy nhất, hình ảnh số 2 này. ",
  "model": "nmt",
  "time_range": [
   219.86,
   226.78
  ]
 },
 {
  "input": "What effect should this one training example have on how the weights and biases get adjusted? ",
  "translatedText": "Ví dụ đào tạo này sẽ có ảnh hưởng gì đến cách điều chỉnh trọng số và độ lệch? ",
  "model": "nmt",
  "time_range": [
   226.78,
   231.74
  ]
 },
 {
  "input": "Let's say we're at a point where the network is not well trained yet, so the activations in the output are going to look pretty random, maybe something like 0.5, 0.8, 0.2, on and on. ",
  "translatedText": "Giả sử chúng ta đang ở thời điểm mạng chưa được đào tạo tốt, do đó, kích hoạt ở đầu ra sẽ trông khá ngẫu nhiên, có thể giống như 0.5, 0.8, 0.2, cứ thế tiếp tục. ",
  "model": "nmt",
  "time_range": [
   231.74,
   242.78
  ]
 },
 {
  "input": "We can't directly change those activations, we only have influence on the weights and biases, but it's helpful to keep track of which adjustments we wish should take place to that output layer. ",
  "translatedText": "Chúng tôi không thể trực tiếp thay đổi những kích hoạt đó, chúng tôi chỉ có ảnh hưởng đến trọng số và độ lệch, nhưng sẽ rất hữu ích khi theo dõi những điều chỉnh nào chúng tôi muốn sẽ diễn ra đối với lớp đầu ra đó. ",
  "model": "nmt",
  "time_range": [
   242.78,
   253.34
  ]
 },
 {
  "input": "And since we want it to classify the image as a 2, we want that third value to get nudged up while all the others get nudged down. ",
  "translatedText": "Và vì chúng tôi muốn nó phân loại hình ảnh thành 2, nên chúng tôi muốn giá trị thứ ba đó được nâng lên trong khi tất cả các giá trị khác bị đẩy xuống. ",
  "model": "nmt",
  "time_range": [
   253.34,
   261.7
  ]
 },
 {
  "input": "Moreover, the sizes of these nudges should be proportional to how far away each current value is from its target value. ",
  "translatedText": "Hơn nữa, kích thước của những cú hích này phải tỷ lệ thuận với khoảng cách giữa mỗi giá trị hiện tại với giá trị mục tiêu của nó. ",
  "model": "nmt",
  "time_range": [
   261.7,
   270.22
  ]
 },
 {
  "input": "For example, the increase to that number 2 neuron's activation is in a sense more important than the decrease to the number 8 neuron, which is already pretty close to where it should be. ",
  "translatedText": "Ví dụ, việc tăng cường kích hoạt tế bào thần kinh số 2 theo một nghĩa nào đó quan trọng hơn việc giảm kích hoạt tế bào thần kinh số 8, vốn đã khá gần với mức cần thiết. ",
  "model": "nmt",
  "time_range": [
   270.22,
   282.06
  ]
 },
 {
  "input": "So zooming in further, let's focus just on this one neuron, the one whose activation we wish to increase. ",
  "translatedText": "Vì vậy, hãy phóng to hơn nữa, hãy tập trung vào một nơ-ron này, nơ-ron mà chúng ta muốn tăng cường kích hoạt. ",
  "model": "nmt",
  "time_range": [
   282.06,
   287.9
  ]
 },
 {
  "input": "Remember, that activation is defined as a certain weighted sum of all the activations in the previous layer, plus a bias, which is all then plugged into something like the sigmoid squishification function, or a ReLU. ",
  "translatedText": "Hãy nhớ rằng, kích hoạt đó được xác định là tổng có trọng số nhất định của tất cả các kích hoạt ở lớp trước, cộng với độ lệch, sau đó tất cả được cắm vào một cái gì đó như hàm sigmoid squishification hoặc ReLU. ",
  "model": "nmt",
  "time_range": [
   287.9,
   301.9
  ]
 },
 {
  "input": "So there are three different avenues that can team up together to help increase that activation. ",
  "translatedText": "Vì vậy, có ba cách khác nhau có thể hợp tác với nhau để giúp tăng cường sự kích hoạt đó. ",
  "model": "nmt",
  "time_range": [
   301.9,
   308.06
  ]
 },
 {
  "input": "You can increase the bias, you can increase the weights, and you can change the activations from the previous layer. ",
  "translatedText": "Bạn có thể tăng độ lệch, có thể tăng trọng số và có thể thay đổi kích hoạt từ lớp trước. ",
  "model": "nmt",
  "time_range": [
   308.06,
   315.3
  ]
 },
 {
  "input": "Focusing on how the weights should be adjusted, notice how the weights actually have differing levels of influence. ",
  "translatedText": "Tập trung vào cách điều chỉnh trọng số, chú ý xem các trọng số thực sự có mức độ ảnh hưởng khác nhau như thế nào. ",
  "model": "nmt",
  "time_range": [
   315.3,
   321.46
  ]
 },
 {
  "input": "The connections with the brightest neurons from the preceding layer have the biggest effect since those weights are multiplied by larger activation values. ",
  "translatedText": "Các kết nối với các nơ-ron sáng nhất từ lớp trước có tác động lớn nhất vì các trọng số đó được nhân với giá trị kích hoạt lớn hơn. ",
  "model": "nmt",
  "time_range": [
   321.46,
   331.42
  ]
 },
 {
  "input": "So if you were to increase one of those weights, it actually has a stronger influence on the ultimate cost function than increasing the weights of connections with dimmer neurons, at least as far as this one training example is concerned. ",
  "translatedText": "Vì vậy, nếu bạn tăng một trong những trọng số đó, nó thực sự có ảnh hưởng mạnh hơn đến hàm chi phí cuối cùng so với việc tăng trọng số của các kết nối với các nơ-ron mờ hơn, ít nhất là đối với ví dụ đào tạo này. ",
  "model": "nmt",
  "time_range": [
   331.42,
   344.02
  ]
 },
 {
  "input": "Remember, when we talk about gradient descent, we don't just care about whether each component should get nudged up or down, we care about which ones give you the most bang for your buck. ",
  "translatedText": "Hãy nhớ rằng, khi nói về việc giảm độ dốc, chúng tôi không chỉ quan tâm đến việc mỗi thành phần nên được nâng lên hay giảm xuống, mà chúng tôi còn quan tâm đến thành phần nào mang lại cho bạn nhiều lợi ích nhất. ",
  "model": "nmt",
  "time_range": [
   344.02,
   354.02
  ]
 },
 {
  "input": "This, by the way, is at least somewhat reminiscent of a theory in neuroscience for how biological networks of neurons learn, Hebbian theory, often summed up in the phrase, neurons that fire together wire together. ",
  "translatedText": "Nhân tiện, điều này ít nhất gợi nhớ đến một lý thuyết trong khoa học thần kinh về cách mạng lưới sinh học của các tế bào thần kinh học hỏi, lý thuyết Hebbian, thường được tóm tắt trong cụm từ, các tế bào thần kinh hoạt động cùng nhau nối với nhau. ",
  "model": "nmt",
  "time_range": [
   354.02,
   366.94
  ]
 },
 {
  "input": "Here, the biggest increases to weights, the biggest strengthening of connections, happens between neurons which are the most active and the ones which we wish to become more active. ",
  "translatedText": "Ở đây, trọng lượng tăng lên nhiều nhất, sự tăng cường lớn nhất của các kết nối, xảy ra giữa các tế bào thần kinh hoạt động mạnh nhất và những tế bào mà chúng ta mong muốn trở nên năng động hơn. ",
  "model": "nmt",
  "time_range": [
   366.94,
   378.1
  ]
 },
 {
  "input": "In a sense, the neurons that are firing while seeing a 2 get more strongly linked to those firing when thinking about it. ",
  "translatedText": "Theo một nghĩa nào đó, các tế bào thần kinh kích hoạt khi nhìn thấy số 2 sẽ có mối liên kết chặt chẽ hơn với những tế bào thần kinh kích hoạt khi nghĩ về nó. ",
  "model": "nmt",
  "time_range": [
   378.1,
   385.44
  ]
 },
 {
  "input": "To be clear, I'm not in a position to make statements one way or another about whether artificial networks of neurons behave anything like biological brains, and this fires together wire together idea comes with a couple meaningful asterisks, but taken as a very loose analogy, I find it interesting to note. ",
  "translatedText": "Nói rõ hơn, tôi không có đủ tư cách để đưa ra tuyên bố theo cách này hay cách khác về việc liệu mạng lưới nơ-ron nhân tạo có hoạt động giống như bộ não sinh học hay không, và ý tưởng này kết hợp với nhau đi kèm với một vài dấu hoa thị có ý nghĩa, nhưng được coi là rất lỏng lẻo. sự tương tự, tôi thấy thật thú vị khi lưu ý. ",
  "model": "nmt",
  "time_range": [
   385.44,
   401.76
  ]
 },
 {
  "input": "Anyway, the third way we can help increase this neuron's activation is by changing all the activations in the previous layer. ",
  "translatedText": "Dù sao đi nữa, cách thứ ba chúng ta có thể giúp tăng cường kích hoạt tế bào thần kinh này là thay đổi tất cả các kích hoạt ở lớp trước. ",
  "model": "nmt",
  "time_range": [
   401.76,
   409.36
  ]
 },
 {
  "input": "Namely, if everything connected to that digit 2 neuron with a positive weight got brighter, and if everything connected with a negative weight got dimmer, then that digit 2 neuron would become more active. ",
  "translatedText": "Cụ thể, nếu mọi thứ kết nối với nơron số 2 có trọng số dương trở nên sáng hơn và nếu mọi thứ kết nối với nơron số 2 có trọng số âm trở nên mờ hơn thì nơron số 2 đó sẽ hoạt động mạnh hơn. ",
  "model": "nmt",
  "time_range": [
   409.36,
   422.68
  ]
 },
 {
  "input": "And similar to the weight changes, you're going to get the most bang for your buck by seeking changes that are proportional to the size of the corresponding weights. ",
  "translatedText": "Và tương tự như những thay đổi về trọng lượng, bạn sẽ thu được lợi ích lớn nhất bằng cách tìm kiếm những thay đổi tỷ lệ thuận với kích thước của các trọng lượng tương ứng. ",
  "model": "nmt",
  "time_range": [
   422.68,
   430.84
  ]
 },
 {
  "input": "Now of course, we cannot directly influence those activations, we only have control over the weights and biases. ",
  "translatedText": "Tất nhiên, hiện tại, chúng tôi không thể tác động trực tiếp đến những kích hoạt đó, chúng tôi chỉ có quyền kiểm soát trọng số và độ lệch. ",
  "model": "nmt",
  "time_range": [
   430.84,
   438.32
  ]
 },
 {
  "input": "But just as with the last layer, it's helpful to keep a note of what those desired changes are. ",
  "translatedText": "Nhưng cũng giống như lớp cuối cùng, việc ghi lại những thay đổi mong muốn đó là gì sẽ rất hữu ích. ",
  "model": "nmt",
  "time_range": [
   438.32,
   443.96
  ]
 },
 {
  "input": "But keep in mind, zooming out one step here, this is only what that digit 2 output neuron wants. ",
  "translatedText": "Nhưng hãy nhớ rằng, thu nhỏ một bước ở đây, đây chỉ là điều mà nơ-ron đầu ra chữ số 2 muốn. ",
  "model": "nmt",
  "time_range": [
   443.96,
   450.04
  ]
 },
 {
  "input": "Remember, we also want all the other neurons in the last layer to become less active, and each of those other output neurons has its own thoughts about what should happen to that second to last layer. ",
  "translatedText": "Hãy nhớ rằng, chúng ta cũng muốn tất cả các nơ-ron khác ở lớp cuối cùng trở nên ít hoạt động hơn và mỗi nơ-ron đầu ra khác đó có suy nghĩ riêng về điều gì sẽ xảy ra với lớp thứ hai đến lớp cuối cùng. ",
  "model": "nmt",
  "time_range": [
   450.04,
   463.2
  ]
 },
 {
  "input": "So the desire of this digit 2 neuron is added together with the desires of all the other output neurons for what should happen to this second to last layer, again in proportion to the corresponding weights, and in proportion to how much each of those neurons needs to change. ",
  "translatedText": "Vì vậy, mong muốn của nơ-ron chữ số 2 này được cộng thêm cùng với mong muốn của tất cả các nơ-ron đầu ra khác về điều gì sẽ xảy ra từ lớp thứ hai đến lớp cuối cùng, một lần nữa theo tỷ lệ với trọng số tương ứng và tỷ lệ với mỗi nơ-ron đó cần bao nhiêu thay đổi. ",
  "model": "nmt",
  "time_range": [
   463.2,
   481.74
  ]
 },
 {
  "input": "This right here is where the idea of propagating backwards comes in. ",
  "translatedText": "Đây chính là nơi mà ý tưởng truyền bá ngược xuất hiện. ",
  "model": "nmt",
  "time_range": [
   481.74,
   485.94
  ]
 },
 {
  "input": "By adding together all these desired effects, you basically get a list of nudges that you want to happen to this second to last layer. ",
  "translatedText": "Bằng cách cộng tất cả các hiệu ứng mong muốn này lại với nhau, về cơ bản bạn sẽ có được một danh sách các cú hích mà bạn muốn thực hiện ở lớp thứ hai đến lớp cuối cùng. ",
  "model": "nmt",
  "time_range": [
   485.94,
   494.3
  ]
 },
 {
  "input": "And once you have those, you can recursively apply the same process to the relevant weights and biases that determine those values, repeating the same process I just walked through and moving backwards through the network. ",
  "translatedText": "Và khi bạn đã có những thứ đó, bạn có thể áp dụng đệ quy quy trình tương tự cho các trọng số và độ lệch có liên quan để xác định các giá trị đó, lặp lại quy trình tương tự mà tôi vừa thực hiện và di chuyển ngược lại qua mạng. ",
  "model": "nmt",
  "time_range": [
   494.3,
   509.18
  ]
 },
 {
  "input": "And zooming out a bit further, remember that this is all just how a single training example wishes to nudge each one of those weights and biases. ",
  "translatedText": "Và thu nhỏ hơn một chút, hãy nhớ rằng đây chỉ là cách một ví dụ đào tạo duy nhất muốn thúc đẩy từng trọng số và thành kiến đó. ",
  "model": "nmt",
  "time_range": [
   509.18,
   517.52
  ]
 },
 {
  "input": "If we only listened to what that 2 wanted, the network would ultimately be incentivized just to classify all images as a 2. ",
  "translatedText": "Nếu chúng ta chỉ lắng nghe những gì thứ 2 đó muốn thì cuối cùng mạng sẽ được khuyến khích chỉ phân loại tất cả hình ảnh thành thứ 2. ",
  "model": "nmt",
  "time_range": [
   517.52,
   524.14
  ]
 },
 {
  "input": "So what you do is go through this same backprop routine for every other training example, recording how each of them would like to change the weights and biases, and average together those desired changes. ",
  "translatedText": "Vì vậy, những gì bạn làm là thực hiện quy trình hỗ trợ tương tự này cho mọi ví dụ đào tạo khác, ghi lại cách mỗi ví dụ muốn thay đổi trọng số và độ lệch, đồng thời tính trung bình những thay đổi mong muốn đó. ",
  "model": "nmt",
  "time_range": [
   524.14,
   542.3
  ]
 },
 {
  "input": "This collection here of the averaged nudges to each weight and bias is, loosely speaking, the negative gradient of the cost function referenced in the last video, or at least something proportional to it. ",
  "translatedText": "Bộ sưu tập ở đây gồm các mức tăng trung bình cho từng trọng số và độ lệch, nói một cách lỏng lẻo, là độ dốc âm của hàm chi phí được tham chiếu trong video trước hoặc ít nhất là thứ gì đó tỷ lệ thuận với nó. ",
  "model": "nmt",
  "time_range": [
   542.3,
   554.36
  ]
 },
 {
  "input": "I say loosely speaking only because I have yet to get quantitatively precise about those nudges, but if you understood every change I just referenced, why some are proportionally bigger than others, and how they all need to be added together, you understand the mechanics for what backpropagation is actually doing. ",
  "translatedText": "Tôi nói một cách lỏng lẻo chỉ vì tôi vẫn chưa hiểu chính xác về mặt định lượng về những cú hích đó, nhưng nếu bạn hiểu mọi thay đổi mà tôi vừa đề cập, tại sao một số thay đổi lại lớn hơn những thay đổi khác theo tỷ lệ và cách tất cả chúng cần được cộng lại với nhau, bạn sẽ hiểu cơ chế của lan truyền ngược thực sự đang làm gì. ",
  "model": "nmt",
  "time_range": [
   554.36,
   574.1
  ]
 },
 {
  "input": "By the way, in practice, it takes computers an extremely long time to add up the influence of every training example every gradient descent step. ",
  "translatedText": "Nhân tiện, trên thực tế, máy tính phải mất một thời gian rất dài để cộng dồn mức độ ảnh hưởng của từng ví dụ huấn luyện ở mỗi bước giảm độ dốc. ",
  "model": "nmt",
  "time_range": [
   574.1,
   583.12
  ]
 },
 {
  "input": "So here's what's commonly done instead. ",
  "translatedText": "Vì vậy, đây là những gì thường được thực hiện thay thế. ",
  "model": "nmt",
  "time_range": [
   583.12,
   585.54
  ]
 },
 {
  "input": "You randomly shuffle your training data and divide it into a whole bunch of mini-batches, let's say each one having 100 training examples. ",
  "translatedText": "Bạn xáo trộn ngẫu nhiên dữ liệu huấn luyện của mình và chia nó thành nhiều đợt nhỏ, giả sử mỗi đợt có 100 mẫu huấn luyện. ",
  "model": "nmt",
  "time_range": [
   585.54,
   593.38
  ]
 },
 {
  "input": "Then you compute a step according to the mini-batch. ",
  "translatedText": "Sau đó, bạn tính toán một bước theo lô nhỏ. ",
  "model": "nmt",
  "time_range": [
   593.38,
   596.98
  ]
 },
 {
  "input": "It's not the actual gradient of the cost function, which depends on all of the training data, not this tiny subset, so it's not the most efficient step downhill, but each mini-batch does give you a pretty good approximation, and more importantly it gives you a significant computational speedup. ",
  "translatedText": "Đó không phải là độ dốc thực tế của hàm chi phí, phụ thuộc vào tất cả dữ liệu huấn luyện, không phải tập hợp con nhỏ này, vì vậy đây không phải là bước xuống dốc hiệu quả nhất, nhưng mỗi lô nhỏ sẽ cung cấp cho bạn một xấp xỉ khá tốt và quan trọng hơn là nó cung cấp cho bạn một tốc độ tính toán đáng kể. ",
  "model": "nmt",
  "time_range": [
   596.98,
   612.9
  ]
 },
 {
  "input": "If you were to plot the trajectory of your network under the relevant cost surface, it would be a little more like a drunk man stumbling aimlessly down a hill but taking quick steps, rather than a carefully calculating man determining the exact downhill direction of each step before taking a very slow and careful step in that direction. ",
  "translatedText": "Nếu bạn lập biểu đồ quỹ đạo của mạng theo bề mặt chi phí liên quan, thì nó sẽ giống một người đàn ông say rượu vấp ngã không mục đích xuống một ngọn đồi nhưng thực hiện những bước đi nhanh chóng, hơn là một người đàn ông tính toán cẩn thận xác định hướng xuống dốc chính xác của mỗi bước trước khi thực hiện bước đi thật chậm rãi và cẩn thận theo hướng đó. ",
  "model": "nmt",
  "time_range": [
   612.9,
   631.62
  ]
 },
 {
  "input": "This technique is referred to as stochastic gradient descent. ",
  "translatedText": "Kỹ thuật này được gọi là giảm độ dốc ngẫu nhiên. ",
  "model": "nmt",
  "time_range": [
   631.62,
   635.2
  ]
 },
 {
  "input": "There's a lot going on here, so let's just sum it up for ourselves, shall we? ",
  "translatedText": "Có rất nhiều điều đang diễn ra ở đây, vì vậy chúng ta hãy tự tổng hợp lại nhé? ",
  "model": "nmt",
  "time_range": [
   635.2,
   640.4
  ]
 },
 {
  "input": "Backpropagation is the algorithm for determining how a single training example would like to nudge the weights and biases, not just in terms of whether they should go up or down, but in terms of what relative proportions to those changes cause the most rapid decrease to the cost. ",
  "translatedText": "Lan truyền ngược là thuật toán để xác định cách một ví dụ huấn luyện muốn điều chỉnh trọng số và độ lệch, không chỉ về việc chúng nên tăng hay giảm mà còn về tỷ lệ tương đối với những thay đổi đó gây ra sự giảm nhanh nhất đối với trị giá. ",
  "model": "nmt",
  "time_range": [
   640.4,
   656.24
  ]
 },
 {
  "input": "A true gradient descent step would involve doing this for all your tens and thousands of training examples and averaging the desired changes you get, but that's computationally slow, so instead you randomly subdivide the data into mini-batches and compute each step with respect to a mini-batch. ",
  "translatedText": "Bước giảm độ dốc thực sự sẽ liên quan đến việc thực hiện việc này cho tất cả hàng chục nghìn ví dụ đào tạo của bạn và tính trung bình các thay đổi mong muốn mà bạn nhận được, nhưng việc đó chậm về mặt tính toán, vì vậy thay vào đó, bạn chia ngẫu nhiên dữ liệu thành các lô nhỏ và tính toán từng bước tương ứng với một lô nhỏ. ",
  "model": "nmt",
  "time_range": [
   656.24,
   674.0
  ]
 },
 {
  "input": "Repeatedly going through all the mini-batches and making these adjustments, you will converge towards a local minimum of the cost function, which is to say your network will end up doing a really good job on the training examples. ",
  "translatedText": "Liên tục thực hiện tất cả các đợt nhỏ và thực hiện những điều chỉnh này, bạn sẽ hội tụ về mức tối thiểu cục bộ của hàm chi phí, nghĩa là mạng của bạn sẽ thực hiện rất tốt các ví dụ đào tạo. ",
  "model": "nmt",
  "time_range": [
   674.0,
   687.54
  ]
 },
 {
  "input": "So with all of that said, every line of code that would go into implementing backprop actually corresponds with something you have now seen, at least in informal terms. ",
  "translatedText": "Vì vậy, với tất cả những gì đã nói, mọi dòng mã dùng để triển khai backprop thực sự tương ứng với những gì bạn đã thấy, ít nhất là theo thuật ngữ không chính thức. ",
  "model": "nmt",
  "time_range": [
   687.54,
   697.68
  ]
 },
 {
  "input": "But sometimes knowing what the math does is only half the battle, and just representing the damn thing is where it gets all muddled and confusing. ",
  "translatedText": "Nhưng đôi khi biết những gì toán học làm mới chỉ là một nửa trận chiến, và chỉ việc trình bày cái thứ chết tiệt đó là mọi thứ sẽ trở nên lộn xộn và khó hiểu. ",
  "model": "nmt",
  "time_range": [
   697.68,
   704.78
  ]
 },
 {
  "input": "So, for those of you who do want to go deeper, the next video goes through the same ideas that were just presented here, but in terms of the underlying calculus, which should hopefully make it a little more familiar as you see the topic in other resources. ",
  "translatedText": "Vì vậy, đối với những ai muốn tìm hiểu sâu hơn, video tiếp theo sẽ trình bày những ý tưởng tương tự vừa được trình bày ở đây, nhưng về mặt phép tính cơ bản, hy vọng sẽ làm cho nó quen thuộc hơn một chút khi bạn xem chủ đề trong các nguồn lực khác. ",
  "model": "nmt",
  "time_range": [
   704.78,
   717.46
  ]
 },
 {
  "input": "Before that, one thing worth emphasizing is that for this algorithm to work, and this goes for all sorts of machine learning beyond just neural networks, you need a lot of training data. ",
  "translatedText": "Trước đó, một điều đáng nhấn mạnh là để thuật toán này hoạt động và điều này áp dụng cho tất cả các loại máy học ngoài mạng lưới thần kinh, bạn cần rất nhiều dữ liệu đào tạo. ",
  "model": "nmt",
  "time_range": [
   717.46,
   726.84
  ]
 },
 {
  "input": "In our case, one thing that makes handwritten digits such a nice example is that there exists the MNIST database, with so many examples that have been labeled by humans. ",
  "translatedText": "Trong trường hợp của chúng tôi, một điều khiến các chữ số viết tay trở thành một ví dụ hay là tồn tại cơ sở dữ liệu MNIST, với rất nhiều ví dụ đã được con người gắn nhãn. ",
  "model": "nmt",
  "time_range": [
   726.84,
   735.38
  ]
 },
 {
  "input": "So a common challenge that those of you working in machine learning will be familiar with is just getting the labeled training data you actually need, whether that's having people label tens of thousands of images, or whatever other data type you might be dealing with. ",
  "translatedText": "Vì vậy, một thách thức chung mà những người làm việc trong lĩnh vực học máy sẽ quen thuộc là lấy dữ liệu huấn luyện được gắn nhãn mà bạn thực sự cần, cho dù đó là yêu cầu mọi người gắn nhãn cho hàng chục nghìn hình ảnh hay bất kỳ loại dữ liệu nào khác mà bạn có thể đang xử lý. ",
  "model": "nmt",
  "time_range": [
   735.38,
   747.4
  ]
 }
]