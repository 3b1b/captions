1
00:00:15,246 --> 00:00:18,794
前回のビデオでは、単純な関数の導関数について説明しました

2
00:00:18,794 --> 00:00:22,343
が、その目標は、これら の公式がどこから来たのかを実際に

3
00:00:22,343 --> 00:00:25,892
説明する明確なイメージや直感を頭の中に持つこと でした。

4
00:00:25,892 --> 00:00:29,620
しかし、世界をモデル化する際に扱う関数のほとんどは、こ

5
00:00:29,620 --> 00:00:33,347
れらの単純な関数を 別の方法で混合、組み合わせ、または

6
00:00:33,347 --> 00:00:36,799
微調整することを伴うため、次のステップは、より複

7
00:00:36,799 --> 00:00:40,527
雑な組み合わせの導関数をどのように取得するかを理解する

8
00:00:40,527 --> 00:00:41,217
ことです。

9
00:00:41,217 --> 00:00:44,211
繰り返しに なりますが、これらを暗記する

10
00:00:44,211 --> 00:00:47,206
ものではなく、それぞれがどこ から来たの

11
00:00:47,206 --> 00:00:50,500
かを明確に頭の中に持っておいてほしいのです。

12
00:00:50,500 --> 00:00:52,223
これは、関数を組み合わせる 3

13
00:00:52,223 --> 00:00:53,947
つの基本的な方法に要約されます。

14
00:00:53,947 --> 00:00:57,044
それらを加算したり、乗算 したり、一方をもう一方の中

15
00:00:57,044 --> 00:01:00,260
に入れることもできます (これを「合成」といいます)。

16
00:01:00,260 --> 00:01:03,617
確かに、減算すると言うこともできますが、実際には、2

17
00:01:03,617 --> 00:01:07,223
番目の値にマイナスの 1 を掛けて、それらを加算するだけで

18
00:01:07,223 --> 00:01:07,472
す。

19
00:01:07,472 --> 00:01:11,346
同様に、関数を除算しても実際に は何も加算されません。

20
00:01:11,346 --> 00:01:14,216
これは、関数内の 1 を x に 1

21
00:01:14,216 --> 00:01:17,660
に接続して、2 つを乗算するのと同じだからです。

22
00:01:17,660 --> 00:01:20,270
つまり、実際のところ、遭遇するほとんどの関数には、これら

23
00:01:20,270 --> 00:01:21,890
3 つの異なるタイプの組み合わせを

24
00:01:21,890 --> 00:01:24,050
重ね合わせることが含まれていますが、どの程度巨大

25
00:01:24,050 --> 00:01:26,391
なものになるかについては実際には制限がありま せん。

26
00:01:26,391 --> 00:01:30,652
しかし、これら 3 つの組み合わせタイプだけでデリバティブ

27
00:01:30,652 --> 00:01:33,920
がどのように機能するかを知っていれば、いつでも

28
00:01:33,920 --> 00:01:37,187
段階的に実行して 、あらゆる種類の巨大な表現の

29
00:01:37,187 --> 00:01:39,460
レイヤーを剥がすことができます。

30
00:01:39,460 --> 00:01:45,180
問題は、2 つの関数の導関数がわかっている場合、それらの和

31
00:01:45,180 --> 00:01:50,520
、積、およびそれらの間の関数合成の導関数は何でしょうか?

32
00:01:50,520 --> 00:01:52,531
声を大にして言うのは少々ややこしい

33
00:01:52,531 --> 00:01:54,542
ですが、合計ルールが最も簡単です。

34
00:01:54,542 --> 00:01:59,022
2 つの関数の合計の導 関数は、それらの導関数の合計です。

35
00:01:59,022 --> 00:02:01,622
ただし、積と関数合成の導関数パ

36
00:02:01,622 --> 00:02:06,011
ターンはそれほど単純ではなく、この種の関数が必要になる

37
00:02:06,011 --> 00:02:10,400
ため、2 つの関数の和の導関数を取ることが何を意味する

38
00:02:10,400 --> 00:02:14,789
のかをよく考え て、この例でウォームアップする価値があ

39
00:02:14,789 --> 00:02:16,740
ります。 より深い思考。

40
00:02:16,740 --> 00:02:19,316
たとえば、x の関数 f が x の正弦に x の 2

41
00:02:19,316 --> 00:02:21,984
乗を加えたものに等しいという関数について考えてみましょう。

42
00:02:21,984 --> 00:02:25,606
これは 、入力ごとに、x の正弦値とその時点での

43
00:02:25,606 --> 00:02:28,503
x の 2 乗の値を加算する 関数です。

44
00:02:28,503 --> 00:02:32,238
たとえば、x が 0 に等しいとします。

45
00:02:32,238 --> 00:02:37,093
図５において、正弦グラフの高 さはこの縦棒によって与

46
00:02:37,093 --> 00:02:41,762
えられ、ｘ二乗放物線の高さはこの小さな縦棒によっ

47
00:02:41,762 --> 00:02:43,069
て与えられる。

48
00:02:43,069 --> 00:02:45,944
そして、それらの合計は、それらを積み

49
00:02:45,944 --> 00:02:48,820
重ねるだけで得られる長さになります。

50
00:02:48,820 --> 00:02:51,790
導関数の場合、その入力をわずかに微調整すると、おそらく

51
00:02:51,790 --> 00:02:54,761
0 まで増加すると何が起こるかを尋ねる必要が あります。

52
00:02:54,761 --> 00:02:55,504
5プラスDX。

53
00:02:55,504 --> 00:03:02,495
これら 2 つの場所の f の値の差を df と呼び ます。

54
00:03:02,495 --> 00:03:07,581
そして、このようにイメージすると、高さの合計の変化は、正

55
00:03:07,581 --> 00:03:11,214
弦グラフの変 化が何であれ、x の d

56
00:03:11,214 --> 00:03:15,937
サインと呼ぶものに、x の 2 乗に対する変化を加

57
00:03:15,937 --> 00:03:21,023
えたもの、つまり dx であることに同意していただけると

58
00:03:21,023 --> 00:03:22,840
思います。 四角い。

59
00:03:22,840 --> 00:03:25,210
ここで、サインの導関数がコサインであることが

60
00:03:25,210 --> 00:03:27,687
わかり、それが何を意味するかを思い出しました。

61
00:03:27,687 --> 00:03:30,745
これは、この小 さな変化、つまり x の d サインが、x

62
00:03:30,745 --> 00:03:33,600
のコサインに dx を掛けたものであることを意味します。

63
00:03:33,600 --> 00:03:38,170
これは最初のナ ッジ dx のサイズに比例し、比

64
00:03:38,170 --> 00:03:42,930
例定数は開始した入力のコサイン に等しくなります。

65
00:03:42,930 --> 00:03:47,003
同様に、x の 2 乗の導関数は 2x

66
00:03:47,003 --> 00:03:52,705
であるため、 x の 2 乗グラフの高さの変化は、dx

67
00:03:52,705 --> 00:03:55,760
が何であれ 2 倍になります。

68
00:03:55,760 --> 00:03:59,385
したがって、df を dx で割って並べ替えると、この

69
00:03:59,385 --> 00:04:02,877
合計関数に対する小さな変化と、それを引き起 こした

70
00:04:02,877 --> 00:04:06,637
x の小さな変化の比は、確かに x のコサインに 2x

71
00:04:06,637 --> 00:04:10,262
を加えたもの、つまり各部分の導関 数の合計になります。

72
00:04:10,262 --> 00:04:13,364
しかし、先ほども言いましたが、製品の場合は

73
00:04:13,364 --> 00:04:16,465
少し事情が異なりま す。 その理由を小さな

74
00:04:16,465 --> 00:04:19,567
ナッジの観点からもう一度考えてみましょう。

75
00:04:19,567 --> 00:04:21,702
この場合、グラ フは物事を視覚化す

76
00:04:21,702 --> 00:04:23,837
るのに最善の策ではないと思います。

77
00:04:23,837 --> 00:04:27,557
数学ではよくあることで すが、多くのレベルの数学では、2

78
00:04:27,557 --> 00:04:30,251
つのものの積を扱う場合、それをある種の領

79
00:04:30,251 --> 00:04:32,303
域として理解するのに役立ちます。

80
00:04:32,303 --> 00:04:35,538
この場合、辺の長さが x の正弦および x の 2

81
00:04:35,538 --> 00:04:39,146
乗であるボックスの精神的な設定を構成しようとすると考えられ

82
00:04:39,146 --> 00:04:39,520
ます。

83
00:04:39,520 --> 00:04:41,145
しかし、それは何を意味する のでしょうか？

84
00:04:41,145 --> 00:04:44,965
これらは関数であるため、x の値に応じてこれらの側面

85
00:04:44,965 --> 00:04:47,756
を調整できる と考えるかもしれません。

86
00:04:47,756 --> 00:04:51,429
x は単に上下に自由に調整できる数値であると考

87
00:04:51,429 --> 00:04:52,898
えるかもしれません。

88
00:04:52,898 --> 00:04:56,435
これが何を意味するのかを理解するには、x

89
00:04:56,435 --> 00:05:00,646
の関数正弦として 変化する上側に注目してください。

90
00:05:00,646 --> 00:05:04,584
この x の値を 0 から変更すると、x の正弦

91
00:05:04,584 --> 00:05:08,050
がピークに向かって上昇するにつれて長さ 1

92
00:05:08,050 --> 00:05:11,044
まで増加し、その後、x の正弦が 1

93
00:05:11,044 --> 00:05:13,880
から下降するにつれて減少し始めます。

94
00:05:13,880 --> 00:05:16,583
そして同じように、その高さは常に

95
00:05:16,583 --> 00:05:19,128
x の 2 乗として変化します。

96
00:05:19,128 --> 00:05:22,557
したがって、これら 2 つの関数の積として定義される

97
00:05:22,557 --> 00:05:25,478
x の f は、このボックスの面積になります。

98
00:05:25,478 --> 00:05:29,291
そして導関数については、dx による x への小さな変更が

99
00:05:29,291 --> 00:05:32,722
その領域にどのような影響を与えるかを考えてみましょう。

100
00:05:32,722 --> 00:05:39,960
その結果、DFエリアにどのような変化が生じたのでしょうか？

101
00:05:39,960 --> 00:05:44,034
dx を微調整すると、その幅が x の小さな d

102
00:05:44,034 --> 00:05:48,761
サインだけ変化し、高さが dx の 2 乗だけ変化します。

103
00:05:48,761 --> 00:05:52,661
これにより、新しい領域の 3 つの小さなスニペッ

104
00:05:52,661 --> 00:05:56,561
トが得られます。 下部の薄い長方形の面積は、幅と

105
00:05:56,561 --> 00:06:01,241
x の正弦に、薄い高さの dx の 2 乗を掛けたものです。

106
00:06:01,241 --> 00:06:05,610
右側の薄い長方形の面積は、高さの x の 2 乗です。

107
00:06:05,610 --> 00:06:09,354
その細い 幅に x の d サインを掛けます。

108
00:06:09,354 --> 00:06:14,575
隅にこれも少しありますが、それは無視 して構いません。

109
00:06:14,575 --> 00:06:17,451
その面積は最終的には dx の 2

110
00:06:17,451 --> 00:06:20,805
乗に比例し、これ までに見たように、dx

111
00:06:20,805 --> 00:06:24,320
が 0 に近づくと無視できるほどになります。

112
00:06:24,320 --> 00:06:27,058
このセットアップ全体は、前回のビデオで示した

113
00:06:27,058 --> 00:06:29,440
x の 2 乗図と非常によく似ています。

114
00:06:29,440 --> 00:06:32,798
そして、その時と同じように、ここでも実際に見えるように

115
00:06:32,798 --> 00:06:35,161
描画するために多少大胆な変更を使用し

116
00:06:35,161 --> 00:06:38,768
ていることに注意してください。 しかし、原則として、dx

117
00:06:38,768 --> 00:06:42,251
は非常に非常に小さいものであり、 つまり、x の dx

118
00:06:42,251 --> 00:06:45,484
2 乗と d サインも非常に小さいことを意味します。

119
00:06:45,484 --> 00:06:46,480
非常に少ない。

120
00:06:46,480 --> 00:06:48,867
したがって、サインと x の 2

121
00:06:48,867 --> 00:06:53,079
乗の微分について私たちが知っていることを適用すると、その小

122
00:06:53,079 --> 00:06:56,450
さな変化 dx の 2 乗は dx の約 2x

123
00:06:56,450 --> 00:07:00,101
倍になり、x の小さな変化 d サインは dx の

124
00:07:00,101 --> 00:07:02,067
x 倍のコサインになります。

125
00:07:02,067 --> 00:07:06,711
いつものように、dx で割って、必要な比率 (df を

126
00:07:06,711 --> 00:07:09,697
dx で割った値) が、x の 2

127
00:07:09,697 --> 00:07:13,346
乗微分の正弦と、sine の微分の x 2

128
00:07:13,346 --> 00:07:16,498
乗を加えたものであることを確認します。

129
00:07:16,498 --> 00:07:18,733
ここで行ったことは、サインまたは x

130
00:07:18,733 --> 00:07:21,085
の 2 乗に 固有のものではありません。

131
00:07:21,085 --> 00:07:23,251
これと同じ推論が、任意の 2 つの関数

132
00:07:23,251 --> 00:07:25,200
g と h に対しても機 能します。

133
00:07:25,200 --> 00:07:28,991
そして時々、このパターンを頭の中で「左、右、

134
00:07:28,991 --> 00:07:33,605
右、左」と歌うような記憶術で覚えようとする人がいま す。

135
00:07:33,605 --> 00:07:35,746
この例では、x の正弦に x の 2

136
00:07:35,746 --> 00:07:38,451
乗を乗じた値があり、left d rig ht

137
00:07:38,451 --> 00:07:40,367
ということは、左の関数である x

138
00:07:40,367 --> 00:07:43,184
の正弦に右の導関数を掛けたもの (この場合は 2

139
00:07:43,184 --> 00:07:44,875
x) を取ることを意味します。

140
00:07:44,875 --> 00:07:48,241
次に、右 d 左に、その右の関数 x の 2

141
00:07:48,241 --> 00:07:51,901
乗を加算し、左の関数の導関数 (x のコサイン)

142
00:07:51,901 --> 00:07:52,780
を掛けます。

143
00:07:52,780 --> 00:07:56,370
文脈を無視して、覚えておくべきルールとして提示

144
00:07:56,370 --> 00:07:59,961
されると、かなり奇妙に感じられると思いますね。

145
00:07:59,961 --> 00:08:03,062
しかし、実際にこの調整可能なボックスについて考えると

146
00:08:03,062 --> 00:08:06,163
、これらの各用語が何を表しているのかがわ かります。

147
00:08:06,163 --> 00:08:11,896
左 d 右はその小さな底の長方形の面積であり、右

148
00:08:11,896 --> 00:08:16,253
d 左は その長方形の側面の面積です。

149
00:08:16,253 --> 00:08:21,469
ところで、定数を掛けると、たとえば x の正弦を 2

150
00:08:21,469 --> 00:08:26,684
倍すると、物事はずっと単純になることを言っておきます。

151
00:08:26,684 --> 00:08:30,594
微分値は、定数に関数 の微分値を乗算したものとまった

152
00:08:30,594 --> 00:08:34,653
く同じです。 この場合、x のコサインの 2 倍です。

153
00:08:34,653 --> 00:08:37,244
立ち止まって熟考し、それが理にかなっているか

154
00:08:37,244 --> 00:08:39,834
どうかを検証するのはあなたにお任せ します。

155
00:08:39,834 --> 00:08:43,537
加算と乗算のほかに、関数を組み合わせるもう 1

156
00:08:43,537 --> 00:08:47,703
つの一般的 な方法は、信じてください、これは常に登場し

157
00:08:47,703 --> 00:08:51,870
ますが、一方をもう一 方の中に押し込む、つまり関数の合

158
00:08:51,870 --> 00:08:52,487
成です。

159
00:08:52,487 --> 00:08:55,372
たとえば、関数 x の 2 乗を取 得し、それを

160
00:08:55,372 --> 00:08:57,912
x の正弦の内側に押し込み、この新しい関数

161
00:08:57,912 --> 00:09:00,682
x の 2 乗の正弦を取得するか もしれません。

162
00:09:00,682 --> 00:09:05,540
その新しい関数の派生関数は何だと思いますか?

163
00:09:05,540 --> 00:09:07,979
これをじっくり考えるために、創造的な数学には

164
00:09:07,979 --> 00:09:10,530
たくさんの選択肢があることを強調するために、

165
00:09:10,530 --> 00:09:12,970
物事を視覚化するさらに別の方法を選択します。

166
00:09:12,970 --> 00:09:15,113
3 つの異なる数直線を用意します。

167
00:09:15,113 --> 00:09:18,643
一番上の 直線は x の値を保持し、2 番目の直線は

168
00:09:18,643 --> 00:09:21,795
x の 2 乗の値を保持し、3 番目の直線は x

169
00:09:21,795 --> 00:09:24,695
の 2 乗の正弦の値、つまり関数を保持します。

170
00:09:24,695 --> 00:09:27,595
x 2 乗を使用すると 1 行目 から 2

171
00:09:27,595 --> 00:09:30,874
行目まで移動でき、関数 sine を使用すると 2

172
00:09:30,874 --> 00:09:33,269
行目から 3 行目まで移動 できます。

173
00:09:33,269 --> 00:09:37,299
この x の値を中心にシフトし、おそらく値 3

174
00:09:37,299 --> 00:09:41,160
まで移動すると 、2 番目の値は x の 2

175
00:09:41,160 --> 00:09:44,686
乗に固定されたままになり、この場合は 9

176
00:09:44,686 --> 00:09:49,555
まで移動し、その下の値は x の 2 乗の正弦になります。

177
00:09:49,555 --> 00:09:53,417
9 の正弦 がたまたまあるものに移動します。

178
00:09:53,417 --> 00:09:57,113
したがって、導関数については、その x 値を少し

179
00:09:57,113 --> 00:10:00,514
dx だけ微調整することから再び始めましょう。

180
00:10:00,514 --> 00:10:04,444
私はいつも、x が実際の具体的な数値 (おそ らく 1)

181
00:10:04,444 --> 00:10:08,239
から始まると考えると役立つと思います。この場合は5です。

182
00:10:08,239 --> 00:10:11,895
結果として生じる 2 番 目の値へのナッジ、つまり

183
00:10:11,895 --> 00:10:14,849
dx によって引き起こされる x の 2

184
00:10:14,849 --> 00:10:17,240
乗の変化は、dx の 2 乗です。

185
00:10:17,240 --> 00:10:20,364
これを 2x x dx として拡張できます。

186
00:10:20,364 --> 00:10:23,915
これは、特定の入力では 2 x 1 になります。

187
00:10:23,915 --> 00:10:27,893
d x の 5 倍ですが、少なくとも現時点では、物事を

188
00:10:27,893 --> 00:10:31,160
dx の 2 乗として記述するのに役立ちます。

189
00:10:31,160 --> 00:10:34,408
実際、さらに一歩進んで、この x の 2

190
00:10:34,408 --> 00:10:37,037
乗に新しい名前 (おそらく h)

191
00:10:37,037 --> 00:10:41,368
を付けて、このナッジに対して dx 二乗と書く代わりに

192
00:10:41,368 --> 00:10:42,760
dh と書きます。

193
00:10:42,760 --> 00:10:45,312
これにより、h の正弦に固定される 3

194
00:10:45,312 --> 00:10:48,120
番目の値について考えることが容易になります。

195
00:10:48,120 --> 00:10:51,640
その変化は h の d サイン、つまり dh

196
00:10:51,640 --> 00:10:55,160
のナッジによって引き起こされる小さな変化です。

197
00:10:55,160 --> 00:10:58,487
ちなみに、dh バンプが右に移動しているのに左に

198
00:10:58,487 --> 00:11:01,675
移動しているという事 実は、この変化、h の

199
00:11:01,675 --> 00:11:05,280
d サインが何らかの負の数になることを意味 します。

200
00:11:05,280 --> 00:11:08,787
もう一度、サインの導関数に関する知識を活用する

201
00:11:08,787 --> 00:11:09,956
ことができます。

202
00:11:09,956 --> 00:11:11,626
この h の d サインは、h

203
00:11:11,626 --> 00:11:14,027
のコサインに dh を掛 けたものになります。

204
00:11:14,027 --> 00:11:18,323
これが、サインの導関数がコサインになるこ とを意味します。

205
00:11:18,323 --> 00:11:20,579
物事を展開すると、h を x の 2

206
00:11:20,579 --> 00:11:23,311
乗に再度置き換えることが できるため、一番下の

207
00:11:23,311 --> 00:11:26,043
ナッジのコサインのサイズが x の 2 乗に

208
00:11:26,043 --> 00:11:29,250
dx の 2 乗を掛 けたものになることがわかります。

209
00:11:29,250 --> 00:11:33,080
実際、物事をさらに展開してみましょう。

210
00:11:33,080 --> 00:11:37,280
その中間ナッジ dx の 2 乗は、dx

211
00:11:37,280 --> 00:11:39,680
の約 2 倍になります。

212
00:11:39,680 --> 00:11:42,060
このような表現が実際に何を意味するの

213
00:11:42,060 --> 00:11:44,440
かを思い出すことは常に良い習慣です。

214
00:11:44,440 --> 00:11:49,163
この場合、x から開始した場所は 1 に等しくなります。

215
00:11:49,163 --> 00:11:52,367
上の 5 では、この式全体が、3 行

216
00:11:52,367 --> 00:11:56,753
目のナッジのサイズが約 1 のコサインになることを示

217
00:11:56,753 --> 00:11:59,452
しています。5の2 乗×2×1。

218
00:11:59,452 --> 00:12:02,320
dx のサイズに関係なく 5 倍。

219
00:12:02,320 --> 00:12:05,384
これは dx のサイズに比例し、この導

220
00:12:05,384 --> 00:12:08,449
関数によりその比例定数が得 られます。

221
00:12:08,449 --> 00:12:13,080
ここで何が判明したかに注目してください。

222
00:12:13,080 --> 00:12:17,434
外側の関数の導関数があり、それは依然とし

223
00:12:17,434 --> 00:12:21,789
て変更されていない内側 の関数を取り込み

224
00:12:21,789 --> 00:12:26,580
、それをその内側の関数の導関数で乗算します。

225
00:12:26,580 --> 00:12:28,087
x の正弦または x の 2 乗に

226
00:12:28,087 --> 00:12:29,684
ついては特別なことは何もありません。

227
00:12:29,684 --> 00:12:33,773
x の g と x の h と いう 2

228
00:12:33,773 --> 00:12:38,252
つの関数がある場合、それらの合成の導関数、g

229
00:12:38,252 --> 00:12:42,731
of h of x は、h で評価された g

230
00:12:42,731 --> 00:12:47,600
の導関数に h の導関数を乗算したものになります。

231
00:12:47,600 --> 00:12:52,660
このパターンは、通常、連鎖規則と呼ばれるものです。

232
00:12:52,660 --> 00:12:56,373
gの導関数については、dg dxではなくdg

233
00:12:56,373 --> 00:12:57,988
dhと書いています。

234
00:12:57,988 --> 00:13:01,897
記号レベルでは 、これは導関数に接続するものは依然

235
00:13:01,897 --> 00:13:05,806
として中間関数 h であるこ とを思い出させます。

236
00:13:05,806 --> 00:13:08,818
しかしそれ以上に、これは外部関数の導

237
00:13:08,818 --> 00:13:13,100
関数が実際に何を表しているのかを反映する重要な点です。

238
00:13:13,100 --> 00:13:16,803
3 つのラインの設定で、その底部のサインの導関数を取得したと

239
00:13:16,803 --> 00:13:20,384
きに、そのナッジのサイズ d sine を h と dh

240
00:13:20,384 --> 00:13:24,088
の掛け合わせのコサインとして拡張したことを思い出してください

241
00:13:24,088 --> 00:13:24,211
。

242
00:13:24,211 --> 00:13:27,921
これは、その下部ナ ッジのサイズが x

243
00:13:27,921 --> 00:13:33,300
にどのように依存するのかがすぐには分からなかったためです。

244
00:13:33,300 --> 00:13:38,248
しかし、中間変数 h に関して導関数を求めることはできます。

245
00:13:38,248 --> 00:13:40,967
つまり、 3 行目のナッジのサイズを、2

246
00:13:40,967 --> 00:13:43,685
行目のナッジのサイズである dh の倍数

247
00:13:43,685 --> 00:13:45,886
として表現する方法を考え出します。

248
00:13:45,886 --> 00:13:49,739
その後、dh が何である かを理解

249
00:13:49,739 --> 00:13:53,820
することでさらに展開が始まりました。

250
00:13:53,820 --> 00:13:56,352
この連鎖ルール式では、最終出力である g

251
00:13:56,352 --> 00:13:59,006
の小さな変化と、それを引き起こした h の

252
00:13:59,006 --> 00:14:02,022
小さな変化との比率を調べてください (h は g

253
00:14:02,022 --> 00:14:04,313
に代入する値です) と言っていま す。

254
00:14:04,313 --> 00:14:08,817
次に、それに h の小さな変化を掛け、それを引き起こした

255
00:14:08,817 --> 00:14:11,146
x の小さな変化で割 ります。

256
00:14:11,146 --> 00:14:15,317
これらの dh が相殺され、最終的な出力の変化と

257
00:14:15,317 --> 00:14:19,822
、特定の一連のイベントによってそれがもたらされた入力

258
00:14:19,822 --> 00:14:24,160
の変化との間の比率が得られることに注意してください。

259
00:14:24,160 --> 00:14:28,406
dh の取り消しは単なる表記上のトリックではなく、

260
00:14:28,406 --> 00:14:32,653
私たちがデリバティブで行う すべてのことを支える小

261
00:14:32,653 --> 00:14:37,240
さなナッジで何が起こっているかを純粋に反映しています。

262
00:14:37,240 --> 00:14:40,381
これらは、多くの小さなものを組み合わせた関数の派生関数を

263
00:14:40,381 --> 00:14:43,522
処理するために備えてお くべき 3 つの基本ツールです。

264
00:14:43,522 --> 00:14:48,720
合計ルール、積ルー ル、連鎖ルールがあります。

265
00:14:48,720 --> 00:14:52,111
正直に言うと、連鎖ルールと積ルールが何であるかを知

266
00:14:52,111 --> 00:14:55,503
っていることと 、実際にそれらを最も困難な状況にさ

267
00:14:55,503 --> 00:14:59,166
え流暢に適用できることの間に は大きな違いがあります。

268
00:14:59,166 --> 00:15:02,624
微積分の仕組みに関するビデオを視聴するこ

269
00:15:02,624 --> 00:15:06,413
とは、微積分の仕組みを自分で練習し、計算を行う

270
00:15:06,413 --> 00:15:10,695
ための筋肉を鍛える ことに代わるものではありません。

271
00:15:10,695 --> 00:15:13,210
あなたの代わりにそうすることを提案できれば

272
00:15:13,210 --> 00:15:15,725
本当によかったのですが、残念ながらボールはあ

273
00:15:15,725 --> 00:15:18,240
なたのコートにあり、練習を求めているのです。

274
00:15:18,240 --> 00:15:20,854
私が提供できること、そして提供できればと願っていることは

275
00:15:20,854 --> 00:15:23,562
、これらのルールが実際にどこから来たのかを示す ことです。

276
00:15:23,562 --> 00:15:26,368
これらは単に暗記して叩き込むべきものではなく、自然

277
00:15:26,368 --> 00:15:29,498
なパターンであり、派生語が実際に何を意味するのかを辛抱強

278
00:15:29,498 --> 00:15:32,520
く考え抜くだけで発見できるものであることを示すためです。

