1
00:00:14,499 --> 00:00:18,399
前回のビデオでは、単純な関数の導関数について説明しました

2
00:00:18,399 --> 00:00:22,299
が、その目標は、これら の公式がどこから来たのかを実際に

3
00:00:22,299 --> 00:00:26,200
説明する明確なイメージや直感を頭の中に持つこと でした。

4
00:00:26,840 --> 00:00:30,172
しかし、世界をモデル化する際に扱う関数のほとんどは、こ

5
00:00:30,172 --> 00:00:33,504
れらの単純な関数を 別の方法で混合、組み合わせ、または

6
00:00:33,504 --> 00:00:36,590
微調整することを伴うため、次のステップは、より複 

7
00:00:36,590 --> 00:00:39,922
雑な組み合わせの導関数をどのように取得するかを理解する

8
00:00:39,922 --> 00:00:40,540
ことです。

9
00:00:41,280 --> 00:00:44,105
繰り返しに なりますが、これらを暗記する

10
00:00:44,105 --> 00:00:46,931
ものではなく、それぞれがどこ から来たの

11
00:00:46,931 --> 00:00:50,040
かを明確に頭の中に持っておいてほしいのです。

12
00:00:50,340 --> 00:00:51,970
これは、関数を組み合わせる 3 

13
00:00:51,970 --> 00:00:53,600
つの基本的な方法に要約されます。

14
00:00:54,100 --> 00:00:56,886
それらを加算したり、乗算 したり、一方をもう一方の中

15
00:00:56,886 --> 00:00:59,780
に入れることもできます (これを「合成」といいます)。

16
00:01:00,600 --> 00:01:03,681
確かに、減算すると言うこともできますが、実際には、2 

17
00:01:03,681 --> 00:01:06,991
番目の値にマイナスの 1 を掛けて、それらを加算するだけで

18
00:01:06,991 --> 00:01:07,220
す。

19
00:01:08,240 --> 00:01:11,480
同様に、関数を除算しても実際に は何も加算されません。

20
00:01:11,480 --> 00:01:13,880
 これは、関数内の 1 を x に 1 

21
00:01:13,880 --> 00:01:16,760
に接続して、2 つを乗算するのと同じだからです。

22
00:01:17,660 --> 00:01:20,284
つまり、実際のところ、遭遇するほとんどの関数には、これら 

23
00:01:20,284 --> 00:01:21,914
3 つの異なるタイプの組み合わせを 

24
00:01:21,914 --> 00:01:24,086
重ね合わせることが含まれていますが、どの程度巨大

25
00:01:24,086 --> 00:01:26,440
なものになるかについては実際には制限がありま せん。

26
00:01:27,100 --> 00:01:31,058
しかし、これら 3 つの組み合わせタイプだけでデリバティブ 

27
00:01:31,058 --> 00:01:34,093
がどのように機能するかを知っていれば、いつでも

28
00:01:34,093 --> 00:01:37,128
段階的に実行して 、あらゆる種類の巨大な表現の

29
00:01:37,128 --> 00:01:39,240
レイヤーを剥がすことができます。

30
00:01:39,240 --> 00:01:43,988
問題は、2 つの関数の導関数がわかっている場合、それらの和 

31
00:01:43,988 --> 00:01:48,420
、積、およびそれらの間の関数合成の導関数は何でしょうか?

32
00:01:50,320 --> 00:01:52,290
声を大にして言うのは少々ややこしい

33
00:01:52,290 --> 00:01:54,260
ですが、合計ルールが最も簡単です。

34
00:01:54,840 --> 00:01:58,600
2 つの関数の合計の導 関数は、それらの導関数の合計です。

35
00:01:59,800 --> 00:02:02,122
ただし、積と関数合成の導関数パ 

36
00:02:02,122 --> 00:02:06,040
ターンはそれほど単純ではなく、この種の関数が必要になる

37
00:02:06,040 --> 00:02:09,959
ため、2 つの関数の和の導関数を取ることが何を意味する

38
00:02:09,959 --> 00:02:13,878
のかをよく考え て、この例でウォームアップする価値があ

39
00:02:13,878 --> 00:02:15,620
ります。 より深い思考。

40
00:02:16,700 --> 00:02:18,910
たとえば、x の関数 f が x の正弦に x の 2 

41
00:02:18,910 --> 00:02:21,200
乗を加えたものに等しいという関数について考えてみましょう。

42
00:02:22,200 --> 00:02:25,399
これは 、入力ごとに、x の正弦値とその時点での 

43
00:02:25,399 --> 00:02:27,960
x の 2 乗の値を加算する 関数です。

44
00:02:29,760 --> 00:02:33,042
たとえば、x が 0 に等しいとします。

45
00:02:33,042 --> 00:02:37,308
図５において、正弦グラフの高 さはこの縦棒によって与

46
00:02:37,308 --> 00:02:41,411
えられ、ｘ二乗放物線の高さはこの小さな縦棒によっ 

47
00:02:41,411 --> 00:02:42,560
て与えられる。

48
00:02:44,380 --> 00:02:45,850
そして、それらの合計は、それらを積み

49
00:02:45,850 --> 00:02:47,320
重ねるだけで得られる長さになります。

50
00:02:48,520 --> 00:02:52,031
導関数の場合、その入力をわずかに微調整すると、おそらく 

51
00:02:52,031 --> 00:02:55,542
0 まで増加すると何が起こるかを尋ねる必要が あります。

52
00:02:55,542 --> 00:02:56,420
5プラスDX。

53
00:02:57,560 --> 00:03:02,920
これら 2 つの場所の f の値の差を df と呼び ます。

54
00:03:04,360 --> 00:03:07,970
そして、このようにイメージすると、高さの合計の変化は、正

55
00:03:07,970 --> 00:03:10,548
弦グラフの変 化が何であれ、x の d 

56
00:03:10,548 --> 00:03:13,900
サインと呼ぶものに、x の 2 乗に対する変化を加 

57
00:03:13,900 --> 00:03:17,510
えたもの、つまり dx であることに同意していただけると

58
00:03:17,510 --> 00:03:18,800
思います。 四角い。

59
00:03:22,240 --> 00:03:24,831
ここで、サインの導関数がコサインであることが

60
00:03:24,831 --> 00:03:27,540
わかり、それが何を意味するかを思い出しました。

61
00:03:27,920 --> 00:03:30,702
これは、この小 さな変化、つまり x の d サインが、x 

62
00:03:30,702 --> 00:03:33,300
のコサインに dx を掛けたものであることを意味します。

63
00:03:33,780 --> 00:03:38,472
これは最初のナ ッジ dx のサイズに比例し、比

64
00:03:38,472 --> 00:03:43,360
例定数は開始した入力のコサイン に等しくなります。

65
00:03:43,980 --> 00:03:47,141
同様に、x の 2 乗の導関数は 2x 

66
00:03:47,141 --> 00:03:51,568
であるため、 x の 2 乗グラフの高さの変化は、dx 

67
00:03:51,568 --> 00:03:53,940
が何であれ 2 倍になります。

68
00:03:55,600 --> 00:03:59,220
したがって、df を dx で割って並べ替えると、この

69
00:03:59,220 --> 00:04:02,705
合計関数に対する小さな変化と、それを引き起 こした 

70
00:04:02,705 --> 00:04:06,460
x の小さな変化の比は、確かに x のコサインに 2x 

71
00:04:06,460 --> 00:04:10,080
を加えたもの、つまり各部分の導関 数の合計になります。

72
00:04:11,520 --> 00:04:14,060
しかし、先ほども言いましたが、製品の場合は

73
00:04:14,060 --> 00:04:16,600
少し事情が異なりま す。 その理由を小さな

74
00:04:16,600 --> 00:04:19,140
ナッジの観点からもう一度考えてみましょう。

75
00:04:20,060 --> 00:04:21,600
この場合、グラ フは物事を視覚化す

76
00:04:21,600 --> 00:04:23,140
るのに最善の策ではないと思います。

77
00:04:23,820 --> 00:04:27,475
数学ではよくあることで すが、多くのレベルの数学では、2 

78
00:04:27,475 --> 00:04:30,123
つのものの積を扱う場合、それをある種の領 

79
00:04:30,123 --> 00:04:32,140
域として理解するのに役立ちます。

80
00:04:33,080 --> 00:04:35,733
この場合、辺の長さが x の正弦および x の 2 

81
00:04:35,733 --> 00:04:38,693
乗であるボックスの精神的な設定を構成しようとすると考えられ

82
00:04:38,693 --> 00:04:39,000
ます。

83
00:04:39,880 --> 00:04:41,040
しかし、それは何を意味する のでしょうか？

84
00:04:42,320 --> 00:04:45,706
これらは関数であるため、x の値に応じてこれらの側面

85
00:04:45,706 --> 00:04:48,181
を調整できる と考えるかもしれません。

86
00:04:48,181 --> 00:04:51,437
 x は単に上下に自由に調整できる数値であると考 

87
00:04:51,437 --> 00:04:52,740
えるかもしれません。

88
00:04:53,740 --> 00:04:56,661
これが何を意味するのかを理解するには、x 

89
00:04:56,661 --> 00:05:00,140
の関数正弦として 変化する上側に注目してください。

90
00:05:01,060 --> 00:05:04,893
この x の値を 0 から変更すると、x の正弦 

91
00:05:04,893 --> 00:05:08,266
がピークに向かって上昇するにつれて長さ 1 

92
00:05:08,266 --> 00:05:11,180
まで増加し、その後、x の正弦が 1 

93
00:05:11,180 --> 00:05:13,940
から下降するにつれて減少し始めます。

94
00:05:15,100 --> 00:05:16,892
そして同じように、その高さは常に 

95
00:05:16,892 --> 00:05:18,580
x の 2 乗として変化します。

96
00:05:20,080 --> 00:05:23,168
したがって、これら 2 つの関数の積として定義される 

97
00:05:23,168 --> 00:05:25,800
x の f は、このボックスの面積になります。

98
00:05:27,060 --> 00:05:30,281
そして導関数については、dx による x への小さな変更が 

99
00:05:30,281 --> 00:05:33,180
その領域にどのような影響を与えるかを考えてみましょう。

100
00:05:33,840 --> 00:05:39,640
その結果、DFエリアにどのような変化が生じたのでしょうか？

101
00:05:39,940 --> 00:05:44,977
dx を微調整すると、その幅が x の小さな d 

102
00:05:44,977 --> 00:05:50,820
サインだけ変化し、高さが dx の 2 乗だけ変化します。

103
00:05:50,820 --> 00:05:54,630
これにより、新しい領域の 3 つの小さなスニペッ 

104
00:05:54,630 --> 00:05:58,441
トが得られます。 下部の薄い長方形の面積は、幅と 

105
00:05:58,441 --> 00:06:03,013
x の正弦に、薄い高さの dx の 2 乗を掛けたものです。

106
00:06:03,013 --> 00:06:07,281
 右側の薄い長方形の面積は、高さの x の 2 乗です。

107
00:06:07,281 --> 00:06:10,940
 その細い 幅に x の d サインを掛けます。

108
00:06:10,940 --> 00:06:14,140
隅にこれも少しありますが、それは無視 して構いません。

109
00:06:14,440 --> 00:06:17,314
その面積は最終的には dx の 2 

110
00:06:17,314 --> 00:06:20,667
乗に比例し、これ までに見たように、dx 

111
00:06:20,667 --> 00:06:24,180
が 0 に近づくと無視できるほどになります。

112
00:06:24,260 --> 00:06:26,634
このセットアップ全体は、前回のビデオで示した 

113
00:06:26,634 --> 00:06:28,700
x の 2 乗図と非常によく似ています。

114
00:06:29,460 --> 00:06:32,826
そして、その時と同じように、ここでも実際に見えるように

115
00:06:32,826 --> 00:06:35,194
描画するために多少大胆な変更を使用し 

116
00:06:35,194 --> 00:06:38,810
ていることに注意してください。 しかし、原則として、dx 

117
00:06:38,810 --> 00:06:42,301
は非常に非常に小さいものであり、 つまり、x の dx 

118
00:06:42,301 --> 00:06:45,542
2 乗と d サインも非常に小さいことを意味します。

119
00:06:45,542 --> 00:06:46,540
 非常に少ない。

120
00:06:46,880 --> 00:06:49,131
したがって、サインと x の 2 

121
00:06:49,131 --> 00:06:53,104
乗の微分について私たちが知っていることを適用すると、その小 

122
00:06:53,104 --> 00:06:56,282
さな変化 dx の 2 乗は dx の約 2x 

123
00:06:56,282 --> 00:06:59,725
倍になり、x の小さな変化 d サインは dx の 

124
00:06:59,725 --> 00:07:01,580
x 倍のコサインになります。

125
00:07:02,920 --> 00:07:07,033
いつものように、dx で割って、必要な比率 (df を 

126
00:07:07,033 --> 00:07:09,677
dx で割った値) が、x の 2 

127
00:07:09,677 --> 00:07:12,908
乗微分の正弦と、sine の微分の x 2 

128
00:07:12,908 --> 00:07:15,700
乗を加えたものであることを確認します。

129
00:07:17,960 --> 00:07:19,567
ここで行ったことは、サインまたは x 

130
00:07:19,567 --> 00:07:21,260
の 2 乗に 固有のものではありません。

131
00:07:21,580 --> 00:07:23,569
これと同じ推論が、任意の 2 つの関数 

132
00:07:23,569 --> 00:07:25,360
g と h に対しても機 能します。

133
00:07:27,000 --> 00:07:30,012
そして時々、このパターンを頭の中で「左、右、 

134
00:07:30,012 --> 00:07:33,680
右、左」と歌うような記憶術で覚えようとする人がいま す。

135
00:07:34,400 --> 00:07:36,368
この例では、x の正弦に x の 2 

136
00:07:36,368 --> 00:07:38,854
乗を乗じた値があり、left d rig ht 

137
00:07:38,854 --> 00:07:40,616
ということは、左の関数である x 

138
00:07:40,616 --> 00:07:43,206
の正弦に右の導関数を掛けたもの (この場合は 2 

139
00:07:43,206 --> 00:07:44,760
x) を取ることを意味します。

140
00:07:45,480 --> 00:07:49,330
次に、右 d 左に、その右の関数 x の 2 

141
00:07:49,330 --> 00:07:53,515
乗を加算し、左の関数の導関数 (x のコサイン) 

142
00:07:53,515 --> 00:07:54,520
を掛けます。

143
00:07:54,520 --> 00:07:57,270
文脈を無視して、覚えておくべきルールとして提示

144
00:07:57,270 --> 00:08:00,020
されると、かなり奇妙に感じられると思いますね。

145
00:08:00,740 --> 00:08:03,280
しかし、実際にこの調整可能なボックスについて考えると

146
00:08:03,280 --> 00:08:05,820
、これらの各用語が何を表しているのかがわ かります。

147
00:08:06,580 --> 00:08:11,614
左 d 右はその小さな底の長方形の面積であり、右 

148
00:08:11,614 --> 00:08:15,440
d 左は その長方形の側面の面積です。

149
00:08:20,160 --> 00:08:23,450
ところで、定数を掛けると、たとえば x の正弦を 2 

150
00:08:23,450 --> 00:08:26,740
倍すると、物事はずっと単純になることを言っておきます。

151
00:08:27,400 --> 00:08:30,892
微分値は、定数に関数 の微分値を乗算したものとまった

152
00:08:30,892 --> 00:08:34,520
く同じです。 この場合、x のコサインの 2 倍です。

153
00:08:35,559 --> 00:08:37,869
立ち止まって熟考し、それが理にかなっているか

154
00:08:37,869 --> 00:08:40,179
どうかを検証するのはあなたにお任せ します。

155
00:08:41,920 --> 00:08:44,946
加算と乗算のほかに、関数を組み合わせるもう 1 

156
00:08:44,946 --> 00:08:48,350
つの一般的 な方法は、信じてください、これは常に登場し

157
00:08:48,350 --> 00:08:51,755
ますが、一方をもう一 方の中に押し込む、つまり関数の合

158
00:08:51,755 --> 00:08:52,260
成です。

159
00:08:53,220 --> 00:08:55,769
たとえば、関数 x の 2 乗を取 得し、それを 

160
00:08:55,769 --> 00:08:58,012
x の正弦の内側に押し込み、この新しい関数 

161
00:08:58,012 --> 00:09:00,460
x の 2 乗の正弦を取得するか もしれません。

162
00:09:01,400 --> 00:09:04,080
その新しい関数の派生関数は何だと思いますか?

163
00:09:05,300 --> 00:09:07,677
これをじっくり考えるために、創造的な数学には

164
00:09:07,677 --> 00:09:10,162
たくさんの選択肢があることを強調するために、 

165
00:09:10,162 --> 00:09:12,540
物事を視覚化するさらに別の方法を選択します。

166
00:09:13,320 --> 00:09:15,391
3 つの異なる数直線を用意します。

167
00:09:15,391 --> 00:09:18,803
 一番上の 直線は x の値を保持し、2 番目の直線は 

168
00:09:18,803 --> 00:09:21,850
x の 2 乗の値を保持し、3 番目の直線は x 

169
00:09:21,850 --> 00:09:24,653
の 2 乗の正弦の値、つまり関数を保持します。

170
00:09:24,653 --> 00:09:27,456
 x 2 乗を使用すると 1 行目 から 2 

171
00:09:27,456 --> 00:09:30,624
行目まで移動でき、関数 sine を使用すると 2 

172
00:09:30,624 --> 00:09:32,940
行目から 3 行目まで移動 できます。

173
00:09:32,940 --> 00:09:36,868
この x の値を中心にシフトし、おそらく値 3 

174
00:09:36,868 --> 00:09:40,632
まで移動すると 、2 番目の値は x の 2 

175
00:09:40,632 --> 00:09:44,069
乗に固定されたままになり、この場合は 9 

176
00:09:44,069 --> 00:09:48,815
まで移動し、その下の値は x の 2 乗の正弦になります。

177
00:09:48,815 --> 00:09:52,580
 9 の正弦 がたまたまあるものに移動します。

178
00:09:54,900 --> 00:09:57,764
したがって、導関数については、その x 値を少し 

179
00:09:57,764 --> 00:10:00,400
dx だけ微調整することから再び始めましょう。

180
00:10:01,540 --> 00:10:04,745
私はいつも、x が実際の具体的な数値 (おそ らく 1) 

181
00:10:04,745 --> 00:10:07,840
から始まると考えると役立つと思います。この場合は5です。

182
00:10:08,760 --> 00:10:12,619
結果として生じる 2 番 目の値へのナッジ、つまり 

183
00:10:12,619 --> 00:10:15,736
dx によって引き起こされる x の 2 

184
00:10:15,736 --> 00:10:18,260
乗の変化は、dx の 2 乗です。

185
00:10:18,260 --> 00:10:20,846
これを 2x x dx として拡張できます。

186
00:10:20,846 --> 00:10:23,784
 これは、特定の入力では 2 x 1 になります。

187
00:10:23,784 --> 00:10:27,076
d x の 5 倍ですが、少なくとも現時点では、物事を 

188
00:10:27,076 --> 00:10:29,780
dx の 2 乗として記述するのに役立ちます。

189
00:10:29,780 --> 00:10:32,977
実際、さらに一歩進んで、この x の 2 

190
00:10:32,977 --> 00:10:35,566
乗に新しい名前 (おそらく h) 

191
00:10:35,566 --> 00:10:39,829
を付けて、このナッジに対して dx 二乗と書く代わりに 

192
00:10:39,829 --> 00:10:41,200
dh と書きます。

193
00:10:42,620 --> 00:10:44,829
これにより、h の正弦に固定される 3 

194
00:10:44,829 --> 00:10:47,260
番目の値について考えることが容易になります。

195
00:10:48,200 --> 00:10:50,430
その変化は h の d サイン、つまり dh 

196
00:10:50,430 --> 00:10:52,660
のナッジによって引き起こされる小さな変化です。

197
00:10:52,660 --> 00:10:56,730
ちなみに、dh バンプが右に移動しているのに左に

198
00:10:56,730 --> 00:11:00,630
移動しているという事 実は、この変化、h の 

199
00:11:00,630 --> 00:11:05,040
d サインが何らかの負の数になることを意味 します。

200
00:11:06,140 --> 00:11:08,765
もう一度、サインの導関数に関する知識を活用する 

201
00:11:08,765 --> 00:11:09,640
ことができます。

202
00:11:10,500 --> 00:11:12,108
この h の d サインは、h 

203
00:11:12,108 --> 00:11:14,420
のコサインに dh を掛 けたものになります。

204
00:11:15,240 --> 00:11:17,600
これが、サインの導関数がコサインになるこ とを意味します。

205
00:11:17,600 --> 00:11:20,008
物事を展開すると、h を x の 2 

206
00:11:20,008 --> 00:11:22,923
乗に再度置き換えることが できるため、一番下の

207
00:11:22,923 --> 00:11:25,838
ナッジのコサインのサイズが x の 2 乗に 

208
00:11:25,838 --> 00:11:29,260
dx の 2 乗を掛 けたものになることがわかります。

209
00:11:29,260 --> 00:11:32,480
実際、物事をさらに展開してみましょう。

210
00:11:32,840 --> 00:11:36,187
その中間ナッジ dx の 2 乗は、dx 

211
00:11:36,187 --> 00:11:38,100
の約 2 倍になります。

212
00:11:39,060 --> 00:11:41,370
このような表現が実際に何を意味するの

213
00:11:41,370 --> 00:11:43,680
かを思い出すことは常に良い習慣です。

214
00:11:44,340 --> 00:11:49,063
この場合、x から開始した場所は 1 に等しくなります。

215
00:11:49,063 --> 00:11:52,267
上の 5 では、この式全体が、3 行 

216
00:11:52,267 --> 00:11:56,653
目のナッジのサイズが約 1 のコサインになることを示

217
00:11:56,653 --> 00:11:59,352
しています。5の2 乗×2×1。

218
00:11:59,352 --> 00:12:02,220
dx のサイズに関係なく 5 倍。

219
00:12:02,720 --> 00:12:05,319
これは dx のサイズに比例し、この導

220
00:12:05,319 --> 00:12:07,920
関数によりその比例定数が得 られます。

221
00:12:10,920 --> 00:12:12,560
ここで何が判明したかに注目してください。

222
00:12:12,960 --> 00:12:17,230
外側の関数の導関数があり、それは依然とし

223
00:12:17,230 --> 00:12:21,501
て変更されていない内側 の関数を取り込み

224
00:12:21,501 --> 00:12:26,200
、それをその内側の関数の導関数で乗算します。

225
00:12:26,500 --> 00:12:27,821
x の正弦または x の 2 乗に

226
00:12:27,821 --> 00:12:29,220
ついては特別なことは何もありません。

227
00:12:29,740 --> 00:12:33,830
x の g と x の h と いう 2 

228
00:12:33,830 --> 00:12:38,310
つの関数がある場合、それらの合成の導関数、g 

229
00:12:38,310 --> 00:12:42,790
of h of x は、h で評価された g 

230
00:12:42,790 --> 00:12:47,660
の導関数に h の導関数を乗算したものになります。

231
00:12:47,660 --> 00:12:52,220
このパターンは、通常、連鎖規則と呼ばれるものです。

232
00:12:52,220 --> 00:12:56,025
gの導関数については、dg dxではなくdg 

233
00:12:56,025 --> 00:12:57,680
dhと書いています。

234
00:12:58,680 --> 00:13:02,369
記号レベルでは 、これは導関数に接続するものは依然

235
00:13:02,369 --> 00:13:06,060
として中間関数 h であるこ とを思い出させます。

236
00:13:07,020 --> 00:13:09,291
しかしそれ以上に、これは外部関数の導 

237
00:13:09,291 --> 00:13:12,520
関数が実際に何を表しているのかを反映する重要な点です。

238
00:13:13,200 --> 00:13:16,766
3 つのラインの設定で、その底部のサインの導関数を取得したと

239
00:13:16,766 --> 00:13:20,214
きに、そのナッジのサイズ d sine を h と dh 

240
00:13:20,214 --> 00:13:23,781
の掛け合わせのコサインとして拡張したことを思い出してください

241
00:13:23,781 --> 00:13:23,900
。

242
00:13:24,940 --> 00:13:27,323
これは、その下部ナ ッジのサイズが x 

243
00:13:27,323 --> 00:13:30,780
にどのように依存するのかがすぐには分からなかったためです。

244
00:13:30,780 --> 00:13:35,620
しかし、中間変数 h に関して導関数を求めることはできます。

245
00:13:35,620 --> 00:13:39,065
つまり、 3 行目のナッジのサイズを、2 

246
00:13:39,065 --> 00:13:42,510
行目のナッジのサイズである dh の倍数 

247
00:13:42,510 --> 00:13:45,300
として表現する方法を考え出します。

248
00:13:45,300 --> 00:13:47,922
その後、dh が何である かを理解

249
00:13:47,922 --> 00:13:50,700
することでさらに展開が始まりました。

250
00:13:53,320 --> 00:13:55,989
この連鎖ルール式では、最終出力である g 

251
00:13:55,989 --> 00:13:58,786
の小さな変化と、それを引き起こした h の 

252
00:13:58,786 --> 00:14:01,964
小さな変化との比率を調べてください (h は g 

253
00:14:01,964 --> 00:14:04,380
に代入する値です) と言っていま す。

254
00:14:05,320 --> 00:14:09,973
次に、それに h の小さな変化を掛け、それを引き起こした 

255
00:14:09,973 --> 00:14:12,380
x の小さな変化で割 ります。

256
00:14:12,380 --> 00:14:16,123
これらの dh が相殺され、最終的な出力の変化と 

257
00:14:16,123 --> 00:14:20,166
、特定の一連のイベントによってそれがもたらされた入力 

258
00:14:20,166 --> 00:14:24,060
の変化との間の比率が得られることに注意してください。

259
00:14:24,060 --> 00:14:28,189
dh の取り消しは単なる表記上のトリックではなく、

260
00:14:28,189 --> 00:14:32,319
私たちがデリバティブで行う すべてのことを支える小

261
00:14:32,319 --> 00:14:36,780
さなナッジで何が起こっているかを純粋に反映しています。

262
00:14:36,780 --> 00:14:40,010
これらは、多くの小さなものを組み合わせた関数の派生関数を

263
00:14:40,010 --> 00:14:43,240
処理するために備えてお くべき 3 つの基本ツールです。

264
00:14:43,840 --> 00:14:47,380
合計ルール、積ルー ル、連鎖ルールがあります。

265
00:14:48,400 --> 00:14:51,718
正直に言うと、連鎖ルールと積ルールが何であるかを知

266
00:14:51,718 --> 00:14:55,036
っていることと 、実際にそれらを最も困難な状況にさ

267
00:14:55,036 --> 00:14:58,620
え流暢に適用できることの間に は大きな違いがあります。

268
00:14:59,480 --> 00:15:02,569
微積分の仕組みに関するビデオを視聴するこ 

269
00:15:02,569 --> 00:15:05,954
とは、微積分の仕組みを自分で練習し、計算を行う

270
00:15:05,954 --> 00:15:09,780
ための筋肉を鍛える ことに代わるものではありません。

271
00:15:09,780 --> 00:15:12,333
あなたの代わりにそうすることを提案できれば 

272
00:15:12,333 --> 00:15:14,886
本当によかったのですが、残念ながらボールはあ

273
00:15:14,886 --> 00:15:17,440
なたのコートにあり、練習を求めているのです。

274
00:15:18,040 --> 00:15:20,948
私が提供できること、そして提供できればと願っていることは

275
00:15:20,948 --> 00:15:23,960
、これらのルールが実際にどこから来たのかを示す ことです。

276
00:15:24,140 --> 00:15:27,404
これらは単に暗記して叩き込むべきものではなく、自然 

277
00:15:27,404 --> 00:15:31,044
なパターンであり、派生語が実際に何を意味するのかを辛抱強 

278
00:15:31,044 --> 00:15:34,560
く考え抜くだけで発見できるものであることを示すためです。

