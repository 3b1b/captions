1
00:00:00,000 --> 00:00:09,040
In the main video on cryptocurrencies, I made two references to situations where in order

2
00:00:09,040 --> 00:00:15,580
to break a given piece of security, you would have to guess a specific string of 256 bits.

3
00:00:15,580 --> 00:00:19,000
One of these was in the context of digital signatures, and the other in the context of

4
00:00:19,000 --> 00:00:21,280
a cryptographic hash function.

5
00:00:21,280 --> 00:00:26,680
For example, if you want to find a message whose SHA-256 hash is some specific string

6
00:00:26,680 --> 00:00:33,760
of 256 bits, you have no better method than to just guess and check random messages.

7
00:00:33,760 --> 00:00:38,800
And this would require, on average, 2 to the 256 guesses.

8
00:00:38,800 --> 00:00:44,200
This is a number so far removed from anything we ever deal with that it can be hard to appreciate

9
00:00:44,200 --> 00:00:45,200
its size.

10
00:00:45,200 --> 00:00:46,680
But let's give it a try.

11
00:00:46,680 --> 00:00:53,000
2 to the 256 is the same as 2 to the 32 multiplied by itself 8 times.

12
00:00:53,000 --> 00:00:57,800
What's nice about that split is that 2 to the 32 is 4 billion, which is at least a number

13
00:00:57,800 --> 00:01:01,640
we can think about.

14
00:01:01,640 --> 00:01:07,640
So all we need to do is appreciate what multiplying 4 billion times itself 8 successive times

15
00:01:07,640 --> 00:01:09,820
really feels like.

16
00:01:09,820 --> 00:01:13,960
As many of you know, the GPU on your computer can let you run a whole bunch of computations

17
00:01:13,960 --> 00:01:16,420
in parallel incredibly quickly.

18
00:01:16,420 --> 00:01:21,140
So if you were to specially program a GPU to run a cryptographic hash function over

19
00:01:21,140 --> 00:01:25,760
and over, a really good one might be able to do a little less than a billion hashes

20
00:01:25,760 --> 00:01:26,760
per second.

21
00:01:26,760 --> 00:01:31,700
Let's say you just take a bunch of those and cram your computer full of extra GPUs

22
00:01:31,700 --> 00:01:35,420
so that your computer can run 4 billion hashes per second.

23
00:01:35,420 --> 00:01:41,500
So the first 4 billion here is going to represent the number of hashes per second per computer.

24
00:01:41,500 --> 00:01:46,220
Now picture 4 billion of these GPU-packed computers.

25
00:01:46,220 --> 00:01:50,820
For comparison, even though Google does not at all make their number of servers public,

26
00:01:50,820 --> 00:01:54,660
estimates have it somewhere in the single-digit millions.

27
00:01:54,660 --> 00:01:58,940
In reality, most of those servers are going to be much less powerful than our imagined

28
00:01:58,940 --> 00:02:00,780
GPU-packed machine.

29
00:02:00,780 --> 00:02:05,580
But let's say Google replaced all of its millions of servers with a machine like this,

30
00:02:05,580 --> 00:02:10,540
then 4 billion machines would mean about 1,000 copies of this souped-up Google.

31
00:02:10,540 --> 00:02:14,140
Let's call that one kilo-Google worth of computing power.

32
00:02:14,140 --> 00:02:18,120
There's about 7.3 billion people on Earth.

33
00:02:18,120 --> 00:02:23,640
So next, imagine giving a little over half of every individual on Earth their own personal

34
00:02:23,640 --> 00:02:25,640
kilo-Google.

35
00:02:25,640 --> 00:02:30,440
Now imagine 4 billion copies of this Earth.

36
00:02:30,440 --> 00:02:35,320
For comparison, the Milky Way has somewhere between 100 and 400 billion stars.

37
00:02:35,320 --> 00:02:38,380
We don't really know, but the estimates tend to be in that range.

38
00:02:38,380 --> 00:02:44,780
So this would be akin to a full 1% of every star in the galaxy having a copy of Earth

39
00:02:44,780 --> 00:02:47,940
where half the people on that Earth have their own personal kilo-Google.

40
00:02:47,940 --> 00:02:57,580
Next, imagine 4 billion copies of the Milky Way, and call this your giga-galactic supercomputer,

41
00:02:57,580 --> 00:03:03,580
running about 2 to the 160 guesses every second.

42
00:03:03,580 --> 00:03:04,980
Four billion seconds?

43
00:03:04,980 --> 00:03:07,920
That's about 126.8 years.

44
00:03:07,920 --> 00:03:09,220
Four billion of those?

45
00:03:09,220 --> 00:03:15,020
That's 507 billion years, which is about 37 times the age of the universe.

46
00:03:15,020 --> 00:03:20,500
So even if you were to have your GPU-packed, kilo-Google-per-person, multi-planetary, giga-galactic

47
00:03:20,500 --> 00:03:26,380
computer guessing numbers for 37 times the age of the universe, it would still only have

48
00:03:26,380 --> 00:03:32,660
a 1 in 4 billion chance of finding the correct guess.

49
00:03:32,660 --> 00:03:37,580
By the way, the state of Bitcoin hashing these days is that all of the miners put together

50
00:03:37,580 --> 00:03:42,740
guess and check at a rate of about 5 billion billion hashes per second.

51
00:03:42,740 --> 00:03:47,020
That corresponds to one third of what I just described as a kilo-Google.

52
00:03:47,020 --> 00:03:51,460
This is not because there are billions of GPU-packed machines out there, but because

53
00:03:51,460 --> 00:03:56,500
miners actually use something that's about 1000 times better than a GPU.

54
00:03:56,500 --> 00:03:59,060
Application-specific integrated circuits.

55
00:03:59,060 --> 00:04:03,580
These are pieces of hardware specifically designed for Bitcoin mining, for running a

56
00:04:03,580 --> 00:04:07,540
bunch of SHA-256 hashes, and nothing else.

57
00:04:07,580 --> 00:04:11,100
Turns out, there's a lot of efficiency gains to be had when you throw out the need for

58
00:04:11,100 --> 00:04:17,260
general computation and design your integrated circuits for one and only one task.

59
00:04:17,260 --> 00:04:22,300
Also, on the topic of large powers of two that I personally find it hard to get my mind

60
00:04:22,300 --> 00:04:27,060
around, this channel recently surpassed 2 to the 18th subscribers.

61
00:04:27,060 --> 00:04:31,260
And to engage a little more with some sub-portion of those 2 to the 18 people, I'm going to

62
00:04:31,260 --> 00:04:32,660
do a Q&A session.

63
00:04:32,660 --> 00:04:36,260
I've left a link in the description to a Reddit thread where you can post questions

64
00:04:36,300 --> 00:04:39,100
and upvote the ones you want to hear answers to.

65
00:04:39,100 --> 00:04:42,460
And probably in the next video or on Twitter or something like that I'll announce the

66
00:04:42,460 --> 00:04:44,700
format in which I'd like to give answers.

67
00:04:44,700 --> 00:04:45,020
See you then!

