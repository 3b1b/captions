1
00:00:00,000 --> 00:00:18,600
初めてテイラーシリーズについて知ったとき、それがどれほど重要であるかをまったく理解していませんでした。

2
00:00:18,600 --> 00:00:20,180


3
00:00:20,180 --> 00:00:24,800
しかし、これらは関数を近似するために数学が提供する最も強力なツールの 1

4
00:00:24,800 --> 00:00:30,080
つであるため、数学、物理学、および工学の多くの分野で何度も登場します。

5
00:00:30,080 --> 00:00:34,000
学生だった私にとって、これが初めてピンと来たのは、微積分の授業ではなく、物理学の授業だったと思います。

6
00:00:34,000 --> 00:00:35,960


7
00:00:35,960 --> 00:00:40,560
私たちは振り子の位置エネルギーに関係する特定の問題を研究していました。そのためには、振り子の重量がその最低点からどれだけ高いかを表す式が必要です。それを計算すると、次のようになります。

8
00:00:40,560 --> 00:00:45,000
1

9
00:00:45,000 --> 00:00:49,720
から振り子と垂直線の間の角度の余弦を引いたものに比例します。

10
00:00:49,720 --> 00:00:54,080


11
00:00:54,080 --> 00:00:57,840
私たちが解決しようとしていた問題の詳細についてはここでは説明しませんが、ここで言いたいのは、このコサイン関数のせいで問題が厄介で扱いにくくなり、振り子が他の振動現象とどのように関係しているのかがわかりにくくなったということです。

12
00:00:57,840 --> 00:01:03,360


13
00:01:03,360 --> 00:01:07,680


14
00:01:07,680 --> 00:01:14,440
しかし、シータのコサインを 1 からシータの

15
00:01:14,440 --> 00:01:17,080
2 乗を引いたものとして近似すると、すべてがはるかに簡単に適切な位置に収まります。

16
00:01:17,080 --> 00:01:21,360
これまでにこのようなものを見たことがない場合、そのような近似は完全に常識外れに見えるかもしれません。

17
00:01:21,360 --> 00:01:23,900


18
00:01:23,900 --> 00:01:29,440
この関数 (1 からシータの

19
00:01:29,440 --> 00:01:34,720
2 乗を引いたもの) とともにシータのコサインをグラフにすると、少なくとも

20
00:01:34,720 --> 00:01:41,360
0 に近い小さな角度では、両者はかなり近いように見えますが、この近似をどのように行うと考えられますか?特定の二次方程式を見つけますか?

21
00:01:41,360 --> 00:01:46,220
テイラー級数の研究は主に、非多項式関数を取得し、入力付近でそれらを近似する多項式を見つけることです。

22
00:01:46,220 --> 00:01:49,660


23
00:01:49,820 --> 00:01:53,940
ここでの目的は、多項式は他の関数よりも扱いやすい傾向にあるということです。

24
00:01:53,940 --> 00:01:58,420
それらは計算が簡単で、導関数を取得しやすく、統合が簡単で、全体的によりフレンドリーです。

25
00:01:58,420 --> 00:02:00,700


26
00:02:00,700 --> 00:02:05,400
それでは、関数 x の余弦を見て、x

27
00:02:05,400 --> 00:02:11,220
が 0 に近い二次近似をどのように構築するかを実際に考えてみましょう。

28
00:02:11,220 --> 00:02:18,340
つまり、c0 に c1 を掛けて x に

29
00:02:18,340 --> 00:02:24,860
c2 を掛けて x の 2

30
00:02:24,860 --> 00:02:30,940
乗を加えたような考えられるすべての多項式の中から、これらの定数 c0、c1、c2 を選択して、x が 0 に近い

31
00:02:30,940 --> 00:02:33,500
x のコサインに最も似ている多項式を見つけます。 、その時点でのコサイン x のグラフを持つスプーンのようなグラフです。

32
00:02:33,500 --> 00:02:40,020
まず第一に、入力 0 では x のコサインの値は 1 なので、近似が少しでもうまくいくのであれば、入力

33
00:02:40,020 --> 00:02:45,860
x が 0 である場合にも 1 に等しくなるはずです。

34
00:02:45,860 --> 00:02:53,260
0 を入力すると c0 が何になるだけなので、これを 1 に設定できます。

35
00:02:53,260 --> 00:02:57,580
これにより、この近似を可能な限り良好にするために定数 c1 と c2

36
00:02:57,580 --> 00:03:01,860
を自由に選択できるようになりますが、これらを使用しても、x が 0

37
00:03:01,860 --> 00:03:05,580
に等しいときに多項式が 1 に等しいという事実は変わりません。

38
00:03:05,580 --> 00:03:10,220
また、この注目点で近似値がコサイン x

39
00:03:10,220 --> 00:03:11,700
と同じ接線の傾きを持っていれば良いでしょう。

40
00:03:11,740 --> 00:03:16,740
そうしないと、近似値が必要以上に早くコサイン グラフから離れてしまいます。

41
00:03:18,300 --> 00:03:24,100
コサインの導関数は負のサインであり、x が 0

42
00:03:24,100 --> 00:03:27,500
に等しい場合、それは 0 に等しく、接線が完全に平坦であることを意味します。

43
00:03:27,500 --> 00:03:33,260
一方、二次方程式の導関数を計算すると、c1 プラス 2 倍

44
00:03:33,260 --> 00:03:35,240
c2 倍 x が得られます。

45
00:03:35,240 --> 00:03:40,280
x が 0 に等しい場合、これは c1 として選択したものと同じになります。

46
00:03:40,280 --> 00:03:45,440
したがって、この定数 c1 は、x

47
00:03:45,440 --> 00:03:47,200
が 0 に等しい近似の導関数を完全に制御します。

48
00:03:47,200 --> 00:03:53,480
これを 0 に設定すると、近似もこの点で平らな接線を持つことが保証されます。

49
00:03:53,480 --> 00:03:58,760
これにより、c2 を自由に変更できるようになりますが、x が

50
00:03:58,760 --> 00:04:04,360
0 に等しいときの多項式の値と傾きは、コサインの値と一致するように所定の位置にロックされます。

51
00:04:04,360 --> 00:04:08,940
最後に利用するのは、コサイン グラフが x が

52
00:04:08,980 --> 00:04:13,460
0 に等しい以上で下向きにカーブし、負の 2 次導関数を持つという事実です。

53
00:04:13,460 --> 00:04:17,820
つまり、その時点では変化率が0であっても、その付近では変化率自体が減少しているということになります。

54
00:04:17,820 --> 00:04:21,300


55
00:04:21,300 --> 00:04:26,980
具体的には、その導関数は x の負のサインであるため、その 2 次導関数は x

56
00:04:26,980 --> 00:04:33,140
の負のコサインであり、x が 0 に等しい場合、それは負の 1 に等しくなります。

57
00:04:33,140 --> 00:04:37,020
ここで、近似値の微分値をコサインの微分値と一致させて、値が不必要に急速に乖離しないようにしたのと同じように、二次微分値が一致することにより、それらの値が同じ割合でカーブすることが保証されます。多項式の傾きが必要以上に早くコサイン

58
00:04:37,100 --> 00:04:41,980
x

59
00:04:41,980 --> 00:04:47,260


60
00:04:47,260 --> 00:04:52,260
の傾きから離れることはありません。

61
00:04:52,260 --> 00:04:54,500


62
00:04:54,500 --> 00:04:59,280
以前と同じ導関数を取り出し、その導関数を計算すると、この多項式の 2 次導関数が c2

63
00:04:59,280 --> 00:05:05,020
のちょうど 2 倍であることがわかります。

64
00:05:05,020 --> 00:05:10,620
したがって、x が 0 に等しいときにこの 2 階導関数も負の 1 に等しくなるようにするには、c2

65
00:05:10,620 --> 00:05:16,820
の 2 倍が負の 1 でなければなりません。つまり、c2 自体が負の 1 の半分になる必要があります。

66
00:05:16,820 --> 00:05:23,180
これにより、1 プラス 0x マイナス 1 の半分の x 2 乗という近似値が得られます。

67
00:05:23,180 --> 00:05:29,460
コサインを 0 と見積もると、その良さを実感できます。 この多項式を使用して

68
00:05:29,460 --> 00:05:32,860
1 を計算すると、0 と推定されます。 995。

69
00:05:32,860 --> 00:05:36,020
そして、これが 0 のコサインの真の値です。 1.

70
00:05:36,020 --> 00:05:40,420
実に良い近似値ですね！

71
00:05:40,420 --> 00:05:43,000
少し時間を取って、今何が起こったのかを振り返ってください。

72
00:05:43,000 --> 00:05:49,540
この二次近似には 3 つの自由度 (定数 c0、c1、および c2) がありました。

73
00:05:49,540 --> 00:05:54,520
c0 は、x が 0

74
00:05:54,520 --> 00:05:57,180
に等しいとき、近似の出力がコサイン x の出力と一致することを確認する役割を果たしました。

75
00:05:57,180 --> 00:06:05,100
c1 はその時点で導関数が一致することを確認する責任を負い、c2

76
00:06:05,100 --> 00:06:09,420
は二次導関数が一致することを確認する責任を負いました。

77
00:06:09,420 --> 00:06:14,820
これにより、制御量を考慮して、x が

78
00:06:14,820 --> 00:06:19,620
0 から離れるにつれて近似が変化する様子、および変化率自体が変化する様子が、コサイン

79
00:06:19,620 --> 00:06:24,340
x の動作と可能な限り類似することが保証されます。

80
00:06:24,340 --> 00:06:28,860
多項式でより多くの項を許可し、高次の導関数を一致させることで、より詳細に制御できます。

81
00:06:28,860 --> 00:06:30,860


82
00:06:30,860 --> 00:06:36,580
たとえば、ある定数 c3 に対して項 c3 に x3 を掛けたものを追加したとします。

83
00:06:36,580 --> 00:06:42,860
この場合、3次多項式の3次微分を取ると、2次以下のものはすべて0になります。

84
00:06:42,860 --> 00:06:45,700


85
00:06:45,700 --> 00:06:52,420
最後の項に関しては、べき乗則を 3 回反復した後、1 回 2

86
00:06:52,420 --> 00:06:56,700
回 3 回 c3 のようになります。

87
00:06:56,700 --> 00:07:01,860
一方、コサイン x の 3 階導関数はサイン x

88
00:07:01,860 --> 00:07:04,020
になり、x が 0 に等しい場合、これは 0 になります。

89
00:07:04,020 --> 00:07:09,920
したがって、3 次導関数が一致することを確認するには、定数 c3 を 0 にする必要があります。

90
00:07:09,920 --> 00:07:15,940
言い換えると、1 マイナス 1 半分 x2

91
00:07:15,940 --> 00:07:21,580
は、コサインの可能な限り最良の 2 次近似であるだけでなく、可能な限り最良の 3 次近似でもあります。

92
00:07:21,580 --> 00:07:28,060
4 次の項 (c4 に x を掛けたもの) を 4 番目に追加することで改善できます。

93
00:07:28,060 --> 00:07:34,340
コサインの 4 階導関数はそれ自体であり、x が 0 に等しい場合に 1 に等しくなります。

94
00:07:34,340 --> 00:07:38,260
そして、この新しい項を使った多項式の 4 階導関数は何でしょうか?

95
00:07:38,260 --> 00:07:43,160
さて、これらの指数がすべて前に飛び降りる状態でべき乗則を何度も適用し続けると、最終的には 1 x 2 x

96
00:07:43,160 --> 00:07:50,240
3 x 4 x c4、つまり

97
00:07:50,240 --> 00:07:51,700
24 x c4 になります。

98
00:07:51,700 --> 00:07:58,280
したがって、これをコサイン x の 4 階微分値 (1)

99
00:07:58,280 --> 00:07:59,280
と一致させたい場合、c4 は 24 の 1 でなければなりません。

100
00:07:59,280 --> 00:08:06,660
そして実際、次のような多項式 1 マイナス 1 の半分 x2 プラス 1 の 24

101
00:08:06,660 --> 00:08:13,820
倍 x を 4 番目にすると、x が 0 に等しい付近のコサイン x に非常に近似します。

102
00:08:13,820 --> 00:08:18,540
たとえば、小さな角度の余弦を含む物理問題では、この多項式を

103
00:08:18,540 --> 00:08:23,520
x

104
00:08:23,520 --> 00:08:26,220
の余弦に置き換えると、予測はほとんど気付かないほど異なります。

105
00:08:26,220 --> 00:08:30,620
ここで一歩下がって、このプロセスでいくつかのことが起こっていることに注目してください。

106
00:08:30,620 --> 00:08:35,060
まず第一に、このプロセスでは階乗項が非常に自然に出てきます。

107
00:08:35,060 --> 00:08:39,500
関数 x の n 個の連続導関数を

108
00:08:39,500 --> 00:08:46,580
n に取り、べき乗則を下にカスケードし続けると、残るのは 1 x 2

109
00:08:46,580 --> 00:08:49,460
x 3 を繰り返し、n まで続きます。

110
00:08:49,460 --> 00:08:53,780
したがって、多項式の係数を必要な導関数に単純に設定する必要はありません。

111
00:08:53,780 --> 00:08:54,780


112
00:08:54,780 --> 00:08:59,500
この効果を打ち消すには、適切な階乗で除算する必要があります。

113
00:08:59,500 --> 00:09:05,260
たとえば、4 番目の係数の x はコサイン 1 の

114
00:09:05,260 --> 00:09:09,540
4 階導関数ですが、4 階乗の 24 で除算されています。

115
00:09:09,540 --> 00:09:14,500
2 番目に注意すべきことは、この c4 に

116
00:09:14,500 --> 00:09:20,140
x を 4 回かけるなど、新しい用語を追加しても、古い用語の本来のあり方が台無しにならないということです。これは非常に重要です。

117
00:09:20,140 --> 00:09:25,740
たとえば、x が 0 に等しいこの多項式の 2

118
00:09:25,740 --> 00:09:31,060
階導関数は、高次の項を導入した後でも、依然として 2 番目の係数の 2 倍に等しくなります。

119
00:09:31,060 --> 00:09:35,860
そして、それは、x が 0 に等しいと差し込んでいるため、すべてに

120
00:09:35,860 --> 00:09:40,820
x を含む高次の項の 2 次導関数が洗い流されてしまうからです。

121
00:09:40,820 --> 00:09:45,780
同じことが他の導関数にも当てはまります。そのため、x が 0

122
00:09:45,780 --> 00:09:52,680
に等しい多項式の各導関数は、係数の 1 つだけによって制御されます。

123
00:09:52,680 --> 00:09:58,220
代わりに、x が pi

124
00:09:58,220 --> 00:10:02,320
に等しいなど、0 以外の入力を近似する場合、同じ効果を得るために、x から

125
00:10:02,320 --> 00:10:06,480
pi を引いた累乗、または調べている入力の観点から多項式を記述する必要があります。

126
00:10:06,480 --> 00:10:10,760
これにより、著しく複雑に見えますが、ここで行っていることは、点 pi が 0

127
00:10:10,760 --> 00:10:17,140
のように見え、動作することを確認することだけなので、x と pi

128
00:10:17,140 --> 00:10:22,700
を代入すると、定数が 1 つだけ残る、多くの優れたキャンセルが行われます。

129
00:10:22,700 --> 00:10:27,320
そして最後に、より哲学的なレベルで、ここで行っていることは基本的に、単一点における関数の高次導関数に関する情報を取得し、それをその点付近の関数の値に関する情報に変換していることに注目してください。

130
00:10:27,320 --> 00:10:33,740


131
00:10:33,740 --> 00:10:41,420


132
00:10:41,420 --> 00:10:44,580
コサインの導関数は必要なだけ取得できます。

133
00:10:44,580 --> 00:10:49,460
この素晴らしい周期パターンに従い、x のコサイン、x

134
00:10:49,460 --> 00:10:52,380
の負のサイン、負のコサイン、サインが繰り返されます。

135
00:10:52,380 --> 00:10:56,900
これらのそれぞれの値は、x が 0 に等しい場合に計算するのが簡単で、この循環パターンに

136
00:10:56,900 --> 00:11:02,060
1、0、負の 1、0 が与えられ、それが繰り返されます。

137
00:11:02,060 --> 00:11:06,660
そして、これらすべての高次導関数の値を知ることは、たとえ単一の数値 (x が 0

138
00:11:06,660 --> 00:11:14,540
に等しい) を代入するだけであっても、x のコサインに関する多くの情報となります。

139
00:11:14,540 --> 00:11:19,260
そこで、私たちが行っていることは、その情報を利用してこの入力の近似値を取得することです。これを行うには、同じ 1、0、負の

140
00:11:19,260 --> 00:11:24,740
1、

141
00:11:24,740 --> 00:11:31,660
0、循環パターン。

142
00:11:31,660 --> 00:11:36,900
そのためには、多項式の各係数を同じパターンに従うだけですが、それぞれを適切な階乗で除算する必要があります。

143
00:11:36,900 --> 00:11:40,140


144
00:11:40,180 --> 00:11:44,660
前に述べたように、これは多くの電力ルール

145
00:11:44,660 --> 00:11:47,340
アプリケーションのカスケード効果を打ち消すものです。

146
00:11:47,340 --> 00:11:52,100
このプロセスを任意の時点で停止することで得られる多項式は、x

147
00:11:52,100 --> 00:11:53,860
の余弦のテイラー多項式と呼ばれます。

148
00:11:53,860 --> 00:11:58,440
より一般的に、したがってより抽象的に言えば、コサイン以外の関数を扱っている場合、その導関数、二次導関数などを計算して、必要なだけ多くの項を取得し、それぞれを評価することになります。そのうちの x

149
00:11:58,440 --> 00:12:03,860
は 0

150
00:12:03,860 --> 00:12:09,780
に等しくなります。

151
00:12:09,820 --> 00:12:16,660
多項式近似の場合、n 項に対する各 x の係数は、0 で評価された関数の

152
00:12:16,660 --> 00:12:23,900
n 階導関数の値を n 階乗で割った値でなければなりません。

153
00:12:23,900 --> 00:12:29,400
このやや抽象的な式全体は、テイラー多項式に触れるテキストやコースでよく目にするものです。

154
00:12:29,400 --> 00:12:31,940


155
00:12:31,940 --> 00:12:36,420
これを見たとき、定数項によって多項式の値が f

156
00:12:36,420 --> 00:12:39,200
の値と一致することが保証されると考えてください。

157
00:12:39,280 --> 00:12:44,600
次の項は、多項式の傾きが x が

158
00:12:44,600 --> 00:12:46,360
0 に等しい関数の傾きと一致することを保証します。

159
00:12:46,360 --> 00:12:51,280
次の項では、必要な項の数に応じて、その時点での傾きの変化率が同じになるようにします。以下同様です。

160
00:12:51,280 --> 00:12:54,680


161
00:12:54,680 --> 00:12:58,400
選択する項が多いほど近似は近づきますが、その代償として、得られる多項式はより複雑になります。

162
00:12:58,400 --> 00:13:02,720


163
00:13:02,720 --> 00:13:07,040
そして、物事をさらに一般化するために、0 以外の入力 (これを a

164
00:13:07,080 --> 00:13:13,080
と呼びます) に近い値を近似したい場合は、この多項式を x のべき乗から

165
00:13:13,080 --> 00:13:19,320
a を引いたもので記述し、f の導関数をすべて評価することになります。その入力では、a.

166
00:13:19,320 --> 00:13:24,280
これは、テイラー多項式が完全に一般的にどのように見えるかです。

167
00:13:24,280 --> 00:13:29,600
a

168
00:13:29,600 --> 00:13:36,000
の値を変更すると、この近似が元の関数に近づくように変化し、その高次導関数が元の関数の導関数と等しくなります。

169
00:13:36,040 --> 00:13:40,560
これの最も単純で意味のある例の 1 つは、入力 x が 0

170
00:13:40,560 --> 00:13:43,280
に等しい場合の x に対する関数 e です。

171
00:13:43,280 --> 00:13:47,520
導関数の計算は非常に素晴らしく、これ以上に素晴らしいものです。e の x に対する導関数はそれ自体なので、2

172
00:13:47,520 --> 00:13:53,180
番目の導関数も x に対する e

173
00:13:53,180 --> 00:13:54,460
になり、その 3 番目の導関数も同様になるからです。

174
00:13:54,460 --> 00:13:59,240
したがって、x が 0 に等しい点では、これらはすべて 1 に等しくなります。

175
00:13:59,240 --> 00:14:09,000
これが意味するのは、多項式近似は、必要な項の数に応じて、1 プラス 1 倍 x プラス 1

176
00:14:09,000 --> 00:14:17,480
の 2 倍 x 2 乗プラス 1

177
00:14:17,480 --> 00:14:19,840
の 3 階乗倍 x 3 乗などのようになります。

178
00:14:19,840 --> 00:14:22,800
これらは、e から x までのテイラー多項式です。

179
00:14:22,800 --> 00:14:31,360
さて、それを基礎として、微積分のすべてのトピックがどのように関連しているかを示すという精神で、テイラー多項式のこの

180
00:14:31,360 --> 00:14:36,280
2

181
00:14:36,280 --> 00:14:41,420
次の項を理解するための、まったく別の楽しい方法に移りましょう。幾何学的に。

182
00:14:41,420 --> 00:14:45,160
これは微積分の基本定理に関連しています。簡単な復習が必要な場合は、第 1 章と第

183
00:14:45,160 --> 00:14:48,200
8 章で説明しました。

184
00:14:48,200 --> 00:14:53,340
これらのビデオで行ったように、固定の左点と可変の右点の間のグラフの下の面積を与える関数を考えてみましょう。

185
00:14:53,340 --> 00:14:56,280


186
00:14:56,280 --> 00:15:01,480
ここでやろうとしているのは、これまでのようにグラフ自体の関数ではなく、この面積関数を近似する方法を考えることです。

187
00:15:01,480 --> 00:15:05,120


188
00:15:05,120 --> 00:15:09,920
その領域に焦点を当てることで、二次項が飛び出すことになります。

189
00:15:09,920 --> 00:15:16,460
微積分の基本定理は、このグラフ自体が面積関数の導関数を表すということです。これは、面積の右端に dx

190
00:15:16,460 --> 00:15:21,780
をわずかに移動すると、グラフの高さに dx

191
00:15:21,780 --> 00:15:30,480
を掛けた値にほぼ等しい新しい面積が得られるためです。 。

192
00:15:30,480 --> 00:15:36,060
その近似は、dx の選択肢がますます小さくなるにつれて、ますます正確になります。

193
00:15:36,060 --> 00:15:39,700
しかし、0 に近づくことを意図していない

194
00:15:39,700 --> 00:15:44,900
x

195
00:15:44,900 --> 00:15:48,860
の変化を考慮して、この面積の変化をより正確にしたい場合は、ここで、ほぼ三角形であるこの部分を考慮する必要があります。

196
00:15:48,860 --> 00:15:56,460
開始入力を a 、その上に微調整された入力を x

197
00:15:56,460 --> 00:15:58,620
と名付け、その変更を xa とします。

198
00:15:58,620 --> 00:16:06,140
その小さな三角形の底辺はその変化 xa であり、その高さはグラフの傾きに

199
00:16:06,140 --> 00:16:08,540
xa を掛けたものです。

200
00:16:08,540 --> 00:16:14,140
このグラフは面積関数の導関数であるため、その傾きは入力 a で評価された面積関数の

201
00:16:14,180 --> 00:16:18,580
2 次導関数になります。

202
00:16:18,580 --> 00:16:24,140
したがって、この三角形の面積 (底辺の 1/2 と高さの積) は、a で評価されるこの面積関数の 2

203
00:16:24,140 --> 00:16:31,300
次導関数の 1/2 に xa の 2 乗を乗じたものになります。

204
00:16:31,300 --> 00:16:35,180
これはまさにテイラー多項式で見られるものです。

205
00:16:35,180 --> 00:16:40,920
点 a におけるこの面積関数のさまざまな微分情報がわかっている場合、点

206
00:16:40,920 --> 00:16:46,040
x における面積をどのように近似しますか?

207
00:16:46,040 --> 00:16:52,480
a、a の f までのすべての面積と、この長方形の面積

208
00:16:52,480 --> 00:16:58,240
(一次導関数の xa 倍)、および小さな三角形の面積 (二次導関数の

209
00:16:58,240 --> 00:17:02,880
1/2 倍) を含める必要があります。 xの二乗。

210
00:17:02,880 --> 00:17:07,220
これは非常に気に入っています。すべてを書き出すと少し乱雑に見えますが、用語のそれぞれには非常に明確な意味があり、図上でポイントするだけで済みます。

211
00:17:07,220 --> 00:17:13,700


212
00:17:13,700 --> 00:17:17,720
必要に応じて、ここで終了と呼ぶこともできます。そうすれば、これらのテイラー多項式で近似するための非常に便利なツールが手に入ります。

213
00:17:17,720 --> 00:17:21,700


214
00:17:21,700 --> 00:17:26,460
しかし、もしあなたが数学者のように考えているなら、立ち止まらずに無限に多くの項を追加することに意味があるのかどうかという疑問が生じるかもしれません。

215
00:17:26,460 --> 00:17:31,740


216
00:17:31,740 --> 00:17:37,040
数学では、無限の和は級数と呼ばれます。そのため、有限数の項を含むこれらの近似の

217
00:17:37,040 --> 00:17:42,880
1

218
00:17:42,880 --> 00:17:45,720
つがテイラー多項式と呼ばれますが、無限に多くの項をすべて加算すると、いわゆるテイラー級数が得られます。

219
00:17:45,720 --> 00:17:49,760
無限級数という考え方には細心の注意が必要です。無限に多くのものを足していくのは実際には意味がなく、電卓のプラス

220
00:17:49,760 --> 00:17:54,400
ボタンを押す回数は限られているからです。

221
00:17:54,400 --> 00:17:57,840


222
00:17:57,840 --> 00:18:01,800
しかし、各ステップで意味のある項をどんどん追加していくことで特定の値にどんどん近づいていく系列がある場合、その系列はその値に収束すると言います。

223
00:18:01,800 --> 00:18:08,000


224
00:18:08,000 --> 00:18:10,800


225
00:18:10,800 --> 00:18:15,440
あるいは、この種の級数収束を含めるように等価性の定義を拡張することに抵抗がない場合は、級数全体、つまりこの無限の和が収束する値に等しいと言うでしょう。

226
00:18:15,440 --> 00:18:21,240


227
00:18:21,240 --> 00:18:23,880


228
00:18:23,880 --> 00:18:29,320
たとえば、e から x までのテイラー多項式を見て、x

229
00:18:29,320 --> 00:18:31,280
が 1 に等しいなどの入力を差し込みます。

230
00:18:31,280 --> 00:18:37,060
多項式の項をさらに追加すると、総和は値 e にどんどん近づきます。そのため、この無限級数は数値

231
00:18:37,060 --> 00:18:44,000
e に収束すると言います。あるいは、同じことを言っていて、数値

232
00:18:44,000 --> 00:18:48,080
e に等しいと言います。

233
00:18:48,080 --> 00:18:53,800
実際、x が 2 に等しいなど、x

234
00:18:53,800 --> 00:18:59,200
の他の値を代入し、この値での高次のテイラー多項式の値を見ると、それらは e に向かって

235
00:18:59,200 --> 00:19:05,320
x に収束することがわかります。 eの二乗。

236
00:19:05,320 --> 00:19:11,340
これらのテイラー多項式が入力 0 で収集された導関数情報のみから構築されているとしても、これは、入力が

237
00:19:11,340 --> 00:19:18,540
0 からどれだけ離れているかに関係なく、あらゆる入力に当てはまります。

238
00:19:18,540 --> 00:19:24,320
このような場合、x に対する e

239
00:19:24,320 --> 00:19:29,000
はすべての入力 x において独自のテイラー級数に等しいと言います。これは一種の魔法のようなことが起こります。

240
00:19:29,000 --> 00:19:34,280
これは、サインやコサインなど、他のいくつかの重要な関数にも当てはまりますが、場合によっては、これらの系列が、使用している導関数情報の入力を中心とした特定の範囲内でのみ収束することがあります。

241
00:19:34,280 --> 00:19:39,320


242
00:19:39,320 --> 00:19:41,640


243
00:19:41,640 --> 00:19:46,640
入力 x が 1 に等しい

244
00:19:46,640 --> 00:19:52,380
x の自然対数のテイラー級数を計算すると、これは x が

245
00:19:52,380 --> 00:19:56,340
1 に等しいときの x の自然対数の高次導関数を評価することによって構築され、次のようになります。

246
00:19:56,340 --> 00:20:01,500
0 と

247
00:20:01,500 --> 00:20:06,460
2 の間の入力を接続する場合、この系列の項をさらに追加すると、その入力の自然対数にどんどん近づいていきます。

248
00:20:06,460 --> 00:20:12,580
しかし、その範囲を少しでも外れると、このシリーズは何にも近づけません。

249
00:20:12,580 --> 00:20:18,260
さらに多くの用語を追加すると、合計は大きく前後します。

250
00:20:18,260 --> 00:20:23,620
ご想像のとおり、x の自然対数は

251
00:20:23,620 --> 00:20:28,640
2 を超える入力に対して完全に適切に定義されていますが、その値の自然対数には近づきません。

252
00:20:28,640 --> 00:20:34,520
ある意味では、x が 1 に等しいときの

253
00:20:34,520 --> 00:20:36,740
x の ln の導関数情報は、そこまで伝播しません。

254
00:20:36,740 --> 00:20:41,240
このような場合、級数の項を追加しても何も近づかない場合、級数が分岐していると言います。

255
00:20:41,240 --> 00:20:44,280


256
00:20:44,280 --> 00:20:48,640
そして、近似している入力と、これらの多項式の出力が実際に収束する点の間の最大距離は、テイラー級数の収束半径と呼ばれます。

257
00:20:48,640 --> 00:20:54,380


258
00:20:54,380 --> 00:20:57,040


259
00:20:57,040 --> 00:20:59,620
テイラー級数については学ぶべきことがまだ残っています。

260
00:20:59,620 --> 00:21:04,740
多くのユースケース、これらの近似の誤差に限界を設定するための戦術、級数がいつ収束するか収束しないかを理解するためのテストがあり、さらに言えば、微積分全体と触れられていない無数のトピックについては学ぶべきことがまだ残っています。このシリーズによって。

261
00:21:04,740 --> 00:21:09,540


262
00:21:09,540 --> 00:21:13,760


263
00:21:13,760 --> 00:21:15,620


264
00:21:15,620 --> 00:21:19,960
これらのビデオの目的は、自信を持って効率的に学習し、場合によっては自分でさらに多くのトピックを再発見できるようにするための基本的な直観を提供することです。

265
00:21:19,960 --> 00:21:25,440


266
00:21:25,440 --> 00:21:28,200


267
00:21:28,200 --> 00:21:33,080
テイラー級数の場合、そこにあるものをさらに探索するときに覚えておくべき基本的な直観は、単一点の微分情報をその点の周囲の近似情報に変換するということです。

268
00:21:33,080 --> 00:21:39,260


269
00:21:39,260 --> 00:21:44,320


270
00:21:44,320 --> 00:21:47,320
このシリーズを応援してくださった皆様に改めて感謝申し上げます。

271
00:21:47,320 --> 00:21:51,540
次のシリーズは確率に基づいたものになるでしょう。ビデオが作成されたときに早期アクセスしたい場合は、どこに行くべきか知っています。

272
00:21:51,540 --> 00:21:53,000


