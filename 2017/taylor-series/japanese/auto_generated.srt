1
00:00:14,912 --> 00:00:17,647
初めてテイラーシリーズについて知ったとき、それがどれ

2
00:00:17,647 --> 00:00:20,180
ほど重要であるかをまったく理解していませんでした。

3
00:00:20,180 --> 00:00:23,480
しかし、これらは関数を近似するために数学が提供す

4
00:00:23,480 --> 00:00:26,780
る最も強力なツールの 1 つであるため、数学、物

5
00:00:26,780 --> 00:00:30,080
理学、および工学の多くの分野で何度も登場します。

6
00:00:30,080 --> 00:00:33,133
学生だった私にとって、これが初めてピンと来たのは、微

7
00:00:33,133 --> 00:00:35,960
積分の授業ではなく、物理学の授業だったと思います。

8
00:00:35,960 --> 00:00:39,471
私たちは振り子の位置エネルギーに関係する特定の問題

9
00:00:39,471 --> 00:00:42,983
を研究していま した。 そのためには、振り子の重量

10
00:00:42,983 --> 00:00:46,635
がその最低点からどれだけ高いか を表す式が必要です。

11
00:00:46,635 --> 00:00:49,444
それを計算すると、次のようになります。

12
00:00:49,444 --> 00:00:52,956
1 から振り子と垂直線の間の角度の余弦を引いたも

13
00:00:52,956 --> 00:00:54,080
のに比例します。

14
00:00:54,080 --> 00:00:57,480
私たちが解決しようとしていた問題の詳細についてはここでは説

15
00:00:57,480 --> 00:01:00,880
明しませんが、ここ で言いたいのは、このコサイン関数のせい

16
00:01:00,880 --> 00:01:03,224
で問題が厄介で扱いにくくなり、振り子が

17
00:01:03,224 --> 00:01:06,624
他の振動現象とどのように関係しているのかがわかりにくくなっ

18
00:01:06,624 --> 00:01:07,680
たということです。

19
00:01:07,680 --> 00:01:11,006
しかし、シータのコサインを 1 からシータの

20
00:01:11,006 --> 00:01:14,043
2 乗を引いたもの として近似すると、すべ

21
00:01:14,043 --> 00:01:17,080
てがはるかに簡単に適切な位置に収まります。

22
00:01:17,080 --> 00:01:20,556
これまでにこのようなものを見たことがない場合、その

23
00:01:20,556 --> 00:01:23,900
ような近似は完全に常識外れに見えるかもしれません。

24
00:01:23,900 --> 00:01:27,590
この関数 (1 からシータの 2 乗を引いたもの)

25
00:01:27,590 --> 00:01:31,565
とともにシータのコサインをグ ラフにすると、少なくとも

26
00:01:31,565 --> 00:01:35,540
0 に近い小さな角度では、両者はかなり近いように見えま

27
00:01:35,540 --> 00:01:39,088
すが、この近似をどのように行うと考えられますか?

28
00:01:39,088 --> 00:01:41,360
特定の二次方程式を見つけますか?

29
00:01:41,360 --> 00:01:45,672
テイラー級数の研究は主に、非多項式関数を取得し、入

30
00:01:45,672 --> 00:01:49,820
力付近でそれらを近似する多項式を見つけることです。

31
00:01:49,820 --> 00:01:51,824
ここでの目的は、多項式は他の関数より

32
00:01:51,824 --> 00:01:53,940
も扱いやすい傾向にあるということです。

33
00:01:53,940 --> 00:01:57,395
それらは計算が簡単で、導関数を取得しやすく、

34
00:01:57,395 --> 00:02:00,700
統合が簡単で、全体的によりフレンドリーです。

35
00:02:00,700 --> 00:02:06,055
それでは、関数 x の余弦を見て、x が 0 に近い二

36
00:02:06,055 --> 00:02:11,220
次近似をどのように構築するかを実際に考えてみましょう。

37
00:02:11,220 --> 00:02:14,692
つまり、c0 に c1 を掛けて x に c2

38
00:02:14,692 --> 00:02:18,309
を掛けて x の 2 乗を加 えたような考えられる

39
00:02:18,309 --> 00:02:22,360
すべての多項式の中から、これらの定数 c0、c1、c2

40
00:02:22,360 --> 00:02:24,964
を選択して、x が 0 に近い x

41
00:02:24,964 --> 00:02:28,291
のコサインに最も似ている多項式を見つけま す。

42
00:02:28,291 --> 00:02:31,908
、その時点でのコサイン x のグラフを持つスプー

43
00:02:31,908 --> 00:02:33,500
ンのようなグラフです。

44
00:02:33,500 --> 00:02:37,362
まず第一に、入力 0 では x のコサインの値は

45
00:02:37,362 --> 00:02:41,688
1 なので、近似が少しでもうま くいくのであれば、入力

46
00:02:41,688 --> 00:02:45,860
x が 0 である場合にも 1 に等しくなるはずです。

47
00:02:45,860 --> 00:02:51,260
0 を入力すると c0 が何になるだけなので、これを

48
00:02:51,260 --> 00:02:53,260
1 に設定できます。

49
00:02:53,260 --> 00:02:56,586
これにより、この近似を可能な限り良好にするために定数

50
00:02:56,586 --> 00:02:59,666
c1 と c2 を自由に選択できるようになりますが

51
00:02:59,666 --> 00:03:03,239
、これらを使用しても、x が 0 に等しいときに多項式が

52
00:03:03,239 --> 00:03:05,580
1 に等しいという事実は変わりません。

53
00:03:05,580 --> 00:03:08,445
また、この注目点で近似値がコサイン x

54
00:03:08,445 --> 00:03:11,740
と 同じ接線の傾きを持っていれば良いでしょう。

55
00:03:11,740 --> 00:03:15,817
そうしないと、近似値が必要以上に早くコサイン

56
00:03:15,817 --> 00:03:18,300
グラフから離れてしまいます。

57
00:03:18,300 --> 00:03:21,220
コサインの導関数は負のサインであり、x

58
00:03:21,220 --> 00:03:23,849
が 0 に等しい場合、 それは 0

59
00:03:23,849 --> 00:03:27,500
に等しく、接線が完全に平坦であることを意味します。

60
00:03:27,500 --> 00:03:31,370
一方、二次方程式の導関数を計算すると、c1

61
00:03:31,370 --> 00:03:35,240
プラス 2 倍 c2 倍 x が得られます。

62
00:03:35,240 --> 00:03:37,892
x が 0 に等しい場合、これは c1

63
00:03:37,892 --> 00:03:40,280
として選択したものと同じになります。

64
00:03:40,280 --> 00:03:43,575
したがって、この定数 c1 は、x が

65
00:03:43,575 --> 00:03:47,200
0 に等しい近似の導関数を完全に制御します。

66
00:03:47,200 --> 00:03:50,340
これを 0 に設定すると、近似もこの点

67
00:03:50,340 --> 00:03:53,480
で平らな接線を持つことが保証されます。

68
00:03:53,480 --> 00:03:57,473
これにより、c2 を自由に変更できるようになりますが、x

69
00:03:57,473 --> 00:04:01,054
が 0 に等しいとき の多項式の値と傾きは、コサイン

70
00:04:01,054 --> 00:04:04,360
の値と一致するように所定の位置にロックされます。

71
00:04:04,360 --> 00:04:07,248
最後に利用するのは、コサイン グラフが

72
00:04:07,248 --> 00:04:11,004
x が 0 に等しい以 上で下向きにカーブし、負の

73
00:04:11,004 --> 00:04:13,460
2 次導関数を持つという事実です。

74
00:04:13,460 --> 00:04:17,456
つまり、その時点では変化率が0であっても、その付近

75
00:04:17,456 --> 00:04:21,300
では変化率自体が減少しているということになります。

76
00:04:21,300 --> 00:04:25,631
具体的には、その導関数は x の負のサインであるため、その

77
00:04:25,631 --> 00:04:29,385
2 次導関数は x の 負のコサインであり、x が

78
00:04:29,385 --> 00:04:33,140
0 に等しい場合、それは負の 1 に等しくなります。

79
00:04:33,140 --> 00:04:37,412
ここで、近似値の微分値をコサインの微分値と一致させて、

80
00:04:37,412 --> 00:04:41,684
値が不必要に急速に乖離しないようにしたのと同じように、

81
00:04:41,684 --> 00:04:45,956
二次微分値が一致することにより、それらの値が同じ割合で

82
00:04:45,956 --> 00:04:50,380
カーブすることが保証されます。 多項式の傾きが必要以上に

83
00:04:50,380 --> 00:04:54,500
急速にコサイン x の傾きから離れることはありません。

84
00:04:54,500 --> 00:04:57,898
以前と同じ導関数を取り出し、その導関数を計

85
00:04:57,898 --> 00:05:01,135
算すると、この多項式の 2 次導関数が

86
00:05:01,135 --> 00:05:05,020
c2 のちょうど 2 倍であることがわかります。

87
00:05:05,020 --> 00:05:07,769
したがって、x が 0 に等しいときにこの 2

88
00:05:07,769 --> 00:05:10,862
階導関数も負の 1 に等しくなるようにするには、c2

89
00:05:10,862 --> 00:05:13,383
の 2 倍が負の 1 でなければなりません。

90
00:05:13,383 --> 00:05:16,820
つまり、c2 自体が負の 1 の半分になる必要があります。

91
00:05:16,820 --> 00:05:19,929
これにより、1 プラス 0x マイナス 1

92
00:05:19,929 --> 00:05:23,180
の半分の x 2 乗という近似値が得られます。

93
00:05:23,180 --> 00:05:27,395
コサインを 0 と見積もると、その良さを実感できます。

94
00:05:27,395 --> 00:05:30,986
この多項式を使 用して 1 を計算すると、0

95
00:05:30,986 --> 00:05:32,860
と推定されます。995。

96
00:05:32,860 --> 00:05:36,020
そして、これが 0 のコサインの真の値です。1.

97
00:05:36,020 --> 00:05:40,420
実に良い近似値ですね！

98
00:05:40,420 --> 00:05:43,000
少し時間を取って、今何が起こったのかを振り返ってください。

99
00:05:43,000 --> 00:05:46,270
この二次近似には 3 つの自由度 (定数

100
00:05:46,270 --> 00:05:49,540
c0、c1、および c2) がありました。

101
00:05:49,540 --> 00:05:53,496
c0 は、x が 0 に等しいとき、近似の出力がコサイン

102
00:05:53,496 --> 00:05:57,180
x の出力と一致することを確認する役割を果たしました。

103
00:05:57,180 --> 00:06:01,193
c1 はその時点で導関数が一致することを

104
00:06:01,193 --> 00:06:05,206
確認する責任を負い、 c2 は二次導関数

105
00:06:05,206 --> 00:06:09,420
が一致することを確認する責任を負いました。

106
00:06:09,420 --> 00:06:14,449
これにより、制御量を考慮して、x が 0 から離れるにつれ

107
00:06:14,449 --> 00:06:19,478
て近似が変化する様子、および変化率自体が変化する様子が、コ

108
00:06:19,478 --> 00:06:24,340
サイン x の動作と可能な限り類似することが保証されます。

109
00:06:24,340 --> 00:06:27,748
多項式でより多くの項を許可し、高次の導関数を

110
00:06:27,748 --> 00:06:30,860
一致させることで、より詳細に制御できます。

111
00:06:30,860 --> 00:06:33,786
たとえば、ある定数 c3 に対して項 c3

112
00:06:33,786 --> 00:06:36,580
に x3 を掛けたものを追加したとします。

113
00:06:36,580 --> 00:06:41,256
この場合、3次多項式の3次微分を取ると

114
00:06:41,256 --> 00:06:45,700
、2次以下のものはすべて0になります。

115
00:06:45,700 --> 00:06:51,420
最後の項に関しては、べき乗則を 3 回反復した後、

116
00:06:51,420 --> 00:06:56,700
1 回 2 回 3 回 c3 のようになります。

117
00:06:56,700 --> 00:07:00,426
一方、コサイン x の 3 階導関数はサイン x にな

118
00:07:00,426 --> 00:07:04,020
り、x が 0 に等しい場合、これは 0 になります。

119
00:07:04,020 --> 00:07:07,707
したがって、3 次導関数が一致することを確認するには、定数

120
00:07:07,707 --> 00:07:09,920
c3 を 0 にする必要があります。

121
00:07:09,920 --> 00:07:13,433
言い換えれば、1 マイナス 1 半分 x2

122
00:07:13,433 --> 00:07:16,309
は、コサインの可能な限り最良の 2

123
00:07:16,309 --> 00:07:19,982
次近似であるだけでなく、可能な限り最良の 3

124
00:07:19,982 --> 00:07:21,580
次近似でもあります。

125
00:07:21,580 --> 00:07:24,895
4 次の項 (c4 に x を掛けたもの)

126
00:07:24,895 --> 00:07:28,060
を 4 番目に追加することで改善できます。

127
00:07:28,060 --> 00:07:31,200
コサインの 4 階導関数はそれ自体であり、x

128
00:07:31,200 --> 00:07:34,340
が 0 に等しい場合に 1 に等しくなります。

129
00:07:34,340 --> 00:07:36,596
そして、この新しい項を使った多項式の

130
00:07:36,596 --> 00:07:38,260
4 階導関数は何でしょうか?

131
00:07:38,260 --> 00:07:42,955
さて、これらの指数がすべて前に飛び降りる状態でべき乗則を

132
00:07:42,955 --> 00:07:47,327
何度も適用し続けると、最終的には 1 x 2 x 3

133
00:07:47,327 --> 00:07:51,700
x 4 x c4、つまり 24 x c4 になります。

134
00:07:51,700 --> 00:07:54,106
したがって、これをコサイン x の 4

135
00:07:54,106 --> 00:07:56,873
階微分値 (1) と一 致させたい場合、c4

136
00:07:56,873 --> 00:07:59,280
は 24 の 1 でなければなりません。

137
00:07:59,280 --> 00:08:03,959
そして実際、次のような多項式 1 マイナス 1 の半分

138
00:08:03,959 --> 00:08:07,636
x2 プラス 1 の 24 倍 x を 4

139
00:08:07,636 --> 00:08:12,148
番目にすると、x が 0 に等しい付近のコサイン x

140
00:08:12,148 --> 00:08:13,820
に非常に近似します。

141
00:08:13,820 --> 00:08:18,016
たとえば、小さな角度の余弦を含む物理問題で

142
00:08:18,016 --> 00:08:22,213
は、この多項式を x の余弦に置き換えると

143
00:08:22,213 --> 00:08:26,220
、予測はほとんど気付かないほど異なります。

144
00:08:26,220 --> 00:08:28,368
ここで一歩下がって、このプロセスでいくつか

145
00:08:28,368 --> 00:08:30,620
のことが起こっていることに注目してください。

146
00:08:30,620 --> 00:08:35,060
まず第一に、このプロセスでは階乗項が非常に自然に出てきます。

147
00:08:35,060 --> 00:08:39,991
関数 x の n 個の連続導関数を n に取り、

148
00:08:39,991 --> 00:08:44,528
べき乗則を下にカスケードし続けると、残るのは

149
00:08:44,528 --> 00:08:49,460
1 x 2 x 3 を繰り返し、n まで続きます。

150
00:08:49,460 --> 00:08:52,191
したがって、多項式の係数を必要な導関

151
00:08:52,191 --> 00:08:54,780
数に単純に設定する必要はありません。

152
00:08:54,780 --> 00:08:59,500
この効果を打ち消すには、適切な階乗で除算する必要があります。

153
00:08:59,500 --> 00:09:04,246
たとえば、4 番目の係数の x はコサイン 1 の

154
00:09:04,246 --> 00:09:09,540
4 階導関数ですが、4 階乗の 24 で除算されています。

155
00:09:09,540 --> 00:09:12,912
2 番目に注意すべきことは、この c4 に x を 4

156
00:09:12,912 --> 00:09:14,840
回かけるなど、新しい用語を追加

157
00:09:14,840 --> 00:09:18,333
しても、古い用語がどうあるべきかを台無しにしないということ

158
00:09:18,333 --> 00:09:20,140
です。 これは非常に重要です。

159
00:09:20,140 --> 00:09:23,523
たとえば、x が 0 に等しいこの多項式の

160
00:09:23,523 --> 00:09:27,830
2 階導関数は、高次の項を 導入した後でも、依然として

161
00:09:27,830 --> 00:09:31,060
2 番目の係数の 2 倍に等しくなります。

162
00:09:31,060 --> 00:09:34,217
そして、それは、x が 0 に等しいと差し込

163
00:09:34,217 --> 00:09:37,518
んでいるからで、すべて x を含む高次の項の

164
00:09:37,518 --> 00:09:40,820
2 次導関数はそのまま洗い流されてしまいます。

165
00:09:40,820 --> 00:09:44,360
同じことが他の導関数にも当てはまります。

166
00:09:44,360 --> 00:09:48,254
そのため、x が 0 に等 しい多項式の各

167
00:09:48,254 --> 00:09:52,680
導関数は、係数の 1 つだけによって制御されます。

168
00:09:52,680 --> 00:09:55,796
代わりに、x が pi に等しいなど、0

169
00:09:55,796 --> 00:09:59,802
以外の入力を近似する 場合、同じ効果を得るために、x

170
00:09:59,802 --> 00:10:03,215
から pi を引いた累乗、ま たは調べている入

171
00:10:03,215 --> 00:10:06,480
力の観点から多項式を記述する必要があります。

172
00:10:06,480 --> 00:10:10,461
これにより、著しく複雑に見えますが、ここで行っているこ

173
00:10:10,461 --> 00:10:14,442
とは、点 pi が 0 のように見え、動作することを確

174
00:10:14,442 --> 00:10:18,866
認することだけなので、x と pi を 代入すると、定数が

175
00:10:18,866 --> 00:10:22,700
1 つだけ残る、多くの優れたキャンセルが行われます。

176
00:10:22,700 --> 00:10:27,380
そして最後に、より哲学的なレベルで、ここで行ってい

177
00:10:27,380 --> 00:10:32,060
ることは基本的に 、単一点における関数の高次導関数

178
00:10:32,060 --> 00:10:35,429
に関する情報を取得し、それをその点

179
00:10:35,429 --> 00:10:40,109
付近の関数の値に関する情報に変換していることに注目

180
00:10:40,109 --> 00:10:41,420
してください。

181
00:10:41,420 --> 00:10:44,580
コサインの導関数は必要なだけ取得できます。

182
00:10:44,580 --> 00:10:48,553
この素晴らしい周期パターンに従い、x のコサイン、x

183
00:10:48,553 --> 00:10:52,380
の負のサイン、負のコサイン、サインが繰り返されます。

184
00:10:52,380 --> 00:10:54,734
これらのそれぞれの値は、x が 0

185
00:10:54,734 --> 00:10:57,350
に等しい場合に計算するのが簡単で、この

186
00:10:57,350 --> 00:10:59,836
循環パターンに 1、0、負の 1、0

187
00:10:59,836 --> 00:11:02,060
が与えられ、それが繰り返されます。

188
00:11:02,060 --> 00:11:06,169
そして、これらすべての高次導関数の値を知ることは、たと

189
00:11:06,169 --> 00:11:09,213
え単一の数値 (x が 0 に等しい)

190
00:11:09,213 --> 00:11:13,322
を代入するだけであっても、x のコサインに関する多くの

191
00:11:13,322 --> 00:11:14,540
情報となります。

192
00:11:14,540 --> 00:11:20,320
そこで、私たちが行っていることは、その情報を活用し

193
00:11:20,320 --> 00:11:24,545
てこの入力の近似値を取得することです。

194
00:11:24,545 --> 00:11:29,658
これを行うに は、同じ 1、0、負の 1、

195
00:11:29,658 --> 00:11:31,660
0、循環パターン。

196
00:11:31,660 --> 00:11:36,077
そのためには、多項式の各係数を同じパターンに従うだけで

197
00:11:36,077 --> 00:11:40,180
すが、それぞれを適切な階乗で除算する必要があります。

198
00:11:40,180 --> 00:11:43,909
前に述べたように、これは多くの電力ルール アプリ

199
00:11:43,909 --> 00:11:47,340
ケーションのカスケード効果を打ち消すものです。

200
00:11:47,340 --> 00:11:50,730
このプロセスを任意の時点で停止することで得られる多

201
00:11:50,730 --> 00:11:53,860
項式は、x の余弦のテイラー多項式と呼ばれます。

202
00:11:53,860 --> 00:11:57,780
より一般的に、したがってより抽象的に言えば、コサイン以外

203
00:11:57,780 --> 00:12:01,700
の関数を扱っている 場合、その導関数、二次導関数などを計

204
00:12:01,700 --> 00:12:04,500
算して、必要なだけ多くの項を取得し、そ

205
00:12:04,500 --> 00:12:06,740
れぞれを評価することになります。

206
00:12:06,740 --> 00:12:09,820
そのうちの x は 0 に等しくなります。

207
00:12:09,820 --> 00:12:13,961
多項式近似の場合、n 項に対する各 x

208
00:12:13,961 --> 00:12:18,102
の係数は、0 で評価された関 数の n

209
00:12:18,102 --> 00:12:23,900
階導関数の値を n 階乗で割った値でなければなりません。

210
00:12:23,900 --> 00:12:28,009
このやや抽象的な式全体は、テイラー多項式に触

211
00:12:28,009 --> 00:12:31,940
れるテキストやコースでよく目にするものです。

212
00:12:31,940 --> 00:12:35,610
これを見たとき、定数項によって多項式の値が f

213
00:12:35,610 --> 00:12:39,280
の値と一致することが保証されると考えてください。

214
00:12:39,280 --> 00:12:42,902
次の項は、多項式の傾きが x が 0 に等

215
00:12:42,902 --> 00:12:46,360
しい関数の傾きと一致することを保証します。

216
00:12:46,360 --> 00:12:50,601
次の項では、必要な項の数に応じて、その時点での傾き

217
00:12:50,601 --> 00:12:54,680
の変化率が同じになるようにします。 以下同様です。

218
00:12:54,680 --> 00:12:58,785
選択する項が多いほど近似は近づきますが、その代

219
00:12:58,785 --> 00:13:02,720
償として、得られる多項式はより複雑になります。

220
00:13:02,720 --> 00:13:06,518
そして、物事をさらに一般化するために、0 以外の入力

221
00:13:06,518 --> 00:13:10,597
(これを a と呼びます ) に近い値を近似したい場合は、

222
00:13:10,597 --> 00:13:13,833
この多項式を x のべき乗から a を引いた

223
00:13:13,833 --> 00:13:17,913
もので記述し、f の導関数をすべて評価することになります。

224
00:13:17,913 --> 00:13:19,320
その入力では、a.

225
00:13:19,320 --> 00:13:21,720
これは、テイラー多項式が完全に

226
00:13:21,720 --> 00:13:24,280
一般的にどのように見えるかです。

227
00:13:24,280 --> 00:13:30,263
a の値を変更すると、この近似が元の関数に近づくように変

228
00:13:30,263 --> 00:13:36,040
化し、その高次導関数が元の関数の導関数と等しくなります。

229
00:13:36,040 --> 00:13:39,660
これの最も単純で意味のある例の 1 つは、入力 x

230
00:13:39,660 --> 00:13:43,280
が 0 に等しい場合の x に対する関数 e です。

231
00:13:43,280 --> 00:13:46,075
導関数の計算は非常に素晴らしく、これ以上に素晴らし

232
00:13:46,075 --> 00:13:48,870
いものです。 e の x に対する導関数はそれ自体

233
00:13:48,870 --> 00:13:51,553
なので、2 番目の導関数も x に 対する e

234
00:13:51,553 --> 00:13:54,460
になり、その 3 番目の導関数も同様になるからです。

235
00:13:54,460 --> 00:13:57,891
したがって、x が 0 に等しい点では、これらはすべて

236
00:13:57,891 --> 00:13:59,240
1 に等しくなります。

237
00:13:59,240 --> 00:14:06,262
これが意味するのは、多項式近似は、必要な項の数に応じて、1

238
00:14:06,262 --> 00:14:13,051
プラス 1 倍 x プラス 1 の 2 倍 x 2 乗プ

239
00:14:13,051 --> 00:14:19,840
ラス 1 の 3 階乗倍 x 3 乗などのようになります。

240
00:14:19,840 --> 00:14:22,800
これらは、e から x までのテイラー多項式です。

241
00:14:22,800 --> 00:14:27,455
さて、それを基礎として、微積分のすべてのトピックが

242
00:14:27,455 --> 00:14:32,110
どのように関連し ているかを示すという精神で、テイ

243
00:14:32,110 --> 00:14:35,275
ラー多項式のこの 2 次の項を理

244
00:14:35,275 --> 00:14:40,116
解するための、まったく別の楽しい方法に移りましょう。

245
00:14:40,116 --> 00:14:41,420
幾何学的に。

246
00:14:41,420 --> 00:14:43,931
これは微積分の基本定理に関連しています。

247
00:14:43,931 --> 00:14:47,070
簡単な復習が 必要な場合は、第 1 章と第 8

248
00:14:47,070 --> 00:14:48,200
章で説明しました。

249
00:14:48,200 --> 00:14:52,389
これらのビデオで行ったように、固定の左点と可変の右点の

250
00:14:52,389 --> 00:14:56,280
間のグラフの下の面積を与える関数を考えてみましょう。

251
00:14:56,280 --> 00:15:00,852
ここでやろうとしているのは、これまでのようにグラフ自体の関

252
00:15:00,852 --> 00:15:05,120
数ではなく、この面積関数を近似する方法を考えることです。

253
00:15:05,120 --> 00:15:07,442
その領域に焦点を当てることで、

254
00:15:07,442 --> 00:15:09,920
二次項が飛び出すことになります。

255
00:15:09,920 --> 00:15:14,959
微積分の基本定理は、このグラフ自体が面積関数の導関

256
00:15:14,959 --> 00:15:19,998
数を表すということ です。 これは、面積の右端に

257
00:15:19,998 --> 00:15:25,239
dx をわずかに移動すると、グラフの高さ に dx

258
00:15:25,239 --> 00:15:30,480
を掛けた値にほぼ等しい新しい面積が得られるためです。

259
00:15:30,480 --> 00:15:33,270
この近似は、dx の選択肢がますます小さ

260
00:15:33,270 --> 00:15:36,060
くなるにつれて、ますます正確になります。

261
00:15:36,060 --> 00:15:40,378
しかし、0 に近づくことを意図していない x の変化を

262
00:15:40,378 --> 00:15:44,696
考慮して、この面積の変化をより正確にしたい場合は、ここ

263
00:15:44,696 --> 00:15:48,860
で、ほぼ三角形であるこの部分を考慮する必要があります。

264
00:15:48,860 --> 00:15:53,961
開始入力を a 、その上に微調整された入力を

265
00:15:53,961 --> 00:15:58,620
x と名付け、その変更を xa とします。

266
00:15:58,620 --> 00:16:03,778
その小さな三角形の底辺はその変化 xa であり、そ

267
00:16:03,778 --> 00:16:08,540
の高さはグラフの傾きに xa を掛けたものです。

268
00:16:08,540 --> 00:16:13,745
このグラフは面積関数の導関数であるため、その傾きは入力

269
00:16:13,745 --> 00:16:18,580
a で評価された面積関数の 2 次導関数になります。

270
00:16:18,580 --> 00:16:22,214
したがって、この三角形の面積 (底辺の 1/2

271
00:16:22,214 --> 00:16:26,454
と高さの積) は、a で評価されるこ の面積関数の 2

272
00:16:26,454 --> 00:16:29,331
次導関数の 1/2 に xa の 2

273
00:16:29,331 --> 00:16:31,300
乗を乗じたものになります。

274
00:16:31,300 --> 00:16:35,180
これはまさにテイラー多項式で見られるものです。

275
00:16:35,180 --> 00:16:40,797
点 a におけるこの面積関数のさまざまな微分情報がわかって

276
00:16:40,797 --> 00:16:46,040
いる場合、点 x における面積をどのように近似しますか?

277
00:16:46,040 --> 00:16:51,279
a、a の f までのすべての面積と、この長方形の面積

278
00:16:51,279 --> 00:16:56,518
(一 次導関数の xa 倍)、および小さな三角形の面積

279
00:16:56,518 --> 00:17:01,757
(二次導 関数の 1/2 倍) を含める必要があります。

280
00:17:01,757 --> 00:17:02,880
xの二乗。

281
00:17:02,880 --> 00:17:05,188
これは非常に気に入っています。

282
00:17:05,188 --> 00:17:08,506
すべてを書き出すと少し乱雑に見えますが、用語

283
00:17:08,506 --> 00:17:12,113
のそれぞれには非常に明確な意味があり、図上でポイン

284
00:17:12,113 --> 00:17:13,700
トするだけで済みます。

285
00:17:13,700 --> 00:17:16,446
必要に応じて、ここで終了と呼ぶこともできます。

286
00:17:16,446 --> 00:17:19,073
そうすれば、これらの テイラー多項式で近似

287
00:17:19,073 --> 00:17:21,700
するための非常に便利なツールが手に入ります。

288
00:17:21,700 --> 00:17:25,046
しかし、もしあなたが数学者のように考えているなら、

289
00:17:25,046 --> 00:17:28,393
立ち止まらずに無限に多く の項を追加することに意味

290
00:17:28,393 --> 00:17:31,740
があるのかどうかという疑問が生じるかもしれません。

291
00:17:31,740 --> 00:17:34,506
数学では、無限の和は級数と呼ばれます。

292
00:17:34,506 --> 00:17:37,856
そのため、有限数の項を含 むこれらの近似の

293
00:17:37,856 --> 00:17:41,205
1 つがテイラー多項式と呼ばれますが、無限に

294
00:17:41,205 --> 00:17:44,700
多くの項をすべて加算すると、いわゆるテイラー級数

295
00:17:44,700 --> 00:17:45,720
が得られます。

296
00:17:45,720 --> 00:17:49,248
無限級数という考え方には細心の注意が必要です。

297
00:17:49,248 --> 00:17:53,237
無限に 多くのものを足していくのは実際には意味がな

298
00:17:53,237 --> 00:17:57,840
く、電卓 のプラス ボタンを押す回数は限られているからです。

299
00:17:57,840 --> 00:18:02,218
しかし、各ステップで意味のある項をどんどん追加し

300
00:18:02,218 --> 00:18:06,596
ていくことで特定の値にどんどん近づいていく系列が

301
00:18:06,596 --> 00:18:10,800
ある場合、その系列はその値に収束すると言います。

302
00:18:10,800 --> 00:18:15,274
あるいは、この種の級数収束を含めるように等価性の定

303
00:18:15,274 --> 00:18:19,749
義を拡張することに抵抗がない場合は、級数全体、つま

304
00:18:19,749 --> 00:18:23,880
りこの無限和が収束する値に等しいと言うでしょう。

305
00:18:23,880 --> 00:18:27,728
たとえば、e から x までのテイラー多項式を見て

306
00:18:27,728 --> 00:18:31,280
、x が 1 に等しいなどの入力を差し込みます。

307
00:18:31,280 --> 00:18:35,130
多項式の項をさらに追加すると、総和は値 e

308
00:18:35,130 --> 00:18:40,030
にどんどん近づきま す。 そのため、この無限級数は数値

309
00:18:40,030 --> 00:18:42,830
e に収束すると言います。 あ

310
00:18:42,830 --> 00:18:48,080
るいは、同じことを言っていて、数値 e に等しいと言います。

311
00:18:48,080 --> 00:18:53,961
実際、x が 2 に等しいなど、x の他の値を代入し、こ

312
00:18:53,961 --> 00:18:59,640
の値での高次のテイラー多項式の値を見ると、それらは e

313
00:18:59,640 --> 00:19:05,320
に向かって x に収束することがわかります。 eの二乗。

314
00:19:05,320 --> 00:19:07,873
これらのテイラー多項式が入力 0

315
00:19:07,873 --> 00:19:12,080
で収集された導関数情報のみから構築されているとしても、

316
00:19:12,080 --> 00:19:16,436
これは、入力が 0 からどれだけ離れているかに関係なく、あ

317
00:19:16,436 --> 00:19:18,540
らゆる入力に当てはまります。

318
00:19:18,540 --> 00:19:22,122
このような場合、x に対する e はすべての入力

319
00:19:22,122 --> 00:19:25,847
x において独自のテイ ラー級数に等しいと言います。

320
00:19:25,847 --> 00:19:29,000
これは一種の魔法のようなことが起こります。

321
00:19:29,000 --> 00:19:32,127
これは、サインやコサインなど、他のいくつかの重要

322
00:19:32,127 --> 00:19:35,254
な関数にも当ては まりますが、場合によっては、こ

323
00:19:35,254 --> 00:19:37,600
れらの系列が、使用している導関数情

324
00:19:37,600 --> 00:19:40,727
報の入力を中心とした特定の範囲内でのみ収束するこ

325
00:19:40,727 --> 00:19:41,640
とがあります。

326
00:19:41,640 --> 00:19:44,142
入力 x が 1 に等しい x

327
00:19:44,142 --> 00:19:47,895
の自然対数のテイラー級数を計算 すると、これは

328
00:19:47,895 --> 00:19:51,648
x が 1 に等しいときの x の自然対数の高

329
00:19:51,648 --> 00:19:56,340
次導関数を評価することによって構築され、次のようになります。

330
00:19:56,340 --> 00:20:01,485
0 と 2 の間の入力を接続する場合、この系列の項をさらに

331
00:20:01,485 --> 00:20:06,460
追加すると、その入力の自然対数にどんどん近づいていきます。

332
00:20:06,460 --> 00:20:09,432
しかし、その範囲を少しでも外れると

333
00:20:09,432 --> 00:20:12,580
、このシリーズは何にも近づけません。

334
00:20:12,580 --> 00:20:18,260
さらに多くの用語を追加すると、合計は大きく前後します。

335
00:20:18,260 --> 00:20:21,390
ご想像のとおり、x の自然対数は 2

336
00:20:21,390 --> 00:20:24,850
を超える入力に対して完全 に適切に定義され

337
00:20:24,850 --> 00:20:28,640
ていますが、その値の自然対数には近づきません。

338
00:20:28,640 --> 00:20:32,603
ある意味では、x が 1 に等しいときの x

339
00:20:32,603 --> 00:20:36,740
の ln の導関数情報は、そこまで伝播しません。

340
00:20:36,740 --> 00:20:40,681
このような場合、級数の項を追加しても何も近づ

341
00:20:40,681 --> 00:20:44,280
かない場合、級数が分岐していると言います。

342
00:20:44,280 --> 00:20:48,601
そして、近似している入力と、これらの多項

343
00:20:48,601 --> 00:20:52,923
式の出力が実際に収束する点の間の最大距離

344
00:20:52,923 --> 00:20:57,040
は、テイラー級数の収束半径と呼ばれます。

345
00:20:57,040 --> 00:20:59,620
テイラー級数については学ぶべきことがまだ残っています。

346
00:20:59,620 --> 00:21:02,745
多くのユースケース、これらの近似の誤差に限界を設定

347
00:21:02,745 --> 00:21:05,870
するための戦 術、級数がいつ収束するか収束しないか

348
00:21:05,870 --> 00:21:08,995
を理解するためのテストがあ り、さらに言えば、微積

349
00:21:08,995 --> 00:21:11,620
分全体と触れられていない無数のトピックに

350
00:21:11,620 --> 00:21:14,120
ついては学ぶべきことがまだ残っています。

351
00:21:14,120 --> 00:21:15,620
このシリーズによって。

352
00:21:15,620 --> 00:21:19,919
これらのビデオの目的は、自信を持って効率的に学習し、

353
00:21:19,919 --> 00:21:24,218
場合によっては自分でさらに多くのトピックを再発見でき

354
00:21:24,218 --> 00:21:28,200
るようにするための基本的な直観を提供することです。

355
00:21:28,200 --> 00:21:33,780
テイラー級数の場合、そこにあるものをさらに探索すると

356
00:21:33,780 --> 00:21:39,153
きに覚えておくべき基本的な直観は、単一点の微分情報

357
00:21:39,153 --> 00:21:44,320
をその点の周囲の近似情報に変換するということです。

358
00:21:44,320 --> 00:21:45,771
このシリーズを応援してくださっ

359
00:21:45,771 --> 00:21:47,320
た皆様に改めて感謝申し上げます。

360
00:21:47,320 --> 00:21:48,854
次のシリーズは確率に基づいたものになるでしょう。

361
00:21:48,854 --> 00:21:50,261
ビデオが作成され たときに早期アクセスした

362
00:21:50,261 --> 00:21:51,540
い場合は、どこに行くべきか知っています。

