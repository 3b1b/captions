[
 {
  "input": "Last video I laid out the structure of a neural network.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   0.0,
   7.24
  ]
 },
 {
  "input": "I'll give a quick recap here so that it's fresh in our minds, and then I have two main goals for this video.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   7.24,
   13.16
  ]
 },
 {
  "input": "The first is to introduce the idea of gradient descent, which underlies not only how neural networks learn, but how a lot of other machine learning works as well.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   13.16,
   20.8
  ]
 },
 {
  "input": "Then after that we'll dig in a little more into how this particular network performs, and what those hidden layers of neurons end up looking for.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   20.8,
   29.56
  ]
 },
 {
  "input": "As a reminder, our goal here is the classic example of handwritten digit recognition, the hello world of neural networks.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   29.56,
   37.08
  ]
 },
 {
  "input": "These digits are rendered on a 28x28 pixel grid, each pixel with some grayscale value between 0 and 1.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   37.08,
   44.26
  ]
 },
 {
  "input": "Those are what determine the activations of 784 neurons in the input layer of the network.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   44.26,
   51.4
  ]
 },
 {
  "input": "The activation for each neuron in the following layers is based on a weighted sum of all the activations in the previous layer, plus some special number called a bias.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   51.4,
   62.3
  ]
 },
 {
  "input": "You compose that sum with some other function, like the sigmoid squishification, or a ReLU, the way I walked through last video.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   62.3,
   69.64
  ]
 },
 {
  "input": "In total, given the somewhat arbitrary choice of two hidden layers with 16 neurons each, the network has about 13,000 weights and biases that we can adjust, and it's these values that determine what exactly the network actually does.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   69.64,
   85.32
  ]
 },
 {
  "input": "And what we mean when we say that this network classifies a given digit is that the brightest of those 10 neurons in the final layer corresponds to that digit.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   85.32,
   94.08
  ]
 },
 {
  "input": "And remember, the motivation we had in mind for the layered structure was that maybe the second layer could pick up on the edges, the third layer might pick up on patterns like loops and lines, and the last one could just piece together those patterns to recognize digits.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   94.08,
   109.64
  ]
 },
 {
  "input": "So here, we learn how the network learns.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   109.64,
   112.88
  ]
 },
 {
  "input": "What we want is an algorithm where you can show this network a whole bunch of training data, which comes in the form of a bunch of different images of handwritten digits, along with labels for what they're supposed to be, and it'll adjust those 13,000 weights and biases so as to improve its performance on the training data.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   112.88,
   130.76
  ]
 },
 {
  "input": "Hopefully this layered structure will mean that what it learns generalizes to images beyond that training data.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   130.76,
   137.84
  ]
 },
 {
  "input": "The way we test that is that after you train the network, you show it more labeled data, and you see how accurately it classifies those new images.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   137.84,
   151.16
  ]
 },
 {
  "input": "Fortunately for us, and what makes this a common example to start with, is that the good people behind the MNIST database have put together a collection of tens of thousands of handwritten digit images, each labeled with the numbers they're supposed to be.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   151.16,
   165.08
  ]
 },
 {
  "input": "And as provocative as it is to describe a machine as learning, once you see how it works, it feels a lot less like some crazy sci-fi premise, and a lot more like a calculus exercise.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   165.08,
   175.56
  ]
 },
 {
  "input": "I mean, basically it comes down to finding the minimum of a certain function.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   175.56,
   181.04
  ]
 },
 {
  "input": "Remember, conceptually we're thinking of each neuron as being connected to all of the neurons in the previous layer, and the weights in the weighted sum defining its activation are kind of like the strengths of those connections, and the bias is some indication of whether that neuron tends to be active or inactive.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   181.04,
   199.78
  ]
 },
 {
  "input": "And to start things off, we're just going to initialize all of those weights and biases totally randomly.",
  "model": "nmt",
  "translatedText": "آخری ویڈیو میں نے نیورل نیٹ ورک کا ڈھانچہ پیش کیا۔ میں یہاں ایک فوری ریکیپ دوں گا تاکہ یہ ہمارے ذہنوں میں تازہ ہو، اور پھر اس ویڈیو کے لیے میرے دو اہم مقاصد ہیں۔ سب سے پہلے تدریجی نزول کے خیال کو متعارف کرانا ہے، جو نہ صرف اعصابی نیٹ ورکس کے سیکھنے کے طریقے پر مبنی ہے، بلکہ بہت سی دوسری مشین لرننگ بھی کیسے کام کرتی ہے۔ پھر اس کے بعد ہم تھوڑا اور کھوج لگائیں گے کہ یہ مخصوص نیٹ ورک کس طرح کام کرتا ہے، اور نیوران کی وہ پوشیدہ پرتیں کیا ڈھونڈتی ہیں۔ ایک یاد دہانی کے طور پر، ہمارا مقصد یہاں ہاتھ سے لکھے ہوئے ہندسوں کی شناخت کی بہترین مثال ہے، نیورل نیٹ ورکس کی ہیلو ورلڈ۔ یہ ہندسے 28x28 پکسل گرڈ پر پیش کیے گئے ہیں، ہر پکسل کی قدر 0 اور 1 کے درمیان ہے۔ یہ وہی ہیں جو نیٹ ورک کی ان پٹ پرت میں 784 نیوران کی فعالیت کا تعین کرتے ہیں۔ مندرجہ ذیل تہوں میں ہر نیوران کے لیے ایکٹیویشن پچھلی پرت میں تمام ایکٹیویشنز کے وزنی مجموعہ پر مبنی ہے، نیز کچھ خاص نمبر جنہیں تعصب کہا جاتا ہے۔ آپ اس رقم کو کسی اور فنکشن کے ساتھ تحریر کرتے ہیں، جیسے سگمائڈ اسکویشیفیکیشن، یا ایک ReLU، جس طرح میں نے پچھلی ویڈیو سے گزرا۔ مجموعی طور پر، 16 نیورونز کے ساتھ دو چھپی ہوئی تہوں کے کسی حد تک من مانی انتخاب کو دیکھتے ہوئے، نیٹ ورک میں تقریباً 13,000 وزن اور تعصبات ہیں جنہیں ہم ایڈجسٹ کر سکتے ہیں، اور یہی قدریں اس بات کا تعین کرتی ہیں کہ نیٹ ورک اصل میں کیا کرتا ہے۔ اور جب ہم کہتے ہیں کہ یہ نیٹ ورک کسی عدد کی درجہ بندی کرتا ہے تو ہمارا مطلب یہ ہے کہ آخری تہہ میں موجود ان 10 نیورونز میں سے سب سے روشن اس ہندسے کے مطابق ہے۔ اور یاد رکھیں، پرتوں والے ڈھانچے کے لیے ہمارے ذہن میں جو محرک تھا وہ یہ تھا کہ شاید دوسری پرت کناروں پر اُٹھ سکتی ہے، تیسری پرت لوپس اور لائنوں جیسے نمونوں پر اُٹھ سکتی ہے، اور آخری پرت ان نمونوں کو جوڑ سکتی ہے۔ ہندسوں کو پہچانیں۔ تو یہاں، ہم سیکھتے ہیں کہ نیٹ ورک کیسے سیکھتا ہے۔ ہم جو چاہتے ہیں وہ ایک الگورتھم ہے جہاں آپ اس نیٹ ورک کو تربیتی اعداد و شمار کا ایک پورا گروپ دکھا سکتے ہیں، جو ہاتھ سے لکھے ہندسوں کی مختلف تصاویر کے ایک گروپ کی شکل میں آتا ہے، اس کے ساتھ ساتھ ان کے لیبلز کے ساتھ کہ وہ کیا ہونا چاہیے، اور یہ ان 13,000 وزنوں اور تعصبات کو ایڈجسٹ کریں تاکہ تربیتی ڈیٹا پر اس کی کارکردگی کو بہتر بنایا جا سکے۔ امید ہے کہ اس تہہ دار ڈھانچے کا مطلب یہ ہوگا کہ یہ جو کچھ سیکھتا ہے وہ اس تربیتی ڈیٹا سے باہر کی تصاویر کو عام کرتا ہے۔ جس طرح سے ہم جانچتے ہیں کہ آپ نیٹ ورک کو تربیت دینے کے بعد، آپ اسے مزید لیبل والا ڈیٹا دکھاتے ہیں، اور آپ دیکھتے ہیں کہ یہ ان نئی تصاویر کو کس حد تک درست طریقے سے درجہ بندی کرتا ہے۔ خوش قسمتی سے ہمارے لیے، اور جس چیز کے ساتھ یہ ایک عام مثال بنتی ہے، وہ یہ ہے کہ MNIST ڈیٹا بیس کے پیچھے اچھے لوگوں نے دسیوں ہزار ہاتھ سے لکھی ہندسوں کی تصاویر کا ایک مجموعہ جمع کیا ہے، ہر ایک پر ان نمبروں کے ساتھ لیبل لگا ہوا ہے جو وہ ہونے چاہئیں۔ اور جتنا اشتعال انگیز ہے کسی مشین کو سیکھنے کے طور پر بیان کرنا، ایک بار جب آپ دیکھتے ہیں کہ یہ کیسے کام کرتی ہے، تو یہ کچھ پاگل سائنس فائی بنیاد کی طرح بہت کم محسوس ہوتی ہے، اور بہت زیادہ کیلکولس ورزش کی طرح۔ میرا مطلب ہے، بنیادی طور پر یہ کسی خاص فنکشن کی کم از کم تلاش کرنے پر آتا ہے۔ یاد رکھیں، تصوراتی طور پر ہم ہر نیوران کے بارے میں سوچ رہے ہیں کہ وہ پچھلی پرت کے تمام نیورانوں سے جڑا ہوا ہے، اور اس کے ایکٹیویشن کی وضاحت کرنے والے وزنی رقم میں وزن ان کنکشنز کی طاقتوں کی طرح ہے، اور تعصب اس کا کچھ اشارہ ہے۔ چاہے وہ نیوران فعال ہو یا غیر فعال۔ اور چیزوں کو شروع کرنے کے لئے، ہم صرف ان تمام وزنوں اور تعصبات کو مکمل طور پر تصادفی طور پر شروع کرنے جا رہے ہیں۔ یہ کہنے کی ضرورت نہیں ہے کہ یہ نیٹ ورک دی گئی تربیتی مثال پر خوفناک کارکردگی کا مظاہرہ کرنے والا ہے، کیونکہ یہ صرف بے ترتیب کچھ کر رہا ہے۔ مثال کے طور پر، آپ 3 کی اس تصویر میں فیڈ کرتے ہیں، اور آؤٹ پٹ پرت بالکل گڑبڑ کی طرح دکھائی دیتی ہے۔ لہذا آپ جو کرتے ہیں وہ ایک لاگت کے فنکشن کی وضاحت کرتا ہے، کمپیوٹر کو بتانے کا ایک طریقہ، نہیں، خراب کمپیوٹر، اس آؤٹ پٹ میں ایکٹیویشن ہونی چاہیے جو زیادہ تر نیوران کے لیے 0 ہیں، لیکن اس نیوران کے لیے 1۔ جو تم نے مجھے دیا وہ بالکل ردی ہے۔ یہ کہنے کے لیے کہ تھوڑا سا اور ریاضیاتی طور پر، آپ ان میں سے ہر ایک کوڑے دان کے آؤٹ پٹ ایکٹیویشن اور اس قدر کے درمیان فرق کے مربعوں کو جوڑتے ہیں جو آپ چاہتے ہیں کہ ان کے پاس ہوں، اور اسے ہم ایک تربیتی مثال کی قیمت کہیں گے۔ نوٹ کریں کہ جب نیٹ ورک اعتماد کے ساتھ تصویر کی صحیح درجہ بندی کرتا ہے تو یہ رقم چھوٹی ہوتی ہے، لیکن یہ بڑی ہوتی ہے جب نیٹ ورک ایسا لگتا ہے کہ یہ نہیں جانتا کہ وہ کیا کر رہا ہے۔ تو پھر آپ جو کرتے ہیں وہ یہ ہے کہ آپ کے اختیار میں موجود دسیوں ہزار تربیتی مثالوں میں سے تمام اوسط لاگت پر غور کریں۔ یہ اوسط لاگت ہمارا پیمانہ ہے کہ نیٹ ورک کتنا گھٹیا ہے، اور کمپیوٹر کو کتنا برا محسوس ہونا چاہیے۔ اور یہ ایک پیچیدہ چیز ہے۔ یاد رکھیں کہ نیٹ ورک بنیادی طور پر کس طرح ایک فنکشن تھا، جو 784 نمبروں کو ان پٹ، پکسل ویلیوز کے طور پر لیتا ہے، اور اس کے آؤٹ پٹ کے طور پر 10 نمبروں کو نکالتا ہے، اور ایک لحاظ سے یہ ان تمام وزنوں اور تعصبات سے پیرامیٹرائز ہوتا ہے؟ لاگت کا فنکشن اس کے اوپر پیچیدگی کی ایک پرت ہے۔ یہ ان 13,000 یا اس سے زیادہ وزن اور تعصبات کو اپنے ان پٹ کے طور پر لیتا ہے، اور یہ بتاتا ہے کہ وہ وزن اور تعصبات کتنے خراب ہیں، اور جس طرح سے اس کی وضاحت کی گئی ہے اس کا انحصار تربیتی ڈیٹا کے دسیوں ہزار ٹکڑوں پر نیٹ ورک کے رویے پر ہوتا ہے۔ یہ بہت سوچنے کی بات ہے۔ لیکن کمپیوٹر کو صرف یہ بتانا کہ وہ کیا گھٹیا کام کر رہا ہے زیادہ مددگار نہیں ہے۔ آپ اسے بتانا چاہتے ہیں کہ ان وزنوں اور تعصبات کو کیسے تبدیل کیا جائے تاکہ یہ بہتر ہو جائے۔ اسے آسان بنانے کے لیے، 13,000 ان پٹ کے ساتھ کسی فنکشن کا تصور کرنے کے لیے جدوجہد کرنے کے بجائے، صرف ایک سادہ فنکشن کا تصور کریں جس میں ایک نمبر بطور ان پٹ اور ایک نمبر آؤٹ پٹ کے طور پر ہو۔ آپ کو ایک ان پٹ کیسے ملتا ہے جو اس فنکشن کی قدر کو کم کرتا ہے؟ کیلکولس کے طلباء کو معلوم ہوگا کہ آپ بعض اوقات اس کم از کم واضح طور پر اندازہ لگا سکتے ہیں، لیکن یہ واقعی پیچیدہ افعال کے لیے ہمیشہ ممکن نہیں ہوتا، یقیناً ہمارے پاگل پیچیدہ نیورل نیٹ ورک کی لاگت کے فنکشن کے لیے اس صورت حال کے 13,000 ان پٹ ورژن میں نہیں۔ ایک زیادہ لچکدار حربہ یہ ہے کہ کسی بھی ان پٹ سے آغاز کریں، اور یہ معلوم کریں کہ اس آؤٹ پٹ کو کم کرنے کے لیے آپ کو کس سمت کو قدم رکھنا چاہیے۔ خاص طور پر، اگر آپ اس فنکشن کی ڈھلوان کا پتہ لگا سکتے ہیں جہاں آپ ہیں، تو بائیں طرف شفٹ کریں اگر وہ ڈھلوان مثبت ہے، اور اگر وہ ڈھلوان منفی ہے تو ان پٹ کو دائیں طرف شفٹ کریں۔ اگر آپ یہ بار بار کرتے ہیں، ہر ایک نقطہ پر نئی ڈھلوان کی جانچ کرتے ہوئے اور مناسب قدم اٹھاتے ہوئے، آپ فنکشن کے کچھ مقامی کم از کم سے رجوع کرنے جا رہے ہیں۔ اور یہاں جو تصویر آپ کے ذہن میں ہو گی وہ ایک گیند ہے جو ایک پہاڑی سے نیچے گر رہی ہے۔ اور نوٹس کریں، یہاں تک کہ اس واقعی آسان بنائے گئے واحد ان پٹ فنکشن کے لیے، بہت سی ممکنہ وادیوں میں آپ اتر سکتے ہیں، اس پر منحصر ہے کہ آپ کس بے ترتیب ان پٹ سے شروع کرتے ہیں، اور اس بات کی کوئی گارنٹی نہیں ہے کہ آپ جس مقامی کم از کم میں اتریں گے وہ سب سے چھوٹی ممکنہ قیمت ہوگی۔ لاگت کی تقریب.",
  "time_range": [
   199.78,
   205.02
  ]
 },
 {
  "input": "Needless to say, this network is going to perform horribly on a given training example, since it's just doing something random.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   205.02,
   211.18
  ]
 },
 {
  "input": "For example, you feed in this image of a 3, and the output layer just looks like a mess.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   211.18,
   216.82
  ]
 },
 {
  "input": "So what you do is define a cost function, a way of telling the computer, no, bad computer, that output should have activations which are 0 for most neurons, but 1 for this neuron.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   216.82,
   228.98
  ]
 },
 {
  "input": "What you gave me is utter trash.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   228.98,
   231.74
  ]
 },
 {
  "input": "To say that a little more mathematically, you add up the squares of the differences between each of those trash output activations and the value you want them to have, and this is what we'll call the cost of a single training example.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   231.74,
   246.02
  ]
 },
 {
  "input": "Notice this sum is small when the network confidently classifies the image correctly, but it's large when the network seems like it doesn't know what it's doing.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   246.02,
   258.82
  ]
 },
 {
  "input": "So then what you do is consider the average cost over all of the tens of thousands of training examples at your disposal.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   258.82,
   267.58
  ]
 },
 {
  "input": "This average cost is our measure for how lousy the network is, and how bad the computer should feel.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   267.58,
   273.3
  ]
 },
 {
  "input": "And that's a complicated thing.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   273.3,
   275.3
  ]
 },
 {
  "input": "Remember how the network itself was basically a function, one that takes in 784 numbers as inputs, the pixel values, and spits out 10 numbers as its output, and in a sense it's parameterized by all these weights and biases?",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   275.3,
   289.7
  ]
 },
 {
  "input": "The cost function is a layer of complexity on top of that.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   289.7,
   293.34
  ]
 },
 {
  "input": "It takes as its input those 13,000 or so weights and biases, and spits out a single number describing how bad those weights and biases are, and the way it's defined depends on the network's behavior over all the tens of thousands of pieces of training data.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   293.34,
   309.14
  ]
 },
 {
  "input": "That's a lot to think about.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   309.14,
   312.46
  ]
 },
 {
  "input": "But just telling the computer what a crappy job it's doing isn't very helpful.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   312.46,
   316.38
  ]
 },
 {
  "input": "You want to tell it how to change those weights and biases so that it gets better.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   316.38,
   321.3
  ]
 },
 {
  "input": "To make it easier, rather than struggling to imagine a function with 13,000 inputs, just imagine a simple function that has one number as an input and one number as an output.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   321.3,
   331.44
  ]
 },
 {
  "input": "How do you find an input that minimizes the value of this function?",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   331.44,
   336.42
  ]
 },
 {
  "input": "Calculus students will know that you can sometimes figure out that minimum explicitly, but that's not always feasible for really complicated functions, certainly not in the 13,000 input version of this situation for our crazy complicated neural network cost function.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   336.42,
   351.64
  ]
 },
 {
  "input": "A more flexible tactic is to start at any input, and figure out which direction you should step to make that output lower.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   351.64,
   359.86
  ]
 },
 {
  "input": "Specifically, if you can figure out the slope of the function where you are, then shift to the left if that slope is positive, and shift the input to the right if that slope is negative.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   359.86,
   372.72
  ]
 },
 {
  "input": "If you do this repeatedly, at each point checking the new slope and taking the appropriate step, you're going to approach some local minimum of the function.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   372.72,
   380.68
  ]
 },
 {
  "input": "And the image you might have in mind here is a ball rolling down a hill.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   380.68,
   384.6
  ]
 },
 {
  "input": "And notice, even for this really simplified single input function, there are many possible valleys you might land in, depending on which random input you start at, and there's no guarantee that the local minimum you land in is going to be the smallest possible value of the cost function.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   384.6,
   399.46
  ]
 },
 {
  "input": "That's going to carry over to our neural network case as well.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   399.46,
   403.18
  ]
 },
 {
  "input": "And I also want you to notice how if you make your step sizes proportional to the slope, then when the slope is flattening out towards the minimum, your steps get smaller and smaller, and that kind of helps you from overshooting.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   403.18,
   416.02
  ]
 },
 {
  "input": "Bumping up the complexity a bit, imagine instead a function with two inputs and one output.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   416.02,
   421.64
  ]
 },
 {
  "input": "You might think of the input space as the xy-plane, and the cost function as being graphed as a surface above it.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   421.64,
   429.02
  ]
 },
 {
  "input": "Instead of asking about the slope of the function, you have to ask which direction you should step in this input space so as to decrease the output of the function most quickly.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   429.02,
   439.78
  ]
 },
 {
  "input": "In other words, what's the downhill direction?",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   439.78,
   442.34
  ]
 },
 {
  "input": "And again, it's helpful to think of a ball rolling down that hill.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   442.34,
   446.74
  ]
 },
 {
  "input": "Those of you familiar with multivariable calculus will know that the gradient of a function gives you the direction of steepest ascent, which direction should you step to increase the function most quickly.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   446.74,
   459.42
  ]
 },
 {
  "input": "Naturally enough, taking the negative of that gradient gives you the direction to step that decreases the function most quickly.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   459.42,
   467.46
  ]
 },
 {
  "input": "Even more than that, the length of this gradient vector is an indication for just how steep that steepest slope is.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   467.46,
   474.58
  ]
 },
 {
  "input": "Now if you're unfamiliar with multivariable calculus and want to learn more, check out some of the work I did for Khan Academy on the topic.",
  "model": "nmt",
  "translatedText": "یہ ہمارے نیورل نیٹ ورک کیس میں بھی لے جانے والا ہے۔ اور میں یہ بھی چاہتا ہوں کہ آپ یہ دیکھیں کہ اگر آپ اپنے قدموں کے سائز کو ڈھلوان کے متناسب بناتے ہیں، تو جب ڈھلوان کم سے کم کی طرف چپٹا ہوتا ہے، تو آپ کے قدم چھوٹے سے چھوٹے ہوتے جاتے ہیں، اور اس قسم سے آپ کو اوور شوٹنگ میں مدد ملتی ہے۔ پیچیدگی کو تھوڑا سا بڑھاتے ہوئے، دو ان پٹ اور ایک آؤٹ پٹ کے ساتھ ایک فنکشن کا تصور کریں۔ آپ ان پٹ کی جگہ کو xy-plane کے طور پر سوچ سکتے ہیں، اور لاگت کے فنکشن کو اس کے اوپر کی سطح کے طور پر گراف کیا جا رہا ہے۔ فنکشن کی ڈھلوان کے بارے میں پوچھنے کے بجائے، آپ کو یہ پوچھنا ہوگا کہ آپ کو اس ان پٹ اسپیس میں کس سمت جانا چاہئے تاکہ فنکشن کے آؤٹ پٹ کو تیزی سے کم کیا جاسکے۔ دوسرے الفاظ میں، نیچے کی سمت کیا ہے؟ اور ایک بار پھر، اس پہاڑی سے نیچے گرنے والی گیند کے بارے میں سوچنا مددگار ہے۔ آپ میں سے جو لوگ ملٹی ویری ایبل کیلکولس سے واقف ہیں وہ جانتے ہوں گے کہ فنکشن کا میلان آپ کو تیز ترین چڑھائی کی سمت دیتا ہے، فنکشن کو تیزی سے بڑھانے کے لیے آپ کو کس سمت میں قدم رکھنا چاہیے۔ قدرتی طور پر کافی ہے، اس میلان کے منفی کو لینے سے آپ کو قدم اٹھانے کی سمت ملتی ہے جو فنکشن کو تیزی سے کم کرتا ہے۔ اس سے بھی زیادہ، اس گریڈینٹ ویکٹر کی لمبائی اس بات کا اشارہ ہے کہ وہ سب سے کھڑی ڈھلوان کتنی کھڑی ہے۔ اب اگر آپ ملٹی ویری ایبل کیلکولس سے ناواقف ہیں اور مزید جاننا چاہتے ہیں تو اس موضوع پر خان اکیڈمی کے لیے میں نے کیا کچھ کام دیکھیں۔ سچ کہوں تو، اس وقت آپ اور میرے لیے جو چیز اہم ہے وہ یہ ہے کہ اصولی طور پر اس ویکٹر کی گنتی کرنے کا ایک طریقہ موجود ہے، یہ ویکٹر جو آپ کو بتاتا ہے کہ نیچے کی سمت کیا ہے اور یہ کتنی کھڑی ہے۔ آپ ٹھیک ہو جائیں گے اگر آپ صرف اتنا جانتے ہیں اور آپ تفصیلات پر ٹھوس نہیں ہیں۔ کیونکہ اگر آپ اسے حاصل کر سکتے ہیں تو، فنکشن کو کم سے کم کرنے کے لیے الگورتھم یہ ہے کہ اس گریڈینٹ سمت کی گنتی کی جائے، پھر نیچے کی طرف ایک چھوٹا سا قدم اٹھائیں، اور اسے بار بار دہرائیں۔ یہ ایک فنکشن کے لیے وہی بنیادی خیال ہے جس میں 2 ان پٹ کے بجائے 13,000 ان پٹ ہوتے ہیں۔ ہمارے نیٹ ورک کے تمام 13,000 وزنوں اور تعصبات کو ایک بڑے کالم ویکٹر میں ترتیب دینے کا تصور کریں۔ لاگت کے فنکشن کا منفی میلان صرف ایک ویکٹر ہے، یہ اس بے حد بڑی ان پٹ اسپیس کے اندر کچھ سمت ہے جو آپ کو بتاتی ہے کہ ان تمام نمبروں کو کون سا جھٹکا لگانا لاگت کے فنکشن میں تیزی سے کمی کا سبب بن رہا ہے۔ اور یقیناً، ہمارے خاص طور پر ڈیزائن کردہ لاگت کے فنکشن کے ساتھ، وزن اور تعصبات کو کم کرنے کے لیے تبدیل کرنے کا مطلب ہے کہ تربیتی ڈیٹا کے ہر ٹکڑے پر نیٹ ورک کا آؤٹ پٹ 10 اقدار کی بے ترتیب صف کی طرح کم نظر آتا ہے، اور ایک حقیقی فیصلہ جیسا کہ ہم چاہتے ہیں۔ یہ بنانے کے لئے.",
  "time_range": [
   474.58,
   481.1
  ]
 },
 {
  "input": "Honestly though, all that matters for you and me right now is that in principle there exists a way to compute this vector, this vector that tells you what the downhill direction is and how steep it is.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   481.1,
   492.04
  ]
 },
 {
  "input": "You'll be okay if that's all you know and you're not rock solid on the details.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   492.04,
   497.28
  ]
 },
 {
  "input": "Because if you can get that, the algorithm for minimizing the function is to compute this gradient direction, then take a small step downhill, and repeat that over and over.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   497.28,
   508.3
  ]
 },
 {
  "input": "It's the same basic idea for a function that has 13,000 inputs instead of 2 inputs.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   508.3,
   513.7
  ]
 },
 {
  "input": "Imagine organizing all 13,000 weights and biases of our network into a giant column vector.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   513.7,
   520.18
  ]
 },
 {
  "input": "The negative gradient of the cost function is just a vector, it's some direction inside this insanely huge input space that tells you which nudges to all of those numbers is going to cause the most rapid decrease to the cost function.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   520.18,
   535.9
  ]
 },
 {
  "input": "And of course, with our specially designed cost function, changing the weights and biases to decrease it means making the output of the network on each piece of training data look less like a random array of 10 values, and more like an actual decision we want it to make.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   535.9,
   551.28
  ]
 },
 {
  "input": "It's important to remember, this cost function involves an average over all of the training data, so if you minimize it, it means it's a better performance on all of those samples.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   551.28,
   564.26
  ]
 },
 {
  "input": "The algorithm for computing this gradient efficiently, which is effectively the heart of how a neural network learns, is called backpropagation, and it's what I'm going to be talking about next video.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   564.26,
   574.04
  ]
 },
 {
  "input": "There, I really want to take the time to walk through what exactly happens to each weight and bias for a given piece of training data, trying to give an intuitive feel for what's happening beyond the pile of relevant calculus and formulas.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   574.04,
   587.98
  ]
 },
 {
  "input": "Right here, right now, the main thing I want you to know, independent of implementation details, is that what we mean when we talk about a network learning is that it's just minimizing a cost function.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   587.98,
   599.32
  ]
 },
 {
  "input": "And notice, one consequence of that is that it's important for this cost function to have a nice smooth output, so that we can find a local minimum by taking little steps downhill.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   599.32,
   609.34
  ]
 },
 {
  "input": "This is why, by the way, artificial neurons have continuously ranging activations, rather than simply being active or inactive in a binary way, the way that biological neurons are.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   609.34,
   620.44
  ]
 },
 {
  "input": "This process of repeatedly nudging an input of a function by some multiple of the negative gradient is called gradient descent.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   620.44,
   626.96
  ]
 },
 {
  "input": "It's a way to converge towards some local minimum of a cost function, basically a valley in this graph.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   626.96,
   633.0
  ]
 },
 {
  "input": "I'm still showing the picture of a function with two inputs, of course, because nudges in a 13,000 dimensional input space are a little hard to wrap your mind around, but there is actually a nice non-spatial way to think about this.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   633.0,
   645.22
  ]
 },
 {
  "input": "Each component of the negative gradient tells us two things.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   645.22,
   649.1
  ]
 },
 {
  "input": "The sign, of course, tells us whether the corresponding component of the input vector should be nudged up or down.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   649.1,
   655.86
  ]
 },
 {
  "input": "But importantly, the relative magnitudes of all these components kind of tells you which changes matter more.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   655.86,
   665.62
  ]
 },
 {
  "input": "You see, in our network, an adjustment to one of the weights might have a much greater impact on the cost function than the adjustment to some other weight.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   665.62,
   674.98
  ]
 },
 {
  "input": "Some of these connections just matter more for our training data.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   674.98,
   679.44
  ]
 },
 {
  "input": "So a way you can think about this gradient vector of our mind-warpingly massive cost function is that it encodes the relative importance of each weight and bias, that is, which of these changes is going to carry the most bang for your buck.",
  "model": "nmt",
  "translatedText": "یہ یاد رکھنا ضروری ہے، اس لاگت کے فنکشن میں ٹریننگ کے تمام ڈیٹا پر اوسط شامل ہوتا ہے، لہذا اگر آپ اسے کم سے کم کرتے ہیں، تو اس کا مطلب ہے کہ یہ ان تمام نمونوں پر بہتر کارکردگی ہے۔ اس میلان کو مؤثر طریقے سے کمپیوٹنگ کرنے کے الگورتھم، جو مؤثر طریقے سے اس بات کا دل ہے کہ نیورل نیٹ ورک کیسے سیکھتا ہے، اسے بیک پروپیگیشن کہا جاتا ہے، اور یہ وہی ہے جو میں اگلی ویڈیو کے بارے میں بات کرنے جا رہا ہوں۔ وہاں، میں واقعی میں اس بات کو سمجھنے کے لیے وقت نکالنا چاہتا ہوں کہ تربیتی اعداد و شمار کے دیے گئے حصے کے لیے ہر وزن اور تعصب کے ساتھ کیا ہوتا ہے، متعلقہ کیلکولس اور فارمولوں کے ڈھیر سے باہر کیا ہو رہا ہے اس کے لیے ایک بدیہی احساس دلانے کی کوشش کرتا ہوں۔ یہیں، ابھی، بنیادی چیز جو میں آپ کو جاننا چاہتا ہوں، نفاذ کی تفصیلات سے آزاد، یہ ہے کہ جب ہم نیٹ ورک لرننگ کے بارے میں بات کرتے ہیں تو ہمارا مطلب یہ ہے کہ یہ صرف لاگت کے فنکشن کو کم کر رہا ہے۔ اور نوٹس کریں، اس کا ایک نتیجہ یہ ہے کہ لاگت کے اس فنکشن کے لیے یہ ضروری ہے کہ ہموار آؤٹ پٹ ہو، تاکہ ہم نیچے کی طرف تھوڑا سا قدم اٹھا کر مقامی کم از کم تلاش کر سکیں۔ یہی وجہ ہے کہ، ویسے، مصنوعی نیوران میں مسلسل ایکٹیویشنز ہوتی ہیں، بجائے اس کے کہ بائنری طریقے سے فعال یا غیر فعال ہونے کے، جس طرح سے حیاتیاتی نیوران ہوتے ہیں۔ کسی فنکشن کے ان پٹ کو منفی میلان کے کچھ ملٹیپل سے بار بار جھکانے کے اس عمل کو گریڈینٹ ڈیسنٹ کہا جاتا ہے۔ یہ کچھ مقامی کم از کم لاگت کے فنکشن کی طرف اکٹھا ہونے کا ایک طریقہ ہے، بنیادی طور پر اس گراف میں ایک وادی۔ میں اب بھی ایک فنکشن کی تصویر دو ان پٹ کے ساتھ دکھا رہا ہوں، یقیناً، کیونکہ 13,000 جہتی ان پٹ اسپیس میں nudges آپ کے دماغ کو سمیٹنا تھوڑا مشکل ہے، لیکن اس کے بارے میں سوچنے کا ایک اچھا غیر مقامی طریقہ ہے۔ منفی میلان کا ہر جزو ہمیں دو چیزیں بتاتا ہے۔ نشان، یقیناً، ہمیں بتاتا ہے کہ آیا ان پٹ ویکٹر کے متعلقہ جز کو اوپر یا نیچے کی طرف دھکیلنا چاہیے۔ لیکن اہم بات یہ ہے کہ ان تمام اجزاء کی نسبتی وسعت آپ کو بتاتی ہے کہ کون سی تبدیلی زیادہ اہمیت رکھتی ہے۔ آپ دیکھتے ہیں، ہمارے نیٹ ورک میں، کسی ایک وزن میں ایڈجسٹمنٹ کا لاگت کے فنکشن پر کسی دوسرے وزن میں ایڈجسٹمنٹ کے مقابلے میں بہت زیادہ اثر پڑ سکتا ہے۔ ان میں سے کچھ کنکشن ہمارے تربیتی ڈیٹا کے لیے زیادہ اہمیت رکھتے ہیں۔ تو ایک طریقہ جس سے آپ ہمارے دماغی طور پر بڑے پیمانے پر لاگت کے فنکشن کے اس تدریجی ویکٹر کے بارے میں سوچ سکتے ہیں وہ یہ ہے کہ یہ ہر وزن اور تعصب کی نسبتہ اہمیت کو انکوڈ کرتا ہے، یعنی، ان میں سے کون سی تبدیلی آپ کے پیسے کے لیے سب سے زیادہ اثر ڈالنے والی ہے۔ یہ واقعی سمت کے بارے میں سوچنے کا ایک اور طریقہ ہے۔ ایک آسان مثال لینے کے لیے، اگر آپ کے پاس ان پٹ کے طور پر دو متغیرات کے ساتھ کچھ فنکشن موجود ہے، اور یہ شمار کریں کہ کسی خاص نقطہ پر اس کا میلان 3,1 کے طور پر نکلتا ہے، تو ایک طرف آپ اس کی تشریح یہ کہہ سکتے ہیں کہ جب آپ اس ان پٹ پر کھڑے ہو کر، اس سمت میں حرکت کرنے سے فنکشن میں تیزی سے اضافہ ہوتا ہے، کہ جب آپ فنکشن کو ان پٹ پوائنٹس کے جہاز کے اوپر گراف کرتے ہیں، تو وہی ویکٹر آپ کو سیدھی اوپر کی سمت دیتا ہے۔ لیکن اسے پڑھنے کا ایک اور طریقہ یہ ہے کہ اس پہلے متغیر میں ہونے والی تبدیلیاں دوسرے متغیر میں ہونے والی تبدیلیوں کے مقابلے میں تین گنا زیادہ اہمیت رکھتی ہیں، کہ کم از کم متعلقہ ان پٹ کے پڑوس میں، x-value کو جھنجوڑنا آپ کے لیے بہت زیادہ دھڑکتا ہے۔ ہرن ٹھیک ہے، آئیے زوم آؤٹ کریں اور خلاصہ کریں کہ ہم اب تک کہاں ہیں۔ نیٹ ورک بذات خود یہ فنکشن ہے جس میں 784 ان پٹ اور 10 آؤٹ پٹس ہیں، جو ان تمام وزنی رقم کے لحاظ سے بیان کیے گئے ہیں۔ لاگت کا فنکشن اس کے اوپر پیچیدگی کی ایک پرت ہے۔ یہ 13,000 وزن اور تعصبات کو ان پٹ کے طور پر لیتا ہے، اور تربیتی مثالوں کی بنیاد پر گھٹیا پن کا ایک پیمانہ نکال دیتا ہے۔ لاگت کے فنکشن کا میلان اب بھی پیچیدگی کی ایک اور تہہ ہے۔ یہ ہمیں بتاتا ہے کہ ان تمام وزنوں اور تعصبات میں کون سے جھٹکے لاگت کے فنکشن کی قدر میں تیز ترین تبدیلی کا سبب بنتے ہیں، جس کی تشریح آپ یہ کہہ سکتے ہیں کہ کون سی تبدیلیاں جن میں وزن سب سے زیادہ اہمیت رکھتا ہے۔ لہذا جب آپ نیٹ ورک کو بے ترتیب وزن اور تعصبات کے ساتھ شروع کرتے ہیں، اور اس میلان نزول کے عمل کی بنیاد پر انہیں کئی بار ایڈجسٹ کرتے ہیں، تو یہ ان تصاویر پر کتنی اچھی کارکردگی کا مظاہرہ کرتا ہے جو اس نے پہلے کبھی نہیں دیکھا؟ جس کا میں نے یہاں بیان کیا ہے، ہر ایک میں 16 نیورونز کی دو چھپی ہوئی تہوں کے ساتھ، زیادہ تر جمالیاتی وجوہات کی بناء پر منتخب کیا گیا ہے، برا نہیں ہے، جو کہ اس کی نظر آنے والی تقریباً 96% نئی تصویروں کی درجہ بندی کرتا ہے۔ اور ایمانداری سے، اگر آپ ان میں سے کچھ مثالوں کو دیکھیں جن پر یہ گڑبڑ کرتا ہے، تو آپ اسے تھوڑا سا سست کرنے پر مجبور محسوس کرتے ہیں۔ اگر آپ پوشیدہ پرت کے ڈھانچے کے ساتھ کھیلتے ہیں اور کچھ موافقت کرتے ہیں، تو آپ اسے 98% تک حاصل کر سکتے ہیں۔ اور یہ بہت اچھا ہے!",
  "time_range": [
   679.44,
   694.1
  ]
 },
 {
  "input": "This really is just another way of thinking about direction.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   694.1,
   697.36
  ]
 },
 {
  "input": "To take a simpler example, if you have some function with two variables as an input, and compute that its gradient at some particular point comes out as 3,1, then on the one hand you can interpret that as saying that when you're standing at that input, moving along this direction increases the function most quickly, that when you graph the function above the plane of input points, that vector is what's giving you the straight uphill direction.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   697.36,
   723.2
  ]
 },
 {
  "input": "But another way to read that is to say that changes to this first variable have three times the importance as changes to the second variable, that at least in the neighborhood of the relevant input, nudging the x-value carries a lot more bang for your buck.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   723.2,
   737.74
  ]
 },
 {
  "input": "Alright, let's zoom out and sum up where we are so far.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   737.74,
   742.88
  ]
 },
 {
  "input": "The network itself is this function with 784 inputs and 10 outputs, defined in terms of all of these weighted sums.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   742.88,
   750.86
  ]
 },
 {
  "input": "The cost function is a layer of complexity on top of that.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   750.86,
   754.16
  ]
 },
 {
  "input": "It takes the 13,000 weights and biases as inputs, and spits out a single measure of lousiness based on the training examples.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   754.16,
   762.64
  ]
 },
 {
  "input": "The gradient of the cost function is one more layer of complexity still.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   762.64,
   767.52
  ]
 },
 {
  "input": "It tells us what nudges to all of these weights and biases cause the fastest change to the value of the cost function, which you might interpret as saying which changes to which weights matter the most.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   767.52,
   783.04
  ]
 },
 {
  "input": "So when you initialize the network with random weights and biases, and adjust them many times based on this gradient descent process, how well does it actually perform on images it's never seen before?",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   783.04,
   794.24
  ]
 },
 {
  "input": "The one I've described here, with the two hidden layers of 16 neurons each, chosen mostly for aesthetic reasons, is not bad, classifying about 96% of the new images it sees correctly.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   794.24,
   806.92
  ]
 },
 {
  "input": "And honestly, if you look at some of the examples it messes up on, you feel compelled to cut it a little slack.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   806.92,
   816.3
  ]
 },
 {
  "input": "If you play around with the hidden layer structure and make a couple tweaks, you can get this up to 98%.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   816.3,
   821.22
  ]
 },
 {
  "input": "And that's pretty good!",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   821.22,
   822.9
  ]
 },
 {
  "input": "It's not the best, you can certainly get better performance by getting more sophisticated than this plain vanilla network, but given how daunting the initial task is, I think there's something incredible about any network doing this well on images it's never seen before given that we never specifically told it what patterns to look for.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   822.9,
   842.0
  ]
 },
 {
  "input": "Originally, the way I motivated this structure was by describing a hope we might have, that the second layer might pick up on little edges, that the third layer would piece together those edges to recognize loops and longer lines, and that those might be pieced together to recognize digits.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   842.0,
   858.22
  ]
 },
 {
  "input": "So is this what our network is actually doing?",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   858.22,
   861.04
  ]
 },
 {
  "input": "Well, for this one at least, not at all.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   861.04,
   864.96
  ]
 },
 {
  "input": "Remember how last video we looked at how the weights of the connections from all the neurons in the first layer to a given neuron in the second layer can be visualized as a given pixel pattern that the second layer neuron is picking up on?",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   864.96,
   877.44
  ]
 },
 {
  "input": "Well, when we do that for the weights associated with these transitions, instead of picking up on isolated little edges here and there, they look, well, almost random, just with some very loose patterns in the middle.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   877.44,
   894.2
  ]
 },
 {
  "input": "It would seem that in the unfathomably large 13,000 dimensional space of possible weights and biases, our network found itself a happy little local minimum that, despite successfully classifying most images, doesn't exactly pick up on the patterns we might have hoped for.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   894.2,
   909.84
  ]
 },
 {
  "input": "And to really drive this point home, watch what happens when you input a random image.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   909.84,
   914.6
  ]
 },
 {
  "input": "If the system was smart, you might expect it to either feel uncertain, maybe not really activating any of those 10 output neurons or activating them all evenly, but instead it confidently gives you some nonsense answer, as if it feels as sure that this random noise is a 5 as it does that an actual image of a 5 is a 5.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   914.6,
   934.56
  ]
 },
 {
  "input": "Phrased differently, even if this network can recognize digits pretty well, it has no idea how to draw them.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   934.56,
   941.8
  ]
 },
 {
  "input": "A lot of this is because it's such a tightly constrained training setup.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   941.8,
   945.4
  ]
 },
 {
  "input": "I mean, put yourself in the network's shoes here.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   945.4,
   948.22
  ]
 },
 {
  "input": "From its point of view, the entire universe consists of nothing but clearly defined unmoving digits centered in a tiny grid, and its cost function never gave it any incentive to be anything but utterly confident in its decisions.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   948.22,
   962.16
  ]
 },
 {
  "input": "So with this as the image of what those second layer neurons are really doing, you might wonder why I would introduce this network with the motivation of picking up on edges and patterns.",
  "model": "nmt",
  "translatedText": "یہ سب سے بہتر نہیں ہے، آپ یقینی طور پر اس سادہ ونیلا نیٹ ورک سے زیادہ نفیس حاصل کر کے بہتر کارکردگی حاصل کر سکتے ہیں، لیکن یہ دیکھتے ہوئے کہ ابتدائی کام کتنا مشکل ہے، میں سمجھتا ہوں کہ کسی بھی نیٹ ورک کے بارے میں ایسی ناقابل یقین چیز ہے جو تصاویر پر یہ اچھی طرح سے کر رہی ہے اس سے پہلے کبھی نہیں دیکھا گیا کہ ہم کبھی بھی خاص طور پر یہ نہیں بتایا کہ کون سے نمونوں کی تلاش کرنی ہے۔ اصل میں، میں نے جس طرح سے اس ڈھانچے کی حوصلہ افزائی کی وہ اس امید کو بیان کرتے ہوئے تھا جو ہمیں ہو سکتی ہے، کہ دوسری تہہ چھوٹے کناروں پر اُٹھ سکتی ہے، کہ تیسری تہہ ان کناروں کو لوپس اور لمبی لکیروں کو پہچاننے کے لیے جوڑ دے گی، اور یہ کہ وہ ٹکڑے ٹکڑے ہو سکتے ہیں۔ ہندسوں کو پہچاننے کے لیے ایک ساتھ۔ تو کیا ہمارا نیٹ ورک دراصل یہی کر رہا ہے؟ ٹھیک ہے، اس کے لیے کم از کم، بالکل نہیں۔ یاد رکھیں کہ پچھلی ویڈیو میں ہم نے کس طرح دیکھا تھا کہ پہلی پرت کے تمام نیوران سے دوسری پرت میں دیئے گئے نیوران تک کنکشن کے وزن کو ایک دیئے گئے پکسل پیٹرن کے طور پر تصور کیا جا سکتا ہے جسے دوسری تہہ نیوران اٹھا رہا ہے؟ ٹھیک ہے، جب ہم ان ٹرانزیشنز سے وابستہ وزن کے لیے یہ کرتے ہیں، الگ تھلگ چھوٹے کناروں کو یہاں اور وہاں اٹھانے کے بجائے، وہ بالکل بے ترتیب نظر آتے ہیں، بس درمیان میں کچھ بہت ہی ڈھیلے نمونوں کے ساتھ۔ ایسا لگتا ہے کہ ممکنہ وزن اور تعصبات کی ناقابل یقین حد تک بڑی 13,000 جہتی جگہ میں، ہمارے نیٹ ورک نے اپنے آپ کو ایک خوش کن مقامی کم از کم پایا جو کہ کامیابی کے ساتھ زیادہ تر تصاویر کی درجہ بندی کرنے کے باوجود، ان نمونوں پر بالکل درست نہیں ہوتا جن کی ہم امید کر رہے تھے۔ اور واقعی اس مقام کو گھر پہنچانے کے لیے، دیکھیں کہ جب آپ بے ترتیب تصویر ڈالتے ہیں تو کیا ہوتا ہے۔ اگر سسٹم سمارٹ تھا، تو آپ اس سے یا تو غیر یقینی محسوس کرنے کی توقع کر سکتے ہیں، شاید ان 10 آؤٹ پٹ نیورونز میں سے کسی کو بھی چالو نہ کر رہے ہوں یا ان سب کو یکساں طور پر چالو نہ کر رہے ہوں، لیکن اس کے بجائے یہ آپ کو اعتماد کے ساتھ کچھ بکواس جواب دیتا ہے، گویا یہ یقینی طور پر محسوس ہوتا ہے کہ یہ بے ترتیب شور ایک 5 ہے جیسا کہ یہ کرتا ہے کہ 5 کی اصل تصویر 5 ہے۔ مختلف طریقے سے بیان کیا جائے، یہاں تک کہ اگر یہ نیٹ ورک ہندسوں کو اچھی طرح پہچان سکتا ہے، تو اسے اندازہ نہیں ہے کہ انہیں کس طرح کھینچنا ہے۔ اس میں سے بہت کچھ اس لیے ہے کہ یہ اس قدر سختی سے مجبور تربیتی سیٹ اپ ہے۔ میرا مطلب ہے، اپنے آپ کو یہاں نیٹ ورک کے جوتوں میں ڈالیں۔ اس کے نقطہ نظر سے، پوری کائنات ایک چھوٹے سے گرڈ میں مرکز میں واضح طور پر متعین غیر متحرک ہندسوں کے سوا کچھ پر مشتمل نہیں ہے، اور اس کی لاگت کی تقریب نے اسے اپنے فیصلوں پر مکمل اعتماد کے سوا کچھ بننے کی ترغیب نہیں دی۔ تو اس کے ساتھ اس تصویر کے طور پر کہ وہ دوسری پرت کے نیوران واقعی کیا کر رہے ہیں، آپ حیران ہوں گے کہ میں اس نیٹ ورک کو کناروں اور نمونوں کو اٹھانے کی ترغیب کے ساتھ کیوں متعارف کرواؤں گا۔ میرا مطلب ہے، یہ بالکل بھی ایسا نہیں ہے جو یہ کر رہا ہے۔ ٹھیک ہے، اس کا مقصد ہمارا آخری مقصد نہیں ہے، بلکہ ایک نقطہ آغاز ہے۔ سچ کہوں تو، یہ پرانی ٹیکنالوجی ہے، جس کی 80 اور 90 کی دہائیوں میں تحقیق کی گئی تھی، اور اس سے پہلے کہ آپ مزید تفصیلی جدید قسموں کو سمجھ سکیں، آپ کو اسے سمجھنے کی ضرورت ہے، اور یہ واضح طور پر کچھ دلچسپ مسائل کو حل کرنے کی صلاحیت رکھتی ہے، لیکن آپ جتنا زیادہ اس میں کھودیں گے وہ پوشیدہ پرتیں واقعی کر رہی ہیں، یہ جتنا کم ذہین لگتا ہے۔ نیٹ ورکس آپ کے سیکھنے کے طریقہ سے ایک لمحے کے لیے توجہ مرکوز کرنا، یہ صرف اس صورت میں ہوگا جب آپ کسی نہ کسی طرح یہاں موجود مواد کے ساتھ سرگرمی سے مشغول ہوجائیں۔ ایک بہت ہی آسان چیز جو میں آپ سے کرنا چاہتا ہوں وہ یہ ہے کہ ابھی توقف کریں اور ایک لمحے کے لیے گہرائی سے سوچیں کہ آپ اس سسٹم میں کیا تبدیلیاں لا سکتے ہیں اور اگر آپ چاہتے ہیں کہ یہ کناروں اور نمونوں جیسی چیزوں کو بہتر طریقے سے اٹھانا چاہتے ہیں تو یہ تصاویر کو کیسے سمجھتا ہے۔ لیکن اس سے بہتر، اصل میں مواد کے ساتھ مشغول ہونے کے لیے، میں گہرے سیکھنے اور اعصابی نیٹ ورکس پر مائیکل نیلسن کی کتاب کی سفارش کرتا ہوں۔ اس میں، آپ اس درست مثال کے لیے ڈاؤن لوڈ اور کھیلنے کے لیے کوڈ اور ڈیٹا تلاش کر سکتے ہیں، اور کتاب آپ کو قدم بہ قدم چلائے گی کہ وہ کوڈ کیا کر رہا ہے۔ حیرت انگیز بات یہ ہے کہ یہ کتاب مفت اور عوامی طور پر دستیاب ہے، لہذا اگر آپ اس سے کچھ حاصل کرتے ہیں، تو نیلسن کی کوششوں کے لیے عطیہ کرنے میں میرے ساتھ شامل ہونے پر غور کریں۔ میں نے تفصیل میں کچھ دوسرے وسائل کو بھی جوڑا ہے جو مجھے بہت پسند ہیں، بشمول Chris Ola کی غیر معمولی اور خوبصورت بلاگ پوسٹ اور ڈسٹل میں مضامین۔ گزشتہ چند منٹوں کے لیے چیزوں کو یہاں بند کرنے کے لیے، میں لیشا لی کے ساتھ کیے گئے انٹرویو کے ٹکڑوں میں واپس جانا چاہتا ہوں۔ آپ اسے آخری ویڈیو سے یاد کر سکتے ہیں، اس نے اپنا پی ایچ ڈی کام ڈیپ لرننگ میں کیا۔ اس چھوٹے سے ٹکڑوں میں، وہ دو حالیہ کاغذات کے بارے میں بات کرتی ہے جو واقعی اس بات کی کھوج لگاتے ہیں کہ تصویر کی شناخت کے کچھ جدید نیٹ ورک حقیقت میں کیسے سیکھ رہے ہیں۔ صرف اس بات کو ترتیب دینے کے لیے کہ ہم بات چیت میں کہاں تھے، پہلے پیپر نے ان میں سے ایک خاص طور پر گہرے نیورل نیٹ ورکس کو لیا جو تصویر کی شناخت میں واقعی اچھا ہے، اور اسے مناسب طریقے سے لیبل والے ڈیٹاسیٹ پر تربیت دینے کے بجائے، اس نے تربیت سے پہلے تمام لیبلز کو بدل دیا۔ ظاہر ہے کہ یہاں جانچ کی درستگی بے ترتیب سے بہتر نہیں ہوگی، کیوں کہ ہر چیز پر تصادفی طور پر لیبل لگا ہوا ہے۔ لیکن یہ پھر بھی وہی تربیت کی درستگی حاصل کرنے میں کامیاب تھا جیسا کہ آپ ایک مناسب لیبل والے ڈیٹاسیٹ پر کریں گے۔ بنیادی طور پر، اس مخصوص نیٹ ورک کے لیے لاکھوں وزن اس کے لیے صرف بے ترتیب ڈیٹا کو حفظ کرنے کے لیے کافی تھے، جس سے یہ سوال پیدا ہوتا ہے کہ کیا اس لاگت کے فنکشن کو کم سے کم کرنا دراصل تصویر میں موجود کسی بھی ساخت سے مطابقت رکھتا ہے، یا کیا یہ محض حفظ ہے؟.",
  "time_range": [
   962.16,
   970.32
  ]
 },
 {
  "input": "I mean, that's just not at all what it ends up doing.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   970.32,
   973.04
  ]
 },
 {
  "input": "Well, this is not meant to be our end goal, but instead a starting point.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   973.04,
   977.48
  ]
 },
 {
  "input": "Frankly, this is old technology, the kind researched in the 80s and 90s, and you do need to understand it before you can understand more detailed modern variants, and it clearly is capable of solving some interesting problems, but the more you dig into what those hidden layers are really doing, the less intelligent it seems.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   977.48,
   998.72
  ]
 },
 {
  "input": "Shifting the focus for a moment from how networks learn to how you learn, that'll only happen if you engage actively with the material here somehow.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   998.72,
   1007.16
  ]
 },
 {
  "input": "One pretty simple thing I want you to do is just pause right now and think deeply for a moment about what changes you might make to this system and how it perceives images if you wanted it to better pick up on things like edges and patterns.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   1007.16,
   1021.88
  ]
 },
 {
  "input": "But better than that, to actually engage with the material, I highly recommend the book by Michael Nielsen on deep learning and neural networks.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   1021.88,
   1029.72
  ]
 },
 {
  "input": "In it, you can find the code and the data to download and play with for this exact example, and the book will walk you through step by step what that code is doing.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   1029.72,
   1039.36
  ]
 },
 {
  "input": "What's awesome is that this book is free and publicly available, so if you do get something out of it, consider joining me in making a donation towards Nielsen's efforts.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   1039.36,
   1048.04
  ]
 },
 {
  "input": "I've also linked a couple other resources I like a lot in the description, including the phenomenal and beautiful blog post by Chris Ola and the articles in Distill.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   1048.04,
   1058.72
  ]
 },
 {
  "input": "To close things off here for the last few minutes, I want to jump back into a snippet of the interview I had with Leisha Lee.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   1058.72,
   1064.44
  ]
 },
 {
  "input": "You might remember her from the last video, she did her PhD work in deep learning.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   1064.44,
   1068.56
  ]
 },
 {
  "input": "In this little snippet, she talks about two recent papers that really dig into how some of the more modern image recognition networks are actually learning.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   1068.56,
   1076.38
  ]
 },
 {
  "input": "Just to set up where we were in the conversation, the first paper took one of these particularly deep neural networks that's really good at image recognition, and instead of training it on a properly labeled dataset, it shuffled all of the labels around before training.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   1076.38,
   1089.4
  ]
 },
 {
  "input": "Obviously the testing accuracy here was going to be no better than random, since everything's just randomly labeled.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   1089.4,
   1095.32
  ]
 },
 {
  "input": "But it was still able to achieve the same training accuracy as you would on a properly labeled dataset.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   1095.32,
   1101.44
  ]
 },
 {
  "input": "Basically, the millions of weights for this particular network were enough for it to just memorize the random data, which raises the question for whether minimizing this cost function actually corresponds to any sort of structure in the image, or is it just memorization?",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   1101.44,
   1116.72
  ]
 },
 {
  "input": ".",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   1116.72,
   1116.72
  ]
 },
 {
  "input": ".",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   1116.72,
   1116.72
  ]
 },
 {
  "input": ".",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   1116.72,
   1116.72
  ]
 },
 {
  "input": "to memorize the entire dataset of what the correct classification is.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   1116.72,
   1120.12
  ]
 },
 {
  "input": "And so a couple of, you know, half a year later at ICML this year, there was not exactly rebuttal paper, but paper that addressed some aspects of like, hey, actually these networks are doing something a little bit smarter than that.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   1120.12,
   1132.22
  ]
 },
 {
  "input": "If you look at that accuracy curve, if you were just training on a random dataset, that curve sort of went down very, you know, very slowly in almost kind of a linear fashion.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   1132.22,
   1145.28
  ]
 },
 {
  "input": "So you're really struggling to find that local minima of possible, you know, the right weights that would get you that accuracy.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   1145.28,
   1152.32
  ]
 },
 {
  "input": "Whereas if you're actually training on a structured dataset, one that has the right labels, you know, you fiddle around a little bit in the beginning, but then you kind of dropped very fast to get to that accuracy level.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   1152.32,
   1163.36
  ]
 },
 {
  "input": "And so in some sense it was easier to find that local maxima.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   1163.36,
   1168.58
  ]
 },
 {
  "input": "And so what was also interesting about that is it brings into light another paper from actually a couple of years ago, which has a lot more simplifications about the network layers.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   1168.58,
   1180.14
  ]
 },
 {
  "input": "But one of the results was saying how, if you look at the optimization landscape, the local minima that these networks tend to learn are actually of equal quality.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   1180.14,
   1189.4
  ]
 },
 {
  "input": "So in some sense, if your data set is structured, you should be able to find that much more easily.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   1189.4,
   1198.58
  ]
 },
 {
  "input": "My thanks as always to those of you supporting on Patreon.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   1198.58,
   1201.48
  ]
 },
 {
  "input": "I've said before just what a game changer on Patreon is, but these videos really would not be possible without you.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   1201.48,
   1207.16
  ]
 },
 {
  "input": "I also want to give a special thanks to the VC firm Amplify Partners and their support of these initial videos in the series.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   1207.16,
   1231.14
  ]
 },
 {
  "input": "Thank you.",
  "model": "nmt",
  "translatedText": "",
  "time_range": [
   1231.14,
   1231.14
  ]
 }
]