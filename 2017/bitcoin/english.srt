1
00:00:00,000 --> 00:00:09,660
What does it mean to have a Bitcoin? Many people have heard of Bitcoin, that it's

2
00:00:09,660 --> 00:00:14,120
a fully digital currency with no government to issue it, that no banks need to manage

3
00:00:14,120 --> 00:00:19,800
accounts and verify transactions, and that no one really knows who invented it. And yet

4
00:00:19,800 --> 00:00:25,320
many people don't know the answer to this question, at least not in full. To get there,

5
00:00:25,320 --> 00:00:29,940
and to make sure that the technical details underlying the answer actually feel motivated,

6
00:00:29,980 --> 00:00:34,660
we're going to walk through, step by step, how you might have invented your own version

7
00:00:34,660 --> 00:00:38,880
of Bitcoin. We'll start with you keeping track of payments with your friends using

8
00:00:38,880 --> 00:00:43,580
a communal ledger, and then as you start to trust your friends and the world around you

9
00:00:43,580 --> 00:00:47,900
less and less, and if you're clever enough to bring in a few ideas from cryptography

10
00:00:47,900 --> 00:00:52,900
to help circumvent the need for trust, what you end up with is what's called a cryptocurrency.

11
00:00:53,620 --> 00:01:00,120
Bitcoin is just the first implemented example of a cryptocurrency, and now there are thousands

12
00:01:00,120 --> 00:01:05,100
more on exchanges with traditional currencies. Walking the path of inventing your own can

13
00:01:05,100 --> 00:01:09,540
help to set the foundations for understanding some of the more recent players in the game,

14
00:01:09,540 --> 00:01:14,660
and recognizing when and why there's room for different design choices. In fact, one

15
00:01:14,660 --> 00:01:18,560
of the reasons I chose this topic is that in the last year there's been a huge amount

16
00:01:18,560 --> 00:01:25,280
of attention, investment, and hype directed at these currencies. I'm not going to comment

17
00:01:25,280 --> 00:01:29,700
or speculate on the current or future exchange rates, but I think we'd all agree that anyone

18
00:01:29,700 --> 00:01:34,680
looking to buy a cryptocurrency should really know what it is. And I don't just mean in

19
00:01:34,680 --> 00:01:40,280
terms of analogies with vague connections to gold mining, I mean an actual direct description

20
00:01:40,280 --> 00:01:46,920
of what the computers are doing when we send, receive, and create cryptocurrencies.

21
00:01:46,920 --> 00:01:51,400
One thing worth stressing is that even though you and I are going to dig into the details

22
00:01:51,400 --> 00:01:56,340
here, and that takes meaningful time, you don't actually need to know those details

23
00:01:56,340 --> 00:02:00,580
if you just want to use the cryptocurrency, just like you don't need to know the details

24
00:02:00,580 --> 00:02:05,400
of what happens under the hood when you swipe a credit card. Like any digital payment, there's

25
00:02:05,400 --> 00:02:09,760
lots of user-friendly applications that let you just send and receive the currencies without

26
00:02:09,760 --> 00:02:15,220
thinking about what's going on. The difference is that the backbone underlying this is not

27
00:02:15,220 --> 00:02:20,700
a bank that verifies transactions. Instead, it's a clever system of decentralized trustless

28
00:02:20,700 --> 00:02:25,980
verification based on some of the math born in cryptography.

29
00:02:25,980 --> 00:02:29,380
But to start, I want you to actually set aside the thought of cryptocurrencies and all that

30
00:02:29,380 --> 00:02:33,700
just for a few minutes. We're going to begin the story with something more down to earth,

31
00:02:33,700 --> 00:02:39,380
ledgers and digital signatures. If you and your friends exchange money pretty frequently,

32
00:02:39,380 --> 00:02:43,580
paying your share of the dinner bill and such, it can be inconvenient to exchange cash all

33
00:02:43,580 --> 00:02:46,940
the time. So you might keep a communal ledger that records

34
00:02:46,940 --> 00:02:52,820
all the payments you intend to make some point in the future. Alice pays Bob $20, Bob pays

35
00:02:52,820 --> 00:02:57,860
Charlie $40, things like that. This ledger is going to be something public and accessible

36
00:02:57,860 --> 00:03:02,620
to everyone, like a website where anyone can go and add new lines.

37
00:03:02,620 --> 00:03:06,100
And let's say at the end of every month you all get together, look at the list of

38
00:03:06,100 --> 00:03:10,580
transactions, and settle up. If you spent more than you received, you put that money

39
00:03:10,580 --> 00:03:15,480
in the pot, and if you received more than you spent, you take that money out.

40
00:03:15,480 --> 00:03:20,280
So the protocol for being part of this very simple system might look like this. Anyone

41
00:03:20,280 --> 00:03:24,900
can add lines to the ledger, and at the end of every month you all get together and settle

42
00:03:24,900 --> 00:03:28,300
up. Now one problem with a public ledger like

43
00:03:28,300 --> 00:03:33,920
this is that anyone can add a line. So what's to prevent Bob from going and writing Alice

44
00:03:33,920 --> 00:03:39,940
pays Bob $100 without Alice approving? How are we supposed to trust that all of these

45
00:03:39,940 --> 00:03:45,020
transactions are what the sender meant them to be?

46
00:03:45,020 --> 00:03:50,660
This is where the first bit of cryptography comes in, digital signatures. Like handwritten

47
00:03:50,660 --> 00:03:55,800
signatures, the idea here is that Alice should be able to add something next to that transaction

48
00:03:55,800 --> 00:04:01,260
that proves she has seen it and approved of it, and it should be infeasible for anyone

49
00:04:01,260 --> 00:04:07,380
else to forge that signature. At first, it might seem like a digital signature

50
00:04:07,380 --> 00:04:12,620
shouldn't even be possible. I mean, whatever data makes up that signature can just be read

51
00:04:12,620 --> 00:04:17,460
and copied by a computer. So how do you prevent forgeries?

52
00:04:17,460 --> 00:04:22,180
The way this works is that everyone generates what's called a public-key-private-key pair,

53
00:04:22,180 --> 00:04:26,420
each of which looks like some string of bits. The private key is sometimes also called a

54
00:04:26,420 --> 00:04:32,460
secret key, so we can abbreviate it as SK while abbreviating the public key as PK.

55
00:04:32,460 --> 00:04:37,140
Now as the name suggests, this secret key is something you want to keep to yourself.

56
00:04:37,140 --> 00:04:41,940
In the real world, your handwritten signature looks the same no matter what document you're

57
00:04:41,940 --> 00:04:46,780
signing. But a digital signature is actually much stronger, because it changes for different

58
00:04:46,780 --> 00:04:53,420
messages. It looks like some string of 1s and 0s, commonly something like 256 bits,

59
00:04:53,420 --> 00:04:58,700
and altering the message even slightly completely changes what the signature on that message

60
00:04:58,700 --> 00:05:03,220
should look like. Speaking a little more formally, producing

61
00:05:03,220 --> 00:05:08,200
a signature involves a function that depends both on the message itself and on your private

62
00:05:08,200 --> 00:05:13,540
key. The private key ensures that only you can produce that signature, and the fact that

63
00:05:13,540 --> 00:05:18,420
it depends on the message means that no one can just copy one of your signatures and forge

64
00:05:18,420 --> 00:05:23,320
it on another message. Hand-in-hand with this is a second function

65
00:05:23,320 --> 00:05:27,820
used to verify that a signature is valid, and this is where the public key comes into

66
00:05:27,820 --> 00:05:33,460
play. All it does is output true or false to indicate if this was a signature produced

67
00:05:33,460 --> 00:05:37,860
by the private key associated with the public key you're using for verification.

68
00:05:37,860 --> 00:05:43,260
I won't go into the details of how exactly both these functions work, but the idea is

69
00:05:43,260 --> 00:05:48,260
that it should be completely infeasible to find a valid signature if you don't know

70
00:05:48,260 --> 00:05:53,520
the secret key. Specifically, there's no strategy better than just guessing and checking

71
00:05:53,520 --> 00:05:59,080
random signatures, which you can check using the public key everyone knows.

72
00:05:59,080 --> 00:06:04,500
Now think about how many signatures there are with a length of 256 bits. That's 2

73
00:06:04,500 --> 00:06:11,520
to the power of 256! This is a stupidly large number. To call it astronomically large would

74
00:06:11,520 --> 00:06:16,840
be giving way too much credit to astronomy. In fact, I made a supplemental video devoted

75
00:06:16,840 --> 00:06:20,480
just to illustrating what a huge number this is.

76
00:06:20,480 --> 00:06:24,680
But here, let's just say that when you verify that a signature against a given message

77
00:06:24,680 --> 00:06:29,900
is valid, you can feel extremely confident that the only way someone could have produced

78
00:06:29,900 --> 00:06:37,360
it is if they knew the secret key associated with the public key you used for verification.

79
00:06:37,360 --> 00:06:41,880
Making sure people sign transactions on the ledger is pretty good, but there's one slight

80
00:06:41,880 --> 00:06:48,240
loophole. If Alice signs a transaction like Alice pays Bob $100, even though Bob can't

81
00:06:48,240 --> 00:06:52,760
forge Alice's signature on a new message, he could just copy that same line as many

82
00:06:52,760 --> 00:06:58,040
times as he wants. That message-signature combination remains valid.

83
00:06:58,040 --> 00:07:02,780
To get around this, we make it so that when you sign a transaction, the message has to

84
00:07:02,780 --> 00:07:08,860
also include some sort of unique ID associated with that transaction. That way, if Alice

85
00:07:08,860 --> 00:07:14,480
pays Bob $100 multiple times, each one of those lines on the ledger requires a completely

86
00:07:14,480 --> 00:07:18,400
new signature.

87
00:07:18,400 --> 00:07:23,600
Digital signatures remove a huge aspect of trust in this initial protocol. But even still,

88
00:07:23,600 --> 00:07:27,880
if you were to really do this, you would be relying on an honor system of sorts. Namely,

89
00:07:27,880 --> 00:07:31,860
you're trusting that everyone will actually follow through and settle up in cash at the

90
00:07:31,860 --> 00:07:37,680
end of each month. What if, for example, Charlie racks up thousands of dollars in debt and

91
00:07:37,680 --> 00:07:43,520
just refuses to show up? The only real reason to revert back to cash to settle up is if

92
00:07:43,560 --> 00:07:50,560
some people owe a lot of money. So maybe you have the clever idea that you never actually

93
00:07:50,720 --> 00:07:55,160
have to settle up in cash as long as you have some way to prevent people from spending too

94
00:07:55,160 --> 00:08:01,160
much more than they take in. Maybe you start by having everyone pay $100 into the pot,

95
00:08:01,160 --> 00:08:06,920
and then have the first few lines of the ledger read Alice gets $100, Bob gets $100, Charlie

96
00:08:06,920 --> 00:08:09,280
gets $100, etc.

97
00:08:09,280 --> 00:08:14,600
Now, just don't accept any transactions where someone is spending more than they already

98
00:08:14,600 --> 00:08:21,600
have on that ledger. For example, if the first two transactions are Charlie pays Alice $50

99
00:08:22,200 --> 00:08:28,880
and Charlie pays Bob $50, if he were to try to add Charlie pays you $20, that would be

100
00:08:28,880 --> 00:08:35,880
invalid, as invalid as if he had never signed it. Notice, this means that verifying a transaction

101
00:08:35,920 --> 00:08:42,200
requires knowing the full history of transactions up to that point. This is also going to be

102
00:08:42,200 --> 00:08:47,200
true in cryptocurrencies, though there is a little room for optimization.

103
00:08:47,200 --> 00:08:53,360
What's interesting here is that this step removes the connection between the ledger

104
00:08:53,360 --> 00:08:59,760
and actual physical US dollars. In theory, if everyone in the world was using this ledger,

105
00:08:59,760 --> 00:09:03,960
you could live your whole life just sending and receiving money on this ledger without

106
00:09:04,160 --> 00:09:09,160
having to convert to real US dollars. In fact, to emphasize this point, let's

107
00:09:09,160 --> 00:09:15,680
start referring to the quantities on the ledger as ledger dollars, or LD for short. You are

108
00:09:15,680 --> 00:09:21,520
free to exchange ledger dollars for real US dollars. For example, Alice gives Bob a $10

109
00:09:21,520 --> 00:09:26,560
bill in the real world in exchange for him adding and signing the transaction Bob pays

110
00:09:26,560 --> 00:09:33,460
Alice 10 ledger dollars to this communal ledger. But exchanges like that aren't guaranteed

111
00:09:33,460 --> 00:09:38,500
by the protocol. It's now more analogous to how you might exchange dollars for euros

112
00:09:38,500 --> 00:09:44,940
or any other currency on the open market. It's just its own independent thing.

113
00:09:44,940 --> 00:09:50,980
This is the first important thing to understand about Bitcoin, or any other cryptocurrency.

114
00:09:50,980 --> 00:09:57,980
What it is is a ledger. The history of transactions is the currency. Of course, with Bitcoin,

115
00:09:58,660 --> 00:10:02,640
money doesn't enter the ledger with people buying in using cash. I'll get to how new

116
00:10:02,640 --> 00:10:07,320
money enters the ledger in a few minutes. But before that, there's actually an even

117
00:10:07,320 --> 00:10:12,240
more significant difference between our current system of ledger dollars and how cryptocurrencies

118
00:10:12,240 --> 00:10:15,120
work. So far, I've said this ledger is in some

119
00:10:15,120 --> 00:10:20,020
public place, like a website where anyone can add new lines. But that would require

120
00:10:20,020 --> 00:10:25,960
trusting a central location, namely, who hosts the website, who controls the rules of adding

121
00:10:25,960 --> 00:10:31,880
new lines. To remove that bit of trust, we'll have everybody keep their own copy of the

122
00:10:31,880 --> 00:10:37,640
ledger. Then when you want to make a transaction, like Alice pays Bob 100 Ledger Dollars, you

123
00:10:37,640 --> 00:10:44,640
do broadcast that out into the world for people to hear and record on their own private ledgers.

124
00:10:45,240 --> 00:10:50,720
But unless you do something more, this system is absurdly bad. How could you get everyone

125
00:10:50,720 --> 00:10:55,900
to agree on what the right ledger is? When Bob receives a transaction, like Alice pays

126
00:10:55,900 --> 00:11:00,820
Bob 10 Ledger Dollars, how can he be sure that everyone else received and believes that

127
00:11:00,820 --> 00:11:05,220
same transaction? That he'll be able to later on go to Charlie and use those same

128
00:11:05,220 --> 00:11:10,500
10 Ledger Dollars to make a transaction? Really, imagine yourself just listening to

129
00:11:10,500 --> 00:11:15,860
transactions being broadcast. How can you be sure that everyone else is recording the

130
00:11:15,860 --> 00:11:21,660
same transactions and in the same order? This is really the heart of the issue. This

131
00:11:21,660 --> 00:11:26,740
is an interesting puzzle. Can you come up with a protocol for how to accept or reject

132
00:11:26,780 --> 00:11:31,940
transactions and in what order, so that you can feel confident that anyone else in the

133
00:11:31,940 --> 00:11:36,980
world who's following that same protocol has a personal ledger that looks the same

134
00:11:36,980 --> 00:11:43,980
as yours? This is the problem addressed in the original Bitcoin paper.

135
00:11:44,620 --> 00:11:49,300
At a high level, the solution that Bitcoin offers is to trust whichever ledger has the

136
00:11:49,300 --> 00:11:54,700
most computational work put into it. I'll take a moment to explain exactly what that

137
00:11:54,700 --> 00:12:00,660
means. It involves a cryptographic hash function. The general idea that we'll build to is

138
00:12:00,660 --> 00:12:06,140
that if you use computational work as a basis for what to trust, you can make it so that

139
00:12:06,140 --> 00:12:11,460
fraudulent transactions and conflicting ledgers would require an infeasible amount of computation

140
00:12:11,460 --> 00:12:16,340
to bring about. Again, I'll remind you that this is getting well into the weeds beyond

141
00:12:16,340 --> 00:12:20,240
what anyone would need to know just to use a currency like this.

142
00:12:20,240 --> 00:12:25,280
But it's a really cool idea, and if you understand it, you understand the heart of Bitcoin and

143
00:12:25,280 --> 00:12:30,880
of other cryptocurrencies. So first things first, what's a hash function?

144
00:12:30,880 --> 00:12:34,600
The inputs for one of these functions can be any kind of message or file, it really

145
00:12:34,600 --> 00:12:39,200
doesn't matter. And the output is a string of bits with some kind of fixed length, like

146
00:12:39,200 --> 00:12:46,240
256 bits. This output is called the hash, or digest of the message. And the intent is

147
00:12:46,240 --> 00:12:52,400
that it looks random. It's not random, it always gives the same output for a given input.

148
00:12:52,400 --> 00:12:58,040
But the idea is that if you slightly change the input, maybe editing just one of the characters,

149
00:12:58,040 --> 00:13:03,040
the resulting hash changes completely. In fact, for the hash function I'm showing

150
00:13:03,040 --> 00:13:10,520
here called SHA256, the way the output changes as you slightly change that input is entirely

151
00:13:10,520 --> 00:13:17,480
unpredictable. You see, this is not just any hash function, it's a cryptographic hash function.

152
00:13:17,480 --> 00:13:22,120
That means it's infeasible to compute in the reverse direction. If I show you some

153
00:13:22,120 --> 00:13:28,880
string of 1s and 0s, and ask you to find an input so that the SHA256 hash of that input

154
00:13:28,880 --> 00:13:35,280
gives this exact string of bits, you will have no better method than to just guess and check.

155
00:13:35,280 --> 00:13:39,680
And again, if you want to feel for how much computation would be needed to go through

156
00:13:39,680 --> 00:13:45,160
two to the 256 guesses, just take a look at the supplement video. I actually had way

157
00:13:45,160 --> 00:13:51,000
too much fun writing that thing. You might think that if you just really dig

158
00:13:51,000 --> 00:13:55,760
into the details of how exactly this function works, you could reverse engineer the appropriate

159
00:13:55,760 --> 00:14:01,440
input without having to guess and check. But no one has ever figured out a way to do that.

160
00:14:01,440 --> 00:14:06,400
Interestingly, there's no cold hard rigorous proof that it's hard to compute in the reverse

161
00:14:06,400 --> 00:14:12,480
direction. And yet, a huge amount of modern security depends on cryptographic hash functions

162
00:14:12,480 --> 00:14:16,920
and the idea that they have this property. If you were to look at what algorithms underlie

163
00:14:16,920 --> 00:14:21,040
the secure connection that your browser is making with YouTube right now, or that it

164
00:14:21,040 --> 00:14:27,440
makes with your bank, you will likely see the name SHA256 show up in there.

165
00:14:27,440 --> 00:14:32,080
For right now, our focus will just be on how such a function can prove that a particular

166
00:14:32,080 --> 00:14:38,360
list of transactions is associated with a large amount of computational effort.

167
00:14:38,360 --> 00:14:43,180
Imagine someone shows you a list of transactions, and they say, hey, I found a special number

168
00:14:43,180 --> 00:14:48,680
so that when you put that number at the end of this list of transactions and apply SHA256

169
00:14:48,680 --> 00:14:54,620
to the entire thing, the first 30 bits of that output are all zeros. How hard do you

170
00:14:54,620 --> 00:15:00,400
think it was for them to find that number? For a random message, the probability that

171
00:15:00,400 --> 00:15:07,720
a hash happens to start with 30 successive zeros is 1 in 230, which is about 1 in a

172
00:15:07,720 --> 00:15:13,720
billion. And because SHA256 is a cryptographic hash function, the only way to find a special

173
00:15:13,720 --> 00:15:18,680
number like that is just guessing and checking. So this person almost certainly had to go

174
00:15:18,680 --> 00:15:23,620
through about a billion different numbers before finding this special one. And once

175
00:15:23,620 --> 00:15:27,800
you know that number, it's really quick to verify, you just run the hash and see that

176
00:15:27,800 --> 00:15:31,800
there are 30 zeros. So in other words, you can verify that they

177
00:15:31,800 --> 00:15:37,420
went through a large amount of work, but without having to go through that same effort yourself.

178
00:15:37,420 --> 00:15:42,740
This is called a proof of work. And importantly, all of this work is intrinsically tied to

179
00:15:42,740 --> 00:15:48,240
the list of transactions. If you change one of those transactions, even slightly, it would

180
00:15:48,240 --> 00:15:52,720
completely change the hash. So you'd have to go through another billion guesses to find

181
00:15:52,720 --> 00:15:59,680
a new proof of work, a new number that makes it so that the hash of the list starts with

182
00:15:59,680 --> 00:16:03,480
30 zeros. So now think back to our distributed ledger

183
00:16:03,480 --> 00:16:08,340
situation. Everyone is there broadcasting transactions, and we want a way for them to

184
00:16:08,340 --> 00:16:14,080
agree on what the correct ledger is. As I said, the core idea behind the original Bitcoin

185
00:16:14,080 --> 00:16:19,440
paper is to have everyone trust whichever ledger has the most work put into it.

186
00:16:19,440 --> 00:16:24,060
The way this works is to first organize a given ledger into blocks, where each block

187
00:16:24,060 --> 00:16:29,080
consists of a list of transactions together with a proof of work, that is, a special number

188
00:16:29,080 --> 00:16:33,960
so that the hash of the whole block starts with a bunch of zeros. For the moment, let's

189
00:16:33,960 --> 00:16:39,340
say it has to start with 60 zeros, but later we'll return back to a more systematic way

190
00:16:39,340 --> 00:16:43,920
you might want to choose that number. In the same way that a transaction is only

191
00:16:43,920 --> 00:16:48,660
considered valid when it's signed by the sender, a block is only considered valid if

192
00:16:48,660 --> 00:16:53,280
it has a proof of work. Also, to make sure there's a standard order

193
00:16:53,280 --> 00:16:58,380
to these blocks, we'll make it so that a block has to contain the hash of the previous

194
00:16:58,380 --> 00:17:03,620
block at its header. That way, if you were to go back and change any one of the blocks,

195
00:17:03,620 --> 00:17:08,380
or to swap the order of two blocks, it would change the block that comes after it, which

196
00:17:08,380 --> 00:17:14,140
changes that block's hash, which changes the one that comes after it, and so on.

197
00:17:14,140 --> 00:17:18,300
That would require redoing all of the work, finding a new special number for each of these

198
00:17:18,340 --> 00:17:24,080
blocks that makes their hashes start with 60 zeros. Because blocks are chained together

199
00:17:24,080 --> 00:17:30,160
like this, instead of calling it a ledger, it's common to call it a block chain.

200
00:17:30,160 --> 00:17:35,340
As part of our updated protocol, we'll now allow anyone in the world to be a block creator.

201
00:17:35,340 --> 00:17:39,300
What that means is that they're going to listen for transactions being broadcast, collect

202
00:17:39,300 --> 00:17:43,760
them into some block, and then do a whole bunch of work to find a special number that

203
00:17:43,760 --> 00:17:48,800
makes the hash of that block start with 60 zeros. Once they find it, they broadcast out

204
00:17:48,800 --> 00:17:53,640
the block they found. To reward a block creator for all this work,

205
00:17:53,640 --> 00:17:57,960
when she puts together a block, we'll allow her to include a very special transaction

206
00:17:57,960 --> 00:18:03,720
at the top of it, in which she gets, say, 10 ledger dollars out of thin air. This is

207
00:18:03,720 --> 00:18:08,340
called the block reward, and it's an exception to our usual rules about whether or not to

208
00:18:08,340 --> 00:18:13,780
accept transactions. It doesn't come from anyone, so it doesn't have to be signed.

209
00:18:13,780 --> 00:18:18,900
It also means that the total number of ledger dollars in our economy increases with each

210
00:18:18,900 --> 00:18:25,340
new block. Creating blocks is often called mining, since it requires doing a lot of work,

211
00:18:25,340 --> 00:18:29,220
and it introduces new bits of currency into the economy.

212
00:18:29,220 --> 00:18:33,680
But when you hear or read about miners, keep in mind that what they're really doing is

213
00:18:33,680 --> 00:18:39,160
listening for transactions, creating blocks, broadcasting those blocks, and getting rewarded

214
00:18:39,160 --> 00:18:44,220
with new money for doing so. From the miners' perspective, each block

215
00:18:44,220 --> 00:18:48,360
is kind of like a miniature lottery, where everyone is guessing numbers as fast as they

216
00:18:48,360 --> 00:18:54,040
can until one lucky individual finds a special number that makes the hash of the block start

217
00:18:54,040 --> 00:18:59,720
with many zeros, and they get the reward. For anyone else who just wants to use this

218
00:18:59,720 --> 00:19:04,280
system to make payments, instead of listening for transactions, they all start listening

219
00:19:04,280 --> 00:19:09,040
just for blocks being broadcast by miners and updating their own personal copies of

220
00:19:09,040 --> 00:19:13,280
the blockchain. Now the key addition to our protocol is that

221
00:19:13,280 --> 00:19:18,680
if you hear two distinct blockchains with conflicting transaction histories, you defer

222
00:19:18,680 --> 00:19:24,400
to the longest one, the one with the most work put into it. If there's a tie, just

223
00:19:24,400 --> 00:19:28,800
wait until you hear an additional block that makes one of them longer.

224
00:19:28,800 --> 00:19:32,780
So even though there's no central authority, and everyone is maintaining their own copy

225
00:19:32,780 --> 00:19:37,620
of the blockchain, if everyone agrees to give preference to whichever blockchain has the

226
00:19:37,620 --> 00:19:43,680
most work put into it, we have a way to arrive at decentralized consensus.

227
00:19:43,680 --> 00:19:47,680
To see why this makes for a trustworthy system, and to understand at what point you should

228
00:19:47,680 --> 00:19:52,080
trust that a payment is legit, it's really helpful to walk through exactly what it would

229
00:19:52,080 --> 00:19:58,400
take to fool someone using this system. Maybe Alice is trying to fool Bob with a fraudulent

230
00:19:58,400 --> 00:20:04,520
block, namely she tries to send him one that includes her paying him 100 Ledger dollars,

231
00:20:04,520 --> 00:20:08,720
but without broadcasting that block to the rest of the network. That way everyone else

232
00:20:08,720 --> 00:20:14,280
still thinks she has those 100 Ledger dollars. To do this, she would have to find a valid

233
00:20:14,280 --> 00:20:19,640
proof of work before all the other miners, each working on their own block. And that

234
00:20:19,640 --> 00:20:23,960
could definitely happen, maybe Alice just happens to win this miniature lottery before

235
00:20:23,960 --> 00:20:30,120
everyone else. But Bob is still going to be hearing the broadcasts made by other miners,

236
00:20:30,120 --> 00:20:35,400
so to keep him believing this fraudulent block, Alice would have to do all the work herself

237
00:20:35,400 --> 00:20:40,180
to keep adding blocks on this special fork in Bob's blockchain that's different from

238
00:20:40,180 --> 00:20:45,520
what he's hearing from the rest of the miners. Remember, as per the protocol, Bob always

239
00:20:45,520 --> 00:20:51,120
trusts the longest chain he knows about. Alice might be able to keep this up for a

240
00:20:51,120 --> 00:20:56,320
few blocks if just by chance she finds blocks more quickly than the rest of the miners on

241
00:20:56,320 --> 00:21:02,480
the network all combined. But unless she has close to 50% of the computing resources among

242
00:21:02,480 --> 00:21:07,600
all of the miners, the probability becomes overwhelming that the blockchain that all

243
00:21:07,600 --> 00:21:12,840
of the other miners are working on grows faster than the single fraudulent blockchain Alice

244
00:21:12,840 --> 00:21:17,960
is feeding to Bob. So after enough time, Bob's just going to

245
00:21:17,960 --> 00:21:22,160
reject what he's hearing from Alice in favor of the longer chain that everyone else is

246
00:21:22,160 --> 00:21:29,720
working on. Notice, that means you shouldn't necessarily trust a new block you hear immediately,

247
00:21:29,720 --> 00:21:34,800
instead you should wait for several new blocks to be added on top of it. If you still haven't

248
00:21:34,800 --> 00:21:39,200
heard of any longer blockchains, you can trust that this block is part of the same chain

249
00:21:39,200 --> 00:21:46,000
that everyone else is using. And with that, we've hit all the main ideas.

250
00:21:46,040 --> 00:21:50,960
This distributed ledger system based on a proof of work is more or less how the Bitcoin

251
00:21:50,960 --> 00:21:55,800
protocol works, and how many other cryptocurrencies work. There's just a few details to clear

252
00:21:55,800 --> 00:21:59,760
up. Earlier I said that the proof of work might be to find a special number so that

253
00:21:59,760 --> 00:22:04,920
the hash of the block starts with 60 zeros. Well, the way the actual Bitcoin protocol

254
00:22:04,920 --> 00:22:10,160
works is to periodically change that number of zeros so that it should take, on average,

255
00:22:10,160 --> 00:22:15,960
10 minutes to find a new block. So as there are more and more miners added to the network,

256
00:22:16,000 --> 00:22:20,880
the challenge gets harder and harder in such a way that this miniature lottery only has

257
00:22:20,880 --> 00:22:27,280
about one winner every 10 minutes. Many newer cryptocurrencies have much shorter block times

258
00:22:27,280 --> 00:22:30,800
than that. And all of the money in Bitcoin ultimately

259
00:22:30,800 --> 00:22:36,400
comes from some block reward. In the beginning, these rewards were 50 Bitcoin per block. There's

260
00:22:36,400 --> 00:22:40,280
actually a great website you can go to called Block Explorer that makes it easy to look

261
00:22:40,280 --> 00:22:45,080
through the Bitcoin blockchain. And if you look at the very first few blocks on the chain,

262
00:22:45,080 --> 00:22:50,480
they contain no transactions other than that 50 Bitcoin reward to the miner. But every

263
00:22:50,480 --> 00:22:57,720
210,000 blocks, which is about every 4 years, that reward gets cut in half. So right now,

264
00:22:57,720 --> 00:23:03,400
the reward is 12.5 Bitcoin per block. And because this reward decreases geometrically

265
00:23:03,400 --> 00:23:09,920
over time, it means there will never be more than 21 million Bitcoin in existence.

266
00:23:09,920 --> 00:23:14,940
However, this doesn't mean that miners will stop earning money. In addition to the block

267
00:23:14,940 --> 00:23:19,760
reward, miners can also pick up transaction fees. The way this works is that whenever

268
00:23:19,760 --> 00:23:25,100
you make a payment, you can purely optionally include a transaction fee with it that will

269
00:23:25,100 --> 00:23:30,620
go to the miner of whichever block includes that payment. The reason you might do that

270
00:23:30,620 --> 00:23:35,780
is to incentivize miners to actually include the transaction you broadcast into the next

271
00:23:35,780 --> 00:23:39,160
block. You see, in Bitcoin, each block is limited

272
00:23:39,160 --> 00:23:47,120
to about 2400 transactions, which many critics argue is unnecessarily restrictive. For comparison,

273
00:23:47,120 --> 00:23:53,080
Visa processes an average of about 1700 transactions per second, and they're capable of handling

274
00:23:53,080 --> 00:24:00,020
more than 24,000 per second. This comparatively slow processing on Bitcoin makes for higher

275
00:24:00,020 --> 00:24:05,280
transaction fees, since that's what determines which transactions miners choose to include

276
00:24:05,280 --> 00:24:10,760
in a new block. All of this is far from a comprehensive coverage

277
00:24:10,760 --> 00:24:15,180
of cryptocurrencies. There are still many nuances and alternate design choices that

278
00:24:15,180 --> 00:24:19,760
I haven't even touched. But my hope is that this can provide a stable, Wait-but-why-style

279
00:24:19,760 --> 00:24:25,320
tree-trunk of understanding for anyone looking to add a few more branches with further reading.

280
00:24:25,320 --> 00:24:29,200
Like I said at the start, one of the motives behind this is that a lot of money has started

281
00:24:29,200 --> 00:24:33,080
flowing towards cryptocurrencies. And even though I don't want to make any claims about

282
00:24:33,080 --> 00:24:37,100
whether that's a good or bad investment, I really do think it's healthy for people

283
00:24:37,100 --> 00:24:41,640
getting into the game to at least know the fundamentals of the technology.

284
00:24:41,640 --> 00:24:46,160
As always, my sincerest thanks to those of you making this channel possible on Patreon.

285
00:24:46,160 --> 00:24:50,440
I understand that not everyone is in a position to contribute, but if you're still interested

286
00:24:50,440 --> 00:24:54,480
in helping out, one of the best ways to do that is simply to share videos that you think

287
00:24:54,480 --> 00:24:59,520
might be interesting or helpful to others. I know you know that, but it really does help.

