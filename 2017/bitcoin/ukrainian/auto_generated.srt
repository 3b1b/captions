1
00:00:00,000 --> 00:00:04,226
Що означає мати біткойн?

2
00:00:04,226 --> 00:00:09,315
Багато людей чули про біткойн, що це повністю цифрова валюта, яку не

3
00:00:09,315 --> 00:00:14,182
випускає уряд, що жодним банкам не потрібно керувати рахунками та

4
00:00:14,182 --> 00:00:19,271
перевіряти транзакції, і що ніхто насправді не знає, хто її винайшов.

5
00:00:19,271 --> 00:00:24,421
І все ж багато людей не знають відповіді на це запитання, принаймні не повної.

6
00:00:24,421 --> 00:00:28,181
Щоб досягти цього та переконатися, що технічні деталі, що лежать

7
00:00:28,181 --> 00:00:31,652
в основі відповіді, дійсно відчувають мотивацію, ми крок за

8
00:00:31,652 --> 00:00:35,180
кроком розповімо, як ви могли винайти власну версію біткойна.

9
00:00:35,180 --> 00:00:39,988
Ми почнемо з того, що ви будете відстежувати платежі з друзями за допомогою спільної

10
00:00:39,988 --> 00:00:44,513
книги, а потім, коли ви почнете все менше довіряти своїм друзям і світу навколо

11
00:00:44,513 --> 00:00:49,038
вас, і якщо ви достатньо кмітливі, щоб залучити кілька ідей з криптографії, щоб

12
00:00:49,038 --> 00:00:53,620
допомогти обійти потребу в довірі, ви отримаєте те, що називається криптовалютою.

13
00:00:53,620 --> 00:00:58,221
Біткойн є лише першим реалізованим прикладом криптовалюти,

14
00:00:58,221 --> 00:01:02,666
і зараз є тисячі інших на біржах з традиційними валютами.

15
00:01:02,666 --> 00:01:08,067
Пройшовши шлях винайдення власного, ви можете закласти основи для розуміння деяких

16
00:01:08,067 --> 00:01:13,858
нещодавніх гравців у грі та розпізнати, коли і чому є місце для різних варіантів дизайну.

17
00:01:13,858 --> 00:01:18,548
Насправді, одна з причин, чому я вибрав цю тему, полягає в тому, що за

18
00:01:18,548 --> 00:01:23,370
останній рік ці валюти привернули величезну увагу, інвестиції та ажіотаж.

19
00:01:23,370 --> 00:01:26,532
Я не збираюся коментувати чи спекулювати щодо поточних або

20
00:01:26,532 --> 00:01:29,855
майбутніх курсів валют, але я думаю, що ми всі погодимося, що

21
00:01:29,855 --> 00:01:33,232
кожен, хто хоче купити криптовалюту, повинен знати, що це таке.

22
00:01:33,232 --> 00:01:37,412
І я маю на увазі не лише аналогії з невизначеними зв’язками з

23
00:01:37,412 --> 00:01:41,795
видобутком золота, я маю на увазі фактичний прямий опис того, що

24
00:01:41,795 --> 00:01:46,920
роблять комп’ютери, коли ми надсилаємо, отримуємо та створюємо криптовалюти.

25
00:01:46,920 --> 00:01:51,125
Одна річ, яку варто підкреслити, полягає в тому, що хоча ми з вами збираємося тут

26
00:01:51,125 --> 00:01:55,330
розібратися в деталях, і це займе багато часу, вам насправді не потрібно знати ці

27
00:01:55,330 --> 00:01:59,432
деталі, якщо ви просто хочете використовувати криптовалюту, як і ви не потрібно

28
00:01:59,432 --> 00:02:03,637
знати деталі того, що відбувається під капотом, коли ви проводите кредитну картку.

29
00:02:03,637 --> 00:02:07,493
Як і будь-який цифровий платіж, існує багато зручних програм, які дозволяють

30
00:02:07,493 --> 00:02:11,600
вам просто надсилати й отримувати валюту, не замислюючись про те, що відбувається.

31
00:02:11,600 --> 00:02:17,229
Різниця полягає в тому, що основою цього є не банк, який перевіряє транзакції.

32
00:02:17,229 --> 00:02:21,604
Натомість це розумна система децентралізованої перевірки без довіри,

33
00:02:21,604 --> 00:02:25,980
яка базується на певній частині математики, народженої криптографією.

34
00:02:25,980 --> 00:02:28,343
Але для початку я хочу, щоб ви на кілька хвилин

35
00:02:28,343 --> 00:02:30,460
відкинули думки про криптовалюти та все це.

36
00:02:30,460 --> 00:02:32,922
Ми збираємося розпочати розповідь з чогось більш

37
00:02:32,922 --> 00:02:35,636
приземленого, бухгалтерських книг і цифрових підписів.

38
00:02:35,636 --> 00:02:39,619
Якщо ви та ваші друзі досить часто обмінюєтеся грошима, сплачуючи свою

39
00:02:39,619 --> 00:02:44,051
частину рахунку за вечерю тощо, може бути незручно постійно обмінювати готівку.

40
00:02:44,051 --> 00:02:47,598
Тож ви можете вести спільну книгу, у якій записуватимуться

41
00:02:47,598 --> 00:02:50,904
всі платежі, які ви збираєтеся здійснити в майбутньому.

42
00:02:50,904 --> 00:02:54,480
Аліса платить Бобу 20 доларів, Боб платить Чарлі 40 доларів тощо.

43
00:02:54,480 --> 00:02:58,550
Ця книга стане загальнодоступною та доступною для всіх, як

44
00:02:58,550 --> 00:03:02,620
веб-сайт, куди будь-хто зможе перейти та додати нові рядки.

45
00:03:02,620 --> 00:03:05,253
І, скажімо, наприкінці кожного місяця ви всі збираєтесь

46
00:03:05,253 --> 00:03:07,557
разом, дивитесь список транзакцій і погоджуєтеся.

47
00:03:07,557 --> 00:03:11,667
Якщо ви витратили більше, ніж отримали, ви кладете ці гроші в котел,

48
00:03:11,667 --> 00:03:15,480
а якщо ви отримали більше, ніж витратили, ви забираєте ці гроші.

49
00:03:15,480 --> 00:03:19,884
Отже, протокол для того, щоб бути частиною цієї дуже простої системи, може виглядати так.

50
00:03:19,884 --> 00:03:22,338
Будь-хто може додати рядки до бухгалтерської книги, і в

51
00:03:22,338 --> 00:03:25,054
кінці кожного місяця ви всі збираєтеся разом і розраховуєтеся.

52
00:03:25,054 --> 00:03:30,471
Одна проблема з такою публічною книгою полягає в тому, що кожен може додати рядок.

53
00:03:30,471 --> 00:03:34,024
Отже, що заважає Бобу піти і написати «Аліса платить

54
00:03:34,024 --> 00:03:36,571
Бобу 100 доларів без схвалення Аліси»?

55
00:03:36,571 --> 00:03:45,020
Як ми можемо вірити, що всі ці транзакції є такими, якими їх мав на увазі відправник?

56
00:03:45,020 --> 00:03:49,582
Ось тут і з’являється перша частина криптографії, цифрові підписи.

57
00:03:49,582 --> 00:03:54,096
Подібно до рукописних підписів, ідея полягає в тому, що Аліса повинна мати

58
00:03:54,096 --> 00:03:58,791
можливість додати щось поруч із цією транзакцією, що доводить, що вона бачила

59
00:03:58,791 --> 00:04:03,485
це та схвалила це, і будь-кому іншому має бути неможливо підробити цей підпис.

60
00:04:03,485 --> 00:04:08,910
Спочатку може здатися, що цифровий підпис взагалі неможливий.

61
00:04:08,910 --> 00:04:11,828
Я маю на увазі, будь-які дані, які складають цей підпис,

62
00:04:11,828 --> 00:04:14,694
можуть бути просто прочитані та скопійовані комп’ютером.

63
00:04:14,694 --> 00:04:17,460
Отже, як запобігти підробці?

64
00:04:17,460 --> 00:04:21,087
Це працює таким чином, що кожен генерує так звану пару відкритий

65
00:04:21,087 --> 00:04:24,324
ключ-приватний ключ, кожна з яких виглядає як рядок бітів.

66
00:04:24,324 --> 00:04:28,496
Приватний ключ іноді також називають секретним ключем, тому

67
00:04:28,496 --> 00:04:32,460
ми можемо скоротити його як SK, а відкритий ключ – як PK.

68
00:04:32,460 --> 00:04:37,140
Як випливає з назви, цей секретний ключ – це те, що ви хочете зберегти при собі.

69
00:04:37,140 --> 00:04:39,582
У реальному світі ваш власноручний підпис виглядає

70
00:04:39,582 --> 00:04:42,312
однаково незалежно від того, який документ ви підписуєте.

71
00:04:42,312 --> 00:04:44,949
Але цифровий підпис насправді набагато сильніший,

72
00:04:44,949 --> 00:04:47,427
оскільки він змінюється для різних повідомлень.

73
00:04:47,427 --> 00:04:53,639
Це виглядає як певний рядок з 1 і 0, зазвичай приблизно 256 біт, і навіть незначна

74
00:04:53,639 --> 00:04:59,925
зміна повідомлення повністю змінює те, як має виглядати підпис у цьому повідомленні.

75
00:04:59,925 --> 00:05:04,037
Говорячи трохи більш формально, створення підпису передбачає функцію,

76
00:05:04,037 --> 00:05:08,384
яка залежить як від самого повідомлення, так і від вашого закритого ключа.

77
00:05:08,384 --> 00:05:12,113
Закритий ключ гарантує, що лише ви можете створити цей підпис, а той

78
00:05:12,113 --> 00:05:16,058
факт, що він залежить від повідомлення, означає, що ніхто не може просто

79
00:05:16,058 --> 00:05:20,003
скопіювати один із ваших підписів і підробити його в іншому повідомленні.

80
00:05:20,003 --> 00:05:23,947
Пліч-о-пліч із цим є друга функція, яка використовується для

81
00:05:23,947 --> 00:05:28,085
перевірки дійсності підпису, і тут вступає в дію відкритий ключ.

82
00:05:28,085 --> 00:05:33,056
Все, що він робить, це виводить true або false, щоб вказати, чи був це підпис, створений

83
00:05:33,056 --> 00:05:37,860
закритим ключем, пов’язаним із відкритим ключем, який ви використовуєте для перевірки.

84
00:05:37,860 --> 00:05:41,529
Я не буду вдаватися в подробиці того, як саме працюють обидві

85
00:05:41,529 --> 00:05:45,258
ці функції, але ідея полягає в тому, що знайти дійсний підпис,

86
00:05:45,258 --> 00:05:49,106
якщо ви не знаєте секретного ключа, має бути абсолютно неможливо.

87
00:05:49,106 --> 00:05:53,751
Зокрема, немає кращої стратегії, ніж просто вгадування та перевірка

88
00:05:53,751 --> 00:05:59,080
випадкових підписів, які можна перевірити за допомогою загальновідомого ключа.

89
00:05:59,080 --> 00:06:03,890
Тепер подумайте, скільки існує сигнатур довжиною 256 біт.

90
00:06:03,890 --> 00:06:05,998
Це 2 у степені 256!

91
00:06:05,998 --> 00:06:08,522
Це тупо велика кількість.

92
00:06:08,522 --> 00:06:14,088
Назвати його астрономічно великим означало б віддавати занадто багато уваги астрономії.

93
00:06:14,088 --> 00:06:17,379
Фактично, я зробив додаткове відео, присвячене лише

94
00:06:17,379 --> 00:06:20,480
тому, щоб проілюструвати, яке це величезне число.

95
00:06:20,480 --> 00:06:24,610
Але тут, скажімо так, що коли ви перевіряєте, що підпис проти даного

96
00:06:24,610 --> 00:06:28,740
повідомлення дійсний, ви можете бути надзвичайно впевнені, що єдиний

97
00:06:28,740 --> 00:06:32,750
спосіб, яким хтось міг його створити, це якби вони знали секретний

98
00:06:32,750 --> 00:06:37,360
ключ, пов’язаний із відкритим ключем, який ви використовували для перевірки .

99
00:06:37,360 --> 00:06:40,177
Гарантувати, що люди підписують транзакції в бухгалтерській

100
00:06:40,177 --> 00:06:42,478
книзі, досить добре, але є одна невелика лазівка.

101
00:06:42,478 --> 00:06:46,415
Якщо Аліса підписує транзакцію, як-от Аліса платить Бобу 100 доларів,

102
00:06:46,415 --> 00:06:50,408
навіть якщо Боб не може підробити підпис Аліси на новому повідомленні,

103
00:06:50,408 --> 00:06:54,120
він може просто скопіювати той самий рядок скільки завгодно разів.

104
00:06:54,120 --> 00:06:58,040
Ця комбінація повідомлення-підпис залишається дійсною.

105
00:06:58,040 --> 00:07:02,786
Щоб уникнути цього, ми робимо так, що коли ви підписуєте транзакцію, повідомлення

106
00:07:02,786 --> 00:07:07,532
має також містити певний унікальний ідентифікатор, пов’язаний із цією транзакцією.

107
00:07:07,532 --> 00:07:13,094
Таким чином, якщо Аліса заплатить Бобу 100 доларів кілька разів,

108
00:07:13,094 --> 00:07:18,400
кожен із цих рядків у книзі потребує абсолютно нового підпису.

109
00:07:18,400 --> 00:07:22,665
Цифрові підписи усувають великий аспект довіри до цього початкового протоколу.

110
00:07:22,665 --> 00:07:27,486
Але навіть якщо б ви дійсно це зробили, ви б покладалися на певну систему честі.

111
00:07:27,486 --> 00:07:30,201
А саме, ви сподіваєтеся, що кожен справді виконає

112
00:07:30,201 --> 00:07:32,971
та розрахується готівкою наприкінці кожного місяця.

113
00:07:32,971 --> 00:07:39,241
Що якщо, наприклад, Чарлі набере тисячі доларів боргів і просто відмовиться з’явитися?

114
00:07:39,241 --> 00:07:42,465
Єдина реальна причина повернутися до готівки, щоб

115
00:07:42,465 --> 00:07:45,946
розрахуватися, це якщо деякі люди винні багато грошей.

116
00:07:45,946 --> 00:07:51,733
Тож, можливо, у вас є розумна ідея, що вам ніколи не доведеться розплачуватися готівкою,

117
00:07:51,733 --> 00:07:57,065
якщо у вас є спосіб запобігти людям витрачати набагато більше, ніж вони отримують.

118
00:07:57,065 --> 00:08:01,216
Можливо, ви почнете з того, що кожен заплатить по 100 доларів у банк,

119
00:08:01,216 --> 00:08:05,188
а потім у перших кількох рядках книги буде написано: Аліса отримує

120
00:08:05,188 --> 00:08:09,280
100 доларів, Боб отримує 100 доларів, Чарлі отримує 100 доларів тощо.

121
00:08:09,280 --> 00:08:12,943
Тепер просто не приймайте жодних транзакцій, коли

122
00:08:12,943 --> 00:08:16,094
хтось витрачає більше, ніж має на цю книгу.

123
00:08:16,094 --> 00:08:21,454
Наприклад, якщо перші дві транзакції: Чарлі платить Алісі 50 доларів, а Чарлі

124
00:08:21,454 --> 00:08:26,676
платить Бобу 50 доларів, якби він спробував додати, що Чарлі платить вам 20

125
00:08:26,676 --> 00:08:32,380
доларів, це було б недійсним, таким же недійсним, якби він ніколи не підписував це.

126
00:08:32,380 --> 00:08:36,162
Зауважте, це означає, що для перевірки транзакції

127
00:08:36,162 --> 00:08:40,474
потрібно знати повну історію транзакцій до цього моменту.

128
00:08:40,474 --> 00:08:47,200
Це також буде вірно для криптовалют, хоча є невеликий простір для оптимізації.

129
00:08:47,200 --> 00:08:51,025
Тут цікаво те, що цей крок усуває зв’язок між

130
00:08:51,025 --> 00:08:55,517
обліковою книгою та фактичними фізичними доларами США.

131
00:08:55,517 --> 00:08:59,048
Теоретично, якби всі у світі користувалися цією книгою, ви

132
00:08:59,048 --> 00:09:02,818
могли б прожити все своє життя, просто надсилаючи та отримуючи

133
00:09:02,818 --> 00:09:06,528
гроші за цією книгою, не конвертуючи їх у справжні долари США.

134
00:09:06,528 --> 00:09:10,814
Насправді, щоб підкреслити цей момент, давайте почнемо називати кількість

135
00:09:10,814 --> 00:09:15,100
у бухгалтерській книзі як долари в бухгалтерській книзі, або скорочено LD.

136
00:09:15,100 --> 00:09:19,143
Ви можете вільно обмінювати долари бухгалтерської книги на справжні долари США.

137
00:09:19,143 --> 00:09:24,706
Наприклад, Аліса дає Бобу 10-доларову купюру в реальному світі в обмін на те, що він

138
00:09:24,706 --> 00:09:30,203
додає та підписує транзакцію, яку Боб сплачує Алісі 10 доларів у цій спільній книзі.

139
00:09:30,203 --> 00:09:34,370
Але такі обміни не гарантовані протоколом.

140
00:09:34,370 --> 00:09:37,998
Тепер це більше аналогічно тому, як ви можете обміняти

141
00:09:37,998 --> 00:09:41,889
долари на євро чи будь-яку іншу валюту на відкритому ринку.

142
00:09:41,889 --> 00:09:44,940
Це просто своя незалежна річ.

143
00:09:44,940 --> 00:09:50,980
Це перше важливе, що потрібно зрозуміти про біткойн або будь-яку іншу криптовалюту.

144
00:09:50,980 --> 00:09:52,672
Це бухгалтерська книга.

145
00:09:52,672 --> 00:09:56,056
Історія транзакцій - валюта.

146
00:09:56,056 --> 00:09:58,809
Звичайно, з біткойнами гроші не потрапляють у

147
00:09:58,809 --> 00:10:01,680
бухгалтерську книгу, коли люди купують готівкою.

148
00:10:01,680 --> 00:10:04,922
За кілька хвилин я перейду до того, як нові гроші надходять у книгу.

149
00:10:04,922 --> 00:10:08,529
Але перед тим, насправді, існує ще більша різниця між нашою

150
00:10:08,529 --> 00:10:12,496
поточною системою реєстру доларів і тим, як працюють криптовалюти.

151
00:10:12,496 --> 00:10:15,684
Поки що я казав, що ця книга знаходиться в якомусь загальнодоступному

152
00:10:15,684 --> 00:10:18,645
місці, наприклад на веб-сайті, де кожен може додавати нові рядки.

153
00:10:18,645 --> 00:10:22,612
Але для цього знадобиться довіряти центральне розташування, а саме,

154
00:10:22,612 --> 00:10:26,579
хто розміщує веб-сайт, хто контролює правила додавання нових рядків.

155
00:10:26,579 --> 00:10:32,255
Щоб усунути цю частку довіри, ми зробимо, щоб кожен мав свою копію бухгалтерської книги.

156
00:10:32,255 --> 00:10:36,647
Потім, коли ви хочете здійснити транзакцію, як-от Аліса платить Бобу

157
00:10:36,647 --> 00:10:40,975
100 доларів за реєстраційними книгами, ви транслюєте це у світ, щоб

158
00:10:40,975 --> 00:10:45,240
люди почули та зафіксували у своїх приватних бухгалтерських книгах.

159
00:10:45,240 --> 00:10:49,038
Але якщо ви не зробите щось більше, ця система буде абсурдно поганою.

160
00:10:49,038 --> 00:10:52,913
Як ви могли змусити всіх погодитися щодо того, що таке правильна книга?

161
00:10:52,913 --> 00:10:57,361
Коли Боб отримує транзакцію, наприклад, як Аліса платить Бобу 10 доларів Леджера,

162
00:10:57,361 --> 00:11:01,700
як він може бути впевнений, що всі інші отримали та вірять у цю саму транзакцію?

163
00:11:01,700 --> 00:11:04,627
Що він зможе пізніше піти до Чарлі та використати

164
00:11:04,627 --> 00:11:07,731
ті самі 10 доларів Леджера, щоб здійснити транзакцію?

165
00:11:07,731 --> 00:11:12,286
Справді, уявіть, що ви просто слухаєте трансляцію транзакцій.

166
00:11:12,286 --> 00:11:15,654
Як ви можете бути впевнені, що всі інші записують

167
00:11:15,654 --> 00:11:18,618
ті самі транзакції та в тому самому порядку?

168
00:11:18,618 --> 00:11:21,306
Це справді суть проблеми.

169
00:11:21,306 --> 00:11:23,111
Це цікава головоломка.

170
00:11:23,111 --> 00:11:28,111
Чи можете ви придумати протокол, як приймати або відхиляти транзакції та в якому

171
00:11:28,111 --> 00:11:33,173
порядку, щоб ви могли бути впевнені, що будь-хто інший у світі, який дотримується

172
00:11:33,173 --> 00:11:37,803
цього самого протоколу, має особисту книгу, яка виглядає так само, як ваша?

173
00:11:37,803 --> 00:11:44,620
Це проблема, розглянута в оригінальній статті про біткойн.

174
00:11:44,620 --> 00:11:48,076
На високому рівні рішення, яке пропонує біткойн, полягає в тому, щоб довіряти

175
00:11:48,076 --> 00:11:51,577
будь-якій бухгалтерській книзі, в яку вкладено найбільше обчислювальної роботи.

176
00:11:51,577 --> 00:11:55,042
Я витрачу хвилинку, щоб пояснити, що це означає.

177
00:11:55,042 --> 00:11:57,919
Він включає криптографічну хеш-функцію.

178
00:11:57,919 --> 00:12:01,158
Загальна ідея, яку ми будуватимемо, полягає в тому, що якщо ви

179
00:12:01,158 --> 00:12:04,603
використовуєте обчислювальну роботу як основу для того, чому можна

180
00:12:04,603 --> 00:12:08,356
довіряти, ви можете зробити так, щоб шахрайські транзакції та конфліктні

181
00:12:08,356 --> 00:12:12,263
бухгалтерські книги вимагали неймовірної кількості обчислень для здійснення.

182
00:12:12,263 --> 00:12:16,284
Знову ж таки, я нагадаю вам, що це заростає в бур’ян, ніж те,

183
00:12:16,284 --> 00:12:20,240
що будь-кому потрібно знати, щоб використовувати таку валюту.

184
00:12:20,240 --> 00:12:23,852
Але це дійсно класна ідея, і якщо ви її розумієте,

185
00:12:23,852 --> 00:12:27,251
ви розумієте суть біткойна та інших криптовалют.

186
00:12:27,251 --> 00:12:30,880
Отже, перш за все, що таке хеш-функція?

187
00:12:30,880 --> 00:12:32,957
Вхідними даними для однієї з цих функцій можуть бути

188
00:12:32,957 --> 00:12:35,348
будь-які повідомлення чи файли, це насправді не має значення.

189
00:12:35,348 --> 00:12:39,878
А на виході буде рядок бітів певної фіксованої довжини, наприклад 256 бітів.

190
00:12:39,878 --> 00:12:44,713
Цей результат називається хешем або дайджестом повідомлення.

191
00:12:44,713 --> 00:12:47,656
І мета полягає в тому, щоб це виглядало випадковим.

192
00:12:47,656 --> 00:12:52,400
Він не є випадковим, він завжди дає той самий вихід для заданого вхідного сигналу.

193
00:12:52,400 --> 00:12:56,347
Але ідея полягає в тому, що якщо ви трохи зміните введення, можливо,

194
00:12:56,347 --> 00:13:00,352
відредагувавши лише один із символів, кінцевий хеш зміниться повністю.

195
00:13:00,352 --> 00:13:05,590
Фактично, для хеш-функції, яку я тут показую під назвою SHA256, те, як

196
00:13:05,590 --> 00:13:11,492
змінюється вихід, коли ви трохи змінюєте цей вхід, є абсолютно непередбачуваним.

197
00:13:11,492 --> 00:13:17,480
Розумієте, це не просто хеш-функція, це криптографічна хеш-функція.

198
00:13:17,480 --> 00:13:21,031
Це означає, що обчислення у зворотному напрямку неможливо.

199
00:13:21,031 --> 00:13:25,927
Якщо я покажу вам якийсь рядок з 1 і 0 і попрошу вас знайти вхідні

200
00:13:25,927 --> 00:13:30,603
дані, щоб хеш SHA256 цього введення давав саме цей рядок бітів,

201
00:13:30,603 --> 00:13:35,280
у вас не буде кращого способу, ніж просто вгадати та перевірити.

202
00:13:35,280 --> 00:13:39,685
І знову ж таки, якщо ви хочете відчути, скільки обчислень знадобиться,

203
00:13:39,685 --> 00:13:43,905
щоб виконати два з 256 припущень, просто подивіться додаткове відео.

204
00:13:43,905 --> 00:13:47,573
Насправді мені було надто весело писати це.

205
00:13:47,573 --> 00:13:51,123
Ви можете подумати, що якщо ви просто заглибитеся в деталі того,

206
00:13:51,123 --> 00:13:54,836
як саме працює ця функція, ви зможете провести реверсивну інженерію

207
00:13:54,836 --> 00:13:58,277
відповідного введення без необхідності вгадувати та перевіряти.

208
00:13:58,277 --> 00:14:01,440
Але ніхто ніколи не придумав, як це зробити.

209
00:14:01,440 --> 00:14:04,495
Цікаво, що немає жорстких і суворих доказів того,

210
00:14:04,495 --> 00:14:07,001
що важко обчислити у зворотному напрямку.

211
00:14:07,001 --> 00:14:10,454
І все ж величезна частина сучасної безпеки залежить від

212
00:14:10,454 --> 00:14:14,525
криптографічних хеш-функцій та ідеї, що вони мають цю властивість.

213
00:14:14,525 --> 00:14:20,329
Якщо ви подивитеся, які алгоритми лежать в основі безпечного з’єднання, яке ваш

214
00:14:20,329 --> 00:14:26,569
веб-переглядач зараз створює з YouTube або з вашим банком, ви, ймовірно, побачите там

215
00:14:26,569 --> 00:14:27,440
ім’я SHA256.

216
00:14:27,440 --> 00:14:32,861
Наразі ми зосередимося лише на тому, як така функція може довести, що

217
00:14:32,861 --> 00:14:38,360
певний список транзакцій пов’язаний із великим обчислювальним зусиллям.

218
00:14:38,360 --> 00:14:43,694
Уявіть, що хтось показує вам список транзакцій і каже: «Я знайшов спеціальний

219
00:14:43,694 --> 00:14:48,824
номер, так що коли ви розміщуєте цей номер у кінці цього списку транзакцій

220
00:14:48,824 --> 00:14:53,474
і застосовуєте SHA256 до всього, перші 30 біт цього виводу всі нулі.

221
00:14:53,474 --> 00:14:57,441
Як ви думаєте, наскільки важко їм було знайти це число?

222
00:14:57,441 --> 00:15:02,888
Для випадкового повідомлення ймовірність того, що хеш починається з 30

223
00:15:02,888 --> 00:15:08,181
послідовних нулів, становить 1 до 230, тобто приблизно 1 до мільярда.

224
00:15:08,181 --> 00:15:12,409
А оскільки SHA256 — це криптографічна хеш-функція, єдиний спосіб

225
00:15:12,409 --> 00:15:16,312
знайти таке спеціальне число — просто вгадати та перевірити.

226
00:15:16,312 --> 00:15:19,725
Тож цій людині майже напевно довелося перебрати близько

227
00:15:19,725 --> 00:15:23,077
мільярда різних номерів, перш ніж знайти цей особливий.

228
00:15:23,077 --> 00:15:25,756
І як тільки ви дізнаєтеся це число, це дуже швидко

229
00:15:25,756 --> 00:15:28,961
перевірити, ви просто запускаєте хеш і бачите, що є 30 нулів.

230
00:15:28,961 --> 00:15:33,275
Таким чином, іншими словами, ви можете перевірити, що вони виконали великий

231
00:15:33,275 --> 00:15:37,420
обсяг роботи, але без необхідності самостійно виконувати ті самі зусилля.

232
00:15:37,420 --> 00:15:39,213
Це називається підтвердженням роботи.

233
00:15:39,213 --> 00:15:44,223
І що важливо, уся ця робота нерозривно пов’язана зі списком транзакцій.

234
00:15:44,223 --> 00:15:49,594
Якщо ви зміните одну з цих транзакцій, навіть трохи, це повністю змінить хеш.

235
00:15:49,594 --> 00:15:54,529
Тож вам доведеться пройти через ще один мільярд здогадок, щоб знайти нове

236
00:15:54,529 --> 00:16:00,264
підтвердження роботи, нове число, яке робить так, щоб хеш списку починався з 30 нулів.

237
00:16:00,264 --> 00:16:04,000
Тож тепер подумайте про нашу ситуацію з розподіленою книгою.

238
00:16:04,000 --> 00:16:10,622
Усі транслюють транзакції, і ми хочемо, щоб вони домовилися про правильну книгу.

239
00:16:10,622 --> 00:16:15,187
Як я вже говорив, основна ідея оригінального паперу про біткойни полягає

240
00:16:15,187 --> 00:16:19,440
в тому, щоб усі довіряли тому, в яку книгу вкладено найбільше праці.

241
00:16:19,440 --> 00:16:23,863
Це працює так, щоб спочатку організувати дану книгу на блоки, де кожен

242
00:16:23,863 --> 00:16:28,225
блок складається зі списку транзакцій разом із підтвердженням роботи,

243
00:16:28,225 --> 00:16:32,711
тобто спеціальним номером, щоб хеш усього блоку починався з купи нулів .

244
00:16:32,711 --> 00:16:37,069
Наразі припустімо, що воно має починатися з 60 нулів, але пізніше

245
00:16:37,069 --> 00:16:41,427
ми повернемося до більш систематичного способу вибору цього числа.

246
00:16:41,427 --> 00:16:45,896
Подібно до того, як транзакція вважається дійсною лише тоді, коли вона підписана

247
00:16:45,896 --> 00:16:50,200
відправником, блок вважається дійсним, лише якщо він має підтвердження роботи.

248
00:16:50,200 --> 00:16:54,835
Крім того, щоб забезпечити стандартний порядок цих блоків, ми зробимо

249
00:16:54,835 --> 00:16:59,537
так, що блок повинен містити хеш попереднього блоку в своєму заголовку.

250
00:16:59,537 --> 00:17:04,296
Таким чином, якби ви повернулися назад і змінили будь-який із блоків або

251
00:17:04,296 --> 00:17:09,250
поміняли порядок двох блоків, це змінило б блок, який йде після нього, який

252
00:17:09,250 --> 00:17:14,140
змінює хеш цього блоку, який змінює той, який йде після нього , і так далі.

253
00:17:14,140 --> 00:17:18,026
Це вимагало б переробити всю роботу, знайти нове спеціальне число

254
00:17:18,026 --> 00:17:21,677
для кожного з цих блоків, щоб їхні хеші починалися з 60 нулів.

255
00:17:21,677 --> 00:17:25,719
Оскільки блоки з’єднані разом таким чином, замість того, щоб

256
00:17:25,719 --> 00:17:30,160
називати це обліковою книгою, прийнято називати це ланцюгом блоків.

257
00:17:30,160 --> 00:17:32,722
У рамках нашого оновленого протоколу тепер ми

258
00:17:32,722 --> 00:17:35,340
дозволимо будь-кому у світі бути творцем блоку.

259
00:17:35,340 --> 00:17:38,994
Це означає, що вони прослуховуватимуть транзакції, що транслюються,

260
00:17:38,994 --> 00:17:42,542
зберуть їх у якийсь блок, а потім виконають цілу купу роботи, щоб

261
00:17:42,542 --> 00:17:46,573
знайти спеціальне число, яке змусить хеш цього блоку починатися з 60 нулів.

262
00:17:46,573 --> 00:17:50,289
Коли вони знаходять його, вони транслюють знайдений блок.

263
00:17:50,289 --> 00:17:54,520
Щоб винагородити творця блоку за всю цю роботу, коли він збирає блок,

264
00:17:54,520 --> 00:17:58,812
ми дозволимо йому включити дуже особливу транзакцію на його початку, у

265
00:17:58,812 --> 00:18:03,164
якій вона отримує, скажімо, 10 доларів у бухгалтерській книзі з повітря.

266
00:18:03,164 --> 00:18:06,423
Це називається винагородою за блокування, і це виняток із наших

267
00:18:06,423 --> 00:18:09,632
звичайних правил щодо того, приймати чи не приймати транзакції.

268
00:18:09,632 --> 00:18:13,780
Він не походить ні від кого, тому його не потрібно підписувати.

269
00:18:13,780 --> 00:18:16,669
Це також означає, що загальна кількість доларів

270
00:18:16,669 --> 00:18:19,558
у нашій економіці зростає з кожним новим блоком.

271
00:18:19,558 --> 00:18:24,553
Створення блоків часто називають майнінгом, оскільки воно вимагає виконання

272
00:18:24,553 --> 00:18:29,220
великої кількості роботи та введення нових частинок валюти в економіку.

273
00:18:29,220 --> 00:18:33,267
Але коли ви чуєте або читаєте про майнерів, майте на увазі, що

274
00:18:33,267 --> 00:18:36,993
насправді вони прослуховують транзакції, створюють блоки,

275
00:18:36,993 --> 00:18:41,169
транслюють ці блоки та отримують за це винагороду новими грошима.

276
00:18:41,169 --> 00:18:46,278
З точки зору майнерів, кожен блок схожий на мініатюрну лотерею, де кожен

277
00:18:46,278 --> 00:18:51,457
вгадує числа якнайшвидше, поки один щасливчик не знайде спеціальне число,

278
00:18:51,457 --> 00:18:56,777
яке змушує хеш блоку починатися з багатьох нулів, і вони отримують нагорода.

279
00:18:56,777 --> 00:19:01,071
Для всіх, хто просто хоче використовувати цю систему для здійснення платежів,

280
00:19:01,071 --> 00:19:05,421
замість того, щоб прослуховувати транзакції, вони всі починають прослуховувати

281
00:19:05,421 --> 00:19:10,046
лише блоки, які транслюються майнерами, і оновлюють власні особисті копії блокчейна.

282
00:19:10,046 --> 00:19:14,181
Тепер ключовим доповненням до нашого протоколу є те, що якщо ви

283
00:19:14,181 --> 00:19:18,317
чуєте два різні блокчейни з конфліктною історією транзакцій, ви

284
00:19:18,317 --> 00:19:22,775
відкладаєтеся до найдовшого, того, з яким докладено найбільше роботи.

285
00:19:22,775 --> 00:19:25,723
Якщо нічия, просто зачекайте, поки не почуєте

286
00:19:25,723 --> 00:19:28,800
додатковий блок, який робить один із них довшим.

287
00:19:28,800 --> 00:19:33,720
Тож, незважаючи на те, що немає центрального органу влади, і кожен підтримує свою

288
00:19:33,720 --> 00:19:38,520
власну копію блокчейну, якщо всі погодяться віддати перевагу тому блокчейну, на

289
00:19:38,520 --> 00:19:43,680
який докладено найбільше роботи, у нас є спосіб досягти децентралізованого консенсусу.

290
00:19:43,680 --> 00:19:47,369
Щоб зрозуміти, чому ця система є надійною, і зрозуміти, на якому етапі

291
00:19:47,369 --> 00:19:51,006
ви повинні вірити, що платіж є законним, було б дуже корисно пройтися

292
00:19:51,006 --> 00:19:54,748
через те, що потрібно, щоб обдурити когось, хто використовує цю систему.

293
00:19:54,748 --> 00:19:59,048
Можливо, Аліса намагається обдурити Боба шахрайським блокуванням,

294
00:19:59,048 --> 00:20:03,478
а саме: вона намагається надіслати йому такий, у якому вона платить

295
00:20:03,478 --> 00:20:07,583
йому 100 доларів Ledger, але не транслює цей блок решті мережі.

296
00:20:07,583 --> 00:20:11,563
Таким чином усі інші досі думають, що у неї є ці 100 доларів Леджера.

297
00:20:11,563 --> 00:20:15,129
Для цього їй доведеться знайти дійсне підтвердження роботи

298
00:20:15,129 --> 00:20:19,058
раніше всіх інших майнерів, кожен з яких працює над своїм блоком.

299
00:20:19,058 --> 00:20:22,155
І це точно може статися, можливо, Аліса випадково

300
00:20:22,155 --> 00:20:24,880
виграє цю мініатюрну лотерею раніше за всіх.

301
00:20:24,880 --> 00:20:29,364
Але Боб усе ще чутиме трансляції інших майнерів, тому, щоб змусити його

302
00:20:29,364 --> 00:20:33,724
повірити в цей шахрайський блок, Алісі доведеться виконати всю роботу

303
00:20:33,724 --> 00:20:38,146
самостійно, щоб продовжувати додавати блоки в цьому спеціальному форку

304
00:20:38,146 --> 00:20:42,942
в блокчейні Боба, який відрізняється від того, що він чує від решти шахтарів.

305
00:20:42,942 --> 00:20:48,216
Пам’ятайте, згідно з протоколом Боб завжди довіряє найдовшому ланцюжку, про який він знає.

306
00:20:48,216 --> 00:20:53,137
Аліса може зберегти це протягом кількох блоків, якщо випадково

307
00:20:53,137 --> 00:20:57,981
знайде блоки швидше, ніж решта майнерів у мережі разом узятих.

308
00:20:57,981 --> 00:21:03,158
Але якщо вона не матиме близько 50% обчислювальних ресурсів серед усіх

309
00:21:03,158 --> 00:21:08,773
майнерів, ймовірність того, що блокчейн, над яким працюють усі інші майнери,

310
00:21:08,773 --> 00:21:14,315
зростатиме швидше, ніж єдиний шахрайський блокчейн, який Аліса передає Бобу.

311
00:21:14,315 --> 00:21:18,635
Тож через достатньо часу Боб просто відкине те, що він чує від

312
00:21:18,635 --> 00:21:22,955
Аліси, на користь довшого ланцюжка, над яким працюють усі інші.

313
00:21:22,955 --> 00:21:28,076
Зауважте, це означає, що ви не обов’язково довіряєте новому блоку, який ви чуєте

314
00:21:28,076 --> 00:21:33,640
відразу, натомість вам слід зачекати, доки кілька нових блоків буде додано поверх нього.

315
00:21:33,640 --> 00:21:37,654
Якщо ви ще не чули про довші блокчейни, ви можете бути впевнені, що

316
00:21:37,654 --> 00:21:41,785
цей блок є частиною того самого ланцюга, який використовують усі інші.

317
00:21:41,785 --> 00:21:46,040
Таким чином, ми досягли всіх основних ідей.

318
00:21:46,040 --> 00:21:50,027
Ця система розподіленого реєстру, заснована на доказі роботи, більш-менш

319
00:21:50,027 --> 00:21:53,906
відповідає тому, як працює протокол біткойн і багато інших криптовалют.

320
00:21:53,906 --> 00:21:55,896
Потрібно прояснити лише кілька деталей.

321
00:21:55,896 --> 00:21:59,027
Раніше я говорив, що доказом роботи може бути пошук

322
00:21:59,027 --> 00:22:02,340
спеціального числа, щоб хеш блоку починався з 60 нулів.

323
00:22:02,340 --> 00:22:07,120
Фактичний протокол біткойн працює так, щоб періодично змінювати цю

324
00:22:07,120 --> 00:22:12,115
кількість нулів, щоб пошук нового блоку займав у середньому 10 хвилин.

325
00:22:12,115 --> 00:22:17,623
Оскільки в мережу додається все більше майнерів, завдання стає все складнішим і

326
00:22:17,623 --> 00:22:23,200
складнішим, тому ця мініатюрна лотерея має лише одного переможця кожні 10 хвилин.

327
00:22:23,200 --> 00:22:27,889
Багато новіших криптовалют мають набагато коротший час блокування.

328
00:22:27,889 --> 00:22:32,468
І всі гроші в біткойнах зрештою надходять від певної винагороди за блок.

329
00:22:32,468 --> 00:22:35,923
На початку ці винагороди становили 50 біткойнів за блок.

330
00:22:35,923 --> 00:22:38,701
Насправді є чудовий веб-сайт, який називається Block

331
00:22:38,701 --> 00:22:41,897
Explorer, який дозволяє легко переглядати блокчейн біткойнів.

332
00:22:41,897 --> 00:22:45,926
І якщо ви подивитеся на кілька перших блоків у ланцюжку, ви побачите, що

333
00:22:45,926 --> 00:22:49,844
вони не містять жодних транзакцій, окрім 50 біткойнів, наданих майнеру.

334
00:22:49,844 --> 00:22:56,568
Але кожні 210 000 блоків, тобто приблизно кожні 4 роки, ця винагорода скорочується вдвічі.

335
00:22:56,568 --> 00:22:58,814
Тож зараз винагорода становить 12.

336
00:22:58,814 --> 00:23:00,115
5 Bitcoin за блок.

337
00:23:00,115 --> 00:23:04,861
І оскільки ця винагорода геометрично зменшується з часом, це

338
00:23:04,861 --> 00:23:09,920
означає, що ніколи не буде існувати більше 21 мільйона біткойнів.

339
00:23:09,920 --> 00:23:13,497
Однак це не означає, що майнери перестануть заробляти гроші.

340
00:23:13,497 --> 00:23:17,694
Окрім винагороди за блок, майнери також можуть отримувати комісію за транзакції.

341
00:23:17,694 --> 00:23:23,029
Це працює так: щоразу, коли ви робите платіж, ви можете за бажанням включити до нього

342
00:23:23,029 --> 00:23:28,302
комісію за транзакцію, яка буде надходити майнеру будь-якого блоку, який включає цей

343
00:23:28,302 --> 00:23:28,736
платіж.

344
00:23:28,736 --> 00:23:32,333
Причина, по якій ви можете це зробити, полягає в тому, щоб стимулювати

345
00:23:32,333 --> 00:23:36,132
майнерів фактично включити трансакцію, яку ви транслюєте, у наступний блок.

346
00:23:36,132 --> 00:23:40,536
Розумієте, у біткойнах кожен блок обмежується приблизно 2400

347
00:23:40,536 --> 00:23:45,807
транзакціями, що, на думку багатьох критиків, є невиправданим обмеженням.

348
00:23:45,807 --> 00:23:50,742
Для порівняння, Visa обробляє в середньому близько 1700 транзакцій

349
00:23:50,742 --> 00:23:55,162
на секунду, і вони здатні обробляти понад 24 000 на секунду.

350
00:23:55,162 --> 00:24:01,045
Ця відносно повільна обробка біткойнів призводить до вищих комісій за транзакції,

351
00:24:01,045 --> 00:24:06,497
оскільки це визначає, які транзакції майнери вирішать включити в новий блок.

352
00:24:06,497 --> 00:24:11,784
Все це далеко не всебічне охоплення криптовалют.

353
00:24:11,784 --> 00:24:16,325
Є ще багато нюансів і варіантів дизайну, яких я навіть не торкався.

354
00:24:16,325 --> 00:24:20,876
Але я сподіваюся, що це може забезпечити стабільний стовбур дерева розуміння у стилі

355
00:24:20,876 --> 00:24:25,320
«Почекай, але чому» для тих, хто хоче додати ще кілька гілок із подальшим читанням.

356
00:24:25,320 --> 00:24:27,981
Як я вже сказав на початку, одним із мотивів цього є

357
00:24:27,981 --> 00:24:30,643
те, що багато грошей почали надходити до криптовалют.

358
00:24:30,643 --> 00:24:36,045
І хоча я не хочу робити жодних претензій щодо того, хороша це інвестиція чи погана,

359
00:24:36,045 --> 00:24:41,640
я справді вважаю, що людям, які починають гру, добре знати принаймні основи технології.

360
00:24:41,640 --> 00:24:46,160
Як завжди, я щиро дякую тим із вас, хто зробив цей канал можливим на Patreon.

361
00:24:46,160 --> 00:24:49,873
Я розумію, що не кожен може зробити внесок, але якщо ви все ще зацікавлені

362
00:24:49,873 --> 00:24:53,339
в допомозі, один із найкращих способів зробити це – просто поділитися

363
00:24:53,339 --> 00:24:56,855
відео, які, на вашу думку, можуть бути цікавими чи корисними для інших.

364
00:24:56,855 --> 00:24:54,480
Я знаю, що ти це знаєш, але це дійсно допомагає.

