1
00:00:00,000 --> 00:00:04,226
Що означає мати біткойн?

2
00:00:04,226 --> 00:00:08,798
Багато людей чули про біткойн, що це повністю цифрова валюта,

3
00:00:08,798 --> 00:00:13,961
яку не випускає уряд, що жодним банкам не потрібно керувати рахунками

4
00:00:13,961 --> 00:00:19,271
та перевіряти транзакції, і що ніхто насправді не знає, хто її винайшов.

5
00:00:19,271 --> 00:00:24,421
І все ж багато людей не знають відповіді на це запитання, принаймні не повної.

6
00:00:24,421 --> 00:00:27,602
Щоб досягти цього та переконатися, що технічні деталі,

7
00:00:27,602 --> 00:00:31,015
що лежать в основі відповіді, дійсно відчувають мотивацію,

8
00:00:31,015 --> 00:00:35,180
ми крок за кроком розповімо, як ви могли винайти власну версію біткойна.

9
00:00:35,180 --> 00:00:39,988
Ми почнемо з того, що ви будете відстежувати платежі з друзями за допомогою спільної

10
00:00:39,988 --> 00:00:44,796
книги, а потім, коли ви почнете все менше довіряти своїм друзям і світу навколо вас,

11
00:00:44,796 --> 00:00:48,812
і якщо ви достатньо кмітливі, щоб залучити кілька ідей з криптографії,

12
00:00:48,812 --> 00:00:53,620
щоб допомогти обійти потребу в довірі, ви отримаєте те, що називається криптовалютою.

13
00:00:53,620 --> 00:00:58,221
Біткойн є лише першим реалізованим прикладом криптовалюти,

14
00:00:58,221 --> 00:01:02,666
і зараз є тисячі інших на біржах з традиційними валютами.

15
00:01:02,666 --> 00:01:08,067
Пройшовши шлях винайдення власного, ви можете закласти основи для розуміння деяких

16
00:01:08,067 --> 00:01:13,858
нещодавніх гравців у грі та розпізнати, коли і чому є місце для різних варіантів дизайну.

17
00:01:13,858 --> 00:01:18,152
Насправді, одна з причин, чому я вибрав цю тему, полягає в тому,

18
00:01:18,152 --> 00:01:23,370
що за останній рік ці валюти привернули величезну увагу, інвестиції та ажіотаж.

19
00:01:23,370 --> 00:01:27,819
Я не збираюся коментувати чи спекулювати щодо поточних або майбутніх курсів валют,

20
00:01:27,819 --> 00:01:31,838
але я думаю, що ми всі погодимося, що кожен, хто хоче купити криптовалюту,

21
00:01:31,838 --> 00:01:33,232
повинен знати, що це таке.

22
00:01:33,232 --> 00:01:38,693
І я маю на увазі не лише аналогії з невизначеними зв’язками з видобутком золота,

23
00:01:38,693 --> 00:01:43,144
я маю на увазі фактичний прямий опис того, що роблять комп’ютери,

24
00:01:43,144 --> 00:01:46,920
коли ми надсилаємо, отримуємо та створюємо криптовалюти.

25
00:01:46,920 --> 00:01:49,432
Одна річ, яку варто підкреслити, полягає в тому,

26
00:01:49,432 --> 00:01:53,535
що хоча ми з вами збираємося тут розібратися в деталях, і це займе багато часу,

27
00:01:53,535 --> 00:01:57,689
вам насправді не потрібно знати ці деталі, якщо ви просто хочете використовувати

28
00:01:57,689 --> 00:02:01,894
криптовалюту, як і ви не потрібно знати деталі того, що відбувається під капотом,

29
00:02:01,894 --> 00:02:03,637
коли ви проводите кредитну картку.

30
00:02:03,637 --> 00:02:06,742
Як і будь-який цифровий платіж, існує багато зручних програм,

31
00:02:06,742 --> 00:02:10,799
які дозволяють вам просто надсилати й отримувати валюту, не замислюючись про те,

32
00:02:10,799 --> 00:02:11,600
що відбувається.

33
00:02:11,600 --> 00:02:17,229
Різниця полягає в тому, що основою цього є не банк, який перевіряє транзакції.

34
00:02:17,229 --> 00:02:21,604
Натомість це розумна система децентралізованої перевірки без довіри,

35
00:02:21,604 --> 00:02:25,980
яка базується на певній частині математики, народженої криптографією.

36
00:02:25,980 --> 00:02:28,343
Але для початку я хочу, щоб ви на кілька хвилин

37
00:02:28,343 --> 00:02:30,460
відкинули думки про криптовалюти та все це.

38
00:02:30,460 --> 00:02:33,626
Ми збираємося розпочати розповідь з чогось більш приземленого,

39
00:02:33,626 --> 00:02:35,636
бухгалтерських книг і цифрових підписів.

40
00:02:35,636 --> 00:02:38,778
Якщо ви та ваші друзі досить часто обмінюєтеся грошима,

41
00:02:38,778 --> 00:02:41,414
сплачуючи свою частину рахунку за вечерю тощо,

42
00:02:41,414 --> 00:02:44,051
може бути незручно постійно обмінювати готівку.

43
00:02:44,051 --> 00:02:48,379
Тож ви можете вести спільну книгу, у якій записуватимуться всі платежі,

44
00:02:48,379 --> 00:02:50,904
які ви збираєтеся здійснити в майбутньому.

45
00:02:50,904 --> 00:02:54,480
Аліса платить Бобу 20 доларів, Боб платить Чарлі 40 доларів тощо.

46
00:02:54,480 --> 00:02:58,343
Ця книга стане загальнодоступною та доступною для всіх,

47
00:02:58,343 --> 00:03:02,620
як веб-сайт, куди будь-хто зможе перейти та додати нові рядки.

48
00:03:02,620 --> 00:03:05,582
І, скажімо, наприкінці кожного місяця ви всі збираєтесь разом,

49
00:03:05,582 --> 00:03:07,557
дивитесь список транзакцій і погоджуєтеся.

50
00:03:07,557 --> 00:03:11,667
Якщо ви витратили більше, ніж отримали, ви кладете ці гроші в котел,

51
00:03:11,667 --> 00:03:15,480
а якщо ви отримали більше, ніж витратили, ви забираєте ці гроші.

52
00:03:15,480 --> 00:03:19,884
Отже, протокол для того, щоб бути частиною цієї дуже простої системи, може виглядати так.

53
00:03:19,884 --> 00:03:22,162
Будь-хто може додати рядки до бухгалтерської книги,

54
00:03:22,162 --> 00:03:25,054
і в кінці кожного місяця ви всі збираєтеся разом і розраховуєтеся.

55
00:03:25,054 --> 00:03:30,471
Одна проблема з такою публічною книгою полягає в тому, що кожен може додати рядок.

56
00:03:30,471 --> 00:03:34,024
Отже, що заважає Бобу піти і написати «Аліса платить

57
00:03:34,024 --> 00:03:36,571
Бобу 100 доларів без схвалення Аліси»?

58
00:03:36,571 --> 00:03:45,020
Як ми можемо вірити, що всі ці транзакції є такими, якими їх мав на увазі відправник?

59
00:03:45,020 --> 00:03:49,582
Ось тут і з’являється перша частина криптографії, цифрові підписи.

60
00:03:49,582 --> 00:03:52,772
Подібно до рукописних підписів, ідея полягає в тому,

61
00:03:52,772 --> 00:03:57,105
що Аліса повинна мати можливість додати щось поруч із цією транзакцією,

62
00:03:57,105 --> 00:03:59,934
що доводить, що вона бачила це та схвалила це,

63
00:03:59,934 --> 00:04:03,485
і будь-кому іншому має бути неможливо підробити цей підпис.

64
00:04:03,485 --> 00:04:08,910
Спочатку може здатися, що цифровий підпис взагалі неможливий.

65
00:04:08,910 --> 00:04:11,828
Я маю на увазі, будь-які дані, які складають цей підпис,

66
00:04:11,828 --> 00:04:14,694
можуть бути просто прочитані та скопійовані комп’ютером.

67
00:04:14,694 --> 00:04:17,460
Отже, як запобігти підробці?

68
00:04:17,460 --> 00:04:22,259
Це працює таким чином, що кожен генерує так звану пару відкритий ключ-приватний ключ,

69
00:04:22,259 --> 00:04:24,324
кожна з яких виглядає як рядок бітів.

70
00:04:24,324 --> 00:04:28,148
Приватний ключ іноді також називають секретним ключем,

71
00:04:28,148 --> 00:04:32,460
тому ми можемо скоротити його як SK, а відкритий ключ – як PK.

72
00:04:32,460 --> 00:04:37,140
Як випливає з назви, цей секретний ключ – це те, що ви хочете зберегти при собі.

73
00:04:37,140 --> 00:04:40,971
У реальному світі ваш власноручний підпис виглядає однаково незалежно від того,

74
00:04:40,971 --> 00:04:42,312
який документ ви підписуєте.

75
00:04:42,312 --> 00:04:44,949
Але цифровий підпис насправді набагато сильніший,

76
00:04:44,949 --> 00:04:47,427
оскільки він змінюється для різних повідомлень.

77
00:04:47,427 --> 00:04:52,292
Це виглядає як певний рядок з 1 і 0, зазвичай приблизно 256 біт,

78
00:04:52,292 --> 00:04:56,558
і навіть незначна зміна повідомлення повністю змінює те,

79
00:04:56,558 --> 00:04:59,925
як має виглядати підпис у цьому повідомленні.

80
00:04:59,925 --> 00:05:04,037
Говорячи трохи більш формально, створення підпису передбачає функцію,

81
00:05:04,037 --> 00:05:08,384
яка залежить як від самого повідомлення, так і від вашого закритого ключа.

82
00:05:08,384 --> 00:05:12,437
Закритий ключ гарантує, що лише ви можете створити цей підпис, а той факт,

83
00:05:12,437 --> 00:05:16,058
що він залежить від повідомлення, означає, що ніхто не може просто

84
00:05:16,058 --> 00:05:20,003
скопіювати один із ваших підписів і підробити його в іншому повідомленні.

85
00:05:20,003 --> 00:05:25,822
Пліч-о-пліч із цим є друга функція, яка використовується для перевірки дійсності підпису,

86
00:05:25,822 --> 00:05:28,085
і тут вступає в дію відкритий ключ.

87
00:05:28,085 --> 00:05:32,497
Все, що він робить, це виводить true або false, щоб вказати, чи був це підпис,

88
00:05:32,497 --> 00:05:35,793
створений закритим ключем, пов’язаним із відкритим ключем,

89
00:05:35,793 --> 00:05:37,860
який ви використовуєте для перевірки.

90
00:05:37,860 --> 00:05:42,240
Я не буду вдаватися в подробиці того, як саме працюють обидві ці функції,

91
00:05:42,240 --> 00:05:45,258
але ідея полягає в тому, що знайти дійсний підпис,

92
00:05:45,258 --> 00:05:49,106
якщо ви не знаєте секретного ключа, має бути абсолютно неможливо.

93
00:05:49,106 --> 00:05:55,186
Зокрема, немає кращої стратегії, ніж просто вгадування та перевірка випадкових підписів,

94
00:05:55,186 --> 00:05:59,080
які можна перевірити за допомогою загальновідомого ключа.

95
00:05:59,080 --> 00:06:03,890
Тепер подумайте, скільки існує сигнатур довжиною 256 біт.

96
00:06:03,890 --> 00:06:05,998
Це 2 у степені 256!

97
00:06:05,998 --> 00:06:08,522
Це тупо велика кількість.

98
00:06:08,522 --> 00:06:14,088
Назвати його астрономічно великим означало б віддавати занадто багато уваги астрономії.

99
00:06:14,088 --> 00:06:17,758
Фактично, я зробив додаткове відео, присвячене лише тому,

100
00:06:17,758 --> 00:06:20,480
щоб проілюструвати, яке це величезне число.

101
00:06:20,480 --> 00:06:24,610
Але тут, скажімо так, що коли ви перевіряєте, що підпис проти даного

102
00:06:24,610 --> 00:06:29,219
повідомлення дійсний, ви можете бути надзвичайно впевнені, що єдиний спосіб,

103
00:06:29,219 --> 00:06:33,110
яким хтось міг його створити, це якби вони знали секретний ключ,

104
00:06:33,110 --> 00:06:37,360
пов’язаний із відкритим ключем, який ви використовували для перевірки .

105
00:06:37,360 --> 00:06:40,506
Гарантувати, що люди підписують транзакції в бухгалтерській книзі,

106
00:06:40,506 --> 00:06:42,478
досить добре, але є одна невелика лазівка.

107
00:06:42,478 --> 00:06:46,415
Якщо Аліса підписує транзакцію, як-от Аліса платить Бобу 100 доларів,

108
00:06:46,415 --> 00:06:50,408
навіть якщо Боб не може підробити підпис Аліси на новому повідомленні,

109
00:06:50,408 --> 00:06:54,120
він може просто скопіювати той самий рядок скільки завгодно разів.

110
00:06:54,120 --> 00:06:58,040
Ця комбінація повідомлення-підпис залишається дійсною.

111
00:06:58,040 --> 00:07:02,033
Щоб уникнути цього, ми робимо так, що коли ви підписуєте транзакцію,

112
00:07:02,033 --> 00:07:05,737
повідомлення має також містити певний унікальний ідентифікатор,

113
00:07:05,737 --> 00:07:07,532
пов’язаний із цією транзакцією.

114
00:07:07,532 --> 00:07:13,094
Таким чином, якщо Аліса заплатить Бобу 100 доларів кілька разів,

115
00:07:13,094 --> 00:07:18,400
кожен із цих рядків у книзі потребує абсолютно нового підпису.

116
00:07:18,400 --> 00:07:22,665
Цифрові підписи усувають великий аспект довіри до цього початкового протоколу.

117
00:07:22,665 --> 00:07:27,486
Але навіть якщо б ви дійсно це зробили, ви б покладалися на певну систему честі.

118
00:07:27,486 --> 00:07:30,201
А саме, ви сподіваєтеся, що кожен справді виконає

119
00:07:30,201 --> 00:07:32,971
та розрахується готівкою наприкінці кожного місяця.

120
00:07:32,971 --> 00:07:39,241
Що якщо, наприклад, Чарлі набере тисячі доларів боргів і просто відмовиться з’явитися?

121
00:07:39,241 --> 00:07:43,432
Єдина реальна причина повернутися до готівки, щоб розрахуватися,

122
00:07:43,432 --> 00:07:45,946
це якщо деякі люди винні багато грошей.

123
00:07:45,946 --> 00:07:51,733
Тож, можливо, у вас є розумна ідея, що вам ніколи не доведеться розплачуватися готівкою,

124
00:07:51,733 --> 00:07:57,065
якщо у вас є спосіб запобігти людям витрачати набагато більше, ніж вони отримують.

125
00:07:57,065 --> 00:08:01,216
Можливо, ви почнете з того, що кожен заплатить по 100 доларів у банк,

126
00:08:01,216 --> 00:08:05,959
а потім у перших кількох рядках книги буде написано: Аліса отримує 100 доларів,

127
00:08:05,959 --> 00:08:09,280
Боб отримує 100 доларів, Чарлі отримує 100 доларів тощо.

128
00:08:09,280 --> 00:08:14,628
Тепер просто не приймайте жодних транзакцій, коли хтось витрачає більше,

129
00:08:14,628 --> 00:08:16,094
ніж має на цю книгу.

130
00:08:16,094 --> 00:08:20,904
Наприклад, якщо перші дві транзакції: Чарлі платить Алісі 50 доларів,

131
00:08:20,904 --> 00:08:25,027
а Чарлі платить Бобу 50 доларів, якби він спробував додати,

132
00:08:25,027 --> 00:08:30,112
що Чарлі платить вам 20 доларів, це було б недійсним, таким же недійсним,

133
00:08:30,112 --> 00:08:32,380
якби він ніколи не підписував це.

134
00:08:32,380 --> 00:08:36,162
Зауважте, це означає, що для перевірки транзакції

135
00:08:36,162 --> 00:08:40,474
потрібно знати повну історію транзакцій до цього моменту.

136
00:08:40,474 --> 00:08:47,200
Це також буде вірно для криптовалют, хоча є невеликий простір для оптимізації.

137
00:08:47,200 --> 00:08:51,025
Тут цікаво те, що цей крок усуває зв’язок між

138
00:08:51,025 --> 00:08:55,517
обліковою книгою та фактичними фізичними доларами США.

139
00:08:55,517 --> 00:08:58,868
Теоретично, якби всі у світі користувалися цією книгою,

140
00:08:58,868 --> 00:09:04,134
ви могли б прожити все своє життя, просто надсилаючи та отримуючи гроші за цією книгою,

141
00:09:04,134 --> 00:09:06,528
не конвертуючи їх у справжні долари США.

142
00:09:06,528 --> 00:09:10,814
Насправді, щоб підкреслити цей момент, давайте почнемо називати кількість

143
00:09:10,814 --> 00:09:15,100
у бухгалтерській книзі як долари в бухгалтерській книзі, або скорочено LD.

144
00:09:15,100 --> 00:09:19,143
Ви можете вільно обмінювати долари бухгалтерської книги на справжні долари США.

145
00:09:19,143 --> 00:09:24,248
Наприклад, Аліса дає Бобу 10-доларову купюру в реальному світі в обмін на те,

146
00:09:24,248 --> 00:09:29,811
що він додає та підписує транзакцію, яку Боб сплачує Алісі 10 доларів у цій спільній

147
00:09:29,811 --> 00:09:30,203
книзі.

148
00:09:30,203 --> 00:09:34,370
Але такі обміни не гарантовані протоколом.

149
00:09:34,370 --> 00:09:37,998
Тепер це більше аналогічно тому, як ви можете обміняти

150
00:09:37,998 --> 00:09:41,889
долари на євро чи будь-яку іншу валюту на відкритому ринку.

151
00:09:41,889 --> 00:09:44,940
Це просто своя незалежна річ.

152
00:09:44,940 --> 00:09:50,980
Це перше важливе, що потрібно зрозуміти про біткойн або будь-яку іншу криптовалюту.

153
00:09:50,980 --> 00:09:52,672
Це бухгалтерська книга.

154
00:09:52,672 --> 00:09:56,056
Історія транзакцій - валюта.

155
00:09:56,056 --> 00:10:00,065
Звичайно, з біткойнами гроші не потрапляють у бухгалтерську книгу,

156
00:10:00,065 --> 00:10:01,680
коли люди купують готівкою.

157
00:10:01,680 --> 00:10:04,922
За кілька хвилин я перейду до того, як нові гроші надходять у книгу.

158
00:10:04,922 --> 00:10:08,529
Але перед тим, насправді, існує ще більша різниця між нашою

159
00:10:08,529 --> 00:10:12,496
поточною системою реєстру доларів і тим, як працюють криптовалюти.

160
00:10:12,496 --> 00:10:16,003
Поки що я казав, що ця книга знаходиться в якомусь загальнодоступному місці,

161
00:10:16,003 --> 00:10:18,645
наприклад на веб-сайті, де кожен може додавати нові рядки.

162
00:10:18,645 --> 00:10:22,612
Але для цього знадобиться довіряти центральне розташування, а саме,

163
00:10:22,612 --> 00:10:26,579
хто розміщує веб-сайт, хто контролює правила додавання нових рядків.

164
00:10:26,579 --> 00:10:32,255
Щоб усунути цю частку довіри, ми зробимо, щоб кожен мав свою копію бухгалтерської книги.

165
00:10:32,255 --> 00:10:36,647
Потім, коли ви хочете здійснити транзакцію, як-от Аліса платить Бобу

166
00:10:36,647 --> 00:10:40,720
100 доларів за реєстраційними книгами, ви транслюєте це у світ,

167
00:10:40,720 --> 00:10:45,240
щоб люди почули та зафіксували у своїх приватних бухгалтерських книгах.

168
00:10:45,240 --> 00:10:49,038
Але якщо ви не зробите щось більше, ця система буде абсурдно поганою.

169
00:10:49,038 --> 00:10:52,913
Як ви могли змусити всіх погодитися щодо того, що таке правильна книга?

170
00:10:52,913 --> 00:10:57,361
Коли Боб отримує транзакцію, наприклад, як Аліса платить Бобу 10 доларів Леджера,

171
00:10:57,361 --> 00:11:01,700
як він може бути впевнений, що всі інші отримали та вірять у цю саму транзакцію?

172
00:11:01,700 --> 00:11:06,267
Що він зможе пізніше піти до Чарлі та використати ті самі 10 доларів Леджера,

173
00:11:06,267 --> 00:11:07,731
щоб здійснити транзакцію?

174
00:11:07,731 --> 00:11:12,286
Справді, уявіть, що ви просто слухаєте трансляцію транзакцій.

175
00:11:12,286 --> 00:11:15,654
Як ви можете бути впевнені, що всі інші записують

176
00:11:15,654 --> 00:11:18,618
ті самі транзакції та в тому самому порядку?

177
00:11:18,618 --> 00:11:21,306
Це справді суть проблеми.

178
00:11:21,306 --> 00:11:23,111
Це цікава головоломка.

179
00:11:23,111 --> 00:11:28,667
Чи можете ви придумати протокол, як приймати або відхиляти транзакції та в якому порядку,

180
00:11:28,667 --> 00:11:32,062
щоб ви могли бути впевнені, що будь-хто інший у світі,

181
00:11:32,062 --> 00:11:37,309
який дотримується цього самого протоколу, має особисту книгу, яка виглядає так само,

182
00:11:37,309 --> 00:11:37,803
як ваша?

183
00:11:37,803 --> 00:11:44,620
Це проблема, розглянута в оригінальній статті про біткойн.

184
00:11:44,620 --> 00:11:47,500
На високому рівні рішення, яке пропонує біткойн, полягає в тому,

185
00:11:47,500 --> 00:11:51,266
щоб довіряти будь-якій бухгалтерській книзі, в яку вкладено найбільше обчислювальної

186
00:11:51,266 --> 00:11:51,577
роботи.

187
00:11:51,577 --> 00:11:55,042
Я витрачу хвилинку, щоб пояснити, що це означає.

188
00:11:55,042 --> 00:11:57,919
Він включає криптографічну хеш-функцію.

189
00:11:57,919 --> 00:12:00,593
Загальна ідея, яку ми будуватимемо, полягає в тому,

190
00:12:00,593 --> 00:12:04,037
що якщо ви використовуєте обчислювальну роботу як основу для того,

191
00:12:04,037 --> 00:12:07,636
чому можна довіряти, ви можете зробити так, щоб шахрайські транзакції

192
00:12:07,636 --> 00:12:12,263
та конфліктні бухгалтерські книги вимагали неймовірної кількості обчислень для здійснення.

193
00:12:12,263 --> 00:12:16,284
Знову ж таки, я нагадаю вам, що це заростає в бур’ян, ніж те,

194
00:12:16,284 --> 00:12:20,240
що будь-кому потрібно знати, щоб використовувати таку валюту.

195
00:12:20,240 --> 00:12:23,852
Але це дійсно класна ідея, і якщо ви її розумієте,

196
00:12:23,852 --> 00:12:27,251
ви розумієте суть біткойна та інших криптовалют.

197
00:12:27,251 --> 00:12:30,880
Отже, перш за все, що таке хеш-функція?

198
00:12:30,880 --> 00:12:34,212
Вхідними даними для однієї з цих функцій можуть бути будь-які повідомлення чи файли,

199
00:12:34,212 --> 00:12:35,348
це насправді не має значення.

200
00:12:35,348 --> 00:12:39,878
А на виході буде рядок бітів певної фіксованої довжини, наприклад 256 бітів.

201
00:12:39,878 --> 00:12:44,713
Цей результат називається хешем або дайджестом повідомлення.

202
00:12:44,713 --> 00:12:47,656
І мета полягає в тому, щоб це виглядало випадковим.

203
00:12:47,656 --> 00:12:52,400
Він не є випадковим, він завжди дає той самий вихід для заданого вхідного сигналу.

204
00:12:52,400 --> 00:12:56,347
Але ідея полягає в тому, що якщо ви трохи зміните введення, можливо,

205
00:12:56,347 --> 00:13:00,352
відредагувавши лише один із символів, кінцевий хеш зміниться повністю.

206
00:13:00,352 --> 00:13:05,369
Фактично, для хеш-функції, яку я тут показую під назвою SHA256, те,

207
00:13:05,369 --> 00:13:11,492
як змінюється вихід, коли ви трохи змінюєте цей вхід, є абсолютно непередбачуваним.

208
00:13:11,492 --> 00:13:17,480
Розумієте, це не просто хеш-функція, це криптографічна хеш-функція.

209
00:13:17,480 --> 00:13:21,031
Це означає, що обчислення у зворотному напрямку неможливо.

210
00:13:21,031 --> 00:13:26,365
Якщо я покажу вам якийсь рядок з 1 і 0 і попрошу вас знайти вхідні дані,

211
00:13:26,365 --> 00:13:30,603
щоб хеш SHA256 цього введення давав саме цей рядок бітів,

212
00:13:30,603 --> 00:13:35,280
у вас не буде кращого способу, ніж просто вгадати та перевірити.

213
00:13:35,280 --> 00:13:39,685
І знову ж таки, якщо ви хочете відчути, скільки обчислень знадобиться,

214
00:13:39,685 --> 00:13:43,905
щоб виконати два з 256 припущень, просто подивіться додаткове відео.

215
00:13:43,905 --> 00:13:47,573
Насправді мені було надто весело писати це.

216
00:13:47,573 --> 00:13:51,123
Ви можете подумати, що якщо ви просто заглибитеся в деталі того,

217
00:13:51,123 --> 00:13:54,836
як саме працює ця функція, ви зможете провести реверсивну інженерію

218
00:13:54,836 --> 00:13:58,277
відповідного введення без необхідності вгадувати та перевіряти.

219
00:13:58,277 --> 00:14:01,440
Але ніхто ніколи не придумав, як це зробити.

220
00:14:01,440 --> 00:14:04,495
Цікаво, що немає жорстких і суворих доказів того,

221
00:14:04,495 --> 00:14:07,001
що важко обчислити у зворотному напрямку.

222
00:14:07,001 --> 00:14:10,454
І все ж величезна частина сучасної безпеки залежить від

223
00:14:10,454 --> 00:14:14,525
криптографічних хеш-функцій та ідеї, що вони мають цю властивість.

224
00:14:14,525 --> 00:14:19,749
Якщо ви подивитеся, які алгоритми лежать в основі безпечного з’єднання,

225
00:14:19,749 --> 00:14:25,626
яке ваш веб-переглядач зараз створює з YouTube або з вашим банком, ви, ймовірно,

226
00:14:25,626 --> 00:14:27,440
побачите там ім’я SHA256.

227
00:14:27,440 --> 00:14:32,628
Наразі ми зосередимося лише на тому, як така функція може довести,

228
00:14:32,628 --> 00:14:38,360
що певний список транзакцій пов’язаний із великим обчислювальним зусиллям.

229
00:14:38,360 --> 00:14:44,173
Уявіть, що хтось показує вам список транзакцій і каже: «Я знайшов спеціальний номер,

230
00:14:44,173 --> 00:14:48,960
так що коли ви розміщуєте цей номер у кінці цього списку транзакцій і

231
00:14:48,960 --> 00:14:53,474
застосовуєте SHA256 до всього, перші 30 біт цього виводу всі нулі.

232
00:14:53,474 --> 00:14:57,441
Як ви думаєте, наскільки важко їм було знайти це число?

233
00:14:57,441 --> 00:15:04,345
Для випадкового повідомлення ймовірність того, що хеш починається з 30 послідовних нулів,

234
00:15:04,345 --> 00:15:08,181
становить 1 до 230, тобто приблизно 1 до мільярда.

235
00:15:08,181 --> 00:15:11,499
А оскільки SHA256 — це криптографічна хеш-функція,

236
00:15:11,499 --> 00:15:16,312
єдиний спосіб знайти таке спеціальне число — просто вгадати та перевірити.

237
00:15:16,312 --> 00:15:21,249
Тож цій людині майже напевно довелося перебрати близько мільярда різних номерів,

238
00:15:21,249 --> 00:15:23,077
перш ніж знайти цей особливий.

239
00:15:23,077 --> 00:15:26,387
І як тільки ви дізнаєтеся це число, це дуже швидко перевірити,

240
00:15:26,387 --> 00:15:28,961
ви просто запускаєте хеш і бачите, що є 30 нулів.

241
00:15:28,961 --> 00:15:34,070
Таким чином, іншими словами, ви можете перевірити, що вони виконали великий обсяг роботи,

242
00:15:34,070 --> 00:15:37,420
але без необхідності самостійно виконувати ті самі зусилля.

243
00:15:37,420 --> 00:15:39,213
Це називається підтвердженням роботи.

244
00:15:39,213 --> 00:15:44,223
І що важливо, уся ця робота нерозривно пов’язана зі списком транзакцій.

245
00:15:44,223 --> 00:15:49,594
Якщо ви зміните одну з цих транзакцій, навіть трохи, це повністю змінить хеш.

246
00:15:49,594 --> 00:15:53,462
Тож вам доведеться пройти через ще один мільярд здогадок,

247
00:15:53,462 --> 00:15:57,863
щоб знайти нове підтвердження роботи, нове число, яке робить так,

248
00:15:57,863 --> 00:16:00,264
щоб хеш списку починався з 30 нулів.

249
00:16:00,264 --> 00:16:04,000
Тож тепер подумайте про нашу ситуацію з розподіленою книгою.

250
00:16:04,000 --> 00:16:10,622
Усі транслюють транзакції, і ми хочемо, щоб вони домовилися про правильну книгу.

251
00:16:10,622 --> 00:16:15,688
Як я вже говорив, основна ідея оригінального паперу про біткойни полягає в тому,

252
00:16:15,688 --> 00:16:19,440
щоб усі довіряли тому, в яку книгу вкладено найбільше праці.

253
00:16:19,440 --> 00:16:23,303
Це працює так, щоб спочатку організувати дану книгу на блоки,

254
00:16:23,303 --> 00:16:28,225
де кожен блок складається зі списку транзакцій разом із підтвердженням роботи,

255
00:16:28,225 --> 00:16:32,711
тобто спеціальним номером, щоб хеш усього блоку починався з купи нулів .

256
00:16:32,711 --> 00:16:36,277
Наразі припустімо, що воно має починатися з 60 нулів,

257
00:16:36,277 --> 00:16:41,427
але пізніше ми повернемося до більш систематичного способу вибору цього числа.

258
00:16:41,427 --> 00:16:44,792
Подібно до того, як транзакція вважається дійсною лише тоді,

259
00:16:44,792 --> 00:16:48,048
коли вона підписана відправником, блок вважається дійсним,

260
00:16:48,048 --> 00:16:50,200
лише якщо він має підтвердження роботи.

261
00:16:50,200 --> 00:16:55,166
Крім того, щоб забезпечити стандартний порядок цих блоків, ми зробимо так,

262
00:16:55,166 --> 00:16:59,537
що блок повинен містити хеш попереднього блоку в своєму заголовку.

263
00:16:59,537 --> 00:17:04,296
Таким чином, якби ви повернулися назад і змінили будь-який із блоків або

264
00:17:04,296 --> 00:17:08,924
поміняли порядок двох блоків, це змінило б блок, який йде після нього,

265
00:17:08,924 --> 00:17:14,140
який змінює хеш цього блоку, який змінює той, який йде після нього , і так далі.

266
00:17:14,140 --> 00:17:18,026
Це вимагало б переробити всю роботу, знайти нове спеціальне число

267
00:17:18,026 --> 00:17:21,677
для кожного з цих блоків, щоб їхні хеші починалися з 60 нулів.

268
00:17:21,677 --> 00:17:25,454
Оскільки блоки з’єднані разом таким чином, замість того,

269
00:17:25,454 --> 00:17:30,160
щоб називати це обліковою книгою, прийнято називати це ланцюгом блоків.

270
00:17:30,160 --> 00:17:32,722
У рамках нашого оновленого протоколу тепер ми

271
00:17:32,722 --> 00:17:35,340
дозволимо будь-кому у світі бути творцем блоку.

272
00:17:35,340 --> 00:17:38,994
Це означає, що вони прослуховуватимуть транзакції, що транслюються,

273
00:17:38,994 --> 00:17:42,327
зберуть їх у якийсь блок, а потім виконають цілу купу роботи,

274
00:17:42,327 --> 00:17:46,573
щоб знайти спеціальне число, яке змусить хеш цього блоку починатися з 60 нулів.

275
00:17:46,573 --> 00:17:50,289
Коли вони знаходять його, вони транслюють знайдений блок.

276
00:17:50,289 --> 00:17:54,520
Щоб винагородити творця блоку за всю цю роботу, коли він збирає блок,

277
00:17:54,520 --> 00:17:58,691
ми дозволимо йому включити дуже особливу транзакцію на його початку,

278
00:17:58,691 --> 00:18:03,164
у якій вона отримує, скажімо, 10 доларів у бухгалтерській книзі з повітря.

279
00:18:03,164 --> 00:18:06,423
Це називається винагородою за блокування, і це виняток із наших

280
00:18:06,423 --> 00:18:09,632
звичайних правил щодо того, приймати чи не приймати транзакції.

281
00:18:09,632 --> 00:18:13,780
Він не походить ні від кого, тому його не потрібно підписувати.

282
00:18:13,780 --> 00:18:16,669
Це також означає, що загальна кількість доларів

283
00:18:16,669 --> 00:18:19,558
у нашій економіці зростає з кожним новим блоком.

284
00:18:19,558 --> 00:18:24,553
Створення блоків часто називають майнінгом, оскільки воно вимагає виконання

285
00:18:24,553 --> 00:18:29,220
великої кількості роботи та введення нових частинок валюти в економіку.

286
00:18:29,220 --> 00:18:33,074
Але коли ви чуєте або читаєте про майнерів, майте на увазі,

287
00:18:33,074 --> 00:18:36,993
що насправді вони прослуховують транзакції, створюють блоки,

288
00:18:36,993 --> 00:18:41,169
транслюють ці блоки та отримують за це винагороду новими грошима.

289
00:18:41,169 --> 00:18:45,648
З точки зору майнерів, кожен блок схожий на мініатюрну лотерею,

290
00:18:45,648 --> 00:18:51,457
де кожен вгадує числа якнайшвидше, поки один щасливчик не знайде спеціальне число,

291
00:18:51,457 --> 00:18:56,777
яке змушує хеш блоку починатися з багатьох нулів, і вони отримують нагорода.

292
00:18:56,777 --> 00:19:01,071
Для всіх, хто просто хоче використовувати цю систему для здійснення платежів,

293
00:19:01,071 --> 00:19:05,421
замість того, щоб прослуховувати транзакції, вони всі починають прослуховувати

294
00:19:05,421 --> 00:19:10,046
лише блоки, які транслюються майнерами, і оновлюють власні особисті копії блокчейна.

295
00:19:10,046 --> 00:19:13,470
Тепер ключовим доповненням до нашого протоколу є те,

296
00:19:13,470 --> 00:19:18,123
що якщо ви чуєте два різні блокчейни з конфліктною історією транзакцій,

297
00:19:18,123 --> 00:19:22,775
ви відкладаєтеся до найдовшого, того, з яким докладено найбільше роботи.

298
00:19:22,775 --> 00:19:26,813
Якщо нічия, просто зачекайте, поки не почуєте додатковий блок,

299
00:19:26,813 --> 00:19:28,800
який робить один із них довшим.

300
00:19:28,800 --> 00:19:32,340
Тож, незважаючи на те, що немає центрального органу влади,

301
00:19:32,340 --> 00:19:35,160
і кожен підтримує свою власну копію блокчейну,

302
00:19:35,160 --> 00:19:40,500
якщо всі погодяться віддати перевагу тому блокчейну, на який докладено найбільше роботи,

303
00:19:40,500 --> 00:19:43,680
у нас є спосіб досягти децентралізованого консенсусу.

304
00:19:43,680 --> 00:19:46,590
Щоб зрозуміти, чому ця система є надійною, і зрозуміти,

305
00:19:46,590 --> 00:19:49,500
на якому етапі ви повинні вірити, що платіж є законним,

306
00:19:49,500 --> 00:19:53,293
було б дуже корисно пройтися через те, що потрібно, щоб обдурити когось,

307
00:19:53,293 --> 00:19:54,748
хто використовує цю систему.

308
00:19:54,748 --> 00:19:59,048
Можливо, Аліса намагається обдурити Боба шахрайським блокуванням,

309
00:19:59,048 --> 00:20:02,110
а саме: вона намагається надіслати йому такий,

310
00:20:02,110 --> 00:20:07,583
у якому вона платить йому 100 доларів Ledger, але не транслює цей блок решті мережі.

311
00:20:07,583 --> 00:20:11,563
Таким чином усі інші досі думають, що у неї є ці 100 доларів Леджера.

312
00:20:11,563 --> 00:20:16,822
Для цього їй доведеться знайти дійсне підтвердження роботи раніше всіх інших майнерів,

313
00:20:16,822 --> 00:20:19,058
кожен з яких працює над своїм блоком.

314
00:20:19,058 --> 00:20:22,155
І це точно може статися, можливо, Аліса випадково

315
00:20:22,155 --> 00:20:24,880
виграє цю мініатюрну лотерею раніше за всіх.

316
00:20:24,880 --> 00:20:28,305
Але Боб усе ще чутиме трансляції інших майнерів, тому,

317
00:20:28,305 --> 00:20:31,420
щоб змусити його повірити в цей шахрайський блок,

318
00:20:31,420 --> 00:20:34,471
Алісі доведеться виконати всю роботу самостійно,

319
00:20:34,471 --> 00:20:39,267
щоб продовжувати додавати блоки в цьому спеціальному форку в блокчейні Боба,

320
00:20:39,267 --> 00:20:42,942
який відрізняється від того, що він чує від решти шахтарів.

321
00:20:42,942 --> 00:20:48,216
Пам’ятайте, згідно з протоколом Боб завжди довіряє найдовшому ланцюжку, про який він знає.

322
00:20:48,216 --> 00:20:51,965
Аліса може зберегти це протягом кількох блоків,

323
00:20:51,965 --> 00:20:57,981
якщо випадково знайде блоки швидше, ніж решта майнерів у мережі разом узятих.

324
00:20:57,981 --> 00:21:03,887
Але якщо вона не матиме близько 50% обчислювальних ресурсів серед усіх майнерів,

325
00:21:03,887 --> 00:21:08,773
ймовірність того, що блокчейн, над яким працюють усі інші майнери,

326
00:21:08,773 --> 00:21:14,315
зростатиме швидше, ніж єдиний шахрайський блокчейн, який Аліса передає Бобу.

327
00:21:14,315 --> 00:21:19,115
Тож через достатньо часу Боб просто відкине те, що він чує від Аліси,

328
00:21:19,115 --> 00:21:22,955
на користь довшого ланцюжка, над яким працюють усі інші.

329
00:21:22,955 --> 00:21:28,645
Зауважте, це означає, що ви не обов’язково довіряєте новому блоку, який ви чуєте відразу,

330
00:21:28,645 --> 00:21:33,640
натомість вам слід зачекати, доки кілька нових блоків буде додано поверх нього.

331
00:21:33,640 --> 00:21:37,477
Якщо ви ще не чули про довші блокчейни, ви можете бути впевнені,

332
00:21:37,477 --> 00:21:41,785
що цей блок є частиною того самого ланцюга, який використовують усі інші.

333
00:21:41,785 --> 00:21:46,040
Таким чином, ми досягли всіх основних ідей.

334
00:21:46,040 --> 00:21:49,426
Ця система розподіленого реєстру, заснована на доказі роботи,

335
00:21:49,426 --> 00:21:53,906
більш-менш відповідає тому, як працює протокол біткойн і багато інших криптовалют.

336
00:21:53,906 --> 00:21:55,896
Потрібно прояснити лише кілька деталей.

337
00:21:55,896 --> 00:22:00,232
Раніше я говорив, що доказом роботи може бути пошук спеціального числа,

338
00:22:00,232 --> 00:22:02,340
щоб хеш блоку починався з 60 нулів.

339
00:22:02,340 --> 00:22:08,333
Фактичний протокол біткойн працює так, щоб періодично змінювати цю кількість нулів,

340
00:22:08,333 --> 00:22:12,115
щоб пошук нового блоку займав у середньому 10 хвилин.

341
00:22:12,115 --> 00:22:15,489
Оскільки в мережу додається все більше майнерів,

342
00:22:15,489 --> 00:22:20,928
завдання стає все складнішим і складнішим, тому ця мініатюрна лотерея має лише

343
00:22:20,928 --> 00:22:23,200
одного переможця кожні 10 хвилин.

344
00:22:23,200 --> 00:22:27,889
Багато новіших криптовалют мають набагато коротший час блокування.

345
00:22:27,889 --> 00:22:32,468
І всі гроші в біткойнах зрештою надходять від певної винагороди за блок.

346
00:22:32,468 --> 00:22:35,923
На початку ці винагороди становили 50 біткойнів за блок.

347
00:22:35,923 --> 00:22:39,225
Насправді є чудовий веб-сайт, який називається Block Explorer,

348
00:22:39,225 --> 00:22:41,897
який дозволяє легко переглядати блокчейн біткойнів.

349
00:22:41,897 --> 00:22:45,760
І якщо ви подивитеся на кілька перших блоків у ланцюжку, ви побачите,

350
00:22:45,760 --> 00:22:49,844
що вони не містять жодних транзакцій, окрім 50 біткойнів, наданих майнеру.

351
00:22:49,844 --> 00:22:56,568
Але кожні 210 000 блоків, тобто приблизно кожні 4 роки, ця винагорода скорочується вдвічі.

352
00:22:56,568 --> 00:23:00,115
Тож зараз винагорода становить 12.5 Bitcoin за блок.

353
00:23:00,115 --> 00:23:04,628
І оскільки ця винагорода геометрично зменшується з часом,

354
00:23:04,628 --> 00:23:09,920
це означає, що ніколи не буде існувати більше 21 мільйона біткойнів.

355
00:23:09,920 --> 00:23:13,497
Однак це не означає, що майнери перестануть заробляти гроші.

356
00:23:13,497 --> 00:23:17,694
Окрім винагороди за блок, майнери також можуть отримувати комісію за транзакції.

357
00:23:17,694 --> 00:23:23,029
Це працює так: щоразу, коли ви робите платіж, ви можете за бажанням включити до нього

358
00:23:23,029 --> 00:23:27,247
комісію за транзакцію, яка буде надходити майнеру будь-якого блоку,

359
00:23:27,247 --> 00:23:28,736
який включає цей платіж.

360
00:23:28,736 --> 00:23:31,522
Причина, по якій ви можете це зробити, полягає в тому,

361
00:23:31,522 --> 00:23:35,270
щоб стимулювати майнерів фактично включити трансакцію, яку ви транслюєте,

362
00:23:35,270 --> 00:23:36,132
у наступний блок.

363
00:23:36,132 --> 00:23:41,547
Розумієте, у біткойнах кожен блок обмежується приблизно 2400 транзакціями,

364
00:23:41,547 --> 00:23:45,807
що, на думку багатьох критиків, є невиправданим обмеженням.

365
00:23:45,807 --> 00:23:51,626
Для порівняння, Visa обробляє в середньому близько 1700 транзакцій на секунду,

366
00:23:51,626 --> 00:23:55,162
і вони здатні обробляти понад 24 000 на секунду.

367
00:23:55,162 --> 00:24:01,045
Ця відносно повільна обробка біткойнів призводить до вищих комісій за транзакції,

368
00:24:01,045 --> 00:24:06,497
оскільки це визначає, які транзакції майнери вирішать включити в новий блок.

369
00:24:06,497 --> 00:24:11,784
Все це далеко не всебічне охоплення криптовалют.

370
00:24:11,784 --> 00:24:16,325
Є ще багато нюансів і варіантів дизайну, яких я навіть не торкався.

371
00:24:16,325 --> 00:24:20,876
Але я сподіваюся, що це може забезпечити стабільний стовбур дерева розуміння у стилі

372
00:24:20,876 --> 00:24:25,320
«Почекай, але чому» для тих, хто хоче додати ще кілька гілок із подальшим читанням.

373
00:24:25,320 --> 00:24:28,182
Як я вже сказав на початку, одним із мотивів цього є те,

374
00:24:28,182 --> 00:24:30,643
що багато грошей почали надходити до криптовалют.

375
00:24:30,643 --> 00:24:36,045
І хоча я не хочу робити жодних претензій щодо того, хороша це інвестиція чи погана,

376
00:24:36,045 --> 00:24:41,640
я справді вважаю, що людям, які починають гру, добре знати принаймні основи технології.

377
00:24:41,640 --> 00:24:46,160
Як завжди, я щиро дякую тим із вас, хто зробив цей канал можливим на Patreon.

378
00:24:46,160 --> 00:24:50,467
Я розумію, що не кожен може зробити внесок, але якщо ви все ще зацікавлені в допомозі,

379
00:24:50,467 --> 00:24:53,933
один із найкращих способів зробити це – просто поділитися відео, які,

380
00:24:53,933 --> 00:24:56,855
на вашу думку, можуть бути цікавими чи корисними для інших.

381
00:24:56,855 --> 00:24:54,480
Я знаю, що ти це знаєш, але це дійсно допомагає.

