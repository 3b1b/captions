1
00:00:03,899 --> 00:00:06,480
拥有比特币意味着什么？

2
00:00:07,420 --> 00:00:11,912
很多人都听说过比特币，它是一种 完全数字化的货币，

3
00:00:11,912 --> 00:00:16,224
没有政府发行，没有银行需要管理账 户和验证交易，

4
00:00:16,224 --> 00:00:19,100
而且没有人真正知道是谁发明了它。

5
00:00:19,380 --> 00:00:23,280
然而许 多人并不知道这个问题的答案，至少不完全知道。

6
00:00:24,100 --> 00:00:29,973
为了实现 这一目标，并确保答案背后的技术细节确实让人感到 

7
00:00:29,973 --> 00:00:35,240
有动力，我们将逐步介绍您如何发明自己版本的比特 币。

8
00:00:36,140 --> 00:00:40,114
我们将从您使用公共分类账记录与朋友的付款开始 ，

9
00:00:40,114 --> 00:00:44,088
然后当您开始越来越不信任您的朋友和周围的世界时，

10
00:00:44,088 --> 00:00:48,560
 如果您足够聪明，可以从以下地方引入一些想法密码学可 

11
00:00:48,560 --> 00:00:52,700
以帮助规避信任需求，最终得到的就是所谓的加密货币。

12
00:00:53,840 --> 00:00:57,668
比特币只是加密货币的第一个实施示例，

13
00:00:57,668 --> 00:01:02,560
现在还有数千种加密 货币在与传统货币进行交易。

14
00:01:03,300 --> 00:01:08,259
走上自己发明的道路有助 于为了解游戏中的一些较新的玩家

15
00:01:08,259 --> 00:01:13,220
奠定基础，并认识 到何时以及为何有不同设计选择的空间。

16
00:01:14,100 --> 00:01:18,530
事实上， 我选择这个主题的原因之一是，

17
00:01:18,530 --> 00:01:23,660
去年这些货币受 到了大量的关注、投资和炒作。

18
00:01:24,280 --> 00:01:29,214
我不会评论或推测 当前或未来的汇率，但我认为我们都同意，

19
00:01:29,214 --> 00:01:33,620
任何想要购买 加密货币的人都应该真正知道它是什么。

20
00:01:33,920 --> 00:01:38,180
我的意思不仅仅是 与黄金开采的模糊联系的类比，

21
00:01:38,180 --> 00:01:41,885
我的意思是对我们发送、接 收和创建加密货

22
00:01:41,885 --> 00:01:45,220
币时计算机正在做什么的实际直接描述。

23
00:01:46,300 --> 00:01:50,640
值得强调的一件事是，即使你和我要深入研究这里的细节，

24
00:01:50,640 --> 00:01:55,481
并 且这需要花费有意义的时间，但如果你只是想使用加密货币，

25
00:01:55,481 --> 00:02:00,322
 你实际上不需要知道这些细节，就像你不知道一样当您刷信用 

26
00:02:00,322 --> 00:02:03,160
卡时，无需了解幕后发生的详细情况。

27
00:02:03,720 --> 00:02:07,540
与任何数字支付一样， 有许多用户友好的应用程序可

28
00:02:07,540 --> 00:02:11,360
让您只需发送和接收货币，而无 需考虑发生了什么。

29
00:02:11,660 --> 00:02:17,020
不同之处在于，其背后的骨干不是 验证交易的银行。

30
00:02:17,540 --> 00:02:20,462
相反，它是一个基于密码学中的一 

31
00:02:20,462 --> 00:02:24,480
些数学原理的去中心化、去信任验证的聪明系统。

32
00:02:25,900 --> 00:02:30,480
但首先，我希望你能真正把加密货币之类的想法放在一 边几分钟。

33
00:02:31,080 --> 00:02:35,380
我们将从更实际的东西开始这个故事，账 本和数字签名。

34
00:02:36,340 --> 00:02:41,330
如果您和您的朋友经常兑换货币，支 付您应得的晚餐费用等，

35
00:02:41,330 --> 00:02:44,360
那么一直兑换现金可能会很不 方便。

36
00:02:44,720 --> 00:02:47,117
因此，您可能会保留一个公共分类账，

37
00:02:47,117 --> 00:02:50,080
记录您打 算在未来某个时刻支付的所有付款。

38
00:02:50,620 --> 00:02:52,511
Alice 付给 Bob 20 美元，

39
00:02:52,511 --> 00:02:55,100
Bob 付给 Charlie 40 美元，诸如此类。

40
00:02:55,500 --> 00:02:58,776
这个分类账将是公开的，每个人都可 以访问，

41
00:02:58,776 --> 00:03:01,740
就像一个任何人都可以去添加新行的网站。

42
00:03:02,480 --> 00:03:07,940
假设每个月末你们都聚在一起，查看交易清单 ，然后结算。

43
00:03:08,280 --> 00:03:11,479
如果你花的钱多于收到的钱，你就把钱放 进锅里，

44
00:03:11,479 --> 00:03:14,400
如果你收到的钱多于花的钱，你就把钱拿出来。

45
00:03:15,460 --> 00:03:19,360
因此，作为这个非常简单的系统一部分的协议可能如下所示。

46
00:03:20,020 --> 00:03:22,776
任何人 都可以在账本上添加行数，

47
00:03:22,776 --> 00:03:25,360
每个月底你们都会聚在一起结算。

48
00:03:26,300 --> 00:03:30,760
现在像这样的公共分类账的一个问题是任何人 都可以添加一行。

49
00:03:31,020 --> 00:03:34,560
那么，怎样才能阻止鲍勃在未经爱丽丝批准的情况下写下“ 

50
00:03:34,560 --> 00:03:36,920
爱丽丝向鲍勃支付 100 美元”呢？

51
00:03:37,780 --> 00:03:44,940
我们如何才能相信所 有这些交易都是发送者所希望的？

52
00:03:44,940 --> 00:03:48,540
这就是密码学的第一个部分——数字签名。

53
00:03:49,480 --> 00:03:52,880
就像手写签 名一样，这里的想法是，

54
00:03:52,880 --> 00:03:57,079
爱丽丝应该能够在该交易旁边添加 一些东西，

55
00:03:57,079 --> 00:04:03,080
证明她已经看到并批准了它，并且其他任何人 都无法伪造该签名。

56
00:04:04,300 --> 00:04:08,580
乍一看，数字签名似乎根 本不可能。

57
00:04:09,220 --> 00:04:13,860
我的意思是，构成该签名的任何数据都可以 由计算机读取和复制。

58
00:04:14,400 --> 00:04:17,459
那么如何防止伪造呢？

59
00:04:17,459 --> 00:04:21,480
其工作原理是，每个人都会生成所谓的公钥-私钥对，

60
00:04:21,480 --> 00:04:24,160
每个 密钥对看起来都像一些位串。

61
00:04:24,800 --> 00:04:29,251
私钥有时也称为秘密密钥，因 此我们可以将其缩写为 SK，

62
00:04:29,251 --> 00:04:31,000
而将公钥缩写为 PK。

63
00:04:31,000 --> 00:04:36,220
顾名思义，这个秘密密钥是您想要保守秘密的东西。

64
00:04:37,060 --> 00:04:39,460
在现实世界中，无论您签署什么文档，

65
00:04:39,460 --> 00:04:41,720
您的手写签名看起来都是一样 的。

66
00:04:42,280 --> 00:04:46,940
但数字签名实际上要强大得多，因为它会根据不同的消息而变 化。

67
00:04:47,840 --> 00:04:52,182
它看起来像一些由 1 和 0 组成的字符串，

68
00:04:52,182 --> 00:04:56,129
通常类 似于 256 位，即使稍微改变消

69
00:04:56,129 --> 00:04:59,880
息也会完全改变该消息上 的签名的外观。

70
00:05:00,840 --> 00:05:04,360
更正式地说，生成签名涉及一个既 

71
00:05:04,360 --> 00:05:08,540
取决于消息本身又取决于您的私钥的函数。

72
00:05:09,200 --> 00:05:13,700
私钥确保只有您可以生成该签名，并且它取决于消息这 

73
00:05:13,700 --> 00:05:18,380
一事实意味着没有人可以复制您的签名之一并将其伪造到 

74
00:05:18,380 --> 00:05:19,640
另一条消息上。

75
00:05:21,000 --> 00:05:25,683
与此相关的是第二个函数，用于验 证签名是否有效，

76
00:05:25,683 --> 00:05:28,220
这就是公钥发挥作用的地方。

77
00:05:29,200 --> 00:05:32,892
它所做的只是输出 true 或 false，

78
00:05:32,892 --> 00:05:37,760
以指示 这是否是由与您用于验证的公钥关联的私钥生成的签名。

79
00:05:38,640 --> 00:05:44,152
我不会详细介绍这两个函数到底如何工作，但其想法 是，

80
00:05:44,152 --> 00:05:49,240
如果您不知道密钥，则完全不可能找到有效的 签名。

81
00:05:50,060 --> 00:05:54,469
具体来说，没有比猜测和检查随机签名更好的 策略了，

82
00:05:54,469 --> 00:05:57,820
您可以使用每个人都知道的公钥进行检查。

83
00:05:58,980 --> 00:06:03,200
现在想想长度为256位的签名有多少个。

84
00:06:03,840 --> 00:06:06,180
这是 2 的 256 次方！

85
00:06:07,140 --> 00:06:09,560
这是一个大得愚蠢的数字。

86
00:06:09,860 --> 00:06:13,640
称其为天文巨星，未免 太过于相信天文学了。

87
00:06:14,260 --> 00:06:19,680
事实上，我制作了一个 补充视频，专门用来说明这个数字有多大。

88
00:06:20,380 --> 00:06:26,203
但在这里，我们只能说，当您验证给定消息的签名是否 有效时，

89
00:06:26,203 --> 00:06:30,421
您可以非常有信心地认为，某人生成签名的唯 

90
00:06:30,421 --> 00:06:35,040
一方法是他们知道与您用于验证的公钥关联的密钥。

91
00:06:37,120 --> 00:06:42,200
确保人们在账本上签署交易固然很好，但有一个小漏 洞。

92
00:06:42,720 --> 00:06:46,532
如果爱丽丝签署了一笔交易，例如爱丽丝向鲍勃支付 

93
00:06:46,532 --> 00:06:50,979
100 美 元，即使鲍勃无法在新消息上伪造爱丽丝的签名，

94
00:06:50,979 --> 00:06:53,680
他也可以根据需要多 次复制同一行。

95
00:06:54,300 --> 00:06:56,760
该消息签名组合仍然有效。

96
00:06:56,760 --> 00:07:01,437
为了解决这个问题，我们在您签署交易时，

97
00:07:01,437 --> 00:07:07,100
消息还必须 包含某种与该交易关联的唯一 ID。

98
00:07:07,840 --> 00:07:12,097
这样，如果 Alice 多次向 Bob 支付 

99
00:07:12,097 --> 00:07:17,280
100 美 元，则分类账上的每一行都需要一个全新的签名。

100
00:07:18,160 --> 00:07:21,940
数字签名消除了对该初始协议的很大程度的信任。

101
00:07:22,380 --> 00:07:27,280
但即便如此 ，如果你真的这样做，你就会依赖某种荣誉制度。

102
00:07:27,720 --> 00:07:32,092
也就是 说，您相信每个人都会真正遵守并在每个月底以现 

103
00:07:32,092 --> 00:07:32,740
金结算。

104
00:07:33,560 --> 00:07:39,480
例如，如果查理欠下了数千美元的债务并且拒绝 露面怎么办？

105
00:07:40,120 --> 00:07:47,280
恢复现金结算的唯一真正原因是，如果有 人欠了很多钱。

106
00:07:47,860 --> 00:07:51,028
因此，也许你有一个聪明的想法，只要 

107
00:07:51,028 --> 00:07:54,196
你有办法防止人们支出超出他们的收入，

108
00:07:54,196 --> 00:07:56,660
你实际上就不 必用现金结算。

109
00:07:57,340 --> 00:08:00,664
也许你首先让每个人向彩池中支付 100 美元，

110
00:08:00,664 --> 00:08:04,133
然后让账本的前几行显示爱丽丝获得 100 美元，

111
00:08:04,133 --> 00:08:08,180
 鲍勃获得 100 美元，查理获得 100 美元，等等。

112
00:08:09,020 --> 00:08:13,673
现在，只要有人花费的金额超过了账本上的金额，

113
00:08:13,673 --> 00:08:16,000
就不要接受 任何交易。

114
00:08:16,840 --> 00:08:21,564
例如，如果前两笔交易是查理向爱丽丝支付 50 美元，

115
00:08:21,564 --> 00:08:26,833
查理 向鲍勃支付 50 美元，如果他尝试添加查理向您支付 

116
00:08:26,833 --> 00:08:31,740
20 美元，则该交 易将无效，就像他从未签名一样无效。

117
00:08:31,740 --> 00:08:35,494
请注意，这意味着验证交易需 要

118
00:08:35,494 --> 00:08:39,500
了解截至该点的完整交易历史记录。

119
00:08:40,159 --> 00:08:45,960
加密货币也 是如此，尽管还有一点优化的空间。

120
00:08:48,380 --> 00:08:55,600
这里有趣的是，这一步消除了账本和实际实物美 元之间的联系。

121
00:08:56,200 --> 00:09:00,209
理论上，如果世界上每个人都在使用这个 分类账，

122
00:09:00,209 --> 00:09:04,393
那么你可以一辈子只在这个分类账上发送和接收资金，

123
00:09:04,393 --> 00:09:06,660
 而无需转换为真正的美元。

124
00:09:07,580 --> 00:09:11,306
事实上，为了强调这一点，我们 开始将

125
00:09:11,306 --> 00:09:15,240
账本上的数量称为账本美元，简称 LD。

126
00:09:15,240 --> 00:09:18,660
您可以 自由地将账本美元兑换成真实的美元。

127
00:09:19,060 --> 00:09:22,407
例如，Alice 在现实世界中给 Bob 一张 

128
00:09:22,407 --> 00:09:25,336
10 美元的钞票，以换取他添加并签署交易，

129
00:09:25,336 --> 00:09:29,520
Bob 向 Ali ce 支付 10 美元到这个公共分类账。

130
00:09:30,720 --> 00:09:34,220
但协议并不能保证这样的 交换。

131
00:09:34,720 --> 00:09:38,390
现在，它更类似于您在公开市场上将美元兑换成 

132
00:09:38,390 --> 00:09:40,560
欧元或任何其他货币的方式。

133
00:09:41,180 --> 00:09:43,800
它只是它自己独立的东西。

134
00:09:44,580 --> 00:09:49,780
这是了解比特币或任何其他加密货币的第一件重要的事情。

135
00:09:49,780 --> 00:09:52,420
它是一个分类账。

136
00:09:53,180 --> 00:09:55,980
交易的历史就是货币。

137
00:09:57,160 --> 00:10:01,560
当然，对于比特币 ，人们使用现金购买时，钱不会进入分类账。

138
00:10:02,000 --> 00:10:04,820
几分钟后我将了 解新资金如何进入分类账。

139
00:10:05,540 --> 00:10:08,880
但在此之前，我们当前的账本美 元系统和加密

140
00:10:08,880 --> 00:10:12,380
货币的运作方式之间实际上存在更显着的差 异。

141
00:10:13,020 --> 00:10:16,375
到目前为止，我已经说过这个分类帐位于某个公共场 所，

142
00:10:16,375 --> 00:10:18,440
例如任何人都可以添加新行的网站。

143
00:10:19,220 --> 00:10:23,959
但这需要信任一 个中心位置，即谁托管该网站，

144
00:10:23,959 --> 00:10:26,760
谁控制添加新线路的规 则。

145
00:10:27,340 --> 00:10:31,540
为了消除这种信任，我们将让每个人保留自己的账本副本。

146
00:10:31,540 --> 00:10:35,453
然后，当您想要进行交易时，例如 Alice 向 Bob 

147
00:10:35,453 --> 00:10:38,528
支付 100 Ledger Dollars，

148
00:10:38,528 --> 00:10:42,441
您可以向全世界广播该交易，以便人们可以听到并记录在自己的

149
00:10:42,441 --> 00:10:43,420
私人分类账上。

150
00:10:44,840 --> 00:10:49,260
但除非你做更多的事情，否则这个系统就糟糕得离谱。

151
00:10:49,820 --> 00:10:52,160
如何让每个人都同 意什么是正确的账本？

152
00:10:52,160 --> 00:10:55,110
当 Bob 收到一笔交易时，比如 Alice 

153
00:10:55,110 --> 00:10:58,574
向 Bob 支付 10 Ledger Dollars，

154
00:10:58,574 --> 00:11:01,140
他如何确定其他人收到并相 信同一笔交易？

155
00:11:01,140 --> 00:11:04,170
他稍后可以去找 Charlie 并使用这 10 

156
00:11:04,170 --> 00:11:07,200
个 Ledg er Dollars 进行交易吗？

157
00:11:08,240 --> 00:11:12,060
真的，想象一下您自己正在收听 正在广播的交易。

158
00:11:12,760 --> 00:11:18,220
您如何确定其他人都以相同的顺 序记录相同的交易？

159
00:11:19,420 --> 00:11:21,360
这确实是问题的核心。

160
00:11:21,600 --> 00:11:22,740
这是 一个有趣的谜题。

161
00:11:23,420 --> 00:11:27,108
您能否提出一个关于如何接受或拒绝交易以 

162
00:11:27,108 --> 00:11:30,243
及按什么顺序接受或拒绝交易的协议，

163
00:11:30,243 --> 00:11:34,853
以便您可以确信世界 上遵循相同协议的其他人都拥有与

164
00:11:34,853 --> 00:11:37,620
您的个人账本相同的个人 账本？

165
00:11:38,300 --> 00:11:41,580
这是原始比特币论文中解决的问题。

166
00:11:44,060 --> 00:11:49,845
从较高的层面来看，比特币提供的解决方案是信任投入 

167
00:11:49,845 --> 00:11:52,160
最多计算工作的账本。

168
00:11:52,540 --> 00:11:54,860
我将花点时间解释一下这到底意味着什么。

169
00:11:55,320 --> 00:11:57,540
它涉及加密哈希函数。

170
00:11:57,540 --> 00:12:04,789
我们将构建的总体想法是 ，如果您使用计算工作作为信任的基础，

171
00:12:04,789 --> 00:12:11,555
则可以实 现欺诈性交易和冲突账本需要不可行的计算量才能 

172
00:12:11,555 --> 00:12:12,280
实现。

173
00:12:13,040 --> 00:12:16,310
我再次提醒您，这已经超出了任何 

174
00:12:16,310 --> 00:12:19,580
人使用这样的货币所需了解的范围。

175
00:12:20,120 --> 00:12:23,062
但这是一个非常酷的想法，如果你理解它，

176
00:12:23,062 --> 00:12:26,160
你就理解了比特币和其 他加密货币的核心。

177
00:12:28,100 --> 00:12:29,940
首先，什么是哈希函数？

178
00:12:30,800 --> 00:12:39,780
这些函数之一的输入可以是任何类型的消息或文件，这并 不重要。

179
00:12:39,780 --> 00:12:45,540
输出是一串具有某种固定长度的位，例如 256 位。

180
00:12:45,540 --> 00:12:49,680
该输出称为消息的哈希值或摘要。

181
00:12:49,680 --> 00:12:50,960
其目的是让它 看起来随机。

182
00:12:50,960 --> 00:12:53,880
它不是随机的，对于给定的输入它总是给出相同的输出。

183
00:12:53,880 --> 00:12:56,935
但其想法是，如果您稍微更改输入，

184
00:12:56,935 --> 00:13:01,900
也许只编辑其中一个字符，则 生成的哈希值会完全改变。

185
00:13:01,900 --> 00:13:06,921
事实上，对于我在这里展示的称为 SH A256 的哈希函数，

186
00:13:06,921 --> 00:13:11,440
当您稍微更改输入时，输出的变化方式是完全不可 预测的。

187
00:13:12,440 --> 00:13:17,060
你看，这不仅仅是一个哈希函数，它是一个加密哈希函数。

188
00:13:17,340 --> 00:13:20,660
这意味着反向计算是不可行的。

189
00:13:21,260 --> 00:13:25,952
如果我向您展示一些 由 1 和 0 组成的字符串，

190
00:13:25,952 --> 00:13:30,833
并要求您找到一个输入，以便该输入的 SHA 256 

191
00:13:30,833 --> 00:13:35,901
哈希值给出这个精确的位字符串，您将没有比猜测和检查更好

192
00:13:35,901 --> 00:13:36,840
的方法了。

193
00:13:36,840 --> 00:13:40,936
再说一遍，如果您想了解进行 2 到 256 

194
00:13:40,936 --> 00:13:45,220
次猜测 需要多少计算量，只需观看补充视频即可。

195
00:13:45,220 --> 00:13:46,660
事实上，我 写那件事太有趣了。

196
00:13:48,560 --> 00:13:53,040
您可能会认为，如果您真正深入了 解该函数的工作原理，

197
00:13:53,040 --> 00:13:57,520
就可以对适当的输入进行逆向工程 ，而无需猜测和检查。

198
00:13:58,240 --> 00:14:00,840
但没有人找到一种方法来做到这一点。

199
00:14:01,600 --> 00:14:06,960
有趣的是，没有冷酷严格的证据表明反向计算是困难 的。

200
00:14:07,620 --> 00:14:12,065
然而，现代安全性在很大程度上取决于加密哈希函数以 

201
00:14:12,065 --> 00:14:14,200
及它们具有此属性的想法。

202
00:14:14,940 --> 00:14:18,583
如果您要查看浏览器现在与 Y ouTube 

203
00:14:18,583 --> 00:14:21,896
或银行建立的安全连接背后的算法是什 么，

204
00:14:21,896 --> 00:14:25,540
您可能会看到 SHA256 名称出现在其中。

205
00:14:25,540 --> 00:14:31,571
目前，我们的重点只是这样的函数如何证明 

206
00:14:31,571 --> 00:14:37,000
特定的交易列表与大量的计算工作相关。

207
00:14:38,040 --> 00:14:42,228
想象一下，有人向您展示了一个交易列表，他们说，嘿，

208
00:14:42,228 --> 00:14:47,255
我发现了一个特 殊的数字，这样当您将该数字放在该交易列表的末

209
00:14:47,255 --> 00:14:50,774
尾并将 SHA25 6 应用于整个事物时，

210
00:14:50,774 --> 00:14:53,120
该输出的前 30 位都是零。

211
00:14:54,100 --> 00:14:58,260
您认为他们 找到这个号码有多难？

212
00:14:58,320 --> 00:15:01,667
对于随机消息，散列恰好以 3 0 

213
00:15:01,667 --> 00:15:07,180
个连续零开头的概率为 230 分之一，约为十亿分之 一。

214
00:15:08,200 --> 00:15:11,672
由于 SHA256 是一种加密哈希函数，

215
00:15:11,672 --> 00:15:15,840
因此找到此类特殊 数字的唯一方法就是猜测和检查。

216
00:15:16,660 --> 00:15:19,442
因此，这个人几乎肯定必须检 查大约十

217
00:15:19,442 --> 00:15:22,380
亿个不同的数字才能找到这个特殊的数字。

218
00:15:23,380 --> 00:15:26,110
一旦你知 道了这个数字，验证起来就非常快了，

219
00:15:26,110 --> 00:15:28,840
你只需运行哈希值就可以看到 有 30 个零。

220
00:15:29,800 --> 00:15:33,968
换句话说，您可以验证他们是否进行 了大量的工作，

221
00:15:33,968 --> 00:15:36,400
而无需您自己进行同样的努力。

222
00:15:37,200 --> 00:15:38,800
这称为工作量证明。

223
00:15:39,460 --> 00:15:44,220
重要的是，所有这些工作本质上都与交 易列表相关。

224
00:15:44,900 --> 00:15:48,010
如果你改变其中一笔交易，即使是轻微的改变，

225
00:15:48,010 --> 00:15:49,640
也 会完全改变哈希值。

226
00:15:50,080 --> 00:15:54,119
因此，你必须进行另外十亿次猜测才能找到 新的工作证明，

227
00:15:54,119 --> 00:15:57,860
一个新的数字，使列表的哈希值以 30 个 零开头。

228
00:15:57,860 --> 00:16:02,580
现在回想一下我们的分布式账本情况。

229
00:16:02,580 --> 00:16:07,938
每个人都在那里广播交易，我们希望有一种方式让他们就 

230
00:16:07,938 --> 00:16:10,000
正确的账本达成一致。

231
00:16:10,000 --> 00:16:13,552
正如我所说，原始比特币论文背后 

232
00:16:13,552 --> 00:16:18,660
的核心思想是让每个人都信任投入最多工作的账本。

233
00:16:19,280 --> 00:16:23,225
其工作原理是首先将给定的分类帐组织成块，

234
00:16:23,225 --> 00:16:29,143
其中每个 块由交易列表和工作证明（即一个特殊的数字）组成 ，

235
00:16:29,143 --> 00:16:32,300
以便整个块的哈希值以一堆零开头。

236
00:16:33,140 --> 00:16:39,153
目前，假设它必 须以 60 个零开始，

237
00:16:39,153 --> 00:16:47,700
但稍后我们将回到您可能想要选择 该数字的更系统的方式。

238
00:16:47,700 --> 00:16:53,073
就像交易仅在由发送者签名时 才被视为有效一样，

239
00:16:53,073 --> 00:16:57,980
区块也只有在具有工作证明时 才被视为有效。

240
00:16:57,980 --> 00:17:01,223
另外，为了确保这些块有一个标准 顺序，

241
00:17:01,223 --> 00:17:05,319
我们将确保块必须在其标头包含前一个块的 哈希值。

242
00:17:05,839 --> 00:17:09,183
这样，如果您要返回并更改任何一个块，

243
00:17:09,183 --> 00:17:13,270
 或者交换两个块的顺序，它将更改其后面的块，

244
00:17:13,270 --> 00:17:18,099
这会 更改该块的哈希值，从而更改其后面的块， 等等。

245
00:17:18,099 --> 00:17:23,587
这需要重做所有工作，为每个块找到一个新的特殊数字，

246
00:17:23,587 --> 00:17:27,099
使 其哈希值以 60 个零开头。

247
00:17:27,099 --> 00:17:31,839
因为区块是这样链接在一 起的，所以通常不称其为账本，

248
00:17:31,839 --> 00:17:33,480
而是称其为区块链。

249
00:17:33,480 --> 00:17:35,228
作为我们更新协议的一部分，我们现在

250
00:17:35,228 --> 00:17:37,080
将允许世界上的任何人成为区块创建者。

251
00:17:37,080 --> 00:17:39,972
这意味着他们将监听正在广播的交易，

252
00:17:39,972 --> 00:17:43,715
将它们收集到某个区 块中，然后做大量工作来找

253
00:17:43,715 --> 00:17:48,480
到一个特殊的数字，使该区块 的哈希值以 60 个零开头。

254
00:17:48,480 --> 00:17:51,760
一旦他们找到它，他们就会广播 出他们找到的区块。

255
00:17:51,760 --> 00:17:55,960
为了奖励区块创建者所做的所有这些工作，当她 组装一个区块时，

256
00:17:55,960 --> 00:17:59,179
我们将允许她在其顶部包含一项非常特殊的交 易，

257
00:17:59,179 --> 00:18:02,540
在该交易中，她会凭空获得 10 美元的账本美元。

258
00:18:03,080 --> 00:18:08,380
这称为 区块奖励，它是我们关于是否接受交易的通常规 

259
00:18:08,380 --> 00:18:09,400
则的例外。

260
00:18:10,040 --> 00:18:12,920
它不是来自任何人，因此不必签名。

261
00:18:13,660 --> 00:18:19,247
这也意味着我们经济中的账本美元总数随着每个新区块的增加而增 

262
00:18:19,247 --> 00:18:19,620
加。

263
00:18:20,900 --> 00:18:25,566
创建区块通常被称为挖矿，因为它需要做 大量的工作，

264
00:18:25,566 --> 00:18:28,180
并且它将新的货币引入经济中。

265
00:18:29,020 --> 00:18:32,527
但是，当您听到或读到有关矿工的信息时，

266
00:18:32,527 --> 00:18:37,880
请记住，他们 真正做的是监听交易、创建区块、广播这些区块，

267
00:18:37,880 --> 00:18:40,280
并因此 获得新的资金奖励。

268
00:18:40,280 --> 00:18:44,944
从矿工的角度来看，每个区块都有点像 一个微型彩票，

269
00:18:44,944 --> 00:18:48,676
每个人都在尽可能快地猜测数字，直到一个 

270
00:18:48,676 --> 00:18:54,274
幸运的人找到一个特殊的数字，使该区块的哈希值以许多零开 头，

271
00:18:54,274 --> 00:18:56,140
并且他们得到了报酬。

272
00:18:57,620 --> 00:19:01,744
对于其他只想使用该系统 进行支付的人来说，

273
00:19:01,744 --> 00:19:05,672
他们不再监听交易，而是开 始监听矿工广播

274
00:19:05,672 --> 00:19:09,600
的区块并更新他们自己的区块链个 人副本。

275
00:19:10,560 --> 00:19:14,295
现在，我们协议的关键补充是，如果您听到两 

276
00:19:14,295 --> 00:19:17,675
个不同的区块链具有相互冲突的交易历史，

277
00:19:17,675 --> 00:19:22,300
那么您会遵循最 长的一个，也就是投入最多工作的那个。

278
00:19:22,860 --> 00:19:27,720
如果有平局，只 需等待，直到听到额外的块，使其中一个更长。

279
00:19:28,720 --> 00:19:34,772
因此，即使没有中央权威，并且每个人都维护自己的 区块链副本，

280
00:19:34,772 --> 00:19:39,613
如果每个人都同意优先考虑投入最多 工作的区块链，

281
00:19:39,613 --> 00:19:42,640
我们就有办法达成去中心化共识。

282
00:19:43,560 --> 00:19:47,147
要了解为什么这会成为一个值得信赖的系统，

283
00:19:47,147 --> 00:19:50,913
并了解在什 么时候您应该相信付款是合法的，

284
00:19:50,913 --> 00:19:54,680
了解如何欺骗使用该系 统的人确实很有帮助。

285
00:19:55,600 --> 00:19:58,979
也许爱丽丝试图用一个欺诈性的区块来愚弄鲍 勃，

286
00:19:58,979 --> 00:20:02,505
即她试图向他发送一个包含她向他支付 100 个 

287
00:20:02,505 --> 00:20:06,325
Ledger 美元的区块，但没有将该区块广播到网络的

288
00:20:06,325 --> 00:20:07,060
其他部分。

289
00:20:07,640 --> 00:20:09,846
这样其他人仍然认为她拥 有那 100 

290
00:20:09,846 --> 00:20:11,240
个 Ledger 美元。

291
00:20:11,960 --> 00:20:15,320
为此，她必须先于所有其他矿工 （每个人都

292
00:20:15,320 --> 00:20:18,680
在自己的区块上工作）找到有效的工作证明。

293
00:20:19,500 --> 00:20:24,305
这肯定 会发生，也许爱丽丝碰巧先于其他人赢得了这张微型 

294
00:20:24,305 --> 00:20:24,820
彩票。

295
00:20:25,680 --> 00:20:29,155
但是鲍勃仍然会听到其他矿工发出的广播，

296
00:20:29,155 --> 00:20:32,265
因此为 了让他相信这个欺诈性区块，

297
00:20:32,265 --> 00:20:37,569
爱丽丝必须自己完成所有工作 ，以继续在鲍勃区块链的这个特殊

298
00:20:37,569 --> 00:20:41,960
分叉上添加区块，这与 他听到的不同来自其他矿工。

299
00:20:42,740 --> 00:20:48,260
请记住，根据协议，鲍勃始终 信任他所知道的最长的链。

300
00:20:49,260 --> 00:20:54,324
如果爱丽丝碰巧比网络上其他 矿工加起来更快地找到区块，

301
00:20:54,324 --> 00:20:57,700
她也许能够将这种情况保 持几个区块。

302
00:20:58,480 --> 00:21:03,121
但除非她拥有所有矿工中接近 50% 的 计算资源，

303
00:21:03,121 --> 00:21:07,949
否则所有其他矿工正在处理的区块链的增长速度 将超过 

304
00:21:07,949 --> 00:21:13,520
Alice 向 Bob 提供的单个欺诈性区块 链的增长速度。

305
00:21:13,520 --> 00:21:17,446
因此，经过足够的时间后，鲍勃将拒绝他从 

306
00:21:17,446 --> 00:21:23,140
爱丽丝那里听到的消息，转而支持其他人正在研究的更长的 链。

307
00:21:23,960 --> 00:21:29,579
请注意，这意味着您不必立即信任您立即听到的新块 ，

308
00:21:29,579 --> 00:21:33,400
而是应该等待在其之上添加几个新块。

309
00:21:33,820 --> 00:21:36,536
如果您还没有听 说过任何更长的区块链，

310
00:21:36,536 --> 00:21:40,540
您可以相信这个区块是其他人都在使用 的同一条链的一部分。

311
00:21:42,120 --> 00:21:45,220
至此，我们已经实现了所有主要想法。

312
00:21:45,780 --> 00:21:50,807
这种基于工作量证明的分布式账本系统或多或少是比特币协议 

313
00:21:50,807 --> 00:21:53,680
以及许多其他加密货币的工作原理。

314
00:21:54,300 --> 00:21:56,160
只有一些细节需要澄清。

315
00:21:56,300 --> 00:21:59,369
之前我说过，工作量证明可能是找到一个特殊的数字，

316
00:21:59,369 --> 00:22:01,800
使得该块 的哈希值以 60 个零开头。

317
00:22:01,800 --> 00:22:07,270
嗯，实际的比特币协议的工作 方式是定期更改零的数量，

318
00:22:07,270 --> 00:22:11,900
这样平均需要 10 分钟才 能找到新的区块。

319
00:22:12,780 --> 00:22:17,870
因此，随着越来越多的矿工加入网络，挑 战变得越来越难，

320
00:22:17,870 --> 00:22:22,960
以至于这种微型彩票每 10 分钟大 约只有一名中奖者。

321
00:22:23,920 --> 00:22:27,880
许多较新的加密货币的出块时间比这 短得多。

322
00:22:28,580 --> 00:22:32,460
比特币中的所有资金最终都来自于一些 区块奖励。

323
00:22:32,920 --> 00:22:34,800
最初，这些奖励是每个区块 50 比特币。

324
00:22:34,800 --> 00:22:38,036
实际上 有一个很棒的网站，名为 Block 

325
00:22:38,036 --> 00:22:41,420
Explorer，可以轻 松浏览比特币区块链。

326
00:22:41,960 --> 00:22:45,765
如果你看一下链上的前几个区块，除了给矿 工的 

327
00:22:45,765 --> 00:22:49,240
50 比特币奖励之外，它们不包含任何交易。

328
00:22:49,860 --> 00:22:54,624
但每 21 0,000 个区块（大约每 4 年），

329
00:22:54,624 --> 00:22:56,340
奖励就会减少一半。

330
00:22:56,860 --> 00:23:00,140
所以现在的 奖励是12。每个区块 5 比特币。

331
00:23:00,720 --> 00:23:04,848
而且由于这种奖励随着时间的推移呈几何 级数减少，

332
00:23:04,848 --> 00:23:09,320
这意味着比特币的存在量永远不会超过 2100 万个。

333
00:23:10,280 --> 00:23:13,280
然而，这并不意味着矿工将停止赚钱。

334
00:23:13,820 --> 00:23:17,940
除了区块奖励之 外，矿工还可以获得交易费。

335
00:23:18,520 --> 00:23:24,237
其工作原理是，每当您进 行付款时，您完全可以选择包含交易费，

336
00:23:24,237 --> 00:23:28,240
该交易费将 支付给包含该付款的区块的矿工。

337
00:23:29,020 --> 00:23:32,371
您这样做的原因是 为了激励矿工将您

338
00:23:32,371 --> 00:23:35,920
广播的交易实际包含到下一个区块 中。

339
00:23:36,440 --> 00:23:41,827
你看，在比特币中，每个区块仅限于约 2400 笔交易，

340
00:23:41,827 --> 00:23:45,020
许多批评者认为这是不必要的限制。

341
00:23:45,860 --> 00:23:51,053
相比之下，V isa 平均每秒处理约 1700 笔交易，

342
00:23:51,053 --> 00:23:55,320
并且每秒能够处理超过 2 4,000 笔交易。

343
00:23:56,020 --> 00:24:01,001
比特币的处理速度相对较慢，导致交易 费用更高，

344
00:24:01,001 --> 00:24:06,200
因为这决定了矿工选择将哪些交易包含在 新区块中。

345
00:24:07,820 --> 00:24:11,500
所有这些还远未全面覆盖加密 货币。

346
00:24:12,160 --> 00:24:16,180
还有许多我什至没有触及的细微差别和替代 设计选择。

347
00:24:16,640 --> 00:24:20,036
但我希望这能为那些希望通过进一步阅读添加更 

348
00:24:20,036 --> 00:24:24,360
多分支的人提供一个稳定的、“等待但为什么”式的理解树干。

349
00:24:25,180 --> 00:24:29,170
正如我一开始所说，这背后的动机之一是大量资金开 

350
00:24:29,170 --> 00:24:30,500
始流向加密货币。

351
00:24:31,340 --> 00:24:34,927
尽管我不想对这是一项好还是坏的 投资做出任何断言，

352
00:24:34,927 --> 00:24:37,797
但我确实认为，对于进入游戏的 人们来说，

353
00:24:37,797 --> 00:24:40,380
至少了解这项技术的基础知识是健康的。

354
00:24:41,340 --> 00:24:43,689
一如既往，我衷心感谢你们让这个频道在 

355
00:24:43,689 --> 00:24:45,420
Patreon 上成为可能。

356
00:24:46,080 --> 00:24:49,050
我知道并不是每个人都有能力做出贡献，

357
00:24:49,050 --> 00:24:52,515
但如果您仍然有兴 趣提供帮助，最好的方法之

358
00:24:52,515 --> 00:24:56,640
一就是分享您认为对其他人可 能有趣或有帮助的视频。

359
00:24:57,280 --> 00:24:59,320
我知道你知道这一点，但这确实有帮助。

