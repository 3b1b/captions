1
00:00:00,000 --> 00:00:09,660
拥有比特币意味着什么？很多人都听说过比特币，它是一种

2
00:00:09,660 --> 00:00:14,120
完全数字化的货币，没有政府发行，没有银行需要管理账

3
00:00:14,120 --> 00:00:19,800
户和验证交易，而且没有人真正知道是谁发明了它。然而许

4
00:00:19,800 --> 00:00:25,320
多人并不知道这个问题的答案，至少不完全知道。为了实现

5
00:00:25,320 --> 00:00:29,940
这一目标，并确保答案背后的技术细节确实让人感到

6
00:00:29,980 --> 00:00:34,660
有动力，我们将逐步介绍您如何发明自己版本的比特

7
00:00:34,660 --> 00:00:38,880
币。我们将从您使用公共分类账记录与朋友的付款开始

8
00:00:38,880 --> 00:00:43,580
，然后当您开始越来越不信任您的朋友和周围的世界时，

9
00:00:43,580 --> 00:00:47,900
如果您足够聪明，可以从以下地方引入一些想法密码学可

10
00:00:47,900 --> 00:00:52,900
以帮助规避信任需求，最终得到的就是所谓的加密货币。

11
00:00:53,620 --> 00:01:00,120
比特币只是加密货币的第一个实施示例，现在还有数千种加密

12
00:01:00,120 --> 00:01:05,100
货币在与传统货币进行交易。走上自己发明的道路有助

13
00:01:05,100 --> 00:01:09,540
于为了解游戏中的一些较新的玩家奠定基础，并认识

14
00:01:09,540 --> 00:01:14,660
到何时以及为何有不同设计选择的空间。事实上，

15
00:01:14,660 --> 00:01:18,560
我选择这个主题的原因之一是，去年这些货币受

16
00:01:18,560 --> 00:01:25,280
到了大量的关注、投资和炒作。我不会评论或推测

17
00:01:25,280 --> 00:01:29,700
当前或未来的汇率，但我认为我们都同意，任何想要购买

18
00:01:29,700 --> 00:01:34,680
加密货币的人都应该真正知道它是什么。我的意思不仅仅是

19
00:01:34,680 --> 00:01:40,280
与黄金开采的模糊联系的类比，我的意思是对我们发送、接

20
00:01:40,280 --> 00:01:46,920
收和创建加密货币时计算机正在做什么的实际直接描述。

21
00:01:46,920 --> 00:01:51,400
值得强调的一件事是，即使你和我要深入研究这里的细节，并

22
00:01:51,400 --> 00:01:56,340
且这需要花费有意义的时间，但如果你只是想使用加密货币，

23
00:01:56,340 --> 00:02:00,580
你实际上不需要知道这些细节，就像你不知道一样当您刷信用

24
00:02:00,580 --> 00:02:05,400
卡时，无需了解幕后发生的详细情况。与任何数字支付一样，

25
00:02:05,400 --> 00:02:09,760
有许多用户友好的应用程序可让您只需发送和接收货币，而无

26
00:02:09,760 --> 00:02:15,220
需考虑发生了什么。不同之处在于，其背后的骨干不是

27
00:02:15,220 --> 00:02:20,700
验证交易的银行。相反，它是一个基于密码学中的一

28
00:02:20,700 --> 00:02:25,980
些数学原理的去中心化、去信任验证的聪明系统。

29
00:02:25,980 --> 00:02:29,380
但首先，我希望你能真正把加密货币之类的想法放在一

30
00:02:29,380 --> 00:02:33,700
边几分钟。我们将从更实际的东西开始这个故事，账

31
00:02:33,700 --> 00:02:39,380
本和数字签名。如果您和您的朋友经常兑换货币，支

32
00:02:39,380 --> 00:02:43,580
付您应得的晚餐费用等，那么一直兑换现金可能会很不

33
00:02:43,580 --> 00:02:46,940
方便。因此，您可能会保留一个公共分类账，记录您打

34
00:02:46,940 --> 00:02:52,820
算在未来某个时刻支付的所有付款。Alice 付给 Bob 20 美元，Bob

35
00:02:52,820 --> 00:02:57,860
付给 Charlie 40 美元，诸如此类。这个分类账将是公开的，每个人都可

36
00:02:57,860 --> 00:03:02,620
以访问，就像一个任何人都可以去添加新行的网站。

37
00:03:02,620 --> 00:03:06,100
假设每个月末你们都聚在一起，查看交易清单

38
00:03:06,100 --> 00:03:10,580
，然后结算。如果你花的钱多于收到的钱，你就把钱放

39
00:03:10,580 --> 00:03:15,480
进锅里，如果你收到的钱多于花的钱，你就把钱拿出来。

40
00:03:15,480 --> 00:03:20,280
因此，作为这个非常简单的系统一部分的协议可能如下所示。任何人

41
00:03:20,280 --> 00:03:24,900
都可以在账本上添加行数，每个月底你们都会聚在一起结算

42
00:03:24,900 --> 00:03:28,300
。现在像这样的公共分类账的一个问题是任何人

43
00:03:28,300 --> 00:03:33,920
都可以添加一行。那么，怎样才能阻止鲍勃在未经爱丽丝批准的情况下写下“

44
00:03:33,920 --> 00:03:39,940
爱丽丝向鲍勃支付 100 美元”呢？我们如何才能相信所

45
00:03:39,940 --> 00:03:45,020
有这些交易都是发送者所希望的？

46
00:03:45,020 --> 00:03:50,660
这就是密码学的第一个部分——数字签名。就像手写签

47
00:03:50,660 --> 00:03:55,800
名一样，这里的想法是，爱丽丝应该能够在该交易旁边添加

48
00:03:55,800 --> 00:04:01,260
一些东西，证明她已经看到并批准了它，并且其他任何人

49
00:04:01,260 --> 00:04:07,380
都无法伪造该签名。乍一看，数字签名似乎根

50
00:04:07,380 --> 00:04:12,620
本不可能。我的意思是，构成该签名的任何数据都可以

51
00:04:12,620 --> 00:04:17,460
由计算机读取和复制。那么如何防止伪造呢？

52
00:04:17,460 --> 00:04:22,180
其工作原理是，每个人都会生成所谓的公钥-私钥对，每个

53
00:04:22,180 --> 00:04:26,420
密钥对看起来都像一些位串。私钥有时也称为秘密密钥，因

54
00:04:26,420 --> 00:04:32,460
此我们可以将其缩写为 SK，而将公钥缩写为 PK。

55
00:04:32,460 --> 00:04:37,140
顾名思义，这个秘密密钥是您想要保守秘密的东西。

56
00:04:37,140 --> 00:04:41,940
在现实世界中，无论您签署什么文档，您的手写签名看起来都是一样

57
00:04:41,940 --> 00:04:46,780
的。但数字签名实际上要强大得多，因为它会根据不同的消息而变

58
00:04:46,780 --> 00:04:53,420
化。它看起来像一些由 1 和 0 组成的字符串，通常类

59
00:04:53,420 --> 00:04:58,700
似于 256 位，即使稍微改变消息也会完全改变该消息上

60
00:04:58,700 --> 00:05:03,220
的签名的外观。更正式地说，生成签名涉及一个既

61
00:05:03,220 --> 00:05:08,200
取决于消息本身又取决于您的私钥的函数。

62
00:05:08,200 --> 00:05:13,540
私钥确保只有您可以生成该签名，并且它取决于消息这

63
00:05:13,540 --> 00:05:18,420
一事实意味着没有人可以复制您的签名之一并将其伪造到

64
00:05:18,420 --> 00:05:23,320
另一条消息上。与此相关的是第二个函数，用于验

65
00:05:23,320 --> 00:05:27,820
证签名是否有效，这就是公钥发挥作用的地方。

66
00:05:27,820 --> 00:05:33,460
它所做的只是输出 true 或 false，以指示

67
00:05:33,460 --> 00:05:37,860
这是否是由与您用于验证的公钥关联的私钥生成的签名。

68
00:05:37,860 --> 00:05:43,260
我不会详细介绍这两个函数到底如何工作，但其想法

69
00:05:43,260 --> 00:05:48,260
是，如果您不知道密钥，则完全不可能找到有效的

70
00:05:48,260 --> 00:05:53,520
签名。具体来说，没有比猜测和检查随机签名更好的

71
00:05:53,520 --> 00:05:59,080
策略了，您可以使用每个人都知道的公钥进行检查。

72
00:05:59,080 --> 00:06:04,500
现在想想长度为256位的签名有多少个。这是 2

73
00:06:04,500 --> 00:06:11,520
的 256 次方！这是一个大得愚蠢的数字。称其为天文巨星，未免

74
00:06:11,520 --> 00:06:16,840
太过于相信天文学了。事实上，我制作了一个

75
00:06:16,840 --> 00:06:20,480
补充视频，专门用来说明这个数字有多大。

76
00:06:20,480 --> 00:06:24,680
但在这里，我们只能说，当您验证给定消息的签名是否

77
00:06:24,680 --> 00:06:29,900
有效时，您可以非常有信心地认为，某人生成签名的唯

78
00:06:29,900 --> 00:06:37,360
一方法是他们知道与您用于验证的公钥关联的密钥。

79
00:06:37,360 --> 00:06:41,880
确保人们在账本上签署交易固然很好，但有一个小漏

80
00:06:41,880 --> 00:06:48,240
洞。如果爱丽丝签署了一笔交易，例如爱丽丝向鲍勃支付 100 美

81
00:06:48,240 --> 00:06:52,760
元，即使鲍勃无法在新消息上伪造爱丽丝的签名，他也可以根据需要多

82
00:06:52,760 --> 00:06:58,040
次复制同一行。该消息签名组合仍然有效。

83
00:06:58,040 --> 00:07:02,780
为了解决这个问题，我们在您签署交易时，消息还必须

84
00:07:02,780 --> 00:07:08,860
包含某种与该交易关联的唯一 ID。这样，如果

85
00:07:08,860 --> 00:07:14,480
Alice 多次向 Bob 支付 100 美

86
00:07:14,480 --> 00:07:18,400
元，则分类账上的每一行都需要一个全新的签名。

87
00:07:18,400 --> 00:07:23,600
数字签名消除了对该初始协议的很大程度的信任。但即便如此

88
00:07:23,600 --> 00:07:27,880
，如果你真的这样做，你就会依赖某种荣誉制度。也就是

89
00:07:27,880 --> 00:07:31,860
说，您相信每个人都会真正遵守并在每个月底以现

90
00:07:31,860 --> 00:07:37,680
金结算。例如，如果查理欠下了数千美元的债务并且拒绝

91
00:07:37,680 --> 00:07:43,520
露面怎么办？恢复现金结算的唯一真正原因是，如果有

92
00:07:43,560 --> 00:07:50,560
人欠了很多钱。因此，也许你有一个聪明的想法，只要

93
00:07:50,720 --> 00:07:55,160
你有办法防止人们支出超出他们的收入，你实际上就不

94
00:07:55,160 --> 00:08:01,160
必用现金结算。也许你首先让每个人向彩池中支付 100

95
00:08:01,160 --> 00:08:06,920
美元，然后让账本的前几行显示爱丽丝获得 100 美元，

96
00:08:06,920 --> 00:08:09,280
鲍勃获得 100 美元，查理获得 100 美元，等等。

97
00:08:09,280 --> 00:08:14,600
现在，只要有人花费的金额超过了账本上的金额，就不要接受

98
00:08:14,600 --> 00:08:21,600
任何交易。例如，如果前两笔交易是查理向爱丽丝支付 50 美元，查理

99
00:08:22,200 --> 00:08:28,880
向鲍勃支付 50 美元，如果他尝试添加查理向您支付 20 美元，则该交

100
00:08:28,880 --> 00:08:35,880
易将无效，就像他从未签名一样无效。请注意，这意味着验证交易需

101
00:08:35,920 --> 00:08:42,200
要了解截至该点的完整交易历史记录。加密货币也

102
00:08:42,200 --> 00:08:47,200
是如此，尽管还有一点优化的空间。

103
00:08:47,200 --> 00:08:53,360
这里有趣的是，这一步消除了账本和实际实物美

104
00:08:53,360 --> 00:08:59,760
元之间的联系。理论上，如果世界上每个人都在使用这个

105
00:08:59,760 --> 00:09:03,960
分类账，那么你可以一辈子只在这个分类账上发送和接收资金，

106
00:09:04,160 --> 00:09:09,160
而无需转换为真正的美元。事实上，为了强调这一点，我们

107
00:09:09,160 --> 00:09:15,680
开始将账本上的数量称为账本美元，简称 LD。您可以

108
00:09:15,680 --> 00:09:21,520
自由地将账本美元兑换成真实的美元。例如，Alice 在现实世界中给

109
00:09:21,520 --> 00:09:26,560
Bob 一张 10 美元的钞票，以换取他添加并签署交易，Bob 向 Ali

110
00:09:26,560 --> 00:09:33,460
ce 支付 10 美元到这个公共分类账。但协议并不能保证这样的

111
00:09:33,460 --> 00:09:38,500
交换。现在，它更类似于您在公开市场上将美元兑换成

112
00:09:38,500 --> 00:09:44,940
欧元或任何其他货币的方式。它只是它自己独立的东西。

113
00:09:44,940 --> 00:09:50,980
这是了解比特币或任何其他加密货币的第一件重要的事情。

114
00:09:50,980 --> 00:09:57,980
它是一个分类账。交易的历史就是货币。当然，对于比特币

115
00:09:58,660 --> 00:10:02,640
，人们使用现金购买时，钱不会进入分类账。几分钟后我将了

116
00:10:02,640 --> 00:10:07,320
解新资金如何进入分类账。但在此之前，我们当前的账本美

117
00:10:07,320 --> 00:10:12,240
元系统和加密货币的运作方式之间实际上存在更显着的差

118
00:10:12,240 --> 00:10:15,120
异。到目前为止，我已经说过这个分类帐位于某个公共场

119
00:10:15,120 --> 00:10:20,020
所，例如任何人都可以添加新行的网站。但这需要信任一

120
00:10:20,020 --> 00:10:25,960
个中心位置，即谁托管该网站，谁控制添加新线路的规

121
00:10:25,960 --> 00:10:31,880
则。为了消除这种信任，我们将让每个人保留自己的账本副本

122
00:10:31,880 --> 00:10:37,640
。然后，当您想要进行交易时，例如 Alice 向 Bob 支付 100 Ledger

123
00:10:37,640 --> 00:10:44,640
Dollars，您可以向全世界广播该交易，以便人们可以听到并记录在自己的私人分类账上。

124
00:10:45,240 --> 00:10:50,720
但除非你做更多的事情，否则这个系统就糟糕得离谱。如何让每个人都同

125
00:10:50,720 --> 00:10:55,900
意什么是正确的账本？当 Bob 收到一笔交易时，比如 Alice

126
00:10:55,900 --> 00:11:00,820
向 Bob 支付 10 Ledger Dollars，他如何确定其他人收到并相

127
00:11:00,820 --> 00:11:05,220
信同一笔交易？他稍后可以去找 Charlie 并使用这 10 个 Ledg

128
00:11:05,220 --> 00:11:10,500
er Dollars 进行交易吗？真的，想象一下您自己正在收听

129
00:11:10,500 --> 00:11:15,860
正在广播的交易。您如何确定其他人都以相同的顺

130
00:11:15,860 --> 00:11:21,660
序记录相同的交易？这确实是问题的核心。这是

131
00:11:21,660 --> 00:11:26,740
一个有趣的谜题。您能否提出一个关于如何接受或拒绝交易以

132
00:11:26,780 --> 00:11:31,940
及按什么顺序接受或拒绝交易的协议，以便您可以确信世界

133
00:11:31,940 --> 00:11:36,980
上遵循相同协议的其他人都拥有与您的个人账本相同的个人

134
00:11:36,980 --> 00:11:43,980
账本？这是原始比特币论文中解决的问题。

135
00:11:44,620 --> 00:11:49,300
从较高的层面来看，比特币提供的解决方案是信任投入

136
00:11:49,300 --> 00:11:54,700
最多计算工作的账本。我将花点时间解释一下这到底意味着什么

137
00:11:54,700 --> 00:12:00,660
。它涉及加密哈希函数。我们将构建的总体想法是

138
00:12:00,660 --> 00:12:06,140
，如果您使用计算工作作为信任的基础，则可以实

139
00:12:06,140 --> 00:12:11,460
现欺诈性交易和冲突账本需要不可行的计算量才能

140
00:12:11,460 --> 00:12:16,340
实现。我再次提醒您，这已经超出了任何

141
00:12:16,340 --> 00:12:20,240
人使用这样的货币所需了解的范围。

142
00:12:20,240 --> 00:12:25,280
但这是一个非常酷的想法，如果你理解它，你就理解了比特币和其

143
00:12:25,280 --> 00:12:30,880
他加密货币的核心。首先，什么是哈希函数？

144
00:12:30,880 --> 00:12:34,600
这些函数之一的输入可以是任何类型的消息或文件，这并

145
00:12:34,600 --> 00:12:39,200
不重要。输出是一串具有某种固定长度的位，例如 256

146
00:12:39,200 --> 00:12:46,240
位。该输出称为消息的哈希值或摘要。其目的是让它

147
00:12:46,240 --> 00:12:52,400
看起来随机。它不是随机的，对于给定的输入它总是给出相同的输出。

148
00:12:52,400 --> 00:12:58,040
但其想法是，如果您稍微更改输入，也许只编辑其中一个字符，则

149
00:12:58,040 --> 00:13:03,040
生成的哈希值会完全改变。事实上，对于我在这里展示的称为 SH

150
00:13:03,040 --> 00:13:10,520
A256 的哈希函数，当您稍微更改输入时，输出的变化方式是完全不可

151
00:13:10,520 --> 00:13:17,480
预测的。你看，这不仅仅是一个哈希函数，它是一个加密哈希函数。

152
00:13:17,480 --> 00:13:22,120
这意味着反向计算是不可行的。如果我向您展示一些

153
00:13:22,120 --> 00:13:28,880
由 1 和 0 组成的字符串，并要求您找到一个输入，以便该输入的 SHA

154
00:13:28,880 --> 00:13:35,280
256 哈希值给出这个精确的位字符串，您将没有比猜测和检查更好的方法了。

155
00:13:35,280 --> 00:13:39,680
再说一遍，如果您想了解进行 2 到 256 次猜测

156
00:13:39,680 --> 00:13:45,160
需要多少计算量，只需观看补充视频即可。事实上，我

157
00:13:45,160 --> 00:13:51,000
写那件事太有趣了。您可能会认为，如果您真正深入了

158
00:13:51,000 --> 00:13:55,760
解该函数的工作原理，就可以对适当的输入进行逆向工程

159
00:13:55,760 --> 00:14:01,440
，而无需猜测和检查。但没有人找到一种方法来做到这一点。

160
00:14:01,440 --> 00:14:06,400
有趣的是，没有冷酷严格的证据表明反向计算是困难

161
00:14:06,400 --> 00:14:12,480
的。然而，现代安全性在很大程度上取决于加密哈希函数以

162
00:14:12,480 --> 00:14:16,920
及它们具有此属性的想法。如果您要查看浏览器现在与 Y

163
00:14:16,920 --> 00:14:21,040
ouTube 或银行建立的安全连接背后的算法是什

164
00:14:21,040 --> 00:14:27,440
么，您可能会看到 SHA256 名称出现在其中。

165
00:14:27,440 --> 00:14:32,080
目前，我们的重点只是这样的函数如何证明

166
00:14:32,080 --> 00:14:38,360
特定的交易列表与大量的计算工作相关。

167
00:14:38,360 --> 00:14:43,180
想象一下，有人向您展示了一个交易列表，他们说，嘿，我发现了一个特

168
00:14:43,180 --> 00:14:48,680
殊的数字，这样当您将该数字放在该交易列表的末尾并将 SHA25

169
00:14:48,680 --> 00:14:54,620
6 应用于整个事物时，该输出的前 30 位都是零。您认为他们

170
00:14:54,620 --> 00:15:00,400
找到这个号码有多难？对于随机消息，散列恰好以 3

171
00:15:00,400 --> 00:15:07,720
0 个连续零开头的概率为 230 分之一，约为十亿分之

172
00:15:07,720 --> 00:15:13,720
一。由于 SHA256 是一种加密哈希函数，因此找到此类特殊

173
00:15:13,720 --> 00:15:18,680
数字的唯一方法就是猜测和检查。因此，这个人几乎肯定必须检

174
00:15:18,680 --> 00:15:23,620
查大约十亿个不同的数字才能找到这个特殊的数字。一旦你知

175
00:15:23,620 --> 00:15:27,800
道了这个数字，验证起来就非常快了，你只需运行哈希值就可以看到

176
00:15:27,800 --> 00:15:31,800
有 30 个零。换句话说，您可以验证他们是否进行

177
00:15:31,800 --> 00:15:37,420
了大量的工作，而无需您自己进行同样的努力。

178
00:15:37,420 --> 00:15:42,740
这称为工作量证明。重要的是，所有这些工作本质上都与交

179
00:15:42,740 --> 00:15:48,240
易列表相关。如果你改变其中一笔交易，即使是轻微的改变，也

180
00:15:48,240 --> 00:15:52,720
会完全改变哈希值。因此，你必须进行另外十亿次猜测才能找到

181
00:15:52,720 --> 00:15:59,680
新的工作证明，一个新的数字，使列表的哈希值以 30 个

182
00:15:59,680 --> 00:16:03,480
零开头。现在回想一下我们的分布式账本情况

183
00:16:03,480 --> 00:16:08,340
。每个人都在那里广播交易，我们希望有一种方式让他们就

184
00:16:08,340 --> 00:16:14,080
正确的账本达成一致。正如我所说，原始比特币论文背后

185
00:16:14,080 --> 00:16:19,440
的核心思想是让每个人都信任投入最多工作的账本。

186
00:16:19,440 --> 00:16:24,060
其工作原理是首先将给定的分类帐组织成块，其中每个

187
00:16:24,060 --> 00:16:29,080
块由交易列表和工作证明（即一个特殊的数字）组成

188
00:16:29,080 --> 00:16:33,960
，以便整个块的哈希值以一堆零开头。目前，假设它必

189
00:16:33,960 --> 00:16:39,340
须以 60 个零开始，但稍后我们将回到您可能想要选择

190
00:16:39,340 --> 00:16:43,920
该数字的更系统的方式。就像交易仅在由发送者签名时

191
00:16:43,920 --> 00:16:48,660
才被视为有效一样，区块也只有在具有工作证明时

192
00:16:48,660 --> 00:16:53,280
才被视为有效。另外，为了确保这些块有一个标准

193
00:16:53,280 --> 00:16:58,380
顺序，我们将确保块必须在其标头包含前一个块的

194
00:16:58,380 --> 00:17:03,620
哈希值。这样，如果您要返回并更改任何一个块，

195
00:17:03,620 --> 00:17:08,380
或者交换两个块的顺序，它将更改其后面的块，这会

196
00:17:08,380 --> 00:17:14,140
更改该块的哈希值，从而更改其后面的块， 等等。

197
00:17:14,140 --> 00:17:18,300
这需要重做所有工作，为每个块找到一个新的特殊数字，使

198
00:17:18,340 --> 00:17:24,080
其哈希值以 60 个零开头。因为区块是这样链接在一

199
00:17:24,080 --> 00:17:30,160
起的，所以通常不称其为账本，而是称其为区块链。

200
00:17:30,160 --> 00:17:35,340
作为我们更新协议的一部分，我们现在将允许世界上的任何人成为区块创建者。

201
00:17:35,340 --> 00:17:39,300
这意味着他们将监听正在广播的交易，将它们收集到某个区

202
00:17:39,300 --> 00:17:43,760
块中，然后做大量工作来找到一个特殊的数字，使该区块

203
00:17:43,760 --> 00:17:48,800
的哈希值以 60 个零开头。一旦他们找到它，他们就会广播

204
00:17:48,800 --> 00:17:53,640
出他们找到的区块。为了奖励区块创建者所做的所有这些工作，当她

205
00:17:53,640 --> 00:17:57,960
组装一个区块时，我们将允许她在其顶部包含一项非常特殊的交

206
00:17:57,960 --> 00:18:03,720
易，在该交易中，她会凭空获得 10 美元的账本美元。这称为

207
00:18:03,720 --> 00:18:08,340
区块奖励，它是我们关于是否接受交易的通常规

208
00:18:08,340 --> 00:18:13,780
则的例外。它不是来自任何人，因此不必签名。

209
00:18:13,780 --> 00:18:18,900
这也意味着我们经济中的账本美元总数随着每个新区块的增加而增

210
00:18:18,900 --> 00:18:25,340
加。创建区块通常被称为挖矿，因为它需要做

211
00:18:25,340 --> 00:18:29,220
大量的工作，并且它将新的货币引入经济中。

212
00:18:29,220 --> 00:18:33,680
但是，当您听到或读到有关矿工的信息时，请记住，他们

213
00:18:33,680 --> 00:18:39,160
真正做的是监听交易、创建区块、广播这些区块，并因此

214
00:18:39,160 --> 00:18:44,220
获得新的资金奖励。从矿工的角度来看，每个区块都有点像

215
00:18:44,220 --> 00:18:48,360
一个微型彩票，每个人都在尽可能快地猜测数字，直到一个

216
00:18:48,360 --> 00:18:54,040
幸运的人找到一个特殊的数字，使该区块的哈希值以许多零开

217
00:18:54,040 --> 00:18:59,720
头，并且他们得到了报酬。对于其他只想使用该系统

218
00:18:59,720 --> 00:19:04,280
进行支付的人来说，他们不再监听交易，而是开

219
00:19:04,280 --> 00:19:09,040
始监听矿工广播的区块并更新他们自己的区块链个

220
00:19:09,040 --> 00:19:13,280
人副本。现在，我们协议的关键补充是，如果您听到两

221
00:19:13,280 --> 00:19:18,680
个不同的区块链具有相互冲突的交易历史，那么您会遵循最

222
00:19:18,680 --> 00:19:24,400
长的一个，也就是投入最多工作的那个。如果有平局，只

223
00:19:24,400 --> 00:19:28,800
需等待，直到听到额外的块，使其中一个更长。

224
00:19:28,800 --> 00:19:32,780
因此，即使没有中央权威，并且每个人都维护自己的

225
00:19:32,780 --> 00:19:37,620
区块链副本，如果每个人都同意优先考虑投入最多

226
00:19:37,620 --> 00:19:43,680
工作的区块链，我们就有办法达成去中心化共识。

227
00:19:43,680 --> 00:19:47,680
要了解为什么这会成为一个值得信赖的系统，并了解在什

228
00:19:47,680 --> 00:19:52,080
么时候您应该相信付款是合法的，了解如何欺骗使用该系

229
00:19:52,080 --> 00:19:58,400
统的人确实很有帮助。也许爱丽丝试图用一个欺诈性的区块来愚弄鲍

230
00:19:58,400 --> 00:20:04,520
勃，即她试图向他发送一个包含她向他支付 100 个 Ledger

231
00:20:04,520 --> 00:20:08,720
美元的区块，但没有将该区块广播到网络的其他部分。这样其他人仍然认为她拥

232
00:20:08,720 --> 00:20:14,280
有那 100 个 Ledger 美元。为此，她必须先于所有其他矿工

233
00:20:14,280 --> 00:20:19,640
（每个人都在自己的区块上工作）找到有效的工作证明。这肯定

234
00:20:19,640 --> 00:20:23,960
会发生，也许爱丽丝碰巧先于其他人赢得了这张微型

235
00:20:23,960 --> 00:20:30,120
彩票。但是鲍勃仍然会听到其他矿工发出的广播，因此为

236
00:20:30,120 --> 00:20:35,400
了让他相信这个欺诈性区块，爱丽丝必须自己完成所有工作

237
00:20:35,400 --> 00:20:40,180
，以继续在鲍勃区块链的这个特殊分叉上添加区块，这与

238
00:20:40,180 --> 00:20:45,520
他听到的不同来自其他矿工。请记住，根据协议，鲍勃始终

239
00:20:45,520 --> 00:20:51,120
信任他所知道的最长的链。如果爱丽丝碰巧比网络上其他

240
00:20:51,120 --> 00:20:56,320
矿工加起来更快地找到区块，她也许能够将这种情况保

241
00:20:56,320 --> 00:21:02,480
持几个区块。但除非她拥有所有矿工中接近 50% 的

242
00:21:02,480 --> 00:21:07,600
计算资源，否则所有其他矿工正在处理的区块链的增长速度

243
00:21:07,600 --> 00:21:12,840
将超过 Alice 向 Bob 提供的单个欺诈性区块

244
00:21:12,840 --> 00:21:17,960
链的增长速度。因此，经过足够的时间后，鲍勃将拒绝他从

245
00:21:17,960 --> 00:21:22,160
爱丽丝那里听到的消息，转而支持其他人正在研究的更长的

246
00:21:22,160 --> 00:21:29,720
链。请注意，这意味着您不必立即信任您立即听到的新块

247
00:21:29,720 --> 00:21:34,800
，而是应该等待在其之上添加几个新块。如果您还没有听

248
00:21:34,800 --> 00:21:39,200
说过任何更长的区块链，您可以相信这个区块是其他人都在使用

249
00:21:39,200 --> 00:21:46,000
的同一条链的一部分。至此，我们已经实现了所有主要想法。

250
00:21:46,040 --> 00:21:50,960
这种基于工作量证明的分布式账本系统或多或少是比特币协议

251
00:21:50,960 --> 00:21:55,800
以及许多其他加密货币的工作原理。只有一些细节需要澄清。

252
00:21:55,800 --> 00:21:59,760
之前我说过，工作量证明可能是找到一个特殊的数字，使得该块

253
00:21:59,760 --> 00:22:04,920
的哈希值以 60 个零开头。嗯，实际的比特币协议的工作

254
00:22:04,920 --> 00:22:10,160
方式是定期更改零的数量，这样平均需要 10 分钟才

255
00:22:10,160 --> 00:22:15,960
能找到新的区块。因此，随着越来越多的矿工加入网络，挑

256
00:22:16,000 --> 00:22:20,880
战变得越来越难，以至于这种微型彩票每 10 分钟大

257
00:22:20,880 --> 00:22:27,280
约只有一名中奖者。许多较新的加密货币的出块时间比这

258
00:22:27,280 --> 00:22:30,800
短得多。比特币中的所有资金最终都来自于一些

259
00:22:30,800 --> 00:22:36,400
区块奖励。最初，这些奖励是每个区块 50 比特币。实际上

260
00:22:36,400 --> 00:22:40,280
有一个很棒的网站，名为 Block Explorer，可以轻

261
00:22:40,280 --> 00:22:45,080
松浏览比特币区块链。如果你看一下链上的前几个区块，除了给矿

262
00:22:45,080 --> 00:22:50,480
工的 50 比特币奖励之外，它们不包含任何交易。但每 21

263
00:22:50,480 --> 00:22:57,720
0,000 个区块（大约每 4 年），奖励就会减少一半。所以现在的

264
00:22:57,720 --> 00:23:03,400
奖励是12。每个区块 5 比特币。而且由于这种奖励随着时间的推移呈几何

265
00:23:03,400 --> 00:23:09,920
级数减少，这意味着比特币的存在量永远不会超过 2100 万个。

266
00:23:09,920 --> 00:23:14,940
然而，这并不意味着矿工将停止赚钱。除了区块奖励之

267
00:23:14,940 --> 00:23:19,760
外，矿工还可以获得交易费。其工作原理是，每当您进

268
00:23:19,760 --> 00:23:25,100
行付款时，您完全可以选择包含交易费，该交易费将

269
00:23:25,100 --> 00:23:30,620
支付给包含该付款的区块的矿工。您这样做的原因是

270
00:23:30,620 --> 00:23:35,780
为了激励矿工将您广播的交易实际包含到下一个区块

271
00:23:35,780 --> 00:23:39,160
中。你看，在比特币中，每个区块仅限于约 2400

272
00:23:39,160 --> 00:23:47,120
笔交易，许多批评者认为这是不必要的限制。相比之下，V

273
00:23:47,120 --> 00:23:53,080
isa 平均每秒处理约 1700 笔交易，并且每秒能够处理超过 2

274
00:23:53,080 --> 00:24:00,020
4,000 笔交易。比特币的处理速度相对较慢，导致交易

275
00:24:00,020 --> 00:24:05,280
费用更高，因为这决定了矿工选择将哪些交易包含在

276
00:24:05,280 --> 00:24:10,760
新区块中。所有这些还远未全面覆盖加密

277
00:24:10,760 --> 00:24:15,180
货币。还有许多我什至没有触及的细微差别和替代

278
00:24:15,180 --> 00:24:19,760
设计选择。但我希望这能为那些希望通过进一步阅读添加更

279
00:24:19,760 --> 00:24:25,320
多分支的人提供一个稳定的、“等待但为什么”式的理解树干。

280
00:24:25,320 --> 00:24:29,200
正如我一开始所说，这背后的动机之一是大量资金开

281
00:24:29,200 --> 00:24:33,080
始流向加密货币。尽管我不想对这是一项好还是坏的

282
00:24:33,080 --> 00:24:37,100
投资做出任何断言，但我确实认为，对于进入游戏的

283
00:24:37,100 --> 00:24:41,640
人们来说，至少了解这项技术的基础知识是健康的。

284
00:24:41,640 --> 00:24:46,160
一如既往，我衷心感谢你们让这个频道在 Patreon 上成为可能。

285
00:24:46,160 --> 00:24:50,440
我知道并不是每个人都有能力做出贡献，但如果您仍然有兴

286
00:24:50,440 --> 00:24:54,480
趣提供帮助，最好的方法之一就是分享您认为对其他人可

287
00:24:54,480 --> 00:24:59,520
能有趣或有帮助的视频。我知道你知道这一点，但这确实有帮助。

