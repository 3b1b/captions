1
00:00:04,220 --> 00:00:06,780
ビットコインを「持つ」とはどういうことか？

2
00:00:07,440 --> 00:00:09,410
多くの人がビットコインのことを、

3
00:00:09,410 --> 00:00:12,570
政府が発行しないデジタル通貨で、

4
00:00:12,690 --> 00:00:16,130
銀行も一切関与しないものだと理解している。

5
00:00:16,350 --> 00:00:19,080
加えて誰も考案者の正体を知らない。

6
00:00:19,440 --> 00:00:23,580
この疑問に対する、完璧な答えを知っている人は多くない。

7
00:00:24,360 --> 00:00:29,780
完璧な答えとその根底にある技術的な要素を実感してもらうために、

8
00:00:29,780 --> 00:00:32,340
着実に順序立てて説明するので、

9
00:00:32,340 --> 00:00:35,600
ビットコインの変種を自分で作れるレベルにまで頑張って理解してほしい。

10
00:00:36,120 --> 00:00:40,050
元帳を使って友達との支払いの様子を記録することから始まり、

11
00:00:40,370 --> 00:00:44,690
次第に友達を含めた周囲すべてを信じなくなり、

12
00:00:44,910 --> 00:00:48,130
暗号論に準じた解決策をシステムに付け加えることで、

13
00:00:48,130 --> 00:00:50,260
性善説に頼る必要性を減らし、

14
00:00:50,260 --> 00:00:53,310
最終的に暗号通貨と呼ばれるものになる。

15
00:00:53,700 --> 00:00:58,040
承知の通り、ビットコインは最初に運用が始まった暗号通貨であり、

16
00:00:58,340 --> 00:01:02,830
現在では政府発行の一般的通貨よりも多くの変種が生まれている。

17
00:01:03,280 --> 00:01:06,410
変種を自分で作成することは、仮想的取引の上で

18
00:01:06,410 --> 00:01:09,440
相手が試みようとする事の認識と、どの部分で

19
00:01:09,440 --> 00:01:13,600
なぜ変種が生まれるのかについて見解を見出すことに繋がる。

20
00:01:14,050 --> 00:01:16,300
なぜこのトピックを選んだのかの理由の一つは、

21
00:01:16,300 --> 00:01:20,060
去年（2016年）ものすごい多くの関心を集め、取引がなされており、

22
00:01:20,060 --> 00:01:23,600
暗号通貨に個人的に興奮したからである。

23
00:01:24,320 --> 00:01:28,060
現在や未来の為替レートについて、計算したり議論するつもりはない。

24
00:01:28,060 --> 00:01:29,350
しかし暗号通貨を購入しようと

25
00:01:29,350 --> 00:01:33,640
考えている人が、その実態を正しく理解するのは当然であろう。

26
00:01:33,920 --> 00:01:38,080
これは別に実際の貴金属採掘と関連があるアナログ的なことではなく、

27
00:01:38,080 --> 00:01:42,510
暗号通貨の転送時に、コンピュータが一体何をしているかの

28
00:01:42,510 --> 00:01:45,660
明瞭で的を射た説明である。

29
00:01:46,800 --> 00:01:48,870
ここで強調しておきたいのは、

30
00:01:48,870 --> 00:01:51,930
この動画で暗号通貨の深い領域まで探る事は、

31
00:01:52,120 --> 00:01:53,830
有意義な時間とはなるが、

32
00:01:54,110 --> 00:01:58,770
ただ暗号通貨を運用したいだけなら、詳細を知る必要はない点である。

33
00:01:59,070 --> 00:02:03,290
クレジットカードを使う際にも、裏で一体何が行われているのか知る必要はないのと同じである。

34
00:02:03,680 --> 00:02:07,190
デジタル的な支払いにおいて、ユーザーフレンドリーなものは多くあり、

35
00:02:07,190 --> 00:02:11,260
取引の最中に何が行われるのかを、全く考えずに通貨を扱える。

36
00:02:11,780 --> 00:02:14,940
両者の違いは、後ろで支えているのが、

37
00:02:14,940 --> 00:02:17,300
銀行か、そうではないかの点である

38
00:02:17,620 --> 00:02:21,360
銀行の代わりに、暗号論上で生み出された数学をベースに、

39
00:02:21,360 --> 00:02:24,840
非中央集権化された認証に信用不要の賢いシステムがある。

40
00:02:25,980 --> 00:02:30,720
実際に暗号通貨の説明に入る前に、数分ほど別の事柄に時間を割く。

41
00:02:31,040 --> 00:02:35,810
これから始めるのは、より現実味がある話、元帳とデジタル署名である。

42
00:02:36,400 --> 00:02:38,980
もし夕食の勘定などにおいて、

43
00:02:38,980 --> 00:02:41,660
友達と頻繁に金銭を交換する場合、

44
00:02:41,660 --> 00:02:44,250
貨幣をその都度交換するのは不便である。

45
00:02:44,700 --> 00:02:46,300
すると元帳という方式が生まれる。

46
00:02:46,300 --> 00:02:50,190
これによって、その後行われる支払いのすべてを記録する。

47
00:02:50,500 --> 00:02:52,470
例えば、アリスはボブに20ドル支払う、

48
00:02:52,470 --> 00:02:54,940
ボブはチャーリーに40ドル支払う、のように。

49
00:02:55,580 --> 00:02:58,920
この元帳は公開されており、ウェブページのように誰でも参照できる。

50
00:02:58,920 --> 00:03:01,980
更に誰でも新たな取引記録を追加できる。

51
00:03:02,530 --> 00:03:04,320
月末になると皆が集まり、

52
00:03:04,320 --> 00:03:07,930
リストを見て実際に支払いを行う。

53
00:03:08,290 --> 00:03:11,450
もし受け取った額よりも多くの額を支払ったのなら、ポットに金を置く。

54
00:03:11,450 --> 00:03:14,560
もし支払いよりも多くの受取額があるなら、ポットからその分を取る。

55
00:03:15,390 --> 00:03:19,530
この単純明快なプロトコルの叙述は次のようになる。

56
00:03:19,950 --> 00:03:22,000
誰でも取引記録を元帳に追加できる。

57
00:03:22,000 --> 00:03:25,340
月末に最終的な差し引きを現金で交換する。

58
00:03:26,240 --> 00:03:31,010
このような元帳に関わる一つの問題として、誰もが取引記録を追加できることから、

59
00:03:31,010 --> 00:03:37,240
アリスの了承を得ないまま、「アリスはボブに100ドル支払う」という記録を追加できることである。

60
00:03:37,750 --> 00:03:41,260
元帳にある全ての記録が、送金者の意図があって

61
00:03:41,260 --> 00:03:43,400
行われたものだと信頼するのは難しい。

62
00:03:44,810 --> 00:03:48,850
ここで最初の暗号論的要素が入る、デジタル署名である。

63
00:03:49,460 --> 00:03:50,960
手で書く署名と同じく、

64
00:03:50,960 --> 00:03:55,830
アリスは取引記録の横に何か付随するものを加える。

65
00:03:55,830 --> 00:03:58,720
これによりアリスの意図を持って行われたことを証明する。

66
00:03:59,220 --> 00:04:03,490
当然、誰もその署名を真似出来ないようにしなければらない。

67
00:04:04,360 --> 00:04:08,790
するとデジタル署名というのは実現不可能のように思える。

68
00:04:09,130 --> 00:04:14,160
どんなに署名が複雑でも、コンピュータがコピーしてしまえばおしまいである。

69
00:04:14,390 --> 00:04:16,580
どうすればこれを防げるか。

70
00:04:17,300 --> 00:04:22,200
そのためには「公開鍵秘密鍵ペア」を全員が作成することで解決する。

71
00:04:22,200 --> 00:04:24,410
各々の鍵はビットの塊のようなものである。

72
00:04:24,810 --> 00:04:27,280
「秘密鍵」は「私有鍵」とも呼ばれる。

73
00:04:27,280 --> 00:04:31,670
秘密鍵（Secret Key）は「sk」と略し、公開鍵（Public Key）は「pk」と略す。

74
00:04:32,400 --> 00:04:36,480
名前が指し示す通り、秘密鍵は本人しか知り得ないものである。

75
00:04:37,080 --> 00:04:41,950
現実世界において、手書きの署名は時と場所にかかわらず、ほぼ同じ形になるが、

76
00:04:42,480 --> 00:04:45,080
デジタル署名はより強力で、

77
00:04:45,080 --> 00:04:47,320
記録ごとに違うものになる。

78
00:04:47,880 --> 00:04:52,900
署名は0と1の連続であり、大体256ビットである。

79
00:04:53,310 --> 00:04:55,840
署名する記録が少しでも異なれば、

80
00:04:55,840 --> 00:04:59,760
その署名は全く異なるものになる。

81
00:05:00,910 --> 00:05:02,720
より正確に言えば、

82
00:05:02,720 --> 00:05:08,720
署名の生成には記録と秘密鍵を引数とする関数を用い、

83
00:05:09,260 --> 00:05:12,590
この秘密鍵が署名の発行が本人のものであると保証する。

84
00:05:12,900 --> 00:05:15,180
また、署名が記録に依存することは、

85
00:05:15,180 --> 00:05:19,870
他の記録にある署名を単純にコピーすることはできないことを意味する。

86
00:05:21,120 --> 00:05:25,850
二つ目の関数は、これと対になるもので、署名の認証を行う。

87
00:05:26,280 --> 00:05:28,420
ここで公開鍵が威力を発揮する。

88
00:05:29,170 --> 00:05:31,470
戻り値は「真」か「偽」で、

89
00:05:31,470 --> 00:05:34,740
署名が認証に使用した公開鍵に対応する

90
00:05:34,740 --> 00:05:38,080
秘密鍵で生成されたかどうかを示す。

91
00:05:38,610 --> 00:05:42,240
この二つの関数がどのように動作するかの詳細は説明しないが、

92
00:05:42,240 --> 00:05:47,590
秘密鍵がなければ正当な署名を生成するのが事実上不可能というアイデアは、

93
00:05:47,590 --> 00:05:49,390
理解していただけると思う。

94
00:05:50,040 --> 00:05:54,970
つまり署名を偽造するのに、適当に署名を作り出し、すでに知っている公開鍵を使って、

95
00:05:54,970 --> 00:05:58,080
正当性をチェックする以外の方法はない。

96
00:05:59,020 --> 00:06:03,370
さて256ビット長の署名が取りうる値の大きさはどれ位か。

97
00:06:03,790 --> 00:06:06,810
それは2の256乗である。

98
00:06:07,350 --> 00:06:09,880
これはとてつもなく大きな数で、

99
00:06:09,880 --> 00:06:13,900
天文学的数字と呼んでもまだ真の大きさを表していない程である。

100
00:06:14,290 --> 00:06:19,880
これに関して、その大きさを表現する補足動画を作成したので、そちらを参照してほしい。

101
00:06:20,360 --> 00:06:22,560
ここでは、受け取った記録と

102
00:06:22,560 --> 00:06:25,480
その署名が正当であると保証されたとき、

103
00:06:25,830 --> 00:06:30,420
その生成に対応する秘密鍵が使われたことを、全く疑いなく

104
00:06:30,420 --> 00:06:35,360
信用することが出来るとだけに留めておく。

105
00:06:37,040 --> 00:06:40,960
皆がこのルールに従って元帳に記録する時、

106
00:06:40,960 --> 00:06:42,410
一つ問題点がある。

107
00:06:42,850 --> 00:06:46,880
アリスが「アリスはボブに100ドル支払う」という記録を付けたとき、

108
00:06:46,880 --> 00:06:50,740
新たな記録にボブは署名を加える事はできないが、

109
00:06:50,740 --> 00:06:53,890
その記録自体を何回もコピーすることはできる。

110
00:06:54,190 --> 00:06:57,400
記録と署名はすでに認証されている。

111
00:06:57,970 --> 00:07:01,970
これを防ぐため、記録を付ける度に、

112
00:07:01,970 --> 00:07:07,310
各々特別な符号を作り、その符号を記録に含めることにする。

113
00:07:07,880 --> 00:07:11,710
これにより、もし実際にアリスがボブに複数回100ドル支払ったとき、

114
00:07:11,710 --> 00:07:15,740
各々の記録につく署名は完全に異なるものになる。

115
00:07:16,960 --> 00:07:17,880
素晴らしい。

116
00:07:18,160 --> 00:07:22,380
デジタル署名は、元々のプロトコルにある性善説の考え方を取り除く。

117
00:07:22,380 --> 00:07:24,910
しかし、実際にこの方式を運用すると、

118
00:07:24,910 --> 00:07:27,460
まだ人々の信頼に頼っていることに気づく。

119
00:07:27,720 --> 00:07:30,460
つまり皆が元帳に記録に従って、

120
00:07:30,470 --> 00:07:33,010
月末に現金の交換をすることを信じている。

121
00:07:33,620 --> 00:07:37,590
例えばチャーリーが多額の借金を溜め込んだとして、

122
00:07:37,590 --> 00:07:39,410
そのまま逃げたらどうだろう。

123
00:07:40,240 --> 00:07:43,270
月末の現金のやり取りが破綻する決定的な理由は、

124
00:07:43,270 --> 00:07:47,300
（チャーリーのような）ある人が負債を負った場合である。

125
00:07:48,010 --> 00:07:52,440
保有する金銭よりも多くの額を使わせないように、

126
00:07:52,440 --> 00:07:56,740
そして現金のやり取りをする必要性をなくすために、

127
00:07:57,390 --> 00:08:01,280
皆が始めからポットに100ドルを入れるとする。

128
00:08:01,580 --> 00:08:04,080
元帳にその事をまず記録する。

129
00:08:04,080 --> 00:08:08,460
「アリスは100ドルを得る」、「ボブは100ドルを得る」、「チャーリーは100ドルを得る」のように。

130
00:08:09,170 --> 00:08:12,560
ここで各々が元帳において保持している額を超えるような

131
00:08:12,560 --> 00:08:16,210
金額を指定する取引は受け入れないこととする。

132
00:08:16,850 --> 00:08:20,030
例えば、最初の二つの取引が、

133
00:08:20,030 --> 00:08:24,240
「チャーリーはアリスに50ドル支払う」、「チャーリーはボブに50ドル支払う」の時、

134
00:08:24,480 --> 00:08:29,690
更に「チャーリーはあなたに20ドル支払う」と付け足すことはできない。

135
00:08:29,690 --> 00:08:32,100
署名がないのと同様の扱いである。

136
00:08:33,010 --> 00:08:35,940
結果的に取引の認証には、

137
00:08:35,940 --> 00:08:39,600
関連する以前の取引すべての情報が必要となる。

138
00:08:40,140 --> 00:08:43,970
この事は暗号通貨においても、若干適応される。

139
00:08:43,970 --> 00:08:46,260
最適化の余地はまだあるが。

140
00:08:48,750 --> 00:08:50,120
興味深いのは、

141
00:08:50,120 --> 00:08:55,900
これによって元帳と物理的な米ドルとの関係が消えたことである。

142
00:08:56,310 --> 00:08:59,680
理論的には、世界の全員がこの元帳に従えば、

143
00:08:59,680 --> 00:09:03,640
実際の米ドルに両替することなく、

144
00:09:03,640 --> 00:09:06,960
元帳の上での取引だけで人生を過ごすことができる。

145
00:09:07,420 --> 00:09:10,040
この事実をより明確に強調するため、

146
00:09:10,040 --> 00:09:14,320
元帳での額の量を元帳ドル（LD）としよう。

147
00:09:14,790 --> 00:09:18,900
もちろん元帳ドルと米ドルの両替は自由である。

148
00:09:19,070 --> 00:09:22,750
例えば、アリスがボブに10ドルを現実世界で渡し、

149
00:09:22,750 --> 00:09:26,000
その対価として、「ボブはアリスに10元帳ドル支払う」を、

150
00:09:26,000 --> 00:09:29,830
ボブは元帳に署名付きで追加する。

151
00:09:30,820 --> 00:09:34,490
しかしこの様な両替はプロトコルによって保証されていない。

152
00:09:34,840 --> 00:09:38,510
米ドルをユーロに替えたりするのと同じく、

153
00:09:38,510 --> 00:09:40,830
アナログ的である。

154
00:09:41,160 --> 00:09:44,080
これは別の領域の問題である。

155
00:09:44,690 --> 00:09:50,380
ビットコインや、その他暗号通貨に関して最初に理解する必要がある事は、

156
00:09:50,850 --> 00:09:56,320
その実態は元帳であり、取引の歴史自体が通貨である事である。

157
00:09:57,110 --> 00:09:58,440
ビットコインの仕組みの中では、

158
00:09:58,440 --> 00:10:01,970
当然の事ながら、現実の貨幣が元帳と一切関わっておらず、

159
00:10:01,970 --> 00:10:05,040
暗号通貨のみで完結している。

160
00:10:05,530 --> 00:10:08,710
その説明に入る前に、元帳ドルと暗号通貨の間には

161
00:10:08,710 --> 00:10:12,590
大きな違いがあることを示しておく。

162
00:10:13,000 --> 00:10:16,080
先程、この元帳はウェブページのように公開されており、

163
00:10:16,080 --> 00:10:18,720
誰でも記録を追加できると説明した。

164
00:10:19,220 --> 00:10:22,080
しかしこれでは信頼できる中心機関が必要となる。

165
00:10:22,080 --> 00:10:24,240
問題は「誰が保管するのか？」

166
00:10:24,240 --> 00:10:27,060
「誰が記録のルールを管理するのか？」である。

167
00:10:27,550 --> 00:10:32,260
信頼の必要性を消すため、皆が元帳のコピーを持つこととする。

168
00:10:32,760 --> 00:10:37,100
これでアリスがボブに100元帳ドル支払うなどの取引を追加したら、

169
00:10:37,400 --> 00:10:39,960
そのことを世界全体に伝えて、

170
00:10:39,960 --> 00:10:43,740
人々が各々の持つ元帳を更新できるようにする。

171
00:10:44,850 --> 00:10:49,460
しかしこれでは、システム全体が簡単に崩壊する。

172
00:10:49,800 --> 00:10:53,040
今現在正しい元帳がどれかを確かめるすべがない。

173
00:10:53,400 --> 00:10:57,620
ボブが、アリスがボブに10元帳ドル支払うなどの取引記録を受け取ったとき、

174
00:10:57,620 --> 00:11:01,960
ボブ以外の全員が同じ記録を受け取ったかどうか確かめられない。

175
00:11:02,290 --> 00:11:07,550
これではその10元帳ドルを使ってチャーリーと取引することも難しい。

176
00:11:08,300 --> 00:11:12,480
ただ取引記録を聞くだけの立場にいると想像してほしい。

177
00:11:12,950 --> 00:11:18,460
自分以外の全員が全く同じ順序で全く同じ取引を記録しているか確信できない。

178
00:11:19,460 --> 00:11:21,540
これは深刻な問題で、

179
00:11:21,540 --> 00:11:23,000
解決しがいがある。

180
00:11:23,450 --> 00:11:27,910
取引の認証と拒否をしながらも、同じプロトコルの使用者全員が、

181
00:11:27,910 --> 00:11:31,160
常に同様の元帳のコピーを持っていることを、

182
00:11:31,160 --> 00:11:34,860
保証してくれるようなプロトコルの設計を、

183
00:11:34,860 --> 00:11:38,000
どの様にすれば出来るだろうか。

184
00:11:38,510 --> 00:11:41,800
これは最初のビットコインの提案書で肝心となっていた点である。

185
00:11:44,530 --> 00:11:47,640
ビットコインが提供する精錬された解決方法は、

186
00:11:47,640 --> 00:11:52,040
最も計算量の多いワークが含まれている元帳を信用するというものである。

187
00:11:52,600 --> 00:11:55,240
これが何を意味するかの説明には少し時間がいる。

188
00:11:55,240 --> 00:11:58,290
まず「暗号論的ハッシュ関数」の知識が必要になる。

189
00:11:58,510 --> 00:12:00,540
このアイデアの目的は、

190
00:12:00,540 --> 00:12:04,910
信頼性の確認するため、計算量の多いワークを使うことで、

191
00:12:05,310 --> 00:12:08,810
不正な取引や元帳の競合を起こさせるのを、

192
00:12:08,810 --> 00:12:12,400
極めて困難にすることである。

193
00:12:12,990 --> 00:12:15,930
しつこいようだが、ただ暗号通貨を使う分には、

194
00:12:15,930 --> 00:12:19,750
全く理解する必要のない仕組みである。

195
00:12:20,130 --> 00:12:21,600
ただこのアイデアは面白い。

196
00:12:21,600 --> 00:12:26,950
理解できれば、ビットコインやその他すべての暗号通貨の根幹を理解できたことになる。

197
00:12:27,990 --> 00:12:30,230
まず始めに、ハッシュ関数とは何か。

198
00:12:30,750 --> 00:12:34,300
関数の入力は如何なる値も取る事ができる。

199
00:12:34,300 --> 00:12:35,540
そこに問題はない。

200
00:12:35,730 --> 00:12:40,820
出力は256ビットのような一定の長さを持つビット列である。

201
00:12:41,420 --> 00:12:45,040
この出力結果を「ハッシュ」または記録の「要約値」と呼ぶ。

202
00:12:45,380 --> 00:12:47,980
出力はランダムに見える。

203
00:12:48,220 --> 00:12:51,850
実際にはランダムではなく、同じ入力に対して常に同じ出力を返す。

204
00:12:52,290 --> 00:12:53,120
重要なのは、

205
00:12:53,120 --> 00:12:57,640
入力をほんの少しだけでも変えたときには、

206
00:12:57,950 --> 00:13:00,420
出力が全く別物になることである。

207
00:13:01,030 --> 00:13:05,680
いま紹介しているのはSHA256というハッシュ関数である。

208
00:13:05,980 --> 00:13:12,010
入力の違いによる出力の相違点は完全に予測不能である。

209
00:13:12,490 --> 00:13:15,080
これはハッシュ関数の特徴ではなく、

210
00:13:15,080 --> 00:13:17,360
暗号論的ハッシュ関数の特徴である。

211
00:13:17,360 --> 00:13:20,830
つまり、逆の計算をコンピュータがするのが不可能という意味である。

212
00:13:21,320 --> 00:13:23,620
もし適当なゼロとイチの列を見せられて、

213
00:13:23,620 --> 00:13:25,860
SHA256で計算すると、

214
00:13:25,860 --> 00:13:31,320
出力がその列と完全に一致するような、入力を特定しろと言われたとき、

215
00:13:31,640 --> 00:13:34,910
ただ予想して確認するのを繰り返す以外の解き方はない。

216
00:13:35,770 --> 00:13:42,260
先に述べた通り、2の256乗分の1の確率というのが一体どれくらい想像を絶する物なのかは、

217
00:13:42,260 --> 00:13:44,060
補足動画で確認してほしい。

218
00:13:44,320 --> 00:13:46,880
とても楽しい動画に仕上がっている。

219
00:13:48,960 --> 00:13:54,040
更に深い領域に進んで、この関数の中身を正確無比に完全理解すれば、

220
00:13:54,040 --> 00:13:57,680
予想と確認を繰り返さずに、出力を得る方法が見つかるかもしれない。

221
00:13:58,270 --> 00:14:00,870
しかし誰も達成できていない。

222
00:14:01,550 --> 00:14:07,270
面白いのは、逆の計算が非常に難しいという事を厳密には証明できていないという点である。

223
00:14:07,600 --> 00:14:10,300
しかし現代のセキュリティは、

224
00:14:10,300 --> 00:14:14,500
暗号論的ハッシュ関数の特性に深く依存している。

225
00:14:15,040 --> 00:14:18,140
銀行のサイトにアクセスしているときや、

226
00:14:18,140 --> 00:14:20,580
今YouTubeとブラウザの間で行われているセキュア通信の

227
00:14:20,580 --> 00:14:22,210
中身を探れば、

228
00:14:22,580 --> 00:14:25,990
SHA256という名前が見受けられると思う。

229
00:14:27,390 --> 00:14:29,360
これからフォーカスを当てていく部分は、

230
00:14:29,360 --> 00:14:33,810
このような関数がどのようにして、特定の取引の記録列が、

231
00:14:33,810 --> 00:14:37,070
莫大な計算量の結果としれ生まれたものだと保証するかである。

232
00:14:38,030 --> 00:14:41,240
想像してほしい。誰かが記録列を見せて来て、次のように言う。

233
00:14:41,240 --> 00:14:43,220
「すごい数値を見つけたぞ。

234
00:14:43,220 --> 00:14:47,010
この数値を記録列の最後において、

235
00:14:47,010 --> 00:14:50,090
SHA256を全体に適用すると、

236
00:14:50,090 --> 00:14:53,570
出力の最初の30桁が全てゼロになる。」

237
00:14:54,080 --> 00:14:57,110
その数値を探り出すのにどれくらいの労力が必要だろうか。

238
00:14:58,060 --> 00:14:59,520
記録はランダムだから、

239
00:14:59,520 --> 00:15:05,830
30のゼロの列が始めに来る確率は、2の30乗分の1であり、

240
00:15:05,830 --> 00:15:07,650
10億分の1に近似できる。

241
00:15:08,150 --> 00:15:12,110
SHA256は暗号論的ハッシュ関数なので、

242
00:15:12,110 --> 00:15:16,170
この様なすごい数値を求めるには、予想と確認を繰り返すしかない。

243
00:15:16,640 --> 00:15:20,880
よってこの人はこの数値を発見するのに10億に近い数値を相手に、

244
00:15:20,880 --> 00:15:22,670
努力したと言える。

245
00:15:23,360 --> 00:15:24,830
だが一度その数値を知ってしまえば、

246
00:15:24,830 --> 00:15:29,110
確認するのは非常に簡単である。ハッシュ関数を使って、30のゼロがあることを見れば良い。

247
00:15:29,800 --> 00:15:33,900
言い換えれば、大変多くのワークを行ったことを確かめる時、

248
00:15:33,900 --> 00:15:36,720
同じ努力をせずに検証できる。

249
00:15:37,330 --> 00:15:39,040
これを「プルーフ・オブ・ワーク」と呼ぶ。。

250
00:15:39,430 --> 00:15:44,610
覚えておきたいのは、このワークは記録列に強烈に依存しており、

251
00:15:44,930 --> 00:15:48,080
記録列のごく一部でも変えてしまえば、

252
00:15:48,080 --> 00:15:49,890
ハッシュも完全に変わってしまう。

253
00:15:50,150 --> 00:15:54,200
こうなってしまえば、新たなプルーフ・オブ・ワークを見つけるために、

254
00:15:54,200 --> 00:15:56,420
再び億単位の作業を行って、

255
00:15:56,420 --> 00:16:00,880
ハッシュの始めが30のゼロになるようにしなければならない。

256
00:16:01,530 --> 00:16:04,400
分散型元帳の話に戻ろう。

257
00:16:04,690 --> 00:16:07,240
皆が取引記録を配信する際、

258
00:16:07,240 --> 00:16:11,080
今現在正しい元帳とは何かを定める手段がいる。

259
00:16:11,490 --> 00:16:14,920
先に述べたとおり、最初のビットコインの提案書に書かれた解決策は、

260
00:16:14,920 --> 00:16:18,700
最も計算量の多いワークを持つ元帳を信頼するということである。

261
00:16:19,370 --> 00:16:23,200
この仕組を成り立たせるため、元帳をブロック列と見立て、

262
00:16:23,200 --> 00:16:27,410
各ブロックには一連の取引記録と、その末尾にプルーフ・オブ・ワークを入れる。

263
00:16:27,840 --> 00:16:32,600
プルーフ・オブ・ワークの定義から、全てのブロックのハッシュは長いゼロの列で始まる。

264
00:16:33,190 --> 00:16:37,280
暫くの間、必要な連続するゼロの数は６０としよう。

265
00:16:37,280 --> 00:16:41,040
後に適切なゼロの数を選ぶための、より系統的な方法について説明する。

266
00:16:41,840 --> 00:16:46,800
個別の取引記録は、送信者による署名によって妥当性が確認され、

267
00:16:46,800 --> 00:16:50,220
ブロックは、プルーフ・オブ・ワークによって妥当性が確認される。

268
00:16:51,040 --> 00:16:54,700
このブロック列の正当な順番を定めるために、

269
00:16:54,700 --> 00:16:59,760
各ブロックの先頭に前のブロックのハッシュを入れる事とする。

270
00:17:00,150 --> 00:17:03,550
これでもしブロックの何処か一部の内容を変えたり、

271
00:17:03,550 --> 00:17:05,550
順番を変えようとすれば、

272
00:17:05,890 --> 00:17:08,230
そのブロックのハッシュが変わり、

273
00:17:08,230 --> 00:17:10,010
後ろのハッシュと合わなくなり、

274
00:17:10,010 --> 00:17:13,070
そのブロックのハッシュも変わり、これが最後まで続く。

275
00:17:14,040 --> 00:17:16,370
つまり全てのワークをやり直すことになる。

276
00:17:16,370 --> 00:17:21,660
各々のブロックにおいてハッシュが60のゼロの列で始まるような値を再び探す。

277
00:17:22,410 --> 00:17:25,040
このようなブロック列はチェーン（鎖）の様に見える事から、

278
00:17:25,040 --> 00:17:28,800
元帳と呼ぶ代わりに「ブロックチェーン」と呼ぶことにする。

279
00:17:30,050 --> 00:17:31,920
強化されたプロトコルの実現のため、

280
00:17:31,920 --> 00:17:34,780
ブロックの作成者という、誰にでも出来る立場を用意する。

281
00:17:35,230 --> 00:17:38,950
作成者は送られてくる取引記録を集めて、

282
00:17:38,950 --> 00:17:40,620
ブロックに収納する。

283
00:17:40,620 --> 00:17:42,110
そしてワークを行う。

284
00:17:42,110 --> 00:17:46,400
ハッシュの始めが60のゼロの列で始まるような値が見つかれば、

285
00:17:46,900 --> 00:17:50,210
そのブロックを配信する。

286
00:17:50,970 --> 00:17:53,490
作成者にはワークの報酬として、

287
00:17:53,490 --> 00:17:55,270
ブロックの作成時、

288
00:17:55,270 --> 00:17:59,070
記録の先頭に自身を主語に特別な記録をつけることを許可する。

289
00:17:59,070 --> 00:18:02,780
例えば10元帳ドル得るなど。

290
00:18:03,470 --> 00:18:05,230
これを「ブロック報酬」と呼ぶ。

291
00:18:05,230 --> 00:18:09,800
これについては、議論していた一般的な取引記録と異なる例外であり、

292
00:18:10,010 --> 00:18:13,190
取引元がないので、署名の必要がない。

293
00:18:13,600 --> 00:18:19,720
また、これは新たなブロックが作成される毎に、体系全体の元帳ドルの数が増加する事を意味する。

294
00:18:20,880 --> 00:18:23,200
ブロックの作成は、沢山のワークが必要で、

295
00:18:23,200 --> 00:18:25,220
新たな利益をもたらす事から、

296
00:18:25,220 --> 00:18:28,460
「採掘」とも呼ばれる。

297
00:18:29,070 --> 00:18:31,470
採掘者に関して承知しておきたいのは、

298
00:18:31,470 --> 00:18:33,730
採掘者が実際にしている事は、

299
00:18:33,730 --> 00:18:36,630
取引記録を集め、ブロックを作り、

300
00:18:36,630 --> 00:18:40,900
そのブロックを配信して、その過程で報酬を得ているという事である。

301
00:18:41,940 --> 00:18:46,230
採掘者の視点からすれば、ブロックは小型宝くじのような物であり、

302
00:18:46,230 --> 00:18:49,140
皆が要件を満たすの数を探すのを競い、

303
00:18:49,140 --> 00:18:52,460
誰かが運良く一連のゼロの列を作り出すような、

304
00:18:52,460 --> 00:18:55,310
特殊な数を見つければ、その採掘者には

305
00:18:55,310 --> 00:18:56,370
報酬が得られる。

306
00:18:58,040 --> 00:19:01,200
ただ支払いの手段として活用しようとしている人からすれば、

307
00:19:01,200 --> 00:19:03,430
取引記録を集める代わりに、

308
00:19:03,430 --> 00:19:07,080
採掘者から送られたブロックを集めれば事足りる。

309
00:19:07,080 --> 00:19:10,010
あとは個人でブロックチェーンを更新すれば良い

310
00:19:10,510 --> 00:19:13,320
更に重要なプロトコルの更新点として、

311
00:19:13,320 --> 00:19:17,930
もし競合する取引履歴を持つ二つの異なるブロックチェーンがあった時、

312
00:19:18,310 --> 00:19:22,350
より長い、より計算量の多いワークを持つ方に従うという点である。

313
00:19:22,900 --> 00:19:27,930
長さが同じならば、片方がより長くなる様な追加ブロックを待てば良い。

314
00:19:28,720 --> 00:19:33,910
このシステムには中心機関がなく、皆が個人でブロックチェーンのコピーを持っている。

315
00:19:34,180 --> 00:19:39,260
そして皆が、最も計算量の多いワークを持つブロックチェーンに従うことを認めれば、

316
00:19:39,660 --> 00:19:42,980
総意に基づく非中央集権的な体系が完成する。

317
00:19:43,640 --> 00:19:45,840
このシステム体系が信頼に値するものである事と、

318
00:19:45,840 --> 00:19:49,450
支払いが正当と見なせるのはどのタイミングなのかを理解するために、

319
00:19:49,450 --> 00:19:55,070
逆にこのシステムを使って悪事を働くことが出来るか試してみよう。

320
00:19:55,650 --> 00:19:58,690
アリスがボブに嘘のブロックを送りつけるとする。

321
00:19:59,030 --> 00:20:04,080
そのブロックには、アリスはボブに100元帳ドル支払うと付け加える。

322
00:20:04,420 --> 00:20:07,260
ここでネットワーク全体に配信しない限り、

323
00:20:07,620 --> 00:20:11,440
他の人から見れば、アリスはまだ100元帳ドルを持っていると考える。

324
00:20:12,150 --> 00:20:17,250
この作業を遂行するためには、他の採掘者よりも早くプルーフ・オブ・ワークを

325
00:20:17,250 --> 00:20:18,860
見つけ出さなければならない。

326
00:20:19,410 --> 00:20:20,990
有り得ない事ではない。

327
00:20:20,990 --> 00:20:24,980
アリスは運良く小型宝くじに最速で当選したのである。

328
00:20:25,680 --> 00:20:29,770
しかしボブはその後も他の採掘者からの配信を注視し続ける。

329
00:20:30,080 --> 00:20:32,640
ボブにこの嘘のブロックを本物と思わせるために、

330
00:20:32,640 --> 00:20:35,440
アリスはその後のワーク全てを一人で行い、

331
00:20:35,440 --> 00:20:39,440
ボブの持つブロックチェーンの内、偽の方のブロック列を続けさせる必要がある。

332
00:20:39,440 --> 00:20:42,330
このブロック列は、他の採掘者から送られるブロック列とは全く異なる。

333
00:20:42,720 --> 00:20:48,400
思い出してほしい、プロトコルの仕組みから、ボブは最も長いチェーンを信用する。

334
00:20:49,230 --> 00:20:51,960
アリスは数ブロック位なら追いつけるかもしれない。

335
00:20:51,960 --> 00:20:55,140
ネットワーク上の全ての採掘者よりも、

336
00:20:55,140 --> 00:20:58,050
たまたま早くブロックを作れればの話だが。

337
00:20:58,560 --> 00:21:03,710
それでも、全採掘者の計算能力の半分以上をアリスが持っていない限り、

338
00:21:04,080 --> 00:21:06,570
その可能性は減少する。

339
00:21:06,570 --> 00:21:09,650
他の採掘者が作業しているブロックチェーンは、

340
00:21:09,650 --> 00:21:14,190
アリスの嘘のブロックチェーンよりも早く伸びるからである。

341
00:21:15,200 --> 00:21:19,820
十分な時間が過ぎた後に、ボブはアリスから送られたブロック列を切り捨て、

342
00:21:19,820 --> 00:21:23,100
他の採掘者が伸ばしていた方を信用する。

343
00:21:24,020 --> 00:21:29,250
この事から、新たに追加されたブロックをその地点ですぐに信用する必要はない。

344
00:21:29,620 --> 00:21:33,420
その代わりに、暫くその後ろに新たに続くブロックを見守って、

345
00:21:33,890 --> 00:21:36,610
もしより長いブロックチェーンが見つからなければ、

346
00:21:36,610 --> 00:21:40,860
その時にはそのブロックを、他の人が持つ同じブロックチェーンの一部と信用して良い。

347
00:21:42,250 --> 00:21:45,520
主要なアイデアが出揃った。

348
00:21:45,850 --> 00:21:49,190
プルーフ・オブ・ワークを基盤にした分散型元帳システムは、

349
00:21:49,190 --> 00:21:53,810
ビットコインやその他多くの暗号通貨の基本となる仕組みである。

350
00:21:54,260 --> 00:21:56,280
まだ少しばかり追記する部分がある。

351
00:21:56,280 --> 00:21:59,480
先程、プルーフ・オブ・ワークとは60のゼロの列が先頭に来る

352
00:21:59,480 --> 00:22:02,830
ハッシュを作り出す値を探す事だと説明した。

353
00:22:03,210 --> 00:22:08,400
実際のビットコインのプロトコルでは、必要なゼロの数は変動する。

354
00:22:08,400 --> 00:22:12,080
それで新たなブロックの生成にかかる時間を平均１０分になるよう調整する。

355
00:22:12,800 --> 00:22:15,730
もしより多くの採掘者がネットワーク上にいた場合、

356
00:22:16,010 --> 00:22:18,230
要件はより厳しくなる。

357
00:22:18,230 --> 00:22:23,170
これで大体10分の間に一人、小型宝くじに当選する人がいる様にする。

358
00:22:23,950 --> 00:22:28,080
後発の暗号通貨はもっと短い期間を採用している場合が多い。

359
00:22:28,660 --> 00:22:32,770
ビットコイン上にある通貨は全てブロック報酬によって生まれている。

360
00:22:33,030 --> 00:22:35,890
最初のブロック報酬は1ブロックにつき50ビットコインであった。

361
00:22:36,190 --> 00:22:39,380
これに関して「Block Explorer」という素晴らしいサイトがあり、

362
00:22:39,380 --> 00:22:41,760
ビットコインのブロックチェーンの成り行きを簡単に閲覧できる。

363
00:22:41,990 --> 00:22:45,030
一番最初のブロックを参照してみると、

364
00:22:45,030 --> 00:22:49,520
取引記録が無く、50ビットコインの報酬だけが記録されている。

365
00:22:49,970 --> 00:22:54,800
実は21万ブロックごとに、得られる報酬は半減する。

366
00:22:54,800 --> 00:22:56,890
大体4年ごとである。

367
00:22:56,890 --> 00:23:00,390
2017年現在、報酬は12.5ビットコインである。

368
00:23:00,740 --> 00:23:04,340
この報酬の減少は永久に続いていくわけだから、

369
00:23:04,710 --> 00:23:09,750
2100万ビットコインが存在できる上限である事が分かる。

370
00:23:10,450 --> 00:23:13,520
ただし、採掘者が通貨を獲得できなくなるという事は無い。

371
00:23:13,950 --> 00:23:18,230
ブロック報酬に加えて、採掘者は取引手数料を徴収することができる。

372
00:23:18,500 --> 00:23:20,970
よって実は取引をした時はいつも、

373
00:23:20,970 --> 00:23:24,700
手数料を追加で含める事ができる。

374
00:23:24,700 --> 00:23:28,620
この手数料によって、採掘者はブロックにどの取引記録を入れるかを決める。

375
00:23:29,280 --> 00:23:32,100
手数料を入れれば、採掘者に自分の取引記録を

376
00:23:32,100 --> 00:23:36,080
次のブロックに入れてもらうように催促できる。

377
00:23:36,430 --> 00:23:42,080
ビットコインにおいては、各ブロックが保持できる記録数の上限は2400であり、

378
00:23:42,080 --> 00:23:45,380
これには批判も多々ある。

379
00:23:45,970 --> 00:23:51,740
比較として、VISAは一秒につき約1700の取引を平均で完了させている。

380
00:23:51,740 --> 00:23:55,510
さらに一秒に2万4千の取引を完了させる能力も持っている。

381
00:23:56,240 --> 00:24:01,390
ビットコインの取引完了の遅さは、より早く採掘者に自分の取引記録を

382
00:24:01,390 --> 00:24:06,410
ブロックに入れてもらう様に、より多くの手数料を含める傾向に繋がる。

383
00:24:08,160 --> 00:24:12,140
今回紹介した内容は、暗号通貨の全貌の一部分であり。

384
00:24:12,140 --> 00:24:16,400
カバーしきれていない所や、全く言及していない領域もある。

385
00:24:16,720 --> 00:24:21,550
しかしこの動画が、より深く探究しようとしている人に対して、

386
00:24:21,550 --> 00:24:24,710
基礎となる思考を提供できていたなら幸いである。

387
00:24:25,250 --> 00:24:26,280
初めに述べた通り、

388
00:24:26,280 --> 00:24:31,170
この動画作成の動機の一つは、大量の金銭が暗号通貨に流れ始めたからである。

389
00:24:31,370 --> 00:24:35,090
その事について良し悪しを主張するつもりはないが、

390
00:24:35,330 --> 00:24:38,210
もしこのゲームに足を踏み入れようとするならば、

391
00:24:38,210 --> 00:24:40,720
技術的な基礎知識は持っておくべきである。

392
00:24:41,550 --> 00:24:45,750
恒例だが、Patreonでこのチャンネルを支えてくれている人達に感謝する。

393
00:24:46,170 --> 00:24:49,180
誰もがこの様な形で貢献できる訳ではないのは理解している。

394
00:24:49,180 --> 00:24:51,280
もしそれでも支援をしたいと思っているならば、

395
00:24:51,280 --> 00:24:52,700
一番良い方法として、

396
00:24:52,700 --> 00:24:57,200
他に興味を持ってくれそうな人にこの動画をシェアしてほしい。

