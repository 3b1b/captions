1
00:00:04,220 --> 00:00:06,780
Mit jelent az, hogy *van* Bitcoinom?

2
00:00:07,440 --> 00:00:09,410
Sokan halloták a Bitcoinról hogy

3
00:00:09,410 --> 00:00:12,570
ez egy teljesen digitális pénz amit nem egy állam kormánya bocsát ki;

4
00:00:12,690 --> 00:00:16,130
és amihez nincs szükség bankokra hogy kezeljék a számlákat és ellenőrizzék a tranzakciókat;

5
00:00:16,350 --> 00:00:19,080
és hogy senki sem tudja igazán, hogy ki volt a feltalálója.

6
00:00:19,440 --> 00:00:23,570
Sokan nem ismerik a választ erre a kérdésre, legalábbis nem teljesen.

7
00:00:24,340 --> 00:00:25,120
Ahhoz, hogy megértsük,

8
00:00:25,120 --> 00:00:29,780
és hogy a megoldáshoz vezető technológiai részletek valóban motiváljanak,

9
00:00:29,780 --> 00:00:32,340
ahhoz lépésről lépésre végig fogunk menni azon hogy

10
00:00:32,340 --> 00:00:35,600
te hogyan találnád fel a te saját változatodat a Bitcoinból.

11
00:00:36,120 --> 00:00:40,050
Azzal fogjuk kezdeni hogy nyomonkövetjük az barátaitok közötti pénzmozgásokat egy közösségi főkönyvben.

12
00:00:40,370 --> 00:00:44,690
Majd idővel, amikor egyre kevésbé bízol a barátaidban és a körülötted lévő világban,

13
00:00:44,910 --> 00:00:48,130
és ha elég okos vagy hogy felhasználj néhány ötletet a kriptográfiából

14
00:00:48,130 --> 00:00:50,260
hogy kiküszöbölhesd a bizalom szükségességét,

15
00:00:50,260 --> 00:00:53,310
akkor idővel eljutsz ahhoz amit úgy hívunk hogy "kriptopénz".

16
00:00:53,700 --> 00:00:58,040
Amint látod, a Bitcoin csak az első megvalósított példája a kriptopénznek.

17
00:00:58,340 --> 00:01:02,830
Manapság már több ezer ilyen létezik tőzsdéken a hagyomás pénzek mellett.

18
00:01:03,280 --> 00:01:06,410
A saját kriptopénzed feltalálásának útja segíthet téged abban, hogy megfelelő alapokra építve

19
00:01:06,410 --> 00:01:09,440
megérthesd az újabb szereplőket a kriptopiacon

20
00:01:09,440 --> 00:01:13,600
és hogy felismerd hogy miért van helye a különböző tervezésbeli megoldásoknak.

21
00:01:14,050 --> 00:01:16,300
Valójában azért választottam ezt a témát mert

22
00:01:16,300 --> 00:01:20,060
tavaly hatalmas figyelem, befektetés

23
00:01:20,060 --> 00:01:23,600
és, hát, őszintén szólva hype irányult a kriptopénzek iránt.

24
00:01:24,320 --> 00:01:28,060
És nem fogok megjegyzéseket tenni vagy spekulálni a jelenlegi vagy jövőbeni árfolyamokkal kapcsolatban,

25
00:01:28,060 --> 00:01:29,350
de azt gondolom hogy mindannyian egyetérthetünk abban, hogy

26
00:01:29,350 --> 00:01:33,640
bárki aki kriptopénzt szeretne vásárolni, annak tudnia kellene hogy az mi.

27
00:01:33,920 --> 00:01:38,080
És itt most nem csak az aranybányászattal kapcsolatos homályos analógiákra gondolok,

28
00:01:38,080 --> 00:01:42,510
hanem egy valódi, közvetlen leírást arról, hogy mit csinálnak a számítógépek

29
00:01:42,510 --> 00:01:45,660
amikor elküldjük, fogadjuk, vagy létrehozzuk a kriptopénzeket.

30
00:01:46,800 --> 00:01:48,870
Egyébként egy dolgot érdemes leszögezni, hogy

31
00:01:48,870 --> 00:01:51,930
habár te és én bele fogunk itt ásni a részletekbe,

32
00:01:52,120 --> 00:01:53,830
és ez jelentős időt fog igénybe venni,

33
00:01:54,110 --> 00:01:58,770
valójában nincs szükséged arra, hogy részleteiben megismerd ha csak használni szeretnéd a kriptopénzt,

34
00:01:59,070 --> 00:02:03,290
épp úgy mint ahogy nincs szükséged arra sem, hogy a részletesen tudd hogy mi történik a motorháztető alatt amikor a bankkártyádat használod.

35
00:02:03,680 --> 00:02:07,190
Mint bármely digitális fizetésnél, sok felhasználó-barát alkalmazás létezik amelyekkel

36
00:02:07,190 --> 00:02:11,260
anélkül küldhetünk vagy fogadhatunk pénzeket hogy azon kellene gondolkodnun hogy mi történik a háttérben.

37
00:02:11,780 --> 00:02:14,940
A különbség itt az, hogy ennek a gerince

38
00:02:14,940 --> 00:02:17,300
nem egy bank amely ellenőrzi a tranzakciókat.

39
00:02:17,620 --> 00:02:21,970
Hanem egy decentralizált, bizalmat nem igénylő intelligens ellenőrző rendszer

40
00:02:22,180 --> 00:02:24,850
amely a kriptográfiában született matematikára alapul.

41
00:02:25,910 --> 00:02:26,460
De kezdésképpen

42
00:02:26,460 --> 00:02:30,730
azt szeretném, ha egy pár perce valóban félretennéd a kriptopénzek gondolatát.

43
00:02:31,040 --> 00:02:35,810
Ennél sokkal földhöz kötöttebb dologgal fogjuk kezdeni a történetünket: főkönyvekkel és digitális aláírásokkal.

44
00:02:36,400 --> 00:02:38,980
Hogy ha elég gyakran cseréltek pénzt a barátaiddal,

45
00:02:38,980 --> 00:02:41,660
tudod, például ha a vacsoránál ki kell fizetni a számla rádeső részét,

46
00:02:41,660 --> 00:02:44,250
akkor kényelmetlenné válhat a készpénz használata.

47
00:02:44,700 --> 00:02:46,300
Szóval fenntarthatsz egy közösségi főkönyvet

48
00:02:46,300 --> 00:02:50,190
amely tartalmazza az összes fizetést amelyet valaha szeretnél csinálni.

49
00:02:50,500 --> 00:02:52,470
Tudod, Alice fizet Bobnak 20$-t,

50
00:02:52,470 --> 00:02:54,940
Bob fizet Charlie-nak 40$-t, ilyesmi.

51
00:02:55,580 --> 00:02:58,920
Ez a főkönyv bárki számára nyilvános és elérhető lesz,

52
00:02:58,920 --> 00:03:01,980
mint egy weboldal, ahova bárki odamehet és hozzáadhat új sorokat.

53
00:03:02,530 --> 00:03:04,320
És tételezzük fel, hogy minden hónap végén

54
00:03:04,320 --> 00:03:07,930
közösen végignézitek a tranzakciós listát és elrendezitek a tartozásaitokat.

55
00:03:08,290 --> 00:03:11,450
Hogy ha többet költöttél, mint amennyit kaptál, akkor annyi pénzt kell a közösbe rakod;

56
00:03:11,450 --> 00:03:14,560
és ha többet kaptál, mint amennyit költöttél, akkor annyi pénzt vehetsz ki a közösből.

57
00:03:15,390 --> 00:03:19,530
Tehát ennek a nagyon egyszerű rendszernek a következőképpen nézhet ki a protokollja:

58
00:03:19,950 --> 00:03:22,000
bárki adhat hozzá sorokat a főkönyvhöz;

59
00:03:22,000 --> 00:03:25,340
és minden hónap végén elrendezitek a tartozásaitokat.

60
00:03:26,240 --> 00:03:31,010
Na már most egy probléma van ezzel a nyilvános főkönyvvel, mégpedig az hogy bárki hozzáadhat sorokat,

61
00:03:31,010 --> 00:03:37,240
azaz mi akadályozná meg Bobot hogy beírja azt hogy "Alice fizet Bobnak 100$-t" anélkül hogy Alice ezt engedélyezné?

62
00:03:37,750 --> 00:03:41,260
Hogyan tudnánk így megbízni abban, hogy minden tranzakció

63
00:03:41,260 --> 00:03:43,400
az aminek a küldője szánta?

64
00:03:44,810 --> 00:03:48,850
Nos, ez az első hogy ahol egy kicsit képbe jön a kriptográfia: digitális aláírások.

65
00:03:49,460 --> 00:03:50,960
Mint a kézi aláírásoknál,

66
00:03:50,960 --> 00:03:55,830
az elgondolás az hogy Alicenak hozzá kell tudnia adni valamit a tranzakció mellé,

67
00:03:55,830 --> 00:03:58,720
ami igazolja hogy látta és jóváhagyta azt.

68
00:03:59,220 --> 00:04:03,490
És ennek az aláírásnak bárki által meghamisíthatatlannak kell lennie.

69
00:04:04,360 --> 00:04:08,790
Elsőre úgy tűnhet, hogy egy ilyen digitális aláírás nem is lehetne igazán lehetséges.

70
00:04:09,130 --> 00:04:14,160
Ez alatt azt értem, hogy bármely, az aláírást tartalmazó adatot egy számítógép egyszerűen beolvashatja és lemásolhaja,

71
00:04:14,390 --> 00:04:16,580
szóval hogyan előződ meg ezt?

72
00:04:17,300 --> 00:04:22,200
Nos, ez úgy működik hogy mindenki létrehoz egy úgynevezett "publikus kulcs - privát kulcs párt"

73
00:04:22,200 --> 00:04:24,410
amelyek úgy néznek ki mint biteknek egy láncolata.

74
00:04:24,810 --> 00:04:27,280
A "privát kulcsot" néha "titkos kulcsnak" (*secret key*) is hívják,

75
00:04:27,280 --> 00:04:31,670
tehát lerövidíthetjük úgy mint "sk", míg a publikus kulcsot úgy mint "pk".

76
00:04:32,400 --> 00:04:36,480
Ahogy a neve is sugalja, a titkos kulcs egy olyasvalami amit nem akarsz kiadni másoknak.

77
00:04:37,080 --> 00:04:41,950
A valós életben, a kézi aláírásod ugyanúgy néz ki attól függetlenül, hogy milyen dokumentumot írsz alá.

78
00:04:42,480 --> 00:04:45,080
Ezzel ellentétben a digitális aláírások valójában sokkal erősebbek,

79
00:04:45,080 --> 00:04:47,320
mert változik a különböző üzeneteknél.

80
00:04:47,880 --> 00:04:52,900
Úgy néz ki mint nullák és egyesek láncolata, amely a leggyakrabban 256 bites;

81
00:04:53,310 --> 00:04:55,840
és ha egy kicsit is változtatunk az üzeneten, akkor az azt is

82
00:04:55,840 --> 00:04:59,760
teljesen megváltoztatja  ahogyan az aláírásnak ki kell néznie.

83
00:05:00,910 --> 00:05:02,720
Egy kicsit hivatalosabban mondva,

84
00:05:02,720 --> 00:05:08,720
az aláírás létrehozása egy olyan függvényt foglal magában amely függ mind az üzenettől, és a privát kulcstól is.

85
00:05:09,260 --> 00:05:12,590
A privát kulcs biztosítja azt hogy csak te tudod létrehozni ezt az aláírást,

86
00:05:12,900 --> 00:05:15,180
és a tény hogy függ az üzenettől

87
00:05:15,180 --> 00:05:19,870
azt jelenti, hogy senki nem tudja csak úgy lemásolni az aláírásodat, hogy meghamisítson vele egy másik üzenetet.

88
00:05:21,120 --> 00:05:25,850
Ezzel kéz a kézben jár egy másik függvény amely az aláírás érvényességét hivatott ellenőrizni.

89
00:05:26,280 --> 00:05:28,420
És itt jön képbe a publikus kulcs.

90
00:05:29,170 --> 00:05:31,470
Mindössze annyit csinál hogy egy "igaz" vagy "hamis" állitást ad vissza

91
00:05:31,470 --> 00:05:34,740
hogy jelezze ha ez az aláírás azzal a privát kulcssal készült

92
00:05:34,740 --> 00:05:38,080
amelyhez az a publikus kulcs tartozik amit az ellenőrzésre használsz.

93
00:05:38,610 --> 00:05:42,240
Nem fogok belemenni annak a részleteiben hogy pontosan hogyan működnek ezek a függvények,

94
00:05:42,240 --> 00:05:47,590
de lényeg az hogy lehetetlen legyen találni egy érvényes aláírást

95
00:05:47,590 --> 00:05:49,390
ha nem tudod a titkos kulcsot.

96
00:05:50,040 --> 00:05:54,970
Pontosabban, nincs jobb stratégia annál, mint hogy véletlenszerűen találunk ki és ellenőrzünk le aláírásokat,

97
00:05:54,970 --> 00:05:58,080
amit a mindenki által ismert publikus kulcs használatával ellenőrizhetsz le.

98
00:05:59,020 --> 00:06:03,370
Most gondolj bele abba hogy hány aláírás lehetséges egy 256 bites hosszúsággal,

99
00:06:03,790 --> 00:06:06,810
ez 2^256.

100
00:06:07,350 --> 00:06:09,880
Ez egy hülyén nagy szám.

101
00:06:09,880 --> 00:06:13,900
Ha csillagászatilag nagy számnak mondanánk akkor azzal túl nagy hitelt adnánk az asztronómiának.

102
00:06:14,290 --> 00:06:19,880
Valójában csináltam egy kiegészítő videót amit csak ennek a hatalmas számnak a szemléltetésére szántam.

103
00:06:20,360 --> 00:06:21,860
Egyelőre maradjunk csak annyiban, hogy

104
00:06:21,860 --> 00:06:25,470
amikor leellenőrizted hogy egy adott üzenethez tartozó aláírás érvényes,

105
00:06:25,830 --> 00:06:30,420
akkor egészen biztos lehetsz abban, hogy az egyetlen módja annak, hogy ezt az aláírást elkészítsék az az,

106
00:06:30,420 --> 00:06:35,360
hogy ha ismerték az aláírás ellenőrzésére használt publikus kulcsohoz tartozó titkos kulcsot.

107
00:06:37,040 --> 00:06:40,960
Namost az elég jó, hogy ha meggyőződhetünk arról, hogy az emberek aláírják a főkönyvben lévő tranzakciókat,

108
00:06:40,960 --> 00:06:42,410
de van egy kiskapu:

109
00:06:42,850 --> 00:06:46,880
ha Alice aláír egy tranzakciót, például "Alice fizet Bobnak 100$-t",

110
00:06:46,880 --> 00:06:50,740
habár Bob nem tudja meghamisítani Alice aláírását egy új üzeneten,

111
00:06:50,740 --> 00:06:53,890
de le tudná másolni ugyanazt a sort ahányszor csak szeretné.

112
00:06:54,190 --> 00:06:57,400
Úgy értem, hogy az üzenet-aláírás páros érvényes marad.

113
00:06:57,970 --> 00:07:01,970
Ahhoz hogy ezt elkerüljük, ahhoz az kell, hogy amikor aláírsz egy tranzakciót,

114
00:07:01,970 --> 00:07:07,310
akkor az üzenetnek tartalmaznia kell egy egyedi, tranzakcióhoz köthető azonosítót.

115
00:07:07,880 --> 00:07:11,710
Így ha Alice több alkalommal fizet Bobnak 100$-t,

116
00:07:11,710 --> 00:07:15,740
akkor minden sornak a főkönyvben egy teljesen új aláírásra van szüksége.

117
00:07:16,960 --> 00:07:17,880
Rendben, nagyszerű!

118
00:07:18,160 --> 00:07:22,380
A digitális aláírások nagyrészt megszüntetik a bizalom szükségességét ebben a kezdeti protokollban,

119
00:07:22,380 --> 00:07:24,910
de még így is, ha tényleg eképp csinálnád,

120
00:07:24,910 --> 00:07:27,460
még így is egyfajta becsület rendszerre kellene hagyatkoznod.

121
00:07:27,720 --> 00:07:30,460
Pontosabban abban kell megbíznod hogy mindenki ténylegesen

122
00:07:30,470 --> 00:07:33,010
rendezi fogja a készpénz tartozásait minden hónap végén.

123
00:07:33,620 --> 00:07:37,590
Mi lenne, ha például Charlie többezer dollárnyi tartozást gyüjtene össze,

124
00:07:37,590 --> 00:07:39,410
és egyszerűen nem jelenne meg.

125
00:07:40,240 --> 00:07:43,270
Az egyetlen igazi oka a készpénzes tartozás rendezésnek az,

126
00:07:43,270 --> 00:07:47,300
hogy ha néhány ember (Feléd nézek, Charlie!) egy csomó pénzzel tartozna.

127
00:07:48,010 --> 00:07:52,440
Szóval lehet, hogy van egy okos ötleted, hogy soha nem kell készpénzzel rendezni a tartozásokat,

128
00:07:52,440 --> 00:07:56,740
egészen addig ameddig meg tudod akadályozni azt, hogy az emberek sokkal többet költhessenek, mint amennyit befizettek.

129
00:07:57,390 --> 00:08:01,280
Talán azzal kezded hogy mindenkinek be kell fizetnie 100$-t a közösbe,

130
00:08:01,580 --> 00:08:04,080
és azzal kezded a főkönyvet, hogy

131
00:08:04,080 --> 00:08:08,460
"Alice kap 100$-t", "Bob kap 100$-t", "Charlie kap 100$-t", stb...

132
00:08:09,170 --> 00:08:12,560
Na, most egyszerűen ne fogadj el olyan tranzakciót,

133
00:08:12,560 --> 00:08:16,210
ahol valaki többet költ mint amennyije számon van tartva a főkönyvben.

134
00:08:16,850 --> 00:08:20,030
Például, ha az első két tranzakció:

135
00:08:20,030 --> 00:08:24,240
"Charlie fizet Alice-nak 50$-t" és "Charlie fizet Bobnak 50$-t",

136
00:08:24,480 --> 00:08:29,690
ha megpróbálná hozzáadni azt hogy "Charlie fizet neked 20$-t", akkor az érvénytelen lenne,

137
00:08:29,690 --> 00:08:32,100
éppúgy érvénytelen mintha soha nem is írta volna alá.

138
00:08:33,010 --> 00:08:35,940
Figyeld meg, hogy ez azt jelenti, hogy egy tranzakció leellenőrzéséhez

139
00:08:35,940 --> 00:08:39,600
szükséges a teljes tranzakciós történet egészen addig a pontig.

140
00:08:40,140 --> 00:08:43,970
És ez többé-kevésbé igaz lesz a kriptopénzekre is,

141
00:08:43,970 --> 00:08:46,260
habár lenne még helye egy kis optimizálásnak.

142
00:08:48,750 --> 00:08:50,120
Az az érdekes ebben, hogy

143
00:08:50,120 --> 00:08:55,900
ez a lépés megszünteti a kapcsolatot a főkönyv és a tényleges fizikai USA dollár között.

144
00:08:56,310 --> 00:08:59,680
Elméletben, ha mindenki ezt a főkönyvet használná a világon,

145
00:08:59,680 --> 00:09:03,640
akkor az egész életedet leélhetnéd úgy hogy csak ezen a főkönyvön keresztül küldenél és fogadnál pénzt

146
00:09:03,640 --> 00:09:06,960
anélkül hogy valaha igazi USA dollárra kellene váltanod.

147
00:09:07,430 --> 00:09:08,920
Igazából, ahhoz hogy hangsúlyozzuk ezt a pontot,

148
00:09:08,920 --> 00:09:14,310
kezdjünk el "főkönyv dollárként" (*ledger dollar*-ként) hivatkozni rá, vagy röviden "LD".

149
00:09:14,790 --> 00:09:18,900
Természetesen szabadon válthatsz főkönyv dollárt (LD) igazi USA dollárra.

150
00:09:19,070 --> 00:09:22,750
Például, talán Alice ad Bobnak egy 10$-os bankjegyet a való világban,

151
00:09:22,750 --> 00:09:26,000
cserébe azért, hogy hozzááadja és aláírja azt a tranzakciót

152
00:09:26,000 --> 00:09:29,830
a főkönyvben, hogy "Bob fizet Alice-nak 10 LD-t".

153
00:09:30,820 --> 00:09:34,490
De az ilyen a cseréket nem fogja tudni garantálni a protokoll.

154
00:09:34,840 --> 00:09:38,510
Ez már inkább hasonlít arra ahogyan euróra, dollárra,

155
00:09:38,510 --> 00:09:40,830
vagy bármely más pénzre váltanál a szabad piacon,

156
00:09:41,160 --> 00:09:44,080
ez egyszerűen egy saját különálló dolog.

157
00:09:44,690 --> 00:09:50,380
Ez az első fontos dolog amit meg kell érteni a Bitcoinról és bármely más kriptopénzről,

158
00:09:50,850 --> 00:09:56,320
hogy mi ez valójában: egy főkönyv, a pénz maga a tranzakciók története.

159
00:09:57,110 --> 00:09:58,440
Természetesen, a Bitcoinnál

160
00:09:58,440 --> 00:10:01,970
nem az emberek készpénzes bevásárlásaival kerül pénz a főkönyvbe.

161
00:10:01,970 --> 00:10:05,040
Egy pár perc múlva eljutunk oda is hogyan kerül új pénz a főkönyvbe,

162
00:10:05,530 --> 00:10:08,710
de azelőtt, van egy még lényegesebb különbség

163
00:10:08,710 --> 00:10:12,590
a mi mostani "főkönyv dollar" (*ledger dollar*) rendszerünk és aközött ahogyan a kriptopénzek működnek.

164
00:10:13,000 --> 00:10:16,080
Eddig annyit mondtam, hogy ez a főkönyv valamilyen publikus helyen van,

165
00:10:16,080 --> 00:10:18,720
például egy weboldalon, ahol bárki hozzá tud adni újabb sorokat.

166
00:10:19,220 --> 00:10:22,080
De ez megköveteli, hogy megbízzunk egy központi helyben,

167
00:10:22,080 --> 00:10:24,240
nevezetesen abban, hogy "ki weboldal üzemeltetője?",

168
00:10:24,240 --> 00:10:27,060
"ki irányítja az új sorok hozzáadásának a szabályait?".

169
00:10:27,550 --> 00:10:32,260
Ahhoz, hogy megszüntessük a bizalom efféle szükségességét, mindenki tartani fog magánál egy saját másolatot a főkönyből.

170
00:10:32,760 --> 00:10:37,100
Azután amikor egy tranzakciót szeretnél csinálni, például "Alice fizet Bobnak 100LD-t",

171
00:10:37,400 --> 00:10:39,960
akkor azt közvetíted mindenkinek a világban,

172
00:10:39,960 --> 00:10:43,740
hogy az emberek az alapján elmenthessék a saját privát főkönyvjükben.

173
00:10:44,850 --> 00:10:49,460
De ha nem teszel még valamit, ez a rendszer abszurd módon rossz.

174
00:10:49,800 --> 00:10:53,040
Hogyan tudna mindenki meggyőződni arról, hogy melyik a helyes főkönyv?

175
00:10:53,400 --> 00:10:57,620
Amikor Bobnak küldenek egy tranzakciót, például "Alice fizet Bobnak 10LD-t",

176
00:10:57,620 --> 00:11:01,960
hogyan győződhet meg arról, hogy mindenki más is megkapta és elhiszi ugyanazt a tranzakciót,

177
00:11:02,290 --> 00:11:07,550
ha majd később odamegy Charlie-hoz, hogy felasználja ugyanazt a 10LD-t egy tranzakcióhoz?

178
00:11:08,300 --> 00:11:12,480
De tényleg, gondolj csak bele, hogy ha a szétküldött tranzakciókat figyeled,

179
00:11:12,950 --> 00:11:18,460
hogyan győződhetsz meg arról, hogy mindenki más is ugyanazokat a tranzakciókat ugyanabban a sorrendben menti el?

180
00:11:19,460 --> 00:11:21,540
Ennek a problémának valójában ez a lényege.

181
00:11:21,540 --> 00:11:23,000
Ez egy érdekes feladvány.

182
00:11:23,450 --> 00:11:27,910
Ki tudsz-e találni egy olyan protokollt, amivel úgy tudsz fogadni vagy elutasítani tranzakciókat,

183
00:11:27,910 --> 00:11:31,160
és milyen sorrendben, ahhoz, hogy meggyőződhess arról, hogy

184
00:11:31,160 --> 00:11:34,860
ha bárki a világban aki ezt a protokollt követi,

185
00:11:34,860 --> 00:11:38,000
annak ugyanúgy nézzen ki az ő saját személyes főkönyve, mint a tiéd?

186
00:11:38,510 --> 00:11:41,800
Az eredeti Bitcoin tanulmány ezt a problémát oldja meg.

187
00:11:44,530 --> 00:11:47,640
Egy magasabb szinten, a megoldás amit a Bitcoin kínál az az, hogy

188
00:11:47,640 --> 00:11:52,040
abban a főkönyvben bízunk, amelyikbe a legtöbb számítási munkát tették.

189
00:11:52,600 --> 00:11:55,240
Most röviden elmondom, hogy mit jelent ez pontosan,

190
00:11:55,240 --> 00:11:58,290
egy olyan dolgot foglal magában amit úgy nevezünk hogy "kriptográfiai hasítófüggvény" (*cryptographic hash function*).

191
00:11:58,510 --> 00:12:00,540
Arra az általános elképzelésre építünk,

192
00:12:00,540 --> 00:12:04,910
hogy ha számítási munkát használsz a bizalom alapjaként,

193
00:12:05,310 --> 00:12:08,810
akkor el tudod érni azt, hogy a csalárd tranzakciókhoz és egymással ellentétes főkönyvekhez

194
00:12:08,810 --> 00:12:12,400
megvalósíthatatlanul sok számítás kelljen ahhoz, hogy azok megvalósulhassanak.

195
00:12:12,990 --> 00:12:15,930
Ismét szeretnélek emlékeztetni téged arra, hogy ez kezd jóval

196
00:12:15,930 --> 00:12:19,750
túlmutatni azon amit bárkinek tudnia kell ahhoz, hogy csak használhasson egy ilyen pénzt,

197
00:12:20,130 --> 00:12:21,600
de ez egy nagyon jó ötlet!

198
00:12:21,600 --> 00:12:26,950
És hogy ha ezt érted, akkor megérted azt is, hogy mi a lelke a Bitcoinnak és az többi kriptopénznek.

199
00:12:27,990 --> 00:12:30,230
Kezdjük az elején, mi az a hasító függvény (*hash function*)?

200
00:12:30,750 --> 00:12:34,300
Ezeknek a függvényeknek a bemente egy tetszőleges üzenet vagy fájl,

201
00:12:34,300 --> 00:12:35,540
ez valójában mindegy.

202
00:12:35,730 --> 00:12:40,820
A kimenete pedig bitek egy meghatározott hosszúságú láncolata, pl. 256 bit.

203
00:12:41,420 --> 00:12:45,040
Ezt a kimenetét "hash"-nek, vagy "digest"-nek hívjuk. (magyarul: *hasítás*, *kivonat*, a továbbiakban "hash", kiejtve: *hes*)

204
00:12:45,380 --> 00:12:47,980
És a szándék az hogy ez véletlenszerűnek látszik.

205
00:12:48,220 --> 00:12:51,850
De nem véletlenszerű - azonos bemenetre mindig azonos kimenetet ad.

206
00:12:52,290 --> 00:12:53,120
De az itt az ötlet, hogy

207
00:12:53,120 --> 00:12:57,640
ha egy picit is megváltoztatod a bemenetet, akár csak az egyik betűt megváltoztatva is,

208
00:12:57,950 --> 00:13:00,420
az eredményezett hash teljesen megváltozik.

209
00:13:01,030 --> 00:13:05,680
Igazából ez a hasító függvényt (*hash function*-t), a SHA256-ot (ejtsd: *sá 256*), amit itt mutatok,

210
00:13:05,980 --> 00:13:12,010
úgy változik a kimenet ahogy egy picit is megváltoztatod a bemenetet, hogy az  teljesen kiszámíthatatlan.

211
00:13:12,490 --> 00:13:15,080
Ahogy látod, ez nem csak egy akármilyen hasító függvény,

212
00:13:15,080 --> 00:13:17,360
ez egy kriptográfiai hasító függvény.

213
00:13:17,360 --> 00:13:20,830
Ez azt jelenti, hogy az ellenkező irányban kiszámíthatatlan.

214
00:13:21,320 --> 00:13:23,620
Hogy ha mutatok neked néhány egyes és nullás láncolatát,

215
00:13:23,620 --> 00:13:25,860
és megkérlek arra hogy keresd meg azt a bemenetet,

216
00:13:25,860 --> 00:13:31,320
amely bemenetre a SHA256 hash-e pontosan ugyanazt a bitek láncolatát adja,

217
00:13:31,640 --> 00:13:34,910
akkor nem lenne jobb módszered annál, mint hogy találgass és leellenőrizd.

218
00:13:35,770 --> 00:13:42,260
Ha szeretnéd ismét átérezni, hogy mennyi számításra lenne szükséged ahhoz, hogy végigmenj 2^256-ik találgatáson,

219
00:13:42,260 --> 00:13:44,060
akkor csak nézd meg az erről szóló videónkat.

220
00:13:44,320 --> 00:13:46,880
Valójában túlzottan nagyon is élveztem megírni azt a dolgot.

221
00:13:48,960 --> 00:13:54,040
Gondolhatnád azt, hogy ha csak mélyen tanulmányozod azt ahogyan működik ez a függvény (*hashing function*),

222
00:13:54,040 --> 00:13:57,680
akkor visszafejthetnéd a megfelelő bemenetet anélkül hogy próbálgatnál és ellenőrizgetnél.

223
00:13:58,270 --> 00:14:00,870
De soha senki nem jött rá hogyan lehetne ezt megcsinálni.

224
00:14:01,550 --> 00:14:07,270
Érdekes, hogy szigorúan véve nincs konkrét bizonyíték arra, hogy nehéz kiszámítani a fordított irányban.

225
00:14:07,600 --> 00:14:10,300
És mégis, korszerű biztonságtechnika hatalmas mértékben

226
00:14:10,300 --> 00:14:14,500
függ a kriptográfiai hasító függvényektől (*cryptographic hash functions*), és az elgondolástól hogy ezzel a tulajdonsággal rendelkeznek.

227
00:14:15,040 --> 00:14:18,140
Ha belenéznél, hogy milyen algoritmusokon alapszik az a titkos kapcsolat,

228
00:14:18,140 --> 00:14:20,580
amely a böngésződ és a Youtube között jött most létre,

229
00:14:20,580 --> 00:14:22,210
vagy amelyet a bankoddal létesít,

230
00:14:22,580 --> 00:14:25,990
akkor valószínűleg felbukkanna a SHA256 név.

231
00:14:27,390 --> 00:14:29,360
Egyelőre azon lesz a fókusz, hogy

232
00:14:29,360 --> 00:14:33,810
hogyan tudja bizonyítani egy ilyen függvény, hogy egy bizonyos tranzakciós listához

233
00:14:33,810 --> 00:14:37,070
egy nagy mennyiségű számítási erőfeszítés tartozik.

234
00:14:38,030 --> 00:14:41,240
Képzeld el, hogy valaki mutat neked egy tranzakciós listát, és azt mondják:

235
00:14:41,240 --> 00:14:43,220
"Hé! Találtam egy különleges számot,

236
00:14:43,220 --> 00:14:47,010
amit hogy ha a tranzakciós lista végére illesztek,

237
00:14:47,010 --> 00:14:50,090
és SHA256-ot alkalmazok az egészre,

238
00:14:50,090 --> 00:14:53,570
akkor a kimement első 30 bitjének nullásnak kell lennie."

239
00:14:54,080 --> 00:14:57,110
Szerinted milyen nehéz volt nekik megtalálni ezt a számot?

240
00:14:58,060 --> 00:14:59,520
Nos, egy véletlenszerű üzenettel,

241
00:14:59,520 --> 00:15:05,830
az esélye annak hogy egy olyan hash forduljon elő ami 30 egymást követő nullással kezdődik 1 a 2^30-hoz,

242
00:15:05,830 --> 00:15:07,650
ami nagyjából egy az egy milliárdhoz.

243
00:15:08,150 --> 00:15:12,110
És mivel a SHA256 egy kriptográfiai hasító függvény (*cryptographic hash finction*),

244
00:15:12,110 --> 00:15:16,170
az egyetlen módja, hogy találjunk egy ilyen különleges számot, az az ha csak találgatunk és leellenőrizzük.

245
00:15:16,640 --> 00:15:20,880
Tehát ennek az illetőnek biztosan végig kellett mennie körülbelül egy milliárd különböző számon ahhoz,

246
00:15:20,880 --> 00:15:22,670
hogy találjon egy ilyen különleges számot.

247
00:15:23,360 --> 00:15:24,830
És onnantól hogy tudod ezt a számot,

248
00:15:24,830 --> 00:15:29,110
nagyon gyorsan le lehet ellenőrizni - csak lefuttatod a hash-t és megnézed hogy van-e 30 nullásod.

249
00:15:29,800 --> 00:15:33,900
Más szavakkal, le tudod ellenőrizni, hogy véghezvittek nagy mennyiségű munkát,

250
00:15:33,900 --> 00:15:36,720
anélkül, hogy ugyanazokon az erőfeszítéseken kelljen végigmenned saját magad.

251
00:15:37,330 --> 00:15:39,040
Ezt "proof of work"-nek hívják. (~*bizonyíték az elvégzett munkáról*, a továbbiakban "proof of work")

252
00:15:39,430 --> 00:15:44,610
És ami nagyon fontos, hogy mindez a munka elválaszthatatlanul kötve van az adott tranzakciós listához.

253
00:15:44,930 --> 00:15:48,080
Ha megmásítod az egyik tranzakciót, akár csak egy kicsit is,

254
00:15:48,080 --> 00:15:49,890
az teljesen megváltoztatná a hash-edet,

255
00:15:50,150 --> 00:15:54,200
tehát végig kellene menned egy újabb milliárd találgatáson ahhoz, hogy újra bizonyítani tudd az elvégzett munkát, azaz hogy egy újabb "proof of work"-ot találj,

256
00:15:54,200 --> 00:15:55,670
egy új számot, amely azt eredményezi,

257
00:15:55,670 --> 00:16:00,880
hogy a megváltoztatott lista hash-e ezzel az új számmal együtt 30 darab nullással kezdődjön.

258
00:16:01,530 --> 00:16:04,400
Tehát akkor most gondoljunk vissza az elosztott főkönyv helyzetére:

259
00:16:04,690 --> 00:16:07,240
mindenki ott van szórni a tranzakciókat,

260
00:16:07,240 --> 00:16:11,080
és azt szeretnénk, ha meg tudnának egyezni azon, hogy mi a helyes főkönyv.

261
00:16:11,490 --> 00:16:14,920
Ahogy mondtam, az eredeti Bitcoin tanulmány mögött megbúvó alapvető ötlet

262
00:16:14,920 --> 00:16:18,700
az, hogy mindenki abban a főkönyvben bízik meg, amelyikbe a legtöbb munkát fektették.

263
00:16:19,370 --> 00:16:23,200
Ez úgy működik, hogy először blokkokba rendezzük az adott főkönyvet,

264
00:16:23,200 --> 00:16:27,410
ahol a blokkok a tranzakciók egy listáját tartalmazzák egy "proof of work"-kel együtt,

265
00:16:27,840 --> 00:16:32,600
ami egy különleges szám, amivel az egész blokk hash-e egy csomó nullással kezdődik.

266
00:16:33,190 --> 00:16:37,280
Egy pillanatra mondjuk azt, hogy 60 darab nullással kell kezdődnie,

267
00:16:37,280 --> 00:16:41,040
de később majd vissza fogunk térni ennek a számnak a kiválasztásának egy sokkal szisztematikusabb módjára.

268
00:16:41,840 --> 00:16:46,800
Ugyanazon a módon ahogy egy tranzakciót csak akkor tekintük érvényesnek, hogy ha az alá van írva a küldő fél által,

269
00:16:46,800 --> 00:16:50,220
egy blokk csak akkor tekinthető érvényesnek, hogy ha a belefektett munkának van bizonyítéka, azaz, hogy ha érvényes "proof of work"-je.

270
00:16:51,040 --> 00:16:54,700
Továbbá ahhoz, hogy meggyőződhessünk arról, hogy szabványos sorrendben vannak ezek a blokkok,

271
00:16:54,700 --> 00:16:59,760
ahhoz bele kell tennünk minden blokk fejlécébe az előző blokk hash-ét.

272
00:17:00,150 --> 00:17:03,550
Ilyen módon, hogy ha visszamennél hogy megváltoztass egy blokkot,

273
00:17:03,550 --> 00:17:05,550
vagy hogy kicseréld két blokk sorrendjét,

274
00:17:05,890 --> 00:17:08,230
akkor az megváltoztatná azt a blokkot is, ami utána jön,

275
00:17:08,230 --> 00:17:10,010
ami megváltoztatja annak a blokknak a hash-ét,

276
00:17:10,010 --> 00:17:13,070
ami megváltoztatja a következő blokk hash-ét, és így tovább.

277
00:17:14,040 --> 00:17:16,370
Az megkövetelné azt, hogy újra elvégezzék az összes munkát,

278
00:17:16,370 --> 00:17:21,660
hogy megtaláljanak egy újabb különleges számot az összes blokknak, hogy azoknak a hash-ei is 60 darab nullással kezdődjenek.

279
00:17:22,410 --> 00:17:25,040
Mivel a blokkol ilyen módon össze vannak láncolva,

280
00:17:25,040 --> 00:17:28,800
ezért ahelyett, hogy főkönyvnek hívnánk, gyakran úgy hívjuk, hogy "blokklánc" (*blockchain*).

281
00:17:30,050 --> 00:17:31,920
A frissített protokollunk részeként,

282
00:17:31,920 --> 00:17:34,780
mostantól bárkinek megengedjük, hogy blokkokat hozhasson létre.

283
00:17:35,230 --> 00:17:38,950
Ez azt jelenti, hogy figyelni fognak a hálózatra kiszórt tranzakciókra,

284
00:17:38,950 --> 00:17:40,620
összegyűjtik őket blokkokba,

285
00:17:40,620 --> 00:17:42,110
aztán elvégeznek egy csomó munkát,

286
00:17:42,110 --> 00:17:46,400
hogy találhassanak egy különleges számot, amellyel annak a blokknak a hash-e 60 darab nullással kezdődik.

287
00:17:46,900 --> 00:17:50,210
És ha egyszer megtalálják, akkor kiszórják a talált blokkot a hálózatra.

288
00:17:50,970 --> 00:17:53,490
Ahhoz, hogy megjutalmazzuk a blokk létrehozóját mindezért a munkáért,

289
00:17:53,490 --> 00:17:55,270
amikor összerak egy blokkot,

290
00:17:55,270 --> 00:17:59,070
akkor megengedünk neki egy speciális tranzakciót a legtetején,

291
00:17:59,070 --> 00:18:02,780
amiben kap mondjuk 10 LD-t, a semmiből.

292
00:18:03,470 --> 00:18:05,230
Ezt hívjuk "blokk jutalom"-nak (*block reward*-nak),

293
00:18:05,230 --> 00:18:09,800
és ez egy kivétel a szokásos szabályainkhoz képest, amik a tranzakciók elfoadásáról szólnak.

294
00:18:10,010 --> 00:18:13,190
Nem számazik senkitől, ezért nem is kell senkinek sem aláírnia.

295
00:18:13,600 --> 00:18:19,720
És ez azt is jelenti, hogy a gazdaságunkban forgó összes "ledger dollar" száma növekszik minden egyes új blokkal.

296
00:18:20,880 --> 00:18:23,200
A blokkok létrehozását gyakran "bányászat"-nak (*mining*-nak) hívjuk,

297
00:18:23,200 --> 00:18:25,220
mivel sok munkát igényel,

298
00:18:25,220 --> 00:18:28,460
és újabb pénzdarabokat vezet be a gazdaságba.

299
00:18:29,070 --> 00:18:31,470
De amikor a bányászokról hallasz vagy olvasol,

300
00:18:31,470 --> 00:18:33,730
tartsd észben, hogy amit valójában csinálnak az az, hogy

301
00:18:33,730 --> 00:18:36,630
új tranzakciókra figyelnek, blokkokat hoznak létre,

302
00:18:36,630 --> 00:18:40,900
amiket szétszórnak a hálózaton, hogy ezért jutalmat kapjanak új pénz formájában.

303
00:18:41,940 --> 00:18:46,230
A bányászok szemszögéből minden egyes blokk olyan, mint egy kisméretű lottó,

304
00:18:46,230 --> 00:18:49,140
ahol mindenki olyan gyorsan találgat számokat, amilyen gyorsan csak tud,

305
00:18:49,140 --> 00:18:52,460
amíg egy szerencsés nem talál egy különleges számot,

306
00:18:52,460 --> 00:18:55,310
amivel a blokk hash-e sok nullással kezdődik,

307
00:18:55,310 --> 00:18:56,370
és ezért jutalmat kapnak.

308
00:18:58,040 --> 00:19:01,200
Mindenki másnak aki csak fizetésre szeretné használni a rendszert,

309
00:19:01,200 --> 00:19:03,430
ahelyett, hogy új traznakciókra figyelnének,

310
00:19:03,430 --> 00:19:07,080
elkezdenek csak a bányászok által a hálózatra szórt blokkokra figyelni,

311
00:19:07,080 --> 00:19:10,010
és frissíteni a saját személyes másolatukat a blokkláncból.

312
00:19:10,510 --> 00:19:13,320
Namost egy kulcsfontosságú kiegészítés a protokollunkhoz az,

313
00:19:13,320 --> 00:19:17,930
hogy ha két egymástól eltérő blokkláncot hallasz amiben egymással ellentmondó tranzkciós történet szerepel,

314
00:19:18,310 --> 00:19:22,350
akkor a leghosszabbat követed, azt, ameybe a legtöbb munkát fektették.

315
00:19:22,900 --> 00:19:27,930
Ha holtverseny alakulna ki, akkor csak várnod kell addig, amíg nem hallasz egy újabb blokkot, amitől az egyik hosszabb lesz.

316
00:19:28,720 --> 00:19:33,910
Szóval annak ellenére, hogy nincs központi hatóság és mindenki a saját blokklánc példányát tartja karban,

317
00:19:34,180 --> 00:19:39,260
ha mindenki megegyezik abban, hogy azt a blokkláncot részesítik előnyben, amelybe a legtöbb munkát fektették,

318
00:19:39,660 --> 00:19:42,980
akkor ezzel lett egy módszerünk arra, hogy eljussunk a decentralizált konszenzushoz.

319
00:19:43,640 --> 00:19:45,840
Ahhoz, hogy lássuk hogy miért lesz ettől megbízható ez a rendszer,

320
00:19:45,840 --> 00:19:49,450
és hogy megértsük hogy melyik ponttól kezdve tekintheted megbízhatónak azt, hogy egy fizetés legitim,

321
00:19:49,450 --> 00:19:55,070
ahhoz valójában nagyon hasznos az, ha végigmegyünk azon, hogy pontosan mi szükségeltetik ahhoz, hogy becsapjunk valakit ebben a rendszerben.

322
00:19:55,650 --> 00:19:58,690
Talán Alice meg szeretné próbálni becsapni Bobot egy csalárd blokkal,

323
00:19:59,030 --> 00:20:04,080
azaz megpróbál küldeni neki egy olyat amiben fizet neki 100 LD-t,

324
00:20:04,420 --> 00:20:07,260
anélkül, hogy azt a blokkot kiszórta volna a hálózat többi résztvevőjének.

325
00:20:07,620 --> 00:20:11,440
Ilyen módon a mindenki más még mindig azt hiszi, hogy megvan neki az a 100 LD.

326
00:20:12,150 --> 00:20:17,250
Ahhoz, hogy ezt megtegye, ahhoz találnia kell egy érvényes "proof of work"-öt mindenki más előtt,

327
00:20:17,250 --> 00:20:18,860
akik a saját blokkjukon dolgoznak.

328
00:20:19,410 --> 00:20:20,990
És ez biztosan megtörténhet!

329
00:20:20,990 --> 00:20:24,980
Talán épp úgy adódik hogy Alice megnyeri ezt a mini-lottót mindenki más előtt.

330
00:20:25,680 --> 00:20:29,770
De Bob még mindig hallani fogja azokat, amiket többiek kiszórnak,

331
00:20:30,080 --> 00:20:32,640
tehát ahhoz, hogy továbbra is elhitethessük vele ezt a csalárd blokkot,

332
00:20:32,640 --> 00:20:35,440
Alicenak egymagának kellene elvégeznie az összes munkát

333
00:20:35,440 --> 00:20:39,440
ahhoz, hogy továbbras is tudjon blokkokat hozzáadni Bob blokkláncának ezen speciális elágazásán.

334
00:20:39,440 --> 00:20:42,330
Ez különbözik attól, amit a többi bányásztól hall.

335
00:20:42,720 --> 00:20:48,400
Emlékezz, hogy a protokoll szerint Bob mindig a leghosszabb láncban bízik meg, amiről tudomása van.

336
00:20:49,230 --> 00:20:51,960
Alice talán tudja ezt folytatni néhány blokk erejéig,

337
00:20:51,960 --> 00:20:55,140
ha, pusztán szerence alapon, hamarabb találja meg a blokkokat,

338
00:20:55,140 --> 00:20:58,050
mint az összes többi bányász a hálózaton együttvéve.

339
00:20:58,560 --> 00:21:03,710
De hacsak nincs közel 50%-os számítási erőforrása az összes többi bányász között,

340
00:21:04,080 --> 00:21:06,570
elsöprővé válik annak a valószinűsége,

341
00:21:06,570 --> 00:21:09,650
hogy az a blokklánc, amin az összes többi bányász dolgozik

342
00:21:09,650 --> 00:21:14,190
az gyorsabban növekedjen, mint az egyedüli csalárd blokklánc, amivel Alice eteti Bobot.

343
00:21:15,200 --> 00:21:19,820
Így kellő idővel után Bob csak el fogja utasítani azt, amit Alice-tól hall

344
00:21:19,820 --> 00:21:23,100
a hosszabb blokklánc javára, amelyen mindenki más is dolgozik.

345
00:21:24,020 --> 00:21:29,250
Figyeld meg, hogy ez azt jelenti, hogy nem feltétlenül bízhatsz meg azonnal egy új blokkban, amelyet hallasz;

346
00:21:29,620 --> 00:21:33,420
ehelyett érdemes várnod hogy néhány új blokk épüljön rá.

347
00:21:33,890 --> 00:21:36,610
Ha továbbra sem hallasz semmilyen hosszabb blokk láncolatról,

348
00:21:36,610 --> 00:21:40,860
akkor megbízhatsz abban, hogy ez a blokk ugyanannak a láncnak a része, amelyet mindenki más is használ.

349
00:21:42,250 --> 00:21:45,520
És ezzel meg is valósítottuk az fő ötleteinket.

350
00:21:45,850 --> 00:21:49,190
Ez, az "elvégzett munka bizonyítékára" (*proof of work*-re) épülő az elosztott főkönyv rendszer

351
00:21:49,190 --> 00:21:53,810
ez többé-kevésbé az ahogyan a Bitcoin protokoll és a legtöbb kriptopénz működik.

352
00:21:54,260 --> 00:21:56,280
Vanegy pár apróság amit tisztáznunk kell.

353
00:21:56,280 --> 00:21:59,480
Korábban azt mondtam, hogy a "proof of work" lehet az, hogy találni kell egy speciális számot,

354
00:21:59,480 --> 00:22:02,830
amivel a blokk hash-e 60 darab nullával kezdődik.

355
00:22:03,210 --> 00:22:08,400
Nos, a Bitcoin protokoll valójában úgy működik, hogy időközönként megváltoztatják a nullák számát,

356
00:22:08,400 --> 00:22:12,080
hogy így átlagosan 10 perc szükségeltessen ahhoz, hogy megtaláljanak egy új blokkot.

357
00:22:12,800 --> 00:22:15,730
Tehát ahogy egyre több bányász csatlakozik a hálózatra,

358
00:22:16,010 --> 00:22:18,230
úgy egyre nagyobb lesz a kihivás,

359
00:22:18,230 --> 00:22:23,170
olyan módon, hogy ennek a mini-lottónak 10 percenként átlagosan egyetlen nyertese lehessen.

360
00:22:23,950 --> 00:22:28,080
Számos újabb kriptopénz valójában ennél sokkal rövidebb blokkidőkkel rendelkeznek.

361
00:22:28,660 --> 00:22:32,770
És végső soron minden pénzegység a Bitcoinban valamilyen blokk jutalomból származik.

362
00:22:33,030 --> 00:22:35,890
A kezdetben ez a jutalom 50 bitcoin volt blokkonként.

363
00:22:36,190 --> 00:22:39,380
Igazából van egy nagyszerű weboldal amit "Block Explorer"-nek hívnak,

364
00:22:39,380 --> 00:22:41,760
ami segít átlátni a Bitcoin blokkláncot.

365
00:22:41,990 --> 00:22:45,030
És hogy ha megnézed az első néhány blokkot a láncon, akkor azt láthatod, hogy

366
00:22:45,030 --> 00:22:49,520
nincs benne más tranzakció mint az 50 bitcoinos jutalom a bányásznak.

367
00:22:49,970 --> 00:22:54,800
De minden 210 000-ik blokknál, ami nagyjából 4 évente van,

368
00:22:54,800 --> 00:22:56,890
ez a jutalom megfeleződik.

369
00:22:56,890 --> 00:23:00,390
Tehát a jutalom most 12,5 bitcoin blokkonként.

370
00:23:00,740 --> 00:23:04,340
És mivel ez a jutalom geometrikusan csökken az idő múlásával,

371
00:23:04,710 --> 00:23:09,750
ez azt jelenti, hogy soha nem fog több mint 21 000 000 Bitcoin létezni.

372
00:23:10,450 --> 00:23:13,520
Ez azonban nem jelenti azt, hogy a bányászok egyszercsak nem fognak több pénzt keresni.

373
00:23:13,950 --> 00:23:18,230
A blokk jutalom mellett a bányászok a tranzakciós díjakat is megkaphatják.

374
00:23:18,500 --> 00:23:20,970
Ez úgy működik, hogy amikor csak fizetni szeretnél,

375
00:23:20,970 --> 00:23:24,700
tisztán opcionálisan hozzáadhatsz vele együtt egy kis tranzakciós költséget,

376
00:23:24,700 --> 00:23:28,620
ami annak a bányásznak fog menni, aki kibányássza azt a blokkot, amiben a te tranzakciód is van.

377
00:23:29,320 --> 00:23:32,100
Ezt azzal az indokkal tennéd meg, hogy ösztönözd a bányászokat,

378
00:23:32,100 --> 00:23:36,080
hogy valóban adják hozzá a következő blokkban azt a tranzakciót, amit kiküldtél a hálózatra.

379
00:23:36,420 --> 00:23:42,080
Látod, a Bitcoinban minden blokk körülbelül 2400 tranzakcióra van limitálva,

380
00:23:42,080 --> 00:23:45,380
amelyet sokan kritikus vitat, hogy szükségtelenül korlátozó.

381
00:23:45,970 --> 00:23:51,740
Összehasonlításképpen a VISA átlagosan körülbelül 1700 tranzakciót dolgoz fel másodpercenként,

382
00:23:51,740 --> 00:23:55,510
és összesen 24 000-et is képesek kezelni másodpercenként.

383
00:23:56,240 --> 00:24:01,390
A Bitcoinnak ez a viszonylag lassú feldolgozása magasabb tranzakciós költségeket eredményez,

384
00:24:01,390 --> 00:24:06,410
hiszen ez az ami eldönti, hogy mely tranzakciókat választják a bányászok hogy belerakják egy új blokkba.

385
00:24:08,160 --> 00:24:12,140
Mindez messze nem fedi le olyan széleskörűen a kriptopénzeket;

386
00:24:12,140 --> 00:24:16,400
még mindig vannak olyan árnyalatok és alternatív tervezési lehetőségek, amelyeket még nem is érintettem.

387
00:24:16,720 --> 00:24:21,550
De az abban reménykedem, hogy ezzel tudtam adni egy stabil "várj, de miért?" szerű megértéshez egy vázat

388
00:24:21,550 --> 00:24:24,710
bárkinek, aki további olvasással szerteágazóbban utánanézne.

389
00:24:25,250 --> 00:24:26,280
Ahogy az elején mondtam,

390
00:24:26,280 --> 00:24:31,170
az egyik motiváció emögött az, hogy sok pénz kezdett áramlani a kriptopénzek felé.

391
00:24:31,370 --> 00:24:35,090
És habár nem szeretnék állást foglalni abban, hogy ez egy jó vagy rossz befektetés-e vagy sem,

392
00:24:35,330 --> 00:24:38,210
én valóban azt gondolom, hogy egészséges azoknak az embereknek a számára akik belefolynak a játékba,

393
00:24:38,210 --> 00:24:40,720
hogy legalább ismerjék a technológia alapjait.

