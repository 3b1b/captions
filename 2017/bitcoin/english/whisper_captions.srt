1
00:00:03,900 --> 00:00:09,640
What does it mean to have a Bitcoin? Many people have heard of Bitcoin, that it's

2
00:00:09,640 --> 00:00:14,140
a fully digital currency with no government to issue it, that no banks need to manage

3
00:00:14,140 --> 00:00:19,740
accounts and verify transactions, and that no one really knows who invented it. And yet

4
00:00:19,740 --> 00:00:25,040
many people don't know the answer to this question, at least not in full. To get there,

5
00:00:25,080 --> 00:00:29,300
and to make sure that the technical details underlying the answer actually feel motivated,

6
00:00:29,820 --> 00:00:34,660
we're going to walk through, step by step, how you might have invented your own version

7
00:00:34,660 --> 00:00:38,900
of Bitcoin. We'll start with you keeping track of payments with your friends using

8
00:00:38,900 --> 00:00:43,680
a communal ledger, and then as you start to trust your friends and the world around you

9
00:00:43,680 --> 00:00:47,900
less and less, and if you're clever enough to bring in a few ideas from cryptography

10
00:00:47,900 --> 00:00:52,700
to help circumvent the need for trust, what you end up with is what's called a cryptocurrency.

11
00:00:53,840 --> 00:01:00,020
Bitcoin is just the first implemented example of a cryptocurrency, and now there are thousands

12
00:01:00,020 --> 00:01:05,140
more on exchanges with traditional currencies. Walking the path of inventing your own can

13
00:01:05,140 --> 00:01:09,060
help to set the foundations for understanding some of the more recent players in the game,

14
00:01:09,480 --> 00:01:14,700
and recognizing when and why there's room for different design choices. In fact, one

15
00:01:14,700 --> 00:01:18,580
of the reasons I chose this topic is that in the last year there's been a huge amount

16
00:01:18,580 --> 00:01:25,240
of attention, investment, and hype directed at these currencies. I'm not going to comment

17
00:01:25,240 --> 00:01:29,700
or speculate on the current or future exchange rates, but I think we'd all agree that anyone

18
00:01:29,700 --> 00:01:34,760
looking to buy a cryptocurrency should really know what it is. And I don't just mean in

19
00:01:34,760 --> 00:01:40,260
terms of analogies with vague connections to gold mining, I mean an actual direct description

20
00:01:40,260 --> 00:01:45,220
of what the computers are doing when we send, receive, and create cryptocurrencies.

21
00:01:46,300 --> 00:01:51,440
One thing worth stressing is that even though you and I are going to dig into the details

22
00:01:51,440 --> 00:01:56,380
here, and that takes meaningful time, you don't actually need to know those details

23
00:01:56,380 --> 00:02:00,600
if you just want to use the cryptocurrency, just like you don't need to know the details

24
00:02:00,600 --> 00:02:05,300
of what happens under the hood when you swipe a credit card. Like any digital payment, there's

25
00:02:05,300 --> 00:02:09,740
lots of user-friendly applications that let you just send and receive the currencies without

26
00:02:09,740 --> 00:02:15,260
thinking about what's going on. The difference is that the backbone underlying this is not

27
00:02:15,260 --> 00:02:20,840
a bank that verifies transactions, instead it's a clever system of decentralized trustless

28
00:02:20,840 --> 00:02:24,480
verification based on some of the math born in cryptography.

29
00:02:25,900 --> 00:02:29,440
But to start I want you to actually set aside the thought of cryptocurrencies and all that

30
00:02:29,440 --> 00:02:33,280
just for a few minutes. We're going to begin the story with something more down to earth,

31
00:02:33,720 --> 00:02:38,680
ledgers and digital signatures. If you and your friends exchange money pretty frequently,

32
00:02:39,160 --> 00:02:43,660
paying your share of the dinner bill and such, it can be inconvenient to exchange cash all

33
00:02:43,660 --> 00:02:48,760
the time. So you might keep a communal ledger that records all the payments you intend to

34
00:02:48,760 --> 00:02:54,520
make at some point in the future. Alice pays Bob $20, Bob pays Charlie $40, things like

35
00:02:54,520 --> 00:02:59,280
that. This ledger is going to be something public and accessible to everyone, like a

36
00:02:59,280 --> 00:03:04,220
website where anyone can go and add new lines. And let's say at the end of every month

37
00:03:04,220 --> 00:03:08,920
you all get together, look at the list of transactions, and settle up. If you spent

38
00:03:08,920 --> 00:03:12,660
more than you received, you put that money in the pot, and if you received more than

39
00:03:12,660 --> 00:03:17,760
you spent, you take that money out. So the protocol for being part of this very simple

40
00:03:17,760 --> 00:03:23,180
system might look like this. Anyone can add lines to the ledger, and at the end of every

41
00:03:23,180 --> 00:03:28,360
month you all get together and settle up. Now one problem with a public ledger like

42
00:03:28,360 --> 00:03:33,980
this is that anyone can add a line. So what's to prevent Bob from going and writing Alice

43
00:03:33,980 --> 00:03:40,040
pays Bob $100 without Alice approving? How are we supposed to trust that all of these

44
00:03:40,040 --> 00:03:45,980
transactions are what the sender meant them to be? Well this is where the first bit of

45
00:03:45,980 --> 00:03:51,780
cryptography comes in, digital signatures. Like handwritten signatures, the idea here

46
00:03:51,780 --> 00:03:56,580
is that Alice should be able to add something next to that transaction that proves that

47
00:03:56,580 --> 00:04:01,300
she has seen it and that she's approved of it, and it should be infeasible for anyone

48
00:04:01,300 --> 00:04:07,760
else to forge that signature. At first, it might seem like a digital signature shouldn't

49
00:04:07,760 --> 00:04:13,120
even be possible. I mean, whatever data makes up that signature can just be read and copied

50
00:04:13,120 --> 00:04:19,440
by a computer. So how do you prevent forgeries? Well the way this works is that everyone generates

51
00:04:19,440 --> 00:04:24,160
what's called a public key-private key pair, each of which looks like some string of bits.

52
00:04:24,800 --> 00:04:29,160
The private key is sometimes also called a secret key, so we can abbreviate it as SK

53
00:04:29,160 --> 00:04:35,020
while abbreviating the public key as PK. As the name suggests, this secret key is something

54
00:04:35,020 --> 00:04:39,700
you want to keep to yourself. In the real world, your handwritten signature looks the

55
00:04:39,700 --> 00:04:44,640
same no matter what document you're signing. But a digital signature is actually much stronger,

56
00:04:45,020 --> 00:04:50,740
because it changes for different messages. It looks like some string of 1s and 0s, commonly

57
00:04:50,740 --> 00:04:57,020
something like 256 bits, and altering the message even slightly completely changes what

58
00:04:57,020 --> 00:05:03,220
the signature on that message should look like. Speaking a little more formally, producing

59
00:05:03,220 --> 00:05:08,240
a signature involves a function that depends both on the message itself and on your private

60
00:05:08,240 --> 00:05:13,600
key. The private key ensures that only you can produce that signature, and the fact that

61
00:05:13,600 --> 00:05:18,420
it depends on the message means that no one can just copy one of your signatures and forge

62
00:05:18,420 --> 00:05:24,580
it on another message. Hand-in-hand with this is a second function used to verify that a

63
00:05:24,580 --> 00:05:29,980
signature is valid, and this is where the public key comes into play. All it does is

64
00:05:29,980 --> 00:05:35,160
output true or false to indicate if this was a signature produced by the private key associated

65
00:05:35,160 --> 00:05:40,640
with the public key you're using for verification. I won't go into the details of how exactly

66
00:05:40,640 --> 00:05:45,800
both these functions work, but the idea is that it should be completely infeasible to

67
00:05:45,800 --> 00:05:51,320
find a valid signature if you don't know the secret key. Specifically, there's no

68
00:05:51,320 --> 00:05:56,060
strategy better than just guessing and checking random signatures, which you can check using

69
00:05:56,060 --> 00:06:00,780
the public key that everyone knows. Now think about how many signatures there

70
00:06:00,780 --> 00:06:09,100
are with a length of 256 bits. That's 2 to the power of 256! This is a stupidly large

71
00:06:09,100 --> 00:06:13,640
number. To call it astronomically large would be giving way too much credit to astronomy.

72
00:06:14,260 --> 00:06:19,320
In fact, I made a supplemental video devoted just to illustrating what a huge number this

73
00:06:19,320 --> 00:06:24,200
is. Right here, let's just say that when you verify that a signature against a given

74
00:06:24,200 --> 00:06:29,920
message is valid, you can feel extremely confident that the only way someone could have produced

75
00:06:29,920 --> 00:06:35,040
it is if they knew the secret key associated with the public key you used for verification.

76
00:06:37,120 --> 00:06:41,820
Making sure people sign transactions on the ledger is pretty good, but there's one slight

77
00:06:41,820 --> 00:06:48,020
loophole. If Alice signs a transaction like Alice pays Bob $100, even though Bob can't

78
00:06:48,020 --> 00:06:53,100
forge Alice's signature on a new message, he could just copy that same line as many times

79
00:06:53,100 --> 00:06:59,600
as he wants. That message-signature combination remains valid. To get around this, we make

80
00:06:59,600 --> 00:07:04,680
it so that when you sign a transaction, the message has to include some sort of unique

81
00:07:04,680 --> 00:07:11,240
ID associated with that transaction. That way, if Alice pays Bob $100 multiple times,

82
00:07:11,720 --> 00:07:15,380
each one of those lines on the ledger requires a completely new signature.

83
00:07:16,760 --> 00:07:22,700
Great, digital signatures remove a huge aspect of trust in this initial protocol. But even

84
00:07:22,700 --> 00:07:27,280
still, if you were to really do this, you would be relying on an honor system of sorts.

85
00:07:27,720 --> 00:07:31,560
Namely, you're trusting that everyone will actually follow through and settle up in cash

86
00:07:31,560 --> 00:07:37,220
at the end of each month. What if, for example, Charlie racks up thousands of dollars in debt

87
00:07:37,220 --> 00:07:43,260
and just refuses to show up? The only real reason to revert back to cash to settle up

88
00:07:43,260 --> 00:07:50,760
is if some people owe a lot of money. So maybe you have the clever idea that you never actually

89
00:07:50,760 --> 00:07:55,260
have to settle up in cash as long as you have some way to prevent people from spending too

90
00:07:55,260 --> 00:08:01,140
much more than they take in. Maybe you start by having everyone pay $100 into the pot,

91
00:08:01,600 --> 00:08:06,960
and then have the first few lines of the ledger read Alice gets $100, Bob gets $100, Charlie

92
00:08:06,960 --> 00:08:13,940
gets $100, etc. Now, just don't accept any transactions where someone is spending more

93
00:08:13,940 --> 00:08:19,840
than they already have on that ledger. For example, if the first two transactions are

94
00:08:19,840 --> 00:08:26,460
Charlie pays Alice $50 and Charlie pays Bob $50, if he were to try to add Charlie pays

95
00:08:26,460 --> 00:08:33,660
you $20, that would be invalid, as invalid as if he had never signed it. Notice, this

96
00:08:33,660 --> 00:08:39,040
means verifying a transaction requires knowing the full history of transactions up to that

97
00:08:39,040 --> 00:08:45,960
point. This is also going to be true in cryptocurrencies, though there is a little room for optimization.

98
00:08:48,380 --> 00:08:53,040
What's interesting here is that this step removes the connection between the ledger

99
00:08:53,040 --> 00:08:59,220
and actual physical US dollars. In theory, if everyone in the world was using this ledger,

100
00:08:59,220 --> 00:09:03,860
you could live your whole life just sending and receiving money on this ledger without

101
00:09:03,860 --> 00:09:09,200
ever having to convert to real US dollars. In fact, to emphasize this point, let's

102
00:09:09,200 --> 00:09:15,140
start referring to the quantities on the ledger as ledger dollars, or LD for short. You are

103
00:09:15,140 --> 00:09:20,240
of course free to exchange ledger dollars for real US dollars. For example, maybe Alice

104
00:09:20,240 --> 00:09:25,640
gives Bob a $10 bill in the real world in exchange for him adding and signing the transaction

105
00:09:25,640 --> 00:09:32,900
$10 Bob pays Alice $10 to this communal ledger. But exchanges like that are not guaranteed

106
00:09:33,380 --> 00:09:38,300
by the protocol. It's now more analogous to how you might exchange dollars for Euros

107
00:09:38,300 --> 00:09:43,800
or any other currency on the open market. It's just its own independent thing.

108
00:09:44,580 --> 00:09:49,780
This is the first important thing to understand about Bitcoin, or any other cryptocurrency.

109
00:09:49,780 --> 00:09:58,180
What it is, is a ledger. The history of transactions is the currency. Of course, with Bitcoin,

110
00:09:58,540 --> 00:10:02,740
money doesn't enter the ledger with people buying in using cash. I'll get to how new

111
00:10:02,740 --> 00:10:07,340
money enters the ledger in just a few minutes. But before that, there's actually an even

112
00:10:07,340 --> 00:10:11,800
more significant difference between our current system of ledger dollars and how cryptocurrencies

113
00:10:11,800 --> 00:10:17,100
work. So far, I've said that this ledger is in some public place, like a website where

114
00:10:17,100 --> 00:10:23,320
anyone can add new lines. But that would require trusting a central location, namely, who hosts

115
00:10:23,320 --> 00:10:29,520
the website, who controls the rules of adding new lines. To remove that bit of trust, we'll

116
00:10:29,520 --> 00:10:34,240
have everybody keep their own copy of the ledger. Then when you want to make a transaction,

117
00:10:34,540 --> 00:10:41,300
like Alice pays Bob $100, you broadcast that out into the world for people to hear and

118
00:10:41,300 --> 00:10:43,420
to record on their own private ledgers.

119
00:10:44,840 --> 00:10:50,700
But unless you do something more, this system is absurdly bad. How could you get everyone

120
00:10:50,700 --> 00:10:55,940
to agree on what the right ledger is? When Bob receives a transaction, like Alice pays

121
00:10:55,940 --> 00:11:01,680
Bob $10, how can he be sure that everyone else received and believes that same transaction?

122
00:11:02,340 --> 00:11:07,200
That he'll be able to later on go to Charlie and use those same $10 to make a transaction?

123
00:11:08,240 --> 00:11:13,400
Really, imagine yourself just listening to transactions being broadcast. How can you

124
00:11:13,400 --> 00:11:18,220
be sure that everyone else is recording the same transactions and in the same order?

125
00:11:19,420 --> 00:11:24,160
This is really the heart of the issue. This is an interesting puzzle. Can you come up

126
00:11:24,160 --> 00:11:29,880
with a protocol for how to accept or reject transactions, and in what order, so that you

127
00:11:29,880 --> 00:11:34,320
can feel confident that anyone else in the world who's following that same protocol

128
00:11:34,320 --> 00:11:40,180
has a personal ledger that looks the same as yours? This is the problem addressed in

129
00:11:40,180 --> 00:11:46,580
the original Bitcoin paper. At a high level, the solution that Bitcoin

130
00:11:46,580 --> 00:11:52,740
offers is to trust whichever ledger has the most computational work put into it. I'll

131
00:11:52,740 --> 00:11:58,120
take a moment to explain exactly what that means. It involves a cryptographic hash function.

132
00:11:58,460 --> 00:12:03,740
The general idea that we'll build to is that if you use computational work as a basis

133
00:12:03,740 --> 00:12:08,460
for what to trust, you can make it so that fraudulent transactions and conflicting ledgers

134
00:12:08,460 --> 00:12:14,180
require an infeasible amount of computation to bring about. Again, I'll remind you that

135
00:12:14,180 --> 00:12:18,380
this is getting well into the weeds beyond what anyone would need to know just to use

136
00:12:18,380 --> 00:12:23,880
a currency like this. But it's a really cool idea, and if you understand it, you understand

137
00:12:23,880 --> 00:12:29,940
the heart of Bitcoin and other cryptocurrencies. So first things first, what's a hash function?

138
00:12:30,800 --> 00:12:37,740
The inputs for one of these functions can be any kind of message or file, it really

139
00:12:37,740 --> 00:12:45,680
looks like 256 bits. This output is called the hash or digest of the message, and the

140
00:12:45,680 --> 00:12:50,860
intent is that it looks random. It's not random, it always gives the same output for

141
00:12:50,860 --> 00:12:56,200
a given input. But the idea is that if you slightly change the input, maybe editing just

142
00:12:56,200 --> 00:13:02,220
one of the characters, the resulting hash changes completely. In fact, for the hash

143
00:13:02,220 --> 00:13:08,200
function I'm showing here, called SHA256, the way the output changes as you slightly

144
00:13:08,200 --> 00:13:14,640
change that input is entirely unpredictable. You see, this is not just any hash function,

145
00:13:14,980 --> 00:13:19,820
it's a cryptographic hash function. That means it's infeasible to compute in the

146
00:13:19,820 --> 00:13:25,420
reverse direction. If I show you some string of 1s and 0s and ask you to find an input

147
00:13:25,420 --> 00:13:36,140
to the SHA256 hash, you'll have no better method than to just guess and check. And again,

148
00:13:36,440 --> 00:13:41,780
if you want to feel for how much computation would be needed to go through 256 guesses,

149
00:13:42,180 --> 00:13:46,300
just take a look at the supplement video. I actually had way too much fun writing that

150
00:13:46,300 --> 00:13:51,040
thing. You might think that if you just really dig

151
00:13:51,040 --> 00:13:55,700
into the details of how exactly this function works, you could reverse engineer the appropriate

152
00:13:55,700 --> 00:14:00,840
input without having to guess and check. But no one has ever figured out a way to do that.

153
00:14:01,600 --> 00:14:06,440
Interestingly, there's no cold hard rigorous proof that it's hard to compute in the reverse

154
00:14:06,440 --> 00:14:12,360
direction. And yet, a huge amount of modern security depends on cryptographic hash functions

155
00:14:12,360 --> 00:14:17,040
and the idea that they have this property. If you were to look at what algorithms underlie

156
00:14:17,040 --> 00:14:21,080
the secure connection that your browser is making with YouTube right now, or that it

157
00:14:21,080 --> 00:14:25,840
makes with your bank, you'll likely see the name SHA256 show up in there.

158
00:14:27,340 --> 00:14:32,420
For right now, our focus will be on how such a function can prove that a particular list

159
00:14:32,420 --> 00:14:38,740
of transactions is associated with a large amount of computational effort. Imagine someone

160
00:14:38,740 --> 00:14:43,540
shows you a list of transactions, and they say, hey, I found a special number so that

161
00:14:43,540 --> 00:14:48,760
when you put that number at the end of this list of transactions, and apply SHA256 to

162
00:14:48,760 --> 00:14:54,920
the entire thing, the first 30 bits of that output are all zeros. How hard do you think

163
00:14:54,920 --> 00:15:00,220
it was for them to find that number? Well, for a random message, the probability

164
00:15:00,220 --> 00:15:06,420
that a hash happens to start with 30 successive zeros is 1 in 2 to the 30, which is about

165
00:15:06,420 --> 00:15:13,520
1 in a billion. And because SHA256 is a cryptographic hash function, the only way to find a special

166
00:15:13,520 --> 00:15:18,800
number like that is just guessing and checking. So this person almost certainly had to go

167
00:15:18,800 --> 00:15:22,380
through about a billion different numbers before finding this special one.

168
00:15:23,380 --> 00:15:27,540
And once you know that number, it's really quick to verify, you just run the hash and

169
00:15:27,540 --> 00:15:31,920
see that there are 30 zeros. So in other words, you can verify that they

170
00:15:31,920 --> 00:15:36,400
went through a large amount of work, but without having to go through that same effort yourself.

171
00:15:37,200 --> 00:15:42,840
This is called a proof of work. And importantly, all of this work is intrinsically tied to

172
00:15:42,840 --> 00:15:48,320
the list of transactions. If you change one of those transactions, even slightly, it would

173
00:15:48,320 --> 00:15:51,720
completely change the hash. So you'd have to go through another billion

174
00:15:51,720 --> 00:15:56,820
guesses to find a new proof of work, a new number that makes it so that the hash of the

175
00:15:56,820 --> 00:16:00,600
altered list together with this new number starts with 30 zeros.

176
00:16:01,500 --> 00:16:06,020
So now think back to our distributed ledger situation. Everyone is there broadcasting

177
00:16:06,020 --> 00:16:12,820
transactions and we want a way for them to agree on what the correct ledger is. As I

178
00:16:12,820 --> 00:16:16,640
mentioned, the idea behind the original Bitcoin paper is to have everyone trust whichever

179
00:16:16,640 --> 00:16:21,340
ledger has the most work put into it. The way this works is to first organize a

180
00:16:21,340 --> 00:16:26,220
given ledger into blocks, where each block consists of a list of transactions together

181
00:16:26,220 --> 00:16:31,220
with a proof of work. That is, a special number so that the hash of the whole block starts

182
00:16:31,220 --> 00:16:34,880
with a bunch of zeros. For the moment, let's say it has to start

183
00:16:34,880 --> 00:16:42,760
with 60 zeros, but later we'll return back to a more systematic way you might want to

184
00:16:45,020 --> 00:16:49,000
change. A block is only considered valid if it has

185
00:16:49,000 --> 00:16:53,340
a proof of work. Also, to make sure there's a standard order

186
00:16:53,340 --> 00:16:58,400
to these blocks, we'll make it so that a block has to contain the hash of the previous

187
00:16:58,400 --> 00:17:03,320
block at its header. That way, if you were to go back and change any one of the blocks,

188
00:17:03,580 --> 00:17:08,440
or to swap the order of two blocks, it would change the block that comes after it, which

189
00:17:08,440 --> 00:17:13,380
changes the block's hash, which changes the one that comes after it, and so on.

190
00:17:13,980 --> 00:17:18,420
That would require redoing all of the work, finding a new special number for each of these

191
00:17:18,420 --> 00:17:21,420
blocks that makes their hashes start with 60 zeros.

192
00:17:22,440 --> 00:17:27,100
Because blocks are chained together like this, instead of calling it a ledger, it's common

193
00:17:27,100 --> 00:17:32,200
to call it a blockchain. As part of our updated protocol, we'll now

194
00:17:32,200 --> 00:17:36,680
allow anyone in the world to be a block creator. What that means is that they're going to

195
00:17:36,680 --> 00:17:41,240
listen for transactions being broadcast, collect them into some block, and then do

196
00:17:41,240 --> 00:17:45,380
a whole bunch of work to find a special number that makes the hash of that block start with

197
00:17:45,380 --> 00:17:49,200
60 zeros. Once they find it, they broadcast out the block

198
00:17:49,200 --> 00:17:53,140
they found. To reward a block creator for all this work,

199
00:17:53,580 --> 00:17:57,840
when she puts together a block, we'll allow her to include a very special transaction

200
00:17:57,840 --> 00:18:02,540
at the top of it, in which she gets, say, 10 ledger dollars out of thin air.

201
00:18:03,080 --> 00:18:07,900
This is called the block reward, and it's an exception to our usual rules about whether

202
00:18:07,900 --> 00:18:12,340
or not to accept transactions. It doesn't come from anyone, so it doesn't have to

203
00:18:12,340 --> 00:18:15,820
be signed. It also means that the total number of ledger

204
00:18:15,820 --> 00:18:19,620
dollars in our economy increases with each new block.

205
00:18:20,900 --> 00:18:26,020
Creating blocks is often called mining, since it requires doing a lot of work, and it introduces

206
00:18:26,020 --> 00:18:31,620
new bits of currency into the economy. But when you hear or read about miners, keep

207
00:18:31,620 --> 00:18:36,120
in mind that what they're really doing is listening for transactions, creating blocks,

208
00:18:36,700 --> 00:18:40,940
broadcasting those blocks, and getting rewarded with new money for doing so.

209
00:18:41,780 --> 00:18:46,840
From the miners' perspective, each block is like a miniature lottery, where everyone

210
00:18:46,840 --> 00:18:52,280
is guessing numbers as fast as they can, until one lucky individual finds a special number

211
00:18:52,280 --> 00:18:56,140
that makes the hash of the block start with many zeros, and they get the reward.

212
00:18:57,620 --> 00:19:02,020
For anyone else who just wants to use this system to make payments, instead of listening

213
00:19:02,020 --> 00:19:06,620
for transactions, they all start listening just for blocks being broadcast by miners,

214
00:19:07,160 --> 00:19:09,600
and updating their own personal copies of the blockchain.

215
00:19:10,560 --> 00:19:15,980
Now the key addition to our protocol is that if you hear two distinct blockchains with

216
00:19:15,980 --> 00:19:21,080
conflicting transaction histories, you defer to the longest one, the one with the most

217
00:19:21,080 --> 00:19:26,660
work put into it. If there's a tie, just wait until you hear an additional block that

218
00:19:26,660 --> 00:19:30,580
makes one of them longer. So even though there's no central authority,

219
00:19:30,980 --> 00:19:35,640
and everyone is maintaining their own copy of the blockchain, if everyone agrees to give

220
00:19:35,640 --> 00:19:40,860
preference to whichever blockchain has the most work put into it, we have a way to arrive

221
00:19:40,860 --> 00:19:45,560
at decentralized consensus. To see why this makes for a trustworthy system,

222
00:19:45,860 --> 00:19:49,920
and to understand at what point you should trust that a payment is legit, it's actually

223
00:19:49,920 --> 00:19:54,680
really helpful to walk through exactly what it would take to fool someone using this system.

224
00:19:55,600 --> 00:20:00,820
Maybe Alice is trying to fool Bob with a fraudulent block, namely she tries to send him one that

225
00:20:00,820 --> 00:20:06,200
includes her paying him 100 Ledger dollars, but without broadcasting that block to the

226
00:20:06,200 --> 00:20:11,240
rest of the network, that way everyone else still thinks she has those 100 Ledger dollars.

227
00:20:11,960 --> 00:20:16,960
To do this, she would have to find a valid proof of work before all the other miners,

228
00:20:16,960 --> 00:20:21,840
each working on their own block. And that could definitely happen, maybe Alice just

229
00:20:21,840 --> 00:20:24,820
happens to win this miniature lottery before everyone else.

230
00:20:25,680 --> 00:20:31,120
But Bob is still going to be hearing the broadcasts made by other miners, so to keep him believing

231
00:20:31,120 --> 00:20:36,480
this fraudulent block, Alice would have to do all the work herself to keep adding blocks

232
00:20:36,480 --> 00:20:40,840
on this special fork in Bob's blockchain that's different from what he's hearing

233
00:20:40,840 --> 00:20:45,600
from the rest of the miners. Remember, as per the protocol, Bob always

234
00:20:45,600 --> 00:20:51,220
trusts the longest chain he knows about. Alice might be able to keep this up for a

235
00:20:51,220 --> 00:20:56,320
few blocks if just by chance she finds blocks more quickly than the rest of the miners on

236
00:20:56,320 --> 00:21:01,360
the network all combined. But unless she has close to 50% of the computing

237
00:21:01,360 --> 00:21:07,540
resources among all of the miners, the probability becomes overwhelming that the blockchain that

238
00:21:07,540 --> 00:21:12,420
all the other miners are working on grows faster than the single fraudulent blockchain

239
00:21:12,420 --> 00:21:18,300
Alice is feeding to Bob. So after enough time, Bob will just reject

240
00:21:18,300 --> 00:21:22,500
what he's hearing from Alice in favor of the longer chain that everyone else is working

241
00:21:22,500 --> 00:21:26,740
on. Notice, that means you shouldn't necessarily

242
00:21:26,740 --> 00:21:32,120
trust a new block you hear immediately. Instead, you should wait for several new blocks to

243
00:21:32,120 --> 00:21:35,740
be added on top of it. If you still haven't heard of any longer

244
00:21:35,740 --> 00:21:40,040
blockchains, you can trust that this block is part of the same chain that everyone else

245
00:21:40,040 --> 00:21:45,220
is using. And with that, we've hit all the main ideas.

246
00:21:45,780 --> 00:21:50,780
This distributed ledger system based on a proof of work is more or less how the Bitcoin

247
00:21:50,780 --> 00:21:53,680
protocol works, and how many other cryptocurrencies work.

248
00:21:54,300 --> 00:21:58,120
There's just a few details to clear up. Earlier I said that the proof of work might

249
00:21:58,120 --> 00:22:02,580
be to find a special number so that the hash of the block starts with 60 zeros.

250
00:22:03,220 --> 00:22:07,360
Well, the way the actual Bitcoin protocol works is to periodically change that number

251
00:22:07,360 --> 00:22:11,900
of zeros so that it should take 10 minutes to find a new block.

252
00:22:12,780 --> 00:22:17,460
So as there are more and more miners added to the network, the challenge gets harder

253
00:22:17,460 --> 00:22:22,460
and harder in such a way that this miniature lottery only has about one winner every 10

254
00:22:22,460 --> 00:22:26,720
minutes. Many newer cryptocurrencies have much shorter

255
00:22:26,720 --> 00:22:30,840
block times than that. And all of the money in Bitcoin ultimately

256
00:22:30,840 --> 00:22:35,160
comes from some block reward. In the beginning, these rewards were 50 Bitcoin

257
00:22:35,160 --> 00:22:39,040
per block. There's a great website called Block Explorer

258
00:22:39,040 --> 00:22:41,420
that makes it easy to look through the Bitcoin blockchain.

259
00:22:41,960 --> 00:22:46,460
And if you look at the very first few blocks on the chain, they contain no transactions

260
00:22:46,460 --> 00:22:53,520
other than that 50 Bitcoin reward to the miner. But every 210,000 blocks, which is about every

261
00:22:53,520 --> 00:22:59,780
4 years, that reward gets cut in half. So right now, the reward is 12.5 Bitcoin per

262
00:22:59,780 --> 00:23:03,300
block. And because this reward decreases geometrically

263
00:23:03,300 --> 00:23:09,320
over time, it means there will never be more than 21 million Bitcoin in existence.

264
00:23:10,280 --> 00:23:13,280
However, this doesn't mean miners will stop earning money.

265
00:23:13,820 --> 00:23:17,940
In addition to the block reward, miners can also pick up transaction fees.

266
00:23:18,520 --> 00:23:23,080
The way this works is that whenever you make a payment, you can purely optionally include

267
00:23:23,080 --> 00:23:27,900
a transaction fee with it that will go to the miner of whichever block includes that

268
00:23:27,900 --> 00:23:31,640
payment. The reason you might do that is to incentivize

269
00:23:31,640 --> 00:23:35,920
miners to actually include the transaction you broadcast into the next block.

270
00:23:36,440 --> 00:23:42,960
You see, in Bitcoin, each block is limited to about 2400 transactions, which many critics

271
00:23:42,960 --> 00:23:48,760
argue is unnecessarily restrictive. For comparison, Visa processes an average

272
00:23:48,760 --> 00:23:54,500
of about 1700 transactions per second, and they're capable of handling more than 24,000

273
00:23:54,500 --> 00:23:58,940
per second. This comparatively slow processing on Bitcoin

274
00:23:58,940 --> 00:24:03,940
makes for higher transaction fees, since that's what determines which transactions

275
00:24:03,940 --> 00:24:10,800
miners choose to include in a new block. All of this is far from a comprehensive coverage

276
00:24:10,800 --> 00:24:15,240
of cryptocurrencies. There are still many nuances and alternate design choices that

277
00:24:15,240 --> 00:24:18,800
I haven't even touched. But my hope is that this can provide a stable

278
00:24:18,800 --> 00:24:23,400
WaitButWhy-style tree-trunk of understanding for anyone looking to add a few more branches

279
00:24:23,400 --> 00:24:26,820
with further reading. Like I said at the start, one of the motives

280
00:24:26,820 --> 00:24:31,640
behind this is that a lot of money has started flowing towards cryptocurrencies, and even

281
00:24:31,640 --> 00:24:34,760
though I don't want to make any claims about whether that's a good or bad investment,

282
00:24:35,340 --> 00:24:38,880
I really do think it's healthy for people getting into the game to at least know the

283
00:24:38,880 --> 00:24:43,600
fundamentals of the technology. As always, my sincerest thanks to those of

284
00:24:43,600 --> 00:24:48,160
you making this channel possible on Patreon. I understand that not everyone is in a position

285
00:24:48,160 --> 00:24:52,440
to contribute, but if you're still interested in helping out, one of the best ways to do

286
00:24:52,440 --> 00:24:56,640
that is simply to share videos that you think might be interesting or helpful to others.

287
00:24:57,280 --> 00:24:59,620
I know you know that, but it really does help.

