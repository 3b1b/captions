1
00:00:03,900 --> 00:00:06,480
Wat betekent het om een Bitcoin te hebben?

2
00:00:07,420 --> 00:00:09,555
Veel mensen hebben wel eens van Bitcoin gehoord, 

3
00:00:09,555 --> 00:00:13,216
dat het een volledig digitale valuta is die niet door de overheid wordt uitgegeven, 

4
00:00:13,216 --> 00:00:17,008
dat er geen banken nodig zijn om rekeningen te beheren en transacties te verifiëren en 

5
00:00:17,008 --> 00:00:19,100
dat niemand echt weet wie het heeft uitgevonden.

6
00:00:19,380 --> 00:00:23,280
En toch weten veel mensen het antwoord op deze vraag niet, althans niet volledig.

7
00:00:24,100 --> 00:00:27,782
Om daar te komen, en om ervoor te zorgen dat de technische details die aan het 

8
00:00:27,782 --> 00:00:30,672
antwoord ten grondslag liggen ook echt gemotiveerd aanvoelen, 

9
00:00:30,672 --> 00:00:34,354
gaan we stap voor stap doorlopen hoe je je eigen versie van Bitcoin zou kunnen 

10
00:00:34,354 --> 00:00:35,240
hebben uitgevonden.

11
00:00:36,140 --> 00:00:39,362
We beginnen met het bijhouden van betalingen met je vrienden met behulp 

12
00:00:39,362 --> 00:00:42,764
van een gemeenschappelijk grootboek, en dan als je je vrienden en de wereld 

13
00:00:42,764 --> 00:00:44,867
om je heen steeds minder begint te vertrouwen, 

14
00:00:44,867 --> 00:00:48,090
en als je slim genoeg bent om een paar ideeën uit de cryptografie in te 

15
00:00:48,090 --> 00:00:50,372
brengen om de noodzaak van vertrouwen te omzeilen, 

16
00:00:50,372 --> 00:00:52,700
krijg je uiteindelijk een zogenaamde cryptocurrency.

17
00:00:53,840 --> 00:00:58,644
Bitcoin is slechts het eerste geïmplementeerde voorbeeld van een cryptocurrency, 

18
00:00:58,644 --> 00:01:02,560
en nu zijn er duizenden andere op beurzen met traditionele valuta.

19
00:01:03,300 --> 00:01:06,468
Het pad bewandelen van je eigen uitvinding kan helpen om de basis te 

20
00:01:06,468 --> 00:01:09,867
leggen voor het begrijpen van enkele van de recentere spelers in het spel 

21
00:01:09,867 --> 00:01:13,220
en te herkennen wanneer en waarom er ruimte is voor andere ontwerpkeuzes.

22
00:01:14,100 --> 00:01:17,176
Een van de redenen waarom ik dit onderwerp heb gekozen, 

23
00:01:17,176 --> 00:01:20,583
is dat er het afgelopen jaar een enorme hoeveelheid aandacht, 

24
00:01:20,583 --> 00:01:23,660
investeringen en hype is geweest voor deze munteenheden.

25
00:01:24,280 --> 00:01:28,138
Ik ga geen commentaar geven of speculeren over de huidige of toekomstige wisselkoersen, 

26
00:01:28,138 --> 00:01:31,295
maar ik denk dat we het er allemaal over eens zijn dat iedereen die een 

27
00:01:31,295 --> 00:01:33,620
cryptocurrency wil kopen, echt moet weten wat het is.

28
00:01:33,920 --> 00:01:38,606
En dan bedoel ik niet alleen in termen van analogieën met vage connecties met goudmijnen, 

29
00:01:38,606 --> 00:01:42,303
maar een daadwerkelijke directe beschrijving van wat de computers doen 

30
00:01:42,303 --> 00:01:45,220
als we cryptocurrencies versturen, ontvangen en creëren.

31
00:01:46,300 --> 00:01:48,814
Eén ding dat de moeite waard is om te benadrukken, 

32
00:01:48,814 --> 00:01:52,905
is dat ook al gaan jij en ik hier in de details graven, en dat kost zinvolle tijd, 

33
00:01:52,905 --> 00:01:56,997
je die details eigenlijk niet hoeft te kennen als je de cryptocurrency gewoon wilt 

34
00:01:56,997 --> 00:02:01,188
gebruiken, net zoals je de details niet hoeft te kennen van wat er onder de motorkap 

35
00:02:01,188 --> 00:02:03,160
gebeurt als je met een creditcard veegt.

36
00:02:03,720 --> 00:02:07,584
Zoals bij elke digitale betaling zijn er veel gebruiksvriendelijke applicaties waarmee 

37
00:02:07,584 --> 00:02:11,360
je gewoon valuta kunt verzenden en ontvangen zonder na te denken over wat er gebeurt.

38
00:02:11,660 --> 00:02:16,009
Het verschil is dat de ruggengraat die hieraan ten grondslag ligt geen bank 

39
00:02:16,009 --> 00:02:20,359
is die transacties verifieert, maar een slim systeem van gedecentraliseerde 

40
00:02:20,359 --> 00:02:24,480
verificatie zonder vertrouwen op basis van wiskunde uit de cryptografie.

41
00:02:25,900 --> 00:02:28,117
Maar om te beginnen wil ik dat je de gedachte 

42
00:02:28,117 --> 00:02:30,480
aan cryptocurrencies en dat alles even opzij zet.

43
00:02:31,080 --> 00:02:35,380
We beginnen het verhaal met iets eenvoudigers, grootboeken en digitale handtekeningen.

44
00:02:36,340 --> 00:02:38,687
Als jij en je vrienden vrij vaak geld wisselen, 

45
00:02:38,687 --> 00:02:41,572
door jullie deel van de rekening te betalen en dergelijke, 

46
00:02:41,572 --> 00:02:44,360
kan het onhandig zijn om steeds contant geld te wisselen.

47
00:02:44,720 --> 00:02:47,504
Je kunt dus een gemeenschappelijk grootboek bijhouden waarin je alle betalingen 

48
00:02:47,504 --> 00:02:50,080
noteert die je op een bepaald moment in de toekomst van plan bent te doen.

49
00:02:50,620 --> 00:02:55,100
Alice betaalt Bob $20, Bob betaalt Charlie $40, dat soort dingen.

50
00:02:55,500 --> 00:02:58,320
Dit grootboek wordt iets openbaars en toegankelijk voor iedereen, 

51
00:02:58,320 --> 00:03:01,740
zoals een website waar iedereen naartoe kan gaan en nieuwe regels kan toevoegen.

52
00:03:02,480 --> 00:03:05,819
En stel dat jullie aan het eind van elke maand allemaal bij elkaar komen, 

53
00:03:05,819 --> 00:03:07,940
de lijst met transacties bekijken en afrekenen.

54
00:03:08,280 --> 00:03:11,379
Als je meer hebt uitgegeven dan je hebt ontvangen, stop je dat geld in de pot, 

55
00:03:11,379 --> 00:03:14,400
en als je meer hebt ontvangen dan je hebt uitgegeven, haal je dat geld eruit.

56
00:03:15,460 --> 00:03:17,569
Het protocol om deel uit te maken van dit eenvoudige 

57
00:03:17,569 --> 00:03:19,360
systeem zou er dus als volgt uit kunnen zien.

58
00:03:20,020 --> 00:03:22,669
Iedereen kan regels toevoegen aan het grootboek en aan het eind 

59
00:03:22,669 --> 00:03:25,360
van elke maand komen jullie allemaal bij elkaar om af te rekenen.

60
00:03:26,300 --> 00:03:30,760
Een probleem met zo'n openbaar grootboek is dat iedereen een regel kan toevoegen.

61
00:03:31,020 --> 00:03:33,942
Dus wat weerhoudt Bob ervan om te gaan schrijven dat 

62
00:03:33,942 --> 00:03:36,920
Alice Bob $100 betaalt zonder dat Alice dat goedkeurt?

63
00:03:37,780 --> 00:03:43,200
Hoe moeten we erop vertrouwen dat al deze transacties zijn wat de afzender bedoelde?

64
00:03:44,580 --> 00:03:47,495
Dit is waar het eerste stukje cryptografie om de hoek komt kijken, 

65
00:03:47,495 --> 00:03:48,540
digitale handtekeningen.

66
00:03:49,480 --> 00:03:53,910
Net als bij handgeschreven handtekeningen is het idee hier dat Alice iets moet kunnen 

67
00:03:53,910 --> 00:03:58,289
toevoegen aan die transactie dat bewijst dat ze het heeft gezien en dat ze het heeft 

68
00:03:58,289 --> 00:04:02,564
goedgekeurd, en het moet voor iemand anders ondoenlijk zijn om die handtekening te 

69
00:04:02,564 --> 00:04:03,080
vervalsen.

70
00:04:04,300 --> 00:04:06,300
In eerste instantie lijkt het misschien alsof een 

71
00:04:06,300 --> 00:04:08,580
digitale handtekening niet eens mogelijk zou moeten zijn.

72
00:04:09,220 --> 00:04:11,440
Ik bedoel, de gegevens waaruit die handtekening bestaat 

73
00:04:11,440 --> 00:04:13,860
kunnen gewoon door een computer worden gelezen en gekopieerd.

74
00:04:14,400 --> 00:04:16,140
Dus hoe voorkom je vervalsingen?

75
00:04:17,320 --> 00:04:20,476
De manier waarop dit werkt is dat iedereen een zogenaamd publieke 

76
00:04:20,476 --> 00:04:24,160
sleutel-private sleutelpaar genereert, die er elk uitzien als een reeks bits.

77
00:04:24,800 --> 00:04:27,456
De privésleutel wordt soms ook geheime sleutel genoemd, 

78
00:04:27,456 --> 00:04:31,300
dus die kunnen we afkorten als SK terwijl we de publieke sleutel afkorten als PK.

79
00:04:32,340 --> 00:04:34,384
Zoals de naam al doet vermoeden, is deze geheime 

80
00:04:34,384 --> 00:04:36,220
sleutel iets dat je voor jezelf wilt houden.

81
00:04:37,060 --> 00:04:40,269
In de echte wereld ziet je handgeschreven handtekening er hetzelfde uit, 

82
00:04:40,269 --> 00:04:41,720
welk document je ook ondertekent.

83
00:04:42,280 --> 00:04:44,782
Maar een digitale handtekening is eigenlijk veel sterker, 

84
00:04:44,782 --> 00:04:46,940
omdat deze verandert voor verschillende berichten.

85
00:04:47,840 --> 00:04:52,152
Het ziet eruit als een reeks van 1-en en 0-en, gewoonlijk iets van 256 bits, 

86
00:04:52,152 --> 00:04:55,624
en het wijzigen van het bericht, zelfs maar een klein beetje, 

87
00:04:55,624 --> 00:04:59,880
verandert volledig hoe de handtekening op dat bericht eruit zou moeten zien.

88
00:05:00,840 --> 00:05:04,536
Iets formeler gesproken, het maken van een handtekening bestaat uit een 

89
00:05:04,536 --> 00:05:08,540
functie die zowel afhankelijk is van het bericht zelf als van je privésleutel.

90
00:05:09,200 --> 00:05:12,589
De privésleutel zorgt ervoor dat alleen jij die handtekening kunt maken en 

91
00:05:12,589 --> 00:05:16,069
het feit dat deze afhankelijk is van het bericht betekent dat niemand zomaar 

92
00:05:16,069 --> 00:05:19,640
een van jouw handtekeningen kan kopiëren en op een ander bericht kan vervalsen.

93
00:05:21,000 --> 00:05:24,545
Hand-in-hand hiermee is een tweede functie die wordt gebruikt om te verifiëren dat 

94
00:05:24,545 --> 00:05:28,220
een handtekening geldig is, en dit is waar de publieke sleutel om de hoek komt kijken.

95
00:05:29,200 --> 00:05:32,081
Het enige wat het doet is true of false uitvoeren om aan te geven of 

96
00:05:32,081 --> 00:05:34,962
dit een handtekening was die is geproduceerd door de private sleutel 

97
00:05:34,962 --> 00:05:37,760
die hoort bij de publieke sleutel die je gebruikt voor verificatie.

98
00:05:38,640 --> 00:05:42,470
Ik zal niet in detail treden over hoe deze twee functies precies werken, 

99
00:05:42,470 --> 00:05:46,143
maar het idee is dat het volledig onmogelijk moet zijn om een geldige 

100
00:05:46,143 --> 00:05:49,240
handtekening te vinden als je de geheime sleutel niet kent.

101
00:05:50,060 --> 00:05:54,536
Er is geen betere strategie dan het raden en controleren van willekeurige handtekeningen, 

102
00:05:54,536 --> 00:05:57,820
die je kunt controleren met de openbare sleutel die iedereen kent.

103
00:05:58,980 --> 00:06:03,200
Bedenk nu eens hoeveel handtekeningen er zijn met een lengte van 256 bits.

104
00:06:03,840 --> 00:06:06,180
Dat is 2 tot de macht 256!

105
00:06:07,140 --> 00:06:09,560
Dit is een belachelijk groot aantal.

106
00:06:09,860 --> 00:06:13,640
Om het astronomisch groot te noemen zou veel te veel eer geven aan de astronomie.

107
00:06:14,260 --> 00:06:19,680
Ik heb zelfs een extra video gemaakt om te laten zien wat een enorm aantal dit is.

108
00:06:20,380 --> 00:06:24,092
Laten we hier zeggen dat wanneer je verifieert dat een handtekening tegen een 

109
00:06:24,092 --> 00:06:27,614
bepaald bericht geldig is, je er extreem zeker van kunt zijn dat de enige 

110
00:06:27,614 --> 00:06:31,375
manier waarop iemand dit kan hebben geproduceerd is als hij de geheime sleutel 

111
00:06:31,375 --> 00:06:35,040
kent die hoort bij de publieke sleutel die je hebt gebruikt voor verificatie.

112
00:06:37,120 --> 00:06:40,607
Ervoor zorgen dat mensen transacties op het grootboek ondertekenen is best goed, 

113
00:06:40,607 --> 00:06:42,200
maar er is een kleine maas in de wet.

114
00:06:42,720 --> 00:06:46,428
Als Alice een transactie ondertekent zoals Alice betaalt Bob $100, 

115
00:06:46,428 --> 00:06:51,244
kan Bob, ook al kan hij de handtekening van Alice niet vervalsen op een nieuw bericht, 

116
00:06:51,244 --> 00:06:53,680
dezelfde regel zo vaak kopiëren als hij wil.

117
00:06:54,300 --> 00:06:57,220
Die combinatie van bericht en handtekening blijft geldig.

118
00:06:57,920 --> 00:07:02,424
Om dit te omzeilen, maken we het zo dat wanneer je een transactie ondertekent, 

119
00:07:02,424 --> 00:07:07,100
het bericht een soort unieke ID moet bevatten die aan die transactie is gekoppeld.

120
00:07:07,840 --> 00:07:11,079
Op die manier, als Alice Bob meerdere keren $100 betaalt, 

121
00:07:11,079 --> 00:07:15,380
vereist elk van die regels op het grootboek een compleet nieuwe handtekening.

122
00:07:16,760 --> 00:07:19,493
Geweldig, digitale handtekeningen nemen een enorm aspect 

123
00:07:19,493 --> 00:07:21,940
van vertrouwen weg in dit oorspronkelijke protocol.

124
00:07:22,380 --> 00:07:27,280
Maar dan nog, als je dit echt zou doen, zou je vertrouwen op een soort erewoordsysteem.

125
00:07:27,720 --> 00:07:30,318
Je vertrouwt er namelijk op dat iedereen zich aan het eind 

126
00:07:30,318 --> 00:07:32,740
van elke maand aan de regels houdt en contant afrekent.

127
00:07:33,560 --> 00:07:39,480
Wat als Charlie bijvoorbeeld duizenden dollars schuld heeft en gewoon weigert op te dagen?

128
00:07:40,120 --> 00:07:43,669
De enige echte reden om terug te vallen op contant geld om 

129
00:07:43,669 --> 00:07:47,280
af te rekenen is als sommige mensen veel geld schuldig zijn.

130
00:07:47,860 --> 00:07:52,093
Dus misschien heb je het slimme idee dat je eigenlijk nooit contant hoeft af te rekenen, 

131
00:07:52,093 --> 00:07:54,995
zolang je maar een manier hebt om te voorkomen dat mensen te 

132
00:07:54,995 --> 00:07:56,660
veel uitgeven dan ze binnenkrijgen.

133
00:07:57,340 --> 00:08:01,068
Misschien begin je door iedereen $100 in de pot te laten storten 

134
00:08:01,068 --> 00:08:05,771
en dan de eerste paar regels van het grootboek te laten luiden Alice krijgt $100, 

135
00:08:05,771 --> 00:08:08,180
Bob krijgt $100, Charlie krijgt $100, etc.

136
00:08:09,020 --> 00:08:12,444
Accepteer nu gewoon geen transacties waarbij iemand 

137
00:08:12,444 --> 00:08:16,000
meer uitgeeft dan hij al op dat grootboek heeft staan.

138
00:08:16,840 --> 00:08:19,785
Als de eerste twee transacties bijvoorbeeld zijn: 

139
00:08:19,785 --> 00:08:22,967
Charlie betaalt Alice $50 en Charlie betaalt Bob $50, 

140
00:08:22,967 --> 00:08:28,270
als hij dan zou proberen om Charlie betaalt jou $20 toe te voegen, zou dat ongeldig zijn, 

141
00:08:28,270 --> 00:08:32,100
net zo ongeldig als wanneer hij het nooit ondertekend zou hebben.

142
00:08:32,940 --> 00:08:36,264
Merk op dat dit betekent dat je voor het verifiëren van een transactie de 

143
00:08:36,264 --> 00:08:39,500
volledige geschiedenis van de transacties tot op dat moment moet kennen.

144
00:08:40,159 --> 00:08:43,249
Dit zal ook gelden voor cryptocurrencies, hoewel 

145
00:08:43,249 --> 00:08:45,960
er een beetje ruimte is voor optimalisatie.

146
00:08:48,380 --> 00:08:52,108
Wat hier interessant is, is dat deze stap de verbinding tussen 

147
00:08:52,108 --> 00:08:55,600
het grootboek en de werkelijke fysieke US dollars wegneemt.

148
00:08:56,200 --> 00:08:59,414
In theorie, als iedereen in de wereld dit grootboek zou gebruiken, 

149
00:08:59,414 --> 00:09:02,869
zou je je hele leven alleen maar geld kunnen versturen en ontvangen via 

150
00:09:02,869 --> 00:09:06,660
dit grootboek zonder ooit te hoeven converteren naar echte Amerikaanse dollars.

151
00:09:07,580 --> 00:09:10,829
Laten we, om dit punt te benadrukken, de hoeveelheden 

152
00:09:10,829 --> 00:09:14,260
op het grootboek grootboekdollars noemen, of afgekort LD.

153
00:09:14,820 --> 00:09:18,660
Je bent natuurlijk vrij om ledger dollars in te wisselen voor echte US dollars.

154
00:09:19,060 --> 00:09:22,345
Alice geeft Bob bijvoorbeeld een biljet van $10 in de echte 

155
00:09:22,345 --> 00:09:26,069
wereld in ruil voor het toevoegen en ondertekenen van de transactie 

156
00:09:26,069 --> 00:09:29,520
$10 Bob betaalt Alice $10 aan dit gemeenschappelijke grootboek.

157
00:09:30,720 --> 00:09:34,220
Maar zulke uitwisselingen worden niet gegarandeerd door het protocol.

158
00:09:34,720 --> 00:09:37,697
Het is nu meer analoog aan hoe je dollars inwisselt 

159
00:09:37,697 --> 00:09:40,560
voor euro's of een andere valuta op de open markt.

160
00:09:41,180 --> 00:09:43,800
Het is gewoon zijn eigen onafhankelijke ding.

161
00:09:44,580 --> 00:09:47,936
Dit is het eerste belangrijke ding dat je moet begrijpen over Bitcoin, 

162
00:09:47,936 --> 00:09:49,780
of welke andere cryptocurrency dan ook.

163
00:09:49,780 --> 00:09:52,420
Wat het is, is een grootboek.

164
00:09:53,180 --> 00:09:55,980
De geschiedenis van transacties is de valuta.

165
00:09:57,160 --> 00:09:59,213
Met Bitcoin komt het geld natuurlijk niet in het 

166
00:09:59,213 --> 00:10:01,560
grootboek terecht als mensen het kopen met contant geld.

167
00:10:02,000 --> 00:10:04,820
Over een paar minuten kom ik te weten hoe nieuw geld het grootboek binnenkomt.

168
00:10:05,540 --> 00:10:08,797
Maar voor het zover is, is er eigenlijk een nog belangrijker verschil 

169
00:10:08,797 --> 00:10:12,380
tussen ons huidige systeem van ledger dollars en hoe cryptocurrencies werken.

170
00:10:13,020 --> 00:10:15,994
Tot nu toe heb ik gezegd dat dit grootboek op een openbare plaats staat, 

171
00:10:15,994 --> 00:10:18,440
zoals een website waar iedereen nieuwe regels kan toevoegen.

172
00:10:19,220 --> 00:10:22,306
Maar daarvoor zou je op een centrale plek moeten vertrouwen, 

173
00:10:22,306 --> 00:10:26,760
namelijk wie de website host, wie de regels voor het toevoegen van nieuwe regels regelt.

174
00:10:27,340 --> 00:10:29,514
Om dat stukje vertrouwen weg te nemen, laten we 

175
00:10:29,514 --> 00:10:31,960
iedereen zijn eigen kopie van het grootboek bijhouden.

176
00:10:32,660 --> 00:10:37,108
Als je dan een transactie wilt doen, bijvoorbeeld Alice betaalt Bob $100, 

177
00:10:37,108 --> 00:10:41,977
dan zend je dat de wereld in zodat mensen het kunnen horen en op hun eigen privé 

178
00:10:41,977 --> 00:10:43,420
grootboek kunnen zetten.

179
00:10:44,840 --> 00:10:49,260
Maar tenzij je iets meer doet, is dit systeem absurd slecht.

180
00:10:49,820 --> 00:10:52,740
Hoe krijg je het voor elkaar dat iedereen het eens is over wat het juiste grootboek is?

181
00:10:53,440 --> 00:10:56,817
Als Bob een transactie ontvangt, zoals Alice die Bob $10 betaalt, 

182
00:10:56,817 --> 00:11:01,117
hoe kan hij er dan zeker van zijn dat iedereen diezelfde transactie heeft ontvangen 

183
00:11:01,117 --> 00:11:01,680
en gelooft?

184
00:11:02,340 --> 00:11:04,900
Dat hij later naar Charlie kan gaan en diezelfde 

185
00:11:04,900 --> 00:11:07,200
$10 kan gebruiken om een transactie te doen?

186
00:11:08,240 --> 00:11:12,060
Stel je voor dat je alleen maar luistert naar transacties die worden uitgezonden.

187
00:11:12,760 --> 00:11:18,220
Hoe weet je zeker dat iedereen dezelfde transacties in dezelfde volgorde registreert?

188
00:11:19,420 --> 00:11:21,360
Dit is echt de kern van het probleem.

189
00:11:21,600 --> 00:11:22,740
Dit is een interessante puzzel.

190
00:11:23,420 --> 00:11:27,713
Kun je een protocol bedenken voor het accepteren of weigeren van transacties, 

191
00:11:27,713 --> 00:11:32,226
en in welke volgorde, zodat je erop kunt vertrouwen dat iedereen in de wereld die 

192
00:11:32,226 --> 00:11:36,959
datzelfde protocol volgt een persoonlijk grootboek heeft dat er hetzelfde uitziet als 

193
00:11:36,959 --> 00:11:37,620
dat van jou?

194
00:11:38,300 --> 00:11:41,580
Dit is het probleem dat in de oorspronkelijke Bitcoin-paper werd behandeld.

195
00:11:44,060 --> 00:11:47,793
Op een hoog niveau is de oplossing die Bitcoin biedt om te 

196
00:11:47,793 --> 00:11:52,160
vertrouwen op het grootboek waar het meeste rekenwerk in is gestoken.

197
00:11:52,540 --> 00:11:54,860
Ik zal even de tijd nemen om uit te leggen wat dat precies betekent.

198
00:11:55,320 --> 00:11:58,120
Het gaat om een cryptografische hashfunctie.

199
00:11:58,460 --> 00:12:02,924
Het algemene idee waar we naartoe bouwen is dat als je rekenwerk gebruikt als basis 

200
00:12:02,924 --> 00:12:07,124
voor wat te vertrouwen is, je het zo kunt maken dat frauduleuze transacties en 

201
00:12:07,124 --> 00:12:11,695
tegenstrijdige grootboeken een onhaalbare hoeveelheid rekenwerk vereisen om tot stand 

202
00:12:11,695 --> 00:12:12,280
te brengen.

203
00:12:13,040 --> 00:12:16,204
Nogmaals, ik herinner je eraan dat dit veel verder gaat dan 

204
00:12:16,204 --> 00:12:19,580
wat iemand zou moeten weten om een valuta als deze te gebruiken.

205
00:12:20,120 --> 00:12:23,034
Maar het is echt een cool idee en als je het begrijpt, 

206
00:12:23,034 --> 00:12:26,160
begrijp je het hart van Bitcoin en andere cryptocurrencies.

207
00:12:28,100 --> 00:12:29,940
Om te beginnen, wat is een hashfunctie?

208
00:12:30,800 --> 00:12:38,045
De invoer voor een van deze functies kan elk soort bericht of bestand zijn, 

209
00:12:38,045 --> 00:12:40,620
het lijkt echt op 256 bits.

210
00:12:41,180 --> 00:12:44,166
Deze uitvoer wordt de hash of digest van het bericht 

211
00:12:44,166 --> 00:12:47,660
genoemd en het is de bedoeling dat het er willekeurig uitziet.

212
00:12:48,000 --> 00:12:51,660
Het is niet willekeurig, het geeft altijd dezelfde uitvoer voor een gegeven invoer.

213
00:12:52,200 --> 00:12:55,025
Maar het idee is dat als je de invoer iets verandert, 

214
00:12:55,025 --> 00:12:58,007
misschien door slechts één van de karakters te bewerken, 

215
00:12:58,007 --> 00:13:00,100
de resulterende hash volledig verandert.

216
00:13:00,820 --> 00:13:05,317
Sterker nog, voor de hashfunctie die ik hier laat zien, SHA256 genaamd, 

217
00:13:05,317 --> 00:13:09,940
is de manier waarop de uitvoer verandert als je de invoer iets verandert, 

218
00:13:09,940 --> 00:13:11,440
volledig onvoorspelbaar.

219
00:13:12,440 --> 00:13:17,060
Zie je, dit is niet zomaar een hashfunctie, het is een cryptografische hashfunctie.

220
00:13:17,340 --> 00:13:20,660
Dat betekent dat het niet mogelijk is om in omgekeerde richting te rekenen.

221
00:13:21,260 --> 00:13:27,828
Als ik je een reeks van 1's en 0's laat zien en je vraag om een ingang te vinden 

222
00:13:27,828 --> 00:13:34,640
voor de SHA256 hash, dan heb je geen betere methode dan gewoon raden en controleren.

223
00:13:35,700 --> 00:13:41,317
En nogmaals, als je wilt weten hoeveel rekenwerk er nodig is om 256 gissingen te doen, 

224
00:13:41,317 --> 00:13:43,900
kijk dan eens naar de aanvullende video.

225
00:13:44,380 --> 00:13:46,660
Ik had eigenlijk veel te veel plezier met het schrijven van dat ding.

226
00:13:48,560 --> 00:13:51,661
Je zou kunnen denken dat als je je echt verdiept in de details 

227
00:13:51,661 --> 00:13:54,664
van hoe deze functie precies werkt, je de juiste invoer kunt 

228
00:13:54,664 --> 00:13:57,520
reverse-engineeren zonder te hoeven gissen en controleren.

229
00:13:58,240 --> 00:14:00,840
Maar niemand heeft ooit een manier gevonden om dat te doen.

230
00:14:01,600 --> 00:14:04,163
Interessant genoeg is er geen keihard rigoureus bewijs 

231
00:14:04,163 --> 00:14:06,960
dat het moeilijk is om in de omgekeerde richting te rekenen.

232
00:14:07,620 --> 00:14:10,863
En toch is een groot deel van de moderne beveiliging afhankelijk van 

233
00:14:10,863 --> 00:14:14,200
cryptografische hashfuncties en het idee dat ze deze eigenschap hebben.

234
00:14:14,940 --> 00:14:18,814
Als je kijkt naar de algoritmes die ten grondslag liggen aan de beveiligde 

235
00:14:18,814 --> 00:14:21,862
verbinding die je browser op dit moment maakt met YouTube, 

236
00:14:21,862 --> 00:14:25,840
of die hij maakt met je bank, dan zie je waarschijnlijk de naam SHA256 staan.

237
00:14:27,340 --> 00:14:31,931
Op dit moment zullen we ons richten op hoe zo'n functie kan bewijzen dat een 

238
00:14:31,931 --> 00:14:37,000
bepaalde lijst met transacties geassocieerd is met een grote hoeveelheid rekenkracht.

239
00:14:38,040 --> 00:14:42,133
Stel je voor dat iemand je een lijst met transacties laat zien en hij zegt, 

240
00:14:42,133 --> 00:14:45,795
hé, ik heb een speciaal nummer gevonden zodat wanneer je dat nummer 

241
00:14:45,795 --> 00:14:50,157
aan het eind van deze lijst met transacties zet en SHA256 op het geheel toepast, 

242
00:14:50,157 --> 00:14:53,120
de eerste 30 bits van die uitvoer allemaal nullen zijn.

243
00:14:54,100 --> 00:14:56,700
Hoe moeilijk denk je dat het voor ze was om dat nummer te vinden?

244
00:14:58,060 --> 00:15:02,590
Welnu, voor een willekeurig bericht is de kans dat een hash toevallig begint 

245
00:15:02,590 --> 00:15:07,180
met 30 opeenvolgende nullen 1 op 2 op de 30, wat ongeveer 1 op een miljard is.

246
00:15:08,200 --> 00:15:11,209
En omdat SHA256 een cryptografische hashfunctie is, 

247
00:15:11,209 --> 00:15:15,840
is de enige manier om zo'n speciaal getal te vinden gewoon raden en controleren.

248
00:15:16,660 --> 00:15:19,642
Deze persoon heeft dus bijna zeker een miljard verschillende 

249
00:15:19,642 --> 00:15:22,380
nummers moeten doorlopen voordat hij deze speciale vond.

250
00:15:23,380 --> 00:15:26,286
En als je dat getal eenmaal weet, is het heel snel te verifiëren, 

251
00:15:26,286 --> 00:15:28,840
je voert gewoon de hash uit en ziet dat er 30 nullen zijn.

252
00:15:29,800 --> 00:15:33,861
Met andere woorden, je kunt verifiëren dat ze een grote hoeveelheid werk hebben verzet, 

253
00:15:33,861 --> 00:15:36,400
maar zonder dat je zelf diezelfde moeite hoeft te doen.

254
00:15:37,200 --> 00:15:38,800
Dit wordt een bewijs van werk genoemd.

255
00:15:39,460 --> 00:15:44,220
En wat belangrijk is: al dit werk is intrinsiek verbonden met de lijst van transacties.

256
00:15:44,900 --> 00:15:48,253
Als je één van die transacties verandert, al is het maar een klein beetje, 

257
00:15:48,253 --> 00:15:49,640
dan verandert de hash compleet.

258
00:15:50,080 --> 00:15:54,352
Je zou dus nog een miljard keer moeten raden om een nieuw werkbewijs te vinden, 

259
00:15:54,352 --> 00:15:57,716
een nieuw getal dat ervoor zorgt dat de hash van de gewijzigde 

260
00:15:57,716 --> 00:16:00,600
lijst samen met dit nieuwe getal met 30 nullen begint.

261
00:16:01,500 --> 00:16:04,100
Denk nu terug aan onze situatie met het gedistribueerde grootboek.

262
00:16:04,680 --> 00:16:07,821
Iedereen zendt transacties uit en we willen dat ze 

263
00:16:07,821 --> 00:16:10,840
het eens worden over wat het juiste grootboek is.

264
00:16:12,100 --> 00:16:15,380
Zoals ik al zei, is het idee achter het originele Bitcoin-papier dat 

265
00:16:15,380 --> 00:16:18,660
iedereen het grootboek vertrouwt waar het meeste werk in is gestoken.

266
00:16:19,280 --> 00:16:23,394
De manier waarop dit werkt is door eerst een gegeven grootboek in blokken te organiseren, 

267
00:16:23,394 --> 00:16:27,280
waarbij elk blok bestaat uit een lijst van transacties samen met een bewijs van werk.

268
00:16:27,720 --> 00:16:30,033
Dat wil zeggen, een speciaal nummer zodat de hash 

269
00:16:30,033 --> 00:16:32,300
van het hele blok begint met een heleboel nullen.

270
00:16:33,140 --> 00:16:38,163
Laten we voorlopig zeggen dat het met 60 nullen moet beginnen, 

271
00:16:38,163 --> 00:16:44,224
maar later komen we terug op een meer systematische manier die je misschien 

272
00:16:44,224 --> 00:16:45,500
wilt veranderen.

273
00:16:45,900 --> 00:16:50,040
Een blok wordt alleen als geldig beschouwd als het een bewijs van werk heeft.

274
00:16:50,960 --> 00:16:55,074
Om er ook voor te zorgen dat er een standaard volgorde in deze blokken zit, 

275
00:16:55,074 --> 00:16:59,460
maken we het zo dat een blok de hash van het vorige blok in de kop moet bevatten.

276
00:17:00,060 --> 00:17:03,773
Op die manier, als je terug zou gaan en een van de blokken zou veranderen, 

277
00:17:03,773 --> 00:17:08,131
of de volgorde van twee blokken zou verwisselen, zou het blok dat erna komt veranderen, 

278
00:17:08,131 --> 00:17:12,340
waardoor de hash van het blok verandert, waardoor de hash van het blok dat erna komt 

279
00:17:12,340 --> 00:17:13,380
verandert, enzovoort.

280
00:17:13,980 --> 00:17:17,596
Dan zou je al het werk opnieuw moeten doen, een nieuw speciaal nummer 

281
00:17:17,596 --> 00:17:21,420
vinden voor elk van deze blokken, zodat hun hashes beginnen met 60 nullen.

282
00:17:22,440 --> 00:17:25,187
Omdat blokken op deze manier aan elkaar worden geketend, 

283
00:17:25,187 --> 00:17:28,319
noemen we het in plaats van een grootboek meestal een blockchain.

284
00:17:30,080 --> 00:17:32,250
Als onderdeel van ons vernieuwde protocol kunnen we 

285
00:17:32,250 --> 00:17:34,420
nu iedereen ter wereld toestaan om blokken te maken.

286
00:17:35,240 --> 00:17:38,880
Dat betekent dat ze luisteren naar transacties die worden uitgezonden, 

287
00:17:38,880 --> 00:17:42,673
deze verzamelen in een blok en dan een heleboel werk doen om een speciaal 

288
00:17:42,673 --> 00:17:46,160
nummer te vinden waardoor de hash van dat blok begint met 60 nullen.

289
00:17:46,960 --> 00:17:49,900
Als ze het gevonden hebben, zenden ze het gevonden blok uit.

290
00:17:50,860 --> 00:17:55,060
Om de maker van een blok te belonen voor al dit werk, zullen we haar toestaan om, 

291
00:17:55,060 --> 00:17:59,312
wanneer ze een blok samenstelt, er een heel speciale transactie aan toe te voegen, 

292
00:17:59,312 --> 00:18:02,540
waarbij ze bijvoorbeeld 10 ledger dollars uit het niets krijgt.

293
00:18:03,080 --> 00:18:06,019
Dit heet de blokbeloning en het is een uitzondering op onze 

294
00:18:06,019 --> 00:18:09,400
gebruikelijke regels over het wel of niet accepteren van transacties.

295
00:18:10,040 --> 00:18:12,920
Het komt van niemand, dus het hoeft niet ondertekend te worden.

296
00:18:13,660 --> 00:18:16,429
Het betekent ook dat het totale aantal ledger 

297
00:18:16,429 --> 00:18:19,620
dollars in onze economie toeneemt met elk nieuw blok.

298
00:18:20,900 --> 00:18:25,106
Het maken van blokken wordt vaak mining genoemd, omdat het veel werk vereist, 

299
00:18:25,106 --> 00:18:28,180
en het introduceert nieuwe stukjes valuta in de economie.

300
00:18:29,020 --> 00:18:32,884
Maar als je hoort of leest over miners, bedenk dan dat wat 

301
00:18:32,884 --> 00:18:36,748
ze echt doen is luisteren naar transacties, blokken maken, 

302
00:18:36,748 --> 00:18:40,940
die blokken uitzenden en daarvoor beloond worden met nieuw geld.

303
00:18:41,780 --> 00:18:45,654
Vanuit het perspectief van de miners is elk blok als een miniatuurloterij, 

304
00:18:45,654 --> 00:18:48,185
waarbij iedereen zo snel mogelijk nummers raadt, 

305
00:18:48,185 --> 00:18:51,594
totdat één gelukkige persoon een speciaal nummer vindt dat ervoor 

306
00:18:51,594 --> 00:18:56,140
zorgt dat de hash van het blok met veel nullen begint, en hij of zij krijgt de beloning.

307
00:18:57,620 --> 00:19:01,309
Alle anderen die dit systeem alleen maar willen gebruiken om betalingen te doen, 

308
00:19:01,309 --> 00:19:03,587
gaan in plaats van te luisteren naar transacties, 

309
00:19:03,587 --> 00:19:07,367
alleen maar luisteren naar blokken die worden uitgezonden door miners en hun eigen 

310
00:19:07,367 --> 00:19:09,600
persoonlijke kopieën van de blockchain bijwerken.

311
00:19:10,560 --> 00:19:14,104
De belangrijkste toevoeging aan ons protocol is dat als je twee 

312
00:19:14,104 --> 00:19:18,423
verschillende blockchains hoort met tegenstrijdige transactiegeschiedenissen, 

313
00:19:18,423 --> 00:19:22,300
je je richt op de langste, degene waar het meeste werk in is gestoken.

314
00:19:22,860 --> 00:19:25,196
Als er een gelijkspel is, wacht dan gewoon tot je 

315
00:19:25,196 --> 00:19:27,720
een extra blok hoort dat een van de twee langer maakt.

316
00:19:28,720 --> 00:19:32,187
Dus ook al is er geen centrale autoriteit en onderhoudt iedereen zijn 

317
00:19:32,187 --> 00:19:35,803
eigen kopie van de blockchain, als iedereen ermee instemt om de voorkeur 

318
00:19:35,803 --> 00:19:38,974
te geven aan de blockchain waar het meeste werk in is gestoken, 

319
00:19:38,974 --> 00:19:42,640
dan hebben we een manier om tot een gedecentraliseerde consensus te komen.

320
00:19:43,560 --> 00:19:47,351
Om te zien waarom dit een betrouwbaar systeem is en om te begrijpen op welk punt je erop 

321
00:19:47,351 --> 00:19:51,015
moet vertrouwen dat een betaling legitiem is, is het eigenlijk heel nuttig om precies 

322
00:19:51,015 --> 00:19:54,680
te doorlopen wat er nodig is om iemand voor de gek te houden die dit systeem gebruikt.

323
00:19:55,600 --> 00:19:59,562
Misschien probeert Alice Bob voor de gek te houden met een frauduleus blok, 

324
00:19:59,562 --> 00:20:04,254
namelijk door hem een blok te sturen waarin staat dat zij hem 100 Ledger dollars betaalt, 

325
00:20:04,254 --> 00:20:07,642
maar zonder dat blok uit te zenden naar de rest van het netwerk, 

326
00:20:07,642 --> 00:20:11,240
zodat iedereen nog steeds denkt dat zij die 100 Ledger dollars heeft.

327
00:20:11,960 --> 00:20:16,743
Om dit te doen, zou ze een geldig werkbewijs moeten vinden vóór alle andere miners, 

328
00:20:16,743 --> 00:20:18,680
die elk aan hun eigen blok werken.

329
00:20:19,500 --> 00:20:22,211
En dat kan zeker gebeuren, misschien wint Alice deze 

330
00:20:22,211 --> 00:20:24,820
miniatuurloterij toevallig eerder dan alle anderen.

331
00:20:25,680 --> 00:20:29,380
Maar Bob zal nog steeds de uitzendingen van andere miners horen, 

332
00:20:29,380 --> 00:20:32,226
dus om hem dit frauduleuze blok te laten geloven, 

333
00:20:32,226 --> 00:20:36,267
zou Alice al het werk zelf moeten doen om blokken te blijven toevoegen 

334
00:20:36,267 --> 00:20:40,138
op deze speciale vork in Bob's blockchain die anders is dan wat hij 

335
00:20:40,138 --> 00:20:41,960
hoort van de rest van de miners.

336
00:20:42,740 --> 00:20:45,590
Onthoud dat Bob volgens het protocol altijd de 

337
00:20:45,590 --> 00:20:48,260
langste keten vertrouwt waar hij vanaf weet.

338
00:20:49,260 --> 00:20:53,301
Alice kan dit misschien een paar blokken volhouden als ze toevallig 

339
00:20:53,301 --> 00:20:57,700
sneller blokken vindt dan de rest van de miners op het netwerk bij elkaar.

340
00:20:58,480 --> 00:21:03,056
Maar tenzij ze bijna 50% van de rekenkracht van alle miners heeft, 

341
00:21:03,056 --> 00:21:08,110
wordt de kans overweldigend dat de blockchain waar alle andere miners aan 

342
00:21:08,110 --> 00:21:13,780
werken sneller groeit dan de enkele frauduleuze blockchain die Alice aan Bob geeft.

343
00:21:15,000 --> 00:21:19,070
Dus na genoeg tijd zal Bob gewoon verwerpen wat hij van Alice 

344
00:21:19,070 --> 00:21:23,140
hoort ten gunste van de langere keten waar iedereen aan werkt.

345
00:21:23,960 --> 00:21:26,547
Let wel, dat betekent dat je een nieuw blok dat 

346
00:21:26,547 --> 00:21:28,920
je meteen hoort niet per se moet vertrouwen.

347
00:21:29,500 --> 00:21:31,806
In plaats daarvan moet je wachten tot er verschillende 

348
00:21:31,806 --> 00:21:33,400
nieuwe blokken bovenop zijn geplaatst.

349
00:21:33,820 --> 00:21:36,516
Als je nog steeds niet van langere blockchains hebt gehoord, 

350
00:21:36,516 --> 00:21:39,744
kun je erop vertrouwen dat dit blok deel uitmaakt van dezelfde keten die 

351
00:21:39,744 --> 00:21:40,540
iedereen gebruikt.

352
00:21:42,120 --> 00:21:45,220
En daarmee hebben we alle belangrijke ideeën gehad.

353
00:21:45,780 --> 00:21:49,680
Dit gedistribueerde grootboeksysteem op basis van een proof of work is min of 

354
00:21:49,680 --> 00:21:53,680
meer hoe het Bitcoin-protocol werkt, en hoe veel andere cryptocurrencies werken.

355
00:21:54,300 --> 00:21:56,160
Er zijn nog een paar details die moeten worden opgehelderd.

356
00:21:56,300 --> 00:21:59,348
Eerder zei ik dat het werkbewijs zou kunnen bestaan uit het vinden 

357
00:21:59,348 --> 00:22:02,580
van een speciaal getal zodat de hash van het blok begint met 60 nullen.

358
00:22:03,220 --> 00:22:07,560
Nou, de manier waarop het Bitcoin protocol werkt is om periodiek het aantal 

359
00:22:07,560 --> 00:22:11,900
nullen te veranderen zodat het 10 minuten duurt om een nieuw blok te vinden.

360
00:22:12,780 --> 00:22:16,412
Dus naarmate er meer en meer miners aan het netwerk worden toegevoegd, 

361
00:22:16,412 --> 00:22:19,532
wordt de uitdaging steeds moeilijker op zo'n manier dat deze 

362
00:22:19,532 --> 00:22:22,960
miniatuurloterij slechts ongeveer één winnaar per 10 minuten heeft.

363
00:22:23,920 --> 00:22:27,880
Veel nieuwere cryptocurrencies hebben veel kortere blokkeertijden dan dat.

364
00:22:28,580 --> 00:22:32,460
En al het geld in Bitcoin komt uiteindelijk van een of andere blokbeloning.

365
00:22:32,920 --> 00:22:35,740
In het begin waren deze beloningen 50 Bitcoin per blok.

366
00:22:36,140 --> 00:22:38,565
Er is een geweldige website genaamd Block Explorer 

367
00:22:38,565 --> 00:22:41,420
waarmee je eenvoudig door de Bitcoin blockchain kunt kijken.

368
00:22:41,960 --> 00:22:44,924
En als je kijkt naar de allereerste blokken op de keten, 

369
00:22:44,924 --> 00:22:49,240
dan bevatten die geen andere transacties dan die 50 Bitcoin beloning voor de miner.

370
00:22:49,860 --> 00:22:56,340
Maar elke 210.000 blokken, wat ongeveer elke 4 jaar is, wordt die beloning gehalveerd.

371
00:22:56,860 --> 00:23:00,140
Dus op dit moment is de beloning 12,5 Bitcoin per blok.

372
00:23:00,720 --> 00:23:04,534
En omdat deze beloning geometrisch afneemt in de tijd, 

373
00:23:04,534 --> 00:23:09,320
betekent dit dat er nooit meer dan 21 miljoen Bitcoin zullen bestaan.

374
00:23:10,280 --> 00:23:13,280
Dit betekent echter niet dat mijnwerkers geen geld meer zullen verdienen.

375
00:23:13,820 --> 00:23:17,940
Naast de blokbeloning kunnen miners ook transactiekosten innen.

376
00:23:18,520 --> 00:23:21,900
De manier waarop dit werkt is dat wanneer je een betaling doet, 

377
00:23:21,900 --> 00:23:25,070
je er puur optioneel een transactievergoeding bij kunt doen 

378
00:23:25,070 --> 00:23:28,240
die naar de miner gaat van het blok waarin die betaling zit.

379
00:23:29,020 --> 00:23:32,470
De reden waarom je dat zou kunnen doen is om miners te stimuleren 

380
00:23:32,470 --> 00:23:35,920
om de transactie die je uitzendt op te nemen in het volgende blok.

381
00:23:36,440 --> 00:23:41,365
In Bitcoin is elk blok beperkt tot ongeveer 2400 transacties, 

382
00:23:41,365 --> 00:23:45,020
wat volgens veel critici onnodig beperkend is.

383
00:23:45,860 --> 00:23:50,742
Ter vergelijking: Visa verwerkt gemiddeld zo'n 1700 transacties 

384
00:23:50,742 --> 00:23:55,320
per seconde en kan er meer dan 24.000 per seconde verwerken.

385
00:23:56,020 --> 00:24:01,047
Deze relatief langzame verwerking op Bitcoin zorgt voor hogere transactiekosten, 

386
00:24:01,047 --> 00:24:06,200
omdat dat bepaalt welke transacties miners kiezen om op te nemen in een nieuw blok.

387
00:24:07,820 --> 00:24:11,500
Dit alles is verre van een uitgebreide beschrijving van cryptocurrencies.

388
00:24:12,160 --> 00:24:14,589
Er zijn nog veel nuances en alternatieve ontwerpkeuzes 

389
00:24:14,589 --> 00:24:16,180
die ik nog niet eens heb aangeraakt.

390
00:24:16,640 --> 00:24:20,500
Maar ik hoop dat dit een stabiele WaitButWhy-stijl van begrip kan bieden 

391
00:24:20,500 --> 00:24:24,360
voor iedereen die nog een paar takken wil toevoegen door verder te lezen.

392
00:24:25,180 --> 00:24:28,991
Zoals ik in het begin al zei, is een van de motieven hierachter dat er veel geld is 

393
00:24:28,991 --> 00:24:32,711
gaan naar cryptocurrencies, en hoewel ik geen uitspraken wil doen over of dat een 

394
00:24:32,711 --> 00:24:36,568
goede of slechte investering is, denk ik echt dat het gezond is voor mensen die zich 

395
00:24:36,568 --> 00:24:40,380
in het spel storten om op zijn minst de basisprincipes van de technologie te kennen.

396
00:24:41,340 --> 00:24:43,315
Zoals altijd gaat mijn oprechte dank uit naar 

397
00:24:43,315 --> 00:24:45,420
degenen die dit kanaal mogelijk maken op Patreon.

398
00:24:46,080 --> 00:24:48,911
Ik begrijp dat niet iedereen in de positie is om een bijdrage te leveren, 

399
00:24:48,911 --> 00:24:50,862
maar als je toch geïnteresseerd bent om te helpen, 

400
00:24:50,862 --> 00:24:53,579
dan is een van de beste manieren om dat te doen simpelweg door video's 

401
00:24:53,579 --> 00:24:56,640
te delen waarvan je denkt dat ze interessant of nuttig kunnen zijn voor anderen.

402
00:24:57,280 --> 00:24:59,320
Ik weet dat je dat weet, maar het helpt echt.

