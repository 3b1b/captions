1
00:00:00,000 --> 00:00:09,660
ビットコインを持つとはどういう意味ですか?多くの人がビットコインについて聞いたことがあるでし

2
00:00:09,660 --> 00:00:14,120
ょう。ビットコインは政府が発行しない完全なデジタル通貨であり、銀行が口座を管理したり取引

3
00:00:14,120 --> 00:00:19,800
を確認したりする必要がなく、誰が発明したのか実際には誰も知らないということです。しかし、

4
00:00:19,800 --> 00:00:25,320
多くの人はこの質問に対する答えを、少なくとも完全には知りません。そこに到達する

5
00:00:25,320 --> 00:00:29,940
ために、そして答えの根底にある技術的な詳細が実際に動機を感じられるようにするために

6
00:00:29,980 --> 00:00:34,660
、あなたが独自のバージョンのビットコインをどのように発明したかを段階的に説明して

7
00:00:34,660 --> 00:00:38,880
いきます。まず、共有台帳を使用して友人との支払いを追跡します。その後、友

8
00:00:38,880 --> 00:00:43,580
人や周囲の世界をますます信頼しなくなり始め、賢明であれば、友人からい

9
00:00:43,580 --> 00:00:47,900
くつかのアイデアを取り入れることができます。信頼の必要性を回避するた

10
00:00:47,900 --> 00:00:52,900
めに暗号化を利用すると、最終的には暗号通貨と呼ばれるものになります。

11
00:00:53,620 --> 00:01:00,120
ビットコインは、暗号通貨の最初に実装された例にすぎませんが、現在ではさらに数千もの

12
00:01:00,120 --> 00:01:05,100
暗号通貨が従来の通貨と交換されています。独自のものを発明する道を歩むことは

13
00:01:05,100 --> 00:01:09,540
、ゲームの最近のプレイヤーを理解し、異なるデザインを選択する余地が

14
00:01:09,540 --> 00:01:14,660
ある時期と理由を認識するための基礎を築くのに役立ちます。実際、私がこ

15
00:01:14,660 --> 00:01:18,560
のトピックを選んだ理由の 1 つは、昨年、これらの通貨に対して多大

16
00:01:18,560 --> 00:01:25,280
な注目、投資、誇大広告が向けられてきたからです。現在または将来の為替レートにつ

17
00:01:25,280 --> 00:01:29,700
いてコメントしたり推測したりするつもりはありませんが、仮想通貨を購入しようとしている人はそれが何で

18
00:01:29,700 --> 00:01:34,680
あるかを本当に知っておくべきだということには誰もが同意すると思います。そして、私が言いたいのは

19
00:01:34,680 --> 00:01:40,280
、単に金の採掘との漠然とした関連性の例えという意味ではなく、私たちが暗号通貨を送受

20
00:01:40,280 --> 00:01:46,920
信し、作成するときにコンピューターが何をしているのかを実際に直接説明したことです。

21
00:01:46,920 --> 00:01:51,400
一つ強調しておきたいのは、あなたと私がここで詳細を掘り下げるつもりであり、それ

22
00:01:51,400 --> 00:01:56,340
には有意義な時間がかかるとしても、仮想通貨を使いたいだけなら、実際にはその詳細

23
00:01:56,340 --> 00:02:00,580
を知る必要はないということです。クレジット カードをスワイプしたときに内部で

24
00:02:00,580 --> 00:02:05,400
何が起こっているかの詳細を知る必要はありません。他のデジタル決済と同様に、何

25
00:02:05,400 --> 00:02:09,760
が起こっているかを考えずに通貨を送受信できるユーザーフレンドリーなアプリケーシ

26
00:02:09,760 --> 00:02:15,220
ョンがたくさんあります。違いは、この基盤となるバックボーンが取引を検証す

27
00:02:15,220 --> 00:02:20,700
る銀行ではないことです。代わりに、これは暗号化で生まれた数学の

28
00:02:20,700 --> 00:02:25,980
一部に基づいた、分散型トラストレス検証の賢いシステムです。

29
00:02:25,980 --> 00:02:29,380
しかし、まず最初に、仮想通貨やその他すべてについての考えを数分間だけ脇に置

30
00:02:29,380 --> 00:02:33,700
いてみてください。台帳とデジタル署名という、より現実的なもの

31
00:02:33,700 --> 00:02:39,380
から話を始めます。あなたと友達が夕食代の分担金などを頻

32
00:02:39,380 --> 00:02:43,580
繁に交換する場合、常に現金を交換するのは不便かもしれま

33
00:02:43,580 --> 00:02:46,940
せん。したがって、将来のある時点で行う予定のすべての支払いを記録

34
00:02:46,940 --> 00:02:52,820
する共有台帳を保管しておくとよいでしょう。アリスはボブに 20 ドルを支払い、ボブ

35
00:02:52,820 --> 00:02:57,860
はチャーリーに 40 ドルを支払います。この台帳は、誰でもアクセスして新しい行を追加できる

36
00:02:57,860 --> 00:03:02,620
Web サイトのように、公開されて誰でもアクセスできるものになります。

37
00:03:02,620 --> 00:03:06,100
そして、毎月の終わりに全員が集まり、取引のリストを見て、決済

38
00:03:06,100 --> 00:03:10,580
したとしましょう。受け取った額よりも使った場合は、そのお金をポットに

39
00:03:10,580 --> 00:03:15,480
入れ、受け取った額が使った額より多かった場合は、そのお金を取り出します。

40
00:03:15,480 --> 00:03:20,280
したがって、この非常に単純なシステムの一部となるためのプロトコルは次のようになります。誰でも

41
00:03:20,280 --> 00:03:24,900
台帳に線を追加でき、毎月月末に全員が集まって精算します

42
00:03:24,900 --> 00:03:28,300
。このような公開台帳の問題の 1 つは、誰でも行を追

43
00:03:28,300 --> 00:03:33,920
加できることです。それでは、ボブがアリスの承認なしにアリスがボブに 100 ドルを支払

44
00:03:33,920 --> 00:03:39,940
うと書くのを防ぐにはどうすればよいでしょうか?これらすべてのトランザクションが送信

45
00:03:39,940 --> 00:03:45,020
者が意図したものであるとどうやって信じればよいのでしょうか?

46
00:03:45,020 --> 00:03:50,660
ここで、暗号化の最初の部分であるデジタル署名が登場します。手書きの署名と同

47
00:03:50,660 --> 00:03:55,800
様に、ここでの考え方は、アリスがトランザクションを見て承認したことを証明する何かを

48
00:03:55,800 --> 00:04:01,260
そのトランザクションの隣に追加できるべきであり、その署名は他人が偽造できないようにす

49
00:04:01,260 --> 00:04:07,380
る必要があるということです。最初は、デジタル署名は不可能であるように思え

50
00:04:07,380 --> 00:04:12,620
るかもしれません。つまり、署名を構成するデータはすべて、コンピューターによって

51
00:04:12,620 --> 00:04:17,460
読み取られ、コピーされるだけです。では、どうすれば偽造を防ぐことができるのでしょうか？

52
00:04:17,460 --> 00:04:22,180
これがどのように機能するかというと、全員が公開鍵と秘密鍵のペアと呼ばれるものを生成します

53
00:04:22,180 --> 00:04:26,420
。それぞれのペアはビット列のように見えます。秘密キーは秘密キーと呼ばれることもあるの

54
00:04:26,420 --> 00:04:32,460
で、公開キーを PK と略す一方で、秘密キーを SK と略すこともできます。

55
00:04:32,460 --> 00:04:37,140
名前が示すように、この秘密鍵は自分だけの秘密にしておきたいものです。

56
00:04:37,140 --> 00:04:41,940
現実の世界では、どのような文書に署名しても、手書きの署名は同じように見えま

57
00:04:41,940 --> 00:04:46,780
す。しかし、デジタル署名はメッセージごとに変わるため、実際にははるかに強力

58
00:04:46,780 --> 00:04:53,420
です。これは 1 と 0 の文字列のように見え、通常は 256 ビットのような

59
00:04:53,420 --> 00:04:58,700
もので、メッセージを少しでも変更すると、そのメッセージの署名がどのようになるか

60
00:04:58,700 --> 00:05:03,220
が完全に変わります。もう少し形式的に言えば、署名の生成には、メ

61
00:05:03,220 --> 00:05:08,200
ッセージ自体と秘密キーの両方に依存する機能が含まれます。

62
00:05:08,200 --> 00:05:13,540
秘密キーは、その署名を作成できるのはあなただけであることを保証します。また、秘密キーがメッセ

63
00:05:13,540 --> 00:05:18,420
ージに依存しているという事実は、誰もあなたの署名の 1 つをコピーして別のメッセージに偽造するこ

64
00:05:18,420 --> 00:05:23,320
とはできないことを意味します。これと連携して、署名が有効であることを検証する

65
00:05:23,320 --> 00:05:27,820
ために使用される 2 番目の機能があり、ここで公開キーが登場します

66
00:05:27,820 --> 00:05:33,460
。実行するのは、これが検証に使用している公開キーに関連付けられた秘密キーによって生成

67
00:05:33,460 --> 00:05:37,860
された署名であるかどうかを示す true または false を出力することだけです。

68
00:05:37,860 --> 00:05:43,260
これらの両方の関数がどのように正確に機能するかについては詳しく説明しませんが、秘

69
00:05:43,260 --> 00:05:48,260
密キーが分からない場合、有効な署名を見つけることは完全に不可能であるべきだとい

70
00:05:48,260 --> 00:05:53,520
う考えです。具体的には、ランダムな署名を推測してチェックすることより優れた戦

71
00:05:53,520 --> 00:05:59,080
略はありません。署名は、誰もが知っている公開キーを使用してチェックできます。

72
00:05:59,080 --> 00:06:04,500
ここで、長さが 256 ビットの署名がいくつあるかを考えてみましょう。それは 2

73
00:06:04,500 --> 00:06:11,520
の 256 乗です。これは馬鹿げたほど大きな数字です。それを天文学的に大きいと呼ぶのは、天

74
00:06:11,520 --> 00:06:16,840
文学を過大評価することになるでしょう。実際、これがどれほど膨大な数で

75
00:06:16,840 --> 00:06:20,480
あるかを説明するためだけに、補足ビデオを作成しました。

76
00:06:20,480 --> 00:06:24,680
ただし、ここでは、特定のメッセージに対する署名が有効であることを検証するとき

77
00:06:24,680 --> 00:06:29,900
に、誰かが署名を作成できる唯一の方法は、検証に使用した公開鍵に関連付けられ

78
00:06:29,900 --> 00:06:37,360
た秘密鍵を知っている場合であると非常に確信できるとだけ言っておきます。 。

79
00:06:37,360 --> 00:06:41,880
人々が台帳に取引に署名するようにすることは非常に良いことですが、わずかな抜け穴が 1 つあ

80
00:06:41,880 --> 00:06:48,240
ります。アリスがボブに 100 ドルを支払うように、アリスがトランザクションに署名した

81
00:06:48,240 --> 00:06:52,760
場合、ボブは新しいメッセージにアリスの署名を偽造できませんが、その同じ行を何度でもコピ

82
00:06:52,760 --> 00:06:58,040
ーすることができます。そのメッセージと署名の組み合わせは引き続き有効です。

83
00:06:58,040 --> 00:07:02,780
これを回避するために、トランザクションに署名するときに、そのトランザクションに関連付けられ

84
00:07:02,780 --> 00:07:08,860
たある種の一意の ID もメッセージに含める必要があるようにしました。そうすること

85
00:07:08,860 --> 00:07:14,480
で、アリスがボブに 100 ドルを複数回支払う場合、

86
00:07:14,480 --> 00:07:18,400
台帳上の各行にはまったく新しい署名が必要になります。

87
00:07:18,400 --> 00:07:23,600
デジタル署名は、この初期プロトコルの信頼性の大きな側面を取り除きます。しかし、それでも

88
00:07:23,600 --> 00:07:27,880
、本当にこれをやろうとすると、ある種の名誉システムに依存することになるでしょう。つまり、

89
00:07:27,880 --> 00:07:31,860
誰もが実際に手続きを進めて、毎月末に現金で決済するだろうと信じていること

90
00:07:31,860 --> 00:07:37,680
になります。たとえば、チャーリーが数千ドルの借金を抱えていて、ただ出席することを拒否し

91
00:07:37,680 --> 00:07:43,520
たらどうなるでしょうか?解決のために現金に戻る唯一の本当の理由は、多額の借金を抱

92
00:07:43,560 --> 00:07:50,560
えている人がいる場合です。したがって、人々が摂取額を超えて支出することを防ぐ

93
00:07:50,720 --> 00:07:55,160
何らかの方法がある限り、実際に現金で決済する必要はないという賢明な考えを

94
00:07:55,160 --> 00:08:01,160
お持ちかもしれません。おそらく、全員にポットに 100 ドルを支払わせ

95
00:08:01,160 --> 00:08:06,920
ることから始めて、アリスが 100 ドル、ボブが 100 ドル、チャ

96
00:08:06,920 --> 00:08:09,280
ーリーが 100 ドルというように台帳の最初の数行を読み取らせます。

97
00:08:09,280 --> 00:08:14,600
さて、誰かがその台帳にすでに持っている以上のお金を費やしている取引は受け入れ

98
00:08:14,600 --> 00:08:21,600
ないでください。たとえば、最初の 2 つのトランザクションが、チャーリーがアリスに 50 ドルを支払い、

99
00:08:22,200 --> 00:08:28,880
チャーリーがボブに 50 ドルを支払う場合、チャーリーがあなたに 20 ドルを支払うと追加しようとした場合、それ

100
00:08:28,880 --> 00:08:35,880
は無効となり、署名しなかったかのように無効になります。これは、トランザクションを検証するには、その時点

101
00:08:35,920 --> 00:08:42,200
までのトランザクションの完全な履歴を知る必要があることを意味します。これは仮想通貨

102
00:08:42,200 --> 00:08:47,200
にも当てはまりますが、最適化の余地は少しあります。

103
00:08:47,200 --> 00:08:53,360
ここで興味深いのは、このステップにより元帳と実際の物理的な米ドルとの関係

104
00:08:53,360 --> 00:08:59,760
が削除されることです。理論的には、世界中の誰もがこの台帳を使用してい

105
00:08:59,760 --> 00:09:03,960
れば、実際の米ドルに両替することなく、この台帳でお金を送受信するだけ

106
00:09:04,160 --> 00:09:09,160
で一生を過ごすことができます。実際、この点を強調するために、元帳

107
00:09:09,160 --> 00:09:15,680
上の数量を元帳ドル (略して LD) と呼び始めましょう。元帳ド

108
00:09:15,680 --> 00:09:21,520
ルを実際の米ドルに自由に交換できます。たとえば、アリスは、ボブがアリスに 1

109
00:09:21,520 --> 00:09:26,560
0 ドルの元帳ドルをこの共通元帳に支払うトランザクションを追加して署名するのと引き換えに

110
00:09:26,560 --> 00:09:33,460
、現実世界でボブに 10 ドル紙幣を渡します。しかし、そのような交換はプロトコルによって保証

111
00:09:33,460 --> 00:09:38,500
されていません。これは、公開市場でドルをユーロやその他の通貨

112
00:09:38,500 --> 00:09:44,940
に交換する方法に似ています。それはそれ自体が独立したものです。

113
00:09:44,940 --> 00:09:50,980
これは、ビットコインやその他の暗号通貨について理解しておくべき最初の重要なことです。

114
00:09:50,980 --> 00:09:57,980
それは何かというと台帳です。取引履歴が通貨です。もちろん、ビットコインの

115
00:09:58,660 --> 00:10:02,640
場合、人々が現金を使って購入するため、お金は台帳に記録されません。新しいお金が台帳にどのよ

116
00:10:02,640 --> 00:10:07,320
うに入力されるかについては、数分で説明します。しかしその前に、現在の台帳ドルシス

117
00:10:07,320 --> 00:10:12,240
テムと暗号通貨の仕組みとの間には、実際にはさらに大きな違いがありま

118
00:10:12,240 --> 00:10:15,120
す。これまでのところ、この台帳は、誰でも新しい行を追加できる Web

119
00:10:15,120 --> 00:10:20,020
サイトなどの公共の場所にあると述べてきました。しかしそれには、中央の場所、

120
00:10:20,020 --> 00:10:25,960
つまり誰が Web サイトをホストし、誰が新しい行の追加ルールを管理しているのかを信頼する必要が

121
00:10:25,960 --> 00:10:31,880
あります。この少しの信頼を取り除くために、全員に台帳のコピーを自分で保管してもらいま

122
00:10:31,880 --> 00:10:37,640
す。次に、アリスがボブに 100 台帳ドルを支払うように、取引をしたいときは、それを世界

123
00:10:37,640 --> 00:10:44,640
中にブロードキャストして、人々が聞いて自分のプライベート台帳に記録できるようにします。

124
00:10:45,240 --> 00:10:50,720
しかし、もっと何かしなければ、このシステムはとんでもなく悪いです。正しい台帳とは何かについて全員の

125
00:10:50,720 --> 00:10:55,900
合意を得るにはどうすればよいでしょうか?アリスがボブに 10 台帳ドルを支払うように、ボブがトラン

126
00:10:55,900 --> 00:11:00,820
ザクションを受け取ったとき、他の全員が同じトランザクションを受け取り、信じていることをどうやって確認

127
00:11:00,820 --> 00:11:05,220
できるでしょうか?彼は後でチャーリーのところに行き、その同じ 10 台帳ドルを使っ

128
00:11:05,220 --> 00:11:10,500
て取引を行うことができるのでしょうか?実際に、ブロードキャストされるトランザクションを聞いて

129
00:11:10,500 --> 00:11:15,860
いるだけだと想像してみてください。他の全員が同じトランザクションを同じ順序で記録している

130
00:11:15,860 --> 00:11:21,660
ことをどうやって確認できるでしょうか?これが本当に問題の核心です。これは

131
00:11:21,660 --> 00:11:26,740
興味深いパズルです。取引を承認または拒否する方法とその順序についてのプ

132
00:11:26,780 --> 00:11:31,940
ロトコルを思いつき、その同じプロトコルに従っている世界中の誰かがあなた

133
00:11:31,940 --> 00:11:36,980
と同じように見える個人台帳を持っていると確信できるようにすることはでき

134
00:11:36,980 --> 00:11:43,980
ますか?これは、ビットコインのオリジナル論文で取り上げられた問題です。

135
00:11:44,620 --> 00:11:49,300
大まかに言えば、ビットコインが提供する解決策は、最も多くの計算作業が投入

136
00:11:49,300 --> 00:11:54,700
された台帳を信頼することです。それが何を意味するのか、少し説明します

137
00:11:54,700 --> 00:12:00,660
。これには暗号化ハッシュ関数が含まれます。私たちが構築する一般的なアイデアは

138
00:12:00,660 --> 00:12:06,140
、何を信頼するかの基礎として計算作業を使用すると、不正な取引や台帳の矛盾を

139
00:12:06,140 --> 00:12:11,460
引き起こすために実行不可能な量の計算が必要になるようにすることができるとい

140
00:12:11,460 --> 00:12:16,340
うものです。繰り返しますが、このような通貨を使用するために誰もが知る必要がある

141
00:12:16,340 --> 00:12:20,240
ことを超えて、この問題は雑草の中に深く入り込んでいることを思い出してください。

142
00:12:20,240 --> 00:12:25,280
しかし、これは本当に素晴らしいアイデアであり、それを理解すれば、ビットコインや他の暗号通貨の

143
00:12:25,280 --> 00:12:30,880
核心を理解することができます。まず最初に、ハッシュ関数とは何でしょうか?

144
00:12:30,880 --> 00:12:34,600
これらの関数の 1 つの入力には、どのような種類のメッセージまたはファイルを使用してもかまいません。実際には、それは重

145
00:12:34,600 --> 00:12:39,200
要ではありません。そして出力は、256 ビットなど、ある種の固定長のビット列

146
00:12:39,200 --> 00:12:46,240
です。この出力は、メッセージのハッシュまたはダイジェストと呼ばれます。そしてその意図は、ラン

147
00:12:46,240 --> 00:12:52,400
ダムに見えることです。これはランダムではなく、指定された入力に対して常に同じ出力を返します。

148
00:12:52,400 --> 00:12:58,040
ただし、入力をわずかに変更すると (文字の 1 つだけを編集するなど)、結果のハッ

149
00:12:58,040 --> 00:13:03,040
シュが完全に変化するという考えです。実際、ここで示している SHA256 と呼ばれる

150
00:13:03,040 --> 00:13:10,520
ハッシュ関数では、入力をわずかに変更したときに出力がどのように変化するかはまったく予測

151
00:13:10,520 --> 00:13:17,480
できません。ご存知のとおり、これは単なるハッシュ関数ではなく、暗号化ハッシュ関数です。

152
00:13:17,480 --> 00:13:22,120
つまり、逆方向の計算は不可能です。1 と 0 の文字列

153
00:13:22,120 --> 00:13:28,880
を示して、その入力の SHA256 ハッシュがこの正確なビット文字列を与えるように

154
00:13:28,880 --> 00:13:35,280
入力を見つけるように依頼した場合、単に推測して確認するより良い方法はありません。

155
00:13:35,280 --> 00:13:39,680
繰り返しになりますが、2 対 256 の推測を行うのにどれだけの計算が必

156
00:13:39,680 --> 00:13:45,160
要になるかを知りたい場合は、補足ビデオをご覧ください。実際、それを書く

157
00:13:45,160 --> 00:13:51,000
のがとても楽しかったです。この関数がどのように正確に機能するかを詳しく調

158
00:13:51,000 --> 00:13:55,760
べれば、推測したり確認したりすることなく、適切な入力をリバース エンジニアリ

159
00:13:55,760 --> 00:14:01,440
ングできると思うかもしれません。しかし、それを実現する方法を考え出した人は誰もいません。

160
00:14:01,440 --> 00:14:06,400
興味深いことに、逆方向の計算が難しいという厳密な証拠はありませ

161
00:14:06,400 --> 00:14:12,480
ん。それでも、現代のセキュリティの大部分は、暗号化ハッシュ関数と、暗号化ハッシュ関数がこの特

162
00:14:12,480 --> 00:14:16,920
性を持っているという考えに依存しています。現在、ブラウザーが YouTube との間で確立し

163
00:14:16,920 --> 00:14:21,040
ている安全な接続、またはブラウザーが銀行との間で確立している安全な接続の基礎となっているア

164
00:14:21,040 --> 00:14:27,440
ルゴリズムを調べてみると、おそらくそこに SHA256 という名前が表示されるでしょう。

165
00:14:27,440 --> 00:14:32,080
現時点では、このような関数がトランザクションの特定のリストが大量の

166
00:14:32,080 --> 00:14:38,360
計算量に関連していることをどのように証明できるかに焦点を当てます。

167
00:14:38,360 --> 00:14:43,180
誰かがトランザクションのリストを見せて、「特別な番号を見つけたので、その番号をこのトランザ

168
00:14:43,180 --> 00:14:48,680
クションのリストの最後に置き、全体に SHA256 を適用すると、その出力の最初の 30

169
00:14:48,680 --> 00:14:54,620
ビットが表示される」と言うところを想像してください。はすべてゼロです。彼らにとってその番号

170
00:14:54,620 --> 00:15:00,400
を見つけるのはどれほど大変だったと思いますか?ランダムなメッセージの場合、ハッシュが 3

171
00:15:00,400 --> 00:15:07,720
0 個の連続するゼロで始まる確率は 230 分の 1、つまり約 10 億分の 1

172
00:15:07,720 --> 00:15:13,720
です。また、SHA256 は暗号化ハッシュ関数であるため、そのような特別な数値を見つける

173
00:15:13,720 --> 00:15:18,680
唯一の方法は、推測して確認することだけです。したがって、この人はほぼ確実に、この特別

174
00:15:18,680 --> 00:15:23,620
な番号を見つけるまでに約 10 億もの異なる番号を調べる必要がありました。その数値

175
00:15:23,620 --> 00:15:27,800
がわかれば、検証は非常に簡単です。ハッシュを実行すると、ゼロが 30 個あ

176
00:15:27,800 --> 00:15:31,800
ることがわかります。つまり、自分自身が同じ労力を費やすこと

177
00:15:31,800 --> 00:15:37,420
なく、彼らが膨大な作業を行ったことを検証できます。

178
00:15:37,420 --> 00:15:42,740
これを作業証明と呼びます。そして重要なことに、この作業はすべて本質的にトランザクションのリス

179
00:15:42,740 --> 00:15:48,240
トに関連付けられています。これらのトランザクションの 1 つをわずかでも変更すると、ハッシュが

180
00:15:48,240 --> 00:15:52,720
完全に変更されてしまいます。したがって、新しいプルーフ オブ ワーク、つまりリストのハッシュが

181
00:15:52,720 --> 00:15:59,680
30 個のゼロで始まるようにする新しい番号を見つけるには、さらに 10 億回の推測を行う必

182
00:15:59,680 --> 00:16:03,480
要があります。それでは、分散台帳の状況を振り返ってみましょ

183
00:16:03,480 --> 00:16:08,340
う。誰もが取引をブロードキャストしているので、正しい元帳が何であるかについて

184
00:16:08,340 --> 00:16:14,080
彼らが同意する方法が必要です。先ほども述べたように、元のビットコイン論文の背後にある

185
00:16:14,080 --> 00:16:19,440
中心的なアイデアは、最も多くの労力が費やされた台帳を誰もが信頼できるようにすることです。

186
00:16:19,440 --> 00:16:24,060
これが機能する方法は、まず特定の元帳をブロックに編成することです。各ブロ

187
00:16:24,060 --> 00:16:29,080
ックは、トランザクションのリストと作業証明、つまり、ブロック全体のハッ

188
00:16:29,080 --> 00:16:33,960
シュがゼロの束で始まる特別な番号で構成されます。 。現時点では、60

189
00:16:33,960 --> 00:16:39,340
個のゼロから始める必要があるとします。ただし、後で、その数を選択するため

190
00:16:39,340 --> 00:16:43,920
のより体系的な方法に戻ります。トランザクションが送信者によって署名された場

191
00:16:43,920 --> 00:16:48,660
合にのみ有効であるとみなされるのと同じように、ブロックは作業証明がある場合にのみ

192
00:16:48,660 --> 00:16:53,280
有効であるとみなされます。また、これらのブロックに標準的な順序があること

193
00:16:53,280 --> 00:16:58,380
を確認するために、ブロックのヘッダーに前のブロックのハッシュが含まれる

194
00:16:58,380 --> 00:17:03,620
ようにします。そうすれば、戻っていずれかのブロックを変更したり、2 つの

195
00:17:03,620 --> 00:17:08,380
ブロックの順序を交換したりすると、その後に来るブロックが変更され、そのブロ

196
00:17:08,380 --> 00:17:14,140
ックのハッシュが変更され、その後に来るブロックも変更されます。 、 等々。

197
00:17:14,140 --> 00:17:18,300
そのためには、すべての作業をやり直す必要があり、各ブロックのハッシュが 60 個のゼロ

198
00:17:18,340 --> 00:17:24,080
で始まる新しい特別な番号を見つける必要があります。このようにブロックが連鎖してい

199
00:17:24,080 --> 00:17:30,160
るため、台帳と呼ぶのではなくブロックチェーンと呼ぶのが一般的です。

200
00:17:30,160 --> 00:17:35,340
アップデートされたプロトコルの一環として、世界中の誰でもブロック作成者になれるようになります。

201
00:17:35,340 --> 00:17:39,300
これが意味するのは、ブロードキャストされているトランザクションをリッスンし、それらを

202
00:17:39,300 --> 00:17:43,760
いくつかのブロックに収集し、そのブロックのハッシュが 60 個のゼロで始まる特別な

203
00:17:43,760 --> 00:17:48,800
番号を見つけるために大量の作業を行うことです。ブロックを見つけると、見つけたブロック

204
00:17:48,800 --> 00:17:53,640
をブロードキャストします。ブロック作成者にこのすべての作業に報酬を与えるために、彼女がブロック

205
00:17:53,640 --> 00:17:57,960
を組み立てるときに、ブロックの先頭に非常に特別なトランザクションを含めることを許可します。その

206
00:17:57,960 --> 00:18:03,720
トランザクションで、彼女は、たとえば、何もないところから 10 元帳ドルを獲得します。これはブ

207
00:18:03,720 --> 00:18:08,340
ロック報酬と呼ばれ、トランザクションを受け入れるかどうかに関する通常のル

208
00:18:08,340 --> 00:18:13,780
ールの例外です。誰かからのものではないので、署名する必要はありません。

209
00:18:13,780 --> 00:18:18,900
それはまた、私たちの経済における元帳ドルの総数が新しいブロックごとに増加することを意味

210
00:18:18,900 --> 00:18:25,340
します。ブロックの作成は、多くの作業を必要とし、経済に新しい通

211
00:18:25,340 --> 00:18:29,220
貨を導入するため、マイニングと呼ばれることがよくあります。

212
00:18:29,220 --> 00:18:33,680
しかし、マイナーについて聞いたり読んだりするときは、彼らが実際に行っているのは、トランザクションを

213
00:18:33,680 --> 00:18:39,160
リッスンし、ブロックを作成し、それらのブロックをブロードキャストし、それによって新たな報酬を得ると

214
00:18:39,160 --> 00:18:44,220
いうことであることに留意してください。マイナーの観点から見ると、各ブロックはミニ

215
00:18:44,220 --> 00:18:48,360
チュアの宝くじのようなもので、幸運な 1 人がブロックのハッシュが多数

216
00:18:48,360 --> 00:18:54,040
のゼロで始まる特別な数字を見つけるまで、全員ができるだけ早く数字を推測

217
00:18:54,040 --> 00:18:59,720
し、その数字を獲得します。褒美。このシステムを単に支払いに使用したい人は

218
00:18:59,720 --> 00:19:04,280
、トランザクションを監視するのではなく、マイナーによってブロードキャストされ

219
00:19:04,280 --> 00:19:09,040
ているブロックだけを監視し、ブロックチェーンの自分の個人的なコピーを更新する

220
00:19:09,040 --> 00:19:13,280
ことになります。ここで、私たちのプロトコルに追加された重要な点は、トランザクション履

221
00:19:13,280 --> 00:19:18,680
歴が矛盾する 2 つの異なるブロックチェーンを聞いた場合、最も長いブロックチェーン、つまり

222
00:19:18,680 --> 00:19:24,400
最も多くの労力が費やされたブロックチェーンを優先することです。同点の場合は、ど

223
00:19:24,400 --> 00:19:28,800
ちらかが長くなる追加のブロックが聞こえるまで待ちます。

224
00:19:28,800 --> 00:19:32,780
したがって、中央の権威がなく、誰もが独自のブロックチェーンのコピーを

225
00:19:32,780 --> 00:19:37,620
維持しているとしても、最も多くの労力が費やされたブロックチェーンを優

226
00:19:37,620 --> 00:19:43,680
先することに全員が同意すれば、分散型の合意に達する方法が得られます。

227
00:19:43,680 --> 00:19:47,680
これがなぜ信頼できるシステムになるのかを確認し、どの時点で支払いが正当であると信頼す

228
00:19:47,680 --> 00:19:52,080
べきかを理解するには、このシステムを使用して誰かをだますために何が必要になるかを正確

229
00:19:52,080 --> 00:19:58,400
に説明することが非常に役立ちます。おそらく、アリスはボブを詐欺的なブロックで騙そうとしてい

230
00:19:58,400 --> 00:20:04,520
るのでしょう。つまり、彼女は彼に 100 台帳ドルを支払うことを含むブロックをネットワークの

231
00:20:04,520 --> 00:20:08,720
残りの部分にブロードキャストせずにブロックを送信しようとしています。そうすれば、他の誰もが彼女が

232
00:20:08,720 --> 00:20:14,280
その 100 ドルを持っているとまだ思っています。これを行うには、それぞれが独自のブロックで作業

233
00:20:14,280 --> 00:20:19,640
している他のすべてのマイナーよりも先に、有効な作業証明を見つけなければなりません。そして、それは

234
00:20:19,640 --> 00:20:23,960
間違いなく起こる可能性があります。もしかしたら、アリスがたまたまこのミニチュアの宝くじを他の人より先に当選させただけ

235
00:20:23,960 --> 00:20:30,120
かもしれません。しかし、ボブは依然として他のマイナーによるブロードキャストを聞くことにな

236
00:20:30,120 --> 00:20:35,400
るため、この不正なブロックを信じ続けるために、アリスはボブのブロックチェーンのこの特別

237
00:20:35,400 --> 00:20:40,180
なフォークに、彼が聞いているものとは異なるブロックを追加し続けるすべての作業を自分で

238
00:20:40,180 --> 00:20:45,520
行う必要があります。残りの鉱山労働者から。プロトコルに従って、ボブは常に自分が知っている最長

239
00:20:45,520 --> 00:20:51,120
のチェーンを信頼することを忘れないでください。アリスは、ネットワーク上の残りのマイナーを

240
00:20:51,120 --> 00:20:56,320
すべて合わせたよりも早くブロックを偶然見つけた場合、数ブロックの間これを維持で

241
00:20:56,320 --> 00:21:02,480
きるかもしれません。しかし、アリスが全マイナーのコンピューティング リソースの

242
00:21:02,480 --> 00:21:07,600
50% 近くを持っていない限り、他のマイナー全員が取り組んでいるブロックチェー

243
00:21:07,600 --> 00:21:12,840
ンが、アリスがボブに与えている単一の不正なブロックチェーンよりも速く成長する可能

244
00:21:12,840 --> 00:21:17,960
性が圧倒的になります。したがって、十分な時間が経った後、ボブはアリスから聞

245
00:21:17,960 --> 00:21:22,160
いたことを拒否し、他の全員が取り組んでいるより長いチェーンを支持するつもり

246
00:21:22,160 --> 00:21:29,720
です。これは、すぐに聞こえた新しいブロックを必ずしも信頼する必要はなく、その上にいくつか

247
00:21:29,720 --> 00:21:34,800
の新しいブロックが追加されるまで待つ必要があることに注意してください。より長いブロックチェ

248
00:21:34,800 --> 00:21:39,200
ーンについてまだ聞いたことがない場合は、このブロックが他の人が使用しているのと同じチェ

249
00:21:39,200 --> 00:21:46,000
ーンの一部であると信頼できます。これで、主要なアイデアはすべて完成しました。

250
00:21:46,040 --> 00:21:50,960
作業証明に基づくこの分散台帳システムは、多かれ少なかれ、ビットコイン プロトコルがどのように機能するか

251
00:21:50,960 --> 00:21:55,800
、そして他の多くの暗号通貨がどのように機能するかに似ています。明確にする必要がある詳細がいくつかあります

252
00:21:55,800 --> 00:21:59,760
。先ほど、プルーフ・オブ・ワークとは、ブロックのハッシュが 60 個のゼロで始まるように特別な番

253
00:21:59,760 --> 00:22:04,920
号を見つけることであるかもしれないと言いました。実際のビットコイン プロトコルの仕組み

254
00:22:04,920 --> 00:22:10,160
は、新しいブロックを見つけるのに平均して 10 分かかるように、ゼロの数を定

255
00:22:10,160 --> 00:22:15,960
期的に変更することです。したがって、ネットワークに追加されるマイナーが増える

256
00:22:16,000 --> 00:22:20,880
につれて、このミニチュア宝くじの当選者は 10 分に 1 人程度になるまで、挑

257
00:22:20,880 --> 00:22:27,280
戦はますます難しくなります。多くの新しい暗号通貨のブロック時間はそれよりもはるかに

258
00:22:27,280 --> 00:22:30,800
短くなります。そして、ビットコインのお金はすべて、最終的には何らかのブロック

259
00:22:30,800 --> 00:22:36,400
報酬から得られます。当初、これらの報酬はブロックあたり 50 ビットコインでした。実際、Bl

260
00:22:36,400 --> 00:22:40,280
ock Explorer という素晴らしい Web サイトにアクセスすると、ビットコインのブロックチェ

261
00:22:40,280 --> 00:22:45,080
ーンを簡単に調べることができます。そして、チェーン上の最初の数ブロックを見ると、マイナーへ

262
00:22:45,080 --> 00:22:50,480
の 50 ビットコインの報酬以外のトランザクションは含まれていません。しかし、21

263
00:22:50,480 --> 00:22:57,720
0,000 ブロックごと、つまり約 4 年ごとに、その報酬は半分に減ります。現時点での報

264
00:22:57,720 --> 00:23:03,400
酬は12です。1ブロックあたり5ビットコイン。そして、この報酬は時間の経過とともに幾何級数的に減少する

265
00:23:03,400 --> 00:23:09,920
ため、2,100万ビットコインを超えるビットコインが存在することは決してないことを意味します。

266
00:23:09,920 --> 00:23:14,940
ただし、これはマイナーが収益を得るのをやめるという意味ではありません。ブロック報酬に加えて、マ

267
00:23:14,940 --> 00:23:19,760
イナーは取引手数料も受け取ることができます。これがどのように機能するかというと

268
00:23:19,760 --> 00:23:25,100
、支払いを行うたびに、その支払いが含まれるブロックのマイナーに送られる取引

269
00:23:25,100 --> 00:23:30,620
手数料を純粋にオプションで含めることができます。そうする理由は、ブロードキャス

270
00:23:30,620 --> 00:23:35,780
トするトランザクションを実際に次のブロックに含めるようマイナーにインセンティブを与えるた

271
00:23:35,780 --> 00:23:39,160
めです。ご存知のとおり、ビットコインでは各ブロックは約 2400 件のトランザクションに

272
00:23:39,160 --> 00:23:47,120
制限されており、これは不必要な制限であると多くの批評家が主張しています。比較のために、Vi

273
00:23:47,120 --> 00:23:53,080
sa は 1 秒あたり平均約 1700 件のトランザクションを処理し、1 秒あたり 24,000 件以上のト

274
00:23:53,080 --> 00:24:00,020
ランザクションを処理できます。ビットコインのこの比較的遅い処理により、トランザクション手数

275
00:24:00,020 --> 00:24:05,280
料が高くなります。これは、マイナーが新しいブロックにどのトランザクションを含めるかを

276
00:24:05,280 --> 00:24:10,760
決定するためです。これらすべては、暗号通貨を包括的にカバーしていると

277
00:24:10,760 --> 00:24:15,180
は言えません。私がまだ触れていないニュアンスや代替デザインの選択肢がまだ

278
00:24:15,180 --> 00:24:19,760
たくさんあります。しかし、私の希望は、これが、さらに読んで枝を追加したいと考えている

279
00:24:19,760 --> 00:24:25,320
人にとって、安定した、「待って、でもなぜ」スタイルの理解の木の幹を提供できることです。

280
00:24:25,320 --> 00:24:29,200
最初に述べたように、この背後にある動機の 1 つは、大量の資金が暗号通貨

281
00:24:29,200 --> 00:24:33,080
に流れ始めていることです。それが良い投資か悪い投資かについて主張す

282
00:24:33,080 --> 00:24:37,100
るつもりはありませんが、ゲームに参加する人々にとって、少なくと

283
00:24:37,100 --> 00:24:41,640
もテクノロジーの基礎を知っておくことは健全だと本当に思います。

284
00:24:41,640 --> 00:24:46,160
いつものように、Patreon でこのチャンネルを可能にしてくれた皆さんに心から感謝します。

285
00:24:46,160 --> 00:24:50,440
誰もが貢献できる立場にあるわけではないことは理解していますが、それでも協力することに興

286
00:24:50,440 --> 00:24:54,480
味がある場合、そのための最善の方法の 1 つは、単に他の人にとって興味深い、または役

287
00:24:54,480 --> 00:24:59,520
立つと思われるビデオを共有することです。ご存知かと思いますが、これは本当に役に立ちます。

