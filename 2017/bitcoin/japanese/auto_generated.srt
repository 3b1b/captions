1
00:00:03,899 --> 00:00:06,480
ビットコインを持つとはどういう意味ですか?

2
00:00:07,420 --> 00:00:10,444
多くの人がビットコインについて聞いたことがあるでし ょう。

3
00:00:10,444 --> 00:00:13,364
 ビットコインは政府が発行しない完全なデジタル通貨であり

4
00:00:13,364 --> 00:00:16,284
、銀行が口座を管理したり取引 を確認したりする必要がなく

5
00:00:16,284 --> 00:00:19,100
、誰が発明したのか実際には誰も知らないということです。

6
00:00:19,380 --> 00:00:21,277
しかし、 多くの人はこの質問に対する

7
00:00:21,277 --> 00:00:23,280
答えを、少なくとも完全には知りません。

8
00:00:24,100 --> 00:00:26,885
そこに到達する ために、そして答えの根底にある技

9
00:00:26,885 --> 00:00:29,902
術的な詳細が実際に動機を感じられるようにするために 

10
00:00:29,902 --> 00:00:32,687
、あなたが独自のバージョンのビットコインをどのよ

11
00:00:32,687 --> 00:00:35,240
うに発明したかを段階的に説明して いきます。

12
00:00:36,140 --> 00:00:39,260
まず、共有台帳を使用して友人との支払いを追跡します。

13
00:00:39,260 --> 00:00:42,500
 その後、友 人や周囲の世界をますます信頼しなくなり始

14
00:00:42,500 --> 00:00:45,740
め、賢明であれば、友人からい くつかのアイデアを取り入

15
00:00:45,740 --> 00:00:48,620
れることができます。 信頼の必要性を回避するた 

16
00:00:48,620 --> 00:00:51,860
めに暗号化を利用すると、最終的には暗号通貨と呼ばれるも

17
00:00:51,860 --> 00:00:52,700
のになります。

18
00:00:53,840 --> 00:00:56,652
ビットコインは、暗号通貨の最初に実装され

19
00:00:56,652 --> 00:00:59,747
た例にすぎませんが、現在ではさらに数千もの 

20
00:00:59,747 --> 00:01:02,560
暗号通貨が従来の通貨と交換されています。

21
00:01:03,300 --> 00:01:05,532
独自のものを発明する道を歩むことは 

22
00:01:05,532 --> 00:01:08,756
、ゲームの最近のプレイヤーを理解し、異なるデザインを

23
00:01:08,756 --> 00:01:11,979
選択する余地が ある時期と理由を認識するための基礎を

24
00:01:11,979 --> 00:01:13,220
築くのに役立ちます。

25
00:01:14,100 --> 00:01:17,041
実際、私がこ のトピックを選んだ理由の 

26
00:01:17,041 --> 00:01:20,130
1 つは、昨年、これらの通貨に対して多大 

27
00:01:20,130 --> 00:01:23,660
な注目、投資、誇大広告が向けられてきたからです。

28
00:01:24,280 --> 00:01:25,759
現在または将来の為替レートにつ 

29
00:01:25,759 --> 00:01:28,071
いてコメントしたり推測したりするつもりはありません

30
00:01:28,071 --> 00:01:30,383
が、仮想通貨を購入しようとしている人はそれが何で 

31
00:01:30,383 --> 00:01:32,695
あるかを本当に知っておくべきだということには誰もが

32
00:01:32,695 --> 00:01:33,620
同意すると思います。

33
00:01:33,920 --> 00:01:36,745
そして、私が言いたいのは 、単に金の採掘との漠然

34
00:01:36,745 --> 00:01:39,570
とした関連性の例えという意味ではなく、私たちが暗

35
00:01:39,570 --> 00:01:42,395
号通貨を送受 信し、作成するときにコンピューター

36
00:01:42,395 --> 00:01:45,220
が何をしているのかを実際に直接説明したことです。

37
00:01:46,300 --> 00:01:49,578
一つ強調しておきたいのは、あなたと私がここで詳細を掘り下

38
00:01:49,578 --> 00:01:52,856
げるつもりであり、それ には有意義な時間がかかるとしても

39
00:01:52,856 --> 00:01:55,666
、仮想通貨を使いたいだけなら、実際にはその詳細 

40
00:01:55,666 --> 00:01:57,539
を知る必要はないということです。

41
00:01:57,539 --> 00:02:00,350
 クレジット カードをスワイプしたときに内部で 

42
00:02:00,350 --> 00:02:03,160
何が起こっているかの詳細を知る必要はありません。

43
00:02:03,720 --> 00:02:06,228
他のデジタル決済と同様に、何 が起こっている

44
00:02:06,228 --> 00:02:08,737
かを考えずに通貨を送受信できるユーザーフレン

45
00:02:08,737 --> 00:02:11,360
ドリーなアプリケーシ ョンがたくさんあります。

46
00:02:11,660 --> 00:02:15,281
違いは、この基盤となるバックボーンが取引を検証す 

47
00:02:15,281 --> 00:02:17,020
る銀行ではないことです。

48
00:02:17,540 --> 00:02:20,372
代わりに、これは暗号化で生まれた数学の 

49
00:02:20,372 --> 00:02:24,480
一部に基づいた、分散型トラストレス検証の賢いシステムです。

50
00:02:25,900 --> 00:02:28,141
しかし、まず最初に、仮想通貨やその他すべてにつ

51
00:02:28,141 --> 00:02:30,480
いての考えを数分間だけ脇に置 いてみてください。

52
00:02:31,080 --> 00:02:34,131
台帳とデジタル署名という、より現実的なもの 

53
00:02:34,131 --> 00:02:35,380
から話を始めます。

54
00:02:36,340 --> 00:02:39,387
あなたと友達が夕食代の分担金などを頻 

55
00:02:39,387 --> 00:02:43,878
繁に交換する場合、常に現金を交換するのは不便かもしれま 

56
00:02:43,878 --> 00:02:44,360
せん。

57
00:02:44,720 --> 00:02:47,872
したがって、将来のある時点で行う予定のすべての支払いを記録 

58
00:02:47,872 --> 00:02:50,080
する共有台帳を保管しておくとよいでしょう。

59
00:02:50,620 --> 00:02:52,914
アリスはボブに 20 ドルを支払い、ボブ 

60
00:02:52,914 --> 00:02:55,100
はチャーリーに 40 ドルを支払います。

61
00:02:55,500 --> 00:02:58,159
この台帳は、誰でもアクセスして新しい行を追加できる 

62
00:02:58,159 --> 00:03:00,205
Web サイトのように、公開されて誰でも

63
00:03:00,205 --> 00:03:01,740
アクセスできるものになります。

64
00:03:02,480 --> 00:03:05,209
そして、毎月の終わりに全員が集まり、取引

65
00:03:05,209 --> 00:03:07,940
のリストを見て、決済 したとしましょう。

66
00:03:08,280 --> 00:03:10,846
受け取った額よりも使った場合は、そのお金をポットに 

67
00:03:10,846 --> 00:03:12,820
入れ、受け取った額が使った額より多かった

68
00:03:12,820 --> 00:03:14,400
場合は、そのお金を取り出します。

69
00:03:15,460 --> 00:03:17,364
したがって、この非常に単純なシステムの一部

70
00:03:17,364 --> 00:03:19,360
となるためのプロトコルは次のようになります。

71
00:03:20,020 --> 00:03:22,690
誰でも 台帳に線を追加でき、毎月

72
00:03:22,690 --> 00:03:25,360
月末に全員が集まって精算します。

73
00:03:26,300 --> 00:03:28,338
このような公開台帳の問題の 1 

74
00:03:28,338 --> 00:03:30,760
つは、誰でも行を追 加できることです。

75
00:03:31,020 --> 00:03:33,970
それでは、ボブがアリスの承認なしにアリスがボブに 100 

76
00:03:33,970 --> 00:03:36,920
ドルを支払 うと書くのを防ぐにはどうすればよいでしょうか?

77
00:03:37,780 --> 00:03:40,556
これらすべてのトランザクションが送信 

78
00:03:40,556 --> 00:03:44,940
者が意図したものであるとどうやって信じればよいのでしょうか?

79
00:03:44,940 --> 00:03:48,540
ここで、暗号化の最初の部分であるデジタル署名が登場します。

80
00:03:49,480 --> 00:03:52,880
手書きの署名と同 様に、ここでの考え方は、アリスがトラ

81
00:03:52,880 --> 00:03:55,902
ンザクションを見て承認したことを証明する何かを 

82
00:03:55,902 --> 00:03:59,302
そのトランザクションの隣に追加できるべきであり、その署

83
00:03:59,302 --> 00:04:03,080
名は他人が偽造できないようにす る必要があるということです。

84
00:04:04,300 --> 00:04:07,376
最初は、デジタル署名は不可能であるように思え 

85
00:04:07,376 --> 00:04:08,580
るかもしれません。

86
00:04:09,220 --> 00:04:11,540
つまり、署名を構成するデータはすべて、コンピュー

87
00:04:11,540 --> 00:04:13,860
ターによって 読み取られ、コピーされるだけです。

88
00:04:14,400 --> 00:04:17,459
では、どうすれば偽造を防ぐことができるのでしょうか？

89
00:04:17,459 --> 00:04:19,659
これがどのように機能するかというと、全員が公

90
00:04:19,659 --> 00:04:21,960
開鍵と秘密鍵のペアと呼ばれるものを生成します。

91
00:04:21,960 --> 00:04:24,160
 それぞれのペアはビット列のように見えます。

92
00:04:24,800 --> 00:04:27,847
秘密キーは秘密キーと呼ばれることもあるの で、公開キーを 

93
00:04:27,847 --> 00:04:31,000
PK と略す一方で、秘密キーを SK と略すこともできます。

94
00:04:31,000 --> 00:04:33,610
名前が示すように、この秘密鍵は自分

95
00:04:33,610 --> 00:04:36,220
だけの秘密にしておきたいものです。

96
00:04:37,060 --> 00:04:39,390
現実の世界では、どのような文書に署名して

97
00:04:39,390 --> 00:04:41,720
も、手書きの署名は同じように見えま す。

98
00:04:42,280 --> 00:04:44,550
しかし、デジタル署名はメッセージごとに

99
00:04:44,550 --> 00:04:46,940
変わるため、実際にははるかに強力 です。

100
00:04:47,840 --> 00:04:51,853
これは 1 と 0 の文字列のように見え、通常は 256 

101
00:04:51,853 --> 00:04:55,866
ビットのような もので、メッセージを少しでも変更すると、そ

102
00:04:55,866 --> 00:04:59,880
のメッセージの署名がどのようになるか が完全に変わります。

103
00:05:00,840 --> 00:05:04,228
もう少し形式的に言えば、署名の生成には、メ 

104
00:05:04,228 --> 00:05:08,540
ッセージ自体と秘密キーの両方に依存する機能が含まれます。

105
00:05:09,200 --> 00:05:11,809
秘密キーは、その署名を作成できるのはあなただけであること

106
00:05:11,809 --> 00:05:13,674
を保証します。 また、秘密キーがメッセ 

107
00:05:13,674 --> 00:05:16,284
ージに依存しているという事実は、誰もあなたの署名の 1 

108
00:05:16,284 --> 00:05:18,241
つをコピーして別のメッセージに偽造するこ 

109
00:05:18,241 --> 00:05:19,640
とはできないことを意味します。

110
00:05:21,000 --> 00:05:23,987
これと連携して、署名が有効であることを検証する 

111
00:05:23,987 --> 00:05:27,597
ために使用される 2 番目の機能があり、ここで公開キーが登

112
00:05:27,597 --> 00:05:28,220
場します。

113
00:05:29,200 --> 00:05:32,019
実行するのは、これが検証に使用している公開キーに関連付け

114
00:05:32,019 --> 00:05:35,040
られた秘密キーによって生成 された署名であるかどうかを示す 

115
00:05:35,040 --> 00:05:37,760
true または false を出力することだけです。

116
00:05:38,640 --> 00:05:42,173
これらの両方の関数がどのように正確に機能するかについては詳

117
00:05:42,173 --> 00:05:45,706
しく説明しませんが、秘 密キーが分からない場合、有効な署名

118
00:05:45,706 --> 00:05:49,240
を見つけることは完全に不可能であるべきだとい う考えです。

119
00:05:50,060 --> 00:05:52,646
具体的には、ランダムな署名を推測してチェックする

120
00:05:52,646 --> 00:05:54,478
ことより優れた戦 略はありません。

121
00:05:54,478 --> 00:05:57,065
 署名は、誰もが知っている公開キーを使用してチェ

122
00:05:57,065 --> 00:05:57,820
ックできます。

123
00:05:58,980 --> 00:06:01,029
ここで、長さが 256 ビットの署

124
00:06:01,029 --> 00:06:03,200
名がいくつあるかを考えてみましょう。

125
00:06:03,840 --> 00:06:06,180
それは 2 の 256 乗です。

126
00:06:07,140 --> 00:06:09,560
これは馬鹿げたほど大きな数字です。

127
00:06:09,860 --> 00:06:11,750
それを天文学的に大きいと呼ぶのは、天 

128
00:06:11,750 --> 00:06:13,640
文学を過大評価することになるでしょう。

129
00:06:14,260 --> 00:06:16,276
実際、これがどれほど膨大な数で 

130
00:06:16,276 --> 00:06:19,680
あるかを説明するためだけに、補足ビデオを作成しました。

131
00:06:20,380 --> 00:06:24,044
ただし、ここでは、特定のメッセージに対する署名が有効であ

132
00:06:24,044 --> 00:06:27,710
ることを検証するとき に、誰かが署名を作成できる唯一の方

133
00:06:27,710 --> 00:06:30,458
法は、検証に使用した公開鍵に関連付けられ 

134
00:06:30,458 --> 00:06:34,123
た秘密鍵を知っている場合であると非常に確信できるとだけ言

135
00:06:34,123 --> 00:06:35,040
っておきます。

136
00:06:37,120 --> 00:06:39,659
人々が台帳に取引に署名するようにすることは非常に良

137
00:06:39,659 --> 00:06:42,200
いことですが、わずかな抜け穴が 1 つあ ります。

138
00:06:42,720 --> 00:06:45,373
アリスがボブに 100 ドルを支払うように、ア

139
00:06:45,373 --> 00:06:47,334
リスがトランザクションに署名した 

140
00:06:47,334 --> 00:06:49,988
場合、ボブは新しいメッセージにアリスの署名を偽

141
00:06:49,988 --> 00:06:52,410
造できませんが、その同じ行を何度でもコピ 

142
00:06:52,410 --> 00:06:53,680
ーすることができます。

143
00:06:54,300 --> 00:06:56,760
そのメッセージと署名の組み合わせは引き続き有効です。

144
00:06:56,760 --> 00:07:00,206
これを回避するために、トランザクションに署名するときに

145
00:07:00,206 --> 00:07:03,780
、そのトランザクションに関連付けられ たある種の一意の 

146
00:07:03,780 --> 00:07:07,100
ID もメッセージに含める必要があるようにしました。

147
00:07:07,840 --> 00:07:11,144
そうすること で、アリスがボブに 100 

148
00:07:11,144 --> 00:07:15,864
ドルを複数回支払う場合、 台帳上の各行にはまったく新しい署名

149
00:07:15,864 --> 00:07:17,280
が必要になります。

150
00:07:18,160 --> 00:07:19,996
デジタル署名は、この初期プロトコル

151
00:07:19,996 --> 00:07:21,940
の信頼性の大きな側面を取り除きます。

152
00:07:22,380 --> 00:07:24,780
しかし、それでも 、本当にこれをやろうとすると、

153
00:07:24,780 --> 00:07:27,280
ある種の名誉システムに依存することになるでしょう。

154
00:07:27,720 --> 00:07:30,230
つまり、 誰もが実際に手続きを進めて、毎月末に現

155
00:07:30,230 --> 00:07:32,740
金で決済するだろうと信じていること になります。

156
00:07:33,560 --> 00:07:36,520
たとえば、チャーリーが数千ドルの借金を抱えていて、

157
00:07:36,520 --> 00:07:39,480
ただ出席することを拒否し たらどうなるでしょうか?

158
00:07:40,120 --> 00:07:45,063
解決のために現金に戻る唯一の本当の理由は、多額の借金を抱 

159
00:07:45,063 --> 00:07:47,280
えている人がいる場合です。

160
00:07:47,860 --> 00:07:50,951
したがって、人々が摂取額を超えて支出することを防ぐ 

161
00:07:50,951 --> 00:07:53,805
何らかの方法がある限り、実際に現金で決済する必要

162
00:07:53,805 --> 00:07:56,660
はないという賢明な考えを お持ちかもしれません。

163
00:07:57,340 --> 00:08:00,222
おそらく、全員にポットに 100 ドルを支払わせ 

164
00:08:00,222 --> 00:08:03,105
ることから始めて、アリスが 100 ドル、ボブが 

165
00:08:03,105 --> 00:08:05,297
100 ドル、チャ ーリーが 100 

166
00:08:05,297 --> 00:08:08,180
ドルというように台帳の最初の数行を読み取らせます。

167
00:08:09,020 --> 00:08:12,435
さて、誰かがその台帳にすでに持っている以上のお

168
00:08:12,435 --> 00:08:16,000
金を費やしている取引は受け入れ ないでください。

169
00:08:16,840 --> 00:08:19,727
たとえば、最初の 2 つのトランザクションが、チャ

170
00:08:19,727 --> 00:08:22,037
ーリーがアリスに 50 ドルを支払い、 

171
00:08:22,037 --> 00:08:24,925
チャーリーがボブに 50 ドルを支払う場合、チャー

172
00:08:24,925 --> 00:08:27,812
リーがあなたに 20 ドルを支払うと追加しようとし

173
00:08:27,812 --> 00:08:30,700
た場合、それ は無効となり、署名しなかったかのよう

174
00:08:30,700 --> 00:08:31,740
に無効になります。

175
00:08:31,740 --> 00:08:35,028
これは、トランザクションを検証するには、その時点 

176
00:08:35,028 --> 00:08:38,842
までのトランザクションの完全な履歴を知る必要があることを意

177
00:08:38,842 --> 00:08:39,500
味します。

178
00:08:40,159 --> 00:08:42,972
これは仮想通貨 にも当てはまりま

179
00:08:42,972 --> 00:08:45,960
すが、最適化の余地は少しあります。

180
00:08:48,380 --> 00:08:51,990
ここで興味深いのは、このステップにより元帳と実際

181
00:08:51,990 --> 00:08:55,600
の物理的な米ドルとの関係 が削除されることです。

182
00:08:56,200 --> 00:08:59,592
理論的には、世界中の誰もがこの台帳を使用してい 

183
00:08:59,592 --> 00:09:02,984
れば、実際の米ドルに両替することなく、この台帳で

184
00:09:02,984 --> 00:09:06,660
お金を送受信するだけ で一生を過ごすことができます。

185
00:09:07,580 --> 00:09:10,513
実際、この点を強調するために、元帳 

186
00:09:10,513 --> 00:09:15,240
上の数量を元帳ドル (略して LD) と呼び始めましょう。

187
00:09:15,240 --> 00:09:18,660
元帳ド ルを実際の米ドルに自由に交換できます。

188
00:09:19,060 --> 00:09:21,675
たとえば、アリスは、ボブがアリスに 1 0 

189
00:09:21,675 --> 00:09:25,122
ドルの元帳ドルをこの共通元帳に支払うトランザクションを追加

190
00:09:25,122 --> 00:09:28,331
して署名するのと引き換えに 、現実世界でボブに 10 

191
00:09:28,331 --> 00:09:29,520
ドル紙幣を渡します。

192
00:09:30,720 --> 00:09:33,345
しかし、そのような交換はプロトコルによって保証 

193
00:09:33,345 --> 00:09:34,220
されていません。

194
00:09:34,720 --> 00:09:38,350
これは、公開市場でドルをユーロやその他の通貨 

195
00:09:38,350 --> 00:09:40,560
に交換する方法に似ています。

196
00:09:41,180 --> 00:09:43,800
それはそれ自体が独立したものです。

197
00:09:44,580 --> 00:09:47,180
これは、ビットコインやその他の暗号通貨につ

198
00:09:47,180 --> 00:09:49,780
いて理解しておくべき最初の重要なことです。

199
00:09:49,780 --> 00:09:52,420
それは何かというと台帳です。

200
00:09:53,180 --> 00:09:55,980
取引履歴が通貨です。

201
00:09:57,160 --> 00:09:59,359
もちろん、ビットコインの 場合、人々が現金を使

202
00:09:59,359 --> 00:10:01,560
って購入するため、お金は台帳に記録されません。

203
00:10:02,000 --> 00:10:03,410
新しいお金が台帳にどのよ うに入力さ

204
00:10:03,410 --> 00:10:04,820
れるかについては、数分で説明します。

205
00:10:05,540 --> 00:10:07,819
しかしその前に、現在の台帳ドルシス 

206
00:10:07,819 --> 00:10:11,240
テムと暗号通貨の仕組みとの間には、実際にはさらに大きな

207
00:10:11,240 --> 00:10:12,380
違いがありま す。

208
00:10:13,020 --> 00:10:15,826
これまでのところ、この台帳は、誰でも新しい行を追加できる 

209
00:10:15,826 --> 00:10:18,440
Web サイトなどの公共の場所にあると述べてきました。

210
00:10:19,220 --> 00:10:21,514
しかしそれには、中央の場所、 つまり誰が 

211
00:10:21,514 --> 00:10:24,028
Web サイトをホストし、誰が新しい行の追加ル

212
00:10:24,028 --> 00:10:26,760
ールを管理しているのかを信頼する必要が あります。

213
00:10:27,340 --> 00:10:29,440
この少しの信頼を取り除くために、全員に台

214
00:10:29,440 --> 00:10:31,540
帳のコピーを自分で保管してもらいま す。

215
00:10:31,540 --> 00:10:35,407
次に、アリスがボブに 100 台帳ドルを支払うように、取

216
00:10:35,407 --> 00:10:39,275
引をしたいときは、それを世界 中にブロードキャストして、

217
00:10:39,275 --> 00:10:43,420
人々が聞いて自分のプライベート台帳に記録できるようにします。

218
00:10:44,840 --> 00:10:46,983
しかし、もっと何かしなければ、こ

219
00:10:46,983 --> 00:10:49,260
のシステムはとんでもなく悪いです。

220
00:10:49,820 --> 00:10:50,895
正しい台帳とは何かについて全員の 

221
00:10:50,895 --> 00:10:52,160
合意を得るにはどうすればよいでしょうか?

222
00:10:52,160 --> 00:10:55,153
アリスがボブに 10 台帳ドルを支払うように、ボブがトラン 

223
00:10:55,153 --> 00:10:58,146
ザクションを受け取ったとき、他の全員が同じトランザクションを

224
00:10:58,146 --> 00:11:01,140
受け取り、信じていることをどうやって確認 できるでしょうか?

225
00:11:01,140 --> 00:11:04,053
彼は後でチャーリーのところに行き、その同じ 10 

226
00:11:04,053 --> 00:11:07,200
台帳ドルを使っ て取引を行うことができるのでしょうか?

227
00:11:08,240 --> 00:11:10,616
実際に、ブロードキャストされるトランザクションを聞いて 

228
00:11:10,616 --> 00:11:12,060
いるだけだと想像してみてください。

229
00:11:12,760 --> 00:11:16,012
他の全員が同じトランザクションを同じ順序で記録している 

230
00:11:16,012 --> 00:11:18,220
ことをどうやって確認できるでしょうか?

231
00:11:19,420 --> 00:11:21,360
これが本当に問題の核心です。

232
00:11:21,600 --> 00:11:22,740
これは 興味深いパズルです。

233
00:11:23,420 --> 00:11:27,039
取引を承認または拒否する方法とその順序についてのプ 

234
00:11:27,039 --> 00:11:30,520
ロトコルを思いつき、その同じプロトコルに従っている

235
00:11:30,520 --> 00:11:34,000
世界中の誰かがあなた と同じように見える個人台帳を

236
00:11:34,000 --> 00:11:37,620
持っていると確信できるようにすることはでき ますか?

237
00:11:38,300 --> 00:11:39,887
これは、ビットコインのオリジナ

238
00:11:39,887 --> 00:11:41,580
ル論文で取り上げられた問題です。

239
00:11:44,060 --> 00:11:48,109
大まかに言えば、ビットコインが提供する解決策は、最も

240
00:11:48,109 --> 00:11:52,160
多くの計算作業が投入 された台帳を信頼することです。

241
00:11:52,540 --> 00:11:54,860
それが何を意味するのか、少し説明します。

242
00:11:55,320 --> 00:11:57,540
これには暗号化ハッシュ関数が含まれます。

243
00:11:57,540 --> 00:12:00,193
私たちが構築する一般的なアイデアは 

244
00:12:00,193 --> 00:12:03,878
、何を信頼するかの基礎として計算作業を使用すると、

245
00:12:03,878 --> 00:12:07,563
不正な取引や台帳の矛盾を 引き起こすために実行不可

246
00:12:07,563 --> 00:12:11,395
能な量の計算が必要になるようにすることができるとい 

247
00:12:11,395 --> 00:12:12,280
うものです。

248
00:12:13,040 --> 00:12:15,190
繰り返しますが、このような通貨を使用するために誰

249
00:12:15,190 --> 00:12:17,340
もが知る必要がある ことを超えて、この問題は雑草

250
00:12:17,340 --> 00:12:19,580
の中に深く入り込んでいることを思い出してください。

251
00:12:20,120 --> 00:12:22,068
しかし、これは本当に素晴らしいアイデアで

252
00:12:22,068 --> 00:12:24,698
あり、それを理解すれば、ビットコインや他の暗号通貨の 

253
00:12:24,698 --> 00:12:26,160
核心を理解することができます。

254
00:12:28,100 --> 00:12:29,940
まず最初に、ハッシュ関数とは何でしょうか?

255
00:12:30,800 --> 00:12:33,750
これらの関数の 1 つの入力には、どのような種

256
00:12:33,750 --> 00:12:37,214
類のメッセージまたはファイルを使用してもかまいません。

257
00:12:37,214 --> 00:12:39,780
 実際には、それは重 要ではありません。

258
00:12:39,780 --> 00:12:45,016
そして出力は、256 ビットなど、ある種の固定長のビット列 

259
00:12:45,016 --> 00:12:45,540
です。

260
00:12:45,540 --> 00:12:47,609
この出力は、メッセージのハッシュ

261
00:12:47,609 --> 00:12:49,680
またはダイジェストと呼ばれます。

262
00:12:49,680 --> 00:12:50,960
そしてその意図は、ラン ダムに見えることです。

263
00:12:50,960 --> 00:12:52,378
これはランダムではなく、指定された

264
00:12:52,378 --> 00:12:53,880
入力に対して常に同じ出力を返します。

265
00:12:53,880 --> 00:12:57,088
ただし、入力をわずかに変更すると (文字の 1 

266
00:12:57,088 --> 00:12:59,493
つだけを編集するなど)、結果のハッ 

267
00:12:59,493 --> 00:13:01,900
シュが完全に変化するという考えです。

268
00:13:01,900 --> 00:13:05,080
実際、ここで示している SHA256 と呼ばれる 

269
00:13:05,080 --> 00:13:08,260
ハッシュ関数では、入力をわずかに変更したときに出力

270
00:13:08,260 --> 00:13:11,440
がどのように変化するかはまったく予測 できません。

271
00:13:12,440 --> 00:13:14,687
ご存知のとおり、これは単なるハッシュ

272
00:13:14,687 --> 00:13:17,060
関数ではなく、暗号化ハッシュ関数です。

273
00:13:17,340 --> 00:13:20,660
つまり、逆方向の計算は不可能です。

274
00:13:21,260 --> 00:13:24,945
1 と 0 の文字列 を示して、その入力の 

275
00:13:24,945 --> 00:13:28,798
SHA256 ハッシュがこの正確なビット文字列

276
00:13:28,798 --> 00:13:32,651
を与えるように 入力を見つけるように依頼した場

277
00:13:32,651 --> 00:13:36,840
合、単に推測して確認するより良い方法はありません。

278
00:13:36,840 --> 00:13:39,327
繰り返しになりますが、2 対 256 

279
00:13:39,327 --> 00:13:41,684
の推測を行うのにどれだけの計算が必 

280
00:13:41,684 --> 00:13:45,220
要になるかを知りたい場合は、補足ビデオをご覧ください。

281
00:13:45,220 --> 00:13:46,660
実際、それを書く のがとても楽しかったです。

282
00:13:48,560 --> 00:13:51,282
この関数がどのように正確に機能するかを詳しく調 

283
00:13:51,282 --> 00:13:54,230
べれば、推測したり確認したりすることなく、適切な入力

284
00:13:54,230 --> 00:13:57,520
をリバース エンジニアリ ングできると思うかもしれません。

285
00:13:58,240 --> 00:14:00,840
しかし、それを実現する方法を考え出した人は誰もいません。

286
00:14:01,600 --> 00:14:04,280
興味深いことに、逆方向の計算が難し

287
00:14:04,280 --> 00:14:06,960
いという厳密な証拠はありませ ん。

288
00:14:07,620 --> 00:14:09,813
それでも、現代のセキュリティの大部分は、暗号

289
00:14:09,813 --> 00:14:12,106
化ハッシュ関数と、暗号化ハッシュ関数がこの特 

290
00:14:12,106 --> 00:14:14,200
性を持っているという考えに依存しています。

291
00:14:14,940 --> 00:14:17,315
現在、ブラウザーが YouTube との間で確立し 

292
00:14:17,315 --> 00:14:19,965
ている安全な接続、またはブラウザーが銀行との間で確立してい

293
00:14:19,965 --> 00:14:21,519
る安全な接続の基礎となっているア 

294
00:14:21,519 --> 00:14:24,077
ルゴリズムを調べてみると、おそらくそこに SHA256 

295
00:14:24,077 --> 00:14:25,540
という名前が表示されるでしょう。

296
00:14:25,540 --> 00:14:29,302
現時点では、このような関数がトランザクション

297
00:14:29,302 --> 00:14:33,065
の特定のリストが大量の 計算量に関連している

298
00:14:33,065 --> 00:14:37,000
ことをどのように証明できるかに焦点を当てます。

299
00:14:38,040 --> 00:14:41,008
誰かがトランザクションのリストを見せて、「特別な番

300
00:14:41,008 --> 00:14:43,502
号を見つけたので、その番号をこのトランザ 

301
00:14:43,502 --> 00:14:46,589
クションのリストの最後に置き、全体に SHA256 

302
00:14:46,589 --> 00:14:48,845
を適用すると、その出力の最初の 30 

303
00:14:48,845 --> 00:14:51,932
ビットが表示される」と言うところを想像してください。

304
00:14:51,932 --> 00:14:53,120
 はすべてゼロです。

305
00:14:54,100 --> 00:14:56,180
彼らにとってその番号 を見つけるの

306
00:14:56,180 --> 00:14:58,260
はどれほど大変だったと思いますか?

307
00:14:58,320 --> 00:15:01,273
ランダムなメッセージの場合、ハッシュが 3 

308
00:15:01,273 --> 00:15:04,226
0 個の連続するゼロで始まる確率は 230 

309
00:15:04,226 --> 00:15:07,180
分の 1、つまり約 10 億分の 1 です。

310
00:15:08,200 --> 00:15:10,706
また、SHA256 は暗号化ハッシュ関数で

311
00:15:10,706 --> 00:15:13,213
あるため、そのような特別な数値を見つける 

312
00:15:13,213 --> 00:15:15,840
唯一の方法は、推測して確認することだけです。

313
00:15:16,660 --> 00:15:18,731
したがって、この人はほぼ確実に、この特別 

314
00:15:18,731 --> 00:15:20,308
な番号を見つけるまでに約 10 

315
00:15:20,308 --> 00:15:22,380
億もの異なる番号を調べる必要がありました。

316
00:15:23,380 --> 00:15:25,604
その数値 がわかれば、検証は非常に簡単です。

317
00:15:25,604 --> 00:15:27,828
 ハッシュを実行すると、ゼロが 30 個あ 

318
00:15:27,828 --> 00:15:28,840
ることがわかります。

319
00:15:29,800 --> 00:15:32,733
つまり、自分自身が同じ労力を費やすこと 

320
00:15:32,733 --> 00:15:36,400
なく、彼らが膨大な作業を行ったことを検証できます。

321
00:15:37,200 --> 00:15:38,800
これを作業証明と呼びます。

322
00:15:39,460 --> 00:15:41,789
そして重要なことに、この作業はすべて本質的にト

323
00:15:41,789 --> 00:15:44,220
ランザクションのリス トに関連付けられています。

324
00:15:44,900 --> 00:15:46,447
これらのトランザクションの 1 

325
00:15:46,447 --> 00:15:48,285
つをわずかでも変更すると、ハッシュが 

326
00:15:48,285 --> 00:15:49,640
完全に変更されてしまいます。

327
00:15:50,080 --> 00:15:51,600
したがって、新しいプルーフ オブ 

328
00:15:51,600 --> 00:15:53,388
ワーク、つまりリストのハッシュが 30 

329
00:15:53,388 --> 00:15:56,071
個のゼロで始まるようにする新しい番号を見つけるには、さらに 

330
00:15:56,071 --> 00:15:57,860
10 億回の推測を行う必 要があります。

331
00:15:57,860 --> 00:16:02,580
それでは、分散台帳の状況を振り返ってみましょ う。

332
00:16:02,580 --> 00:16:06,290
誰もが取引をブロードキャストしているので、正しい元帳

333
00:16:06,290 --> 00:16:10,000
が何であるかについて 彼らが同意する方法が必要です。

334
00:16:10,000 --> 00:16:13,367
先ほども述べたように、元のビットコイン論文の背後にある 

335
00:16:13,367 --> 00:16:16,254
中心的なアイデアは、最も多くの労力が費やされた台

336
00:16:16,254 --> 00:16:18,660
帳を誰もが信頼できるようにすることです。

337
00:16:19,280 --> 00:16:22,468
これが機能する方法は、まず特定の元帳をブロックに

338
00:16:22,468 --> 00:16:25,657
編成することです。 各ブロ ックは、トランザクシ

339
00:16:25,657 --> 00:16:29,111
ョンのリストと作業証明、つまり、ブロック全体のハッ 

340
00:16:29,111 --> 00:16:32,300
シュがゼロの束で始まる特別な番号で構成されます。

341
00:16:33,140 --> 00:16:39,715
現時点では、60 個のゼロから始める必要があるとします。

342
00:16:39,715 --> 00:16:44,177
 ただし、後で、その数を選択するため 

343
00:16:44,177 --> 00:16:47,700
のより体系的な方法に戻ります。

344
00:16:47,700 --> 00:16:50,770
トランザクションが送信者によって署名された場 

345
00:16:50,770 --> 00:16:54,108
合にのみ有効であるとみなされるのと同じように、ブロ

346
00:16:54,108 --> 00:16:57,980
ックは作業証明がある場合にのみ 有効であるとみなされます。

347
00:16:57,980 --> 00:17:00,609
また、これらのブロックに標準的な順序があること 

348
00:17:00,609 --> 00:17:03,019
を確認するために、ブロックのヘッダーに前のブ

349
00:17:03,019 --> 00:17:05,319
ロックのハッシュが含まれる ようにします。

350
00:17:05,839 --> 00:17:08,992
そうすれば、戻っていずれかのブロックを変更したり、2 

351
00:17:08,992 --> 00:17:12,028
つの ブロックの順序を交換したりすると、その後に来る

352
00:17:12,028 --> 00:17:15,064
ブロックが変更され、そのブロ ックのハッシュが変更さ

353
00:17:15,064 --> 00:17:18,099
れ、その後に来るブロックも変更されます。 、 等々。

354
00:17:18,099 --> 00:17:21,099
そのためには、すべての作業をやり直す必要があり

355
00:17:21,099 --> 00:17:23,839
、各ブロックのハッシュが 60 個のゼロ 

356
00:17:23,839 --> 00:17:27,099
で始まる新しい特別な番号を見つける必要があります。

357
00:17:27,099 --> 00:17:29,183
このようにブロックが連鎖してい 

358
00:17:29,183 --> 00:17:32,308
るため、台帳と呼ぶのではなくブロックチェーンと呼

359
00:17:32,308 --> 00:17:33,480
ぶのが一般的です。

360
00:17:33,480 --> 00:17:35,241
アップデートされたプロトコルの一環として、世界

361
00:17:35,241 --> 00:17:37,080
中の誰でもブロック作成者になれるようになります。

362
00:17:37,080 --> 00:17:39,929
これが意味するのは、ブロードキャストされているトランザ

363
00:17:39,929 --> 00:17:41,618
クションをリッスンし、それらを 

364
00:17:41,618 --> 00:17:44,468
いくつかのブロックに収集し、そのブロックのハッシュが 

365
00:17:44,468 --> 00:17:47,318
60 個のゼロで始まる特別な 番号を見つけるために大量

366
00:17:47,318 --> 00:17:48,480
の作業を行うことです。

367
00:17:48,480 --> 00:17:50,467
ブロックを見つけると、見つけたブロック 

368
00:17:50,467 --> 00:17:51,760
をブロードキャストします。

369
00:17:51,760 --> 00:17:53,882
ブロック作成者にこのすべての作業に報酬を与えるため

370
00:17:53,882 --> 00:17:56,004
に、彼女がブロック を組み立てるときに、ブロックの

371
00:17:56,004 --> 00:17:58,550
先頭に非常に特別なトランザクションを含めることを許可します。

372
00:17:58,550 --> 00:18:00,672
 その トランザクションで、彼女は、たとえば、何も

373
00:18:00,672 --> 00:18:02,540
ないところから 10 元帳ドルを獲得します。

374
00:18:03,080 --> 00:18:06,240
これはブ ロック報酬と呼ばれ、トランザクションを受

375
00:18:06,240 --> 00:18:09,400
け入れるかどうかに関する通常のル ールの例外です。

376
00:18:10,040 --> 00:18:12,920
誰かからのものではないので、署名する必要はありません。

377
00:18:13,660 --> 00:18:16,639
それはまた、私たちの経済における元帳ドルの総数が

378
00:18:16,639 --> 00:18:19,620
新しいブロックごとに増加することを意味 します。

379
00:18:20,900 --> 00:18:24,476
ブロックの作成は、多くの作業を必要とし、経済に新しい通 

380
00:18:24,476 --> 00:18:28,180
貨を導入するため、マイニングと呼ばれることがよくあります。

381
00:18:29,020 --> 00:18:31,764
しかし、マイナーについて聞いたり読んだりするときは、彼らが

382
00:18:31,764 --> 00:18:33,751
実際に行っているのは、トランザクションを 

383
00:18:33,751 --> 00:18:36,495
リッスンし、ブロックを作成し、それらのブロックをブロードキ

384
00:18:36,495 --> 00:18:38,482
ャストし、それによって新たな報酬を得ると 

385
00:18:38,482 --> 00:18:40,280
いうことであることに留意してください。

386
00:18:40,280 --> 00:18:43,423
マイナーの観点から見ると、各ブロックはミニ 

387
00:18:43,423 --> 00:18:46,423
チュアの宝くじのようなもので、幸運な 1 

388
00:18:46,423 --> 00:18:50,281
人がブロックのハッシュが多数 のゼロで始まる特別な数字

389
00:18:50,281 --> 00:18:53,710
を見つけるまで、全員ができるだけ早く数字を推測 

390
00:18:53,710 --> 00:18:56,140
し、その数字を獲得します。 褒美。

391
00:18:57,620 --> 00:18:59,971
このシステムを単に支払いに使用したい人は 

392
00:18:59,971 --> 00:19:02,882
、トランザクションを監視するのではなく、マイナーによ

393
00:19:02,882 --> 00:19:05,793
ってブロードキャストされ ているブロックだけを監視し

394
00:19:05,793 --> 00:19:08,704
、ブロックチェーンの自分の個人的なコピーを更新する 

395
00:19:08,704 --> 00:19:09,600
ことになります。

396
00:19:10,560 --> 00:19:13,495
ここで、私たちのプロトコルに追加された重要な点は、トラン

397
00:19:13,495 --> 00:19:15,172
ザクション履 歴が矛盾する 2 

398
00:19:15,172 --> 00:19:18,107
つの異なるブロックチェーンを聞いた場合、最も長いブロック

399
00:19:18,107 --> 00:19:21,042
チェーン、つまり 最も多くの労力が費やされたブロックチェ

400
00:19:21,042 --> 00:19:22,300
ーンを優先することです。

401
00:19:22,860 --> 00:19:25,290
同点の場合は、ど ちらかが長くなる追

402
00:19:25,290 --> 00:19:27,720
加のブロックが聞こえるまで待ちます。

403
00:19:28,720 --> 00:19:32,200
したがって、中央の権威がなく、誰もが独自のブロックチ

404
00:19:32,200 --> 00:19:35,680
ェーンのコピーを 維持しているとしても、最も多くの労

405
00:19:35,680 --> 00:19:38,089
力が費やされたブロックチェーンを優 

406
00:19:38,089 --> 00:19:41,569
先することに全員が同意すれば、分散型の合意に達する方

407
00:19:41,569 --> 00:19:42,640
法が得られます。

408
00:19:43,560 --> 00:19:46,259
これがなぜ信頼できるシステムになるのかを確認し、ど

409
00:19:46,259 --> 00:19:48,202
の時点で支払いが正当であると信頼す 

410
00:19:48,202 --> 00:19:50,901
べきかを理解するには、このシステムを使用して誰かを

411
00:19:50,901 --> 00:19:52,844
だますために何が必要になるかを正確 

412
00:19:52,844 --> 00:19:54,680
に説明することが非常に役立ちます。

413
00:19:55,600 --> 00:19:58,594
おそらく、アリスはボブを詐欺的なブロックで騙そうとしてい 

414
00:19:58,594 --> 00:20:00,865
るのでしょう。 つまり、彼女は彼に 100 

415
00:20:00,865 --> 00:20:03,549
台帳ドルを支払うことを含むブロックをネットワークの 

416
00:20:03,549 --> 00:20:06,337
残りの部分にブロードキャストせずにブロックを送信しよう

417
00:20:06,337 --> 00:20:07,060
としています。

418
00:20:07,640 --> 00:20:09,260
そうすれば、他の誰もが彼女が その 

419
00:20:09,260 --> 00:20:11,240
100 ドルを持っているとまだ思っています。

420
00:20:11,960 --> 00:20:14,441
これを行うには、それぞれが独自のブロックで作業 

421
00:20:14,441 --> 00:20:16,612
している他のすべてのマイナーよりも先に、有

422
00:20:16,612 --> 00:20:18,680
効な作業証明を見つけなければなりません。

423
00:20:19,500 --> 00:20:21,250
そして、それは 間違いなく起こる可能性があります。

424
00:20:21,250 --> 00:20:23,000
 もしかしたら、アリスがたまたまこのミニチュアの宝

425
00:20:23,000 --> 00:20:24,820
くじを他の人より先に当選させただけ かもしれません。

426
00:20:25,680 --> 00:20:28,913
しかし、ボブは依然として他のマイナーによるブロードキャスト

427
00:20:28,913 --> 00:20:32,147
を聞くことにな るため、この不正なブロックを信じ続けるため

428
00:20:32,147 --> 00:20:34,712
に、アリスはボブのブロックチェーンのこの特別 

429
00:20:34,712 --> 00:20:37,945
なフォークに、彼が聞いているものとは異なるブロックを追加し

430
00:20:37,945 --> 00:20:40,621
続けるすべての作業を自分で 行う必要があります。

431
00:20:40,621 --> 00:20:41,960
 残りの鉱山労働者から。

432
00:20:42,740 --> 00:20:45,668
プロトコルに従って、ボブは常に自分が知っている最長 

433
00:20:45,668 --> 00:20:48,260
のチェーンを信頼することを忘れないでください。

434
00:20:49,260 --> 00:20:51,838
アリスは、ネットワーク上の残りのマイナーを 

435
00:20:51,838 --> 00:20:54,652
すべて合わせたよりも早くブロックを偶然見つけた場

436
00:20:54,652 --> 00:20:57,700
合、数ブロックの間これを維持で きるかもしれません。

437
00:20:58,480 --> 00:21:01,438
しかし、アリスが全マイナーのコンピューティング 

438
00:21:01,438 --> 00:21:04,397
リソースの 50% 近くを持っていない限り、他の

439
00:21:04,397 --> 00:21:07,109
マイナー全員が取り組んでいるブロックチェー 

440
00:21:07,109 --> 00:21:10,068
ンが、アリスがボブに与えている単一の不正なブロッ

441
00:21:10,068 --> 00:21:13,520
クチェーンよりも速く成長する可能 性が圧倒的になります。

442
00:21:13,520 --> 00:21:17,339
したがって、十分な時間が経った後、ボブはアリスから聞 

443
00:21:17,339 --> 00:21:20,452
いたことを拒否し、他の全員が取り組んでいるよ

444
00:21:20,452 --> 00:21:23,140
り長いチェーンを支持するつもり です。

445
00:21:23,960 --> 00:21:27,024
これは、すぐに聞こえた新しいブロックを必ずしも信頼

446
00:21:27,024 --> 00:21:29,109
する必要はなく、その上にいくつか 

447
00:21:29,109 --> 00:21:32,174
の新しいブロックが追加されるまで待つ必要があること

448
00:21:32,174 --> 00:21:33,400
に注意してください。

449
00:21:33,820 --> 00:21:35,996
より長いブロックチェ ーンについてまだ聞いたこ

450
00:21:35,996 --> 00:21:38,173
とがない場合は、このブロックが他の人が使用して

451
00:21:38,173 --> 00:21:40,540
いるのと同じチェ ーンの一部であると信頼できます。

452
00:21:42,120 --> 00:21:45,220
これで、主要なアイデアはすべて完成しました。

453
00:21:45,780 --> 00:21:48,349
作業証明に基づくこの分散台帳システムは、多かれ少なかれ

454
00:21:48,349 --> 00:21:50,729
、ビットコイン プロトコルがどのように機能するか 

455
00:21:50,729 --> 00:21:53,299
、そして他の多くの暗号通貨がどのように機能するかに似て

456
00:21:53,299 --> 00:21:53,680
います。

457
00:21:54,300 --> 00:21:56,160
明確にする必要がある詳細がいくつかあります。

458
00:21:56,300 --> 00:21:58,515
先ほど、プルーフ・オブ・ワークとは、ブロックのハッシュが 

459
00:21:58,515 --> 00:21:59,966
60 個のゼロで始まるように特別な番 

460
00:21:59,966 --> 00:22:01,800
号を見つけることであるかもしれないと言いました。

461
00:22:01,800 --> 00:22:04,645
実際のビットコイン プロトコルの仕組み 

462
00:22:04,645 --> 00:22:08,059
は、新しいブロックを見つけるのに平均して 10 

463
00:22:08,059 --> 00:22:11,900
分かかるように、ゼロの数を定 期的に変更することです。

464
00:22:12,780 --> 00:22:16,173
したがって、ネットワークに追加されるマイナーが増える 

465
00:22:16,173 --> 00:22:19,566
につれて、このミニチュア宝くじの当選者は 10 分に 

466
00:22:19,566 --> 00:22:22,960
1 人程度になるまで、挑 戦はますます難しくなります。

467
00:22:23,920 --> 00:22:27,088
多くの新しい暗号通貨のブロック時間はそれよりもはるかに 

468
00:22:27,088 --> 00:22:27,880
短くなります。

469
00:22:28,580 --> 00:22:30,520
そして、ビットコインのお金はすべて、最終的

470
00:22:30,520 --> 00:22:32,460
には何らかのブロック 報酬から得られます。

471
00:22:32,920 --> 00:22:34,011
当初、これらの報酬はブロックあたり 

472
00:22:34,011 --> 00:22:34,800
50 ビットコインでした。

473
00:22:34,800 --> 00:22:37,271
実際、Bl ock Explorer という素晴らしい 

474
00:22:37,271 --> 00:22:39,919
Web サイトにアクセスすると、ビットコインのブロックチェ 

475
00:22:39,919 --> 00:22:41,420
ーンを簡単に調べることができます。

476
00:22:41,960 --> 00:22:45,258
そして、チェーン上の最初の数ブロックを見ると、マイナーへ 

477
00:22:45,258 --> 00:22:47,647
の 50 ビットコインの報酬以外のトランザ

478
00:22:47,647 --> 00:22:49,240
クションは含まれていません。

479
00:22:49,860 --> 00:22:53,460
しかし、21 0,000 ブロックごと、つまり約 

480
00:22:53,460 --> 00:22:56,340
4 年ごとに、その報酬は半分に減ります。

481
00:22:56,860 --> 00:23:00,140
現時点での報 酬は12です。1ブロックあたり5ビットコイン。

482
00:23:00,720 --> 00:23:04,001
そして、この報酬は時間の経過とともに幾何級数的に減少する 

483
00:23:04,001 --> 00:23:06,830
ため、2,100万ビットコインを超えるビットコイン

484
00:23:06,830 --> 00:23:09,320
が存在することは決してないことを意味します。

485
00:23:10,280 --> 00:23:11,737
ただし、これはマイナーが収益を得る

486
00:23:11,737 --> 00:23:13,280
のをやめるという意味ではありません。

487
00:23:13,820 --> 00:23:15,821
ブロック報酬に加えて、マ イナーは

488
00:23:15,821 --> 00:23:17,940
取引手数料も受け取ることができます。

489
00:23:18,520 --> 00:23:20,707
これがどのように機能するかというと 

490
00:23:20,707 --> 00:23:23,866
、支払いを行うたびに、その支払いが含まれるブロックの

491
00:23:23,866 --> 00:23:27,025
マイナーに送られる取引 手数料を純粋にオプションで含

492
00:23:27,025 --> 00:23:28,240
めることができます。

493
00:23:29,020 --> 00:23:30,718
そうする理由は、ブロードキャス 

494
00:23:30,718 --> 00:23:32,947
トするトランザクションを実際に次のブロック

495
00:23:32,947 --> 00:23:35,920
に含めるようマイナーにインセンティブを与えるた めです。

496
00:23:36,440 --> 00:23:39,114
ご存知のとおり、ビットコインでは各ブロックは約 

497
00:23:39,114 --> 00:23:41,008
2400 件のトランザクションに 

498
00:23:41,008 --> 00:23:43,794
制限されており、これは不必要な制限であると多くの批

499
00:23:43,794 --> 00:23:45,020
評家が主張しています。

500
00:23:45,860 --> 00:23:48,816
比較のために、Vi sa は 1 秒あたり平均約 

501
00:23:48,816 --> 00:23:52,009
1700 件のトランザクションを処理し、1 秒あたり 

502
00:23:52,009 --> 00:23:55,320
24,000 件以上のト ランザクションを処理できます。

503
00:23:56,020 --> 00:23:59,413
ビットコインのこの比較的遅い処理により、トランザクション

504
00:23:59,413 --> 00:24:02,806
手数 料が高くなります。 これは、マイナーが新しいブロッ

505
00:24:02,806 --> 00:24:06,200
クにどのトランザクションを含めるかを 決定するためです。

506
00:24:07,820 --> 00:24:10,719
これらすべては、暗号通貨を包括的にカバーしていると 

507
00:24:10,719 --> 00:24:11,500
は言えません。

508
00:24:12,160 --> 00:24:15,252
私がまだ触れていないニュアンスや代替デザインの選択肢がまだ 

509
00:24:15,252 --> 00:24:16,180
たくさんあります。

510
00:24:16,640 --> 00:24:19,146
しかし、私の希望は、これが、さらに読んで枝を追加し

511
00:24:19,146 --> 00:24:21,652
たいと考えている 人にとって、安定した、「待って、

512
00:24:21,652 --> 00:24:24,360
でもなぜ」スタイルの理解の木の幹を提供できることです。

513
00:24:25,180 --> 00:24:27,627
最初に述べたように、この背後にある動機の 1 

514
00:24:27,627 --> 00:24:30,500
つは、大量の資金が暗号通貨 に流れ始めていることです。

515
00:24:31,340 --> 00:24:33,600
それが良い投資か悪い投資かについて主張す 

516
00:24:33,600 --> 00:24:36,613
るつもりはありませんが、ゲームに参加する人々にとって、少

517
00:24:36,613 --> 00:24:39,626
なくと もテクノロジーの基礎を知っておくことは健全だと本

518
00:24:39,626 --> 00:24:40,380
当に思います。

519
00:24:41,340 --> 00:24:42,759
いつものように、Patreon 

520
00:24:42,759 --> 00:24:45,420
でこのチャンネルを可能にしてくれた皆さんに心から感謝します。

521
00:24:46,080 --> 00:24:48,645
誰もが貢献できる立場にあるわけではないことは理解して

522
00:24:48,645 --> 00:24:50,422
いますが、それでも協力することに興 

523
00:24:50,422 --> 00:24:52,494
味がある場合、そのための最善の方法の 1 

524
00:24:52,494 --> 00:24:54,666
つは、単に他の人にとって興味深い、または役 

525
00:24:54,666 --> 00:24:56,640
立つと思われるビデオを共有することです。

526
00:24:57,280 --> 00:24:59,320
ご存知かと思いますが、これは本当に役に立ちます。

