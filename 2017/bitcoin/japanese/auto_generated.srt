1
00:00:00,000 --> 00:00:04,226
ビットコインを持つとはどういう意味ですか?

2
00:00:04,226 --> 00:00:08,121
多くの人がビットコインについて聞いたことがあるでし ょう。

3
00:00:08,121 --> 00:00:11,883
ビットコインは政府が発行しない完全なデジタル通貨であり

4
00:00:11,883 --> 00:00:15,644
、銀行が口座を管理したり取引 を確認したりする必要がなく

5
00:00:15,644 --> 00:00:19,271
、誰が発明したのか実際には誰も知らないということです。

6
00:00:19,271 --> 00:00:21,776
しかし、 多くの人はこの質問に対する

7
00:00:21,776 --> 00:00:24,421
答えを、少なくとも完全には知りません。

8
00:00:24,421 --> 00:00:27,111
そこに到達する ために、そして答えの根底にある技

9
00:00:27,111 --> 00:00:30,025
術的な詳細が実際に動機を感じられるようにするために

10
00:00:30,025 --> 00:00:32,715
、あなたが独自のバージョンのビットコインをどのよ

11
00:00:32,715 --> 00:00:35,180
うに発明したかを段階的に説明して いきます。

12
00:00:35,180 --> 00:00:38,655
まず、共有台帳を使用して友人との支払いを追跡します。

13
00:00:38,655 --> 00:00:42,262
その後、友 人や周囲の世界をますます信頼しなくなり始

14
00:00:42,262 --> 00:00:45,870
め、賢明であれば、友人からい くつかのアイデアを取り入

15
00:00:45,870 --> 00:00:49,077
れることができます。 信頼の必要性を回避するた

16
00:00:49,077 --> 00:00:52,684
めに暗号化を利用すると、最終的には暗号通貨と呼ばれるも

17
00:00:52,684 --> 00:00:53,620
のになります。

18
00:00:53,620 --> 00:00:56,538
ビットコインは、暗号通貨の最初に実装され

19
00:00:56,538 --> 00:00:59,748
た例にすぎませんが、現在ではさらに数千もの

20
00:00:59,748 --> 00:01:02,666
暗号通貨が従来の通貨と交換されています。

21
00:01:02,666 --> 00:01:05,184
独自のものを発明する道を歩むことは

22
00:01:05,184 --> 00:01:08,821
、ゲームの最近のプレイヤーを理解し、異なるデザインを

23
00:01:08,821 --> 00:01:12,459
選択する余地が ある時期と理由を認識するための基礎を

24
00:01:12,459 --> 00:01:13,858
築くのに役立ちます。

25
00:01:13,858 --> 00:01:16,785
実際、私がこ のトピックを選んだ理由の

26
00:01:16,785 --> 00:01:19,858
1 つは、昨年、これらの通貨に対して多大

27
00:01:19,858 --> 00:01:23,370
な注目、投資、誇大広告が向けられてきたからです。

28
00:01:23,370 --> 00:01:24,933
現在または将来の為替レートにつ

29
00:01:24,933 --> 00:01:27,374
いてコメントしたり推測したりするつもりはありません

30
00:01:27,374 --> 00:01:29,815
が、仮想通貨を購入しようとしている人はそれが何で

31
00:01:29,815 --> 00:01:32,255
あるかを本当に知っておくべきだということには誰もが

32
00:01:32,255 --> 00:01:33,232
同意すると思います。

33
00:01:33,232 --> 00:01:36,654
そして、私が言いたいのは 、単に金の採掘との漠然

34
00:01:36,654 --> 00:01:40,076
とした関連性の例えという意味ではなく、私たちが暗

35
00:01:40,076 --> 00:01:43,498
号通貨を送受 信し、作成するときにコンピューター

36
00:01:43,498 --> 00:01:46,920
が何をしているのかを実際に直接説明したことです。

37
00:01:46,920 --> 00:01:50,170
一つ強調しておきたいのは、あなたと私がここで詳細を掘り下

38
00:01:50,170 --> 00:01:53,421
げるつもりであり、それ には有意義な時間がかかるとしても

39
00:01:53,421 --> 00:01:56,207
、仮想通貨を使いたいだけなら、実際にはその詳細

40
00:01:56,207 --> 00:01:58,065
を知る必要はないということです。

41
00:01:58,065 --> 00:02:00,851
クレジット カードをスワイプしたときに内部で

42
00:02:00,851 --> 00:02:03,637
何が起こっているかの詳細を知る必要はありません。

43
00:02:03,637 --> 00:02:06,252
他のデジタル決済と同様に、何 が起こっている

44
00:02:06,252 --> 00:02:08,867
かを考えずに通貨を送受信できるユーザーフレン

45
00:02:08,867 --> 00:02:11,600
ドリーなアプリケーシ ョンがたくさんあります。

46
00:02:11,600 --> 00:02:15,403
違いは、この基盤となるバックボーンが取引を検証す

47
00:02:15,403 --> 00:02:17,229
る銀行ではないことです。

48
00:02:17,229 --> 00:02:20,801
代わりに、これは暗号化で生まれた数学の

49
00:02:20,801 --> 00:02:25,980
一部に基づいた、分散型トラストレス検証の賢いシステムです。

50
00:02:25,980 --> 00:02:28,172
しかし、まず最初に、仮想通貨やその他すべてにつ

51
00:02:28,172 --> 00:02:30,460
いての考えを数分間だけ脇に置 いてみてください。

52
00:02:30,460 --> 00:02:34,133
台帳とデジタル署名という、より現実的なもの

53
00:02:34,133 --> 00:02:35,636
から話を始めます。

54
00:02:35,636 --> 00:02:38,834
あなたと友達が夕食代の分担金などを頻

55
00:02:38,834 --> 00:02:43,546
繁に交換する場合、常に現金を交換するのは不便かもしれま

56
00:02:43,546 --> 00:02:44,051
せん。

57
00:02:44,051 --> 00:02:48,082
したがって、将来のある時点で行う予定のすべての支払いを記録

58
00:02:48,082 --> 00:02:50,904
する共有台帳を保管しておくとよいでしょう。

59
00:02:50,904 --> 00:02:52,736
アリスはボブに 20 ドルを支払い、ボブ

60
00:02:52,736 --> 00:02:54,480
はチャーリーに 40 ドルを支払います。

61
00:02:54,480 --> 00:02:57,950
この台帳は、誰でもアクセスして新しい行を追加できる

62
00:02:57,950 --> 00:03:00,618
Web サイトのように、公開されて誰でも

63
00:03:00,618 --> 00:03:02,620
アクセスできるものになります。

64
00:03:02,620 --> 00:03:05,088
そして、毎月の終わりに全員が集まり、取引

65
00:03:05,088 --> 00:03:07,557
のリストを見て、決済 したとしましょう。

66
00:03:07,557 --> 00:03:10,879
受け取った額よりも使った場合は、そのお金をポットに

67
00:03:10,879 --> 00:03:13,435
入れ、受け取った額が使った額より多かった

68
00:03:13,435 --> 00:03:15,480
場合は、そのお金を取り出します。

69
00:03:15,480 --> 00:03:17,631
したがって、この非常に単純なシステムの一部

70
00:03:17,631 --> 00:03:19,884
となるためのプロトコルは次のようになります。

71
00:03:19,884 --> 00:03:22,469
誰でも 台帳に線を追加でき、毎月

72
00:03:22,469 --> 00:03:25,054
月末に全員が集まって精算します。

73
00:03:25,054 --> 00:03:27,530
このような公開台帳の問題の 1

74
00:03:27,530 --> 00:03:30,471
つは、誰でも行を追 加できることです。

75
00:03:30,471 --> 00:03:33,521
それでは、ボブがアリスの承認なしにアリスがボブに 100

76
00:03:33,521 --> 00:03:36,571
ドルを支払 うと書くのを防ぐにはどうすればよいでしょうか?

77
00:03:36,571 --> 00:03:39,847
これらすべてのトランザクションが送信

78
00:03:39,847 --> 00:03:45,020
者が意図したものであるとどうやって信じればよいのでしょうか?

79
00:03:45,020 --> 00:03:49,582
ここで、暗号化の最初の部分であるデジタル署名が登場します。

80
00:03:49,582 --> 00:03:53,058
手書きの署名と同 様に、ここでの考え方は、アリスがトラ

81
00:03:53,058 --> 00:03:56,147
ンザクションを見て承認したことを証明する何かを

82
00:03:56,147 --> 00:03:59,623
そのトランザクションの隣に追加できるべきであり、その署

83
00:03:59,623 --> 00:04:03,485
名は他人が偽造できないようにす る必要があるということです。

84
00:04:03,485 --> 00:04:07,384
最初は、デジタル署名は不可能であるように思え

85
00:04:07,384 --> 00:04:08,910
るかもしれません。

86
00:04:08,910 --> 00:04:11,802
つまり、署名を構成するデータはすべて、コンピュー

87
00:04:11,802 --> 00:04:14,694
ターによって 読み取られ、コピーされるだけです。

88
00:04:14,694 --> 00:04:17,460
では、どうすれば偽造を防ぐことができるのでしょうか？

89
00:04:17,460 --> 00:04:19,713
これがどのように機能するかというと、全員が公

90
00:04:19,713 --> 00:04:22,070
開鍵と秘密鍵のペアと呼ばれるものを生成します。

91
00:04:22,070 --> 00:04:24,324
それぞれのペアはビット列のように見えます。

92
00:04:24,324 --> 00:04:28,323
秘密キーは秘密キーと呼ばれることもあるの で、公開キーを

93
00:04:28,323 --> 00:04:32,460
PK と略す一方で、秘密キーを SK と略すこともできます。

94
00:04:32,460 --> 00:04:34,800
名前が示すように、この秘密鍵は自分

95
00:04:34,800 --> 00:04:37,140
だけの秘密にしておきたいものです。

96
00:04:37,140 --> 00:04:39,726
現実の世界では、どのような文書に署名して

97
00:04:39,726 --> 00:04:42,312
も、手書きの署名は同じように見えま す。

98
00:04:42,312 --> 00:04:44,804
しかし、デジタル署名はメッセージごとに

99
00:04:44,804 --> 00:04:47,427
変わるため、実際にははるかに強力 です。

100
00:04:47,427 --> 00:04:51,593
これは 1 と 0 の文字列のように見え、通常は 256

101
00:04:51,593 --> 00:04:55,759
ビットのような もので、メッセージを少しでも変更すると、そ

102
00:04:55,759 --> 00:04:59,925
のメッセージの署名がどのようになるか が完全に変わります。

103
00:04:59,925 --> 00:05:03,647
もう少し形式的に言えば、署名の生成には、メ

104
00:05:03,647 --> 00:05:08,384
ッセージ自体と秘密キーの両方に依存する機能が含まれます。

105
00:05:08,384 --> 00:05:11,288
秘密キーは、その署名を作成できるのはあなただけであること

106
00:05:11,288 --> 00:05:13,363
を保証します。 また、秘密キーがメッセ

107
00:05:13,363 --> 00:05:16,268
ージに依存しているという事実は、誰もあなたの署名の 1

108
00:05:16,268 --> 00:05:18,446
つをコピーして別のメッセージに偽造するこ

109
00:05:18,446 --> 00:05:20,003
とはできないことを意味します。

110
00:05:20,003 --> 00:05:23,347
これと連携して、署名が有効であることを検証する

111
00:05:23,347 --> 00:05:27,388
ために使用される 2 番目の機能があり、ここで公開キーが登

112
00:05:27,388 --> 00:05:28,085
場します。

113
00:05:28,085 --> 00:05:31,305
実行するのは、これが検証に使用している公開キーに関連付け

114
00:05:31,305 --> 00:05:34,755
られた秘密キーによって生成 された署名であるかどうかを示す

115
00:05:34,755 --> 00:05:37,860
true または false を出力することだけです。

116
00:05:37,860 --> 00:05:41,608
これらの両方の関数がどのように正確に機能するかについては詳

117
00:05:41,608 --> 00:05:45,357
しく説明しませんが、秘 密キーが分からない場合、有効な署名

118
00:05:45,357 --> 00:05:49,106
を見つけることは完全に不可能であるべきだとい う考えです。

119
00:05:49,106 --> 00:05:52,430
具体的には、ランダムな署名を推測してチェックする

120
00:05:52,430 --> 00:05:54,785
ことより優れた戦 略はありません。

121
00:05:54,785 --> 00:05:58,110
署名は、誰もが知っている公開キーを使用してチェ

122
00:05:58,110 --> 00:05:59,080
ックできます。

123
00:05:59,080 --> 00:06:01,416
ここで、長さが 256 ビットの署

124
00:06:01,416 --> 00:06:03,890
名がいくつあるかを考えてみましょう。

125
00:06:03,890 --> 00:06:05,998
それは 2 の 256 乗です。

126
00:06:05,998 --> 00:06:08,522
これは馬鹿げたほど大きな数字です。

127
00:06:08,522 --> 00:06:11,305
それを天文学的に大きいと呼ぶのは、天

128
00:06:11,305 --> 00:06:14,088
文学を過大評価することになるでしょう。

129
00:06:14,088 --> 00:06:16,466
実際、これがどれほど膨大な数で

130
00:06:16,466 --> 00:06:20,480
あるかを説明するためだけに、補足ビデオを作成しました。

131
00:06:20,480 --> 00:06:24,700
ただし、ここでは、特定のメッセージに対する署名が有効であ

132
00:06:24,700 --> 00:06:28,920
ることを検証するとき に、誰かが署名を作成できる唯一の方

133
00:06:28,920 --> 00:06:32,085
法は、検証に使用した公開鍵に関連付けられ

134
00:06:32,085 --> 00:06:36,305
た秘密鍵を知っている場合であると非常に確信できるとだけ言

135
00:06:36,305 --> 00:06:37,360
っておきます。

136
00:06:37,360 --> 00:06:39,919
人々が台帳に取引に署名するようにすることは非常に良

137
00:06:39,919 --> 00:06:42,478
いことですが、わずかな抜け穴が 1 つあ ります。

138
00:06:42,478 --> 00:06:45,297
アリスがボブに 100 ドルを支払うように、ア

139
00:06:45,297 --> 00:06:47,380
リスがトランザクションに署名した

140
00:06:47,380 --> 00:06:50,198
場合、ボブは新しいメッセージにアリスの署名を偽

141
00:06:50,198 --> 00:06:52,772
造できませんが、その同じ行を何度でもコピ

142
00:06:52,772 --> 00:06:54,120
ーすることができます。

143
00:06:54,120 --> 00:06:58,040
そのメッセージと署名の組み合わせは引き続き有効です。

144
00:06:58,040 --> 00:07:01,204
これを回避するために、トランザクションに署名するときに

145
00:07:01,204 --> 00:07:04,485
、そのトランザクションに関連付けられ たある種の一意の

146
00:07:04,485 --> 00:07:07,532
ID もメッセージに含める必要があるようにしました。

147
00:07:07,532 --> 00:07:11,335
そうすること で、アリスがボブに 100

148
00:07:11,335 --> 00:07:16,769
ドルを複数回支払う場合、 台帳上の各行にはまったく新しい署名

149
00:07:16,769 --> 00:07:18,400
が必要になります。

150
00:07:18,400 --> 00:07:20,471
デジタル署名は、この初期プロトコル

151
00:07:20,471 --> 00:07:22,665
の信頼性の大きな側面を取り除きます。

152
00:07:22,665 --> 00:07:25,026
しかし、それでも 、本当にこれをやろうとすると、

153
00:07:25,026 --> 00:07:27,486
ある種の名誉システムに依存することになるでしょう。

154
00:07:27,486 --> 00:07:30,229
つまり、 誰もが実際に手続きを進めて、毎月末に現

155
00:07:30,229 --> 00:07:32,971
金で決済するだろうと信じていること になります。

156
00:07:32,971 --> 00:07:36,106
たとえば、チャーリーが数千ドルの借金を抱えていて、

157
00:07:36,106 --> 00:07:39,241
ただ出席することを拒否し たらどうなるでしょうか?

158
00:07:39,241 --> 00:07:43,871
解決のために現金に戻る唯一の本当の理由は、多額の借金を抱

159
00:07:43,871 --> 00:07:45,946
えている人がいる場合です。

160
00:07:45,946 --> 00:07:49,853
したがって、人々が摂取額を超えて支出することを防ぐ

161
00:07:49,853 --> 00:07:53,459
何らかの方法がある限り、実際に現金で決済する必要

162
00:07:53,459 --> 00:07:57,065
はないという賢明な考えを お持ちかもしれません。

163
00:07:57,065 --> 00:08:00,314
おそらく、全員にポットに 100 ドルを支払わせ

164
00:08:00,314 --> 00:08:03,562
ることから始めて、アリスが 100 ドル、ボブが

165
00:08:03,562 --> 00:08:06,031
100 ドル、チャ ーリーが 100

166
00:08:06,031 --> 00:08:09,280
ドルというように台帳の最初の数行を読み取らせます。

167
00:08:09,280 --> 00:08:12,614
さて、誰かがその台帳にすでに持っている以上のお

168
00:08:12,614 --> 00:08:16,094
金を費やしている取引は受け入れ ないでください。

169
00:08:16,094 --> 00:08:19,250
たとえば、最初の 2 つのトランザクションが、チャ

170
00:08:19,250 --> 00:08:21,775
ーリーがアリスに 50 ドルを支払い、

171
00:08:21,775 --> 00:08:24,931
チャーリーがボブに 50 ドルを支払う場合、チャー

172
00:08:24,931 --> 00:08:28,087
リーがあなたに 20 ドルを支払うと追加しようとし

173
00:08:28,087 --> 00:08:31,243
た場合、それ は無効となり、署名しなかったかのよう

174
00:08:31,243 --> 00:08:32,380
に無効になります。

175
00:08:32,380 --> 00:08:35,809
これは、トランザクションを検証するには、その時点

176
00:08:35,809 --> 00:08:39,788
までのトランザクションの完全な履歴を知る必要があることを意

177
00:08:39,788 --> 00:08:40,474
味します。

178
00:08:40,474 --> 00:08:43,735
これは仮想通貨 にも当てはまりま

179
00:08:43,735 --> 00:08:47,200
すが、最適化の余地は少しあります。

180
00:08:47,200 --> 00:08:51,358
ここで興味深いのは、このステップにより元帳と実際

181
00:08:51,358 --> 00:08:55,517
の物理的な米ドルとの関係 が削除されることです。

182
00:08:55,517 --> 00:08:59,088
理論的には、世界中の誰もがこの台帳を使用してい

183
00:08:59,088 --> 00:09:02,659
れば、実際の米ドルに両替することなく、この台帳で

184
00:09:02,659 --> 00:09:06,528
お金を送受信するだけ で一生を過ごすことができます。

185
00:09:06,528 --> 00:09:09,811
実際、この点を強調するために、元帳

186
00:09:09,811 --> 00:09:15,100
上の数量を元帳ドル (略して LD) と呼び始めましょう。

187
00:09:15,100 --> 00:09:19,143
元帳ド ルを実際の米ドルに自由に交換できます。

188
00:09:19,143 --> 00:09:21,908
たとえば、アリスは、ボブがアリスに 1 0

189
00:09:21,908 --> 00:09:25,553
ドルの元帳ドルをこの共通元帳に支払うトランザクションを追加

190
00:09:25,553 --> 00:09:28,946
して署名するのと引き換えに 、現実世界でボブに 10

191
00:09:28,946 --> 00:09:30,203
ドル紙幣を渡します。

192
00:09:30,203 --> 00:09:33,329
しかし、そのような交換はプロトコルによって保証

193
00:09:33,329 --> 00:09:34,370
されていません。

194
00:09:34,370 --> 00:09:39,044
これは、公開市場でドルをユーロやその他の通貨

195
00:09:39,044 --> 00:09:41,889
に交換する方法に似ています。

196
00:09:41,889 --> 00:09:44,940
それはそれ自体が独立したものです。

197
00:09:44,940 --> 00:09:47,960
これは、ビットコインやその他の暗号通貨につ

198
00:09:47,960 --> 00:09:50,980
いて理解しておくべき最初の重要なことです。

199
00:09:50,980 --> 00:09:52,672
それは何かというと台帳です。

200
00:09:52,672 --> 00:09:56,056
取引履歴が通貨です。

201
00:09:56,056 --> 00:09:58,868
もちろん、ビットコインの 場合、人々が現金を使

202
00:09:58,868 --> 00:10:01,680
って購入するため、お金は台帳に記録されません。

203
00:10:01,680 --> 00:10:03,301
新しいお金が台帳にどのよ うに入力さ

204
00:10:03,301 --> 00:10:04,922
れるかについては、数分で説明します。

205
00:10:04,922 --> 00:10:07,447
しかしその前に、現在の台帳ドルシス

206
00:10:07,447 --> 00:10:11,233
テムと暗号通貨の仕組みとの間には、実際にはさらに大きな

207
00:10:11,233 --> 00:10:12,496
違いがありま す。

208
00:10:12,496 --> 00:10:15,680
これまでのところ、この台帳は、誰でも新しい行を追加できる

209
00:10:15,680 --> 00:10:18,645
Web サイトなどの公共の場所にあると述べてきました。

210
00:10:18,645 --> 00:10:21,060
しかしそれには、中央の場所、 つまり誰が

211
00:10:21,060 --> 00:10:23,704
Web サイトをホストし、誰が新しい行の追加ル

212
00:10:23,704 --> 00:10:26,579
ールを管理しているのかを信頼する必要が あります。

213
00:10:26,579 --> 00:10:29,417
この少しの信頼を取り除くために、全員に台

214
00:10:29,417 --> 00:10:32,255
帳のコピーを自分で保管してもらいま す。

215
00:10:32,255 --> 00:10:36,483
次に、アリスがボブに 100 台帳ドルを支払うように、取

216
00:10:36,483 --> 00:10:40,710
引をしたいときは、それを世界 中にブロードキャストして、

217
00:10:40,710 --> 00:10:45,240
人々が聞いて自分のプライベート台帳に記録できるようにします。

218
00:10:45,240 --> 00:10:47,081
しかし、もっと何かしなければ、こ

219
00:10:47,081 --> 00:10:49,038
のシステムはとんでもなく悪いです。

220
00:10:49,038 --> 00:10:50,819
正しい台帳とは何かについて全員の

221
00:10:50,819 --> 00:10:52,913
合意を得るにはどうすればよいでしょうか?

222
00:10:52,913 --> 00:10:55,842
アリスがボブに 10 台帳ドルを支払うように、ボブがトラン

223
00:10:55,842 --> 00:10:58,771
ザクションを受け取ったとき、他の全員が同じトランザクションを

224
00:10:58,771 --> 00:11:01,700
受け取り、信じていることをどうやって確認 できるでしょうか?

225
00:11:01,700 --> 00:11:04,599
彼は後でチャーリーのところに行き、その同じ 10

226
00:11:04,599 --> 00:11:07,731
台帳ドルを使っ て取引を行うことができるのでしょうか?

227
00:11:07,731 --> 00:11:10,565
実際に、ブロードキャストされるトランザクションを聞いて

228
00:11:10,565 --> 00:11:12,286
いるだけだと想像してみてください。

229
00:11:12,286 --> 00:11:16,058
他の全員が同じトランザクションを同じ順序で記録している

230
00:11:16,058 --> 00:11:18,618
ことをどうやって確認できるでしょうか?

231
00:11:18,618 --> 00:11:21,306
これが本当に問題の核心です。

232
00:11:21,306 --> 00:11:23,111
これは 興味深いパズルです。

233
00:11:23,111 --> 00:11:26,856
取引を承認または拒否する方法とその順序についてのプ

234
00:11:26,856 --> 00:11:30,457
ロトコルを思いつき、その同じプロトコルに従っている

235
00:11:30,457 --> 00:11:34,058
世界中の誰かがあなた と同じように見える個人台帳を

236
00:11:34,058 --> 00:11:37,803
持っていると確信できるようにすることはでき ますか?

237
00:11:37,803 --> 00:11:41,101
これは、ビットコインのオリジナ

238
00:11:41,101 --> 00:11:44,620
ル論文で取り上げられた問題です。

239
00:11:44,620 --> 00:11:48,098
大まかに言えば、ビットコインが提供する解決策は、最も

240
00:11:48,098 --> 00:11:51,577
多くの計算作業が投入 された台帳を信頼することです。

241
00:11:51,577 --> 00:11:55,042
それが何を意味するのか、少し説明します。

242
00:11:55,042 --> 00:11:57,919
これには暗号化ハッシュ関数が含まれます。

243
00:11:57,919 --> 00:12:00,501
私たちが構築する一般的なアイデアは

244
00:12:00,501 --> 00:12:04,087
、何を信頼するかの基礎として計算作業を使用すると、

245
00:12:04,087 --> 00:12:07,673
不正な取引や台帳の矛盾を 引き起こすために実行不可

246
00:12:07,673 --> 00:12:11,403
能な量の計算が必要になるようにすることができるとい

247
00:12:11,403 --> 00:12:12,263
うものです。

248
00:12:12,263 --> 00:12:14,886
繰り返しますが、このような通貨を使用するために誰

249
00:12:14,886 --> 00:12:17,508
もが知る必要がある ことを超えて、この問題は雑草

250
00:12:17,508 --> 00:12:20,240
の中に深く入り込んでいることを思い出してください。

251
00:12:20,240 --> 00:12:22,501
しかし、これは本当に素晴らしいアイデアで

252
00:12:22,501 --> 00:12:25,555
あり、それを理解すれば、ビットコインや他の暗号通貨の

253
00:12:25,555 --> 00:12:27,251
核心を理解することができます。

254
00:12:27,251 --> 00:12:30,880
まず最初に、ハッシュ関数とは何でしょうか?

255
00:12:30,880 --> 00:12:32,348
これらの関数の 1 つの入力には、どのような種

256
00:12:32,348 --> 00:12:34,072
類のメッセージまたはファイルを使用してもかまいません。

257
00:12:34,072 --> 00:12:35,348
実際には、それは重 要ではありません。

258
00:12:35,348 --> 00:12:39,466
そして出力は、256 ビットなど、ある種の固定長のビット列

259
00:12:39,466 --> 00:12:39,878
です。

260
00:12:39,878 --> 00:12:42,295
この出力は、メッセージのハッシュ

261
00:12:42,295 --> 00:12:44,713
またはダイジェストと呼ばれます。

262
00:12:44,713 --> 00:12:47,656
そしてその意図は、ラン ダムに見えることです。

263
00:12:47,656 --> 00:12:49,960
これはランダムではなく、指定された

264
00:12:49,960 --> 00:12:52,400
入力に対して常に同じ出力を返します。

265
00:12:52,400 --> 00:12:55,581
ただし、入力をわずかに変更すると (文字の 1

266
00:12:55,581 --> 00:12:57,966
つだけを編集するなど)、結果のハッ

267
00:12:57,966 --> 00:13:00,352
シュが完全に変化するという考えです。

268
00:13:00,352 --> 00:13:04,065
実際、ここで示している SHA256 と呼ばれる

269
00:13:04,065 --> 00:13:07,779
ハッシュ関数では、入力をわずかに変更したときに出力

270
00:13:07,779 --> 00:13:11,492
がどのように変化するかはまったく予測 できません。

271
00:13:11,492 --> 00:13:14,405
ご存知のとおり、これは単なるハッシュ

272
00:13:14,405 --> 00:13:17,480
関数ではなく、暗号化ハッシュ関数です。

273
00:13:17,480 --> 00:13:21,031
つまり、逆方向の計算は不可能です。

274
00:13:21,031 --> 00:13:24,402
1 と 0 の文字列 を示して、その入力の

275
00:13:24,402 --> 00:13:27,925
SHA256 ハッシュがこの正確なビット文字列

276
00:13:27,925 --> 00:13:31,449
を与えるように 入力を見つけるように依頼した場

277
00:13:31,449 --> 00:13:35,280
合、単に推測して確認するより良い方法はありません。

278
00:13:35,280 --> 00:13:37,840
繰り返しになりますが、2 対 256

279
00:13:37,840 --> 00:13:40,266
の推測を行うのにどれだけの計算が必

280
00:13:40,266 --> 00:13:43,905
要になるかを知りたい場合は、補足ビデオをご覧ください。

281
00:13:43,905 --> 00:13:47,573
実際、それを書く のがとても楽しかったです。

282
00:13:47,573 --> 00:13:50,825
この関数がどのように正確に機能するかを詳しく調

283
00:13:50,825 --> 00:13:54,348
べれば、推測したり確認したりすることなく、適切な入力

284
00:13:54,348 --> 00:13:58,277
をリバース エンジニアリ ングできると思うかもしれません。

285
00:13:58,277 --> 00:14:01,440
しかし、それを実現する方法を考え出した人は誰もいません。

286
00:14:01,440 --> 00:14:04,220
興味深いことに、逆方向の計算が難し

287
00:14:04,220 --> 00:14:07,001
いという厳密な証拠はありませ ん。

288
00:14:07,001 --> 00:14:09,509
それでも、現代のセキュリティの大部分は、暗号

289
00:14:09,509 --> 00:14:12,131
化ハッシュ関数と、暗号化ハッシュ関数がこの特

290
00:14:12,131 --> 00:14:14,525
性を持っているという考えに依存しています。

291
00:14:14,525 --> 00:14:17,420
現在、ブラウザーが YouTube との間で確立し

292
00:14:17,420 --> 00:14:20,648
ている安全な接続、またはブラウザーが銀行との間で確立してい

293
00:14:20,648 --> 00:14:22,541
る安全な接続の基礎となっているア

294
00:14:22,541 --> 00:14:25,658
ルゴリズムを調べてみると、おそらくそこに SHA256

295
00:14:25,658 --> 00:14:27,440
という名前が表示されるでしょう。

296
00:14:27,440 --> 00:14:31,025
現時点では、このような関数がトランザクション

297
00:14:31,025 --> 00:14:34,611
の特定のリストが大量の 計算量に関連している

298
00:14:34,611 --> 00:14:38,360
ことをどのように証明できるかに焦点を当てます。

299
00:14:38,360 --> 00:14:41,335
誰かがトランザクションのリストを見せて、「特別な番

300
00:14:41,335 --> 00:14:43,834
号を見つけたので、その番号をこのトランザ

301
00:14:43,834 --> 00:14:46,929
クションのリストの最後に置き、全体に SHA256

302
00:14:46,929 --> 00:14:49,190
を適用すると、その出力の最初の 30

303
00:14:49,190 --> 00:14:52,284
ビットが表示される」と言うところを想像してください。

304
00:14:52,284 --> 00:14:53,474
はすべてゼロです。

305
00:14:53,474 --> 00:14:55,458
彼らにとってその番号 を見つけるの

306
00:14:55,458 --> 00:14:57,441
はどれほど大変だったと思いますか?

307
00:14:57,441 --> 00:15:01,021
ランダムなメッセージの場合、ハッシュが 3

308
00:15:01,021 --> 00:15:04,601
0 個の連続するゼロで始まる確率は 230

309
00:15:04,601 --> 00:15:08,181
分の 1、つまり約 10 億分の 1 です。

310
00:15:08,181 --> 00:15:10,849
また、SHA256 は暗号化ハッシュ関数で

311
00:15:10,849 --> 00:15:13,517
あるため、そのような特別な数値を見つける

312
00:15:13,517 --> 00:15:16,312
唯一の方法は、推測して確認することだけです。

313
00:15:16,312 --> 00:15:18,762
したがって、この人はほぼ確実に、この特別

314
00:15:18,762 --> 00:15:20,628
な番号を見つけるまでに約 10

315
00:15:20,628 --> 00:15:23,077
億もの異なる番号を調べる必要がありました。

316
00:15:23,077 --> 00:15:25,474
その数値 がわかれば、検証は非常に簡単です。

317
00:15:25,474 --> 00:15:27,871
ハッシュを実行すると、ゼロが 30 個あ

318
00:15:27,871 --> 00:15:28,961
ることがわかります。

319
00:15:28,961 --> 00:15:32,720
つまり、自分自身が同じ労力を費やすこと

320
00:15:32,720 --> 00:15:37,420
なく、彼らが膨大な作業を行ったことを検証できます。

321
00:15:37,420 --> 00:15:39,213
これを作業証明と呼びます。

322
00:15:39,213 --> 00:15:41,664
そして重要なことに、この作業はすべて本質的にト

323
00:15:41,664 --> 00:15:44,223
ランザクションのリス トに関連付けられています。

324
00:15:44,223 --> 00:15:45,977
これらのトランザクションの 1

325
00:15:45,977 --> 00:15:48,059
つをわずかでも変更すると、ハッシュが

326
00:15:48,059 --> 00:15:49,594
完全に変更されてしまいます。

327
00:15:49,594 --> 00:15:51,679
したがって、新しいプルーフ オブ

328
00:15:51,679 --> 00:15:54,132
ワーク、つまりリストのハッシュが 30

329
00:15:54,132 --> 00:15:57,811
個のゼロで始まるようにする新しい番号を見つけるには、さらに

330
00:15:57,811 --> 00:16:00,264
10 億回の推測を行う必 要があります。

331
00:16:00,264 --> 00:16:04,000
それでは、分散台帳の状況を振り返ってみましょ う。

332
00:16:04,000 --> 00:16:07,311
誰もが取引をブロードキャストしているので、正しい元帳

333
00:16:07,311 --> 00:16:10,622
が何であるかについて 彼らが同意する方法が必要です。

334
00:16:10,622 --> 00:16:14,051
先ほども述べたように、元のビットコイン論文の背後にある

335
00:16:14,051 --> 00:16:16,990
中心的なアイデアは、最も多くの労力が費やされた台

336
00:16:16,990 --> 00:16:19,440
帳を誰もが信頼できるようにすることです。

337
00:16:19,440 --> 00:16:22,690
これが機能する方法は、まず特定の元帳をブロックに

338
00:16:22,690 --> 00:16:25,940
編成することです。 各ブロ ックは、トランザクシ

339
00:16:25,940 --> 00:16:29,461
ョンのリストと作業証明、つまり、ブロック全体のハッ

340
00:16:29,461 --> 00:16:32,711
シュがゼロの束で始まる特別な番号で構成されます。

341
00:16:32,711 --> 00:16:36,647
現時点では、60 個のゼロから始める必要があるとします。

342
00:16:36,647 --> 00:16:39,318
ただし、後で、その数を選択するため

343
00:16:39,318 --> 00:16:41,427
のより体系的な方法に戻ります。

344
00:16:41,427 --> 00:16:44,047
トランザクションが送信者によって署名された場

345
00:16:44,047 --> 00:16:46,895
合にのみ有効であるとみなされるのと同じように、ブロ

346
00:16:46,895 --> 00:16:50,200
ックは作業証明がある場合にのみ 有効であるとみなされます。

347
00:16:50,200 --> 00:16:53,544
また、これらのブロックに標準的な順序があること

348
00:16:53,544 --> 00:16:56,610
を確認するために、ブロックのヘッダーに前のブ

349
00:16:56,610 --> 00:16:59,537
ロックのハッシュが含まれる ようにします。

350
00:16:59,537 --> 00:17:03,292
そうすれば、戻っていずれかのブロックを変更したり、2

351
00:17:03,292 --> 00:17:06,908
つの ブロックの順序を交換したりすると、その後に来る

352
00:17:06,908 --> 00:17:10,524
ブロックが変更され、そのブロ ックのハッシュが変更さ

353
00:17:10,524 --> 00:17:14,140
れ、その後に来るブロックも変更されます。 、 等々。

354
00:17:14,140 --> 00:17:16,652
そのためには、すべての作業をやり直す必要があり

355
00:17:16,652 --> 00:17:18,946
、各ブロックのハッシュが 60 個のゼロ

356
00:17:18,946 --> 00:17:21,677
で始まる新しい特別な番号を見つける必要があります。

357
00:17:21,677 --> 00:17:24,447
このようにブロックが連鎖してい

358
00:17:24,447 --> 00:17:28,601
るため、台帳と呼ぶのではなくブロックチェーンと呼

359
00:17:28,601 --> 00:17:30,160
ぶのが一般的です。

360
00:17:30,160 --> 00:17:32,694
アップデートされたプロトコルの一環として、世界

361
00:17:32,694 --> 00:17:35,340
中の誰でもブロック作成者になれるようになります。

362
00:17:35,340 --> 00:17:38,148
これが意味するのは、ブロードキャストされているトランザ

363
00:17:38,148 --> 00:17:39,812
クションをリッスンし、それらを

364
00:17:39,812 --> 00:17:42,620
いくつかのブロックに収集し、そのブロックのハッシュが

365
00:17:42,620 --> 00:17:45,428
60 個のゼロで始まる特別な 番号を見つけるために大量

366
00:17:45,428 --> 00:17:46,573
の作業を行うことです。

367
00:17:46,573 --> 00:17:48,825
ブロックを見つけると、見つけたブロック

368
00:17:48,825 --> 00:17:50,289
をブロードキャストします。

369
00:17:50,289 --> 00:17:52,823
ブロック作成者にこのすべての作業に報酬を与えるため

370
00:17:52,823 --> 00:17:55,358
に、彼女がブロック を組み立てるときに、ブロックの

371
00:17:55,358 --> 00:17:58,399
先頭に非常に特別なトランザクションを含めることを許可します。

372
00:17:58,399 --> 00:18:00,934
その トランザクションで、彼女は、たとえば、何も

373
00:18:00,934 --> 00:18:03,164
ないところから 10 元帳ドルを獲得します。

374
00:18:03,164 --> 00:18:06,398
これはブ ロック報酬と呼ばれ、トランザクションを受

375
00:18:06,398 --> 00:18:09,632
け入れるかどうかに関する通常のル ールの例外です。

376
00:18:09,632 --> 00:18:13,780
誰かからのものではないので、署名する必要はありません。

377
00:18:13,780 --> 00:18:16,669
それはまた、私たちの経済における元帳ドルの総数が

378
00:18:16,669 --> 00:18:19,558
新しいブロックごとに増加することを意味 します。

379
00:18:19,558 --> 00:18:24,304
ブロックの作成は、多くの作業を必要とし、経済に新しい通

380
00:18:24,304 --> 00:18:29,220
貨を導入するため、マイニングと呼ばれることがよくあります。

381
00:18:29,220 --> 00:18:32,131
しかし、マイナーについて聞いたり読んだりするときは、彼らが

382
00:18:32,131 --> 00:18:34,240
実際に行っているのは、トランザクションを

383
00:18:34,240 --> 00:18:37,152
リッスンし、ブロックを作成し、それらのブロックをブロードキ

384
00:18:37,152 --> 00:18:39,261
ャストし、それによって新たな報酬を得ると

385
00:18:39,261 --> 00:18:41,169
いうことであることに留意してください。

386
00:18:41,169 --> 00:18:44,262
マイナーの観点から見ると、各ブロックはミニ

387
00:18:44,262 --> 00:18:47,215
チュアの宝くじのようなもので、幸運な 1

388
00:18:47,215 --> 00:18:51,012
人がブロックのハッシュが多数 のゼロで始まる特別な数字

389
00:18:51,012 --> 00:18:54,386
を見つけるまで、全員ができるだけ早く数字を推測

390
00:18:54,386 --> 00:18:56,777
し、その数字を獲得します。 褒美。

391
00:18:56,777 --> 00:18:59,381
このシステムを単に支払いに使用したい人は

392
00:18:59,381 --> 00:19:02,605
、トランザクションを監視するのではなく、マイナーによ

393
00:19:02,605 --> 00:19:05,829
ってブロードキャストされ ているブロックだけを監視し

394
00:19:05,829 --> 00:19:09,054
、ブロックチェーンの自分の個人的なコピーを更新する

395
00:19:09,054 --> 00:19:10,046
ことになります。

396
00:19:10,046 --> 00:19:13,228
ここで、私たちのプロトコルに追加された重要な点は、トラン

397
00:19:13,228 --> 00:19:15,047
ザクション履 歴が矛盾する 2

398
00:19:15,047 --> 00:19:18,229
つの異なるブロックチェーンを聞いた場合、最も長いブロック

399
00:19:18,229 --> 00:19:21,411
チェーン、つまり 最も多くの労力が費やされたブロックチェ

400
00:19:21,411 --> 00:19:22,775
ーンを優先することです。

401
00:19:22,775 --> 00:19:25,787
同点の場合は、ど ちらかが長くなる追

402
00:19:25,787 --> 00:19:28,800
加のブロックが聞こえるまで待ちます。

403
00:19:28,800 --> 00:19:32,520
したがって、中央の権威がなく、誰もが独自のブロックチ

404
00:19:32,520 --> 00:19:36,240
ェーンのコピーを 維持しているとしても、最も多くの労

405
00:19:36,240 --> 00:19:38,815
力が費やされたブロックチェーンを優

406
00:19:38,815 --> 00:19:42,535
先することに全員が同意すれば、分散型の合意に達する方

407
00:19:42,535 --> 00:19:43,680
法が得られます。

408
00:19:43,680 --> 00:19:46,366
これがなぜ信頼できるシステムになるのかを確認し、ど

409
00:19:46,366 --> 00:19:48,300
の時点で支払いが正当であると信頼す

410
00:19:48,300 --> 00:19:50,987
べきかを理解するには、このシステムを使用して誰かを

411
00:19:50,987 --> 00:19:52,921
だますために何が必要になるかを正確

412
00:19:52,921 --> 00:19:54,748
に説明することが非常に役立ちます。

413
00:19:54,748 --> 00:19:58,101
おそらく、アリスはボブを詐欺的なブロックで騙そうとしてい

414
00:19:58,101 --> 00:20:00,645
るのでしょう。 つまり、彼女は彼に 100

415
00:20:00,645 --> 00:20:03,652
台帳ドルを支払うことを含むブロックをネットワークの

416
00:20:03,652 --> 00:20:06,774
残りの部分にブロードキャストせずにブロックを送信しよう

417
00:20:06,774 --> 00:20:07,583
としています。

418
00:20:07,583 --> 00:20:09,374
そうすれば、他の誰もが彼女が その

419
00:20:09,374 --> 00:20:11,563
100 ドルを持っているとまだ思っています。

420
00:20:11,563 --> 00:20:14,330
これを行うには、それぞれが独自のブロックで作業

421
00:20:14,330 --> 00:20:16,752
している他のすべてのマイナーよりも先に、有

422
00:20:16,752 --> 00:20:19,058
効な作業証明を見つけなければなりません。

423
00:20:19,058 --> 00:20:20,973
そして、それは 間違いなく起こる可能性があります。

424
00:20:20,973 --> 00:20:22,888
もしかしたら、アリスがたまたまこのミニチュアの宝

425
00:20:22,888 --> 00:20:24,880
くじを他の人より先に当選させただけ かもしれません。

426
00:20:24,880 --> 00:20:28,468
しかし、ボブは依然として他のマイナーによるブロードキャスト

427
00:20:28,468 --> 00:20:32,055
を聞くことにな るため、この不正なブロックを信じ続けるため

428
00:20:32,055 --> 00:20:34,900
に、アリスはボブのブロックチェーンのこの特別

429
00:20:34,900 --> 00:20:38,488
なフォークに、彼が聞いているものとは異なるブロックを追加し

430
00:20:38,488 --> 00:20:41,457
続けるすべての作業を自分で 行う必要があります。

431
00:20:41,457 --> 00:20:42,942
残りの鉱山労働者から。

432
00:20:42,942 --> 00:20:45,740
プロトコルに従って、ボブは常に自分が知っている最長

433
00:20:45,740 --> 00:20:48,216
のチェーンを信頼することを忘れないでください。

434
00:20:48,216 --> 00:20:51,199
アリスは、ネットワーク上の残りのマイナーを

435
00:20:51,199 --> 00:20:54,454
すべて合わせたよりも早くブロックを偶然見つけた場

436
00:20:54,454 --> 00:20:57,981
合、数ブロックの間これを維持で きるかもしれません。

437
00:20:57,981 --> 00:21:01,194
しかし、アリスが全マイナーのコンピューティング

438
00:21:01,194 --> 00:21:04,407
リソースの 50% 近くを持っていない限り、他の

439
00:21:04,407 --> 00:21:07,353
マイナー全員が取り組んでいるブロックチェー

440
00:21:07,353 --> 00:21:10,566
ンが、アリスがボブに与えている単一の不正なブロッ

441
00:21:10,566 --> 00:21:14,315
クチェーンよりも速く成長する可能 性が圧倒的になります。

442
00:21:14,315 --> 00:21:17,746
したがって、十分な時間が経った後、ボブはアリスから聞

443
00:21:17,746 --> 00:21:20,541
いたことを拒否し、他の全員が取り組んでいるよ

444
00:21:20,541 --> 00:21:22,955
り長いチェーンを支持するつもり です。

445
00:21:22,955 --> 00:21:26,424
これは、すぐに聞こえた新しいブロックを必ずしも信頼

446
00:21:26,424 --> 00:21:28,783
する必要はなく、その上にいくつか

447
00:21:28,783 --> 00:21:32,252
の新しいブロックが追加されるまで待つ必要があること

448
00:21:32,252 --> 00:21:33,640
に注意してください。

449
00:21:33,640 --> 00:21:36,279
より長いブロックチェ ーンについてまだ聞いたこ

450
00:21:36,279 --> 00:21:38,917
とがない場合は、このブロックが他の人が使用して

451
00:21:38,917 --> 00:21:41,785
いるのと同じチェ ーンの一部であると信頼できます。

452
00:21:41,785 --> 00:21:46,040
これで、主要なアイデアはすべて完成しました。

453
00:21:46,040 --> 00:21:48,598
作業証明に基づくこの分散台帳システムは、多かれ少なかれ

454
00:21:48,598 --> 00:21:50,968
、ビットコイン プロトコルがどのように機能するか

455
00:21:50,968 --> 00:21:53,526
、そして他の多くの暗号通貨がどのように機能するかに似て

456
00:21:53,526 --> 00:21:53,906
います。

457
00:21:53,906 --> 00:21:55,896
明確にする必要がある詳細がいくつかあります。

458
00:21:55,896 --> 00:21:58,491
先ほど、プルーフ・オブ・ワークとは、ブロックのハッシュが

459
00:21:58,491 --> 00:22:00,192
60 個のゼロで始まるように特別な番

460
00:22:00,192 --> 00:22:02,340
号を見つけることであるかもしれないと言いました。

461
00:22:02,340 --> 00:22:05,093
実際のビットコイン プロトコルの仕組み

462
00:22:05,093 --> 00:22:08,397
は、新しいブロックを見つけるのに平均して 10

463
00:22:08,397 --> 00:22:12,115
分かかるように、ゼロの数を定 期的に変更することです。

464
00:22:12,115 --> 00:22:15,810
したがって、ネットワークに追加されるマイナーが増える

465
00:22:15,810 --> 00:22:19,505
につれて、このミニチュア宝くじの当選者は 10 分に

466
00:22:19,505 --> 00:22:23,200
1 人程度になるまで、挑 戦はますます難しくなります。

467
00:22:23,200 --> 00:22:26,951
多くの新しい暗号通貨のブロック時間はそれよりもはるかに

468
00:22:26,951 --> 00:22:27,889
短くなります。

469
00:22:27,889 --> 00:22:30,178
そして、ビットコインのお金はすべて、最終的

470
00:22:30,178 --> 00:22:32,468
には何らかのブロック 報酬から得られます。

471
00:22:32,468 --> 00:22:34,474
当初、これらの報酬はブロックあたり

472
00:22:34,474 --> 00:22:35,923
50 ビットコインでした。

473
00:22:35,923 --> 00:22:38,153
実際、Bl ock Explorer という素晴らしい

474
00:22:38,153 --> 00:22:40,543
Web サイトにアクセスすると、ビットコインのブロックチェ

475
00:22:40,543 --> 00:22:41,897
ーンを簡単に調べることができます。

476
00:22:41,897 --> 00:22:45,498
そして、チェーン上の最初の数ブロックを見ると、マイナーへ

477
00:22:45,498 --> 00:22:48,106
の 50 ビットコインの報酬以外のトランザ

478
00:22:48,106 --> 00:22:49,844
クションは含まれていません。

479
00:22:49,844 --> 00:22:53,579
しかし、21 0,000 ブロックごと、つまり約

480
00:22:53,579 --> 00:22:56,568
4 年ごとに、その報酬は半分に減ります。

481
00:22:56,568 --> 00:23:00,115
現時点での報 酬は12です。1ブロックあたり5ビットコイン。

482
00:23:00,115 --> 00:23:03,856
そして、この報酬は時間の経過とともに幾何級数的に減少する

483
00:23:03,856 --> 00:23:07,081
ため、2,100万ビットコインを超えるビットコイン

484
00:23:07,081 --> 00:23:09,920
が存在することは決してないことを意味します。

485
00:23:09,920 --> 00:23:11,657
ただし、これはマイナーが収益を得る

486
00:23:11,657 --> 00:23:13,497
のをやめるという意味ではありません。

487
00:23:13,497 --> 00:23:15,535
ブロック報酬に加えて、マ イナーは

488
00:23:15,535 --> 00:23:17,694
取引手数料も受け取ることができます。

489
00:23:17,694 --> 00:23:20,178
これがどのように機能するかというと

490
00:23:20,178 --> 00:23:23,767
、支払いを行うたびに、その支払いが含まれるブロックの

491
00:23:23,767 --> 00:23:27,356
マイナーに送られる取引 手数料を純粋にオプションで含

492
00:23:27,356 --> 00:23:28,736
めることができます。

493
00:23:28,736 --> 00:23:30,557
そうする理由は、ブロードキャス

494
00:23:30,557 --> 00:23:32,946
トするトランザクションを実際に次のブロック

495
00:23:32,946 --> 00:23:36,132
に含めるようマイナーにインセンティブを与えるた めです。

496
00:23:36,132 --> 00:23:39,147
ご存知のとおり、ビットコインでは各ブロックは約

497
00:23:39,147 --> 00:23:41,283
2400 件のトランザクションに

498
00:23:41,283 --> 00:23:44,424
制限されており、これは不必要な制限であると多くの批

499
00:23:44,424 --> 00:23:45,807
評家が主張しています。

500
00:23:45,807 --> 00:23:48,730
比較のために、Vi sa は 1 秒あたり平均約

501
00:23:48,730 --> 00:23:51,887
1700 件のトランザクションを処理し、1 秒あたり

502
00:23:51,887 --> 00:23:55,162
24,000 件以上のト ランザクションを処理できます。

503
00:23:55,162 --> 00:23:58,940
ビットコインのこの比較的遅い処理により、トランザクション

504
00:23:58,940 --> 00:24:02,719
手数 料が高くなります。 これは、マイナーが新しいブロッ

505
00:24:02,719 --> 00:24:06,497
クにどのトランザクションを含めるかを 決定するためです。

506
00:24:06,497 --> 00:24:10,662
これらすべては、暗号通貨を包括的にカバーしていると

507
00:24:10,662 --> 00:24:11,784
は言えません。

508
00:24:11,784 --> 00:24:15,277
私がまだ触れていないニュアンスや代替デザインの選択肢がまだ

509
00:24:15,277 --> 00:24:16,325
たくさんあります。

510
00:24:16,325 --> 00:24:19,245
しかし、私の希望は、これが、さらに読んで枝を追加し

511
00:24:19,245 --> 00:24:22,165
たいと考えている 人にとって、安定した、「待って、

512
00:24:22,165 --> 00:24:25,320
でもなぜ」スタイルの理解の木の幹を提供できることです。

513
00:24:25,320 --> 00:24:27,768
最初に述べたように、この背後にある動機の 1

514
00:24:27,768 --> 00:24:30,643
つは、大量の資金が暗号通貨 に流れ始めていることです。

515
00:24:30,643 --> 00:24:33,392
それが良い投資か悪い投資かについて主張す

516
00:24:33,392 --> 00:24:37,058
るつもりはありませんが、ゲームに参加する人々にとって、少

517
00:24:37,058 --> 00:24:40,723
なくと もテクノロジーの基礎を知っておくことは健全だと本

518
00:24:40,723 --> 00:24:41,640
当に思います。

519
00:24:41,640 --> 00:24:43,212
いつものように、Patreon

520
00:24:43,212 --> 00:24:46,160
でこのチャンネルを可能にしてくれた皆さんに心から感謝します。

521
00:24:46,160 --> 00:24:48,758
誰もが貢献できる立場にあるわけではないことは理解して

522
00:24:48,758 --> 00:24:50,558
いますが、それでも協力することに興

523
00:24:50,558 --> 00:24:52,657
味がある場合、そのための最善の方法の 1

524
00:24:52,657 --> 00:24:54,856
つは、単に他の人にとって興味深い、または役

525
00:24:54,856 --> 00:24:56,855
立つと思われるビデオを共有することです。

526
00:24:56,855 --> 00:24:54,480
ご存知かと思いますが、これは本当に役に立ちます。

