1
00:00:03,900 --> 00:00:06,480
비트코인을 보유한다는 것은 무엇을 의미하나요?

2
00:00:07,420 --> 00:00:10,258
비트코인은 정부가 발행하지 않는 완전한 디지털 

3
00:00:10,258 --> 00:00:13,205
화폐이며, 은행이 계좌를 관리하고 거래를 확인할 

4
00:00:13,205 --> 00:00:16,152
필요가 없고, 누가 비트코인을 발명했는지 아무도 

5
00:00:16,152 --> 00:00:19,100
모른다는 사실은 많은 사람이 들어보셨을 것입니다.

6
00:00:19,380 --> 00:00:21,330
하지만 많은 사람들이 이 질문에 

7
00:00:21,330 --> 00:00:23,280
대한 답을 완전히 알지 못합니다.

8
00:00:24,100 --> 00:00:27,766
답변의 근간이 되는 기술적 세부 사항이 실제로 

9
00:00:27,766 --> 00:00:31,432
동기부여가 될 수 있도록, 여러분만의 비트코인 

10
00:00:31,432 --> 00:00:35,240
버전을 어떻게 발명했는지 단계별로 살펴보겠습니다.

11
00:00:36,140 --> 00:00:39,697
공동 원장을 사용하여 친구들과 결제 내역을 추적하는 

12
00:00:39,697 --> 00:00:42,886
것부터 시작해서, 친구와 주변 세상을 점점 더 

13
00:00:42,886 --> 00:00:46,198
신뢰하기 시작하고, 신뢰의 필요성을 피하기 위해 

14
00:00:46,198 --> 00:00:49,142
암호학에서 몇 가지 아이디어를 도입할 만큼 

15
00:00:49,142 --> 00:00:52,700
영리하다면 결국 암호화폐라는 것을 얻게 될 것입니다.

16
00:00:53,840 --> 00:00:57,687
비트코인은 암호화폐의 첫 번째 구현 사례에 불과하며, 

17
00:00:57,687 --> 00:01:00,380
현재 기존 통화를 사용하는 거래소에는 

18
00:01:00,380 --> 00:01:02,560
수천 개의 암호화폐가 있습니다.

19
00:01:03,300 --> 00:01:05,652
자신만의 게임을 개발하는 과정을 따라가다 

20
00:01:05,652 --> 00:01:07,902
보면 게임의 최신 플레이어를 이해하고, 

21
00:01:07,902 --> 00:01:10,254
다른 디자인을 선택할 여지가 있는 시기와 

22
00:01:10,254 --> 00:01:13,220
이유를 파악하는 데 기초를 다지는 데 도움이 됩니다.

23
00:01:14,100 --> 00:01:17,419
사실 제가 이 주제를 선택한 이유 중 하나는 

24
00:01:17,419 --> 00:01:21,004
작년에 이러한 통화에 대한 엄청난 관심과 투자, 

25
00:01:21,004 --> 00:01:23,660
그리고 과대광고가 있었기 때문입니다.

26
00:01:24,280 --> 00:01:26,365
현재 또는 미래의 환율에 대해 언급하거나 

27
00:01:26,365 --> 00:01:28,541
추측하지는 않겠지만, 암호화폐를 구매하려는 

28
00:01:28,541 --> 00:01:30,899
사람이라면 누구나 암호화폐가 무엇인지 잘 알고 

29
00:01:30,899 --> 00:01:33,620
있어야 한다는 점에는 모두 동의할 것이라고 생각합니다.

30
00:01:33,920 --> 00:01:37,595
금 채굴과 막연한 연관성을 가진 비유가 아니라, 

31
00:01:37,595 --> 00:01:41,135
암호화폐를 주고받고 생성할 때 컴퓨터가 실제로 

32
00:01:41,135 --> 00:01:45,220
어떤 일을 하는지 직접적으로 설명하는 것을 의미합니다.

33
00:01:46,300 --> 00:01:49,601
한 가지 강조하고 싶은 것은 여기서 자세한 내용을 

34
00:01:49,601 --> 00:01:52,430
살펴볼 예정이고 상당한 시간이 걸리겠지만, 

35
00:01:52,430 --> 00:01:55,732
신용카드를 긁을 때 내부에서 어떤 일이 일어나는지 

36
00:01:55,732 --> 00:01:59,151
자세히 알 필요가 없는 것처럼 암호화폐를 사용하기만 

37
00:01:59,151 --> 00:02:02,570
한다면 실제로 이러한 세부 정보를 알 필요는 없다는 

38
00:02:02,570 --> 00:02:03,160
것입니다.

39
00:02:03,720 --> 00:02:05,684
다른 디지털 결제와 마찬가지로, 

40
00:02:05,684 --> 00:02:08,194
사용자 친화적인 애플리케이션이 많이 나와 

41
00:02:08,194 --> 00:02:11,360
있어 별다른 생각 없이 통화를 주고받을 수 있습니다.

42
00:02:11,660 --> 00:02:15,638
차이점은 그 근간이 되는 백본이 거래를 검증하는 

43
00:02:15,638 --> 00:02:19,469
은행이 아니라, 암호학에서 탄생한 일부 수학을 

44
00:02:19,469 --> 00:02:23,743
기반으로 한 탈중앙화된 신뢰 없는 검증 시스템이라는 

45
00:02:23,743 --> 00:02:24,480
점입니다.

46
00:02:25,900 --> 00:02:27,993
하지만 우선 암호화폐에 대한 

47
00:02:27,993 --> 00:02:30,480
생각은 잠시 내려놓으셨으면 합니다.

48
00:02:31,080 --> 00:02:33,230
오늘은 원장과 디지털 서명이라는 좀 더 

49
00:02:33,230 --> 00:02:35,380
현실적인 주제로 이야기를 시작하겠습니다.

50
00:02:36,340 --> 00:02:38,886
친구들과 저녁 식사비 등을 지불하는 

51
00:02:38,886 --> 00:02:41,050
등 자주 돈을 주고받는 경우, 

52
00:02:41,050 --> 00:02:44,360
매번 현금을 교환하는 것이 불편할 수 있습니다.

53
00:02:44,720 --> 00:02:47,126
따라서 미래의 어느 시점에 지불할 모든 

54
00:02:47,126 --> 00:02:50,080
결제를 기록하는 공동 원장을 보관할 수 있습니다.

55
00:02:50,620 --> 00:02:52,961
앨리스가 밥에게 20달러를 지불하고 밥이 

56
00:02:52,961 --> 00:02:55,100
찰리에게 40달러를 지불하는 식입니다.

57
00:02:55,500 --> 00:02:57,341
이 원장은 누구나 가서 새 줄을 

58
00:02:57,341 --> 00:02:59,387
추가할 수 있는 웹사이트처럼 누구나 

59
00:02:59,387 --> 00:03:01,740
접근할 수 있는 공개 원장이 될 것입니다.

60
00:03:02,480 --> 00:03:04,877
매월 말에 모두 함께 모여 거래 

61
00:03:04,877 --> 00:03:07,940
목록을 보고 정산한다고 가정해 보겠습니다.

62
00:03:08,280 --> 00:03:10,254
받은 것보다 더 많이 지출했다면 그 

63
00:03:10,254 --> 00:03:12,129
돈을 냄비에 넣고, 지출한 것보다 

64
00:03:12,129 --> 00:03:14,400
더 많이 받았다면 그 돈을 꺼내면 됩니다.

65
00:03:15,460 --> 00:03:17,491
따라서 이 매우 간단한 시스템의 일부가 되기 

66
00:03:17,491 --> 00:03:19,360
위한 프로토콜은 다음과 같을 수 있습니다.

67
00:03:20,020 --> 00:03:22,749
누구나 장부에 항목을 추가할 수 있으며, 

68
00:03:22,749 --> 00:03:25,360
매월 말에는 모두 함께 모여 결산합니다.

69
00:03:26,300 --> 00:03:28,482
이와 같은 공개 원장의 한 가지 문제점은 

70
00:03:28,482 --> 00:03:30,760
누구나 한 줄을 추가할 수 있다는 점입니다.

71
00:03:31,020 --> 00:03:33,048
그렇다면 앨리스의 승인 없이 밥이 가서 

72
00:03:33,048 --> 00:03:35,076
앨리스가 밥에게 100달러를 지불한다고 

73
00:03:35,076 --> 00:03:36,920
쓰는 것을 어떻게 막을 수 있을까요?

74
00:03:37,780 --> 00:03:40,625
이 모든 거래가 발신자가 의도한 대로 

75
00:03:40,625 --> 00:03:43,200
이루어졌다고 어떻게 믿어야 할까요?

76
00:03:44,580 --> 00:03:46,676
바로 여기에서 디지털 서명이라는 

77
00:03:46,676 --> 00:03:48,540
첫 번째 암호화가 등장합니다.

78
00:03:49,480 --> 00:03:52,540
자필 서명과 마찬가지로 앨리스가 해당 거래 옆에 

79
00:03:52,540 --> 00:03:55,940
자신이 해당 거래를 보았고 승인했음을 증명하는 내용을 

80
00:03:55,940 --> 00:03:59,113
추가할 수 있어야 하며, 다른 사람이 해당 서명을 

81
00:03:59,113 --> 00:04:02,400
위조하는 것이 불가능해야 한다는 것이 이 아이디어의 

82
00:04:02,400 --> 00:04:03,080
핵심입니다.

83
00:04:04,300 --> 00:04:06,785
처음에는 디지털 서명이 불가능할 

84
00:04:06,785 --> 00:04:08,580
것 같을 수도 있습니다.

85
00:04:09,220 --> 00:04:11,411
서명을 구성하는 모든 데이터는 

86
00:04:11,411 --> 00:04:13,860
컴퓨터가 읽고 복사할 수 있습니다.

87
00:04:14,400 --> 00:04:16,140
그렇다면 위조를 방지하려면 어떻게 해야 할까요?

88
00:04:17,320 --> 00:04:19,416
이 작동 방식은 모든 사람이 공개 

89
00:04:19,416 --> 00:04:22,063
키-개인 키 쌍이라고 하는 것을 생성하며, 

90
00:04:22,063 --> 00:04:24,160
각 쌍은 비트 문자열처럼 보입니다.

91
00:04:24,800 --> 00:04:27,779
개인 키는 비밀 키라고도 하므로 SK로 

92
00:04:27,779 --> 00:04:31,300
약칭하고 공개 키는 PK로 약칭할 수 있습니다.

93
00:04:32,340 --> 00:04:34,280
이름에서 알 수 있듯이 이 비밀 

94
00:04:34,280 --> 00:04:36,220
키는 혼자만 알고 싶은 것입니다.

95
00:04:37,060 --> 00:04:39,635
실제 세계에서는 어떤 문서에 서명하든 

96
00:04:39,635 --> 00:04:41,720
자필 서명이 동일하게 보입니다.

97
00:04:42,280 --> 00:04:44,351
하지만 디지털 서명은 메시지에 따라 

98
00:04:44,351 --> 00:04:46,940
변경되기 때문에 실제로는 훨씬 더 강력합니다.

99
00:04:47,840 --> 00:04:51,678
일반적으로 256비트와 같은 1과 0의 

100
00:04:51,678 --> 00:04:56,041
문자열처럼 보이며, 메시지를 조금만 변경해도 

101
00:04:56,041 --> 00:04:59,880
해당 메시지의 서명이 완전히 달라집니다.

102
00:05:00,840 --> 00:05:04,822
좀 더 공식적으로 말하자면, 서명을 생성하려면 메시지 

103
00:05:04,822 --> 00:05:08,540
자체와 개인 키 모두에 의존하는 함수가 필요합니다.

104
00:05:09,200 --> 00:05:11,781
개인 키는 본인만 해당 서명을 생성할 수 

105
00:05:11,781 --> 00:05:14,476
있도록 보장하며, 메시지에 따라 달라진다는 

106
00:05:14,476 --> 00:05:16,945
사실은 누구도 서명 중 하나를 복사하여 

107
00:05:16,945 --> 00:05:19,640
다른 메시지에 위조할 수 없음을 의미합니다.

108
00:05:21,000 --> 00:05:23,256
이와 함께 서명이 유효한지 확인하는 

109
00:05:23,256 --> 00:05:25,625
데 사용되는 두 번째 기능이 있는데, 

110
00:05:25,625 --> 00:05:28,220
바로 공개 키가 이 기능의 역할을 합니다.

111
00:05:29,200 --> 00:05:31,917
인증에 사용 중인 공개 키와 연결된 

112
00:05:31,917 --> 00:05:34,499
개인 키로 생성된 서명인지 여부를 

113
00:05:34,499 --> 00:05:37,760
나타내는 참 또는 거짓을 출력하기만 합니다.

114
00:05:38,640 --> 00:05:42,007
이 두 기능이 정확히 어떻게 작동하는지는 자세히 

115
00:05:42,007 --> 00:05:45,623
설명하지 않겠지만, 비밀 키를 모르면 유효한 서명을 

116
00:05:45,623 --> 00:05:49,240
찾는 것이 완전히 불가능해야 한다는 것이 핵심입니다.

117
00:05:50,060 --> 00:05:52,504
특히, 모든 사람이 알고 있는 공개 키를 

118
00:05:52,504 --> 00:05:54,843
사용하여 확인할 수 있는 무작위 서명을 

119
00:05:54,843 --> 00:05:57,820
추측하고 확인하는 것보다 더 좋은 전략은 없습니다.

120
00:05:58,980 --> 00:06:01,214
이제 길이가 256비트인 서명이 

121
00:06:01,214 --> 00:06:03,200
몇 개 있는지 생각해 보세요.

122
00:06:03,840 --> 00:06:06,180
256의 제곱에 2를 곱한 값입니다!

123
00:06:07,140 --> 00:06:09,560
이것은 엄청나게 많은 숫자입니다.

124
00:06:09,860 --> 00:06:11,938
천문학적으로 크다고 하는 것은 천문학에 

125
00:06:11,938 --> 00:06:13,640
너무 많은 공을 돌리는 것입니다.

126
00:06:14,260 --> 00:06:17,241
실제로 이 숫자가 얼마나 큰지 설명하기 

127
00:06:17,241 --> 00:06:19,680
위해 추가 동영상을 만들었습니다.

128
00:06:20,380 --> 00:06:24,180
여기서 특정 메시지에 대한 서명이 유효한지 확인할 

129
00:06:24,180 --> 00:06:27,574
때, 누군가가 서명을 생성할 수 있는 유일한 

130
00:06:27,574 --> 00:06:31,375
방법은 인증에 사용한 공개 키와 관련된 비밀 키를 

131
00:06:31,375 --> 00:06:35,040
알고 있는 경우에만 가능하다고 가정해 보겠습니다.

132
00:06:37,120 --> 00:06:39,610
사람들이 원장에 거래에 서명하도록 하는 것은 

133
00:06:39,610 --> 00:06:42,200
꽤 좋은 방법이지만, 한 가지 허점이 있습니다.

134
00:06:42,720 --> 00:06:45,194
앨리스가 밥에게 100달러를 지불하는 

135
00:06:45,194 --> 00:06:47,198
거래에 앨리스가 서명한 경우, 

136
00:06:47,198 --> 00:06:50,026
밥은 새 메시지에서 앨리스의 서명을 위조할 

137
00:06:50,026 --> 00:06:52,855
수 없더라도 같은 줄을 원하는 만큼 복사할 

138
00:06:52,855 --> 00:06:53,680
수 있습니다.

139
00:06:54,300 --> 00:06:57,220
해당 메시지-서명 조합은 계속 유효합니다.

140
00:06:57,920 --> 00:07:00,585
이 문제를 해결하기 위해 거래에 

141
00:07:00,585 --> 00:07:03,250
서명할 때 메시지에 해당 거래와 

142
00:07:03,250 --> 00:07:07,100
관련된 일종의 고유 ID가 포함되도록 했습니다.

143
00:07:07,840 --> 00:07:10,592
이렇게 하면 앨리스가 밥에게 100달러를 

144
00:07:10,592 --> 00:07:13,225
여러 번 지불하는 경우 원장의 각 줄에 

145
00:07:13,225 --> 00:07:15,380
완전히 새로운 서명이 필요합니다.

146
00:07:16,760 --> 00:07:18,961
훌륭한 디지털 서명은 이 초기 

147
00:07:18,961 --> 00:07:21,940
프로토콜에서 신뢰의 큰 부분을 제거합니다.

148
00:07:22,380 --> 00:07:24,830
하지만 그래도 실제로 이 작업을 수행한다면 

149
00:07:24,830 --> 00:07:27,280
일종의 명예 시스템에 의존하게 될 것입니다.

150
00:07:27,720 --> 00:07:29,951
즉, 모든 사람이 실제로 매월 말에 

151
00:07:29,951 --> 00:07:32,740
현금으로 정산할 것이라고 믿고 있는 것입니다.

152
00:07:33,560 --> 00:07:36,322
예를 들어, 찰리가 수천 달러의 빚을 

153
00:07:36,322 --> 00:07:39,480
지고 나타나지 않는다면 어떻게 해야 할까요?

154
00:07:40,120 --> 00:07:43,489
정산을 위해 현금으로 되돌리는 유일한 진짜 

155
00:07:43,489 --> 00:07:47,280
이유는 일부 사람들이 많은 돈을 빚진 경우입니다.

156
00:07:47,860 --> 00:07:50,828
따라서 사람들이 수입보다 너무 많이 지출하는 것을 

157
00:07:50,828 --> 00:07:53,479
막을 수 있는 방법만 있다면 실제로 현금으로 

158
00:07:53,479 --> 00:07:56,660
결제할 필요가 없다는 영리한 생각을 할 수도 있습니다.

159
00:07:57,340 --> 00:07:59,787
먼저 모든 사람이 100달러를 냄비에 

160
00:07:59,787 --> 00:08:02,352
넣도록 한 다음, 장부의 처음 몇 줄에 

161
00:08:02,352 --> 00:08:04,916
앨리스가 100달러, 밥이 100달러, 

162
00:08:04,916 --> 00:08:08,180
찰리가 100달러 등을 표시하도록 할 수 있습니다.

163
00:08:09,020 --> 00:08:12,693
이제 누군가가 해당 원장에 이미 가지고 있는 금액보다 

164
00:08:12,693 --> 00:08:16,000
더 많은 금액을 지출하는 거래는 수락하지 마세요.

165
00:08:16,840 --> 00:08:19,992
예를 들어 처음 두 거래가 찰리가 앨리스에게 

166
00:08:19,992 --> 00:08:23,145
50달러를 지불하고 찰리가 밥에게 50달러를 

167
00:08:23,145 --> 00:08:25,794
지불하는 거래인 경우, 밥이 찰리에게 

168
00:08:25,794 --> 00:08:28,694
20달러를 추가하려고 하면 이는 무효이며 

169
00:08:28,694 --> 00:08:32,100
서명한 적이 없는 것과 마찬가지로 무효가 됩니다.

170
00:08:32,940 --> 00:08:36,548
즉, 거래를 확인하려면 해당 시점까지의 

171
00:08:36,548 --> 00:08:39,500
전체 거래 내역을 알아야 합니다.

172
00:08:40,159 --> 00:08:43,221
이는 암호화폐에서도 마찬가지이지만 

173
00:08:43,221 --> 00:08:45,960
최적화의 여지가 약간 있습니다.

174
00:08:48,380 --> 00:08:51,785
여기서 흥미로운 점은 이 단계를 통해 원장과 

175
00:08:51,785 --> 00:08:55,600
실제 미국 달러 사이의 연결이 제거된다는 점입니다.

176
00:08:56,200 --> 00:08:59,085
이론적으로 전 세계 모든 사람이 이 원장을 

177
00:08:59,085 --> 00:09:02,572
사용한다면, 실제 미국 달러로 환전할 필요 없이 이 

178
00:09:02,572 --> 00:09:06,058
원장에서 돈을 주고받는 것만으로 평생을 살 수 있을 

179
00:09:06,058 --> 00:09:06,660
것입니다.

180
00:09:07,580 --> 00:09:11,065
이 점을 강조하기 위해 원장의 수량을 원장 

181
00:09:11,065 --> 00:09:14,260
달러 또는 줄여서 LD라고 부르겠습니다.

182
00:09:14,820 --> 00:09:16,526
물론 원장 달러를 실제 미국 

183
00:09:16,526 --> 00:09:18,660
달러로 자유롭게 환전할 수 있습니다.

184
00:09:19,060 --> 00:09:21,868
예를 들어, 앨리스가 현실 세계에서 밥에게 10달러 

185
00:09:21,868 --> 00:09:24,290
지폐를 주고 밥이 이 공동 원장에 10달러를 

186
00:09:24,290 --> 00:09:27,001
지불하는 거래를 추가하고 서명하는 대가로 앨리스가 

187
00:09:27,001 --> 00:09:29,520
밥에게 10달러를 지급한다고 가정해 보겠습니다.

188
00:09:30,720 --> 00:09:33,090
그러나 이와 같은 교환은 프로토콜에서 

189
00:09:33,090 --> 00:09:34,220
보장하지 않습니다.

190
00:09:34,720 --> 00:09:37,436
이제 오픈 마켓에서 달러를 유로화나 

191
00:09:37,436 --> 00:09:40,560
다른 통화로 환전하는 것과 비슷해졌습니다.

192
00:09:41,180 --> 00:09:43,800
그 자체로 독립적인 기능입니다.

193
00:09:44,580 --> 00:09:47,303
비트코인이나 다른 암호화폐에 대해 가장 

194
00:09:47,303 --> 00:09:49,780
먼저 이해해야 할 중요한 사항입니다.

195
00:09:49,780 --> 00:09:52,420
그것은 바로 장부입니다.

196
00:09:53,180 --> 00:09:55,980
거래 내역은 통화입니다.

197
00:09:57,160 --> 00:09:59,271
물론 비트코인을 사용하면 사람들이 현금으로 

198
00:09:59,271 --> 00:10:01,560
구매할 때 원장에 돈이 들어오는 것은 아닙니다.

199
00:10:02,000 --> 00:10:03,373
몇 분 후에 새로운 자금이 원장에 

200
00:10:03,373 --> 00:10:04,820
어떻게 들어오는지 설명해드리겠습니다.

201
00:10:05,540 --> 00:10:07,670
하지만 그 전에 현재의 원장 달러 

202
00:10:07,670 --> 00:10:10,137
시스템과 암호화폐의 작동 방식 사이에는 

203
00:10:10,137 --> 00:10:12,380
실제로 훨씬 더 큰 차이가 있습니다.

204
00:10:13,020 --> 00:10:15,587
지금까지는 이 원장이 누구나 새 줄을 추가할 수 

205
00:10:15,587 --> 00:10:18,440
있는 웹사이트와 같은 공공장소에 있다고 말씀드렸습니다.

206
00:10:19,220 --> 00:10:21,458
하지만 그러기 위해서는 웹사이트를 

207
00:10:21,458 --> 00:10:23,814
호스팅하는 중앙 위치, 즉 새 회선 

208
00:10:23,814 --> 00:10:26,760
추가 규칙을 제어하는 주체를 신뢰해야 합니다.

209
00:10:27,340 --> 00:10:29,549
이러한 불신을 없애기 위해 모든 사람이 

210
00:10:29,549 --> 00:10:31,960
각자의 장부 사본을 보관하도록 할 것입니다.

211
00:10:32,660 --> 00:10:36,118
그런 다음 앨리스가 밥에게 100달러를 지불하는 

212
00:10:36,118 --> 00:10:39,705
것처럼 거래를 하고 싶을 때 사람들이 듣고 자신의 

213
00:10:39,705 --> 00:10:43,420
개인 장부에 기록할 수 있도록 전 세계로 방송합니다.

214
00:10:44,840 --> 00:10:46,920
하지만 뭔가 더 하지 않으면 

215
00:10:46,920 --> 00:10:49,260
이 시스템은 터무니없이 나쁩니다.

216
00:10:49,820 --> 00:10:51,280
올바른 원장이 무엇인지에 대해 모두가 

217
00:10:51,280 --> 00:10:52,740
동의하도록 하려면 어떻게 해야 할까요?

218
00:10:53,440 --> 00:10:56,118
앨리스가 밥에게 10달러를 지불한 것처럼 밥이 

219
00:10:56,118 --> 00:10:58,693
거래를 수신할 때, 다른 모든 사람이 동일한 

220
00:10:58,693 --> 00:11:01,680
거래를 수신하고 믿었는지 어떻게 확신할 수 있을까요?

221
00:11:02,340 --> 00:11:04,956
나중에 찰리에게 가서 같은 10달러를 

222
00:11:04,956 --> 00:11:07,200
사용하여 거래를 할 수 있을까요?

223
00:11:08,240 --> 00:11:10,211
실제로 방송 중인 트랜잭션을 

224
00:11:10,211 --> 00:11:12,060
듣고 있다고 상상해 보세요.

225
00:11:12,760 --> 00:11:15,599
다른 모든 사람이 동일한 거래를 동일한 순서로 

226
00:11:15,599 --> 00:11:18,220
기록하고 있는지 어떻게 확인할 수 있을까요?

227
00:11:19,420 --> 00:11:21,360
이것이 바로 이 문제의 핵심입니다.

228
00:11:21,600 --> 00:11:22,740
이것은 흥미로운 퍼즐입니다.

229
00:11:23,420 --> 00:11:26,969
거래를 수락하거나 거부하는 방법과 순서에 대한 

230
00:11:26,969 --> 00:11:29,291
프로토콜을 제시할 수 있다면, 

231
00:11:29,291 --> 00:11:32,841
같은 프로토콜을 따르는 전 세계의 모든 사람이 

232
00:11:32,841 --> 00:11:36,118
여러분과 동일한 개인 원장을 가지고 있다고 

233
00:11:36,118 --> 00:11:37,620
확신할 수 있을까요?

234
00:11:38,300 --> 00:11:41,580
이는 원래 비트코인 백서에서 다루었던 문제입니다.

235
00:11:44,060 --> 00:11:48,036
높은 수준에서 비트코인이 제공하는 해결책은 가장 

236
00:11:48,036 --> 00:11:52,160
많은 연산 작업이 수행된 원장을 신뢰하는 것입니다.

237
00:11:52,540 --> 00:11:53,735
잠시 시간을 내어 정확히 어떤 

238
00:11:53,735 --> 00:11:54,860
의미인지 설명해 드리겠습니다.

239
00:11:55,320 --> 00:11:58,120
여기에는 암호화 해시 함수가 포함됩니다.

240
00:11:58,460 --> 00:12:01,791
우리가 구축할 일반적인 아이디어는 무엇을 신뢰할 

241
00:12:01,791 --> 00:12:05,370
수 있는지에 대한 근거로 계산 작업을 사용하면 사기 

242
00:12:05,370 --> 00:12:08,948
거래와 상충되는 원장이 발생하기 위해 실행 불가능한 

243
00:12:08,948 --> 00:12:12,280
양의 계산이 필요하도록 만들 수 있다는 것입니다.

244
00:12:13,040 --> 00:12:16,422
다시 한 번 말씀드리지만, 이런 화폐를 사용하기 위해 

245
00:12:16,422 --> 00:12:19,580
알아야 할 것 이상으로 많은 정보를 담고 있습니다.

246
00:12:20,120 --> 00:12:22,269
하지만 이는 정말 멋진 아이디어이며, 

247
00:12:22,269 --> 00:12:25,136
이를 이해한다면 비트코인과 다른 암호화폐의 핵심을 

248
00:12:25,136 --> 00:12:26,160
이해하는 것입니다.

249
00:12:28,100 --> 00:12:29,940
먼저 해시 함수란 무엇인가요?

250
00:12:30,800 --> 00:12:34,019
이러한 함수 중 하나에 대한 입력은 

251
00:12:34,019 --> 00:12:37,239
모든 종류의 메시지 또는 파일일 수 

252
00:12:37,239 --> 00:12:40,620
있으며 실제로 256비트처럼 보입니다.

253
00:12:41,180 --> 00:12:44,725
이 출력은 메시지의 해시 또는 다이제스트라고 하며, 

254
00:12:44,725 --> 00:12:47,660
그 의도는 무작위로 보이도록 하는 것입니다.

255
00:12:48,000 --> 00:12:49,733
무작위가 아니며, 주어진 입력에 

256
00:12:49,733 --> 00:12:51,660
대해 항상 동일한 출력을 제공합니다.

257
00:12:52,200 --> 00:12:54,493
하지만 입력을 약간만 변경하면, 

258
00:12:54,493 --> 00:12:57,041
예를 들어 문자 중 하나만 편집하면 

259
00:12:57,041 --> 00:13:00,100
결과 해시가 완전히 바뀐다는 아이디어입니다.

260
00:13:00,820 --> 00:13:03,729
사실 여기서 보여드리는 해시 함수인 

261
00:13:03,729 --> 00:13:07,366
SHA256의 경우, 입력을 약간만 변경해도 

262
00:13:07,366 --> 00:13:11,440
출력이 어떻게 달라지는지 전혀 예측할 수 없습니다.

263
00:13:12,440 --> 00:13:15,183
이것은 단순한 해시 함수가 아니라 

264
00:13:15,183 --> 00:13:17,060
암호화 해시 함수입니다.

265
00:13:17,340 --> 00:13:20,660
즉, 역방향으로 계산하는 것은 불가능합니다.

266
00:13:21,260 --> 00:13:26,050
1과 0으로 이루어진 문자열을 보여주고 SHA256 

267
00:13:26,050 --> 00:13:29,354
해시에 대한 입력을 찾으라고 하면, 

268
00:13:29,354 --> 00:13:33,814
그냥 추측해서 확인하는 것 외에 더 좋은 방법은 

269
00:13:33,814 --> 00:13:34,640
없습니다.

270
00:13:35,700 --> 00:13:39,725
256번의 추측을 거치는 데 얼마나 많은 계산이 

271
00:13:39,725 --> 00:13:43,900
필요한지 느껴보고 싶다면 보충 동영상을 살펴보세요.

272
00:13:44,380 --> 00:13:46,660
사실 그 글을 쓰는 게 너무 재미있었어요.

273
00:13:48,560 --> 00:13:51,767
이 함수가 정확히 어떻게 작동하는지 자세히 살펴보면 

274
00:13:51,767 --> 00:13:54,754
추측하고 확인할 필요 없이 적절한 입력을 리버스 

275
00:13:54,754 --> 00:13:57,520
엔지니어링할 수 있다고 생각할 수도 있습니다.

276
00:13:58,240 --> 00:14:00,840
하지만 아무도 그 방법을 찾아내지 못했습니다.

277
00:14:01,600 --> 00:14:04,214
흥미롭게도 역방향으로 계산하는 것이 

278
00:14:04,214 --> 00:14:06,960
어렵다는 엄밀한 증거는 아직 없습니다.

279
00:14:07,620 --> 00:14:10,854
하지만 현대 보안의 상당 부분은 암호화 해시 함수와 

280
00:14:10,854 --> 00:14:14,200
이러한 속성을 가지고 있다는 생각에 의존하고 있습니다.

281
00:14:14,940 --> 00:14:18,615
지금 브라우저에서 YouTube와 연결하거나 은행과 

282
00:14:18,615 --> 00:14:22,417
연결하는 보안 연결의 기반이 되는 알고리즘을 살펴보면 

283
00:14:22,417 --> 00:14:25,840
SHA256이라는 이름이 표시되어 있을 것입니다.

284
00:14:27,340 --> 00:14:30,376
현재로서는 이러한 함수가 특정 트랜잭션 

285
00:14:30,376 --> 00:14:33,412
목록이 많은 양의 계산 노력과 연관되어 

286
00:14:33,412 --> 00:14:37,000
있음을 증명하는 방법에 초점을 맞추고자 합니다.

287
00:14:38,040 --> 00:14:41,540
누군가 트랜잭션 목록을 보여주며 특별한 숫자를 

288
00:14:41,540 --> 00:14:45,176
찾았다고 말하면서 이 트랜잭션 목록의 끝에 해당 

289
00:14:45,176 --> 00:14:48,811
숫자를 넣고 전체에 SHA256을 적용하면 해당 

290
00:14:48,811 --> 00:14:52,312
출력의 첫 30비트가 모두 0이 된다고 상상해 

291
00:14:52,312 --> 00:14:53,120
보겠습니다.

292
00:14:54,100 --> 00:14:56,700
그 번호를 찾는 것이 얼마나 어려웠을까요?

293
00:14:58,060 --> 00:15:00,961
무작위 메시지의 경우 해시가 30개의 

294
00:15:00,961 --> 00:15:04,969
연속된 0으로 시작될 확률은 30개 중 2분의 1, 

295
00:15:04,969 --> 00:15:07,180
즉 약 10억 분의 1입니다.

296
00:15:08,200 --> 00:15:12,084
SHA256은 암호화 해시 함수이기 때문에 이와 같은 

297
00:15:12,084 --> 00:15:15,840
특수 숫자를 찾는 유일한 방법은 추측과 확인뿐입니다.

298
00:15:16,660 --> 00:15:19,520
따라서 이 사람은 이 특별한 숫자를 찾기까지 약 

299
00:15:19,520 --> 00:15:22,380
10억 개의 다른 숫자를 살펴봐야 했을 것입니다.

300
00:15:23,380 --> 00:15:25,091
이 숫자를 알고 나면 해시를 실행하여 

301
00:15:25,091 --> 00:15:26,802
0이 30개라는 것을 확인하기만 하면 

302
00:15:26,802 --> 00:15:28,840
되기 때문에 매우 빠르게 확인할 수 있습니다.

303
00:15:29,800 --> 00:15:32,846
즉, 많은 양의 작업을 거쳤음을 확인할 수 

304
00:15:32,846 --> 00:15:36,400
있지만 직접 동일한 노력을 기울이지 않아도 됩니다.

305
00:15:37,200 --> 00:15:38,800
이를 작업 증명이라고 합니다.

306
00:15:39,460 --> 00:15:41,485
그리고 중요한 것은 이 모든 작업이 

307
00:15:41,485 --> 00:15:44,220
본질적으로 거래 목록과 연결되어 있다는 점입니다.

308
00:15:44,900 --> 00:15:47,388
이러한 트랜잭션 중 하나를 조금이라도 

309
00:15:47,388 --> 00:15:49,640
변경하면 해시가 완전히 변경됩니다.

310
00:15:50,080 --> 00:15:52,507
따라서 새로운 작업 증명, 즉 변경된 

311
00:15:52,507 --> 00:15:55,050
목록의 해시값과 함께 새로운 숫자가 0 

312
00:15:55,050 --> 00:15:57,594
30개로 시작하도록 하는 새로운 숫자를 

313
00:15:57,594 --> 00:16:00,600
찾으려면 10억 번의 추측을 더 거쳐야 합니다.

314
00:16:01,500 --> 00:16:04,100
이제 분산 원장 상황을 다시 생각해 보세요.

315
00:16:04,680 --> 00:16:06,701
모든 사람이 거래를 방송하고 있으며, 

316
00:16:06,701 --> 00:16:08,818
우리는 그들이 올바른 원장이 무엇인지에 

317
00:16:08,818 --> 00:16:10,840
대해 동의할 수 있는 방법을 원합니다.

318
00:16:12,100 --> 00:16:14,068
앞서 말씀드렸듯이, 오리지널 비트코인 

319
00:16:14,068 --> 00:16:16,223
원장의 아이디어는 모든 사람이 가장 많은 

320
00:16:16,223 --> 00:16:18,660
노력이 투입된 원장을 신뢰하도록 하는 것입니다.

321
00:16:19,280 --> 00:16:22,780
이 방식은 먼저 주어진 원장을 블록으로 구성하고, 

322
00:16:22,780 --> 00:16:25,405
각 블록은 작업 증명과 함께 트랜잭션 

323
00:16:25,405 --> 00:16:27,280
목록으로 구성하는 것입니다.

324
00:16:27,720 --> 00:16:29,730
즉, 전체 블록의 해시가 0으로 

325
00:16:29,730 --> 00:16:32,300
시작하도록 특수 숫자를 지정하는 것입니다.

326
00:16:33,140 --> 00:16:37,080
지금은 0부터 60개로 시작해야 한다고 

327
00:16:37,080 --> 00:16:41,021
가정해 보지만 나중에 좀 더 체계적으로 

328
00:16:41,021 --> 00:16:45,500
변경할 수 있는 방법으로 다시 돌아가겠습니다.

329
00:16:45,900 --> 00:16:48,283
블록은 작업 증명이 있는 경우에만 

330
00:16:48,283 --> 00:16:50,040
유효한 것으로 간주됩니다.

331
00:16:50,960 --> 00:16:55,282
또한 이러한 블록에 표준 순서를 적용하기 위해 블록의 

332
00:16:55,282 --> 00:16:59,460
헤더에 이전 블록의 해시를 포함하도록 만들 것입니다.

333
00:17:00,060 --> 00:17:03,452
이렇게 하면 돌아가서 블록 중 하나를 변경하거나 

334
00:17:03,452 --> 00:17:06,720
두 블록의 순서를 바꾸면 그 뒤에 오는 블록이 

335
00:17:06,720 --> 00:17:09,484
변경되고, 그 블록의 해시가 변경되고, 

336
00:17:09,484 --> 00:17:12,626
그 뒤에 오는 블록이 변경되는 식으로 블록이 

337
00:17:12,626 --> 00:17:13,380
변경됩니다.

338
00:17:13,980 --> 00:17:16,175
이렇게 하려면 모든 작업을 다시 

339
00:17:16,175 --> 00:17:18,492
수행하여 각 블록의 해시를 0으로 

340
00:17:18,492 --> 00:17:21,420
시작하는 새로운 특수 번호를 찾아야 합니다.

341
00:17:22,440 --> 00:17:25,380
블록은 이렇게 서로 연결되어 있기 때문에 원장이라고 

342
00:17:25,380 --> 00:17:28,319
부르는 대신 블록체인이라고 부르는 것이 일반적입니다.

343
00:17:30,080 --> 00:17:32,340
업데이트된 프로토콜의 일환으로 이제 전 세계 

344
00:17:32,340 --> 00:17:34,420
누구나 블록 크리에이터가 될 수 있습니다.

345
00:17:35,240 --> 00:17:38,000
즉, 브로드캐스트되는 트랜잭션을 수신하여 

346
00:17:38,000 --> 00:17:40,760
어떤 블록으로 수집한 다음, 해당 블록의 

347
00:17:40,760 --> 00:17:43,520
해시가 0으로 시작하는 특수 숫자를 찾기 

348
00:17:43,520 --> 00:17:46,160
위해 많은 작업을 수행한다는 의미입니다.

349
00:17:46,960 --> 00:17:49,900
블록을 찾으면 찾은 블록을 방송합니다.

350
00:17:50,860 --> 00:17:53,780
블록 생성자에게 이러한 모든 작업에 대한 보상을 

351
00:17:53,780 --> 00:17:56,591
제공하기 위해, 블록을 생성할 때 블록 상단에 

352
00:17:56,591 --> 00:17:58,971
매우 특별한 거래를 포함할 수 있으며, 

353
00:17:58,971 --> 00:18:01,782
예를 들어 10개의 원장 달러를 허공에서 얻을 

354
00:18:01,782 --> 00:18:02,540
수 있습니다.

355
00:18:03,080 --> 00:18:06,377
이를 블록 보상이라고 하며, 트랜잭션 수락 

356
00:18:06,377 --> 00:18:09,400
여부에 대한 일반적인 규칙의 예외입니다.

357
00:18:10,040 --> 00:18:11,785
다른 사람에게서 받은 것이 아니므로 

358
00:18:11,785 --> 00:18:12,920
서명할 필요가 없습니다.

359
00:18:13,660 --> 00:18:16,746
이는 또한 새로운 블록이 생성될 때마다 우리 경제의 

360
00:18:16,746 --> 00:18:19,620
총 원장 달러 수가 증가한다는 의미이기도 합니다.

361
00:18:20,900 --> 00:18:24,414
블록을 생성하는 것은 많은 작업이 필요하고 경제에 

362
00:18:24,414 --> 00:18:28,180
새로운 화폐를 도입하기 때문에 흔히 채굴이라고 합니다.

363
00:18:29,020 --> 00:18:31,751
그러나 채굴자에 대해 듣거나 읽을 때, 

364
00:18:31,751 --> 00:18:34,483
그들이 실제로 하는 일은 거래를 듣고, 

365
00:18:34,483 --> 00:18:37,835
블록을 생성하고, 해당 블록을 브로드캐스트하고, 

366
00:18:37,835 --> 00:18:40,940
새로운 화폐로 보상을 받는 것임을 명심하세요.

367
00:18:41,780 --> 00:18:45,158
채굴자의 관점에서 각 블록은 모두가 최대한 

368
00:18:45,158 --> 00:18:48,396
빨리 숫자를 맞추는 미니 복권과 같으며, 

369
00:18:48,396 --> 00:18:51,775
운이 좋은 한 사람이 블록의 해시가 0으로 

370
00:18:51,775 --> 00:18:55,154
많이 시작되는 특별한 숫자를 찾으면 보상을 

371
00:18:55,154 --> 00:18:56,140
받게 됩니다.

372
00:18:57,620 --> 00:19:01,613
이 시스템을 사용하여 결제만 하려는 사람은 트랜잭션을 

373
00:19:01,613 --> 00:19:05,074
수신하는 대신 채굴자가 브로드캐스트하는 블록만 

374
00:19:05,074 --> 00:19:08,801
수신하고 자신의 개인 블록체인 사본을 업데이트하기 

375
00:19:08,801 --> 00:19:09,600
시작합니다.

376
00:19:10,560 --> 00:19:13,552
이제 저희 프로토콜에 추가된 핵심 기능은 거래 

377
00:19:13,552 --> 00:19:16,660
내역이 상충하는 두 개의 블록체인이 있을 경우, 

378
00:19:16,660 --> 00:19:19,307
가장 긴 블록체인, 즉 가장 많은 작업이 

379
00:19:19,307 --> 00:19:22,300
투입된 블록체인을 우선적으로 처리하는 것입니다.

380
00:19:22,860 --> 00:19:25,128
동점인 경우, 둘 중 하나를 더 길게 

381
00:19:25,128 --> 00:19:27,720
만드는 추가 블록이 들릴 때까지 기다리세요.

382
00:19:28,720 --> 00:19:32,136
따라서 중앙 기관이 없고 모두가 각자의 블록체인 

383
00:19:32,136 --> 00:19:35,680
사본을 관리하고 있더라도, 모든 사람이 가장 많은 

384
00:19:35,680 --> 00:19:39,096
노력을 기울인 블록체인을 선호하는 데 동의한다면 

385
00:19:39,096 --> 00:19:42,640
탈중앙화된 합의에 도달할 수 있는 방법이 있습니다.

386
00:19:43,560 --> 00:19:46,020
이 시스템이 왜 신뢰할 수 있는 시스템인지, 

387
00:19:46,020 --> 00:19:48,677
어떤 시점에서 결제가 합법적이라고 믿어야 하는지 

388
00:19:48,677 --> 00:19:51,334
이해하려면 이 시스템을 사용하는 누군가를 속이기 

389
00:19:51,334 --> 00:19:53,892
위해 어떤 것이 필요한지 정확히 살펴보는 것이 

390
00:19:53,892 --> 00:19:54,680
도움이 됩니다.

391
00:19:55,600 --> 00:19:58,654
앨리스가 밥에게 100 레저 달러를 지불하는 

392
00:19:58,654 --> 00:20:01,831
것을 포함하는 사기성 블록을 보내려고 하지만, 

393
00:20:01,831 --> 00:20:05,008
해당 블록을 나머지 네트워크에 브로드캐스트하지 

394
00:20:05,008 --> 00:20:08,063
않으면 다른 사람들은 여전히 앨리스가 100 

395
00:20:08,063 --> 00:20:11,240
레저 달러를 가지고 있다고 생각할 수 있습니다.

396
00:20:11,960 --> 00:20:15,320
이를 위해서는 각자의 블록에서 작업하는 다른 모든 

397
00:20:15,320 --> 00:20:18,680
채굴자보다 먼저 유효한 작업 증명을 찾아야 합니다.

398
00:20:19,500 --> 00:20:22,091
앨리스가 다른 사람들보다 먼저 이 

399
00:20:22,091 --> 00:20:24,820
미니어처 복권에 당첨될 수도 있겠죠.

400
00:20:25,680 --> 00:20:28,708
그러나 밥은 여전히 다른 채굴자들의 방송을 

401
00:20:28,708 --> 00:20:31,863
듣고 있을 것이므로, 이 사기성 블록을 계속 

402
00:20:31,863 --> 00:20:35,271
믿게 하려면 앨리스가 직접 모든 작업을 수행하여 

403
00:20:35,271 --> 00:20:38,552
밥의 블록체인에 다른 채굴자들로부터 듣는 것과 

404
00:20:38,552 --> 00:20:41,960
다른 특별한 포크에 블록을 계속 추가해야 합니다.

405
00:20:42,740 --> 00:20:45,556
프로토콜에 따라 밥은 항상 자신이 알고 있는 

406
00:20:45,556 --> 00:20:48,260
가장 긴 체인을 신뢰한다는 점을 기억하세요.

407
00:20:49,260 --> 00:20:52,144
앨리스가 우연히 네트워크의 나머지 채굴자를 모두 

408
00:20:52,144 --> 00:20:55,029
합친 것보다 더 빨리 블록을 발견한다면 몇 블록 

409
00:20:55,029 --> 00:20:57,700
동안 이 상태를 유지할 수 있을지도 모릅니다.

410
00:20:58,480 --> 00:21:01,295
그러나 앨리스가 모든 채굴자 중 50%에 

411
00:21:01,295 --> 00:21:04,232
가까운 컴퓨팅 자원을 가지고 있지 않다면, 

412
00:21:04,232 --> 00:21:07,170
다른 모든 채굴자들이 작업 중인 블록체인이 

413
00:21:07,170 --> 00:21:10,597
앨리스가 밥에게 공급하는 단일 사기성 블록체인보다 

414
00:21:10,597 --> 00:21:13,780
더 빠르게 성장할 확률이 압도적으로 높아집니다.

415
00:21:15,000 --> 00:21:17,672
따라서 충분한 시간이 지나면 밥은 다른 

416
00:21:17,672 --> 00:21:20,345
사람들이 작업 중인 더 긴 체인을 위해 

417
00:21:20,345 --> 00:21:23,140
앨리스로부터 들은 내용을 거부할 것입니다.

418
00:21:23,960 --> 00:21:26,238
새로운 블록이 들어왔다고 해서 

419
00:21:26,238 --> 00:21:28,920
바로 신뢰해서는 안 된다는 뜻입니다.

420
00:21:29,500 --> 00:21:31,186
대신 그 위에 여러 개의 새 

421
00:21:31,186 --> 00:21:33,400
블록이 추가될 때까지 기다려야 합니다.

422
00:21:33,820 --> 00:21:36,404
아직 더 이상 블록체인을 들어보지 못했다면, 

423
00:21:36,404 --> 00:21:38,368
이 블록은 다른 사람들이 사용하는 

424
00:21:38,368 --> 00:21:40,540
동일한 체인의 일부라고 믿어도 됩니다.

425
00:21:42,120 --> 00:21:45,220
이로써 모든 주요 아이디어에 도달했습니다.

426
00:21:45,780 --> 00:21:48,615
작업 증명을 기반으로 하는 이 분산 원장 시스템은 

427
00:21:48,615 --> 00:21:51,249
비트코인 프로토콜이 작동하는 방식과 다른 많은 

428
00:21:51,249 --> 00:21:53,680
암호화폐가 작동하는 방식과 거의 비슷합니다.

429
00:21:54,300 --> 00:21:56,160
몇 가지 세부 사항을 정리할 필요가 있습니다.

430
00:21:56,300 --> 00:21:59,274
앞서 작업 증명이 블록의 해시가 60개의 0으로 

431
00:21:59,274 --> 00:22:02,580
시작하도록 특별한 숫자를 찾는 것이라고 말씀드렸습니다.

432
00:22:03,220 --> 00:22:06,031
실제 비트코인 프로토콜이 작동하는 방식은 

433
00:22:06,031 --> 00:22:08,599
주기적으로 0의 수를 변경하여 새로운 

434
00:22:08,599 --> 00:22:11,900
블록을 찾는 데 10분이 걸리도록 하는 것입니다.

435
00:22:12,780 --> 00:22:16,019
따라서 네트워크에 점점 더 많은 채굴자가 추가됨에 

436
00:22:16,019 --> 00:22:19,258
따라 이 미니어처 복권에는 10분에 한 명 정도만 

437
00:22:19,258 --> 00:22:22,381
당첨자가 나올 정도로 도전이 점점 더 어려워지고 

438
00:22:22,381 --> 00:22:22,960
있습니다.

439
00:22:23,920 --> 00:22:25,900
많은 최신 암호화폐는 이보다 훨씬 

440
00:22:25,900 --> 00:22:27,880
짧은 블록 시간을 가지고 있습니다.

441
00:22:28,580 --> 00:22:30,634
비트코인의 모든 돈은 궁극적으로 

442
00:22:30,634 --> 00:22:32,460
일부 블록 보상에서 나옵니다.

443
00:22:32,920 --> 00:22:35,740
처음에는 이러한 보상이 블록당 50비트코인이었습니다.

444
00:22:36,140 --> 00:22:38,618
비트코인 블록체인을 쉽게 살펴볼 수 있는 

445
00:22:38,618 --> 00:22:41,420
블록 익스플로러라는 훌륭한 웹사이트가 있습니다.

446
00:22:41,960 --> 00:22:44,248
그리고 체인의 처음 몇 블록을 살펴보면 

447
00:22:44,248 --> 00:22:46,848
채굴자에게 50 비트코인을 보상으로 지급하는 

448
00:22:46,848 --> 00:22:49,240
것 외에는 거래가 포함되어 있지 않습니다.

449
00:22:49,860 --> 00:22:53,172
하지만 약 4년에 한 번씩 21만 블록을 

450
00:22:53,172 --> 00:22:56,340
채울 때마다 보상이 절반으로 줄어듭니다.

451
00:22:56,860 --> 00:23:00,140
따라서 현재 보상은 블록당 12.5비트코인입니다.

452
00:23:00,720 --> 00:23:03,128
그리고 이 보상은 시간이 지남에 따라 

453
00:23:03,128 --> 00:23:05,880
기하급수적으로 감소하기 때문에 2,100만 

454
00:23:05,880 --> 00:23:09,320
비트코인을 초과하는 비트코인은 존재하지 않을 것입니다.

455
00:23:10,280 --> 00:23:11,818
하지만 그렇다고 해서 채굴자가 수익 

456
00:23:11,818 --> 00:23:13,280
창출을 중단한다는 의미는 아닙니다.

457
00:23:13,820 --> 00:23:16,067
채굴자는 블록 보상 외에도 거래 

458
00:23:16,067 --> 00:23:17,940
수수료도 받을 수 있습니다.

459
00:23:18,520 --> 00:23:21,500
이 방식은 결제를 할 때마다 해당 결제가 

460
00:23:21,500 --> 00:23:25,000
포함된 블록의 채굴자에게 전달되는 거래 수수료를 

461
00:23:25,000 --> 00:23:28,240
순전히 선택적으로 포함할 수 있다는 것입니다.

462
00:23:29,020 --> 00:23:32,288
이렇게 하는 이유는 채굴자가 실제로 다음 블록에 

463
00:23:32,288 --> 00:23:35,920
트랜잭션을 포함하도록 인센티브를 제공하기 위해서입니다.

464
00:23:36,440 --> 00:23:39,136
비트코인에서 각 블록은 약 2400개의 

465
00:23:39,136 --> 00:23:41,955
트랜잭션으로 제한되는데, 많은 비평가들은 

466
00:23:41,955 --> 00:23:45,020
이 제한이 불필요하게 제한적이라고 주장합니다.

467
00:23:45,860 --> 00:23:48,770
이에 비해 Visa는 초당 평균 약 

468
00:23:48,770 --> 00:23:51,535
1700건의 트랜잭션을 처리하며, 

469
00:23:51,535 --> 00:23:55,320
초당 24,000건 이상을 처리할 수 있습니다.

470
00:23:56,020 --> 00:23:59,549
비트코인의 비교적 느린 처리 속도로 인해 거래 

471
00:23:59,549 --> 00:24:03,078
수수료가 높아지는데, 이는 채굴자가 새 블록에 

472
00:24:03,078 --> 00:24:06,200
어떤 거래를 포함할지 결정하기 때문입니다.

473
00:24:07,820 --> 00:24:09,659
이 모든 내용은 암호화폐에 대한 

474
00:24:09,659 --> 00:24:11,500
포괄적인 내용과는 거리가 멉니다.

475
00:24:12,160 --> 00:24:14,064
아직 제가 손대지 않은 뉘앙스와 

476
00:24:14,064 --> 00:24:16,180
다른 디자인 선택지가 많이 있습니다.

477
00:24:16,640 --> 00:24:18,632
하지만 제 희망은 이것이 추가 읽기를 통해 

478
00:24:18,632 --> 00:24:20,707
몇 가지 가지를 더 추가하려는 모든 사람에게 

479
00:24:20,707 --> 00:24:22,450
안정적인 WaitButWhy 스타일의 

480
00:24:22,450 --> 00:24:24,360
이해의 줄기를 제공할 수 있기를 바랍니다.

481
00:24:25,180 --> 00:24:28,267
처음에 말씀드린 것처럼 많은 자금이 암호화폐로 

482
00:24:28,267 --> 00:24:31,355
유입되기 시작했고, 이것이 좋은 투자인지 나쁜 

483
00:24:31,355 --> 00:24:34,561
투자인지에 대해 어떤 주장도 하고 싶지 않지만, 

484
00:24:34,561 --> 00:24:37,292
저는 이 게임에 뛰어드는 사람들이 최소한 

485
00:24:37,292 --> 00:24:40,380
기술의 기본을 아는 것이 건전하다고 생각합니다.

486
00:24:41,340 --> 00:24:43,641
언제나 그렇듯이 이 채널을 후원해주시는 

487
00:24:43,641 --> 00:24:45,420
여러분께 진심으로 감사드립니다.

488
00:24:46,080 --> 00:24:48,576
모든 사람이 기여할 수 있는 위치에 있는 것은 

489
00:24:48,576 --> 00:24:51,360
아니지만, 그래도 도움을 주고 싶다면 다른 사람에게 

490
00:24:51,360 --> 00:24:54,048
흥미롭거나 도움이 될 만한 동영상을 공유하는 것이 

491
00:24:54,048 --> 00:24:56,640
가장 좋은 방법 중 하나라는 것을 알고 있습니다.

492
00:24:57,280 --> 00:24:59,320
이미 알고 계시겠지만 실제로 도움이 됩니다.

