1
00:00:04,220 --> 00:00:06,780
Что это значит — владеть Биткоином?

2
00:00:07,260 --> 00:00:09,940
Многие слышали, что Биткоин — это полностью цифровая валюта,

3
00:00:09,960 --> 00:00:12,560
не выпускаемая ни одним государством,

4
00:00:12,680 --> 00:00:16,120
и что для управления счетами и подтверждения операций не нужен банк;

5
00:00:16,180 --> 00:00:19,400
а ещё что никому не известно, кто изобрел его на самом деле.

6
00:00:19,440 --> 00:00:23,580
Тем не менее, точно ответить на наш вопрос могут далеко не все.

7
00:00:24,120 --> 00:00:25,300
Чтобы прийти к ответу

8
00:00:25,300 --> 00:00:29,780
и убедиться, что технические особенности Биткоина и вправду играют важную роль,

9
00:00:29,780 --> 00:00:32,340
мы шаг за шагом рассмотрим,

10
00:00:32,340 --> 00:00:35,680
как вы могли бы изобрести собственную версию Биткоина.

11
00:00:36,120 --> 00:00:40,060
Для начала представьте, что вы с друзьями записываете все платежи в общий журнал.

12
00:00:40,360 --> 00:00:44,620
Но потом вы все меньше доверяете друзьям, да и вообще всему миру,

13
00:00:44,620 --> 00:00:48,120
и если вы догадаетесь применить некоторые идеи криптографии,

14
00:00:48,120 --> 00:00:50,540
чтобы не основываться только на доверии,

15
00:00:50,540 --> 00:00:53,300
вы и получите так называемую «криптовалюту».

16
00:00:53,700 --> 00:00:58,040
Биткоин — это всего лишь первое воплощение криптовалюты.

17
00:00:58,200 --> 00:01:02,820
А сейчас тысячи других криптовалют обмениваются на реальные валюты на биржах.

18
00:01:03,120 --> 00:01:06,400
Разбор того, как вы могли бы изобрести свою криптовалюту,

19
00:01:06,400 --> 00:01:09,620
поможет понять действия новых ключевых игроков рынка

20
00:01:09,620 --> 00:01:13,160
и осознать, зачем нужно разнообразие решений в разработке.

21
00:01:13,660 --> 00:01:16,320
На самом деле, я выбрал эту тему еще и потому,

22
00:01:16,320 --> 00:01:20,060
что в прошлом году эти валюты привлекли много внимания,

23
00:01:20,060 --> 00:01:23,600
инвестиций, и, честно говоря, хайпа.

24
00:01:24,320 --> 00:01:27,940
Не буду строить догадки о курсах сейчас или в будущем,

25
00:01:27,940 --> 00:01:30,460
но, согласитесь, каждый, кто хочет купить криптовалюту,

26
00:01:30,460 --> 00:01:33,740
точно должен знать, что она представляет из себя.

27
00:01:33,920 --> 00:01:38,080
И я не говорю о сравнениях и смутных отсылках к добыче золота —

28
00:01:38,080 --> 00:01:42,510
я имею в виду четкое объяснение конкретных действий компьютеров,

29
00:01:42,510 --> 00:01:45,960
когда мы отправляем, получаем и создаем криптовалюты.

30
00:01:46,660 --> 00:01:48,860
Кстати, нужно отметить, что

31
00:01:48,860 --> 00:01:51,840
даже если мы с вами глубоко уйдем в детали,

32
00:01:51,840 --> 00:01:54,020
что займет не так уж мало времени,

33
00:01:54,020 --> 00:01:58,900
вам не обязательно знать все это, если вы просто хотите использовать криптовалюту,

34
00:01:58,900 --> 00:02:03,280
как не обязательно знать, что происходит под капотом терминала, когда вы платите кредиткой.

35
00:02:03,540 --> 00:02:07,280
Как для любых цифровых платежей, есть множество понятных приложений,

36
00:02:07,280 --> 00:02:11,340
которые помогают совершать и получать платежи, не задумываясь о деталях.

37
00:02:11,700 --> 00:02:14,820
Разница в том, что в случае криптовалют основа системы —

38
00:02:14,820 --> 00:02:17,300
это не банк, одобряющий операции.

39
00:02:17,620 --> 00:02:21,940
Это хитрый механизм децентрализованного подтверждения, основанный не на доверии,

40
00:02:21,940 --> 00:02:24,860
а на математических принципах, которые берут начало в криптографии.

41
00:02:25,560 --> 00:02:26,780
Но для начала

42
00:02:26,780 --> 00:02:30,880
давайте на несколько минут отвлечёмся от криптовалют и всего такого.

43
00:02:31,040 --> 00:02:35,820
Начнем нашу историю с более приземленных вещей: с реестров и подписей.

44
00:02:36,400 --> 00:02:38,980
Если вы с друзьями обмениваетесь деньгами довольно часто,

45
00:02:38,980 --> 00:02:41,660
например, платите вашу долю за обед,

46
00:02:41,660 --> 00:02:44,250
может быть неудобно постоянно передавать друг другу наличные.

47
00:02:44,700 --> 00:02:46,300
Поэтому вы можете завести журнал, или реестр,

48
00:02:46,300 --> 00:02:50,190
где будете записывать все суммы, которые планируете заплатить в будущем.

49
00:02:50,500 --> 00:02:52,470
Скажем, Алиса платит Бобу $20,

50
00:02:52,470 --> 00:02:54,940
Боб платит Чарли $40, и так далее.

51
00:02:55,580 --> 00:02:58,920
Этот реестр будет в публичном доступе,

52
00:02:58,920 --> 00:03:01,980
как, например, страница в сети, и кто угодно сможет добавлять в него записи.

53
00:03:02,530 --> 00:03:04,320
И, допустим, что в конце каждого месяца

54
00:03:04,320 --> 00:03:07,930
вы все вместе будете проверять список операций и рассчитываться друг с другом.

55
00:03:08,290 --> 00:03:11,450
Если вы потратили больше, чем получили, то добавите деньги в общий запас,

56
00:03:11,450 --> 00:03:14,560
а если вы получили больше, чем потратили, то забираете оттуда разницу.

57
00:03:15,390 --> 00:03:19,530
Протокол для участия в этой простой системе может быть таким:

58
00:03:19,950 --> 00:03:22,000
кто угодно может делать записи в реестре;

59
00:03:22,000 --> 00:03:25,340
и в конце каждого месяца все собираются вместе и сводят счета.

60
00:03:26,240 --> 00:03:31,010
Только проблема с таким открытым реестром в том, что добавлять записи могут все,

61
00:03:31,010 --> 00:03:37,240
и что остановит Боба, если он захочет написать «Алиса платит Бобу $100» без её ведома?

62
00:03:37,750 --> 00:03:41,260
Как мы можем быть уверенными, что все операции

63
00:03:41,260 --> 00:03:43,400
происходят по воле отправителя?

64
00:03:44,810 --> 00:03:48,850
На помощь приходит первое изобретение криптографии - цифровые подписи.

65
00:03:49,460 --> 00:03:50,960
Как и в случае с ручными подписями,

66
00:03:50,960 --> 00:03:55,830
идея в том, что Алиса должна добавить к операции

67
00:03:55,830 --> 00:03:58,720
какое-нибудь доказательство того, что она увидела и одобрила её.

68
00:03:59,220 --> 00:04:03,490
И ни у кого не должно быть возможности подделать эту подпись.

69
00:04:04,360 --> 00:04:08,790
Сперва может показаться, что цифровая подпись в принципе невозможна.

70
00:04:09,130 --> 00:04:14,160
В конце концов, любой компьютер может прочитать и скопировать все данные в ней,

71
00:04:14,390 --> 00:04:16,580
но тогда как же предотвратить подделки?

72
00:04:17,300 --> 00:04:22,200
Идея в том, что каждый получает свою «ключевую пару» - открытый и закрытый ключ,

73
00:04:22,200 --> 00:04:24,410
каждый из которых выглядит как цепочка битов.

74
00:04:24,810 --> 00:04:27,280
Закрытый ключ иногда называют секретным,

75
00:04:27,280 --> 00:04:31,670
поэтому обозначим его как «sk», а открытый или публичный ключ как «pk».

76
00:04:32,400 --> 00:04:36,480
Как понятно из названия, секретный ключ нужно хранить в тайне.

77
00:04:37,080 --> 00:04:41,950
В реальном мире ваша ручная подпись выглядит одинаково, что бы вы ни подписывали.

78
00:04:42,480 --> 00:04:45,080
Но цифровая подпись намного надежнее,

79
00:04:45,080 --> 00:04:47,320
потому что она меняется в зависимости от сообщения.

80
00:04:47,880 --> 00:04:52,900
Она выглядит как цепочка из нулей и единиц, чаще всего длиной в 256 бит,

81
00:04:53,310 --> 00:04:55,840
и даже малейшее изменение в сообщении

82
00:04:55,840 --> 00:04:59,760
полностью перестраивает соответствующую ему подпись.

83
00:05:00,910 --> 00:05:02,720
Говоря немного формальнее,

84
00:05:02,720 --> 00:05:08,720
в создании подписи участвует функция, которая зависит и от сообщения, и от закрытого ключа.

85
00:05:09,260 --> 00:05:12,590
Благодаря закрытому ключу подпись можете сделать только вы,

86
00:05:12,900 --> 00:05:15,180
а из-за того, что ваша подпись зависит от сообщения,

87
00:05:15,180 --> 00:05:19,870
никто не сможет просто скопировать её из одного сообщения и подделать на другом.

88
00:05:21,120 --> 00:05:25,850
Вместе с этим для подтверждения подписи работает и другая фунция.

89
00:05:26,280 --> 00:05:28,420
Здесь в дело вступает открытый ключ.

90
00:05:29,170 --> 00:05:31,470
Он просто выдает «true» или «false»

91
00:05:31,470 --> 00:05:34,740
в зависимости от того, была ли подпись создана на основе закрытого ключа,

92
00:05:34,740 --> 00:05:38,080
который соответствует вашему открытому ключу.

93
00:05:38,610 --> 00:05:42,240
Не буду вдаваться в детали работы этих функций,

94
00:05:42,240 --> 00:05:47,590
но суть в том, что совсем невозможно подобрать правильную подпись,

95
00:05:47,590 --> 00:05:49,390
не имея доступа к секретному ключу.

96
00:05:50,040 --> 00:05:54,970
Точнее говоря, лучшая стратегия - это перебор и проверка случайных подписей,

97
00:05:54,970 --> 00:05:58,080
используя открытый ключ, который знают все.

98
00:05:59,020 --> 00:06:03,370
А теперь подумайте, сколько существует подписей длиной в 256 бит:

99
00:06:03,790 --> 00:06:06,810
всего их 2^256.

100
00:06:07,350 --> 00:06:09,880
Это безумно большое число.

101
00:06:09,880 --> 00:06:13,900
Назвать его астрономически большим польстило бы самой астрономии.

102
00:06:14,290 --> 00:06:19,880
Я даже снял отдельное видео, просто чтобы показать, какое это огромное число.

103
00:06:20,360 --> 00:06:21,860
Пока давайте просто считать,

104
00:06:21,860 --> 00:06:25,470
что как только вы подтвердили подлинность подписи по сообщению,

105
00:06:25,830 --> 00:06:30,420
вы можете быть уверены, что её могли сделать лишь зная секретный ключ,

106
00:06:30,420 --> 00:06:35,360
который соответствует использованному для верификации открытому ключу.

107
00:06:37,040 --> 00:06:40,960
Подписи на записях в журнале - это, конечно, здорово,

108
00:06:40,960 --> 00:06:42,410
но есть одна уловка:

109
00:06:42,850 --> 00:06:46,880
допустим, Алиса подписывает операцию - например, «Алиса платит Бобу $100».

110
00:06:46,880 --> 00:06:50,740
Пусть Боб и не может подделать подпись на другом сообщении,

111
00:06:50,740 --> 00:06:53,890
но по крайней мере он мог бы скопировать ту же самую запись столько раз, сколько захочет.

112
00:06:54,190 --> 00:06:57,400
То есть сообщение и подпись все еще соответствовали бы друг другу.

113
00:06:57,970 --> 00:07:01,970
Чтобы избежать этого, когда вы подписываете операцию,

114
00:07:01,970 --> 00:07:07,310
вашему сообщению присваевается уникальный ID, связанный с этой операцией.

115
00:07:07,880 --> 00:07:11,710
Получается, если Алиса заплатит Бобу $100 несколько раз,

116
00:07:11,710 --> 00:07:15,740
у каждой записи в реестре будет собственная уникальная подпись.

117
00:07:16,960 --> 00:07:17,880
Что ж, отлично!

118
00:07:18,160 --> 00:07:22,380
С цифровыми подписями роль доверия в протоколе намного слабеет,

119
00:07:22,380 --> 00:07:24,910
но даже так, следуя такому протоколу,

120
00:07:24,910 --> 00:07:27,460
вы все же надеетесь на честность участников.

121
00:07:27,720 --> 00:07:30,460
То есть вы верите, что все на самом деле выполнят обязательства

122
00:07:30,470 --> 00:07:33,010
и рассчитаются в конце каждого месяца.

123
00:07:33,620 --> 00:07:37,590
Что если, например, некто Чарли накопит долгов на тысячи долларов,

124
00:07:37,590 --> 00:07:39,410
а потом просто исчезнет?

125
00:07:40,240 --> 00:07:43,270
Возвращаться к наличным для расчетов приходится только потому,

126
00:07:43,270 --> 00:07:47,300
что некоторые (как наш друг Чарли) могут влезть в крупные долги.

127
00:07:48,010 --> 00:07:52,440
Но наверняка у вас есть хитрая идея: что если, не рассчитываться наличными,

128
00:07:52,440 --> 00:07:56,740
а каким-то образом не допустить, чтобы люди тратили намного больше денег, чем получают?

129
00:07:57,390 --> 00:08:01,280
Можно начать с того, что все скидываются по $100,

130
00:08:01,580 --> 00:08:04,080
и в реестре делаются первые записи:

131
00:08:04,080 --> 00:08:08,460
«Алиса получает $100», «Боб получает $100», «Чарли получает $100», и так далее.

132
00:08:09,170 --> 00:08:12,560
Теперь нужно просто отклонять все операции,

133
00:08:12,560 --> 00:08:16,210
в которых кто-то тратит больше, чем получил, согласно реестру.

134
00:08:16,850 --> 00:08:20,030
Напромер, если в первых двух записях говорится:

135
00:08:20,030 --> 00:08:24,240
«Чарли платит Алисе $50» и «Чарли платит Бобу $50»,

136
00:08:24,480 --> 00:08:29,690
а затем кто-то пытается записать, что «Чарли платит вам $50», это будет недействительно,

137
00:08:29,690 --> 00:08:32,100
как будто Чарли никогда не подписывал операции.

138
00:08:33,010 --> 00:08:35,940
Заметьте, что для подтверждения любой операции

139
00:08:35,940 --> 00:08:39,600
нужно знать полную историю операций до того момента.

140
00:08:40,140 --> 00:08:43,970
Примерно так и работают криптовалюты,

141
00:08:43,970 --> 00:08:46,260
хотя в нашей системе можно кое-что оптимизировать.

142
00:08:48,750 --> 00:08:50,120
Интересно, что

143
00:08:50,120 --> 00:08:55,900
этот шаг разрывает связь между реестром и реальными долларами США.

144
00:08:56,310 --> 00:08:59,680
В теории, если бы все в мире пользовались этим реестром,

145
00:08:59,680 --> 00:09:03,640
вы могли бы всю жизнь просто отправлять и получать деньги через него,

146
00:09:03,640 --> 00:09:06,960
безо всякой надобности переводить их в реальную валюту.

147
00:09:07,430 --> 00:09:08,920
Чтобы подчеркнуть эту мысль,

148
00:09:08,920 --> 00:09:14,310
давайте измерять суммы в реестре в «лог-долларах», или коротко «LD».

149
00:09:14,790 --> 00:09:18,900
Конечно, вы можете обменять их на реальные доллары США.

150
00:09:19,070 --> 00:09:22,750
Например, Алиса дает Бобу в руки 10 реальных долларов

151
00:09:22,750 --> 00:09:26,000
в обмен на запись и подпись операции

152
00:09:26,000 --> 00:09:29,830
«Боб платит Алисе 10 LD» в общем реестре.

153
00:09:30,820 --> 00:09:34,490
Но такие сделки не будут защищены протоколом.

154
00:09:34,840 --> 00:09:38,510
Можно провести параллель с обменом долларов на евро

155
00:09:38,510 --> 00:09:40,830
или любую другую валюту на рынке,

156
00:09:41,160 --> 00:09:44,080
это просто независимые операции.

157
00:09:44,690 --> 00:09:50,380
Вот и первая идея о Биткоине и других криптовалютах, которую важно усвоить:

158
00:09:50,850 --> 00:09:56,320
по сути это и есть реестр, история операций - это и есть валюта.

159
00:09:57,110 --> 00:09:58,440
Конечно, в случае с Биткоином

160
00:09:58,440 --> 00:10:01,970
деньги не попадают в реестр потому, что их кто-то купил за наличные.

161
00:10:01,970 --> 00:10:05,040
Я обьясню, как они попадают туда, через несколько минут,

162
00:10:05,530 --> 00:10:08,710
но перед этим нам нужно отметить еще более важную разницу

163
00:10:08,710 --> 00:10:12,590
между нашей системой LD и настоящими криптовалютами.

164
00:10:13,000 --> 00:10:16,080
Я говорил, что реестр находится в открытом доступе,

165
00:10:16,080 --> 00:10:18,720
как, например, сайт, и кто угодно может добавлять в него записи.

166
00:10:19,220 --> 00:10:22,080
Но это означало бы, что нужно доверять какой-то центральной организации.

167
00:10:22,080 --> 00:10:24,240
На чьём сервере он размещен?

168
00:10:24,240 --> 00:10:27,060
Кто следит за правилами, по которым добавляются записи?

169
00:10:27,550 --> 00:10:32,260
Чтобы не было необходимости в доверии, у каждого будет храниться своя копия реестра.

170
00:10:32,760 --> 00:10:37,100
Когда нужно совершить операцию, например, Алиса захочет заплатить Бобу 100 LD,

171
00:10:37,400 --> 00:10:39,960
это просто нужно сообщить всему миру,

172
00:10:39,960 --> 00:10:43,740
чтобы каждый записал это в своем личном реестре.

173
00:10:44,850 --> 00:10:49,460
Но если больше ничего не предпринимать, система просто ужасна.

174
00:10:49,800 --> 00:10:53,040
Как всем согласиться, чей реестр верный?

175
00:10:53,400 --> 00:10:57,620
Когда Боб получает платеж, например, Алиса платит Бобу 10 LD,

176
00:10:57,620 --> 00:11:01,960
как он может быть уверен, что все знают и верят, что операция произошла,

177
00:11:02,290 --> 00:11:07,550
и что потом он сможет прийти к Чарли и потратить те самые 10 LD на другую операцию?

178
00:11:08,300 --> 00:11:12,480
Серьёзно, представьте, что вы слушаете поток сообщений об операциях,

179
00:11:12,950 --> 00:11:18,460
тогда как вы можете быть уверены, что все записывают то же самое в том же порядке?

180
00:11:19,460 --> 00:11:21,540
Как раз в этом вся загвоздка.

181
00:11:21,540 --> 00:11:23,000
А задача интересная.

182
00:11:23,450 --> 00:11:27,910
Можно ли придумать протокол, по которому принимать или отклонять операции,

183
00:11:27,910 --> 00:11:31,160
и в каком порядке это делать, чтобы точно знать,

184
00:11:31,160 --> 00:11:34,860
что у всех, кто следует этому протоколу,

185
00:11:34,860 --> 00:11:38,000
реестр выглядит точно так же, как ваш?

186
00:11:38,510 --> 00:11:41,800
Изанчальный документ о Биткоине как раз описывает эту проблему.

187
00:11:44,530 --> 00:11:47,640
В общих словах, решение, которое предлагает Биткоин -

188
00:11:47,640 --> 00:11:52,040
доверять тому реестру, над которым проводилось больше вычислительной работы.

189
00:11:52,600 --> 00:11:55,240
Уделю пару минут, чтобы объяснить, что это значит.

190
00:11:55,240 --> 00:11:58,290
Речь о так называемой криптографической хеш-функции.

191
00:11:58,510 --> 00:12:00,540
Основная идея, которую мы будем развивать,

192
00:12:00,540 --> 00:12:04,910
состоит в том, что если использовать вычислительную работу как основы доверия,

193
00:12:05,310 --> 00:12:08,810
можно сделать так, что поддельные операции и реестры с несоответствиями

194
00:12:08,810 --> 00:12:12,400
потребуют практически неосуществимых по времени вычислений.

195
00:12:12,990 --> 00:12:15,930
Напоминаю: мы углубляемся в такие вещи,

196
00:12:15,930 --> 00:12:19,750
знать которые совсем необязательно для простого использования таких криптовалют,

197
00:12:20,130 --> 00:12:21,600
но это очень любопытная мысль!

198
00:12:21,600 --> 00:12:26,950
И если вы её понимаете, то вы понимаете суть Биткоина и всех остальных криптовалют.

199
00:12:27,990 --> 00:12:30,230
Прежде всего, что же такое хеш-функция?

200
00:12:30,750 --> 00:12:34,300
Аргументом такой функции может быть сообщение или файл,

201
00:12:34,300 --> 00:12:35,540
и вообще что угодно.

202
00:12:35,730 --> 00:12:40,820
А значение - цепочка битов определенной длины, например, 256 бит.

203
00:12:41,420 --> 00:12:45,040
Выходное значение функции называется «хэшем» или «дайджестом» сообщения

204
00:12:45,380 --> 00:12:47,980
Это значение, по идее, должно выглядеть случайным.

205
00:12:48,220 --> 00:12:51,850
Оно не совсем случайное - значение всегда одно и то же для определенного аргумента.

206
00:12:52,290 --> 00:12:53,120
Но план такой, что

207
00:12:53,120 --> 00:12:57,640
если хотя бы один символ в аргументе изменится,

208
00:12:57,950 --> 00:13:00,420
то полученный хэш будет совершенно другим.

209
00:13:01,030 --> 00:13:05,680
На самом деле, для хеш-функции SHA256, о которой я говорю,

210
00:13:05,980 --> 00:13:12,010
невозможно предсказать, как именно изменится результат при малейшем изменении аргумента.

211
00:13:12,490 --> 00:13:15,080
Дело в том, что эта хеш-функция не простая,

212
00:13:15,080 --> 00:13:17,360
а криптографическая.

213
00:13:17,360 --> 00:13:20,830
Это значит, что её расчёт в обратном направлении требует невыполнимых вычислений.

214
00:13:21,320 --> 00:13:23,620
Допустим, я покажу вам цепочку из нулей и единиц

215
00:13:23,620 --> 00:13:25,860
и попрошу вас найти такой аргумент,

216
00:13:25,860 --> 00:13:31,320
для которого значение SHA256-хеш-функции точно совпадет с этой цепочкой.

217
00:13:31,640 --> 00:13:34,910
У вас не останется лучшего метода кроме подбора и проверки.

218
00:13:35,770 --> 00:13:42,260
Опять же, если вы хотите осознать, какого объема вычислений потребует подбор из 2^256 вариантов,

219
00:13:42,260 --> 00:13:44,060
просто посмотрите моё дополнительное видео.

220
00:13:44,320 --> 00:13:46,880
Мне было жутко интересно работать над ним.

221
00:13:48,960 --> 00:13:54,040
Возможно, вы думаете, что если хорошо разобраться, как именно работает эта функция,

222
00:13:54,040 --> 00:13:57,680
можно путем обратной разработки получить нужный аргумент и ничего не подбирать.

223
00:13:58,270 --> 00:14:00,870
Только пока ещё никто не догадался, как это сделать.

224
00:14:01,550 --> 00:14:07,270
Любопытно, что нет строгого доказательства того, что обратные вычисления слишком сложны.

225
00:14:07,600 --> 00:14:10,300
И всё равно современная защита основательно полагается

226
00:14:10,300 --> 00:14:14,500
на криптографические хеш-функции и представление об этом их свойстве.

227
00:14:15,040 --> 00:14:18,140
Если бы вы взглянули на алгоритмы, которые обеспечивают безопасное соединение,

228
00:14:18,140 --> 00:14:20,580
и которые ваш браузер сейчас выполняет на Youtube

229
00:14:20,580 --> 00:14:22,210
или когда взаимодействует с вашим банком,

230
00:14:22,580 --> 00:14:25,990
вы наверняка где-нибудь заметили бы SHA256.

231
00:14:27,390 --> 00:14:29,360
Но пока сосредоточимся на том,

232
00:14:29,360 --> 00:14:33,810
как такая функция может доказать, что определенный список операций

233
00:14:33,810 --> 00:14:37,070
потребует колоссальных вычислительных усилий.

234
00:14:38,030 --> 00:14:41,240
Представьте, что кто-то показывает вам список операций и говорит:

235
00:14:41,240 --> 00:14:43,220
«Смотри, я нашел такое число,

236
00:14:43,220 --> 00:14:47,010
что если его поставить в конец этого списка операций,

237
00:14:47,010 --> 00:14:50,090
а потом применить ко всему этому функцию SHA256,

238
00:14:50,090 --> 00:14:53,570
то все первые 30 бит результата будут нулями!»

239
00:14:54,080 --> 00:14:57,110
Как думаете, им было трудно найти это число?

240
00:14:58,060 --> 00:14:59,520
Для произвольного сообщения

241
00:14:59,520 --> 00:15:05,830
вероятность того, что хеш начинается с 30 нулей, составляет 1 из 2^30,

242
00:15:05,830 --> 00:15:07,650
то есть примерно из миллиарда.

243
00:15:08,150 --> 00:15:12,110
И потому, что SHA256 - криптографическая функция,

244
00:15:12,110 --> 00:15:16,170
единственный способ найти такое особенное число - это подбирать и проверять.

245
00:15:16,640 --> 00:15:20,880
Так что вполне возможно, что этому человеку пришлось перебрать где-то миллиард чисел,

246
00:15:20,880 --> 00:15:22,670
перед тем как прийти к своей находке.

247
00:15:23,360 --> 00:15:24,830
Но когда это число известно,

248
00:15:24,830 --> 00:15:29,110
его очень легко проверить: нужно просто подставить его в хэш-функцию и посчитать количество нулей.

249
00:15:29,800 --> 00:15:33,900
Другими словами, вы сможете подтвердить, что человек сделал невероятно сложные вычисленния,

250
00:15:33,900 --> 00:15:36,720
но вам не нужно будет повторять их.

251
00:15:37,330 --> 00:15:39,040
Это называется доказательством выполнения работы (англ. proof of work).

252
00:15:39,430 --> 00:15:44,610
Важно, что вся эта работа неразрывно связана с самим списком операций.

253
00:15:44,930 --> 00:15:48,080
Если вы хоть немного подредактируете одну из операций,

254
00:15:48,080 --> 00:15:49,890
это полностью изменит хеш,

255
00:15:50,150 --> 00:15:54,200
и вам опять придется перебирать миллиард чисел, чтобы найти доказательство выполнения работы,

256
00:15:54,200 --> 00:15:55,670
то есть новое число,

257
00:15:55,670 --> 00:16:00,880
которое вместе с измененным вами списком операций дает хеш, начинающийся с 30 нулей.

258
00:16:01,530 --> 00:16:04,400
А теперь вернемся к нашему распределенному реестру:

259
00:16:04,690 --> 00:16:07,240
все транслируют друг другу сообщения об операциях,

260
00:16:07,240 --> 00:16:11,080
и нам нужен какой-то способ прийти к согласию насчёт правильного реестра.

261
00:16:11,490 --> 00:16:14,920
Как я говорил, основная идея изначального документа о Биткоин -

262
00:16:14,920 --> 00:16:18,700
это доверие реестру, над которым было проведено больше всего вычислений.

263
00:16:19,370 --> 00:16:23,200
Это работает так: сначала реестр делится на блоки,

264
00:16:23,200 --> 00:16:27,410
каждый из которых состоит из списка операций и доказательства выполнения работы,

265
00:16:27,840 --> 00:16:32,600
то есть числа, вместе с которым хеш блока начинается с какого-то количества нулей.

266
00:16:33,190 --> 00:16:37,280
Сейчас допустим, что он должен начинаться с 60 нулей,

267
00:16:37,280 --> 00:16:41,040
но позже мы вернемся к более последовательному способу выбора этого числа.

268
00:16:41,840 --> 00:16:46,800
По аналогу с операцией, которая подтверждается, только если её подписывает отправитель,

269
00:16:46,800 --> 00:16:50,220
блок действителен, только если в нём есть доказательство выполнения работы.

270
00:16:51,040 --> 00:16:54,700
И ещё, чтобы упорядочить блоки,

271
00:16:54,700 --> 00:16:59,760
мы сделаем так, что каждый блок должен содержать хеш предыдущего блока в заголовке.

272
00:17:00,150 --> 00:17:03,550
Таким образом, если вам захочется изменить какой-то блок

273
00:17:03,550 --> 00:17:05,550
или поменять порядок нескольких блоков,

274
00:17:05,890 --> 00:17:08,230
от этого изменится блок, который следует за ними,

275
00:17:08,230 --> 00:17:10,010
а также его хеш,

276
00:17:10,010 --> 00:17:13,070
что, в свою очередь, меняет блок, следующий за этим, и так далее.

277
00:17:14,040 --> 00:17:16,370
Для этого потребовалось бы проделать всю работу заново

278
00:17:16,370 --> 00:17:21,660
и для каждого блока найти особое число, с которым хеш блока начинался бы с 60 нулей.

279
00:17:22,410 --> 00:17:25,040
Из-за того, что блоки выстроены в такую цепочку,

280
00:17:25,040 --> 00:17:28,800
вместо слова «журнал» чаще всего говорят «блокчейн».

281
00:17:30,050 --> 00:17:31,920
По нашему обновленному протоколу

282
00:17:31,920 --> 00:17:34,780
мы разрешаем кому угодно по всему миру создавать блоки.

283
00:17:35,230 --> 00:17:38,950
Это значит, что люди будут следить за трансляцией операций,

284
00:17:38,950 --> 00:17:40,620
собирать их в блок,

285
00:17:40,620 --> 00:17:42,110
а затем проделывать над ним вычисления,

286
00:17:42,110 --> 00:17:46,400
чтобы найти число, с которым хеш начинается с 60 нулей.

287
00:17:46,900 --> 00:17:50,210
И как только они найдут его, они транслируют полученный блок.

288
00:17:50,970 --> 00:17:53,490
Чтобы наградить создателя блока за всю его работу,

289
00:17:53,490 --> 00:17:55,270
когда он создаст блок,

290
00:17:55,270 --> 00:17:59,070
мы разрешим ему добавить к блоку специальную операцию,

291
00:17:59,070 --> 00:18:02,780
в которой он получит, скажем, 10 LD как бы из воздуха.

292
00:18:03,470 --> 00:18:05,230
Это называется наградой за блок,

293
00:18:05,230 --> 00:18:09,800
и такая награда - исключение из наших обычных правил подтверждения транзакций.

294
00:18:10,010 --> 00:18:13,190
Её никто не выплачивает, поэтому операцию не нужно подписывать.

295
00:18:13,600 --> 00:18:19,720
Это значит, что с каждым новым блоком количество денег в нашей экономике растёт.

296
00:18:20,880 --> 00:18:23,200
Создание блоков часто называют «майнингом»,

297
00:18:23,200 --> 00:18:25,220
потому что оно требует огромной работы

298
00:18:25,220 --> 00:18:28,460
и добавляет новые деньги в экономику.

299
00:18:29,070 --> 00:18:31,470
Так что когда вы читаете или слышите о майнерах,

300
00:18:31,470 --> 00:18:33,730
не забывайте, что в действительности их занятие -

301
00:18:33,730 --> 00:18:36,630
следить за операциями, создавать блоки,

302
00:18:36,630 --> 00:18:40,900
транслировать их и получать за это награды.

303
00:18:41,940 --> 00:18:46,230
С точки зрения майнера, каждый блок - это маленькая лотерея,

304
00:18:46,230 --> 00:18:49,140
в которой все наперегонки подбирают числа,

305
00:18:49,140 --> 00:18:52,460
пока одному счасливчику не попадется особенное число,

306
00:18:52,460 --> 00:18:55,310
которое позволяет получить хеш с большим числом нулей в начале,

307
00:18:55,310 --> 00:18:56,370
и за это счастливчик получает награду.

308
00:18:58,040 --> 00:19:01,200
А все остальные, кто просто хочет использовать систему для платежей,

309
00:19:01,200 --> 00:19:03,430
не следят за каждой операцией,

310
00:19:03,430 --> 00:19:07,080
а просто получают от майнеров трансляцию о блоках

311
00:19:07,080 --> 00:19:10,010
и обновляют собственные копии блокчейна.

312
00:19:10,510 --> 00:19:13,320
Вот ключевое дополнение к нашему протоколу:

313
00:19:13,320 --> 00:19:17,930
если вы получили информацию о двух блокчейнах и их истории операций не совпадают,

314
00:19:18,310 --> 00:19:22,350
вы выбираете самый длинный, то есть тот, над которым проводилось больше вычислений.

315
00:19:22,900 --> 00:19:27,930
Если они одинаковые по длине, дождитесь нового блока, который сделает одну цепочку длиннее.

316
00:19:28,720 --> 00:19:33,910
Так что несмотря на то, что центра управления нет и у всех своя копия блокчейна,

317
00:19:34,180 --> 00:19:39,260
если все соглашаются выбирать блокчейн с наибольшим объёмом работы,

318
00:19:39,660 --> 00:19:42,980
мы приходим к децентрализованному консенсусу.

319
00:19:43,640 --> 00:19:45,840
Чтобы понять, почему из этого получается надежная система,

320
00:19:45,840 --> 00:19:49,450
и в какой момент стоит верить в подлинность платежа,

321
00:19:49,450 --> 00:19:55,070
полезно рассмотреть, как именно можно обвести кого-то вокруг пальца с помощью этой системы.

322
00:19:55,650 --> 00:19:58,690
Например, Алиса пытается обмануть Боба с помощью поддельного  блока,

323
00:19:59,030 --> 00:20:04,080
а именно отправляет ему блок, согласно которому она платит Бобу 100 LD.

324
00:20:04,420 --> 00:20:07,260
Только Алиса не транслирует этот блок для всей остальной сети.

325
00:20:07,620 --> 00:20:11,440
Так остальные участники будут думать, что у нее еще есть эти 100 LD.

326
00:20:12,150 --> 00:20:17,250
Тогда ей нужно найти правильное доказательство выполнения работы вперёд остальных майнеров,

327
00:20:17,250 --> 00:20:18,860
которые работают над собственными блоками.

328
00:20:19,410 --> 00:20:20,990
И это вполне может случиться!

329
00:20:20,990 --> 00:20:24,980
Может, Алисе просто повезёт в этой маленькой лотерее раньше всех.

330
00:20:25,680 --> 00:20:29,770
Только Боб будет получать трансляции и от других майнеров,

331
00:20:30,080 --> 00:20:32,640
поэтому, чтобы Боб поверил в этот поддельный блок,

332
00:20:32,640 --> 00:20:35,440
Алисе пришлось бы проделать всю работу самой,

333
00:20:35,440 --> 00:20:39,440
чтобы добавлять блоки в это отдельное ответвление блокчейна Боба.

334
00:20:39,440 --> 00:20:42,330
Оно отличается от трансляций других майнеров.

335
00:20:42,720 --> 00:20:48,400
Помните, что по протоколу Боб доверяет самой длинной цепочке?

336
00:20:49,230 --> 00:20:51,960
Алисе, может, и удалось бы поддерживать ответвление длиной в несколько блоков,

337
00:20:51,960 --> 00:20:55,140
если ей повезёт найти их быстрее,

338
00:20:55,140 --> 00:20:58,050
чем все остальные майнеры в сети вместе взятые.

339
00:20:58,560 --> 00:21:03,710
Но если только в её руках не половина всех вычислительных мощностей сети,

340
00:21:04,080 --> 00:21:06,570
то будет несравнимо вероятнее,

341
00:21:06,570 --> 00:21:09,650
что блокчейн остальных майнеров

342
00:21:09,650 --> 00:21:14,190
вырастет быстрее, чем поддельный блокчейн, который Алиса подсовывает Бобу.

343
00:21:15,200 --> 00:21:19,820
Так что через некоторое время Боб откажется от блокчейна Алисы

344
00:21:19,820 --> 00:21:23,100
в пользу более длинной цепочки, над которой работают все остальные.

345
00:21:24,020 --> 00:21:29,250
Заметьте, это значит, что доверять новому блоку, как только вы его получили, нельзя.

346
00:21:29,620 --> 00:21:33,420
Лучше дождаться, когда к нему добавится несколько новых блоков.

347
00:21:33,890 --> 00:21:36,610
Если вы так и не получите более длинного блокчейна,

348
00:21:36,610 --> 00:21:40,860
то можете верить, что этот блок - часть цепочки, которую вычисляют все.

349
00:21:42,250 --> 00:21:45,520
Так мы и пришли к основным идеям.

350
00:21:45,850 --> 00:21:49,190
Система распределенного реестра, основанная на доказательстве выполненной работы,

351
00:21:49,190 --> 00:21:53,810
и есть механизм работы протокола Биткоина и других криптовалют.

352
00:21:54,260 --> 00:21:56,280
Осталось прояснить лишь несколько деталей.

353
00:21:56,280 --> 00:21:59,480
До этого, я упоминал, что доказательством работы является число,

354
00:21:59,480 --> 00:22:02,830
которое при подстановке в хэш функцию выдаёт первые 60 нулей.

355
00:22:03,210 --> 00:22:08,400
Но протоколу Биткоина требуемое число нулей меняется периодично,

356
00:22:08,400 --> 00:22:12,080
таким образом, чтобы в среднем потребовалось 10 минут для создания нового блока

357
00:22:12,800 --> 00:22:18,200
То есть, чем больше "майнеров" приходит в сеть, тем задача становится сложнее и сложнее,

358
00:22:18,230 --> 00:22:23,170
для того чтобы эта мини-лоттерея в среднем выдавала одного победителя каждые 10 минут

359
00:22:23,950 --> 00:22:28,080
Многие новые криптовалюты имеют меньшее среднее время нахождения нового блока

360
00:22:28,660 --> 00:22:32,770
И все биткоины в обращении являются ничем другим, как наградами за нахождение новых блоков

361
00:22:33,030 --> 00:22:35,890
Сначала эти награды имели размер в 50 биткоинов

362
00:22:36,190 --> 00:22:39,380
Есть отличный сайт, который называется BlockExplorer

363
00:22:39,380 --> 00:22:41,760
Он позволяет легко путешествовать по истории транзакций в блокчейне

364
00:22:41,990 --> 00:22:45,030
И если посмотреть на первые найденные блоки в цепочке,

365
00:22:45,030 --> 00:22:49,520
можно убедиться, что они не содержали никаких транзакций, кроме награды майнеру за нахождение блока

366
00:22:49,970 --> 00:22:54,800
Но каждые 210 000 блоков, что примерно соответствует 4 годам

367
00:22:54,800 --> 00:22:56,890
Награда уменьшается в 2 раза

368
00:22:56,890 --> 00:23:00,390
Сейчас, награда за блок составляет 12.5 биткоинов

369
00:23:00,740 --> 00:23:04,340
Поскольку в течение времени награда уменьшается в геометрической прогрессии

370
00:23:04,710 --> 00:23:09,750
Число биткоинов в обращении не может быть больше 21 миллиона

371
00:23:10,450 --> 00:23:13,520
Но это не значит, что майнеры перестанут останутся без хлеба

372
00:23:13,950 --> 00:23:18,230
Помимо награды за нахождение, майнеры могут получать плату за включение транзакций в свой блок

373
00:23:18,500 --> 00:23:20,970
Это работает так: всякий раз, совершая транзакцию

374
00:23:20,970 --> 00:23:24,700
Ты можешь опционально добавить небольшую плату вместе с ней,

375
00:23:24,700 --> 00:23:28,620
которая уйдёт майнеру, включившему её в свой блок

376
00:23:29,280 --> 00:23:32,100
Это делается для того, чтобы мотивировать майнеров добавить

377
00:23:32,100 --> 00:23:36,080
транслируемые транзакции в следующий блок побыстрее

378
00:23:36,430 --> 00:23:42,080
В биткоине каждый блок может включить в себя примерно 2400 транзакций

379
00:23:42,080 --> 00:23:45,380
и многие критикуют за это биткоин, считая это число слишком ограничивающим

380
00:23:45,960 --> 00:23:51,740
Для сравнения: VISA в среднем проводит 1700 операций в секунду

381
00:23:51,740 --> 00:23:55,520
и способна проводить более 24 тысяч операций в секунду

382
00:23:56,240 --> 00:24:01,390
Эта сравнительная медлительность биткоина выливается в более высокие комиссии,

383
00:24:01,390 --> 00:24:06,410
поскольку именно они определяют очередность включения транзакций майнерами в блоки.

384
00:24:08,160 --> 00:24:12,140
Всё изученное далеко от глубокого освоения криптовалют

385
00:24:12,140 --> 00:24:16,400
Есть ещё много нюансов и альтернативные доказательства работы, которые я даже не упомянул

386
00:24:16,720 --> 00:24:21,550
Но я надеюсь, что это может

387
00:24:21,550 --> 00:24:24,710
 

388
00:24:25,250 --> 00:24:26,280
 

389
00:24:26,280 --> 00:24:31,170
 

390
00:24:31,370 --> 00:24:35,090
 

391
00:24:35,330 --> 00:24:38,210
 

392
00:24:38,210 --> 00:24:40,720
 

393
00:24:41,550 --> 00:24:45,750
 

394
00:24:46,170 --> 00:24:49,180
 

395
00:24:49,180 --> 00:24:51,280
 

396
00:24:51,280 --> 00:24:52,700
 

397
00:24:52,700 --> 00:24:57,200
 

