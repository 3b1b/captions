1
00:00:04,140 --> 00:00:06,000
Let's talk about space-filling curves.

2
00:00:06,420 --> 00:00:08,864
They are incredibly fun to animate, and they also give 

3
00:00:08,864 --> 00:00:11,220
a chance to address a certain philosophical question.

4
00:00:11,820 --> 00:00:16,055
Math often deals with infinite quantities, sometimes so intimately that the 

5
00:00:16,055 --> 00:00:20,180
very substance of a result only actually makes sense in an infinite world.

6
00:00:20,940 --> 00:00:25,680
So the question is, how can these results ever be useful in a finite context?

7
00:00:26,660 --> 00:00:29,598
As with all philosophizing, this is best left to discuss 

8
00:00:29,598 --> 00:00:32,640
until after we look at the concrete case and the real math.

9
00:00:33,240 --> 00:00:37,504
So I'll begin by laying down an application of something called a Hilbert curve, 

10
00:00:37,504 --> 00:00:40,980
followed by a description of some of its origins in infinite math.

11
00:00:44,520 --> 00:00:47,012
Let's say you wanted to write some software that 

12
00:00:47,012 --> 00:00:49,200
would enable people to see with their ears.

13
00:00:49,900 --> 00:00:53,161
It would take in data from a camera, and then somehow 

14
00:00:53,161 --> 00:00:56,060
translate that into a sound in a meaningful way.

15
00:00:56,900 --> 00:01:00,539
The thought here is that brains are plastic enough to build an intuition 

16
00:01:00,539 --> 00:01:04,080
from sight even when the raw data is scrambled into a different format.

17
00:01:04,800 --> 00:01:07,680
I've left a few links in the description to studies to this effect.

18
00:01:08,300 --> 00:01:12,422
To make initial experiments easier, you might start by treating 

19
00:01:12,422 --> 00:01:16,480
incoming images with a low resolution, maybe 256 by 256 pixels.

20
00:01:17,340 --> 00:01:20,740
And to make my own animation efforts easier, let's represent one of 

21
00:01:20,740 --> 00:01:24,240
these images with a square grid, each cell corresponding with a pixel.

22
00:01:25,080 --> 00:01:29,513
One approach to this sound-to-sight software would be to find a nice 

23
00:01:29,513 --> 00:01:34,140
way to associate each one of those pixels with a unique frequency value.

24
00:01:35,020 --> 00:01:38,759
Then when that pixel is brighter, the frequency associated with it would be 

25
00:01:38,759 --> 00:01:42,400
played louder, and if the pixel were darker, the frequency would be quiet.

26
00:01:43,400 --> 00:01:47,706
Listening to all of the pixels all at once would then sound like a bunch of 

27
00:01:47,706 --> 00:01:51,673
frequencies overlaid on top of one another, with dominant frequencies 

28
00:01:51,673 --> 00:01:55,640
corresponding to the brighter regions of the image sounding like some 

29
00:01:55,640 --> 00:02:00,740
cacophonous mess until your brain learns to make sense out of the information it contains.

30
00:02:01,900 --> 00:02:06,455
Let's temporarily set aside worries about whether or not this would actually work, 

31
00:02:06,455 --> 00:02:10,900
and instead think about what function, from pixel space down to frequency space, 

32
00:02:10,900 --> 00:02:13,480
gives this software the best chance of working.

33
00:02:14,500 --> 00:02:17,907
The tricky part is that pixel space is two-dimensional, 

34
00:02:17,907 --> 00:02:20,280
but frequency space is one-dimensional.

35
00:02:21,660 --> 00:02:25,100
You could, of course, try doing this with a random mapping.

36
00:02:25,700 --> 00:02:29,600
After all, we're hoping that people's brains make sense out of pretty wonky data anyway.

37
00:02:30,400 --> 00:02:33,081
However, it might be nice to leverage some of the 

38
00:02:33,081 --> 00:02:36,300
intuitions that a given human brain already has about sound.

39
00:02:36,960 --> 00:02:42,051
For example, if we think in terms of the reverse mapping from frequency space to pixel 

40
00:02:42,051 --> 00:02:47,260
space, frequencies that are close together should stay close together in the pixel space.

41
00:02:47,700 --> 00:02:52,895
That way, even if an ear has a hard time distinguishing between two nearby frequencies, 

42
00:02:52,895 --> 00:02:56,320
they will at least refer to the same basic point in space.

43
00:02:57,400 --> 00:03:00,254
To ensure this happens, you could first describe a 

44
00:03:00,254 --> 00:03:03,220
way to weave a line through each one of these pixels.

45
00:03:04,220 --> 00:03:08,594
Then if you fix each pixel to a spot on that line and unravel the 

46
00:03:08,594 --> 00:03:14,294
whole thread to make it straight, you could interpret this line as a frequency space, 

47
00:03:14,294 --> 00:03:17,940
and you have an association from pixels to frequencies.

48
00:03:19,840 --> 00:03:23,152
One weaving method would be to just go one row at a time, 

49
00:03:23,152 --> 00:03:26,980
alternating between left and right as it moves up that pixel space.

50
00:03:27,780 --> 00:03:31,400
This is like a well-played game of Snake, so let's call this a Snake Curve.

51
00:03:32,600 --> 00:03:35,516
When you tell your mathematician friend about this idea, 

52
00:03:35,516 --> 00:03:37,460
she says, why not use a Hilbert curve?

53
00:03:38,220 --> 00:03:40,600
When you ask her what that is, she stumbles for a moment.

54
00:03:41,220 --> 00:03:44,380
So it's not a curve, but an infinite family of curves.

55
00:03:44,380 --> 00:03:47,549
She starts, well no, it's just one thing, but I need 

56
00:03:47,549 --> 00:03:50,540
to tell you about a certain infinite family first.

57
00:03:51,120 --> 00:03:54,351
She pulls out a piece of paper and starts explaining what she 

58
00:03:54,351 --> 00:03:57,740
decides to call pseudo-Hilbert curves, for lack of a better term.

59
00:03:58,320 --> 00:04:03,132
For an order-one pseudo-Hilbert curve, you divide a square into a 2x2 grid, 

60
00:04:03,132 --> 00:04:08,387
and connect the center of the lower left quadrant to the center of the upper left, 

61
00:04:08,387 --> 00:04:12,060
over to the upper right, and then down in the lower right.

62
00:04:12,620 --> 00:04:17,580
For an order-two pseudo-Hilbert curve, rather than just going straight from one quadrant 

63
00:04:17,580 --> 00:04:22,540
to another, we let our curve do a little work to fill out each quadrant while it does so.

64
00:04:23,060 --> 00:04:26,775
Specifically, subdivide the square further into a 4x4 grid, 

65
00:04:26,775 --> 00:04:31,048
and we have our curve trace out a miniature order-one pseudo-Hilbert 

66
00:04:31,048 --> 00:04:34,640
curve inside each quadrant before it moves on to the next.

67
00:04:35,520 --> 00:04:38,261
If we left those mini-curves oriented as they are, 

68
00:04:38,261 --> 00:04:42,883
going from the end of the mini-curve in the lower left to the start of the mini-curve 

69
00:04:42,883 --> 00:04:47,506
in the upper left requires an awkward jump, same deal with going from the upper right 

70
00:04:47,506 --> 00:04:52,021
down to the lower right, so we flip the curves in the lower left and lower right to 

71
00:04:52,021 --> 00:04:53,580
make that connection shorter.

72
00:04:54,780 --> 00:04:58,780
Going from an order-two to an order-three pseudo-Hilbert curve is similar.

73
00:04:59,460 --> 00:05:03,401
You divide the square into an 8x8 grid, then put an order-two 

74
00:05:03,401 --> 00:05:09,122
pseudo-Hilbert curve in each quadrant, flip the lower left and lower right appropriately, 

75
00:05:09,122 --> 00:05:11,220
and connect them all tip to tail.

76
00:05:12,100 --> 00:05:14,780
And the pattern continues like that for higher orders.

77
00:05:22,020 --> 00:05:26,609
For the 256x256 pixel array, your mathematician friend explains, 

78
00:05:26,609 --> 00:05:30,140
you would use an order-eight pseudo-Hilbert curve.

79
00:05:31,000 --> 00:05:35,184
And remember, defining a curve which weaves through each pixel is 

80
00:05:35,184 --> 00:05:40,192
basically the same as defining a function from pixel space to frequency space, 

81
00:05:40,192 --> 00:05:44,060
since you're associating each pixel with a point on the line.

82
00:05:45,440 --> 00:05:48,334
Now this is nice as a piece of art, but why would these 

83
00:05:48,334 --> 00:05:51,540
pseudo-Hilbert curves be any better than just the snake curve?

84
00:05:52,460 --> 00:05:54,380
Well here's one very important reason.

85
00:05:54,960 --> 00:05:57,166
Imagine that you go through with this project, 

86
00:05:57,166 --> 00:06:00,640
you integrate the software with real cameras and headphones, and it works!

87
00:06:01,100 --> 00:06:05,360
People around the world are using the device, building intuitions for vision via sound.

88
00:06:06,200 --> 00:06:10,789
What happens when you issue an upgrade that increases the 

89
00:06:10,789 --> 00:06:15,300
resolution of the camera's image from 256x256 to 512x512?

90
00:06:16,580 --> 00:06:20,996
If you were using the snake curve, as you transition to a higher resolution, 

91
00:06:20,996 --> 00:06:25,871
many points on this frequency line would have to go to completely different parts of 

92
00:06:25,871 --> 00:06:26,560
pixel space.

93
00:06:27,190 --> 00:06:30,900
For example, let's follow a point about halfway along the frequency line.

94
00:06:31,560 --> 00:06:36,614
It'll end up about halfway up the pixel space, no matter the resolution, 

95
00:06:36,614 --> 00:06:42,500
but where it is left to right can differ wildly as you go from 256x256 up to 512x512.

96
00:06:42,920 --> 00:06:46,427
This means everyone using your software would have to re-learn 

97
00:06:46,427 --> 00:06:49,823
how to see with their ears, since the original intuitions of 

98
00:06:49,823 --> 00:06:53,720
which points in space correspond to which frequencies no longer apply.

99
00:06:54,720 --> 00:06:58,997
However, with the Hilbert curve technique, as you increase the 

100
00:06:58,997 --> 00:07:04,905
order of a pseudo-Hilbert curve, a given point on the line moves around less and less, 

101
00:07:04,905 --> 00:07:08,300
it just approaches a more specific point in space.

102
00:07:09,520 --> 00:07:14,044
That way, you've given your users the opportunity to fine-tune their intuitions, 

103
00:07:14,044 --> 00:07:16,000
rather than re-learning everything.

104
00:07:19,460 --> 00:07:22,340
So, for this sound-to-sight application, the Hilbert 

105
00:07:22,340 --> 00:07:25,220
curve approach turns out to be exactly what you want.

106
00:07:26,220 --> 00:07:31,520
In fact, given how specific the goal is, it seems almost weirdly perfect.

107
00:07:32,220 --> 00:07:35,148
So you go back to your mathematician friend and ask her, 

108
00:07:35,148 --> 00:07:38,540
what was the original motivation for defining one of these curves?

109
00:07:39,740 --> 00:07:42,618
She explains that near the end of the 19th century, 

110
00:07:42,618 --> 00:07:45,497
in the aftershock of Cantor's research on infinity, 

111
00:07:45,497 --> 00:07:49,648
mathematicians were interested in finding a mapping from a one-dimensional 

112
00:07:49,648 --> 00:07:53,690
line into two-dimensional space in such a way that the line runs through 

113
00:07:53,690 --> 00:07:55,240
every single point in space.

114
00:07:56,240 --> 00:07:59,703
To be clear, we're not talking about a finite bounded grid of pixels, 

115
00:07:59,703 --> 00:08:01,980
like we had in the sound-to-sight application.

116
00:08:02,680 --> 00:08:05,978
This is continuous space, which is very infinite, 

117
00:08:05,978 --> 00:08:11,057
and the goal is to have a line which is as thin as can be and has zero area, 

118
00:08:11,057 --> 00:08:16,401
somehow pass through every single one of those infinitely many points that makes 

119
00:08:16,401 --> 00:08:18,380
up the infinite area of space.

120
00:08:19,680 --> 00:08:23,768
Before 1890, a lot of people thought this was obviously impossible, 

121
00:08:23,768 --> 00:08:28,819
but then Peano discovered the first of what would come to be known as space-filling 

122
00:08:28,819 --> 00:08:29,240
curves.

123
00:08:30,180 --> 00:08:34,400
In 1891, Hilbert followed with his own slightly simpler space-filling curve.

124
00:08:35,400 --> 00:08:38,206
Technically, each one fills a square, not all of space, 

125
00:08:38,206 --> 00:08:41,665
but I'll show you later on how once you filled a square with a line, 

126
00:08:41,665 --> 00:08:43,520
filling all of space is not an issue.

127
00:08:44,620 --> 00:08:48,038
By the way, mathematicians use the word curve to talk about 

128
00:08:48,038 --> 00:08:51,400
a line running through space even if it has jagged corners.

129
00:08:52,200 --> 00:08:57,218
This is especially counterintuitive terminology in the context of a space-filling curve, 

130
00:08:57,218 --> 00:09:00,320
which in a sense consists of nothing but sharp corners.

131
00:09:00,860 --> 00:09:04,362
A better name might be something like space-filling fractal, 

132
00:09:04,362 --> 00:09:08,840
which some people do use, but hey, it's math, so we live with bad terminology.

133
00:09:10,360 --> 00:09:14,064
None of the pseudo-Hilbert curves that you use to fill pixelated space 

134
00:09:14,064 --> 00:09:17,560
would count as a space-filling curve, no matter how high the order.

135
00:09:18,480 --> 00:09:20,200
Just zoom in on one of the pixels.

136
00:09:20,940 --> 00:09:25,076
When this pixel is considered part of infinite, continuous space, 

137
00:09:25,076 --> 00:09:29,150
the curve only passes through the tiniest zero-area slice of it, 

138
00:09:29,150 --> 00:09:31,720
and it certainly doesn't hit every point.

139
00:09:33,420 --> 00:09:36,751
Your mathematician friend explains that an actual bonafide 

140
00:09:36,751 --> 00:09:40,140
Hilbert curve is not any one of these pseudo-Hilbert curves.

141
00:09:40,820 --> 00:09:42,560
Instead it's the limit of all of them.

142
00:09:43,700 --> 00:09:46,680
Defining this limit rigorously is delicate.

143
00:09:47,420 --> 00:09:51,266
You first have to formalize what these curves are as functions, 

144
00:09:51,266 --> 00:09:55,053
specifically functions which take in a single number somewhere 

145
00:09:55,053 --> 00:09:58,720
between 0 and 1 as their input, and output a pair of numbers.

146
00:09:59,600 --> 00:10:02,160
This input can be thought of as a point on the line, 

147
00:10:02,160 --> 00:10:05,060
and the output can be thought of as coordinates in 2D space.

148
00:10:05,480 --> 00:10:10,320
But in principle it's just an association between a single number and pairs of numbers.

149
00:10:11,280 --> 00:10:16,032
For example, an order-2 pseudo-Hilbert curve as a 

150
00:10:16,032 --> 00:10:21,640
function maps the input 0.3 to the output pair 0.125, 0.75.

151
00:10:22,580 --> 00:10:31,109
An order-3 pseudo-Hilbert curve maps that same input 0.3 to the output pair 0.0758, 

152
00:10:31,109 --> 00:10:31,820
0.6875.

153
00:10:33,140 --> 00:10:36,863
Now the core property that makes a function like this a curve, 

154
00:10:36,863 --> 00:10:41,472
and not just any ol' association between single numbers and pairs of numbers, 

155
00:10:41,472 --> 00:10:42,300
is continuity.

156
00:10:43,660 --> 00:10:47,667
The intuition behind continuity is that you don't want the output of your 

157
00:10:47,667 --> 00:10:52,000
function to suddenly jump at any point when the input is only changing smoothly.

158
00:10:52,820 --> 00:10:57,169
And the way this is made rigorous in math is actually pretty clever, 

159
00:10:57,169 --> 00:11:02,148
and fully appreciating space-filling curves requires digesting the formal idea 

160
00:11:02,148 --> 00:11:07,380
of continuity, so it's definitely worth taking a brief side-step to go over it now.

161
00:11:08,340 --> 00:11:14,160
Consider a particular input point, a, and the corresponding output of the function, b.

162
00:11:15,140 --> 00:11:20,632
Draw a circle centered around a, and look at all the other input points inside that 

163
00:11:20,632 --> 00:11:26,060
circle, and consider where the function takes all those points in the output space.

164
00:11:27,060 --> 00:11:32,160
Now draw the smallest circle you can centered at b that contains those outputs.

165
00:11:33,240 --> 00:11:36,609
Different choices for the size of the input circle might 

166
00:11:36,609 --> 00:11:39,920
result in larger or smaller circles in the output space.

167
00:11:40,700 --> 00:11:44,852
But notice what happens when we go through this process at a point 

168
00:11:44,852 --> 00:11:48,137
where the function jumps, drawing a circle around a, 

169
00:11:48,137 --> 00:11:52,723
and looking at the input points within the circle, seeing where they map, 

170
00:11:52,723 --> 00:11:57,620
and drawing the smallest possible circle centered at b containing those points.

171
00:11:58,540 --> 00:12:02,403
No matter how small the circle around a, the corresponding 

172
00:12:02,403 --> 00:12:05,940
circle around b just cannot be smaller than that jump.

173
00:12:07,340 --> 00:12:11,727
For this reason, we say that the function is discontinuous at a if 

174
00:12:11,727 --> 00:12:16,180
there's any lower bound on the size of this circle that surrounds b.

175
00:12:17,460 --> 00:12:20,770
If the circle around b can be made as small as you want, 

176
00:12:20,770 --> 00:12:23,906
with sufficiently small choices for circles around a, 

177
00:12:23,906 --> 00:12:26,520
you say that the function is continuous at a.

178
00:12:27,340 --> 00:12:29,750
A function as a whole is called continuous if 

179
00:12:29,750 --> 00:12:32,160
it's continuous at every possible input point.

180
00:12:32,980 --> 00:12:35,813
Now with that as a formal definition of curves, 

181
00:12:35,813 --> 00:12:39,060
you're ready to define what an actual Hilbert curve is.

182
00:12:40,020 --> 00:12:44,848
Doing this relies on a wonderful property of the sequence of pseudo-Hilbert curves, 

183
00:12:44,848 --> 00:12:46,400
which should feel familiar.

184
00:12:47,400 --> 00:12:50,681
Take a given input point, like 0.3, and apply each 

185
00:12:50,681 --> 00:12:54,220
successive pseudo-Hilbert curve function to this point.

186
00:12:55,060 --> 00:12:58,885
The corresponding outputs, as we increase the order of the curve, 

187
00:12:58,885 --> 00:13:01,320
approaches some particular point in space.

188
00:13:02,340 --> 00:13:06,284
It doesn't matter what input you start with, this sequence of outputs 

189
00:13:06,284 --> 00:13:10,284
you get by applying each successive pseudo-Hilbert curve to this point 

190
00:13:10,284 --> 00:13:14,060
always stabilizes and approaches some particular point in 2D space.

191
00:13:15,340 --> 00:13:18,444
This is absolutely not true, by the way, for snake curves, 

192
00:13:18,444 --> 00:13:22,549
or for that matter most sequences of curves filling pixelated space of higher 

193
00:13:22,549 --> 00:13:23,760
and higher resolutions.

194
00:13:24,370 --> 00:13:29,382
The outputs associated with a given input become wildly erratic as the resolution 

195
00:13:29,382 --> 00:13:34,640
increases, always jumping from left to right, and never actually approaching anything.

196
00:13:35,900 --> 00:13:40,380
Now because of this property, we can define a Hilbert curve function like this.

197
00:13:41,040 --> 00:13:45,751
For a given input value between 0 and 1, consider the sequence of points in 2D 

198
00:13:45,751 --> 00:13:50,880
space you get by applying each successive pseudo-Hilbert curve function at that point.

199
00:13:51,420 --> 00:13:55,042
The output of the Hilbert curve function evaluated on 

200
00:13:55,042 --> 00:13:59,000
this input is just defined to be the limit of those points.

201
00:14:00,380 --> 00:14:04,196
Because the sequence of pseudo-Hilbert curve outputs always converges 

202
00:14:04,196 --> 00:14:07,959
no matter what input you start with, this is actually a well-defined 

203
00:14:07,959 --> 00:14:11,940
function in a way that it never could have been had we used snake curves.

204
00:14:13,440 --> 00:14:17,223
Now I'm not going to go through the proof for why this gives a space-filling curve, 

205
00:14:17,223 --> 00:14:19,340
but let's at least see what needs to be proved.

206
00:14:19,340 --> 00:14:23,986
First, verify that this is a well-defined function by proving that the outputs of 

207
00:14:23,986 --> 00:14:28,860
the pseudo-Hilbert curve functions really do converge the way I'm telling you they do.

208
00:14:29,400 --> 00:14:33,980
Second, show that this function gives a curve, meaning it's continuous.

209
00:14:35,140 --> 00:14:38,388
Third, and most important, show that it fills space, 

210
00:14:38,388 --> 00:14:43,660
in the sense that every single point in the unit square is an output of this function.

211
00:14:44,580 --> 00:14:48,360
I really do encourage anyone watching this to take a stab at each one of these.

212
00:14:48,880 --> 00:14:51,860
Spoiler alert, all three of these facts turn out to be true.

213
00:14:53,660 --> 00:14:57,319
You can extend this to a curve that fills all of space just by tiling 

214
00:14:57,319 --> 00:15:01,083
space with squares and then chaining a bunch of Hilbert curves together 

215
00:15:01,083 --> 00:15:04,795
in a spiraling pattern of tiles, connecting the end of one tile to the 

216
00:15:04,795 --> 00:15:08,560
start of a new tile with an added little stretch of line if you need to.

217
00:15:09,660 --> 00:15:14,624
You can think of the first tile as coming from the interval from 0 to 1, 

218
00:15:14,624 --> 00:15:19,248
the second tile as coming from the interval from 1 to 2, and so on, 

219
00:15:19,248 --> 00:15:24,620
so the entire positive real number line is getting mapped into all of 2D space.

220
00:15:25,420 --> 00:15:27,320
Take a moment to let that fact sink in.

221
00:15:27,660 --> 00:15:32,816
A line, the platonic form of thinness itself, can wander through an 

222
00:15:32,816 --> 00:15:38,200
infinitely extending and richly dense space and hit every single point.

223
00:15:43,240 --> 00:15:48,134
Notice, the core property that made pseudo-Hilbert curves useful in both the 

224
00:15:48,134 --> 00:15:52,901
sound-to-sight application and in their infinite origins is that points on 

225
00:15:52,901 --> 00:15:57,860
the curve move around less and less as you increase the order of those curves.

226
00:15:58,780 --> 00:16:02,912
While translating images to sound, this was useful because it means upgrading 

227
00:16:02,912 --> 00:16:06,940
to higher resolutions doesn't require retraining your senses all over again.

228
00:16:07,460 --> 00:16:11,158
For mathematicians interested in filling continuous space, 

229
00:16:11,158 --> 00:16:16,361
this property is what ensured that talking about the limit of a sequence of curves 

230
00:16:16,361 --> 00:16:18,180
was a meaningful thing to do.

231
00:16:19,060 --> 00:16:22,022
And this connection here between the infinite and finite 

232
00:16:22,022 --> 00:16:25,140
worlds seems to be more of a rule in math than an exception.

233
00:16:26,020 --> 00:16:30,282
Another example that several astute commenters on the Inventing Math video 

234
00:16:30,282 --> 00:16:34,431
pointed out is the connection between the divergent sum of all powers of 

235
00:16:34,431 --> 00:16:38,580
2 and the way that the number of 1 is represented in computers with bits.

236
00:16:39,580 --> 00:16:43,640
It's not so much that the infinite result is directly useful, 

237
00:16:43,640 --> 00:16:48,421
but instead the same patterns and constructs that are used to define and 

238
00:16:48,421 --> 00:16:54,120
prove infinite facts have finite analogs, and these finite analogs are directly useful.

239
00:16:55,100 --> 00:16:57,600
But the connection is often deeper than a mere analogy.

240
00:16:58,280 --> 00:17:02,049
Many theorems about an infinite object are often equivalent 

241
00:17:02,049 --> 00:17:05,380
to some theorem regarding a family of finite objects.

242
00:17:06,280 --> 00:17:10,411
For example, if during your sound-to-sight project you were to sit down 

243
00:17:10,411 --> 00:17:14,312
and really formalize what it means for your curve to stay stable as 

244
00:17:14,312 --> 00:17:18,271
you increase camera resolution, you would end up effectively writing 

245
00:17:18,271 --> 00:17:22,460
the definition of what it means for a sequence of curves to have a limit.

246
00:17:23,400 --> 00:17:26,636
In fact, a statement about some infinite object, 

247
00:17:26,636 --> 00:17:30,929
whether that's a sequence or a fractal, can usually be viewed as 

248
00:17:30,929 --> 00:17:36,280
a particularly clean way to encapsulate a truth about a family of finite objects.

249
00:17:37,480 --> 00:17:40,781
The lesson to take away here is that even when a statement seems 

250
00:17:40,781 --> 00:17:44,235
very far removed from reality, you should always be willing to look 

251
00:17:44,235 --> 00:17:47,740
under the hood and at the nuts and bolts of what's really being said.

252
00:17:48,480 --> 00:17:52,511
Who knows, you might find insights for representing numbers from divergent sums, 

253
00:17:52,511 --> 00:17:54,900
or for seeing with your ears from filling space.

