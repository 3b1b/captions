1
00:00:03,360 --> 00:00:09,660
残念ながら、行列は教えられて分かるものではない。
自分の目で見るしかない。
- モーフィアス

2
00:00:09,700 --> 00:00:12,480
視覚的に行列演算を理解することの重要性を示す、
驚くほどに適切な言葉

3
00:00:12,480 --> 00:00:13,320
こんにちは！

4
00:00:13,320 --> 00:00:17,880
線形代数で他の全てのトピックを学ぶ
起点になるようなトピックを選ぶなら、

5
00:00:17,880 --> 00:00:21,080
初めて線形代数を学ぶ学生がしばしば理解できていないもの、

6
00:00:21,080 --> 00:00:27,140
それは、線形変換と行列との関係の考え方です。

7
00:00:27,140 --> 00:00:32,440
この動画では、
2次元の場合に線形変換はどのようにに見えるか

8
00:00:32,440 --> 00:00:35,800
そしてそれらは行列 と ベクトルの積の考え方とどのように関係するか、について考えていきます。

9
00:00:35,800 --> 00:00:42,620
特に、暗記に頼らない
行列とベクトルの積の考え方を示したいと思います。

10
00:00:43,120 --> 00:00:47,180
まずは、この用語 「線形変換」を解析してみましょう。

11
00:00:47,180 --> 00:00:50,280
「変換」は、本質的には「関数」を気取って言っただけの言葉です。

12
00:00:50,280 --> 00:00:54,420
それは入力を得て、それぞれに対して
出力を吐き出すものです。

13
00:00:54,440 --> 00:01:02,360
特に線形代数においては、ベクトルを受け取って
別のベクトルを返す変換を考えます。

14
00:01:02,400 --> 00:01:06,680
では、同じ意味なのにどうして「関数」の代わりに
「変換」の単語を用いるのでしょうか？

15
00:01:06,720 --> 00:01:07,360
まあ、

16
00:01:07,360 --> 00:01:11,640
それは、この入出力の関係を視覚化する
方法があることを示唆するためです。

17
00:01:11,640 --> 00:01:16,840
ご存知のように、
ベクトルの関数を理解するのに最適な方法は、
運動を考えることです。

18
00:01:16,840 --> 00:01:21,080
変換が入力ベクトルから
出力ベクトルを得たとき、

19
00:01:21,080 --> 00:01:25,560
私たちは入力ベクトルが
出力ベクトルまで動く様子を想像します。

20
00:01:25,560 --> 00:01:28,240
そこで、変換全体を理解するために、

21
00:01:28,240 --> 00:01:35,040
入力ベクトルになり得るもの全てが
それに対応する出力ベクトルへと移動する様子を
想像します。

22
00:01:35,040 --> 00:01:39,440
全てのベクトルを、それぞれが矢印のまま
一度に考えるのは本当に混乱します。

23
00:01:39,440 --> 00:01:43,580
なので、前回の動画で述べた通り、良い考え方は

24
00:01:43,580 --> 00:01:47,920
ベクトルを矢印ではなくその終点が指す点として
概念化することです。

25
00:01:47,920 --> 00:01:53,240
この方法で全ての入力ベクトルを
出力ベクトルに変換することを考えると、

26
00:01:53,240 --> 00:01:57,140
空間の全ての点が別の点に移動する様子が見えます。

27
00:01:57,160 --> 00:01:59,560
二次元の変換の場合には、

28
00:01:59,560 --> 00:02:02,900
変換全体の「形」を感じやすくするために、

29
00:02:02,900 --> 00:02:06,500
無限に並んだ格子上の点で
これをやるのが好きです。

30
00:02:06,500 --> 00:02:09,460
時々、背景に元の格子を
残しておくこともあります。

31
00:02:09,460 --> 00:02:14,900
終了時の様子を開始時の様子と比較できるように
するために。

32
00:02:14,900 --> 00:02:18,940
種々の変換、空間の全ての点を動かすものは、

33
00:02:18,940 --> 00:02:20,480
見ての通り、美しいです。

34
00:02:20,480 --> 00:02:21,760
見ての通り、美しいです。

35
00:02:21,760 --> 00:02:25,520
これは、空間自身を潰したり
変形させているような感じがします。

36
00:02:25,520 --> 00:02:30,420
想像の通り、
任意の変換はかなり複雑に見えることもありますが、

37
00:02:30,420 --> 00:02:34,580
幸いにも、線形代数の変換は特殊なものに
制限されています。

38
00:02:34,580 --> 00:02:39,060
理解するのが容易な、「線形」変換と呼ばれます。

39
00:02:39,060 --> 00:02:43,500
視覚的には、二つの性質をもつ変換を
線形と呼びます：

40
00:02:43,500 --> 00:02:47,540
全ての直線が
曲がったりせず直線のままであること、

41
00:02:47,560 --> 00:02:50,680
そして、原点は空間に固定されていること。

42
00:02:50,680 --> 00:02:56,060
例えば、これは全ての線が曲がってしまっているので
線形ではありません。

43
00:02:56,060 --> 00:02:58,880
そして、これは直線をまっすぐに維持していますが、

44
00:02:58,880 --> 00:03:02,640
原点を動かしているので線形変換ではありません。

45
00:03:02,640 --> 00:03:06,140
これは原点を固定して、
直線もまっすぐに維持しているかのように見えます。

46
00:03:06,140 --> 00:03:09,340
しかしそれは、水平あるいは鉛直な格子線しか
表示していないからです。

47
00:03:09,360 --> 00:03:16,780
対角線の動きを見れば、
これが線形ではないことは明らかです。

48
00:03:16,780 --> 00:03:23,440
一般的には、線形変換は格子線を
平行かつ等間隔に維持するものと考えます。

49
00:03:23,440 --> 00:03:28,100
原点まわりの回転のような線形変換は、
考えるのが簡単です。

50
00:03:28,120 --> 00:03:32,220
他のものは、
言葉で説明するには少しトリッキーです。

51
00:03:32,240 --> 00:03:35,940
それでは、これらの変換を数値的に表現するには
どうすればいいでしょうか？

52
00:03:35,940 --> 00:03:40,120
例えば、このトピックを動画で説明するために、
プログラミングでアニメーションを
作ることになったとしたら、

53
00:03:40,120 --> 00:03:44,260
ベクトルの座標を入力したら
変換先のベクトルの座標を出力してくれるように、

54
00:03:44,260 --> 00:03:48,480
コンピュータにどんな式を
与えればいいのでしょうか？

55
00:03:48,480 --> 00:03:54,840
実は、2つの基底ベクトル、
i ベクトルと j ベクトルの行き先だけを
記録しておけばよいのです。

56
00:03:54,840 --> 00:03:57,460
他の全てのベクトルはそこから計算できます。

57
00:03:57,460 --> 00:04:01,860
例えば、座標が (-1, 2) のベクトル v を考えます。

58
00:04:01,860 --> 00:04:09,040
つまり、i ベクトルの-1倍と
j ベクトルの2倍との和に等しいベクトルです。

59
00:04:09,040 --> 00:04:13,320
これに何かしらの変換を適用して
3つのベクトルの行き先を調べると、

60
00:04:13,320 --> 00:04:19,120
格子線が平行かつ等間隔のままという性質は
本当に重要な結果をもたらします。

61
00:04:19,120 --> 00:04:26,000
v の行き先は、i ベクトルの行き先の-1倍
+ j ベクトルの行き先の2倍なのです。

62
00:04:26,000 --> 00:04:30,480
言い換えれば、i ベクトルと j ベクトルの
特定の線形結合から出発し、

63
00:04:30,480 --> 00:04:35,520
それら2つのベクトルの行き先の
同じ線形結合に移ったのです。

64
00:04:35,520 --> 00:04:41,420
これは、i ベクトルと j ベクトルの行き先だけで
v がどこに行くべきか推定できることを意味します。

65
00:04:41,420 --> 00:04:44,900
背景に元の格子を残しておいたのは
このためです。

66
00:04:44,900 --> 00:04:51,500
この線形変換においては、i ベクトルは
座標 (1, -2) に移り、

67
00:04:51,500 --> 00:04:55,900
j ベクトルはx軸に乗って座標 (3, 0) に移る
ことがわかります。

68
00:04:55,900 --> 00:05:00,340
これは、(-1) (i ベクトル) + 2 (j ベクトル)
で表されるベクトルは

69
00:05:00,340 --> 00:05:07,040
(-1) 倍のベクトル (1, -2) + 2倍のベクトル (3, 0)
に行くことを意味します。

70
00:05:07,040 --> 00:05:14,540
全て足し合わせれば、
行き先はベクトル (5, 2)であると推定できます。

71
00:05:14,540 --> 00:05:18,520
ここはかなり重要なので、
一度立ち止まって熟考してみることをお勧めします。

72
00:05:18,520 --> 00:05:22,080
今、私は完全な変換の様子を見せていますが、

73
00:05:22,080 --> 00:05:25,840
v が座標 (5, 2) を持っていることしか
見えないかもしれません。

74
00:05:25,840 --> 00:05:30,960
しかし、ここで素晴らしいのは、
これがあらゆるベクトルの行き先を推定する技術を
提供していることです。

75
00:05:30,960 --> 00:05:34,920
i ベクトルと j ベクトルの行き先を記録しておけば、

76
00:05:34,920 --> 00:05:38,560
変換自体を見る必要はないのです。

77
00:05:38,560 --> 00:05:42,200
より一般的に、座標 (x, y) のベクトルを考えます。

78
00:05:42,200 --> 00:05:47,400
このベクトルの行き先は、i ベクトルの行き先である
ベクトル (1, -2) の x 倍に、

79
00:05:47,400 --> 00:05:51,960
j ベクトルの行き先である
ベクトル (3, 0) の y 倍を足したものになります。

80
00:05:51,960 --> 00:05:58,900
その和をとると、その行き先が
(1x+3y, -2x+0y) であることが分かります。

81
00:05:58,900 --> 00:06:04,940
任意のベクトルが与えられたら、この式で
そのベクトルの行き先が分かります。

82
00:06:04,940 --> 00:06:06,380
これはつまり、

83
00:06:06,380 --> 00:06:12,220
2次元の線形変換はちょうど4つの数字で
完全に記述できるということです。

84
00:06:12,220 --> 00:06:14,340
i ベクトルの行き先である2次元の座標、

85
00:06:14,340 --> 00:06:17,020
そして j ベクトルの行き先である 2 次元の座標です。

86
00:06:17,020 --> 00:06:18,400
クールでしょう？

87
00:06:18,400 --> 00:06:22,220
ふつう、これらの座標は 2×2 の数の格子に並べられ、

88
00:06:22,220 --> 00:06:24,140
「2×2行列」と呼ばれます。

89
00:06:24,140 --> 00:06:30,460
その各行は、i ベクトルと j ベクトル
それぞれのの行き先である
2つの特別なベクトルだと解釈できます。

90
00:06:30,460 --> 00:06:34,040
線形変換を記述した2×2行列と
いくつかのベクトルを与えられ、

91
00:06:34,040 --> 00:06:35,660
線形変換を記述した2×2行列と
ベクトルを与えられ、

92
00:06:35,660 --> 00:06:40,280
その線形変換がそのベクトルを
どこに移すか知りたいときは、

93
00:06:40,280 --> 00:06:42,520
ベクトルの座標を取り、

94
00:06:42,520 --> 00:06:48,120
行列の対応する列に掛け、
得られたものを足し合わせます。

95
00:06:48,120 --> 00:06:54,900
これは、新たな基底ベクトルのスカラー倍を
足し合わせるという考えに対応します。

96
00:06:54,900 --> 00:06:57,580
最も一般的な場合ではどう見えるか見てみましょう。

97
00:06:57,580 --> 00:07:01,100
行列の要素を a, b, c, d として。

98
00:07:01,100 --> 00:07:04,940
この行列は、線形変換を記述するのに必要な情報を
まとめただけのものであることに注意してください。

99
00:07:04,940 --> 00:07:06,600
この行列は、線形変換を記述するのに必要な情報を
まとめただけのものであることに注意してください。

100
00:07:06,600 --> 00:07:09,820
最初の列 (a, c) は

101
00:07:09,820 --> 00:07:12,440
最初の基底ベクトルの行き先で、

102
00:07:12,440 --> 00:07:17,500
そして、第2列 (b, d) は、
2番目の基底ベクトルの行き先です。

103
00:07:17,500 --> 00:07:22,020
この線形変換をベクトル (x, y) に適用したら、
何が得られるでしょうか？

104
00:07:22,020 --> 00:07:22,820
まあ、

105
00:07:22,820 --> 00:07:28,120
それは x (a, c) + y (b, d) になるでしょう。

106
00:07:28,120 --> 00:07:34,260
これをまとめると、ベクトル
(ax+by, cx+dy) が得られます。

107
00:07:34,260 --> 00:07:37,940
これを行列とベクトルの積として定義できます。

108
00:07:37,940 --> 00:07:40,000
関数のように、
行列をベクトルの左側に置いたときに。

109
00:07:40,000 --> 00:07:41,560
関数のように、
行列をベクトルの左側に置いたときに。

110
00:07:41,560 --> 00:07:43,820
そして、これは高校生に
暗記してもらうこともできます。

111
00:07:43,820 --> 00:07:48,140
これが直感的に感じられる重要な部分を
見せることなく。

112
00:07:48,140 --> 00:07:48,740
だけど、

113
00:07:48,740 --> 00:07:50,600
これらの列を基底ベクトルの行き先と考え、

114
00:07:50,600 --> 00:07:53,660
これらの列を基底ベクトルの行き先と考え、

115
00:07:53,660 --> 00:07:54,980
計算結果をそれらのベクトルの
適切な線形結合だと考えた方が、
楽しくはありませんか？

116
00:07:54,980 --> 00:08:00,880
計算結果をそれらのベクトルの
適切な線形結合だと考えた方が、
楽しくはありませんか？

117
00:08:00,880 --> 00:08:04,340
いくつかの線形変換を行列で記述してみましょう。

118
00:08:04,340 --> 00:08:05,280
例えば、

119
00:08:05,280 --> 00:08:09,260
空間全体を反時計回りに90度回転させると、

120
00:08:09,260 --> 00:08:14,100
i ベクトルは座標 (0, 1) に、

121
00:08:14,100 --> 00:08:18,040
j ベクトルは座標 (-1, 0) に移ります。

122
00:08:18,040 --> 00:08:23,220
よって、最終的に得られる行列は
列 (0, 1), (-1, 0) を持っています。

123
00:08:23,220 --> 00:08:26,720
90°回転した後、
任意のベクトルがどうなるかを知るには、

124
00:08:26,720 --> 00:08:31,500
単にその座標にこの行列を掛ければ良いのです。

125
00:08:31,500 --> 00:08:34,920
ここに、「せん断」と呼ばれる
面白い変換があります。

126
00:08:34,920 --> 00:08:37,080
ここでは、i ベクトルは固定されたままで、

127
00:08:37,080 --> 00:08:39,700
従って行列の最初の列は (1, 0) です。

128
00:08:39,700 --> 00:08:43,280
しかし、j ベクトルは座標 (1, 1) に移動します。

129
00:08:43,280 --> 00:08:46,140
これが行列の2列目になります。

130
00:08:46,140 --> 00:08:48,000
そして、もう冗長かもしれませんが、

131
00:08:48,000 --> 00:08:50,900
せん断が与えられたベクトルをどう変換するか
考えることは、

132
00:08:50,900 --> 00:08:55,800
そのベクトルにこの行列を掛けることになります。

133
00:08:55,800 --> 00:08:57,660
別の方向から考えてみるとしましょう。

134
00:08:57,660 --> 00:09:01,860
行列から始めます。たとえば、列は
(1, 2), (3, 1) だとしましょう。

135
00:09:01,860 --> 00:09:04,840
その変換がどのように見えるか推測します。

136
00:09:04,840 --> 00:09:08,380
ちょっと立ち止まって、想像できるか
試してみてください。

137
00:09:08,380 --> 00:09:09,620
これを行う1つの方法は、

138
00:09:09,620 --> 00:09:12,760
まず i ベクトルを (1, 2) に移動させ、

139
00:09:12,760 --> 00:09:15,360
次に、j ベクトルを (3, 1) に移動させることです。

140
00:09:15,360 --> 00:09:17,820
残りの空間は、
格子戦を平行で等間隔に保つように動かします。

141
00:09:17,820 --> 00:09:21,860
残りの空間は、
格子戦を平行かつ等間隔に保つように動かします。

142
00:09:21,860 --> 00:09:25,960
i ベクトルと j ベクトルの行き先が
線形従属だった場合、

143
00:09:25,960 --> 00:09:27,820
前回の動画を思い出してくださいね、

144
00:09:27,820 --> 00:09:30,700
一方が他方のスカラー倍であることを意味します。

145
00:09:30,700 --> 00:09:34,840
これは、この線形変換が二次元空間の全てを
これら2つのベクトルが収まる直線上に、

146
00:09:34,840 --> 00:09:37,560
これは、この線形変換が二次元空間の全てを
これら2つのベクトルが収まる直線上に、

147
00:09:37,560 --> 00:09:39,520
言い換えれば
これら2つの線形従属なベクトルのスパンに、
潰されてしまうことを意味します。

148
00:09:39,520 --> 00:09:44,940
言い換えれば
これら2つの線形従属なベクトルのスパンに、
潰してしまうことを意味します。

149
00:09:44,940 --> 00:09:46,800
まとめると、線形変換は空間を動かす手段です。

150
00:09:46,800 --> 00:09:48,600
まとめると、線形変換は空間を動かす手段です。

151
00:09:48,600 --> 00:09:51,700
格子線を平行かつ等間隔に保ち、
原点は固定するような。

152
00:09:51,700 --> 00:09:54,380
格子線を平行かつ等間隔に保ち、
原点は固定するような。

153
00:09:54,380 --> 00:09:55,380
嬉しいことに、

154
00:09:55,380 --> 00:09:59,000
これらの変換は、ほんの一握りの数字を使うことで
記述することができます。

155
00:09:59,000 --> 00:10:02,400
すなわち、各基底ベクトルの行き先の座標です。

156
00:10:02,400 --> 00:10:06,180
行列は、私たちにこれらの変換を記述するための言語を与えます。

157
00:10:06,180 --> 00:10:09,000
列でその座標を表すことで。

158
00:10:09,000 --> 00:10:12,000
そして、行列とベクトルの積は単に、

159
00:10:12,000 --> 00:10:15,340
与えられたベクトルに変換が何をするかを
計算する方法です。

160
00:10:15,340 --> 00:10:16,900
ここで覚えておいてほしいことは、

161
00:10:16,900 --> 00:10:19,000
行列を見れば、
それを空間の特定の変換として解釈できる
ということです。

162
00:10:19,000 --> 00:10:22,600
行列を見れば、
それを空間の特定の変換として解釈できる
ということです。

163
00:10:22,600 --> 00:10:24,500
この考え方を本当に消化できれば、

164
00:10:24,500 --> 00:10:27,700
あなたは線形代数を深く理解するのに最適な位置にいます。

165
00:10:27,700 --> 00:10:29,680
現れるほとんど全てのトピックが、

166
00:10:29,680 --> 00:10:32,280
行列の積から行列式に、

167
00:10:32,280 --> 00:10:34,280
基底の変換、固有値まで…

168
00:10:34,280 --> 00:10:36,760
これらのすべてが理解しやすくなります。

169
00:10:36,760 --> 00:10:41,420
ひとたび行列を空間の変換だと考えれば。

170
00:10:41,420 --> 00:10:43,180
すぐに、次の動画で

171
00:10:43,180 --> 00:10:47,620
2つの行列を掛け合わせることについて話します。
それでは！

