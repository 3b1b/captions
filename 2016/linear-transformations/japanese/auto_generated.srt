1
00:00:12,477 --> 00:00:13,480
こんにちは、みなさん！

2
00:00:13,480 --> 00:00:16,016
線形代数の他のすべてのトピックがピンとくるトピックを

3
00:00:16,016 --> 00:00:18,270
1 つだけ選 択しなければならないとしたら、学生

4
00:00:18,270 --> 00:00:19,773
が初めて線形代数を学ぶときにあ

5
00:00:19,773 --> 00:00:22,028
まりにも頻繁に学習されなくなるトピックは、このト

6
00:00:22,028 --> 00:00:22,780
ピックでしょう。

7
00:00:22,780 --> 00:00:27,160
線形変換の考え方と行列との関係。

8
00:00:27,160 --> 00:00:29,290
このビデオでは、これらの変換が 2

9
00:00:29,290 --> 00:00:31,658
次元の場合にどのように見えるか、および

10
00:00:31,658 --> 00:00:34,499
それらが行列ベクトルの乗算の概念にどのように関連

11
00:00:34,499 --> 00:00:35,920
するかに焦点を当てます。

12
00:00:35,920 --> 00:00:39,762
特に、暗記に頼らない行列ベクトルの乗

13
00:00:39,762 --> 00:00:43,200
算の考え方を紹介したいと思います。

14
00:00:43,200 --> 00:00:48,000
まず、線形変換という用語を解析してみましょう。

15
00:00:48,000 --> 00:00:49,214
トランスフォーメーションとは、本質

16
00:00:49,214 --> 00:00:50,500
的には機能を意味する派手な言葉です。

17
00:00:50,500 --> 00:00:54,480
入力を受け取り、それぞれに対して出力を吐き出すものです。

18
00:00:54,480 --> 00:00:58,540
具体的には、線形代数のコンテキストでは、あるベクトルを取り込

19
00:00:58,540 --> 00:01:02,600
んで別のベクトルを吐き出す変換について考えるのが好きです。

20
00:01:02,600 --> 00:01:04,607
では、同じ意味であるのに、なぜ関数では

21
00:01:04,607 --> 00:01:06,720
なく変換という言葉を使うのでしょうか?

22
00:01:06,720 --> 00:01:09,249
そうですね、この入出力関係を視覚化す

23
00:01:09,249 --> 00:01:11,920
るための特定の方法を示唆するためです。

24
00:01:11,920 --> 00:01:14,460
ベクトルの機能を理解するための優れ

25
00:01:14,460 --> 00:01:17,000
た方法は、動きを利用することです。

26
00:01:17,000 --> 00:01:21,572
変換によって入力ベクトルが出力ベクトルに変換される場合、そ

27
00:01:21,572 --> 00:01:25,840
の入力ベクトルが出力ベクトルに移動することを想像します。

28
00:01:25,840 --> 00:01:28,946
次に、変換を全体として理解するために、考えられる

29
00:01:28,946 --> 00:01:32,053
すべての入力ベクトルが対 応する出力ベクトルに移

30
00:01:32,053 --> 00:01:35,160
動するのを観察することを想像するかもしれません。

31
00:01:35,160 --> 00:01:37,501
すべてのベクトルを一度に、それぞれを

32
00:01:37,501 --> 00:01:39,720
矢印として考えるのは非常に面倒です。

33
00:01:39,720 --> 00:01:42,504
前回のビデオで述べたように、優れたトリックは

34
00:01:42,504 --> 00:01:45,288
、各ベクトルを矢印では なく単一の点、つまり

35
00:01:45,288 --> 00:01:48,200
その先端が位置する点として概念化することです。

36
00:01:48,200 --> 00:01:51,206
このようにして、考えられるすべての入力ベクトルを何

37
00:01:51,206 --> 00:01:54,213
らかの出力ベクトルに変換す ることを考えるために、

38
00:01:54,213 --> 00:01:57,340
空間内のすべての点が他の点に移動するのを観察します。

39
00:01:57,340 --> 00:02:00,349
2 次元での変換の場合、変換の全体的な形

40
00:02:00,349 --> 00:02:03,359
状をよりよく理解する ために、無限グリッ

41
00:02:03,359 --> 00:02:06,520
ド上のすべての点でこれを行うのが好きです。

42
00:02:06,520 --> 00:02:09,311
また、開始位置に対するすべての終了位置を追跡

43
00:02:09,311 --> 00:02:12,102
しやすくするために、グ リッドのコピーをバッ

44
00:02:12,102 --> 00:02:15,020
クグラウンドに保存しておきたい場合もあります。

45
00:02:15,020 --> 00:02:18,644
空間内のすべての点を移動するさまざまな変換

46
00:02:18,644 --> 00:02:21,940
の効果は、認められるとおり、美しいです。

47
00:02:21,940 --> 00:02:25,700
空間自体を押しつぶして変形させるような感覚を与えます。

48
00:02:25,700 --> 00:02:28,060
ただし、ご想像のとおり、任意の変換

49
00:02:28,060 --> 00:02:30,560
は非常に複雑に見える場合があります。

50
00:02:30,560 --> 00:02:35,155
しかし幸いなことに、線形代数は、線形変換と呼ばれる、

51
00:02:35,155 --> 00:02:39,580
より理解しやすい特殊な種類の変換に限定されています。

52
00:02:39,580 --> 00:02:41,639
視覚的に言えば、変換に 2 つのプ

53
00:02:41,639 --> 00:02:43,820
ロパティがある場合、変換は線形です。

54
00:02:43,820 --> 00:02:47,199
すべての線は曲がらずに線のままでなければならず、

55
00:02:47,199 --> 00:02:50,720
原点は所定の位置に固定されていなければなりません。

56
00:02:50,720 --> 00:02:53,635
たとえば、ここでは線がすべて曲線になっ

57
00:02:53,635 --> 00:02:56,260
ているため、線形変換ではありません。

58
00:02:56,260 --> 00:02:59,596
そして、ここにあるものは、線を真っ直ぐに保ちます

59
00:02:59,596 --> 00:03:02,800
が、原点を移動するため、線形変換ではありません。

60
00:03:02,800 --> 00:03:05,100
これは原点を固定しており、線がまっすぐに保たれてい

61
00:03:05,100 --> 00:03:07,400
るように見えるかもしれま せんが、それは水平と垂直

62
00:03:07,400 --> 00:03:09,700
のグリッド線だけを表示しているだけであるためです。

63
00:03:09,700 --> 00:03:13,383
対角線がどうなるかを見ると、その線がすべて曲線に

64
00:03:13,383 --> 00:03:16,920
なるため、まったく直線ではないことがわかります。

65
00:03:16,920 --> 00:03:20,479
一般に、線形変換はグリッド線を平行かつ等

66
00:03:20,479 --> 00:03:23,700
間隔に保つことと考える必要があります。

67
00:03:23,700 --> 00:03:25,925
原点を中心とした回転など、一部

68
00:03:25,925 --> 00:03:28,300
の線形変換は考えるのが簡単です。

69
00:03:28,300 --> 00:03:32,300
言葉で説明するのが少し難しいものもあります。

70
00:03:32,300 --> 00:03:34,200
では、これらの変化を数値的に説明す

71
00:03:34,200 --> 00:03:36,100
るにはどうすればよいでしょうか?

72
00:03:36,100 --> 00:03:39,170
たとえば、トピックを教えるビデオを作成するためにアニメー

73
00:03:39,170 --> 00:03:42,240
ションをプログラミ ングしている場合、コンピュータにベク

74
00:03:42,240 --> 00:03:44,433
トルの座標を与えると、そのベクトルが到

75
00:03:44,433 --> 00:03:47,503
達する位置の座標が得られるように、どのような式をコンピュ

76
00:03:47,503 --> 00:03:48,600
ータに与えますか?

77
00:03:48,600 --> 00:03:50,937
2 つの基底ベクトル、i-hat と

78
00:03:50,937 --> 00:03:53,151
j-hat、それぞれの着地がどこに

79
00:03:53,151 --> 00:03:56,103
あるかを記録するだけでよく、その他すべてはそこか

80
00:03:56,103 --> 00:03:57,580
ら続くことがわかります。

81
00:03:57,580 --> 00:04:01,241
たとえば、座標が負の 1、2 であるベクトル

82
00:04:01,241 --> 00:04:05,220
v を考えます。これは、負の 1 倍 i-hat

83
00:04:05,220 --> 00:04:09,200
と 2 倍 j-hat に等しいことを意味します。

84
00:04:09,200 --> 00:04:11,381
何らかの変換を実行して、これら 3

85
00:04:11,381 --> 00:04:14,290
つのベクトルすべてがどこに行くのかを追跡すると

86
00:04:14,290 --> 00:04:17,563
、グリッド線が平行かつ等間隔に保たれるという特性が非常

87
00:04:17,563 --> 00:04:19,260
に重要な結果をもたらします。

88
00:04:19,260 --> 00:04:21,015
v が着地する場所は、i-hat

89
00:04:21,015 --> 00:04:23,391
が着地したベクトルの 1 倍に、 j-hat

90
00:04:23,391 --> 00:04:26,180
が着地したベクトルの 2 倍を加えた負の値になります。

91
00:04:26,180 --> 00:04:29,360
言い換えれば、それは i-hat と j-hat

92
00:04:29,360 --> 00:04:32,540
の特定の線形結合として始 まり、最終的にはこれら

93
00:04:32,540 --> 00:04:35,720
2 つのベクトルが着地した同じ線形結合になります。

94
00:04:35,720 --> 00:04:37,440
これは、i-hat と j-hat

95
00:04:37,440 --> 00:04:39,446
がそれぞれ着地する場所のみに基づいて v

96
00:04:39,446 --> 00:04:41,740
がどこに行くべきかを推測できることを意味します。

97
00:04:41,740 --> 00:04:43,480
これが、私が元のグリッドのコピーをバックグ

98
00:04:43,480 --> 00:04:45,220
ラウンドに保持しておくのが好きな理由です。

99
00:04:45,220 --> 00:04:48,437
ここに示す変換では、i-hat が座標

100
00:04:48,437 --> 00:04:52,138
1、負の 2 に着地し、j -hat が座標

101
00:04:52,138 --> 00:04:56,000
3、0 の x 軸に着地することが読み取れます。

102
00:04:56,000 --> 00:04:58,755
これは、負の 1 i-hat と j-hat

103
00:04:58,755 --> 00:05:01,749
の 2 倍で表されるベクトルは、最終的にベクトル

104
00:05:01,749 --> 00:05:04,624
1 の負の 1 倍、負の 2 プラス ベクトル

105
00:05:04,624 --> 00:05:07,260
3 の 2 倍、0 になることを意味します。

106
00:05:07,260 --> 00:05:10,617
これらをすべて合計すると、ベクトル

107
00:05:10,617 --> 00:05:14,720
5、2 に着地する必要があると推測できます。

108
00:05:14,720 --> 00:05:16,350
これは非常に重要なことなので、立ち止

109
00:05:16,350 --> 00:05:17,980
まって熟考するのに良いポイントです。

110
00:05:17,980 --> 00:05:22,133
ここで、実際に完全な変換を示していることを考えると、

111
00:05:22,133 --> 00:05:25,980
v の座標が 5、2 であることがわかるはずです。

112
00:05:25,980 --> 00:05:29,056
しかし、ここでの素晴らしい点は、i-hat と

113
00:05:29,056 --> 00:05:32,261
j-hat がそれ ぞれどこに着地するか記録があれ

114
00:05:32,261 --> 00:05:34,697
ば、変換自体を観察する必要がなく、ベ

115
00:05:34,697 --> 00:05:37,902
クトルがどこに着地するかを推定するテクニックが得ら

116
00:05:37,902 --> 00:05:38,800
れることです。

117
00:05:38,800 --> 00:05:42,000
より一般的な座標 x と y を使用してベクト

118
00:05:42,000 --> 00:05:45,479
ルを記述すると、i-hat が着地するベクトルの

119
00:05:45,479 --> 00:05:48,401
x 倍、1、負の 2、および j-hat

120
00:05:48,401 --> 00:05:52,020
が着地するベクトルの y 倍、3、0 に着地します。

121
00:05:52,020 --> 00:05:55,790
この合計を実行すると、1x プラス 3y、マイナス

122
00:05:55,790 --> 00:05:58,980
2x プラス 0y になることがわかります。

123
00:05:58,980 --> 00:06:02,014
任意のベクトルを与えると、この公式を使用してそ

124
00:06:02,014 --> 00:06:05,180
のベクトルがどこに着地するかを教えてもらえます。

125
00:06:05,180 --> 00:06:07,342
これらすべてが言っているのは、2

126
00:06:07,342 --> 00:06:10,269
次元の線形変換は、i-hat が着地する 2

127
00:06:10,269 --> 00:06:13,195
つの座標と j-hat が着地する 2 つの

128
00:06:13,195 --> 00:06:16,122
座標という 4 つの数値だけで完全に記述できる

129
00:06:16,122 --> 00:06:17,140
ということです。

130
00:06:17,140 --> 00:06:18,580
それはクールじゃないですか？

131
00:06:18,580 --> 00:06:21,294
これらの座標を 2x2 行列と呼ばれる数値の

132
00:06:21,294 --> 00:06:24,245
2x2 グリッドにパッ ケージ化するのが一般的です

133
00:06:24,245 --> 00:06:26,960
。ここで、列を i-hat と j-ha t

134
00:06:26,960 --> 00:06:29,911
がそれぞれ着地する 2 つの特別なベクトルとして解

135
00:06:29,911 --> 00:06:30,620
釈できます。

136
00:06:30,620 --> 00:06:35,118
線形変換を記述する 2x2 行列と特定のベクトルが与

137
00:06:35,118 --> 00:06:39,616
えられ、その線形変換がそのベクトルをどこに取るかを知

138
00:06:39,616 --> 00:06:44,114
りたい場合は、ベクトルの座標を取得し、それらを行列の

139
00:06:44,114 --> 00:06:48,280
対応する列で乗算します。得られたものを合計します。

140
00:06:48,280 --> 00:06:50,744
これは、新しい基底ベクトルのスケーリングされ

141
00:06:50,744 --> 00:06:53,320
たバージョンを追加するという考えに対応します。

142
00:06:53,320 --> 00:06:57,355
行列にエントリ A、B、C、D がある最も一般的な

143
00:06:57,355 --> 00:07:01,080
ケースでこれがどのようになるかを見てみましょう。

144
00:07:01,080 --> 00:07:03,992
この行列は、線形変換を記述するために必要な情報をパッケ

145
00:07:03,992 --> 00:07:06,800
ージ化する単なる方法であることを覚えておいてください。

146
00:07:06,800 --> 00:07:10,420
最初の列 AC を最初の基底ベクトルが到着する場所として

147
00:07:10,420 --> 00:07:12,747
解釈し、2 番目の列 BD を 2

148
00:07:12,747 --> 00:07:16,367
番目の基底ベクトルが到着する場所として解釈することを常に

149
00:07:16,367 --> 00:07:17,660
忘れないでください。

150
00:07:17,660 --> 00:07:19,700
この変換をベクトル x、y に適用

151
00:07:19,700 --> 00:07:21,740
すると、何が得られるでしょうか?

152
00:07:21,740 --> 00:07:28,260
そうですね、AC の x 倍と BD の y 倍になります。

153
00:07:28,260 --> 00:07:31,099
これをまとめると、ベクトル Ax

154
00:07:31,099 --> 00:07:34,440
と By、Cx と Dy が得られます。

155
00:07:34,440 --> 00:07:38,256
行列を関数のようにベクトルの左側に置くと、これを行

156
00:07:38,256 --> 00:07:41,780
列とベクトルの乗算として定義することもできます。

157
00:07:41,780 --> 00:07:45,191
そうすれば、直感的に感じられる重要な部分を見せ

158
00:07:45,191 --> 00:07:48,460
ずに、高校生にこれを暗記させることができます。

159
00:07:48,460 --> 00:07:52,816
しかし、これらの列を基底ベクトルの変換バージョン

160
00:07:52,816 --> 00:07:56,998
として考え、その結果をそれらのベクトルの適切な

161
00:07:56,998 --> 00:08:01,180
線形結合として考える方が楽しいと思いませんか?

162
00:08:01,180 --> 00:08:02,920
行列を使用していくつかの線形変換

163
00:08:02,920 --> 00:08:04,660
を記述する練習をしてみましょう。

164
00:08:04,660 --> 00:08:08,522
たとえば、空間全体を反時計回りに 90

165
00:08:08,522 --> 00:08:12,385
度回転すると、I ハットは座標 0、1

166
00:08:12,385 --> 00:08:18,180
に着地し、J ハットは座標のマイナス 1、0 に着地します。

167
00:08:18,180 --> 00:08:20,969
したがって、最終的に得られる行列の列は

168
00:08:20,969 --> 00:08:23,340
0、1、負の 1、0 になります。

169
00:08:23,340 --> 00:08:27,680
90 度回転したベクトルに何が起こるかを調べる

170
00:08:27,680 --> 00:08:31,660
には、その座標にこの行列を乗算するだけです。

171
00:08:31,660 --> 00:08:33,400
ここでは、ハサミと呼ばれる特別な名

172
00:08:33,400 --> 00:08:35,140
前が付いた楽しい変身を紹介します。

173
00:08:35,140 --> 00:08:38,819
ここでは、I ハットは固定されたままであるため、行列

174
00:08:38,819 --> 00:08:42,498
の最初の列は 1, 0 で すが、J ハットは座標

175
00:08:42,498 --> 00:08:46,320
1, 1 に移動し、それが行列の 2 列目になります。

176
00:08:46,320 --> 00:08:49,507
そして、ここで冗長になる危険がありますが、せん断が与え

177
00:08:49,507 --> 00:08:52,694
られたベクトルをどのように変 換するかを理解することは

178
00:08:52,694 --> 00:08:56,000
、結局、この行列とそのベクトルを乗算することになります。

179
00:08:56,000 --> 00:09:00,537
逆に、列 1、2、および 3、1 の行列から始めて

180
00:09:00,537 --> 00:09:04,900
、その変換がどのようになるかを推定したいとします。

181
00:09:04,900 --> 00:09:08,740
少し立ち止まって、想像できるかどうかを確認してください。

182
00:09:08,740 --> 00:09:12,990
これを行う 1 つの方法は、まず I ハットを 1、2

183
00:09:12,990 --> 00:09:16,027
に移動し、次に J ハットを 3 、1

184
00:09:16,027 --> 00:09:20,430
に移動し、常にグリッド線が平行かつ等間隔になるように残りの

185
00:09:20,430 --> 00:09:22,100
スペースを移動します。

186
00:09:22,100 --> 00:09:25,362
I ハットと J ハットが着地するベクトルが線形依存

187
00:09:25,362 --> 00:09:27,871
している場合、これは、前回のビデオを思

188
00:09:27,871 --> 00:09:31,133
い出していただけると、一方が他方のスケーリングされた

189
00:09:31,133 --> 00:09:34,270
バージョンであることを意味し、線形変換 によって

190
00:09:34,270 --> 00:09:37,532
2D 空間全体が 2D 空間に押しつぶされることを意

191
00:09:37,532 --> 00:09:40,794
味します。これら 2 つのベ クトルが位置するライン

192
00:09:40,794 --> 00:09:43,428
。これら 2 つの線形依存ベクトルの 1

193
00:09:43,428 --> 00:09:45,060
次元スパンとも呼ばれます。

194
00:09:45,060 --> 00:09:49,830
要約すると、線形変換は、グリッド線が平行かつ等間隔に保たれ、

195
00:09:49,830 --> 00:09:54,600
原点が固定されたままになるように空間内を移動する方法です。

196
00:09:54,600 --> 00:09:58,946
これらの変換は、少数の数値、つまり各基底ベクトル

197
00:09:58,946 --> 00:10:03,120
が着地する座標のみを使用して簡単に記述できます。

198
00:10:03,120 --> 00:10:07,354
行列は、これらの変換を記述するための言語を提供します。列は

199
00:10:07,354 --> 00:10:11,447
それらの座標を表し、行列とベクトルの乗算は、その変換が特

200
00:10:11,447 --> 00:10:15,400
定のベクトルに対して何を行うかを計算する単なる方法です。

201
00:10:15,400 --> 00:10:19,216
ここで重要なのは、マトリックスを見るたびに、それを

202
00:10:19,216 --> 00:10:22,740
空間の特定の変換として解釈できるということです。

203
00:10:22,740 --> 00:10:25,430
この考え方をしっかり理解すると、線形

204
00:10:25,430 --> 00:10:27,980
代数を深く理解できるようになります。

205
00:10:27,980 --> 00:10:32,630
行列の乗算から行列式、基底の変更、固有値に至るまで、今

206
00:10:32,630 --> 00:10:37,281
後出てくるほぼすべてのトピックは、行列を空間の変換とし

207
00:10:37,281 --> 00:10:41,600
て考え始めると、より簡単に理解できるようになります。

208
00:10:41,600 --> 00:10:44,046
すぐに、次のビデオで 2 つの

209
00:10:44,046 --> 00:10:46,340
行列の乗算について説明します。

210
00:10:46,340 --> 00:10:47,340
それではまた！

211
00:10:47,340 --> 00:10:54,740
ご清覧ありがとうございました！

