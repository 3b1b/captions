1
00:00:00,000 --> 00:00:13,480
こんにちは、みなさん！

2
00:00:13,480 --> 00:00:17,160
線形代数の他のすべてのトピックがピンとくるトピックを 1 つだけ選

3
00:00:17,160 --> 00:00:21,160
択しなければならないとしたら、学生が初めて線形代数を学ぶときにあ

4
00:00:21,160 --> 00:00:22,780
まりにも頻繁に学習されなくなるトピックは、このトピックでしょう。

5
00:00:22,780 --> 00:00:27,160
線形変換の考え方と行列との関係。

6
00:00:27,160 --> 00:00:30,860
このビデオでは、これらの変換が 2 次元の場合にどのように見えるか、および

7
00:00:30,860 --> 00:00:35,920
それらが行列ベクトルの乗算の概念にどのように関連するかに焦点を当てます。

8
00:00:35,920 --> 00:00:40,320
特に、暗記に頼らない行列ベクトルの乗

9
00:00:40,320 --> 00:00:43,200
算の考え方を紹介したいと思います。

10
00:00:43,200 --> 00:00:48,000
まず、線形変換という用語を解析してみましょう。

11
00:00:48,000 --> 00:00:50,500
トランスフォーメーションとは、本質的には機能を意味する派手な言葉です。

12
00:00:50,500 --> 00:00:54,480
入力を受け取り、それぞれに対して出力を吐き出すものです。

13
00:00:54,480 --> 00:00:58,440
具体的には、線形代数のコンテキストでは、あるベクトルを取り込

14
00:00:58,440 --> 00:01:02,600
んで別のベクトルを吐き出す変換について考えるのが好きです。

15
00:01:02,600 --> 00:01:06,720
では、同じ意味であるのに、なぜ関数ではなく変換という言葉を使うのでしょうか?

16
00:01:06,720 --> 00:01:11,920
そうですね、この入出力関係を視覚化するための特定の方法を示唆するためです。

17
00:01:11,920 --> 00:01:17,000
ベクトルの機能を理解するための優れた方法は、動きを利用することです。

18
00:01:17,000 --> 00:01:22,200
変換によって入力ベクトルが出力ベクトルに変換される場合、そ

19
00:01:22,200 --> 00:01:25,840
の入力ベクトルが出力ベクトルに移動することを想像します。

20
00:01:25,840 --> 00:01:30,360
次に、変換を全体として理解するために、考えられるすべての入力ベクトルが対

21
00:01:30,360 --> 00:01:35,160
応する出力ベクトルに移動するのを観察することを想像するかもしれません。

22
00:01:35,160 --> 00:01:38,720
すべてのベクトルを一度に、それぞれを

23
00:01:38,720 --> 00:01:39,720
矢印として考えるのは非常に面倒です。

24
00:01:39,720 --> 00:01:44,040
前回のビデオで述べたように、優れたトリックは、各ベクトルを矢印では

25
00:01:44,040 --> 00:01:48,200
なく単一の点、つまりその先端が位置する点として概念化することです。

26
00:01:48,200 --> 00:01:52,160
このようにして、考えられるすべての入力ベクトルを何らかの出力ベクトルに変換す

27
00:01:52,160 --> 00:01:57,340
ることを考えるために、空間内のすべての点が他の点に移動するのを観察します。

28
00:01:57,340 --> 00:02:01,820
2 次元での変換の場合、変換の全体的な形状をよりよく理解する

29
00:02:01,820 --> 00:02:06,520
ために、無限グリッド上のすべての点でこれを行うのが好きです。

30
00:02:06,520 --> 00:02:10,260
また、開始位置に対するすべての終了位置を追跡しやすくするために、グ

31
00:02:10,260 --> 00:02:15,020
リッドのコピーをバックグラウンドに保存しておきたい場合もあります。

32
00:02:15,020 --> 00:02:19,620
空間内のすべての点を移動するさまざまな変換

33
00:02:19,620 --> 00:02:21,940
の効果は、認められるとおり、美しいです。

34
00:02:21,940 --> 00:02:25,700
空間自体を押しつぶして変形させるような感覚を与えます。

35
00:02:25,700 --> 00:02:30,560
ただし、ご想像のとおり、任意の変換は非常に複雑に見える場合があります。

36
00:02:30,560 --> 00:02:34,820
しかし幸いなことに、線形代数は、線形変換と呼ばれる、

37
00:02:34,820 --> 00:02:39,580
より理解しやすい特殊な種類の変換に限定されています。

38
00:02:39,580 --> 00:02:43,820
視覚的に言えば、変換に 2 つのプロパティがある場合、変換は線形です。

39
00:02:43,860 --> 00:02:50,720
すべての線は曲がらずに線のままでなければならず、原点は所定の位置に固定されていなければなりません。

40
00:02:50,720 --> 00:02:54,960
たとえば、ここでは線がすべて曲線になっ

41
00:02:54,960 --> 00:02:56,260
ているため、線形変換ではありません。

42
00:02:56,260 --> 00:03:00,900
そして、ここにあるものは、線を真っ直ぐに保ちます

43
00:03:00,900 --> 00:03:02,800
が、原点を移動するため、線形変換ではありません。

44
00:03:02,800 --> 00:03:06,420
これは原点を固定しており、線がまっすぐに保たれているように見えるかもしれま

45
00:03:06,420 --> 00:03:09,700
せんが、それは水平と垂直のグリッド線だけを表示しているだけであるためです。

46
00:03:09,700 --> 00:03:13,740
対角線がどうなるかを見ると、その線がすべて曲線に

47
00:03:13,740 --> 00:03:16,920
なるため、まったく直線ではないことがわかります。

48
00:03:16,920 --> 00:03:21,780
一般に、線形変換はグリッド線を平行かつ等

49
00:03:21,780 --> 00:03:23,700
間隔に保つことと考える必要があります。

50
00:03:23,700 --> 00:03:28,300
原点を中心とした回転など、一部の線形変換は考えるのが簡単です。

51
00:03:28,300 --> 00:03:32,300
言葉で説明するのが少し難しいものもあります。

52
00:03:32,300 --> 00:03:36,100
では、これらの変化を数値的に説明するにはどうすればよいでしょうか?

53
00:03:36,100 --> 00:03:40,700
たとえば、トピックを教えるビデオを作成するためにアニメーションをプログラミ

54
00:03:40,700 --> 00:03:44,900
ングしている場合、コンピュータにベクトルの座標を与えると、そのベクトルが到

55
00:03:44,900 --> 00:03:48,600
達する位置の座標が得られるように、どのような式をコンピュータに与えますか?

56
00:03:48,600 --> 00:03:53,900
2 つの基底ベクトル、i-hat と j-hat、それぞれの着地がどこに

57
00:03:53,900 --> 00:03:57,580
あるかを記録するだけでよく、その他すべてはそこから続くことがわかります。

58
00:03:57,580 --> 00:04:03,460
たとえば、座標が負の 1、2 であるベクトル v を考えます。これは、負の

59
00:04:03,460 --> 00:04:09,200
1 倍 i-hat と 2 倍 j-hat に等しいことを意味します。

60
00:04:09,200 --> 00:04:13,840
何らかの変換を実行して、これら 3 つのベクトルすべてがどこに行くのかを追跡すると

61
00:04:13,840 --> 00:04:19,260
、グリッド線が平行かつ等間隔に保たれるという特性が非常に重要な結果をもたらします。

62
00:04:19,260 --> 00:04:23,920
v が着地する場所は、i-hat が着地したベクトルの 1 倍に、

63
00:04:23,920 --> 00:04:26,180
j-hat が着地したベクトルの 2 倍を加えた負の値になります。

64
00:04:26,180 --> 00:04:30,680
言い換えれば、それは i-hat と j-hat の特定の線形結合として始

65
00:04:30,680 --> 00:04:35,720
まり、最終的にはこれら 2 つのベクトルが着地した同じ線形結合になります。

66
00:04:35,720 --> 00:04:41,740
これは、i-hat と j-hat がそれぞれ着地する場所のみに基づいて v がどこに行くべきかを推測できることを意味します。

67
00:04:41,740 --> 00:04:45,220
これが、私が元のグリッドのコピーをバックグラウンドに保持しておくのが好きな理由です。

68
00:04:45,220 --> 00:04:49,960
ここに示す変換では、i-hat が座標 1、負の 2 に着地し、j

69
00:04:49,960 --> 00:04:56,000
-hat が座標 3、0 の x 軸に着地することが読み取れます。

70
00:04:56,000 --> 00:05:00,660
これは、負の 1 i-hat と j-hat の 2 倍で表されるベクトルは、最終的にベクトル

71
00:05:00,660 --> 00:05:07,260
1 の負の 1 倍、負の 2 プラス ベクトル 3 の 2 倍、0 になることを意味します。

72
00:05:07,260 --> 00:05:14,720
これらをすべて合計すると、ベクトル 5、2 に着地する必要があると推測できます。

73
00:05:14,720 --> 00:05:17,980
これは非常に重要なことなので、立ち止まって熟考するのに良いポイントです。

74
00:05:17,980 --> 00:05:23,100
ここで、実際に完全な変換を示していることを考えると、

75
00:05:23,100 --> 00:05:25,980
v の座標が 5、2 であることがわかるはずです。

76
00:05:25,980 --> 00:05:30,260
しかし、ここでの素晴らしい点は、i-hat と j-hat がそれ

77
00:05:30,260 --> 00:05:35,580
ぞれどこに着地するか記録があれば、変換自体を観察する必要がなく、ベ

78
00:05:35,580 --> 00:05:38,800
クトルがどこに着地するかを推定するテクニックが得られることです。

79
00:05:38,800 --> 00:05:43,940
より一般的な座標 x と y を使用してベクトルを記述すると、i-hat が着地するベクトルの

80
00:05:43,940 --> 00:05:52,020
x 倍、1、負の 2、および j-hat が着地するベクトルの y 倍、3、0 に着地します。

81
00:05:52,020 --> 00:05:58,980
この合計を実行すると、1x プラス 3y、マイナス 2x プラス 0y になることがわかります。

82
00:05:58,980 --> 00:06:05,180
任意のベクトルを与えると、この公式を使用してそのベクトルがどこに着地するかを教えてもらえます。

83
00:06:05,180 --> 00:06:10,300
これらすべてが言っているのは、2 次元の線形変換は、i-hat

84
00:06:10,300 --> 00:06:15,320
が着地する 2 つの座標と j-hat が着地する 2 つの

85
00:06:15,320 --> 00:06:17,140
座標という 4 つの数値だけで完全に記述できるということです。

86
00:06:17,140 --> 00:06:18,580
それはクールじゃないですか？

87
00:06:18,620 --> 00:06:24,260
これらの座標を 2x2 行列と呼ばれる数値の 2x2 グリッドにパッ

88
00:06:24,260 --> 00:06:29,060
ケージ化するのが一般的です。ここで、列を i-hat と j-ha

89
00:06:29,060 --> 00:06:30,620
t がそれぞれ着地する 2 つの特別なベクトルとして解釈できます。

90
00:06:30,620 --> 00:06:35,780
線形変換を記述する 2x2 行列と特定のベクトルが与

91
00:06:35,780 --> 00:06:41,420
えられ、その線形変換がそのベクトルをどこに取るかを知

92
00:06:41,420 --> 00:06:46,900
りたい場合は、ベクトルの座標を取得し、それらを行列の

93
00:06:46,900 --> 00:06:48,280
対応する列で乗算します。得られたものを合計します。

94
00:06:48,280 --> 00:06:53,320
これは、新しい基底ベクトルのスケーリングされたバージョンを追加するという考えに対応します。

95
00:06:53,320 --> 00:06:59,080
行列にエントリ A、B、C、D がある最も一般的な

96
00:06:59,080 --> 00:07:01,080
ケースでこれがどのようになるかを見てみましょう。

97
00:07:01,080 --> 00:07:05,180
この行列は、線形変換を記述するために必要な情報をパッケ

98
00:07:05,180 --> 00:07:06,800
ージ化する単なる方法であることを覚えておいてください。

99
00:07:06,800 --> 00:07:11,840
最初の列 AC を最初の基底ベクトルが到着する場所として解釈し、2 番目の列 BD

100
00:07:11,840 --> 00:07:17,660
を 2 番目の基底ベクトルが到着する場所として解釈することを常に忘れないでください。

101
00:07:17,660 --> 00:07:21,740
この変換をベクトル x、y に適用すると、何が得られるでしょうか?

102
00:07:21,740 --> 00:07:28,260
そうですね、AC の x 倍と BD の y 倍になります。

103
00:07:28,260 --> 00:07:34,440
これをまとめると、ベクトル Ax と By、Cx と Dy が得られます。

104
00:07:34,440 --> 00:07:38,980
行列を関数のようにベクトルの左側に置くと、これを行

105
00:07:38,980 --> 00:07:41,780
列とベクトルの乗算として定義することもできます。

106
00:07:41,780 --> 00:07:45,300
そうすれば、直感的に感じられる重要な部分を見せ

107
00:07:45,300 --> 00:07:48,460
ずに、高校生にこれを暗記させることができます。

108
00:07:48,460 --> 00:07:52,580
しかし、これらの列を基底ベクトルの変換バージョン

109
00:07:52,580 --> 00:07:57,860
として考え、その結果をそれらのベクトルの適切な

110
00:07:57,860 --> 00:08:01,180
線形結合として考える方が楽しいと思いませんか?

111
00:08:01,180 --> 00:08:04,660
行列を使用していくつかの線形変換を記述する練習をしてみましょう。

112
00:08:04,660 --> 00:08:10,580
たとえば、空間全体を反時計回りに 90 度回転すると、I ハットは座標

113
00:08:10,580 --> 00:08:18,180
0、1 に着地し、J ハットは座標のマイナス 1、0 に着地します。

114
00:08:18,180 --> 00:08:23,340
したがって、最終的に得られる行列の列は 0、1、負の 1、0 になります。

115
00:08:23,340 --> 00:08:27,720
90 度回転したベクトルに何が起こるかを調べる

116
00:08:27,720 --> 00:08:31,660
には、その座標にこの行列を乗算するだけです。

117
00:08:31,660 --> 00:08:35,140
ここでは、ハサミと呼ばれる特別な名前が付いた楽しい変身を紹介します。

118
00:08:35,140 --> 00:08:41,540
ここでは、I ハットは固定されたままであるため、行列の最初の列は 1, 0 で

119
00:08:41,540 --> 00:08:46,320
すが、J ハットは座標 1, 1 に移動し、それが行列の 2 列目になります。

120
00:08:46,320 --> 00:08:50,940
そして、ここで冗長になる危険がありますが、せん断が与えられたベクトルをどのように変

121
00:08:50,940 --> 00:08:56,000
換するかを理解することは、結局、この行列とそのベクトルを乗算することになります。

122
00:08:56,000 --> 00:09:00,300
逆に、列 1、2、および 3、1 の行列から始めて

123
00:09:00,300 --> 00:09:04,900
、その変換がどのようになるかを推定したいとします。

124
00:09:04,900 --> 00:09:08,740
少し立ち止まって、想像できるかどうかを確認してください。

125
00:09:08,740 --> 00:09:16,140
これを行う 1 つの方法は、まず I ハットを 1、2 に移動し、次に J ハットを 3

126
00:09:16,140 --> 00:09:22,100
、1 に移動し、常にグリッド線が平行かつ等間隔になるように残りのスペースを移動します。

127
00:09:22,100 --> 00:09:26,840
I ハットと J ハットが着地するベクトルが線形依存している場合、これは、前回のビデオを思

128
00:09:26,840 --> 00:09:31,700
い出していただけると、一方が他方のスケーリングされたバージョンであることを意味し、線形変換

129
00:09:31,700 --> 00:09:37,800
によって 2D 空間全体が 2D 空間に押しつぶされることを意味します。これら 2 つのベ

130
00:09:37,800 --> 00:09:45,060
クトルが位置するライン。これら 2 つの線形依存ベクトルの 1 次元スパンとも呼ばれます。

131
00:09:45,060 --> 00:09:50,200
要約すると、線形変換は、グリッド線が平行かつ等間隔に保たれ、

132
00:09:50,200 --> 00:09:54,600
原点が固定されたままになるように空間内を移動する方法です。

133
00:09:54,600 --> 00:09:59,120
これらの変換は、少数の数値、つまり各基底ベクトル

134
00:09:59,120 --> 00:10:03,120
が着地する座標のみを使用して簡単に記述できます。

135
00:10:03,120 --> 00:10:07,840
行列は、これらの変換を記述するための言語を提供します。列は

136
00:10:07,840 --> 00:10:13,280
それらの座標を表し、行列とベクトルの乗算は、その変換が特

137
00:10:13,280 --> 00:10:15,400
定のベクトルに対して何を行うかを計算する単なる方法です。

138
00:10:15,400 --> 00:10:20,000
ここで重要なのは、マトリックスを見るたびに、それを

139
00:10:20,000 --> 00:10:22,740
空間の特定の変換として解釈できるということです。

140
00:10:22,780 --> 00:10:26,980
この考え方をしっかり理解すると、線形

141
00:10:26,980 --> 00:10:27,980
代数を深く理解できるようになります。

142
00:10:27,980 --> 00:10:32,820
行列の乗算から行列式、基底の変更、固有値に至るまで、今

143
00:10:32,820 --> 00:10:37,860
後出てくるほぼすべてのトピックは、行列を空間の変換とし

144
00:10:37,860 --> 00:10:41,600
て考え始めると、より簡単に理解できるようになります。

145
00:10:41,600 --> 00:10:45,340
すぐに、次のビデオで 2 つの

146
00:10:45,340 --> 00:10:46,340
行列の乗算について説明します。

147
00:10:46,340 --> 00:10:47,340
それではまた！

148
00:10:52,740 --> 00:10:54,740
ご清覧ありがとうございました！

