1
00:00:03,360 --> 00:00:07,780
불행하게도, 누구도 매트릭스가 무엇인지 말할 수 없습니다. 당신 스스로 찾아야만 합니다.

2
00:00:07,780 --> 00:00:09,780
- 모피어스 (영화 매트릭스 중에서)

3
00:00:09,780 --> 00:00:12,140
(행렬 연산을 시각적으로 이해시키는 놀라울정도로 적절한 문장)

4
00:00:12,480 --> 00:00:17,880
안녕 모두들!
제가 선형대수에서 단지 하나의 주제를 선택해야 한다면,

5
00:00:17,880 --> 00:00:21,080
특히 선형대수에 대해 하나도 모르는 학생을 위해서 하나 선택해야 한다면,

6
00:00:21,080 --> 00:00:26,320
그것은 선형변환(linear transformation) 과 행렬과의 관계입니다.

7
00:00:27,120 --> 00:00:32,440
이 동영상에서는 2차원 예제를 통해 선형변환이 무엇인지에 관해 집중해보겠습니다.

8
00:00:32,440 --> 00:00:35,800
그리고 행렬-벡터 곱셈과 어떤 관련이 있는지도 알아보겠습니다.

9
00:00:35,800 --> 00:00:42,620
특히,  행렬-벡터 곱셈을 단순암기말고 가능한 다른 방법도 있다는 것을 보여드리겠습니다.

10
00:00:43,120 --> 00:00:47,160
시작하기 앞서,  "선형 변환" 이라는 용어를 알아봅시다.

11
00:00:47,160 --> 00:00:50,280
"변환" 은 근본적으로 "함수"의 다른말일 뿐입니다.

12
00:00:50,280 --> 00:00:54,420
입력을 받고 결과물을 반환하는 그 무엇입니다.

13
00:00:54,440 --> 00:01:02,360
선형대수 맥락으로 보자면, 특정 벡터를 다른 벡터로 바꾸는 변환같은 것입니다.

14
00:01:02,400 --> 00:01:06,680
그런데 같은 의미라면, 왜 굳이 "함수(funcction)" 라는 말대신 "변환(transformation)" 이라는 말을 사용하는 것일까요?

15
00:01:06,720 --> 00:01:07,360
글쎄요,

16
00:01:07,360 --> 00:01:11,640
입력 - 출력 관계를 시각화하는 특정 방법을 암시해줍니다.

17
00:01:11,640 --> 00:01:16,260
알다시피, 벡터 함수를 이해하는 가장 좋은 방법은 움직임으로 이해하는 것입니다.

18
00:01:16,320 --> 00:01:20,340
어떤 변환이 입력벡터를 출력벡터로 바꾼다면,

19
00:01:20,400 --> 00:01:24,760
우리는 이것을 입력벡터를 이동시켜서 출력벡터로 만드는 것으로 생각해볼 수 있습니다.

20
00:01:25,280 --> 00:01:27,960
이 변환을 벡터들 모두에 적용한다고 생각해보면,

21
00:01:27,960 --> 00:01:35,040
모든 가능한 입력벡터들을 가져다 움직여 그에 상응하는 결과벡터를 만들어내는 것을 상상해볼 수 있습니다.

22
00:01:35,040 --> 00:01:39,440
화살표로 그려진 모든 벡터들의 움직임을 한번에 생각하는 것은 혼란스럽습니다.

23
00:01:39,440 --> 00:01:44,520
제가 지난번 동영상에서 언급했다시피, 각 벡터를 개념화하는 방법은 화살표가 아니라,

24
00:01:44,520 --> 00:01:47,920
하나의 점으로 생각하는 것입니다. 
점 하나가 벡터 하나의 끝을 가리킵니다.

25
00:01:47,920 --> 00:01:53,020
이 방법은 어떤 변환이 입력벡터들을 출력벡터로 바꾸는 것을 쉽게 생각하게 해줍니다.

26
00:01:53,040 --> 00:01:57,140
마치 공간상의 모든 점들이 다른 점으로 이동하는 것처럼 생각하면 됩니다.

27
00:01:57,160 --> 00:01:59,380
2차원에서 변환을 예로 살펴보면,

28
00:01:59,380 --> 00:02:02,800
변환에 대한 전체 "형태"이 어떤가를 좀 더 쉽게 와닿을 겁니다.

29
00:02:02,800 --> 00:02:06,000
저는 무한한 크기의 격자선을 만들고, 
그 위의 점을 가지고 살펴보는 것을 좋아합니다.

30
00:02:06,440 --> 00:02:09,680
또 때로는 변경전 격자선을 뒷배경에 남겨두는 방법도 좋아하는데,

31
00:02:09,680 --> 00:02:14,120
이렇게 하면 움직임 전 후를 추적해 보는데 도움이 됩니다.

32
00:02:14,880 --> 00:02:19,100
다양한 변환들의 효과로 인한
공간상에서 움직이는 점들을 보고 있노라면,

33
00:02:19,160 --> 00:02:20,480
당신도 느끼겠지만,

34
00:02:20,480 --> 00:02:21,760
아름답습니다.

35
00:02:21,760 --> 00:02:25,260
공간 그 자체가 특수효과처럼 비틀리고 수축하는 느낌을 줍니다.

36
00:02:25,280 --> 00:02:30,040
당신도 생각하다시피, 
임의 변환의 결과가 상당히 복잡해 보이지만,

37
00:02:30,040 --> 00:02:34,360
다행히도, 선형대수에서는 특수한 형태의 변환으로만 제한됩니다.

38
00:02:34,440 --> 00:02:38,740
이름도 기억하기 쉬운 "선형" 변환입니다.

39
00:02:38,920 --> 00:02:43,460
시작적으로 볼 때, 변환이 선형적(linear) 하다는 것은 두 가지 속성을 의미합니다.

40
00:02:43,640 --> 00:02:47,540
모든 선들은 변환 이후에도 휘지 않고 직선이어야 하며,

41
00:02:47,560 --> 00:02:50,680
원점은 변환 이후에도 여전히 원점이여야 합니다.

42
00:02:50,680 --> 00:02:56,240
예를들어, 보이는 것같이 선이 휘어지게 만들어 지는 변환은 선형변환이 아닙니다.

43
00:02:56,240 --> 00:02:59,020
그리고 이 변환은 비록 직선은 유지하지만,

44
00:02:59,040 --> 00:03:02,640
원점이 이동하기 때문에 선형 변환이 아닙니다.

45
00:03:02,640 --> 00:03:06,000
이번 것은 원점도 고정되어 있고 라인도 직선을 유지하는 것처럼 보이지만,

46
00:03:06,000 --> 00:03:09,340
하지만, 이것은 제가 단지 수직선과 수평선만을 그렸기 때문입니다.

47
00:03:09,360 --> 00:03:16,660
대각선을 그려보면, 직선이 아니라 곡선으로 바뀌는 것을 볼 수 있습니다.

48
00:03:16,680 --> 00:03:22,920
일반적으로, 선형변환이라면 격자 라인들이 변형 이후에도 여전히 "평행"하고 "동일한 간격"으로 있어야 합니다.

49
00:03:23,440 --> 00:03:28,100
어떤 선형변환의 경우에는 원점 기준으로 회전처럼 간단합니다.

50
00:03:28,120 --> 00:03:32,220
하지만 어떤 변환은 쉽게 설명하기 까다롭습니다.

51
00:03:32,240 --> 00:03:36,120
그럼 이런 변환들을 수치적으로는 어떻게 설명할 수 있을까요?

52
00:03:36,120 --> 00:03:40,180
당신이 만약 이 주제를 설명하기 위해 애니메이션 동영상을 프로그래밍 한다면,

53
00:03:40,200 --> 00:03:44,400
어떤 공식을 컴퓨터에 넣어야, 
벡터의 좌표값을 입력해서

54
00:03:44,400 --> 00:03:48,560
결과 벡터 좌표값이 나오도록 할 수 있을까요?

55
00:03:48,560 --> 00:03:54,840
결론은 두 개의 기저벡터 (i-hat, j-hat) 가 어떻게 변하는지만 알면 해결됩니다.

56
00:03:54,840 --> 00:03:57,420
다른 벡터들은 이 기저벡터들로 구하면 그만입니다.

57
00:03:57,440 --> 00:04:01,640
예를 들어, 벡터 v (-1,2) 를 생각해봅시다.

58
00:04:01,640 --> 00:04:07,800
좌표값은 i-hat 벡터의 -1배, j-hat 벡터의 2배를 의미합니다.

59
00:04:09,040 --> 00:04:13,340
어떤 변환을 적용시켜, 그 결과 이 세 벡터가 어디로 이동하는지 따라가보면,

60
00:04:13,360 --> 00:04:19,080
매우 중요한 결과로 격자 선들이 계속 평행하고 균등하게 분포한다는 속성을 발견하게 됩니다.

61
00:04:19,080 --> 00:04:25,840
변환 후 v 는 변환된 i-hat 벡터의 -1배, 변환된 j-hat 벡터의 2배입니다.

62
00:04:25,840 --> 00:04:30,300
즉, 변환전에 v벡터를 이루는 i-hat 과 j-hat 의 어떤 선형 결합이

63
00:04:30,320 --> 00:04:35,240
변환 후에도 같은 선형결합을 유지합니다.

64
00:04:35,240 --> 00:04:41,420
이 말은 단순히 i-hat 과 j-hat 의 변형위치만 알면, 벡터 v 를 추론할 수 있다는 것을 의미합니다.

65
00:04:41,420 --> 00:04:44,900
이것이 변환 전 격자선을 배경에 계속 그려놓는 이유입니다.

66
00:04:44,900 --> 00:04:50,040
지금 본 변환에서, 우리는 i-hat 벡터가 변환전 좌표계의 (1, -2) 위치로 옮겨진 것을 볼 수 있습니다.

67
00:04:50,040 --> 00:04:55,200
j-hat 은 변환전 좌표의 (3, 0)에 있게됩니다.

68
00:04:55,600 --> 00:05:00,280
따라서 (-1) i-hat + 2 j-hat 으로 나타낸 벡터는

69
00:05:00,320 --> 00:05:06,760
변환후에는 (-1) (1, -2) + 2 (3, 0) 바뀌었습니다.

70
00:05:06,880 --> 00:05:14,200
이를 종합하면,  (5, 2) 벡터가 됩니다.

71
00:05:14,200 --> 00:05:18,000
꽤 중요하기 때문에, 여기서 잠깐 멈춰서 숙고해봅시다.

72
00:05:18,000 --> 00:05:18,560
지금,

73
00:05:18,560 --> 00:05:21,660
실제로 변환이 어떤지 전과정을 보여주고 있기 때문에

74
00:05:21,680 --> 00:05:25,260
벡터v 가  (5, 2) 로 변환된 것을 바로 알 수 있습니다,

75
00:05:25,280 --> 00:05:30,600
여기 멋진 부분은 이 방법으로 어떤 벡터든지 변환후에 어디로 이동할지 알아낼 수 있다는 것입니다.

76
00:05:30,640 --> 00:05:34,560
i-hat, j-hat 벡터 좌표를 알고있는 한,

77
00:05:34,560 --> 00:05:38,080
변환이 어떤지를 볼 필요도 없습니다.

78
00:05:38,080 --> 00:05:41,600
좀 더 일반화하자면, 
벡터의 좌표값을 x, y 라 하면,

79
00:05:41,600 --> 00:05:46,880
변환후 i-hat 벡터 (1, -2) 로부터 x 배와

80
00:05:46,880 --> 00:05:51,440
변환후 j-hat 벡터(3,0) 의 y 배한 것을 합하면, 변환후 벡터를 구할 수 있습니다.

81
00:05:51,440 --> 00:05:58,520
이제 그 합을 계산하면,  변환후 벡터의 위치는 (1x+3y, -2x+0y) 가 됩니다.

82
00:05:58,560 --> 00:06:04,440
제가 어떤 벡터를 제시하든, 당신은 이 공식을 계산을 하면 바로 결과벡터를 말할 수 있습니다.

83
00:06:04,480 --> 00:06:08,560
이처럼 2차원 선형 변환을 통해 이 모든 것들이

84
00:06:08,560 --> 00:06:11,800
오로지 4개의 숫자면 설명 가능합니다.

85
00:06:11,840 --> 00:06:13,960
바로 변환된 i-hat 의 두 개의 좌표값과

86
00:06:14,000 --> 00:06:16,720
변환된 j-hat 의 두 개의 좌표값이 그것입니다.

87
00:06:16,720 --> 00:06:18,080
정말 멋지지 않나요?

88
00:06:18,080 --> 00:06:23,800
이 좌표값들을 2x2 숫자형태로 표현하는게 일반적 입니다. 바로 2x2 행렬입니다.

89
00:06:23,800 --> 00:06:29,940
행렬의 컬럼들을 i-hat, j-hat 두개의 특별한 벡터로 해석할 수 있습니다.

90
00:06:30,020 --> 00:06:33,840
만약 당신이 선형 변환을 묘사하는 2x2 행렬과

91
00:06:33,840 --> 00:06:35,520
어떤 벡터를 주어진다면,

92
00:06:35,520 --> 00:06:39,940
당신은 선형변환이 이 벡터를 어디로 변환시킬지 궁금할 것입니다.

93
00:06:40,000 --> 00:06:42,380
일단 벡터의 좌표값을 취한다음에,

94
00:06:42,380 --> 00:06:47,800
행렬의 대응되는 컬럼에 곱해줍니다. 
그리고나서 합치면 얻을 수 있습니다.

95
00:06:47,800 --> 00:06:54,600
이것은 변환후 새 기저 벡터들로 스케일링하고 합한다는 개념입니다.

96
00:06:54,600 --> 00:06:57,460
일반적인 경우에 어떻게 되는지 살펴봅시다.

97
00:06:57,460 --> 00:07:00,800
행렬의 인자가 a, b, c, d 로된 일반적인 경우를 말이죠.

98
00:07:00,800 --> 00:07:04,940
기억하세요. 이 행렬은 단순히 형태를 잡은 것일 뿐입니다.

99
00:07:04,940 --> 00:07:06,480
바로 선형 변환을 나타낼 뿐입니다.

100
00:07:06,480 --> 00:07:09,680
항상 해석할때는 다음을 기억하세요.
첫번째 열 (a, c) 은

101
00:07:09,680 --> 00:07:12,300
첫번째 기저벡터의 도착점이고,

102
00:07:12,300 --> 00:07:17,120
그리고 두 번째 열 (b, d) 는, 
두 번째 기저벡터의 도착점입니다.

103
00:07:17,120 --> 00:07:21,720
이 변환을 어떤 벡터(x, y) 에 적용하면 어떨 결과를 얻게될까요?

104
00:07:21,720 --> 00:07:22,600
글쎄요.

105
00:07:22,600 --> 00:07:27,900
그것은 (a, c) 의 x 배, 더하기, (b, d) 의 y 배 일 것입니다.

106
00:07:27,900 --> 00:07:34,000
결론은 (ax+by, cx+dy) 벡터를 얻습니다.

107
00:07:34,160 --> 00:07:37,620
당신은 행렬-벡터 곱셈으로 이와 똑같은 연산을 할 수 있습니다.

108
00:07:37,620 --> 00:07:40,000
벡터 왼쪽에 행렬을 놓게되면,

109
00:07:40,000 --> 00:07:41,440
이 행렬은 함수와 같아집니다.

110
00:07:41,440 --> 00:07:43,820
그리고, 당신이 고등과정 학생에게 이것을 암기하게 할 수 있을 겁니다.

111
00:07:43,820 --> 00:07:48,140
직관적으로 느꼈던 핵심부분을 보여주지 않고도 말입니다.

112
00:07:48,140 --> 00:07:48,740
그러나,

113
00:07:48,780 --> 00:07:50,600
행렬의 열을 이렇게 생각하는게 더 재밌습니다.

114
00:07:50,600 --> 00:07:53,660
기저벡터의 변환된 형태로서 말입니다.

115
00:07:53,660 --> 00:07:54,980
그리고 그 결과를 생각할때는

116
00:07:54,980 --> 00:08:00,160
이 변환된 벡터들의 선형조합으로 여기것이 더 재밌습니다.

117
00:08:00,900 --> 00:08:04,340
몇가지 선형 변환을 나타내는 행렬을 가지고 연습을 해봅시다.

118
00:08:04,340 --> 00:08:05,280
예를 들어,

119
00:08:05,280 --> 00:08:09,060
만약 모든 공간을 90 ° 시계 반대 방향으로 회전시키면,

120
00:08:09,060 --> 00:08:14,100
i-hat 벡터의 좌표값은 (0, 1) 가 되고,

121
00:08:14,100 --> 00:08:17,820
j-hat 벡터의 좌표값은 (-1, 0)이 됩니다.

122
00:08:18,000 --> 00:08:19,760
그래서 결론으로 얻은 행렬은

123
00:08:20,020 --> 00:08:23,120
(0, 1), (-1, 0) 입니다.

124
00:08:23,120 --> 00:08:26,660
90 ° 회전 한 후 다른 벡터들이 어떻게되는지 파악하기 위해,

125
00:08:26,660 --> 00:08:31,000
단순히 이 행렬을 곱하기만 하면 됩니다.

126
00:08:31,400 --> 00:08:34,780
여기 "shear"라는 특별한 이름을 가진 흥미로운 변환이 있습니다.

127
00:08:34,780 --> 00:08:36,940
이 변환에서, i-hat 은 변하지 않아서

128
00:08:36,940 --> 00:08:39,580
따라서 행렬의 첫번째 열은 (0, 1) 이지만,

129
00:08:39,580 --> 00:08:43,140
그러나 j-hat 은 (1,1) 위치로 변합니다.

130
00:08:43,140 --> 00:08:45,860
이것이 매트릭스의 두 번째 열이 됩니다.

131
00:08:45,860 --> 00:08:47,640
불필요하게 반복하는 것 같지만?,

132
00:08:47,640 --> 00:08:50,640
이 shear 변환이 벡터를 어떻게 변환시키는지 알아내는 것은

133
00:08:50,640 --> 00:08:55,340
이 행렬에 벡터를 곱해 나가는 것과 같습니다.

134
00:08:55,340 --> 00:08:57,340
다른 방향으로 생각해봅시다.

135
00:08:57,340 --> 00:09:01,520
열 (1, 2), (1, 3) 인 행렬을 가지고,

136
00:09:01,600 --> 00:09:04,560
이 변환이 어떤것인지 추론해 봅시다.

137
00:09:04,560 --> 00:09:08,240
잠깐 멈추고, 잠시 시간을 갖고 그 변환이 어떨지 생각해봅시다.

138
00:09:08,240 --> 00:09:09,440
이렇게하는 한 가지 방법은

139
00:09:09,440 --> 00:09:12,460
우선 i-hat 을 (1, 2) 로 이동시킵니다.

140
00:09:12,480 --> 00:09:15,020
그런 다음, j-hat 을 (3, 1)으로 이동시킵니다.

141
00:09:15,260 --> 00:09:17,540
공간의 나머지 부분도 움직이는 데

142
00:09:17,580 --> 00:09:20,980
격자선은 여전히 평행하고 규등한 간격을 유지하면서 움직입니다.

143
00:09:21,340 --> 00:09:25,340
i-hat 과 j-hat 벡터가 선형 종속(linearly dependent) 이라면

144
00:09:25,340 --> 00:09:27,300
, 동영상 마지막에 다시 한번 정리할텐데,

145
00:09:27,320 --> 00:09:30,040
벡터 하나가 다른벡터의 스케일링 버전임을 뜻합니다.

146
00:09:30,120 --> 00:09:34,420
즉, 이 선형 변환은 2차원 공간을 수축(squish) 시켜

147
00:09:34,500 --> 00:09:37,060
두 벡터가 놓여있는 선으로 만드는 것을 의미합니다.

148
00:09:37,360 --> 00:09:39,520
1차원 스팬(span)으로,

149
00:09:39,520 --> 00:09:44,700
이 선형 종속적인 두 벡터의 스팬입니다.

150
00:09:44,700 --> 00:09:46,800
요약하면, 선형변환은

151
00:09:46,800 --> 00:09:48,600
공간을 이동시키는 방법이며,

152
00:09:48,600 --> 00:09:51,700
격자선이 여전히 평행하고 균등간격을 유지한 변형입니다.

153
00:09:51,700 --> 00:09:54,000
그리고 원점은 고정되있음을 의미합니다.

154
00:09:54,000 --> 00:09:55,000
기쁘게도,

155
00:09:55,000 --> 00:09:59,000
이 변환들을 간단한 숫자들로 설명가능합니다.

156
00:09:59,000 --> 00:10:02,400
바로 기저벡터들의 변형후 좌표값입니다.

157
00:10:02,400 --> 00:10:06,000
행렬은 우리에게 이러한 변환을 설명하는 언어를 제공해줍니다.

158
00:10:06,000 --> 00:10:09,000
행렬의 열들은 이 좌표값을 나타내며,

159
00:10:09,000 --> 00:10:12,000
행렬 - 벡터 곱셈은 단지 이것을 계산하는 방법입니다.

160
00:10:12,000 --> 00:10:15,500
이 변환이 주어진 벡터에 적용한 결과를요.

161
00:10:15,500 --> 00:10:16,900
여기서 중요한 것은 바로 이것입니다.

162
00:10:16,900 --> 00:10:19,000
당신이 행렬을 볼때마다

163
00:10:19,000 --> 00:10:22,600
공간의 어떤 변환으로 생각하십시오.

164
00:10:22,600 --> 00:10:24,500
이 아이디어를 잘 습득하면,

165
00:10:24,500 --> 00:10:27,500
당신은 선형 대수를 깊게 이해할 수있는 좋은 위치에 있게 됩니다.

166
00:10:27,560 --> 00:10:29,080
앞으로 다룰 거의 모든 주제들은,

167
00:10:29,080 --> 00:10:31,600
, 행렬 곱셈부터 행렬식(determinant)까지,

168
00:10:31,600 --> 00:10:33,580
기저의 변환, 고유값(eigenvalues),

169
00:10:33,680 --> 00:10:36,220
이 모든 것을 이해하기가 쉬워질 것입니다.

170
00:10:36,320 --> 00:10:40,320
당신이 일단 행렬을 공간의 변형과 같이 생각하게 된다면,

171
00:10:40,640 --> 00:10:42,640
그 다음은 바로, 다음 동영상에 나오는,

172
00:10:42,760 --> 00:10:45,640
두 행렬의 곱셈에 대한 것입니다.

173
00:10:45,740 --> 00:10:47,020
나중에 다시 만나요!

