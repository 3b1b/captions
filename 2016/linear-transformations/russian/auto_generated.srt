1
00:00:12,040 --> 00:00:12,920
Всем привет!

2
00:00:13,320 --> 00:00:15,175
Если бы мне пришлось выбрать только одну тему, 

3
00:00:15,175 --> 00:00:18,135
которая заставляет все остальные по линейной алгебре начать интересоваться 

4
00:00:18,135 --> 00:00:21,372
и которую слишком часто забывают, когда студент впервые изучает линейную алгебру, 

5
00:00:21,372 --> 00:00:22,280
я бы выбрал именно эту.

6
00:00:22,700 --> 00:00:26,200
Идея линейного преобразования и его связь с матрицами.

7
00:00:26,950 --> 00:00:30,952
В этом видео я просто сосредоточусь на том, как выглядят эти преобразования 

8
00:00:30,952 --> 00:00:35,060
в случае двух измерений и как они связаны с идеей умножения матрицы на вектор.

9
00:00:35,880 --> 00:00:40,230
В частности, я хочу показать вам способ мышления о умножении матрицы на вектор, 

10
00:00:40,230 --> 00:00:42,080
который не зависит от запоминания.

11
00:00:43,160 --> 00:00:46,580
Для начала давайте разберем термин «линейное преобразование».

12
00:00:47,420 --> 00:00:49,880
Трансформация – это, по сути, причудливое слово для обозначения функции.

13
00:00:50,260 --> 00:00:53,980
Это что-то, что принимает входные данные и выдает выходные данные для каждого из них.

14
00:00:53,980 --> 00:00:58,271
В частности, в контексте линейной алгебры нам нравится думать о преобразованиях, 

15
00:00:58,271 --> 00:01:01,080
которые принимают один вектор и выдают другой вектор.

16
00:01:02,500 --> 00:01:05,189
Так зачем использовать слово «преобразование» вместо слова «функция», 

17
00:01:05,189 --> 00:01:06,380
если они означают одно и то же?

18
00:01:07,120 --> 00:01:09,479
Что ж, это наводит на мысль об определенном способе 

19
00:01:09,479 --> 00:01:11,340
визуализации этих отношений ввода-вывода.

20
00:01:11,860 --> 00:01:15,800
Видите ли, отличный способ понять функции векторов — использовать движение.

21
00:01:16,780 --> 00:01:21,216
Если преобразование переводит некоторый входной вектор в некоторый выходной вектор, 

22
00:01:21,216 --> 00:01:24,860
мы представляем, что этот входной вектор переходит в выходной вектор.

23
00:01:25,680 --> 00:01:29,735
Затем, чтобы понять преобразование в целом, мы могли бы представить, как наблюдаем, 

24
00:01:29,735 --> 00:01:34,080
как каждый возможный входной вектор перемещается к соответствующему ему выходному вектору.

25
00:01:34,980 --> 00:01:39,120
Очень сложно думать обо всех векторах одновременно, о каждом как о стрелке.

26
00:01:39,500 --> 00:01:43,301
Итак, как я упоминал в прошлом видео, хороший трюк — представить каждый 

27
00:01:43,301 --> 00:01:47,420
вектор не как стрелку, а как одну точку, точку, в которой находится ее кончик.

28
00:01:48,030 --> 00:01:49,973
Таким образом, если подумать о преобразовании, 

29
00:01:49,973 --> 00:01:52,991
переводящем каждый возможный входной вектор в некоторый выходной вектор, 

30
00:01:52,991 --> 00:01:56,340
мы наблюдаем, как каждая точка пространства перемещается в какую-то другую точку.

31
00:01:57,220 --> 00:02:02,320
В случае двумерных преобразований, чтобы лучше почувствовать всю форму преобразования, 

32
00:02:02,320 --> 00:02:05,780
мне нравится делать это со всеми точками бесконечной сетки.

33
00:02:06,560 --> 00:02:09,239
Мне также иногда нравится хранить копию сетки в фоновом режиме, 

34
00:02:09,239 --> 00:02:12,840
просто чтобы отслеживать, где все заканчивается относительно того, где оно начинается.

35
00:02:14,460 --> 00:02:19,601
Эффект от различных преобразований, перемещающихся по всем точкам пространства, 

36
00:02:19,601 --> 00:02:21,080
согласитесь, прекрасен.

37
00:02:21,880 --> 00:02:24,640
Это дает ощущение сжатия и трансформации самого пространства.

38
00:02:25,600 --> 00:02:29,920
Однако, как вы понимаете, произвольные преобразования могут выглядеть довольно сложными.

39
00:02:30,380 --> 00:02:34,578
Но, к счастью, линейная алгебра ограничивается особым типом преобразований, 

40
00:02:34,578 --> 00:02:38,280
более простым для понимания, называемым линейными преобразованиями.

41
00:02:39,120 --> 00:02:43,060
Визуально говоря, преобразование является линейным, если оно имеет два свойства.

42
00:02:43,700 --> 00:02:46,706
Все линии должны оставаться линиями, не искривляясь, 

43
00:02:46,706 --> 00:02:49,600
а начало координат должно оставаться фиксированным.

44
00:02:50,620 --> 00:02:55,540
Например, это не будет линейным преобразованием, поскольку линии становятся извилистыми.

45
00:02:56,100 --> 00:02:59,862
А вот это, хотя и сохраняет линии прямыми, не является линейным преобразованием, 

46
00:02:59,862 --> 00:03:01,860
потому что оно перемещает начало координат.

47
00:03:02,680 --> 00:03:05,902
Здесь фиксируется начало координат, и может показаться, что линии остаются прямыми, 

48
00:03:05,902 --> 00:03:09,240
но это только потому, что я показываю только горизонтальные и вертикальные линии сетки.

49
00:03:09,540 --> 00:03:12,600
Когда вы увидите, что он делает с диагональной линией, становится ясно, 

50
00:03:12,600 --> 00:03:15,320
что он вовсе не линейный, поскольку делает эту линию извилистой.

51
00:03:16,760 --> 00:03:19,279
В общем, о линейных преобразованиях следует думать как о 

52
00:03:19,279 --> 00:03:22,240
сохранении параллельных и равноотстоящих друг от друга линий сетки.

53
00:03:23,400 --> 00:03:25,709
Некоторые линейные преобразования легко представить, 

54
00:03:25,709 --> 00:03:27,540
например повороты вокруг начала координат.

55
00:03:28,120 --> 00:03:30,600
Другие немного сложнее описать словами.

56
00:03:32,040 --> 00:03:35,480
Итак, как, по вашему мнению, можно описать эти преобразования численно?

57
00:03:35,480 --> 00:03:39,256
Если бы вы, скажем, программировали несколько анимаций для создания обучающего 

58
00:03:39,256 --> 00:03:42,268
видео по этой теме, какую формулу вы дадите компьютеру, чтобы, 

59
00:03:42,268 --> 00:03:45,901
если вы дадите ему координаты вектора, он мог бы дать вам координаты места, 

60
00:03:45,901 --> 00:03:47,240
где этот вектор приземлится?

61
00:03:48,480 --> 00:03:53,040
Получается, что вам нужно только записать, куда приземлятся два базисных вектора, 

62
00:03:53,040 --> 00:03:56,600
i-hat и j-hat, каждый, а все остальное будет следовать из этого.

63
00:03:57,500 --> 00:04:01,549
Например, рассмотрим вектор v с отрицательными координатами 1, 2, что означает, 

64
00:04:01,549 --> 00:04:05,700
что он равен отрицательному значению, умноженному на 1 i-hat плюс 2 раза на j-hat.

65
00:04:08,680 --> 00:04:11,324
Если мы проведем какое-нибудь преобразование и проследим, 

66
00:04:11,324 --> 00:04:14,287
куда идут все три вектора, то свойство, что линии сетки остаются 

67
00:04:14,287 --> 00:04:18,300
параллельными и равномерно расположенными, будет иметь действительно важные последствия.

68
00:04:19,100 --> 00:04:21,868
Место, где приземлится v, будет отрицательным, умноженным на вектор, 

69
00:04:21,868 --> 00:04:25,400
на который приземлилась i-шляпа, плюс 2-кратный вектор, на который приземлилась j-шляпа.

70
00:04:25,980 --> 00:04:30,228
Другими словами, все началось как определенная линейная комбинация i-hat и j-hat, 

71
00:04:30,228 --> 00:04:34,580
а заканчивается той же линейной комбинацией того, куда приземлились эти два вектора.

72
00:04:35,620 --> 00:04:38,312
Это означает, что вы можете сделать вывод, куда должен идти v, 

73
00:04:38,312 --> 00:04:40,920
основываясь только на том, где приземлятся i-шляпа и j-шляпа.

74
00:04:41,580 --> 00:04:44,540
Вот почему мне нравится хранить копию исходной сетки в фоновом режиме.

75
00:04:45,080 --> 00:04:48,738
Для преобразования, показанного здесь, мы можем прочитать, 

76
00:04:48,738 --> 00:04:52,087
что i-шляпа попадает в координаты 1, отрицательные 2, 

77
00:04:52,087 --> 00:04:54,940
а j-шляпа попадает на ось X в координаты 3, 0.

78
00:04:55,540 --> 00:05:00,097
Это означает, что вектор, представленный отрицательным числом 1 i-hat плюс 2 раза j-hat, 

79
00:05:00,097 --> 00:05:03,682
в конечном итоге оказывается отрицательным, умноженным на 1 вектор 1, 

80
00:05:03,682 --> 00:05:06,140
отрицательным 2 плюс 2 раза больше вектора 3, 0.

81
00:05:07,100 --> 00:05:09,515
Сложив все это вместе, вы можете сделать вывод, 

82
00:05:09,515 --> 00:05:11,680
что он должен приземлиться на векторе 5, 2.

83
00:05:14,260 --> 00:05:17,240
Это хороший момент, чтобы остановиться и поразмышлять, потому что это очень важно.

84
00:05:18,520 --> 00:05:22,303
Теперь, учитывая, что я на самом деле показываю вам полное преобразование, 

85
00:05:22,303 --> 00:05:25,280
вы могли бы просто посмотреть, что v имеет координаты 5, 2.

86
00:05:25,760 --> 00:05:29,476
Но самое интересное здесь то, что это дает нам возможность определить, 

87
00:05:29,476 --> 00:05:32,721
где приземляются любые векторы, если у нас есть запись о том, 

88
00:05:32,721 --> 00:05:37,380
где приземляются i-шляпа и j-шляпа, без необходимости наблюдать за самим преобразованием.

89
00:05:38,600 --> 00:05:42,885
Напишите вектор с более общими координатами, x и y, и он приземлится на x, 

90
00:05:42,885 --> 00:05:46,714
умноженный на вектор, на который приземляется i-шляпа, 1, минус 2, 

91
00:05:46,714 --> 00:05:50,600
плюс y, умноженный на вектор, на который приземляется j-шляпа, 3, 0.

92
00:05:51,860 --> 00:05:58,100
Выполняя эту сумму, вы видите, что она равна 1x плюс 3y, минус 2x плюс 0y.

93
00:05:58,740 --> 00:06:01,159
Я даю вам любой вектор, и вы можете сказать мне, 

94
00:06:01,159 --> 00:06:03,580
где находится этот вектор, используя эту формулу.

95
00:06:04,860 --> 00:06:08,500
Все это говорит о том, что двумерное линейное преобразование полностью 

96
00:06:08,500 --> 00:06:12,192
описывается всего лишь четырьмя числами: двумя координатами того места, 

97
00:06:12,192 --> 00:06:16,500
где приземляется i-шляпа, и двумя координатами того места, где приземляется j-шляпа.

98
00:06:17,080 --> 00:06:17,640
Разве это не круто?

99
00:06:18,380 --> 00:06:21,709
Обычно эти координаты упаковываются в сетку чисел 2x2, 

100
00:06:21,709 --> 00:06:25,583
называемую матрицей 2x2, где вы можете интерпретировать столбцы 

101
00:06:25,583 --> 00:06:29,640
как два специальных вектора, на которые приземляются i-hat и j-hat.

102
00:06:30,380 --> 00:06:34,768
Если вам дана матрица 2x2, описывающая линейное преобразование и какой-то 

103
00:06:34,768 --> 00:06:38,978
конкретный вектор, и вы хотите знать, куда это линейное преобразование 

104
00:06:38,978 --> 00:06:42,477
переносит этот вектор, вы можете взять координаты вектора, 

105
00:06:42,477 --> 00:06:47,340
умножить их на соответствующие столбцы матрицы, а затем сложите то, что получится.

106
00:06:48,180 --> 00:06:52,720
Это соответствует идее добавления масштабированных версий наших новых базисных векторов.

107
00:06:54,720 --> 00:06:57,997
Давайте посмотрим, как это выглядит в самом общем случае, 

108
00:06:57,997 --> 00:07:00,540
когда в вашей матрице есть записи A, B, C, D.

109
00:07:01,100 --> 00:07:03,985
И помните, эта матрица — всего лишь способ упаковки информации, 

110
00:07:03,985 --> 00:07:06,240
необходимой для описания линейного преобразования.

111
00:07:06,240 --> 00:07:11,949
Всегда помните, что первый столбец AC — это место, где находится первый базисный вектор, 

112
00:07:11,949 --> 00:07:16,440
а второй столбец, BD, как место, где находится второй базисный вектор.

113
00:07:17,500 --> 00:07:21,000
Что мы получим, если применить это преобразование к некоторому вектору xy?

114
00:07:22,060 --> 00:07:26,980
Ну, это будет x раз AC плюс y раз BD.

115
00:07:28,060 --> 00:07:33,300
Объединив все это, вы получите вектор Ax плюс By, Cx плюс Dy.

116
00:07:33,980 --> 00:07:37,407
Вы могли бы даже определить это как умножение матрицы на вектор, 

117
00:07:37,407 --> 00:07:40,940
когда вы помещаете матрицу слева от вектора, как будто это функция.

118
00:07:41,660 --> 00:07:43,966
Затем вы могли бы заставить старшеклассников запомнить это, 

119
00:07:43,966 --> 00:07:46,620
не показывая им важную часть, которая делает это интуитивно понятным.

120
00:07:48,300 --> 00:07:53,016
Но разве не интереснее думать об этих столбцах как о преобразованных версиях ваших 

121
00:07:53,016 --> 00:07:57,960
базисных векторов, а о результате — как о подходящей линейной комбинации этих векторов?

122
00:08:00,720 --> 00:08:03,780
Давайте попрактикуемся в описании нескольких линейных преобразований с помощью матриц.

123
00:08:04,580 --> 00:08:09,748
Например, если мы повернём всё пространство на 90 градусов против часовой стрелки, 

124
00:08:09,748 --> 00:08:12,240
то i-hat приземлится на координаты 0, 1.

125
00:08:13,980 --> 00:08:17,180
И j-шляпа попадает в отрицательные координаты 1, 0.

126
00:08:17,980 --> 00:08:21,960
Итак, матрица, которую мы получили, имеет столбцы 0, 1, отрицательные 1, 0.

127
00:08:22,880 --> 00:08:26,824
Чтобы выяснить, что происходит с любым вектором после поворота на 90 градусов, 

128
00:08:26,824 --> 00:08:29,620
вы можете просто умножить его координаты на эту матрицу.

129
00:08:31,560 --> 00:08:34,299
Вот забавная трансформация со специальным названием, называемая ножницами.

130
00:08:35,000 --> 00:08:39,159
В ней i-hat остается фиксированным, поэтому первый столбец матрицы равен 1, 0.

131
00:08:39,600 --> 00:08:45,300
Но j-hat перемещается к координатам 1, 1, которые становятся вторым столбцом матрицы.

132
00:08:45,300 --> 00:08:48,608
И рискуя оказаться здесь излишними, выяснение того, 

133
00:08:48,608 --> 00:08:54,080
как сдвиг преобразует данный вектор, сводится к умножению этой матрицы на этот вектор.

134
00:08:55,760 --> 00:08:59,783
Допустим, мы хотим пойти наоборот, начиная с матрицы, скажем, 

135
00:08:59,783 --> 00:09:04,520
со столбцов 1, 2 и 3, 1, и хотим вывести, как выглядит ее преобразование.

136
00:09:04,960 --> 00:09:07,440
Сделайте паузу и посмотрите, сможете ли вы это представить.

137
00:09:08,420 --> 00:09:12,628
Один из способов сделать это — сначала переместить i-hat на 1, 

138
00:09:12,628 --> 00:09:15,100
2, а затем переместить j-hat на 3, 1.

139
00:09:15,100 --> 00:09:17,507
Всегда перемещайте остальную часть пространства таким образом, 

140
00:09:17,507 --> 00:09:20,220
чтобы линии сетки оставались параллельными и равномерно расположенными.

141
00:09:21,680 --> 00:09:25,737
Если векторы, на которые попадают i-hat и j-hat, линейно зависимы, что, 

142
00:09:25,737 --> 00:09:30,246
если вы помните из прошлого видео, означает, что один является масштабированной 

143
00:09:30,246 --> 00:09:34,247
версией другого, это означает, что линейное преобразование сжимает все 

144
00:09:34,247 --> 00:09:37,967
2D-пространство на линия, на которой расположены эти два вектора, 

145
00:09:37,967 --> 00:09:42,420
также известная как одномерный промежуток этих двух линейно зависимых векторов.

146
00:09:44,420 --> 00:09:48,237
Подводя итог, линейные преобразования — это способ перемещения в пространстве, 

147
00:09:48,237 --> 00:09:51,910
при котором линии сетки остаются параллельными и равномерно расположенными, 

148
00:09:51,910 --> 00:09:53,940
а начало координат остается фиксированным.

149
00:09:54,540 --> 00:09:57,054
Удивительно, но эти преобразования можно описать, 

150
00:09:57,054 --> 00:10:01,530
используя лишь несколько чисел — координаты места расположения каждого базисного вектора.

151
00:10:02,760 --> 00:10:05,994
Матрицы дают нам язык для описания этих преобразований, 

152
00:10:05,994 --> 00:10:10,096
где столбцы представляют эти координаты, а умножение матрицы на вектор 

153
00:10:10,096 --> 00:10:14,660
— это просто способ вычислить, что это преобразование делает с данным вектором.

154
00:10:15,360 --> 00:10:18,641
Важным выводом здесь является то, что каждый раз, когда вы видите матрицу, 

155
00:10:18,641 --> 00:10:21,880
вы можете интерпретировать ее как определенную трансформацию пространства.

156
00:10:22,580 --> 00:10:27,320
Как только вы действительно усвоите эту идею, вы сможете глубже понять линейную алгебру.

157
00:10:27,660 --> 00:10:31,714
Почти все возникающие темы, от умножения матриц до определителей, 

158
00:10:31,714 --> 00:10:35,952
изменения базиса, собственных значений, все это станет легче понять, 

159
00:10:35,952 --> 00:10:40,560
как только вы начнете думать о матрицах как о преобразованиях пространства.

160
00:10:41,300 --> 00:10:46,320
Сразу же, в следующем видео, я расскажу об умножении двух матриц вместе.

