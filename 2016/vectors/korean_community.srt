1
00:00:05,100 --> 00:00:11,000
"The introduction of numbers as coordinates is an act of violence." 
-헤르만 바일

2
00:00:11,000 --> 00:00:16,000
기본적, 근본적인 선형 대수의 구성조각은 벡터입니다.

3
00:00:16,000 --> 00:00:20,600
그래서 우리가 정확히 벡터가 무엇인지에 대해 알고가는 것이 중요합니다.  당신도 알다시피

4
00:00:20,687 --> 00:00:25,487
벡터에 대해 서로 구별되지만 관련깊은 3 가지 관점이 있습니다. 하나는 물리학 학생 관점이고,

5
00:00:25,487 --> 00:00:30,600
두번째는 컴퓨터 과학 학생 관점, 
마지막으로 수학자들의 관점입니다.

6
00:00:30,607 --> 00:00:35,300
물리학 학생의 관점에서 벡터는 공간에서 화살표입니다.

7
00:00:35,327 --> 00:00:39,900
벡터는 길이와 방향을 가집니다. 이 두가지가 같다면

8
00:00:39,967 --> 00:00:45,000
당신이 공간 어디로 이동시키든 같은 벡터입니다. 
평평한 평면에 존재하는 벡터는

9
00:00:45,000 --> 00:00:51,000
2차원 벡터이고,  우리가 살고 있는 공간같이 확장된 공간에 있다면 3차원 벡터입니다.

10
00:00:51,000 --> 00:00:56,000
컴퓨터 과학 관점에서 벡터는 순차 숫자 리스트입니다. 예를들어,

11
00:00:56,000 --> 00:01:00,800
당신이 주택 가격 분석작업을 하고 있다고 가정해봅시다. 당신이 고려하는 것은 오직

12
00:01:00,847 --> 00:01:07,000
면적과 가격입니다. 
그럼 각각의 집을 숫자쌍으로 모델링 할 수 있습니다.

13
00:01:07,000 --> 00:01:12,000
첫번재는 면적이고, 두번째는 가격을 나타냅니다. 
순서가 중요하다는 것을 주의하세요.

14
00:01:12,000 --> 00:01:17,000
전문 용어로,  당신은 집을 2차원 벡터로 모델링한 것입니다. 이 문맥으로 보면,

15
00:01:17,000 --> 00:01:20,300
"벡터" 란 단순히 "리스트"에 대한 장식같은 단어입니다. 
2차원 벡터가 된 이유는

16
00:01:20,367 --> 00:01:25,000
리스트의 길이가 2이기 때문입니다.

17
00:01:25,000 --> 00:01:30,000
다른 한편으로, 수학자는 위 같은 관점들을  좀 더 일반화하는 방법을 찾습니다.  그래서 이 관점에서 보자면,

18
00:01:30,000 --> 00:01:35,000
무엇이든 벡터가 될 수 있습니다. 
두 벡터를 합한다는 개념에 맞고,

19
00:01:35,000 --> 00:01:39,800
벡터에 숫자를 곱한다는 개념에 맞기만하면 됩니다. 
또 여러 연산들을 만족해야하는데,  더 세부사항은

20
00:01:39,807 --> 00:01:43,000
다소 추상적이여서, 저는 비디오 시리즈 마지막까지 무시하고 가는게 낫다고 생각합니다.

21
00:01:43,007 --> 00:01:47,800
그리고 중간에 좀 더 구체적인 설정을 놓겠습니다.

22
00:01:47,887 --> 00:01:52,600
하지만 여기 가지고 온 이유는, 벡터 합이라는 개념과

23
00:01:52,607 --> 00:01:57,400
숫자 곱셈이라는 개념은 선형 대수 전반에 걸쳐 중요한 역할을 담당하기 때문입니다.

24
00:01:57,407 --> 00:02:02,300
하지만 이런 연산들에 대해 알아보기 전에, 다음과 같은 생각을 마음에 먼저 떠올려봅시다.

25
00:02:02,367 --> 00:02:07,000
바로 제가 단어 "벡터"를 말할 때는, 기하학 관점에서

26
00:02:07,000 --> 00:02:12,000
제가 벡터를 포함하는 새로운 주제를 소개할대마다 당신이 하나의 화살표를 떠올렸으면 합니다.

27
00:02:12,000 --> 00:02:18,447
xy 평면과 같은 좌표계 안에 있으며 꼬리는 원점인 화살표를 떠올려주세요.

28
00:02:18,447 --> 00:02:23,800
이것은 물리학 학생의 관점과는 조금 다른데, 물리학 관점에서는 벡터는 자유롭게

29
00:02:23,887 --> 00:02:29,000
공간 어디든지 이동시킬 수 있습니다. 하지만, 선형 대수에서는 거의 항상

30
00:02:29,000 --> 00:02:35,000
원점에 뿌리를 둡니다. 이렇게 공간의 화살표라는 문맥에서 새 컨셉을 이해하면,

31
00:02:35,000 --> 00:02:40,600
우리는 숫자-리스트 라는 관점으로 번역해볼 겁니다. 
이 숫자리스트는 벡터의 좌표를 의미합니다.

32
00:02:40,607 --> 00:02:45,100
저는 지금 여러분들이 이런 좌표 시스템이 익숙하다고 여기기 때문에

33
00:02:45,167 --> 00:02:50,000
선형대수의 이같은 2가지 관점을 오가는 것은 도움이 됩니다. 선형대수의 두 관점사이를 오가는 과정속에서 중요한 것들이 나타나기 때문입니다.

34
00:02:50,000 --> 00:02:55,000
잠시동안은 2차원에 대해서 초점을 맞추겠습니다.

35
00:02:55,000 --> 00:03:01,100
수평선을 X 축이라하고, 
수직선을 Y 축이라고 합니다.

36
00:03:01,100 --> 00:03:01,667
평면에서 두 선이 교차하는 곳을 원점이라고 부릅니다. 이 원점을 공간의 중심이자 모든 벡터 뿌리가 위치하는 곳이라고 생각하면 됩니다.

37
00:03:05,007 --> 00:03:10,000
임의 길이를 1로 결정한 후,  각 축에 그 간격으로 눈금을 표시합니다.

38
00:03:10,000 --> 00:03:14,600
제가 2 차원 공간의 개념을 전달하고자 할 때, 앞으로 비디오들에서 보게시겠지만,

39
00:03:14,607 --> 00:03:19,700
저는 눈금을 확장해 격자선을 만들 것입니다.

40
00:03:19,727 --> 00:03:25,000
하지만 당장은 좀 방해가 되서 빼겠습니다. 
벡터의 좌표는 숫자쌍입니다.

41
00:03:25,000 --> 00:03:30,000
이 숫자쌍은 꼬리(원점)에서 시작한 벡터가 끝에 어떻게 다다를지 알려줍니다.

42
00:03:30,000 --> 00:03:35,000
첫 번째 숫자는 x 축을 다라 얼마나 가는지 알려줍니다.  양수이면 오른쪽방향입니다.

43
00:03:35,000 --> 00:03:40,700
음수이면 왼쪽방향입니다.

44
00:03:40,767 --> 00:03:46,000
두 번째 숫자는 Y 축과 평행한 방향으로 얼마나 이동할지 알려줍니다. 양수면 위쪽방향, 음수면 아래쪽방향입니다.

45
00:03:46,000 --> 00:03:50,800
좌표점과 벡터를 구분하기 위해, 관례적으로

46
00:03:50,847 --> 00:03:56,000
대괄호 안에 세로방향으로 숫자를 적습니다.

47
00:03:56,000 --> 00:04:02,000
모든 숫자쌍은 각각 하나의 벡터와 대응되고, 반대로 모든 벡터는 각각 대응되는 숫자쌍이 하나있습니다.

48
00:04:02,500 --> 00:04:09,000
3차원에서는 어떨까요? 
우선 z 축 이라는 세 번째 축을 추가합니다.

49
00:04:09,000 --> 00:04:14,000
이 축은 x 축, y 축에 모두 수직입니다. 
이렇게 되면 각 벡터는

50
00:04:14,000 --> 00:04:20,000
순차 삼중 숫자쌍에 대응됩니다. 
첫 번째는 x 축을 따라 얼마나 이동할지,

51
00:04:20,000 --> 00:04:25,000
두번째는 y 축에 평행하게 얼마나 이동할지, 
세 번째는 z 축에 평행하게 얼마나 이동할지를 말해줍니다.

52
00:04:25,000 --> 00:04:31,400
모든 삼중 숫자쌍은 특정한 하나의 벡터를 나타내고,

53
00:04:31,407 --> 00:04:37,000
모든 벡터는 하나의 삼중 숫자쌍 표현을 가집니다.

54
00:04:37,000 --> 00:04:43,000
그럼 다시 벡터합과 숫자곱으로 돌아와봅시다. 
결국 선형대수의 모든 주제는

55
00:04:43,000 --> 00:04:47,000
이 두가지 연산을 중심으로 일어납니다.
 다행히, 각각 정의하는 방법은 매우 간단합니다.

56
00:04:47,007 --> 00:04:53,000
두 벡터가 있다고 가정해봅시다. 
하나는 위쪽과 약간 오른쪽을 가리키고,

57
00:04:53,000 --> 00:04:59,000
다른 하나는 오른쪽과 약간 아래쪽을 가리킵니다. 
이 두 벡터를 더한다는 것은 두번째 벡터의 꼬리를 첫번째 벡터의 끝에 옮기는 것을 말합니다.

58
00:04:59,000 --> 00:05:06,700
그리고나서 첫번째 꼬리에서 두번째 끝을 가리키는 새 벡터를 그립니다.

59
00:05:06,767 --> 00:05:11,800
바로 이 새 벡터가 두 벡터의 합입니다.

60
00:05:11,887 --> 00:05:14,400
그런데, 합에 대한 이러한 정의는

61
00:05:14,467 --> 00:05:20,000
선형대수에서 거의 유일하게 벡터를 원점으로부터 멀리 이탈시키는 순간입니다.

62
00:05:20,000 --> 00:05:25,000
그럼 이렇게 정의하는 것이 타당할까요? 이런 벡터합 정의는 타당하고, 다른 것은 안될까요?

63
00:05:25,000 --> 00:05:31,000
제가 벡터에 대해 표현하기 좋아하는 방법은 벡터를 하나의 움직임- 하나의 단계로 보는 것입니다.

64
00:05:31,000 --> 00:05:36,000
공간에서 특정한 방향과 거리를 가진 움직임을 말합니다. 만약 첫 번째 벡터 따라 이동하고,

65
00:05:36,000 --> 00:05:40,000
다음으로 두 번째 벡터를 따라 이동한다면,

66
00:05:40,000 --> 00:05:44,800
전체적인 효과는 그냥 두 벡터의 합을 따라 이동한 것과 같을 것입니다.

67
00:05:44,847 --> 00:05:50,000
당신은 수선에서 숫자 더하기를 확장한 것으로 생각할 수도 있습니다.

68
00:05:50,000 --> 00:05:55,000
우리가 이것을 아이들에게 가르치는 한 방법은,  2+5를 오른쪽으로 2칸 이동하고,

69
00:05:55,000 --> 00:06:01,500
이어서 오른쪽으로 5칸 이동하게 생각하게 하는 것입니다.

70
00:06:01,567 --> 00:06:10,600
결과는 오른쪽으로 7 단계 이동한 것과 같습니다. 실제, ​​벡터합이 수치적으로 어떻게 보이는지 살펴봅시다.

71
00:06:10,607 --> 00:06:15,600
첫번째 벡터의 좌표는 (1,2) 입니다. 
두번째 벡터는 (3,-1) 입니다. 두 벡터의 합을 얻으려면

72
00:06:15,647 --> 00:06:22,000
이 끝-꼬리 방법을 사용하면, 원점에서 끝으로 가는 4 단계를 생각할 수 있습니다.

73
00:06:22,000 --> 00:06:26,500
"1칸 오른쪽, 2칸 위로, 3칸 오른쪽, 마지막으로 1칸 아래로."

74
00:06:26,527 --> 00:06:36,000
이 단계들을 재정비해서 오른쪽 방향들 먼저하고, 나중에 수직방향을 몰아서 하도록 변경해봅시다.

75
00:06:36,000 --> 00:06:43,900
그럼 다음처럼 말하는 것과 같습니다.
"우선 1+3 칸 오른쪽 이동, 2+(-1)칸 위로 이동".

76
00:06:43,967 --> 00:06:49,500
새 벡터는 1 + 3, 2 + (- 1) 인 좌표가 됩니다. 일반적으로, 숫자-리스트 컨셉에서 벡터합은

77
00:06:49,567 --> 00:06:54,500
항끼리 매칭해서 서로 더하는 것처럼 보입니다.

78
00:06:54,527 --> 00:07:00,000
또 다른 기초 벡터 연산은 숫자 곱하기 입니다. 
이것을 이해하는 최고의 방법은

79
00:07:00,000 --> 00:07:05,000
몇 가지 예를 보는 것입니다. 
숫자 2를 주어진 벡터에 곱한다는 것은

80
00:07:05,000 --> 00:07:12,000
벡터를 기존의 2배만큼 늘리는 것을 의미합니다.

81
00:07:12,000 --> 00:07:18,500
만약 벡터에 1/3 을 곱한다는 것은 원래 길이의 1/3 으로 줄인다는 말입니다.

82
00:07:18,527 --> 00:07:21,900
음수로 곱하는 경우는, -1.8 를 예로 들면,

83
00:07:21,967 --> 00:07:27,000
벡터를 반대방향으로 뒤집고 나서 1.8 배만큼 늘리면 됩니다.

84
00:07:27,000 --> 00:07:33,900
이처럼 벡터 길이를 늘이거나 줄이거나, 방향을 뒤집는 것을 "스케일링(scaling)" 이라고 부릅니다.

85
00:07:33,967 --> 00:07:39,700
2,  1/3, -1.8 같이 벡터 스케일링에 사용되는 숫자들을 "스칼라(scalar)" 라고 합니다.

86
00:07:39,727 --> 00:07:45,000
사실, 선형 대수를 통틀어 숫자의 주요 역할은 벡터를 스케일링 하는 것으로,

87
00:07:45,000 --> 00:07:51,000
그래서 단어 "스칼라(scalar)"를 "숫자(number)" 와 쉽게 서로바꿔 사용할 수 있습니다.

88
00:07:51,000 --> 00:07:56,000
수치적으로,  하나의 벡터를 2 라는 요소로 늘인다는 것은

89
00:07:56,000 --> 00:08:01,100
벡터의 각 원소에 2라는 요소를 곱한다는 것과 같습니다.

90
00:08:01,167 --> 00:08:05,000
그래서 숫자 리스트라는 컨셉에서, 벡터에 스칼라를 곱한다는 것은

91
00:08:05,167 --> 00:08:09,500
리스트 각 원소에 해당 스칼라(숫자)를 곱하는 것과 같습니다.

92
00:08:09,567 --> 00:08:15,000
당신은 앞으로 비디오를 통해 제가 다음과 같이 말하는 의미를 알게될 것입니다. 선형대수 주제들은

93
00:08:15,000 --> 00:08:20,000
두 가지 기본적인 연산 주변에서 도는 경향이 있습니다. 바로 벡터합과 스칼라곱입니다.

94
00:08:20,000 --> 00:08:25,700
그리고 비디오 마지막에서 수학자들이 어떻게, 왜 이런 연산들에 대해서만 생각하는지,

95
00:08:25,727 --> 00:08:29,800
우리가 벡터를 표현하기로 선택한 방법과는 다르게 독립적이고 추상적으로만 생각하는지 알려드리겠습니다.

96
00:08:29,887 --> 00:08:34,600
근데 실제로는 어떤 것이냐는 중요하지 않습니다.

97
00:08:34,607 --> 00:08:39,800
앞서 제가 말한 것 같이 공간 상 화살표로 보면 좋은 수치 표현법을 가지게 됩니다. 반면, 숫자 리스트로 벡터를 생각하는 것은

98
00:08:39,807 --> 00:08:45,000
좋은 기하학적 해석을 제공해줍니다. 선형 대수의 유용성은 어떤 관점이냐로 결정되지 않습니다.

99
00:08:45,000 --> 00:08:50,000
그 관점들 사이로 쉽게 번역될 수 있는 능력이 있기 때문입니다.

100
00:08:50,000 --> 00:08:55,000
이 데이터 분석가에게는 많은 숫자 리스트들을 가상적 공간에서 개념화하는 좋은 방법을 제공해줍니다.

101
00:08:55,000 --> 00:09:00,200
이는 정말로 데이터의 패턴을 명확하게 해주고, 어떤 연산이 무엇인가에 대한  전지적 관점을 제공 할 수 있습니다

102
00:09:00,207 --> 00:09:05,000
이와 반대로,  물리학 및 컴퓨터 그래픽 분야의 사람들에게는

103
00:09:05,000 --> 00:09:07,107
공간과 조작을 숫자로 표현하여, 컴퓨터를 통해 동작시킬 수 있게 해줍니다.

104
00:09:07,107 --> 00:09:12,307
예를들어, 수학-Y 애니메이션같은 작업을 할 때,  저는 공간에서 실제로 무엇이 일어나는지 생각합니다.

105
00:09:12,307 --> 00:09:22,700
그리고 나서 컴퓨터에 이를 수치적으로 표현합니다. 그렇게 함으로써,

106
00:09:22,767 --> 00:09:26,000
화면의 픽셀을 어디에 두어야 할지 알게됩니다. 그리고 이렇게 하는 것은 보통 선형대수 지식에 많이 의존합니다.

107
00:09:26,000 --> 00:09:32,000
그럼 여기까지 벡터 기초였습니다.
다음 동영상부터 꽤 깔끔한 컨셉인

108
00:09:32,000 --> 00:09:35,000
스팬(span), 기저(bases), 선형독립(linear dependence) 같은 개념들을 소개하겠습니다. 그때 만나요!

