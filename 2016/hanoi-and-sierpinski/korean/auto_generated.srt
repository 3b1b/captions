1
00:00:04,200 --> 00:00:06,206
오늘 저는 다른 숫자 체계로 숫자를 

2
00:00:06,206 --> 00:00:08,312
세는 것만으로 하노이 탑 퍼즐을 푸는 

3
00:00:08,312 --> 00:00:10,620
깔끔한 방법을 여러분과 공유하고 싶습니다.

4
00:00:11,220 --> 00:00:13,213
그리고 놀랍게도 이 내용은 시에르핀스키의 

5
00:00:13,213 --> 00:00:15,640
삼각형을 채우는 곡선을 찾는 것과 관련이 있습니다.

6
00:00:16,720 --> 00:00:18,734
저는 전 CS 강사였던 Keith 

7
00:00:18,734 --> 00:00:21,385
Schwartz로부터 이에 대해 배웠습니다. 

8
00:00:21,385 --> 00:00:24,460
이 사람은 제가 만난 최고의 교육자 중 한 명입니다.

9
00:00:25,140 --> 00:00:26,935
나는 실제로 그가 나에게 이 물건을 보여준 

10
00:00:26,935 --> 00:00:28,730
대화를 조금 녹음했습니다. 그래서 여러분은 

11
00:00:28,730 --> 00:00:30,900
그가 직접 설명한 내용 중 일부를 들을 수 있습니다.

12
00:00:38,420 --> 00:00:42,175
익숙하지 않은 경우 하노이 타워 퍼즐이 

13
00:00:42,175 --> 00:00:45,760
실제로 무엇인지 간단히 설명하겠습니다.

14
00:00:45,760 --> 00:00:50,227
이 디스크는 중앙에 구멍이 있어서 

15
00:00:50,227 --> 00:00:54,460
못에 끼울 수 있다고 생각합니다.

16
00:00:54,460 --> 00:00:57,064
여기에 표시된 설정에는 5개의 디스크가 있습니다. 

17
00:00:57,064 --> 00:00:59,762
여기에 0, 1, 2, 3, 4라는 라벨을 붙이지만 

18
00:00:59,762 --> 00:01:02,460
원칙적으로는 원하는 만큼 디스크를 가질 수 있습니다.

19
00:01:02,580 --> 00:01:06,018
예를 들어, 첫 번째 이동에는 디스크 0을 이동해야 

20
00:01:06,018 --> 00:01:09,220
합니다. 왜냐하면 다른 디스크에는 이동하기 전에 

21
00:01:09,220 --> 00:01:12,540
방해가 되지 않는 항목이 그 위에 있기 때문입니다.

22
00:01:12,540 --> 00:01:14,751
그 후에는 디스크 1을 이동할 수 있지만 

23
00:01:14,751 --> 00:01:17,348
현재 디스크 0이 없는 페그에 이동해야 합니다. 

24
00:01:17,348 --> 00:01:19,463
그렇지 않으면 더 작은 디스크에 더 큰 

25
00:01:19,463 --> 00:01:22,060
디스크를 배치하게 되므로 이는 허용되지 않습니다.

26
00:01:23,720 --> 00:01:27,070
이전에 이것을 본 적이 없다면 잠시 멈추고 다양한 

27
00:01:27,070 --> 00:01:30,062
크기의 책을 꺼내 직접 시험해 보시기를 적극 

28
00:01:30,062 --> 00:01:30,780
권장합니다.

29
00:01:30,780 --> 00:01:34,324
이제 Keith는 이 퍼즐에 대해 정말로 놀라운 

30
00:01:34,324 --> 00:01:37,737
것을 보여주었습니다. 그것은 이진법으로 숫자를 

31
00:01:37,737 --> 00:01:41,019
세고 그 숫자의 리듬을 디스크 움직임의 특정 

32
00:01:41,019 --> 00:01:44,563
리듬과 연관시키는 것만으로 문제를 풀 수 있다는 

33
00:01:44,563 --> 00:01:45,220
것입니다.

34
00:01:45,220 --> 00:01:47,921
바이너리에 익숙하지 않은 분들을 위해 

35
00:01:47,921 --> 00:01:50,880
먼저 여기서 간략한 개요를 살펴보겠습니다.

36
00:01:50,880 --> 00:01:53,184
사실 이진법에 익숙하시더라도 이전에는 생각하지 

37
00:01:53,184 --> 00:01:55,401
못했을 수도 있고 생각하지 못했을 수도 있는 

38
00:01:55,401 --> 00:01:57,440
계산의 리듬을 중심으로 설명하고 싶습니다.

39
00:01:57,440 --> 00:01:59,801
이진법에 대한 모든 설명은 일반적으로 숫자를 

40
00:01:59,801 --> 00:02:02,069
표현하는 일반적인 방법, 즉 10진법이라고 

41
00:02:02,069 --> 00:02:04,147
부르는 방식에 대한 성찰로 시작됩니다. 

42
00:02:04,147 --> 00:02:06,698
왜냐하면 우리는 0, 1, 2, 3, 4, 5, 

43
00:02:06,698 --> 00:02:09,060
6, 7, 8, 9라는 10개의 개별 숫자를 

44
00:02:09,060 --> 00:02:10,100
사용하기 때문입니다.

45
00:02:10,100 --> 00:02:12,459
숫자 세기의 리듬은 이 10개의 

46
00:02:12,459 --> 00:02:14,820
숫자를 모두 거치면서 시작됩니다.

47
00:02:14,820 --> 00:02:17,700
그런 다음 새 숫자가 부족해지면 다음 숫자인 

48
00:02:17,700 --> 00:02:20,580
10을 두 자리 숫자 1, 0으로 표현합니다.

49
00:02:20,580 --> 00:02:22,620
1은 10의 자리에 있다고 했는데, 

50
00:02:22,620 --> 00:02:25,682
이는 이미 지금까지 계산한 10개의 그룹을 캡슐화하고 

51
00:02:25,682 --> 00:02:28,539
1의 자리를 0으로 재설정할 수 있도록 하기 위한 

52
00:02:28,539 --> 00:02:29,560
것이기 때문입니다.

53
00:02:29,560 --> 00:02:34,066
숫자를 세는 리듬은 9를 세고, 10의 자리로, 

54
00:02:34,066 --> 00:02:38,238
9를 더 세고, 10의 자리로 넘기는 식으로 

55
00:02:38,238 --> 00:02:39,240
반복됩니다.

56
00:02:39,240 --> 00:02:44,440
글쎄요, 이 과정을 9번 반복한 후에는 백 자리로 

57
00:02:44,440 --> 00:02:50,011
롤오버합니다. 이 숫자는 100의 그룹 수를 추적하는 

58
00:02:50,011 --> 00:02:54,840
숫자이며 나머지 두 자리는 0으로 재설정됩니다.

59
00:02:54,840 --> 00:02:57,320
이런 식으로 계산의 리듬은 일종의 자기 유사성입니다.

60
00:02:57,320 --> 00:03:00,813
더 큰 규모로 축소하더라도 프로세스는 더 큰 

61
00:03:00,813 --> 00:03:04,028
롤오버 전에 무언가를 하고, 롤오버하고, 

62
00:03:04,028 --> 00:03:06,404
같은 일을 하고, 롤오버하고, 

63
00:03:06,404 --> 00:03:08,780
9번 반복하는 것처럼 보입니다.

64
00:03:08,780 --> 00:03:12,675
2진수라고도 알려진 이진법에서는 일반적으로 

65
00:03:12,675 --> 00:03:17,545
비트라고 불리는 두 자리 숫자(0과 1)로 제한됩니다.

66
00:03:17,545 --> 00:03:19,980
 이는 이진수의 약자입니다.

67
00:03:19,980 --> 00:03:25,160
결과적으로 계산할 때 항상 뒤집어야 합니다.

68
00:03:25,160 --> 00:03:28,942
0, 1을 센 후에는 이미 비트가 부족하므로 

69
00:03:28,942 --> 00:03:32,422
2의 자리로 돌아가서 1-0을 쓰고 이를 

70
00:03:32,422 --> 00:03:36,205
10으로 읽으려는 10진수 훈련 두뇌의 모든 

71
00:03:36,205 --> 00:03:39,685
충동에 저항해야 합니다. 대신 2에 0을 

72
00:03:39,685 --> 00:03:43,620
더한 1개의 그룹을 의미하는 것으로 이해하세요.

73
00:03:43,620 --> 00:03:48,103
그런 다음 3을 나타내는 1-1까지 증가하고 

74
00:03:48,103 --> 00:03:52,587
이미 다시 롤오버해야 하며, 그 2의 자리에 

75
00:03:52,587 --> 00:03:56,891
1이 있기 때문에 그것도 롤오버해야 하므로 

76
00:03:56,891 --> 00:04:00,478
1을 나타내는 1-0-0이 됩니다. 

77
00:04:00,478 --> 00:04:05,500
4개 더하기 0개의 그룹 2개 더하기 0개의 그룹.

78
00:04:05,500 --> 00:04:07,119
10진수의 숫자가 10의 거듭제곱을 

79
00:04:07,119 --> 00:04:08,738
나타내는 것과 마찬가지로, 2진수의 

80
00:04:08,738 --> 00:04:10,600
비트는 2의 다양한 거듭제곱을 나타냅니다.

81
00:04:10,600 --> 00:04:13,593
따라서 10의 자리, 100의 자리, 

82
00:04:13,593 --> 00:04:17,299
1000의 자리 등을 말하는 대신 2의 자리, 

83
00:04:17,299 --> 00:04:20,720
4의 자리, 8의 자리에 대해 이야기합니다.

84
00:04:20,720 --> 00:04:24,685
이제 계산의 리듬이 훨씬 빨라졌지만 

85
00:04:24,685 --> 00:04:27,660
거의 눈에 띄게 되었습니다.

86
00:04:27,660 --> 00:04:28,020
마지막을 뒤집고 한 번 뒤집습니다.

87
00:04:28,420 --> 00:04:28,940
마지막을 뒤집고 두 번 뒤집습니다.

88
00:04:28,940 --> 00:04:32,220
마지막을 뒤집고 한 번 뒤집습니다.

89
00:04:32,220 --> 00:04:33,340
마지막을 뒤집고 세 번 뒤집습니다.

90
00:04:33,340 --> 00:04:36,132
다시 말하지만, 이 패턴에는 

91
00:04:36,132 --> 00:04:39,100
특정한 자기 유사성이 있습니다.

92
00:04:39,100 --> 00:04:41,809
모든 규모에서 프로세스는 무언가를 수행하고, 

93
00:04:41,809 --> 00:04:45,060
롤오버한 다음, 동일한 작업을 다시 수행하는 것입니다.

94
00:04:45,060 --> 00:04:48,770
작은 규모에서 이진수로 1-1인 3까지 세는 

95
00:04:48,770 --> 00:04:52,777
것은 마지막 비트를 뒤집고 2의 비트로 롤오버한 

96
00:04:52,777 --> 00:04:56,340
다음 마지막 비트를 뒤집는 것을 의미합니다.

97
00:04:56,340 --> 00:05:02,844
1-1-1-1인 15까지 세는 것과 같이 더 큰 

98
00:05:02,844 --> 00:05:09,590
규모에서 프로세스는 마지막 3을 7까지 세고 8의 

99
00:05:09,590 --> 00:05:16,095
자리로 롤오버한 다음 마지막 3비트를 다시 세는 

100
00:05:16,095 --> 00:05:17,300
것입니다.

101
00:05:17,300 --> 00:05:22,452
8개의 연속된 1인 255까지 계산하면 마지막 

102
00:05:22,452 --> 00:05:28,001
7비트가 가득 찰 때까지 계산하고 128의 자리로 

103
00:05:28,001 --> 00:05:33,749
롤오버한 다음 마지막 7비트를 다시 계산하는 것처럼 

104
00:05:33,749 --> 00:05:34,740
보입니다.

105
00:05:34,740 --> 00:05:38,181
자, 그 짧은 소개를 통해 Keith가 나에게 

106
00:05:38,181 --> 00:05:41,755
보여준 놀라운 사실은 우리가 이 리듬을 사용하여 

107
00:05:41,755 --> 00:05:44,800
하노이의 탑을 해결할 수 있다는 것입니다.

108
00:05:44,800 --> 00:05:48,540
0부터 세기 시작합니다.

109
00:05:49,140 --> 00:05:51,449
마지막 비트만 0에서 1로 뒤집을 때마다 

110
00:05:51,449 --> 00:05:53,860
디스크 0을 오른쪽으로 한 페그 이동합니다.

111
00:05:53,860 --> 00:05:56,310
이미 가장 오른쪽 말뚝에 있었다면 첫 

112
00:05:56,310 --> 00:05:58,760
번째 말뚝에 다시 고리를 걸면 됩니다.

113
00:05:58,760 --> 00:06:01,697
두 자리로 한 번 롤오버하면, 

114
00:06:01,697 --> 00:06:06,880
즉 마지막 두 비트를 뒤집으면 디스크 1이 이동됩니다.

115
00:06:06,880 --> 00:06:08,420
그것을 어디로 옮기느냐고 물어볼 수도 있습니다.

116
00:06:08,420 --> 00:06:11,484
선택의 여지가 없고 디스크 0 위에 

117
00:06:11,484 --> 00:06:15,008
놓을 수 없으며 다른 페그가 하나뿐이므로 

118
00:06:15,008 --> 00:06:18,380
강제로 이동해야 하는 위치로 이동합니다.

119
00:06:18,380 --> 00:06:21,867
그런 다음 1-1까지 계산하면 마지막 

120
00:06:21,867 --> 00:06:26,020
비트만 뒤집어서 디스크 0을 다시 이동합니다.

121
00:06:28,800 --> 00:06:31,215
그런 다음 이진수 계산이 4의 자리로 두 번 

122
00:06:31,215 --> 00:06:33,920
롤오버되면 디스크 2를 이동하면 패턴이 이와 같이 

123
00:06:33,920 --> 00:06:34,500
계속됩니다.

124
00:06:34,500 --> 00:06:36,300
마지막을 뒤집고 디스크 0을 이동합니다.

125
00:06:36,300 --> 00:06:37,900
마지막 두 개를 뒤집고 디스크 1을 이동합니다.

126
00:06:37,900 --> 00:06:38,340
마지막을 뒤집고 디스크 0을 이동합니다.

127
00:06:38,380 --> 00:06:40,417
그리고 여기서 우리는 8의 자리까지 세 번 

128
00:06:40,417 --> 00:06:42,880
롤오버해야 하며 이는 디스크 3의 이동에 해당합니다.

129
00:06:42,880 --> 00:06:44,734
뭔가 마법같은 느낌이 있어요. 

130
00:06:44,734 --> 00:06:47,680
처음 봤을 때 이건 안 되겠다는 생각이 들었어요.

131
00:06:47,680 --> 00:06:51,352
이것이 어떻게 작동하는지, 왜 작동하는지 모르겠습니다.

132
00:06:51,352 --> 00:06:54,168
 이제 알지만, 보면 정말 마법같습니다. 

133
00:06:54,168 --> 00:06:57,351
제가 이것을 가르칠 때 애니메이션을 함께 만든 

134
00:06:57,351 --> 00:07:00,534
기억이 나네요. 알다시피, 나는 이것이 어떻게 

135
00:07:00,534 --> 00:07:03,840
작동하는지 알고, 그 안에 있는 모든 것을 알고 

136
00:07:03,840 --> 00:07:07,390
있습니다. 그냥 앉아서 진행되는 것을 지켜보는 것은 

137
00:07:07,390 --> 00:07:08,860
여전히 재미 있습니다.

138
00:07:08,860 --> 00:07:08,860
오 예.

139
00:07:08,860 --> 00:07:10,337
내 말은, 이것이 항상 법적 조치를 취할 

140
00:07:10,337 --> 00:07:11,880
것인지가 처음에는 명확하지 않다는 것입니다.

141
00:07:11,880 --> 00:07:14,486
예를 들어, 8의 자리로 롤오버할 때마다 

142
00:07:14,486 --> 00:07:16,866
해당 디스크 3이 반드시 이동을 위해 

143
00:07:16,866 --> 00:07:19,700
비워질 것이라는 것을 어떻게 알 수 있습니까?

144
00:07:19,700 --> 00:07:23,627
동시에 솔루션은 다음과 같은 질문을 즉시 제기합니다. 

145
00:07:23,627 --> 00:07:26,508
이것이 어디서 왔는지, 왜 작동하는지, 

146
00:07:26,508 --> 00:07:30,305
2의 n-1 단계를 수행하는 것보다 더 나은 방법이 

147
00:07:30,305 --> 00:07:30,960
있습니까?

148
00:07:30,960 --> 00:07:34,325
이는 하노이 타워를 해결할 뿐만 아니라 가능한 

149
00:07:34,325 --> 00:07:38,080
가장 효율적인 방법으로 해결된다는 것이 밝혀졌습니다.

150
00:07:38,080 --> 00:07:39,955
이것이 왜 작동하는지, 어떻게 작동하는지, 

151
00:07:39,955 --> 00:07:41,831
도대체 무슨 일이 일어나고 있는지 이해하는 

152
00:07:41,831 --> 00:07:43,707
것은 CS 담당자가 재귀적 관점이라고 부를 

153
00:07:43,707 --> 00:07:45,740
수 있는 퍼즐에 대한 특정 관점으로 귀결됩니다.

154
00:07:45,740 --> 00:07:48,042
디스크 3은 2, 1, 0을 생각하고 있습니다. 

155
00:07:48,042 --> 00:07:50,173
마치 당신이 나에게서 떨어져야 하는 것처럼, 

156
00:07:50,173 --> 00:07:51,964
이 정도의 무게와 압력으로 인해 제가 

157
00:07:51,964 --> 00:07:53,840
실제로 기능할 수 없는 것처럼 말입니다.

158
00:07:53,840 --> 00:07:56,479
따라서 디스크 3의 관점에서 볼 때 디스크 

159
00:07:56,479 --> 00:07:59,120
3이 어떻게 여기에 도달하는지 알고 싶다면 

160
00:07:59,120 --> 00:08:01,760
디스크 2, 1, 0이 스핀들 B에 어떻게 

161
00:08:01,760 --> 00:08:03,960
도달해야 하는지는 상관하지 않습니다.

162
00:08:03,960 --> 00:08:05,960
그래야만 움직일 수 있습니다.

163
00:08:06,700 --> 00:08:07,650
이 디스크 중 하나라도 3개 

164
00:08:07,650 --> 00:08:08,720
위에 있으면 이동할 수 없습니다.

165
00:08:08,720 --> 00:08:10,263
이들 중 하나라도 스핀들 C에 

166
00:08:10,263 --> 00:08:12,080
있으면 그곳으로 이동할 수 없습니다.

167
00:08:12,080 --> 00:08:13,760
그래서 어떻게든 우리는 2, 1, 0을 빼내야 합니다.

168
00:08:13,760 --> 00:08:17,100
그런 다음 디스크 3을 저기로 이동할 수 있습니다.

169
00:08:17,100 --> 00:08:17,740
그리고 디스크 3에서는 '설

170
00:08:17,740 --> 00:08:18,380
정되었습니다'라고 말합니다.

171
00:08:18,580 --> 00:08:21,340
다시는 나를 움직일 필요가 없습니다.

172
00:08:21,340 --> 00:08:23,060
다른 사람들은 여기까지 가는 방법만 알아내면 됩니다.

173
00:08:23,060 --> 00:08:25,438
그리고 어떤 의미에서는 이제 동일한 

174
00:08:25,438 --> 00:08:27,580
문제의 더 작은 버전이 있습니다.

175
00:08:27,580 --> 00:08:29,012
이제 디스크 0, 1, 2가 스핀들 

176
00:08:29,012 --> 00:08:30,660
B에 있으므로 이를 C로 가져와야 합니다.

177
00:08:30,660 --> 00:08:33,241
그래서 아이디어는 하나의 디스크에만 집중하고 

178
00:08:33,241 --> 00:08:35,719
이 디스크가 작동하도록 하려면 무엇을 해야 

179
00:08:35,719 --> 00:08:37,991
하는지 생각하면 더 큰 문제를 약간 더 

180
00:08:37,991 --> 00:08:40,159
작은 문제로 바꿀 수 있다는 것입니다.

181
00:08:40,159 --> 00:08:42,240
그러면 어떻게 해결하나요?

182
00:08:42,260 --> 00:08:45,120
글쎄, 그것은 똑같은 것입니다.

183
00:08:45,120 --> 00:08:47,681
디스크 2가 디스크 1과 디스크 0이라고 

184
00:08:47,681 --> 00:08:50,020
말하면 그것은 당신이 아니라 나입니다.

185
00:08:50,020 --> 00:08:50,020
단지 공간이 좀 필요할 뿐이에요.

186
00:08:50,020 --> 00:08:50,020
내리세요.

187
00:08:50,020 --> 00:08:52,260
그들은 어딘가로 이동해야 합니다.

188
00:08:52,260 --> 00:08:53,380
그러면 디스크 2가 필요한 곳으로 이동할 수 있습니다.

189
00:08:53,980 --> 00:08:54,558
그러면 디스크 1과 0이 이 

190
00:08:54,558 --> 00:08:55,100
작업을 수행할 수 있습니다.

191
00:08:55,100 --> 00:08:57,233
그러나 흥미로운 점은 모든 단일 디스크가 

192
00:08:57,233 --> 00:08:59,460
거의 동일한 전략을 가지고 있다는 것입니다.

193
00:08:59,460 --> 00:09:00,980
다들 나보다 위에 있는 사람들은 내리라고 하더군요.

194
00:09:00,980 --> 00:09:03,240
그럼 나는 움직일 것이다.

195
00:09:03,240 --> 00:09:04,900
좋아, 모두 다시 모여라.

196
00:09:04,900 --> 00:09:07,498
그러한 통찰력을 알면 하노이의 탑을 해결할 

197
00:09:07,498 --> 00:09:09,771
수 있는 코드를 작성할 수 있습니다. 

198
00:09:09,771 --> 00:09:12,261
예를 들어 5~6줄의 코드처럼 코드 줄에 

199
00:09:12,261 --> 00:09:14,860
대한 지적 투자 비율이 가장 높을 것입니다.

200
00:09:14,860 --> 00:09:18,080
그리고 조금만 생각해 보면 이것이 

201
00:09:18,080 --> 00:09:21,640
가장 효율적인 솔루션임이 분명해집니다.

202
00:09:21,640 --> 00:09:22,611
모든 단계에서 당신은 당신에게 

203
00:09:22,611 --> 00:09:23,640
강요된 일을 하고 있을 뿐입니다.

204
00:09:23,640 --> 00:09:25,337
디스크 3을 이동하려면 먼저 

205
00:09:25,337 --> 00:09:27,460
디스크 0부터 2까지를 꺼야 합니다.

206
00:09:27,460 --> 00:09:27,760
그리고 디스크 3을 옮겨야 합니다.

207
00:09:27,760 --> 00:09:29,443
그런 다음 디스크 0부터 2까지 

208
00:09:29,443 --> 00:09:30,940
다시 디스크로 옮겨야 합니다.

209
00:09:31,020 --> 00:09:33,600
이러한 관점에서는 비효율적일 여지가 전혀 없습니다.

210
00:09:33,600 --> 00:09:34,615
그렇다면 이진수 계산이 이 알고리즘을 

211
00:09:34,615 --> 00:09:35,340
포착하는 이유는 무엇입니까?

212
00:09:36,320 --> 00:09:39,553
음, 여기서 일어나는 일은 하위 문제를 해결하고 큰 

213
00:09:39,553 --> 00:09:42,563
디스크를 이동한 다음 다시 하위 문제를 해결하는 

214
00:09:42,563 --> 00:09:45,462
패턴이 이진수 계산 패턴과 완벽하게 유사하다는 

215
00:09:45,462 --> 00:09:46,020
것입니다.

216
00:09:46,020 --> 00:09:49,462
일정 금액을 세고, 뒤집어서 

217
00:09:49,462 --> 00:09:53,120
같은 금액까지 다시 세어보세요.

218
00:09:53,120 --> 00:09:55,748
그리고 이 하노이 타워 알고리즘과 이진수 

219
00:09:55,748 --> 00:09:58,376
계산은 둘 다 자체 유사 프로세스입니다. 

220
00:09:58,376 --> 00:10:00,889
즉, 축소하여 더 큰 2의 거듭제곱으로 

221
00:10:00,889 --> 00:10:03,632
계산하거나 더 많은 디스크로 하노이 타워를 

222
00:10:03,632 --> 00:10:07,060
풀면 둘 다 여전히 동일한 구조를 갖는다는 의미입니다.

223
00:10:07,060 --> 00:10:09,300
하위 문제, 어떤 일을 하세요, 하위 문제.

224
00:10:09,880 --> 00:10:12,350
예를 들어, 꽤 작은 규모에서 하노이 

225
00:10:12,350 --> 00:10:15,761
타워를 두 개의 디스크로 해결하면 디스크 0 이동, 

226
00:10:15,761 --> 00:10:18,702
디스크 1 이동, 디스크 0 이동은 이진수로 

227
00:10:18,702 --> 00:10:20,820
최대 3까지 계산하여 반영됩니다.

228
00:10:20,820 --> 00:10:21,944
마지막 비트를 뒤집고 한 번 

229
00:10:21,944 --> 00:10:23,420
뒤집은 다음 마지막 비트를 뒤집습니다.

230
00:10:23,420 --> 00:10:26,135
약간 더 큰 규모에서 디스크 3개로 하노이 

231
00:10:26,135 --> 00:10:29,190
타워를 해결하는 것은 디스크 2개를 풀고 디스크 

232
00:10:29,190 --> 00:10:32,245
2번을 이동한 다음 다시 디스크 2개를 해결하는 

233
00:10:32,245 --> 00:10:35,300
데 필요한 모든 작업을 수행하는 것처럼 보입니다.

234
00:10:35,300 --> 00:10:37,340
마찬가지로, 이진수로 최대 111을 세는 

235
00:10:37,340 --> 00:10:39,204
것은 최대 3을 세고 세 비트를 모두 

236
00:10:39,204 --> 00:10:41,600
롤오버한 다음 세 개를 더 세는 것을 포함합니다.

237
00:10:41,600 --> 00:10:43,717
모든 규모에서 두 프로세스 모두 

238
00:10:43,717 --> 00:10:45,600
이와 동일한 분석을 갖습니다.

239
00:10:45,600 --> 00:10:49,936
따라서 어떤 의미에서 이 이진법이 작동하는 이유 

240
00:10:49,936 --> 00:10:54,273
또는 적어도 설명은 설명이 없는 것 같지만 가장 

241
00:10:54,273 --> 00:10:58,289
자연스러운 것은 이러한 이진수를 생성하는 데 

242
00:10:58,289 --> 00:11:02,304
사용하는 패턴이 정확히 동일하다는 것입니다. 

243
00:11:02,304 --> 00:11:06,320
구조는 하노이 타워에 사용할 패턴이므로 비트 

244
00:11:06,320 --> 00:11:10,656
뒤집기를 보면 이 프로세스가 효과적으로 역전되는 

245
00:11:10,656 --> 00:11:11,460
것입니다.

246
00:11:11,460 --> 00:11:12,249
어떤 프로세스에서 이러한 현상이 

247
00:11:12,249 --> 00:11:12,820
발생했다는 말씀이신가요?

248
00:11:12,820 --> 00:11:15,538
마치 제가 이 비트를 뒤집어서 이것을 제공하는 

249
00:11:15,538 --> 00:11:17,943
방법을 이해하려고 노력하는 것처럼 하노이 

250
00:11:17,943 --> 00:11:20,243
타워에 대한 재귀 알고리즘을 효과적으로 

251
00:11:20,243 --> 00:11:23,380
역전시키는 것입니다. 이것이 바로 작동하는 이유입니다.

252
00:11:24,120 --> 00:11:25,220
정말 멋지죠?

253
00:11:25,220 --> 00:11:28,360
하지만 실제로는 더 시원해집니다.

254
00:11:28,360 --> 00:11:30,550
나는 이것이 시에르핀스키의 삼각형과 

255
00:11:30,550 --> 00:11:32,960
어떤 관련이 있는지조차 알지 못했습니다.

256
00:11:32,960 --> 00:11:34,384
이것이 바로 제가 후속 비디오 

257
00:11:34,384 --> 00:11:36,060
파트 2에서 하려고 하는 작업입니다.

258
00:11:36,060 --> 00:11:37,138
Patreon에서 이 동영상을 후원해 

259
00:11:37,138 --> 00:11:38,320
주시는 모든 분들께 진심으로 감사드립니다.

260
00:11:38,320 --> 00:11:41,070
방금 Essence of Calculus의 첫 번째 

261
00:11:41,070 --> 00:11:43,630
장을 마쳤고 지금 두 번째 장을 작업 중입니다. 

262
00:11:43,630 --> 00:11:45,811
몇 달 후에 전체 시리즈를 게시하기 전에 

263
00:11:45,811 --> 00:11:48,561
Patreon 지지자들이 이 동영상을 먼저 접할 수 

264
00:11:48,561 --> 00:11:49,320
있을 것입니다.

265
00:11:49,500 --> 00:11:52,846
이 영상과 다음 영상도 부분적으로 Desmos의 

266
00:11:52,846 --> 00:11:56,069
지원을 받고 있습니다. 다음 영상을 보기 전에 

267
00:11:56,069 --> 00:11:59,044
잠시 시간을 내어 Desmos가 누구인지, 

268
00:11:59,044 --> 00:12:02,020
채용 중인지에 대해 조금 공유하고 싶습니다.

269
00:12:02,020 --> 00:12:03,200
그래서 Desmos는 실제로 정말 멋집니다.

270
00:12:03,200 --> 00:12:06,255
그들은 교실을 위한 대화형 수학 

271
00:12:06,255 --> 00:12:10,160
활동과 교사를 위한 도구를 많이 만듭니다.

272
00:12:10,160 --> 00:12:11,339
그들이 제공하는 것의 진정한 

273
00:12:11,339 --> 00:12:12,520
핵심은 교실 활동에 있습니다.

274
00:12:12,520 --> 00:12:15,001
저는 이러한 활동이 교육학적 관점에서 얼마나 

275
00:12:15,001 --> 00:12:17,780
세심하게 계획되어 있는지에 깊은 인상을 받았습니다.

276
00:12:18,820 --> 00:12:21,382
팀은 자신의 업무를 명확하게 알고 있으며 학생과 

277
00:12:21,382 --> 00:12:23,945
교사의 삶에 변화를 가져올 수 있는 위치를 알고 

278
00:12:23,945 --> 00:12:24,420
있습니다.

279
00:12:24,420 --> 00:12:25,680
그리고 내가 말했듯이, 그들은 채용 중입니다.

280
00:12:25,680 --> 00:12:27,954
그들은 엔지니어링 인재, 디자이너, 

281
00:12:27,954 --> 00:12:31,139
교사 또는 자신이 원하는 일과 일치하는 기타 기술 

282
00:12:31,139 --> 00:12:33,982
세트 등 더 좋은 인재를 영입하기 위해 항상 

283
00:12:33,982 --> 00:12:35,120
노력하고 있습니다.

284
00:12:35,120 --> 00:12:38,449
여러분 중 누군가가 여기에 참여하여 교사와 

285
00:12:38,449 --> 00:12:41,917
학생을 위한 훌륭한 도구를 만드는 데 도움을 

286
00:12:41,917 --> 00:12:45,940
주고 싶다면 설명에 링크된 채용 페이지를 확인하세요.

287
00:12:45,940 --> 00:12:46,985
개인적으로는 정말 의미있는 일을 

288
00:12:46,985 --> 00:12:47,740
하고 있다고 생각합니다.

289
00:12:47,740 --> 00:12:51,060
나는 그들의 활동이 학생들을 위한 진정으로 좋은 수학 

290
00:12:51,060 --> 00:12:53,163
직관을 구축하고 있다고 생각하며, 

291
00:12:53,163 --> 00:12:56,152
세상은 그들이 하는 방식으로 교육을 향한 노력을 

292
00:12:56,152 --> 00:12:59,251
가리키는 몇몇 재능 있는 사람들을 더 많이 사용할 

293
00:12:59,251 --> 00:13:00,580
수 있다고 생각합니다.

294
00:13:00,580 --> 00:13:25,079
좋아요, 그럼 다음 영상에서 뵙겠습니다. 

295
00:13:25,079 --> 00:13:51,708
여러분은 이 내용이 정말 마음에 드실 거라고 

296
00:13:51,708 --> 00:13:58,100
생각합니다.

