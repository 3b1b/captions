1
00:00:00,000 --> 00:00:08,720
Сегодня я хочу поделиться с вами изящным способом решения

2
00:00:08,720 --> 00:00:11,240
головоломки Ханойские башни, просто посчитав в другой системе счисления.

3
00:00:11,240 --> 00:00:16,720
И что удивительно, все это связано с поиском кривой, заполняющей треугольник Серпинского.

4
00:00:16,720 --> 00:00:20,920
Я узнал об этом от моего бывшего преподавателя информатики, его зовут Кит Шварц, и я

5
00:00:20,920 --> 00:00:24,840
должен сказать, что этот человек — один из лучших преподавателей, которых я когда-либо встречал.

6
00:00:24,840 --> 00:00:28,560
На самом деле я записал часть разговора, в котором он показывал мне эти

7
00:00:28,560 --> 00:00:42,520
вещи, чтобы вы, ребята, могли напрямую услышать кое-что из того, что он описал.

8
00:00:42,520 --> 00:00:46,840
Если вы не знакомы, давайте просто объясним, что

9
00:00:46,840 --> 00:00:54,440
на самом деле представляет собой головоломка «Ханойские башни».

10
00:00:54,440 --> 00:00:57,880
Вы думаете, что эти диски имеют отверстие посередине,

11
00:00:57,880 --> 00:00:59,260
чтобы их можно было надеть на крючок.

12
00:00:59,260 --> 00:01:05,040
Изображенная здесь установка имеет пять дисков, которые я обозначим 0, 1, 2,

13
00:01:05,040 --> 00:01:24,120
3, 4, но в принципе вы можете иметь столько дисков, сколько захотите.

14
00:01:24,120 --> 00:01:29,440
Например, ваш первый ход должен включать в себя перемещение диска 0, поскольку на любом

15
00:01:29,440 --> 00:01:33,320
другом диске есть что-то, что нужно убрать с дороги, прежде чем он сможет двигаться.

16
00:01:33,320 --> 00:01:38,000
После этого вы можете переместить диск 1, но он должен идти на

17
00:01:38,000 --> 00:01:44,040
любую привязку, на которой в данный момент нет диска 0, поскольку в

18
00:01:44,040 --> 00:01:45,040
противном случае вы бы поместили диск большего размера на меньший, что запрещено.

19
00:01:45,040 --> 00:01:49,600
Если вы никогда не видели этого раньше, я настоятельно рекомендую вам

20
00:01:49,600 --> 00:02:00,320
сделать паузу, вытащить несколько книг разного размера и попробовать это самостоятельно.

21
00:02:00,320 --> 00:02:04,760
Теперь Кит показал мне кое-что действительно удивительное в этой головоломке:

22
00:02:04,760 --> 00:02:10,200
ее можно решить, просто посчитав в двоичном формате и

23
00:02:10,200 --> 00:02:12,480
связав ритм этого счета с определенным ритмом движений диска.

24
00:02:12,480 --> 00:02:16,420
Для тех, кто не знаком с двоичным

25
00:02:16,420 --> 00:02:17,420
кодом, я сначала сделаю здесь краткий обзор.

26
00:02:17,420 --> 00:02:21,260
На самом деле, даже если вы знакомы с двоичными числами, я хочу объяснить это, сосредоточив

27
00:02:21,260 --> 00:02:26,560
внимание на ритме счета, о котором вы, возможно, задумывались, а могли и не задумываться раньше.

28
00:02:26,560 --> 00:02:30,500
Любое описание двоичного кода обычно начинается с самоанализа нашего обычного способа представления

29
00:02:30,500 --> 00:02:36,100
чисел, который мы называем десятичной системой, поскольку мы используем 10 отдельных цифр:

30
00:02:36,100 --> 00:02:38,560
0, 1, 2, 3, 4, 5, 6, 7, 8, 9. .

31
00:02:38,560 --> 00:02:44,220
Ритм счета начинается с прохождения всех 10 этих цифр.

32
00:02:45,220 --> 00:02:52,320
Затем, когда новые цифры закончатся, вы выражаете следующее число 10 двумя цифрами 1 и 0.

33
00:02:52,320 --> 00:02:56,760
Вы говорите, что 1 находится в разряде десятков, поскольку оно предназначено для инкапсуляции группы из

34
00:02:56,760 --> 00:03:02,540
10, до которой вы уже посчитали, при этом освобождая место единиц для сброса в 0.

35
00:03:02,540 --> 00:03:08,280
Ритм счета повторяется такой: счет до 9, переход на разряд десятков,

36
00:03:08,280 --> 00:03:13,000
счет еще на 9, переход на разряд десятков и т. д.

37
00:03:13,000 --> 00:03:19,800
Что ж, повторив этот процесс 9 раз, вы переходите к

38
00:03:19,800 --> 00:03:24,640
разряду сотен, цифре, которая отслеживает, сколько групп по 100 вы

39
00:03:24,640 --> 00:03:30,040
попали, освобождая две другие цифры для сброса до 0.

40
00:03:30,040 --> 00:03:34,060
Таким образом, ритм счета является своего рода самоподобным.

41
00:03:34,060 --> 00:03:38,560
Даже если вы увеличите масштаб, процесс будет выглядеть как

42
00:03:39,120 --> 00:03:43,960
что-то сделать, перевернуться, сделать то же самое, перевернуться и

43
00:03:43,960 --> 00:03:49,960
повторить 9 раз, прежде чем перевернуться еще больше.

44
00:03:49,960 --> 00:03:56,200
В двоичном формате, также известном как основание 2, вы ограничиваетесь двумя цифрами,

45
00:03:56,200 --> 00:03:59,700
0 и 1, обычно называемыми битами, что является сокращением от двоичных цифр.

46
00:03:59,700 --> 00:04:03,960
В результате, когда вы считаете, вам приходится все время переворачиваться.

47
00:04:03,960 --> 00:04:08,080
После подсчета 0, 1 у вас уже закончились биты, поэтому вам нужно перевернуться на двойку,

48
00:04:08,600 --> 00:04:13,440
записать 1-0 и сопротивляться всякому побуждению в вашем натренированном десятичной системе мозгу прочитать это как

49
00:04:13,440 --> 00:04:20,120
10, и вместо этого поймите, что это означает 1 группу из 2 плюс 0.

50
00:04:20,120 --> 00:04:26,400
Затем увеличьте число до 1-1, что соответствует 3, и вам уже придется перевернуть его снова,

51
00:04:26,400 --> 00:04:30,920
а поскольку на месте этих двух стоит 1, это тоже должно перевернуться, что дает

52
00:04:30,920 --> 00:04:37,800
вам 1-0-0, что представляет собой 1. группа 4 плюс 0 группа 2 плюс 0.

53
00:04:37,800 --> 00:04:44,660
Точно так же, как цифры в десятичной системе представляют степени

54
00:04:44,660 --> 00:04:46,380
10, биты в базе 2 представляют разные степени 2.

55
00:04:46,380 --> 00:04:50,360
Поэтому вместо того, чтобы говорить о 10-м месте, 100-м месте, 1000-м месте и

56
00:04:50,360 --> 00:04:55,800
тому подобном, вы говорите о 2-м месте, 4-м месте и 8-м месте.

57
00:04:55,800 --> 00:05:01,080
Ритм счета теперь намного быстрее, но это делает его чуть ли не более заметным.

58
00:05:01,080 --> 00:05:02,940
Переверните последний, переверните один раз.

59
00:05:02,940 --> 00:05:04,680
Переверните последний, переверните дважды.

60
00:05:04,680 --> 00:05:06,380
Переверните последний, переверните один раз.

61
00:05:06,380 --> 00:05:09,100
Переверните последний, переверните три раза.

62
00:05:09,100 --> 00:05:13,980
Опять же, в этом шаблоне есть определенное самоподобие.

63
00:05:13,980 --> 00:05:22,480
На каждом масштабе процесс заключается в том, чтобы что-то сделать, перевернуться, а затем повторить то же самое еще раз.

64
00:05:22,480 --> 00:05:27,980
В мелком масштабе, скажем, при счете до 3, что в двоичном формате равно 1:1,

65
00:05:27,980 --> 00:05:33,320
это означает переворот последнего бита, переход к двойке, а затем переворот последнего бита.

66
00:05:33,320 --> 00:05:40,000
В более крупном масштабе, например, при счете до 15, то есть 1-1-1-1, процесс состоит в том, чтобы позволить последним

67
00:05:40,000 --> 00:05:47,260
3 битам считать до 7, перевернуться на 8-е место, а затем позволить последним 3 битам подсчитать снова. .

68
00:05:47,260 --> 00:05:53,040
Считая до 255, то есть 8 последовательных единиц, это похоже на то,

69
00:05:53,040 --> 00:05:57,420
что последние 7 бит подсчитываются до тех пор, пока они не заполнятся,

70
00:05:57,420 --> 00:06:00,080
с переходом на место 128, а затем снова подсчитываются последним 7 битам.

71
00:06:01,080 --> 00:06:05,680
Итак, после этого мини-представления, Кит показал мне удивительный факт:

72
00:06:05,680 --> 00:06:10,440
мы можем использовать этот ритм для решения башен Ханоя.

73
00:06:10,440 --> 00:06:12,720
Вы начинаете счет с 0.

74
00:06:12,720 --> 00:06:18,640
Всякий раз, когда вы меняете только этот последний бит с

75
00:06:18,640 --> 00:06:22,420
0 на 1, переместите диск 0 на один колышек вправо.

76
00:06:22,420 --> 00:06:29,140
Если он уже был на самой правой привязке, вы просто возвращаете его к первой привязке.

77
00:06:29,200 --> 00:06:35,700
Если вы перевернетесь один раз на место двойки, то

78
00:06:35,700 --> 00:06:37,740
есть перевернете последние два бита, вы переместите диск 1.

79
00:06:37,740 --> 00:06:39,740
Куда его переместить, спросите вы?

80
00:06:39,740 --> 00:06:43,220
У вас нет выбора, вы не можете поместить его поверх диска 0, и есть

81
00:06:43,220 --> 00:06:47,100
только одна привязка, поэтому вы перемещаете его туда, где вы вынуждены его переместить.

82
00:06:47,100 --> 00:06:51,220
После этого, считая до 1-1, нужно просто перевернуть

83
00:06:51,220 --> 00:06:52,900
последний бит, чтобы вы снова переместили диск 0.

84
00:06:52,900 --> 00:06:59,620
Затем, когда ваш двоичный счет дважды перевернется на место четверки,

85
00:06:59,620 --> 00:07:01,440
переместите диск 2, и последовательность действий продолжится следующим образом.

86
00:07:01,440 --> 00:07:03,460
Переверните последний, переместите диск 0.

87
00:07:03,460 --> 00:07:05,900
Переверните последние два, переместите диск 1.

88
00:07:05,900 --> 00:07:08,080
Переверните последний, переместите диск 0.

89
00:07:08,080 --> 00:07:12,420
И здесь нам придется три раза перевернуться

90
00:07:12,420 --> 00:07:14,100
на восьмерку, что соответствует перемещению диска 3.

91
00:07:14,100 --> 00:07:18,180
В этом есть что-то волшебное, например, когда я впервые

92
00:07:18,180 --> 00:07:19,180
увидел это, я подумал: «Это не может сработать».

93
00:07:19,180 --> 00:07:22,500
Я не знаю, как это работает, я не знаю, почему это работает, теперь я знаю, но

94
00:07:22,500 --> 00:07:28,100
это просто волшебно, когда вы это видите, и я помню, как собирал для этого анимацию,

95
00:07:28,100 --> 00:07:32,540
когда преподавал это, и просто типа: вы знаете, я знаю, как это работает, я знаю все,

96
00:07:32,540 --> 00:07:36,260
что в этом есть, все равно весело просто сидеть и просто смотреть, как это происходит.

97
00:07:36,260 --> 00:07:37,260
Ах, да.

98
00:07:37,260 --> 00:07:41,800
Я имею в виду, что поначалу даже неясно, всегда ли это приведет к законным действиям.

99
00:07:41,800 --> 00:07:45,980
Например, откуда вы знаете, что каждый раз, когда вы перекатываетесь

100
00:07:45,980 --> 00:07:49,820
на цифру 8, диск 3 обязательно освобождается для перемещения?

101
00:07:49,820 --> 00:07:53,900
В то же время решение сразу же вызывает такие вопросы, как:

102
00:07:53,900 --> 00:07:58,300
откуда это взялось, почему это работает и есть ли лучший способ

103
00:07:58,300 --> 00:08:00,560
сделать это, чем выполнять 2 из n минус 1 шагов?

104
00:08:00,560 --> 00:08:05,140
Оказывается, это не только решает проблему «Ханойские башни»,

105
00:08:05,140 --> 00:08:07,180
но и делает это максимально эффективным способом.

106
00:08:07,180 --> 00:08:10,680
Понимание того, почему это работает, как это работает и что, черт возьми, происходит, сводится к

107
00:08:10,680 --> 00:08:16,860
определенному взгляду на головоломку, который специалисты по компьютерной технике могли бы назвать рекурсивной перспективой.

108
00:08:16,900 --> 00:08:21,420
Диск 3 думает: «ОК, 2, 1 и 0», как будто тебе придется от меня

109
00:08:21,420 --> 00:08:25,020
оторваться, как будто я не могу функционировать под таким большим весом и давлением.

110
00:08:25,020 --> 00:08:28,660
Итак, с точки зрения диска 3, если вы хотите выяснить, как диск 3 сюда попадет, каким-то

111
00:08:28,660 --> 00:08:33,900
образом, мне все равно, как, диски 2, 1 и 0 должны добраться до шпинделя B.

112
00:08:33,900 --> 00:08:36,020
Только так он может двигаться.

113
00:08:36,020 --> 00:08:38,060
Если какой-либо из этих дисков находится поверх третьего, он не может двигаться.

114
00:08:38,060 --> 00:08:41,000
Если какой-либо из них находится в шпинделе C, он не может туда переместиться.

115
00:08:41,000 --> 00:08:43,940
Итак, каким-то образом нам нужно получить скидку 2, 1 и 0.

116
00:08:43,980 --> 00:08:48,180
Сделав это, мы сможем переместить туда диск 3.

117
00:08:48,180 --> 00:08:50,020
И тут диск 3 говорит: я готов.

118
00:08:50,020 --> 00:08:51,940
Тебе больше никогда не придется меня перемещать.

119
00:08:51,940 --> 00:08:54,340
Остальные просто думают, как сюда добраться.

120
00:08:54,340 --> 00:08:57,540
И в каком-то смысле теперь у вас есть уменьшенная версия той же проблемы.

121
00:08:57,540 --> 00:09:02,380
Теперь у вас есть диски 0, 1 и 2, находящиеся на шпинделе B, вам нужно перенести их в C. Идея состоит

122
00:09:02,380 --> 00:09:06,180
в том, что если я просто сосредоточусь на одном диске и подумаю о том, что мне

123
00:09:06,180 --> 00:09:10,680
нужно сделать, чтобы этот диск заработал, я смогу превратить свою большую проблему в нечто немного меньшее.

124
00:09:10,680 --> 00:09:12,020
И как мне тогда это решить?

125
00:09:12,020 --> 00:09:13,520
Ну, это точно то же самое.

126
00:09:13,600 --> 00:09:17,160
Если диск 2 скажет: диск 1 и диск 0, то это не ты, это я.

127
00:09:17,160 --> 00:09:18,160
Мне просто нужно немного места.

128
00:09:18,160 --> 00:09:19,160
Отправиться.

129
00:09:19,160 --> 00:09:20,520
Им нужно куда-то переехать.

130
00:09:20,520 --> 00:09:23,040
Тогда диск 2 сможет переместиться туда, куда ему нужно.

131
00:09:23,040 --> 00:09:25,120
Тогда диски 1 и 0 смогут это сделать.

132
00:09:25,120 --> 00:09:31,040
Но интересно то, что каждый диск имеет практически одинаковую стратегию.

133
00:09:31,040 --> 00:09:33,220
Они все говорят: все, кто выше меня, уходите.

134
00:09:33,220 --> 00:09:34,220
Тогда я собираюсь переехать.

135
00:09:34,220 --> 00:09:36,560
Хорошо, все возвращаются.

136
00:09:36,560 --> 00:09:40,600
Когда вы поймете это понимание, вы сможете написать что-то, что решит

137
00:09:40,600 --> 00:09:46,720
ханойские башни, например, пять или шесть строк кода, что, вероятно, имеет

138
00:09:46,720 --> 00:09:50,680
самое высокое соотношение интеллектуальных инвестиций к строкам кода за всю историю.

139
00:09:50,680 --> 00:09:55,800
И если немного подумать, становится ясно, что

140
00:09:55,800 --> 00:09:56,800
это должно быть наиболее эффективное решение.

141
00:09:56,800 --> 00:10:00,060
На каждом шагу вы делаете только то, что вам навязывают.

142
00:10:00,060 --> 00:10:04,440
Вам необходимо отключить диски с 0 по 2, прежде чем вы сможете переместить диск 3.

143
00:10:04,440 --> 00:10:06,520
И вам нужно переместить диск 3.

144
00:10:06,520 --> 00:10:09,680
И тогда вам придется переместить на него диски с 0 по 2.

145
00:10:09,760 --> 00:10:15,400
С этой точки зрения просто нет места неэффективности.

146
00:10:15,400 --> 00:10:18,920
Так почему же двоичный подсчет фиксирует этот алгоритм?

147
00:10:18,920 --> 00:10:23,480
Что здесь происходит, так это то, что этот

148
00:10:23,480 --> 00:10:28,480
шаблон решения подзадачи, перемещения большого диска и последующего

149
00:10:28,480 --> 00:10:30,160
решения подзадачи снова прекрасно параллелен шаблону двоичного счета.

150
00:10:30,160 --> 00:10:35,280
Подсчитайте какую-то сумму, переверните, снова досчитайте до этой же суммы.

151
00:10:35,360 --> 00:10:40,520
И этот алгоритм ханойских башен, и двоичный счет являются самоподобными процессами в том смысле, что

152
00:10:40,520 --> 00:10:44,980
если вы уменьшите масштаб и посчитаете до большей степени 2 или решите ханойские башни с

153
00:10:44,980 --> 00:10:48,920
большим количеством дисков, они оба все равно будут иметь одну и ту же структуру. .

154
00:10:48,920 --> 00:10:52,700
Подзадача, сделай что-нибудь, подзадача.

155
00:10:52,700 --> 00:10:57,820
Например, в довольно маленьком масштабе решение ханойских башен для двух дисков, переместить диск 0,

156
00:10:57,820 --> 00:11:03,720
переместить диск 1, переместить диск 0, отражается счетом до 3 в двоичном формате.

157
00:11:03,840 --> 00:11:07,560
Переверните последний бит, переверните один раз, переверните последний бит.

158
00:11:07,560 --> 00:11:12,360
В несколько большем масштабе решение ханойских башен для трех дисков выглядит так же,

159
00:11:12,360 --> 00:11:17,120
как если бы вы сделали все возможное, чтобы решить два диска, передвинули диск

160
00:11:17,120 --> 00:11:19,080
номер 2, а затем сделали все возможное, чтобы снова решить два диска.

161
00:11:19,080 --> 00:11:24,960
Аналогично, двоичный счет до 111 включает в себя счет до

162
00:11:24,960 --> 00:11:28,000
3, прокрутку всех трех битов и затем досчет еще трех.

163
00:11:28,000 --> 00:11:32,060
На всех уровнях оба процесса имеют одинаковую структуру.

164
00:11:32,100 --> 00:11:35,620
Итак, в каком-то смысле причина, по которой это двоичное решение работает, или, по крайней

165
00:11:35,620 --> 00:11:40,820
мере, объяснение, я чувствую, что не существует единого объяснения, но я думаю, что наиболее

166
00:11:40,820 --> 00:11:44,440
естественным является то, что шаблон, который вы бы использовали для генерации этих двоичных чисел,

167
00:11:44,440 --> 00:11:49,560
имеет точно такой же структура похожа на шаблон, который вы бы использовали для ханойских

168
00:11:49,560 --> 00:11:51,860
башен, поэтому, если вы посмотрите на переворачивание битов, вы фактически обращаете этот процесс вспять.

169
00:11:51,860 --> 00:11:54,200
Вы говорите, какой процесс их породил?

170
00:11:54,200 --> 00:12:00,460
Например, если бы я пытался понять, как эти биты были перевернуты, чтобы дать мне эту штуку,

171
00:12:00,460 --> 00:12:06,180
вы фактически обращали бы вспять рекурсивный алгоритм для ханойских башен, и именно поэтому это сработало.

172
00:12:07,860 --> 00:12:09,620
Это довольно круто, правда?

173
00:12:09,620 --> 00:12:10,940
Но на самом деле становится прохладнее.

174
00:12:10,940 --> 00:12:14,460
Я даже не понял, как это связано с треугольником Серпинского.

175
00:12:14,460 --> 00:12:19,140
Именно это я и собираюсь сделать в следующем видео, часть 2.

176
00:12:19,140 --> 00:12:22,620
Большое спасибо всем, кто поддерживает эти видео на Patreon.

177
00:12:22,620 --> 00:12:26,380
Я только что закончил первую главу «Сущности исчисления» и сейчас работаю

178
00:12:26,380 --> 00:12:30,840
над второй, и сторонники Patreon получают ранний доступ к этим

179
00:12:30,840 --> 00:12:34,780
видео, прежде чем я опубликую полную серию через несколько месяцев.

180
00:12:34,780 --> 00:12:39,260
Это и следующее видео также частично поддерживаются Desmos, и перед следующим

181
00:12:39,260 --> 00:12:43,020
видео я просто хочу воспользоваться моментом и рассказать вам, ребята, немного

182
00:12:43,020 --> 00:12:44,780
о том, кто они и о том, что они нанимают.

183
00:12:44,780 --> 00:12:47,020
Так что Десмос на самом деле очень крутой.

184
00:12:47,020 --> 00:12:51,680
Они создают множество интерактивных математических занятий для классных комнат и инструментов для учителей.

185
00:12:51,680 --> 00:12:56,060
Настоящая суть их предложений – это занятия в классе.

186
00:12:56,060 --> 00:13:00,380
Я, со своей стороны, очень впечатлен тем, насколько

187
00:13:00,380 --> 00:13:02,540
хорошо продуманы эти занятия с педагогической точки зрения.

188
00:13:02,540 --> 00:13:06,000
Команда четко знает свое дело и знает,

189
00:13:06,000 --> 00:13:08,180
как изменить жизнь учеников и учителей.

190
00:13:08,180 --> 00:13:10,140
И, как я уже сказал, они нанимают сотрудников.

191
00:13:10,140 --> 00:13:14,780
Они всегда стремятся привлечь больше хороших талантов, будь то инженеры, дизайнеры,

192
00:13:14,780 --> 00:13:19,600
учителя или любые другие навыки, соответствующие тому, чем они хотят заниматься.

193
00:13:19,600 --> 00:13:22,920
Если кто-то из вас заинтересован присоединиться к ним и помочь им

194
00:13:22,920 --> 00:13:26,720
создать некоторые из этих замечательных инструментов для учителей и учеников, вы

195
00:13:26,720 --> 00:13:27,720
можете посетить страницу вакансий, ссылку на которую я дал в описании.

196
00:13:27,720 --> 00:13:30,480
Лично я думаю, что они делают действительно значимые вещи.

197
00:13:30,480 --> 00:13:35,080
Я думаю, что их деятельность формирует у учащихся по-настоящему хорошую математическую

198
00:13:35,080 --> 00:13:39,060
интуицию, и миру могло бы пригодиться еще несколько талантливых людей,

199
00:13:39,060 --> 00:13:40,520
направляющих свои усилия на образование так, как они это делают.

200
00:13:40,520 --> 00:13:44,640
Хорошо, на этом увидимся в следующем видео, и

201
00:13:44,640 --> 00:13:45,720
я думаю, вам действительно понравится то, что происходит.

