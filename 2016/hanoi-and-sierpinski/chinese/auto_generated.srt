1
00:00:04,200 --> 00:00:07,993
今天，我想与大家分享一种解决河内塔难题的巧妙 方法，

2
00:00:07,993 --> 00:00:10,620
只需使用不同的数字系统进行计数即可。

3
00:00:11,220 --> 00:00:13,430
令人惊讶的是，这个东西与找到一条

4
00:00:13,430 --> 00:00:15,640
填充谢尔宾斯基三角形的曲线有关。

5
00:00:16,720 --> 00:00:19,377
我从我的一位前计算机科学讲师那里了解到这一点，

6
00:00:19,377 --> 00:00:21,802
他的名字叫 Keith Schwartz，

7
00:00:21,802 --> 00:00:24,460
我不得不说，这个人是我见过的最好的教育家之一。

8
00:00:25,140 --> 00:00:28,270
实际上，我录下了他向我展示这些东西时的一些对话 ，

9
00:00:28,270 --> 00:00:30,900
这样你们就可以直接听到他所描述的一些内容。

10
00:00:38,420 --> 00:00:47,640
如果您不熟悉，让我们简单介绍 一下河内塔谜题到底是什么。

11
00:00:47,640 --> 00:00:53,681
您可以将这些圆盘视为中间有一个孔 ，

12
00:00:53,681 --> 00:00:58,380
以便可以将它们安装到钉子上。

13
00:00:59,200 --> 00:01:03,057
此处所示的设置有五个磁盘，我将其标记为 0、1、 

14
00:01:03,057 --> 00:01:06,760
2、3、4，但原则上，您可以拥有任意数量的磁盘。

15
00:01:07,460 --> 00:01:10,996
例如，您的第一次移动必须涉及移动磁盘 0，

16
00:01:10,996 --> 00:01:15,880
因为任何 其他磁盘上面都有东西，需要在移动之前先将其移开。

17
00:01:15,880 --> 00:01:20,682
之后，您可以移动磁盘 1，但它必须继续移动到 

18
00:01:20,682 --> 00:01:24,022
当前没有磁盘 0 的任何挂钩上，

19
00:01:24,022 --> 00:01:29,660
否则您会将 较大的磁盘放在较小的磁盘上，这是不允许的。

20
00:01:29,660 --> 00:01:30,620
如果您以前从未见过这一点，我强烈建议您停下 来，

21
00:01:30,620 --> 00:01:31,380
拿出一些不同尺寸的书籍，亲自尝试一下。

22
00:01:31,380 --> 00:01:34,659
现在基思向我展示了这个难题的一些真正令人惊讶的 东西，

23
00:01:34,659 --> 00:01:37,088
那就是你只需通过二进制计数并将计数的节 

24
00:01:37,088 --> 00:01:39,760
奏与磁盘运动的特定节奏联系起来就可以解决它。

25
00:01:39,760 --> 00:01:42,940
对于任何不熟悉二进制的人，我 将首先花点时间快速概述一下。

26
00:01:42,940 --> 00:01:47,398
实际上，即使您熟悉二进制，我也想以计数的节奏为重 

27
00:01:47,398 --> 00:01:51,500
点来解释它，您以前可能考虑过也可能没有考虑过。

28
00:01:51,500 --> 00:01:57,205
对二进制的任何描述通常都是从反思我们通常表示数字的方式 

29
00:01:57,205 --> 00:02:02,706
开始，我们称之为基数 10，因为我们使用 10 个独 

30
00:02:02,706 --> 00:02:07,800
立的数字：0、1、2、3、4、5、6、7、8、9。

31
00:02:07,800 --> 00:02:09,139
计数的节奏从遍历所有 10 个数字开始。

32
00:02:09,139 --> 00:02:09,511
然后，用完新数字后，用两位数字 

33
00:02:09,511 --> 00:02:09,860
1、0 表示下一个数字 10。

34
00:02:09,860 --> 00:02:15,819
你说 1 位于十位，因为它意味着封装到目前为止你 

35
00:02:15,819 --> 00:02:21,540
已经数到的 10 组，同时释放个位以重置为 0。

36
00:02:21,540 --> 00:02:25,489
计数的节奏就这样重复着，数到9，

37
00:02:25,489 --> 00:02:30,180
滚 到十位，再数到9，滚到十位，等等。

38
00:02:30,180 --> 00:02:38,572
好吧，重复这个过程 9 次后，你会滚动到 百位，

39
00:02:38,572 --> 00:02:45,215
这个数字记录你击中了多少组 10 0，

40
00:02:45,215 --> 00:02:51,160
从而释放其他两位数字以重置为 0。

41
00:02:51,260 --> 00:02:55,740
这样，计数的节奏就有点自相似了。

42
00:02:55,740 --> 00:03:02,265
即使你缩小到更大的比例，这个过程看起 来就像做某事，滚动，

43
00:03:02,265 --> 00:03:08,340
做同样的事情，滚 动，并在更大的滚动之前重复 9 次。

44
00:03:08,340 --> 00:03:16,920
在二进制（也称为基数 2）中，您将自己限制为两个数 

45
00:03:16,920 --> 00:03:24,840
字：0 和 1，通常称为位，是二进制数字的缩写。

46
00:03:24,840 --> 00:03:31,360
结果就是当你数的时候，你必须一直翻身。

47
00:03:31,360 --> 00:03:34,016
数完 0、1 后，你已经用完了位数，

48
00:03:34,016 --> 00:03:37,264
因此你需要翻到 2 的位置 ，写下 1-0，

49
00:03:37,264 --> 00:03:41,692
并抵制你受过 10 进制训练的大脑中将其读为 10 的冲动，

50
00:03:41,692 --> 00:03:44,940
并且相反，请将其理解为 1 组 2 加 0。

51
00:03:49,520 --> 00:03:53,800
然后增加到 1-1，代表 3，并且你已经必须再次滚动，

52
00:03:53,800 --> 00:03:57,921
 并且由于 2 的位置有一个 1，所以它也必须滚动，

53
00:03:57,921 --> 00:04:02,360
给你 1-0-0，代表 1 4 组加 0 2 组加 0。

54
00:04:02,360 --> 00:04:09,037
就像以 10 为基数的数字表示 10 的幂一 样，

55
00:04:09,037 --> 00:04:14,380
以 2 为基数的位也表示 2 的不同幂。

56
00:04:15,060 --> 00:04:21,158
因此，不要谈论 10 位、100 位、1000 

57
00:04:21,158 --> 00:04:28,020
位 等类似的东西，而是谈论 2 位、4 位和 8 位。

58
00:04:28,420 --> 00:04:28,020
计数的节奏现在快了很多，但这几乎使它更加引人注目。

59
00:04:28,420 --> 00:04:29,540
最后翻面，翻滚一次。

60
00:04:29,540 --> 00:04:29,540
最后翻面，翻滚两遍。

61
00:04:29,540 --> 00:04:29,540
最后翻面，翻滚一次。

62
00:04:29,540 --> 00:04:30,480
最后翻面，翻滚三遍。

63
00:04:30,480 --> 00:04:36,860
同样，这种模式有一定的自相似性。

64
00:04:36,860 --> 00:04:36,860
在任何规模上，过程都是做某事，翻转，然后再次做同样的事情。

65
00:04:36,860 --> 00:04:43,946
在小范围内，假设计数到 3，即二进制中的 1-1，

66
00:04:43,946 --> 00:04:51,600
这 意味着翻转最后一位，翻转到 2，然后翻转最后一位。

67
00:04:51,600 --> 00:05:01,260
规模更大的话，比如数到15，也就是1-1-1-1，

68
00:05:01,260 --> 00:05:08,602
过程就 是让最后3位数到7，滚到8位，

69
00:05:08,602 --> 00:05:13,240
然后让最后3位再数起来。

70
00:05:13,920 --> 00:05:20,111
计数到 255，即 8 个连续的 1，

71
00:05:20,111 --> 00:05:26,302
这看 起来就像让最后 7 位计数到满，

72
00:05:26,302 --> 00:05:35,100
滚动到 1 28 的位置，然后让最后 7 位再次计数。

73
00:05:35,100 --> 00:05:37,616
好吧，通过这个简短的介绍，基思向我展示的令人惊讶的 

74
00:05:37,616 --> 00:05:39,940
事实是我们可以使用这种节奏来解决河内塔楼的问题。

75
00:05:39,940 --> 00:05:41,460
你从0开始数。

76
00:05:41,980 --> 00:05:42,524
每当您只翻转最后一位（从 0 到 1） 时，

77
00:05:42,524 --> 00:05:42,920
请将磁盘 0 向右移动一个钉子。

78
00:05:42,920 --> 00:05:43,240
如果它已经在最右边的钉子上，您只需将其循环回第一个钉子即可。

79
00:05:43,800 --> 00:05:45,387
如果翻转一次到 2 的位置，即 翻转最后两位，

80
00:05:45,387 --> 00:05:45,940
则移动磁盘 1。

81
00:05:46,960 --> 00:05:45,940
你可能会问，你把它移到哪里？

82
00:05:46,960 --> 00:05:51,231
你别无选择，你不能把它放在磁盘 0 的顶部，

83
00:05:51,231 --> 00:05:56,280
而且 只有一个钉子，所以你把它移到你被迫移动的地方。

84
00:05:56,280 --> 00:05:58,329
此后，计数到 1-1，只需翻转最 后一位，

85
00:05:58,329 --> 00:05:59,500
因此您再次移动磁盘 0。

86
00:06:01,340 --> 00:06:03,970
然后，当二进制计数滚动两次到四位时，

87
00:06:03,970 --> 00:06:06,600
 移动磁盘 2，该模式将像这样继续。

88
00:06:06,600 --> 00:06:13,840
翻转最后一个，移动磁盘 0。

89
00:06:13,840 --> 00:06:17,580
翻转最后两个，移动磁盘 1。

90
00:06:17,580 --> 00:06:17,580
翻转最后一个，移动磁盘 0。

91
00:06:17,580 --> 00:06:23,025
在这里，我们必须滚动三次到 8 的位置，

92
00:06:23,025 --> 00:06:26,020
这对应于移动磁盘 3。

93
00:06:26,778 --> 00:06:26,020
它有一些神奇的东西，就像当我第一 次看到这个时，

94
00:06:28,800 --> 00:06:26,778
我就想，这行不通。

95
00:06:28,800 --> 00:06:32,433
我不知道这是如何工作的，我不知道为什么会这样，

96
00:06:32,433 --> 00:06:36,067
现在我知 道了，但当你看到它时，它真的很神奇，

97
00:06:36,067 --> 00:06:40,174
我记得在教这个的 时候为此制作了动画，就像，你知道，

98
00:06:40,174 --> 00:06:43,808
我知道这是如何运作的 ，我知道其中的所有内容，

99
00:06:43,808 --> 00:06:46,020
只是坐着看它上演仍然很有趣。

100
00:06:46,660 --> 00:06:49,900
哦耶。

101
00:06:49,900 --> 00:06:55,800
我的意思是，一开始甚至不清楚这是否总是会带来合法的行动。

102
00:06:55,800 --> 00:07:03,234
例如，您如何知道每次滚动到 8 的位置 时，

103
00:07:03,234 --> 00:07:08,980
磁盘 3 一定会被释放以进行移动？

104
00:07:08,980 --> 00:07:11,633
与此同时，解决方案立即提出了这些问题，例如，

105
00:07:11,633 --> 00:07:14,407
 它从哪里来，为什么会起作用，以及是否有比执 

106
00:07:14,407 --> 00:07:16,940
行 2 到 n 减 1 的步骤更好的方法？

107
00:07:16,940 --> 00:07:22,263
事实证明，这不仅解决了河内塔问题，

108
00:07:22,263 --> 00:07:27,900
 而且以最有效的方式解决了这个问题。

109
00:07:27,900 --> 00:07:33,672
理解它为什么有效、它是如何工作的以及到底发生了什么，

110
00:07:33,672 --> 00:07:37,445
可以归结 为对这个谜题的某种视角，

111
00:07:37,445 --> 00:07:41,220
计算机科学人士可能称之为递归视角。

112
00:07:41,640 --> 00:07:44,876
磁盘 3 正在想，好吧，2、1 和 0，

113
00:07:44,876 --> 00:07:49,245
就像你必须离开 我一样，就像我在这么大的重量和压力下无

114
00:07:49,245 --> 00:07:50,540
法真正发挥作用。

115
00:07:50,540 --> 00:07:53,868
因此，仅从磁盘 3 的角度来看，

116
00:07:53,868 --> 00:07:58,030
如果您想弄清楚磁盘 3 如何到达这 里，

117
00:07:58,030 --> 00:08:02,191
不知何故，我不关心磁盘 2、1 和 0 

118
00:08:02,191 --> 00:08:04,480
必须如何到达主轴 B。

119
00:08:04,480 --> 00:08:09,420
这是它能够移动的唯一方式。

120
00:08:09,420 --> 00:08:10,360
如果其中任何一个圆盘位于 3 个圆盘之上，则它无法移动。

121
00:08:10,360 --> 00:08:19,340
如果它们中的任何一个位于主轴 C 中，则它无法移动到那里。

122
00:08:19,340 --> 00:08:21,100
所以我们必须以某种方式去掉 2、1 和 0。

123
00:08:21,100 --> 00:08:28,920
完成后，我们可以将磁盘 3 移到那里。

124
00:08:28,920 --> 00:08:28,920
然后磁盘 3 说，我已经准备好了。

125
00:08:28,920 --> 00:08:34,179
你再也不需要动我了。

126
00:08:34,179 --> 00:08:35,940
其他人只是弄清楚如何到达这里。

127
00:08:36,080 --> 00:08:37,039
从某种意义上说，您现在遇到了同一问题的较小版本。

128
00:08:37,039 --> 00:08:39,215
现在磁盘 0、1 和 2 位于主轴 B 上，

129
00:08:39,215 --> 00:08:40,600
您必须将它们转移到 C 上。

130
00:08:41,000 --> 00:08:43,095
所以我 的想法是，如果我只关注一个磁盘，

131
00:08:43,095 --> 00:08:45,504
然后思考我需要做什么才能让 这个磁盘正常工作，

132
00:08:45,504 --> 00:08:47,600
我就可以将更大的问题变成稍微更小的问题。

133
00:08:48,120 --> 00:08:53,380
那我该如何解决这个问题呢？

134
00:08:53,980 --> 00:08:57,660
嗯，这是完全一样的事情。

135
00:08:57,740 --> 00:08:58,840
如果磁盘2要说，磁盘1和磁盘0，那不是你，是我。

136
00:08:58,840 --> 00:09:01,180
我只是需要一些空间。

137
00:09:01,180 --> 00:09:05,540
下车。

138
00:09:05,540 --> 00:09:06,240
他们需要搬到某个地方。

139
00:09:06,240 --> 00:09:06,660
然后磁盘 2 就可以移动到它需要去的地方。

140
00:09:06,660 --> 00:09:11,320
那么磁盘1和0就可以做到这一点。

141
00:09:11,320 --> 00:09:18,380
但有趣的是，每个磁盘几乎都有完全相同的策略。

142
00:09:18,820 --> 00:09:18,380
他们都说，我上面的人都下车。

143
00:09:18,820 --> 00:09:19,540
那我要搬家了。

144
00:09:19,540 --> 00:09:22,940
好吧，大家都回去吧。

145
00:09:23,020 --> 00:09:28,107
当您了解这种洞察力时，您可以编写一些可以解 

146
00:09:28,107 --> 00:09:32,501
决河内塔问题的代码，例如五到六行代码，

147
00:09:32,501 --> 00:09:37,820
这可 能是有史以来智力投资与代码行的最高比率。

148
00:09:37,820 --> 00:09:38,980
如果您稍微思考一下，就会发现 这肯定是最有效的解决方案。

149
00:09:38,980 --> 00:09:40,360
每一步，你都只是在做别人强加给你的事情。

150
00:09:40,560 --> 00:09:50,740
您必须先卸下磁盘 0 到 2，然后才能移动磁盘 3。

151
00:09:50,740 --> 00:09:50,740
并且您必须移动磁盘 3。

152
00:09:50,740 --> 00:09:52,840
然后您必须将磁盘 0 到 2 移回原来的位置。

153
00:09:52,840 --> 00:09:54,600
从这个角度来看，没有任何低效率的空间。

154
00:09:54,600 --> 00:09:58,020
那么为什么二进制计数会捕获这个算法呢？

155
00:09:58,020 --> 00:10:05,093
嗯，这里发生的事情是，解决子问题、 移动大磁盘，

156
00:10:05,093 --> 00:10:13,640
然后再次解决子问题的这 种模式与二进制计数的模式完全并行。

157
00:10:15,200 --> 00:10:20,820
数出一定数量，翻转，再次数到相同的数量。

158
00:10:20,820 --> 00:10:25,715
河内塔算法和二进制计数都是自相似的过程，从某种意义 上说，

159
00:10:25,715 --> 00:10:28,753
如果你缩小并计数到更大的 2 次方，

160
00:10:28,753 --> 00:10:33,480
或者用 更多的磁盘来解决河内塔，它们仍然具有相同的结构。

161
00:10:35,140 --> 00:10:41,900
子问题，做一件事，子问题。

162
00:10:41,900 --> 00:10:44,028
例如，在相当小的规模上，求解两个圆盘的河内塔，

163
00:10:44,028 --> 00:10:46,064
移动圆盘 0 ，移动圆盘 1，移动圆盘 0，

164
00:10:46,064 --> 00:10:47,360
通过二进制数到 3 来反映。

165
00:10:47,360 --> 00:10:47,360
翻转最后一点，翻转一次，翻转最后一点。

166
00:10:47,360 --> 00:10:51,841
在稍微大一点的规模上，解决河内塔的三个圆盘看 

167
00:10:51,841 --> 00:10:56,907
起来就像不惜一切代价解决两个圆盘，移动 2 号圆盘，

168
00:10:56,907 --> 00:11:00,220
然后不惜一切代价再次解决两个圆盘。

169
00:11:00,220 --> 00:11:01,741
类似地，在二进制中计数到 111 需要计 数到 3，

170
00:11:01,741 --> 00:11:02,620
翻转所有三位，然后再计数 3。

171
00:11:02,620 --> 00:11:04,780
在所有规模上，这两个过程都有相同的故障。

172
00:11:04,780 --> 00:11:09,462
所以从某种意义上说，这个二进制解决方案起作用的原因 ，

173
00:11:09,462 --> 00:11:12,931
或者至少是一个解释，我觉得没有一个解释，

174
00:11:12,931 --> 00:11:17,267
但我认为 最自然的一个是你用来生成这些二进制数的模

175
00:11:17,267 --> 00:11:21,603
式具有完全 相同的结构就像河内塔所使用的模式一样，

176
00:11:21,603 --> 00:11:24,725
这就是为什么 如果你看一下翻转的位，

177
00:11:24,725 --> 00:11:26,980
你实际上正在逆转这个过程。

178
00:11:27,600 --> 00:11:30,520
你是说，什么过程产生了这些？

179
00:11:30,520 --> 00:11:37,117
就像如果我试图理解这些位是如何翻转来给我这个东西一样，

180
00:11:37,117 --> 00:11:43,960
 你实际上是逆转了河内塔的递归算法，这就是它成功的原因。

181
00:11:43,960 --> 00:11:47,520
这很酷，对吧？

182
00:11:47,520 --> 00:11:51,700
但它实际上变得更酷。

183
00:11:51,820 --> 00:11:55,980
我什至还没有弄清楚这与谢尔宾斯基三角形有何关系。

184
00:11:55,980 --> 00:11:59,160
这正是我在后续视频第 2 部分中要做的事情。

185
00:11:59,160 --> 00:11:59,160
非常感谢所有在 Patreon 上支持这些视频的人。

186
00:11:59,160 --> 00:12:03,649
我刚刚完成了《微积分本质》的第一章，

187
00:12:03,649 --> 00:12:08,387
现在正在 制作第二章，Patreon 

188
00:12:08,387 --> 00:12:15,620
支持者可以在我 几个月后发布完整系列之前抢先观看这些视频。

189
00:12:15,620 --> 00:12:19,091
这个视频和下一个视频也得到了 Desmos 的 部分支持，

190
00:12:19,091 --> 00:12:21,246
在下一个视频之前，我只想花点时间与 

191
00:12:21,246 --> 00:12:23,880
大家分享一下他们是谁以及他们正在招聘的事实。

192
00:12:23,880 --> 00:12:29,580
所以 Desmos 真的很酷。

193
00:12:29,580 --> 00:12:31,320
他们为课堂制作了很多互动数学活动，为教师制作了许多工具。

194
00:12:31,320 --> 00:12:36,340
他们提供的真正内容是课堂活动。

195
00:12:36,340 --> 00:12:39,586
就我而言，这些活动从教学角度来看是经 过深思熟虑的，

196
00:12:39,586 --> 00:12:40,960
给我留下了深刻的印象。

197
00:12:40,960 --> 00:12:46,701
该团队清楚地了解他们的工作，他们知道 

198
00:12:46,701 --> 00:12:52,140
自己的立场如何改变学生和教师的生活。

199
00:12:52,140 --> 00:12:53,440
就像我说的，他们正在招聘。

200
00:12:53,440 --> 00:12:59,669
他们总是希望引进更多优秀人才，无论是工程人才、设计 

201
00:12:59,669 --> 00:13:05,420
师、教师，还是任何其他符合他们想做的事情的技能。

202
00:13:05,420 --> 00:13:08,849
如果你们中的任何人有兴趣加入他们，

203
00:13:08,849 --> 00:13:13,086
帮助 他们为教师和学生制作一些很棒的工具，

204
00:13:13,086 --> 00:13:16,920
 您可以查看我在描述中链接的职业页面。

205
00:13:16,920 --> 00:13:21,060
就我个人而言，我认为他们正在做一些真正有意义的事情。

206
00:13:21,060 --> 00:13:24,931
我认为他们的活动正在为学生建立真正良 好的数学直觉，

207
00:13:24,931 --> 00:13:29,100
世界可以利用更多有才 华的人以他们的方式为教育做出努力。

208
00:13:29,100 --> 00:13:58,100
好的，那么我们下一个视频见， 我想你们一定会喜欢这个的。

