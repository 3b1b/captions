1
00:00:04,200 --> 00:00:07,993
今天，我想与大家分享一种解决河内塔难题的巧妙 方法，

2
00:00:07,993 --> 00:00:10,620
只需使用不同的数字系统进行计数即可。

3
00:00:11,220 --> 00:00:13,430
令人惊讶的是，这个东西与找到一条

4
00:00:13,430 --> 00:00:15,640
填充谢尔宾斯基三角形的曲线有关。

5
00:00:16,720 --> 00:00:19,377
我从我的一位前计算机科学讲师那里了解到这一点，

6
00:00:19,377 --> 00:00:21,802
他的名字叫 Keith Schwartz，

7
00:00:21,802 --> 00:00:24,460
我不得不说，这个人是我见过的最好的教育家之一。

8
00:00:25,140 --> 00:00:28,270
实际上，我录下了他向我展示这些东西时的一些对话 ，

9
00:00:28,270 --> 00:00:30,900
这样你们就可以直接听到他所描述的一些内容。

10
00:00:38,420 --> 00:00:45,760
如果您不熟悉，让我们简单介绍 一下河内塔谜题到底是什么。

11
00:00:45,760 --> 00:00:50,653
您可以将这些圆盘视为中间有一个孔 ，

12
00:00:50,653 --> 00:00:54,460
以便可以将它们安装到钉子上。

13
00:00:54,460 --> 00:00:58,541
此处所示的设置有五个磁盘，我将其标记为 0、1、 

14
00:00:58,541 --> 00:01:02,460
2、3、4，但原则上，您可以拥有任意数量的磁盘。

15
00:01:02,580 --> 00:01:06,763
例如，您的第一次移动必须涉及移动磁盘 0，

16
00:01:06,763 --> 00:01:12,540
因为任何 其他磁盘上面都有东西，需要在移动之前先将其移开。

17
00:01:12,540 --> 00:01:15,857
之后，您可以移动磁盘 1，但它必须继续移动到 

18
00:01:15,857 --> 00:01:18,165
当前没有磁盘 0 的任何挂钩上，

19
00:01:18,165 --> 00:01:22,060
否则您会将 较大的磁盘放在较小的磁盘上，这是不允许的。

20
00:01:23,720 --> 00:01:27,660
如果您以前从未见过这一点，我强烈建议您停下 来，

21
00:01:27,660 --> 00:01:30,780
拿出一些不同尺寸的书籍，亲自尝试一下。

22
00:01:30,780 --> 00:01:36,430
现在基思向我展示了这个难题的一些真正令人惊讶的 东西，

23
00:01:36,430 --> 00:01:40,615
那就是你只需通过二进制计数并将计数的节 

24
00:01:40,615 --> 00:01:45,220
奏与磁盘运动的特定节奏联系起来就可以解决它。

25
00:01:45,220 --> 00:01:50,880
对于任何不熟悉二进制的人，我 将首先花点时间快速概述一下。

26
00:01:50,880 --> 00:01:54,296
实际上，即使您熟悉二进制，我也想以计数的节奏为重 

27
00:01:54,296 --> 00:01:57,440
点来解释它，您以前可能考虑过也可能没有考虑过。

28
00:01:57,440 --> 00:02:01,871
对二进制的任何描述通常都是从反思我们通常表示数字的方式 

29
00:02:01,871 --> 00:02:06,143
开始，我们称之为基数 10，因为我们使用 10 个独 

30
00:02:06,143 --> 00:02:10,100
立的数字：0、1、2、3、4、5、6、7、8、9。

31
00:02:10,100 --> 00:02:14,820
计数的节奏从遍历所有 10 个数字开始。

32
00:02:14,820 --> 00:02:17,792
然后，用完新数字后，用两位数字 

33
00:02:17,792 --> 00:02:20,580
1、0 表示下一个数字 10。

34
00:02:20,580 --> 00:02:25,161
你说 1 位于十位，因为它意味着封装到目前为止你 

35
00:02:25,161 --> 00:02:29,560
已经数到的 10 组，同时释放个位以重置为 0。

36
00:02:29,560 --> 00:02:33,985
计数的节奏就这样重复着，数到9，

37
00:02:33,985 --> 00:02:39,240
滚 到十位，再数到9，滚到十位，等等。

38
00:02:39,240 --> 00:02:45,480
好吧，重复这个过程 9 次后，你会滚动到 百位，

39
00:02:45,480 --> 00:02:50,420
这个数字记录你击中了多少组 10 0，

40
00:02:50,420 --> 00:02:54,840
从而释放其他两位数字以重置为 0。

41
00:02:54,840 --> 00:02:57,320
这样，计数的节奏就有点自相似了。

42
00:02:57,320 --> 00:03:03,254
即使你缩小到更大的比例，这个过程看起 来就像做某事，滚动，

43
00:03:03,254 --> 00:03:08,780
做同样的事情，滚 动，并在更大的滚动之前重复 9 次。

44
00:03:08,780 --> 00:03:14,603
在二进制（也称为基数 2）中，您将自己限制为两个数 

45
00:03:14,603 --> 00:03:19,980
字：0 和 1，通常称为位，是二进制数字的缩写。

46
00:03:19,980 --> 00:03:25,160
结果就是当你数的时候，你必须一直翻身。

47
00:03:25,160 --> 00:03:28,771
数完 0、1 后，你已经用完了位数，

48
00:03:28,771 --> 00:03:33,186
因此你需要翻到 2 的位置 ，写下 1-0，

49
00:03:33,186 --> 00:03:39,205
并抵制你受过 10 进制训练的大脑中将其读为 10 的冲动，

50
00:03:39,205 --> 00:03:43,620
并且相反，请将其理解为 1 组 2 加 0。

51
00:03:43,620 --> 00:03:50,913
然后增加到 1-1，代表 3，并且你已经必须再次滚动，

52
00:03:50,913 --> 00:03:57,936
 并且由于 2 的位置有一个 1，所以它也必须滚动，

53
00:03:57,936 --> 00:04:05,500
给你 1-0-0，代表 1 4 组加 0 2 组加 0。

54
00:04:05,500 --> 00:04:08,333
就像以 10 为基数的数字表示 10 的幂一 样，

55
00:04:08,333 --> 00:04:10,600
以 2 为基数的位也表示 2 的不同幂。

56
00:04:10,600 --> 00:04:15,362
因此，不要谈论 10 位、100 位、1000 

57
00:04:15,362 --> 00:04:20,720
位 等类似的东西，而是谈论 2 位、4 位和 8 位。

58
00:04:20,720 --> 00:04:27,660
计数的节奏现在快了很多，但这几乎使它更加引人注目。

59
00:04:27,660 --> 00:04:28,020
最后翻面，翻滚一次。

60
00:04:28,420 --> 00:04:28,940
最后翻面，翻滚两遍。

61
00:04:28,940 --> 00:04:32,220
最后翻面，翻滚一次。

62
00:04:32,220 --> 00:04:33,340
最后翻面，翻滚三遍。

63
00:04:33,340 --> 00:04:39,100
同样，这种模式有一定的自相似性。

64
00:04:39,100 --> 00:04:45,060
在任何规模上，过程都是做某事，翻转，然后再次做同样的事情。

65
00:04:45,060 --> 00:04:50,483
在小范围内，假设计数到 3，即二进制中的 1-1，

66
00:04:50,483 --> 00:04:56,340
这 意味着翻转最后一位，翻转到 2，然后翻转最后一位。

67
00:04:56,340 --> 00:05:05,697
规模更大的话，比如数到15，也就是1-1-1-1，

68
00:05:05,697 --> 00:05:12,808
过程就 是让最后3位数到7，滚到8位，

69
00:05:12,808 --> 00:05:17,300
然后让最后3位再数起来。

70
00:05:17,300 --> 00:05:22,397
计数到 255，即 8 个连续的 1，

71
00:05:22,397 --> 00:05:27,495
这看 起来就像让最后 7 位计数到满，

72
00:05:27,495 --> 00:05:34,740
滚动到 1 28 的位置，然后让最后 7 位再次计数。

73
00:05:34,740 --> 00:05:39,971
好吧，通过这个简短的介绍，基思向我展示的令人惊讶的 

74
00:05:39,971 --> 00:05:44,800
事实是我们可以使用这种节奏来解决河内塔楼的问题。

75
00:05:44,800 --> 00:05:48,540
你从0开始数。

76
00:05:49,140 --> 00:05:51,872
每当您只翻转最后一位（从 0 到 1） 时，

77
00:05:51,872 --> 00:05:53,860
请将磁盘 0 向右移动一个钉子。

78
00:05:53,860 --> 00:05:58,760
如果它已经在最右边的钉子上，您只需将其循环回第一个钉子即可。

79
00:05:58,760 --> 00:06:04,784
如果翻转一次到 2 的位置，即 翻转最后两位，

80
00:06:04,784 --> 00:06:06,880
则移动磁盘 1。

81
00:06:06,880 --> 00:06:08,420
你可能会问，你把它移到哪里？

82
00:06:08,420 --> 00:06:12,985
你别无选择，你不能把它放在磁盘 0 的顶部，

83
00:06:12,985 --> 00:06:18,380
而且 只有一个钉子，所以你把它移到你被迫移动的地方。

84
00:06:18,380 --> 00:06:23,241
此后，计数到 1-1，只需翻转最 后一位，

85
00:06:23,241 --> 00:06:26,020
因此您再次移动磁盘 0。

86
00:06:28,800 --> 00:06:31,650
然后，当二进制计数滚动两次到四位时，

87
00:06:31,650 --> 00:06:34,500
 移动磁盘 2，该模式将像这样继续。

88
00:06:34,500 --> 00:06:36,300
翻转最后一个，移动磁盘 0。

89
00:06:36,300 --> 00:06:37,900
翻转最后两个，移动磁盘 1。

90
00:06:37,900 --> 00:06:38,340
翻转最后一个，移动磁盘 0。

91
00:06:38,380 --> 00:06:41,283
在这里，我们必须滚动三次到 8 的位置，

92
00:06:41,283 --> 00:06:42,880
这对应于移动磁盘 3。

93
00:06:42,880 --> 00:06:46,370
它有一些神奇的东西，就像当我第一 次看到这个时，

94
00:06:46,370 --> 00:06:47,680
我就想，这行不通。

95
00:06:47,680 --> 00:06:52,149
我不知道这是如何工作的，我不知道为什么会这样，

96
00:06:52,149 --> 00:06:56,618
现在我知 道了，但当你看到它时，它真的很神奇，

97
00:06:56,618 --> 00:07:01,670
我记得在教这个的 时候为此制作了动画，就像，你知道，

98
00:07:01,670 --> 00:07:06,139
我知道这是如何运作的 ，我知道其中的所有内容，

99
00:07:06,139 --> 00:07:08,860
只是坐着看它上演仍然很有趣。

100
00:07:08,860 --> 00:07:08,860
哦耶。

101
00:07:08,860 --> 00:07:11,880
我的意思是，一开始甚至不清楚这是否总是会带来合法的行动。

102
00:07:11,880 --> 00:07:16,291
例如，您如何知道每次滚动到 8 的位置 时，

103
00:07:16,291 --> 00:07:19,700
磁盘 3 一定会被释放以进行移动？

104
00:07:19,700 --> 00:07:23,453
与此同时，解决方案立即提出了这些问题，例如，

105
00:07:23,453 --> 00:07:27,377
 它从哪里来，为什么会起作用，以及是否有比执 

106
00:07:27,377 --> 00:07:30,960
行 2 到 n 减 1 的步骤更好的方法？

107
00:07:30,960 --> 00:07:34,418
事实证明，这不仅解决了河内塔问题，

108
00:07:34,418 --> 00:07:38,080
 而且以最有效的方式解决了这个问题。

109
00:07:38,080 --> 00:07:41,399
理解它为什么有效、它是如何工作的以及到底发生了什么，

110
00:07:41,399 --> 00:07:43,569
可以归结 为对这个谜题的某种视角，

111
00:07:43,569 --> 00:07:45,740
计算机科学人士可能称之为递归视角。

112
00:07:45,740 --> 00:07:48,685
磁盘 3 正在想，好吧，2、1 和 0，

113
00:07:48,685 --> 00:07:52,661
就像你必须离开 我一样，就像我在这么大的重量和压力下无

114
00:07:52,661 --> 00:07:53,840
法真正发挥作用。

115
00:07:53,840 --> 00:07:56,256
因此，仅从磁盘 3 的角度来看，

116
00:07:56,256 --> 00:07:59,277
如果您想弄清楚磁盘 3 如何到达这 里，

117
00:07:59,277 --> 00:08:02,298
不知何故，我不关心磁盘 2、1 和 0 

118
00:08:02,298 --> 00:08:03,960
必须如何到达主轴 B。

119
00:08:03,960 --> 00:08:05,960
这是它能够移动的唯一方式。

120
00:08:06,700 --> 00:08:08,720
如果其中任何一个圆盘位于 3 个圆盘之上，则它无法移动。

121
00:08:08,720 --> 00:08:12,080
如果它们中的任何一个位于主轴 C 中，则它无法移动到那里。

122
00:08:12,080 --> 00:08:13,760
所以我们必须以某种方式去掉 2、1 和 0。

123
00:08:13,760 --> 00:08:17,100
完成后，我们可以将磁盘 3 移到那里。

124
00:08:17,100 --> 00:08:18,380
然后磁盘 3 说，我已经准备好了。

125
00:08:18,580 --> 00:08:21,340
你再也不需要动我了。

126
00:08:21,340 --> 00:08:23,060
其他人只是弄清楚如何到达这里。

127
00:08:23,060 --> 00:08:27,580
从某种意义上说，您现在遇到了同一问题的较小版本。

128
00:08:27,580 --> 00:08:29,462
现在磁盘 0、1 和 2 位于主轴 B 上，

129
00:08:29,462 --> 00:08:30,660
您必须将它们转移到 C 上。

130
00:08:30,660 --> 00:08:33,675
所以我 的想法是，如果我只关注一个磁盘，

131
00:08:33,675 --> 00:08:37,144
然后思考我需要做什么才能让 这个磁盘正常工作，

132
00:08:37,144 --> 00:08:40,159
我就可以将更大的问题变成稍微更小的问题。

133
00:08:40,159 --> 00:08:42,240
那我该如何解决这个问题呢？

134
00:08:42,260 --> 00:08:45,120
嗯，这是完全一样的事情。

135
00:08:45,120 --> 00:08:50,020
如果磁盘2要说，磁盘1和磁盘0，那不是你，是我。

136
00:08:50,020 --> 00:08:50,020
我只是需要一些空间。

137
00:08:50,020 --> 00:08:50,020
下车。

138
00:08:50,020 --> 00:08:52,260
他们需要搬到某个地方。

139
00:08:52,260 --> 00:08:53,380
然后磁盘 2 就可以移动到它需要去的地方。

140
00:08:53,980 --> 00:08:55,100
那么磁盘1和0就可以做到这一点。

141
00:08:55,100 --> 00:08:59,460
但有趣的是，每个磁盘几乎都有完全相同的策略。

142
00:08:59,460 --> 00:09:00,980
他们都说，我上面的人都下车。

143
00:09:00,980 --> 00:09:03,240
那我要搬家了。

144
00:09:03,240 --> 00:09:04,900
好吧，大家都回去吧。

145
00:09:04,900 --> 00:09:08,323
当您了解这种洞察力时，您可以编写一些可以解 

146
00:09:08,323 --> 00:09:11,280
决河内塔问题的代码，例如五到六行代码，

147
00:09:11,280 --> 00:09:14,860
这可 能是有史以来智力投资与代码行的最高比率。

148
00:09:14,860 --> 00:09:21,640
如果您稍微思考一下，就会发现 这肯定是最有效的解决方案。

149
00:09:21,640 --> 00:09:23,640
每一步，你都只是在做别人强加给你的事情。

150
00:09:23,640 --> 00:09:27,460
您必须先卸下磁盘 0 到 2，然后才能移动磁盘 3。

151
00:09:27,460 --> 00:09:27,760
并且您必须移动磁盘 3。

152
00:09:27,760 --> 00:09:30,940
然后您必须将磁盘 0 到 2 移回原来的位置。

153
00:09:31,020 --> 00:09:33,600
从这个角度来看，没有任何低效率的空间。

154
00:09:33,600 --> 00:09:35,340
那么为什么二进制计数会捕获这个算法呢？

155
00:09:36,320 --> 00:09:40,712
嗯，这里发生的事情是，解决子问题、 移动大磁盘，

156
00:09:40,712 --> 00:09:46,020
然后再次解决子问题的这 种模式与二进制计数的模式完全并行。

157
00:09:46,020 --> 00:09:53,120
数出一定数量，翻转，再次数到相同的数量。

158
00:09:53,120 --> 00:09:58,510
河内塔算法和二进制计数都是自相似的过程，从某种意义 上说，

159
00:09:58,510 --> 00:10:01,855
如果你缩小并计数到更大的 2 次方，

160
00:10:01,855 --> 00:10:07,060
或者用 更多的磁盘来解决河内塔，它们仍然具有相同的结构。

161
00:10:07,060 --> 00:10:09,300
子问题，做一件事，子问题。

162
00:10:09,880 --> 00:10:14,144
例如，在相当小的规模上，求解两个圆盘的河内塔，

163
00:10:14,144 --> 00:10:18,224
移动圆盘 0 ，移动圆盘 1，移动圆盘 0，

164
00:10:18,224 --> 00:10:20,820
通过二进制数到 3 来反映。

165
00:10:20,820 --> 00:10:23,420
翻转最后一点，翻转一次，翻转最后一点。

166
00:10:23,420 --> 00:10:27,560
在稍微大一点的规模上，解决河内塔的三个圆盘看 

167
00:10:27,560 --> 00:10:32,240
起来就像不惜一切代价解决两个圆盘，移动 2 号圆盘，

168
00:10:32,240 --> 00:10:35,300
然后不惜一切代价再次解决两个圆盘。

169
00:10:35,300 --> 00:10:39,295
类似地，在二进制中计数到 111 需要计 数到 3，

170
00:10:39,295 --> 00:10:41,600
翻转所有三位，然后再计数 3。

171
00:10:41,600 --> 00:10:45,600
在所有规模上，这两个过程都有相同的故障。

172
00:10:45,600 --> 00:10:51,054
所以从某种意义上说，这个二进制解决方案起作用的原因 ，

173
00:10:51,054 --> 00:10:55,095
或者至少是一个解释，我觉得没有一个解释，

174
00:10:55,095 --> 00:11:00,146
但我认为 最自然的一个是你用来生成这些二进制数的模

175
00:11:00,146 --> 00:11:05,197
式具有完全 相同的结构就像河内塔所使用的模式一样，

176
00:11:05,197 --> 00:11:08,833
这就是为什么 如果你看一下翻转的位，

177
00:11:08,833 --> 00:11:11,460
你实际上正在逆转这个过程。

178
00:11:11,460 --> 00:11:12,820
你是说，什么过程产生了这些？

179
00:11:12,820 --> 00:11:18,003
就像如果我试图理解这些位是如何翻转来给我这个东西一样，

180
00:11:18,003 --> 00:11:23,380
 你实际上是逆转了河内塔的递归算法，这就是它成功的原因。

181
00:11:24,120 --> 00:11:25,220
这很酷，对吧？

182
00:11:25,220 --> 00:11:28,360
但它实际上变得更酷。

183
00:11:28,360 --> 00:11:32,960
我什至还没有弄清楚这与谢尔宾斯基三角形有何关系。

184
00:11:32,960 --> 00:11:36,060
这正是我在后续视频第 2 部分中要做的事情。

185
00:11:36,060 --> 00:11:38,320
非常感谢所有在 Patreon 上支持这些视频的人。

186
00:11:38,320 --> 00:11:41,320
我刚刚完成了《微积分本质》的第一章，

187
00:11:41,320 --> 00:11:44,486
现在正在 制作第二章，Patreon 

188
00:11:44,486 --> 00:11:49,320
支持者可以在我 几个月后发布完整系列之前抢先观看这些视频。

189
00:11:49,500 --> 00:11:54,762
这个视频和下一个视频也得到了 Desmos 的 部分支持，

190
00:11:54,762 --> 00:11:58,028
在下一个视频之前，我只想花点时间与 

191
00:11:58,028 --> 00:12:02,020
大家分享一下他们是谁以及他们正在招聘的事实。

192
00:12:02,020 --> 00:12:03,200
所以 Desmos 真的很酷。

193
00:12:03,200 --> 00:12:10,160
他们为课堂制作了很多互动数学活动，为教师制作了许多工具。

194
00:12:10,160 --> 00:12:12,520
他们提供的真正内容是课堂活动。

195
00:12:12,520 --> 00:12:16,216
就我而言，这些活动从教学角度来看是经 过深思熟虑的，

196
00:12:16,216 --> 00:12:17,780
给我留下了深刻的印象。

197
00:12:18,820 --> 00:12:21,695
该团队清楚地了解他们的工作，他们知道 

198
00:12:21,695 --> 00:12:24,420
自己的立场如何改变学生和教师的生活。

199
00:12:24,420 --> 00:12:25,680
就像我说的，他们正在招聘。

200
00:12:25,680 --> 00:12:30,588
他们总是希望引进更多优秀人才，无论是工程人才、设计 

201
00:12:30,588 --> 00:12:35,120
师、教师，还是任何其他符合他们想做的事情的技能。

202
00:12:35,120 --> 00:12:38,347
如果你们中的任何人有兴趣加入他们，

203
00:12:38,347 --> 00:12:42,333
帮助 他们为教师和学生制作一些很棒的工具，

204
00:12:42,333 --> 00:12:45,940
 您可以查看我在描述中链接的职业页面。

205
00:12:45,940 --> 00:12:47,740
就我个人而言，我认为他们正在做一些真正有意义的事情。

206
00:12:47,740 --> 00:12:53,922
我认为他们的活动正在为学生建立真正良 好的数学直觉，

207
00:12:53,922 --> 00:13:00,580
世界可以利用更多有才 华的人以他们的方式为教育做出努力。

208
00:13:00,580 --> 00:13:58,100
好的，那么我们下一个视频见， 我想你们一定会喜欢这个的。

