1
00:00:00,000 --> 00:00:08,720
Today, I want to share with you a neat way to solve the Towers of Hanoi puzzle just by

2
00:00:08,720 --> 00:00:11,240
counting in a different number system.

3
00:00:11,240 --> 00:00:16,720
And surprisingly, this stuff relates to finding a curve that fills Sierpinski's triangle.

4
00:00:16,720 --> 00:00:20,920
I learned about this from a former CS lecturer of mine, his name's Keith Schwartz, and

5
00:00:20,920 --> 00:00:24,840
I've gotta say, this man is one of the best educators I've ever met.

6
00:00:24,840 --> 00:00:28,560
I actually recorded a bit of the conversation where he showed me this stuff, so you guys

7
00:00:28,560 --> 00:00:42,520
can hear some of what he described directly.

8
00:00:42,520 --> 00:00:46,840
In case you're unfamiliar, let's just lay down what the Towers of Hanoi puzzle actually

9
00:00:46,840 --> 00:00:54,440
is.

10
00:00:54,440 --> 00:00:57,880
You think of these disks as having a hole in the middle so that you can fit them onto

11
00:00:57,880 --> 00:00:59,260
a peg.

12
00:00:59,260 --> 00:01:05,040
The setup pictured here has five disks, which I'll label 0, 1, 2, 3, 4, but in principle,

13
00:01:05,040 --> 00:01:24,120
you could have as many disks as you want.

14
00:01:24,120 --> 00:01:29,440
For example, your first move must involve moving disk 0, since any other disk has stuff

15
00:01:29,440 --> 00:01:33,320
on top of it that needs to get out of the way before it can move.

16
00:01:33,320 --> 00:01:38,000
After that, you can move disk 1, but it has to go on whatever peg doesn't currently

17
00:01:38,000 --> 00:01:44,040
have disk 0, since otherwise you'd be putting a bigger disk on a smaller one, which isn't

18
00:01:44,040 --> 00:01:45,040
allowed.

19
00:01:45,040 --> 00:01:49,600
If you've never seen this before, I highly encourage you to pause and pull out some books

20
00:01:49,600 --> 00:02:00,320
of varying sizes and try it out for yourself.

21
00:02:00,320 --> 00:02:04,760
Now Keith showed me something truly surprising about this puzzle, which is that you can solve

22
00:02:04,760 --> 00:02:10,200
it just by counting up in binary and associating the rhythm of that counting with a certain

23
00:02:10,200 --> 00:02:12,480
rhythm of disk movements.

24
00:02:12,480 --> 00:02:16,420
For anyone unfamiliar with binary, I'm going to take a moment to do a quick overview here

25
00:02:16,420 --> 00:02:17,420
first.

26
00:02:17,420 --> 00:02:21,260
Actually, even if you're familiar with binary, I want to explain it with a focus

27
00:02:21,260 --> 00:02:26,560
on the rhythm of counting, which you may or may not have thought about before.

28
00:02:26,560 --> 00:02:30,500
Any description of binary typically starts off with an introspection about our usual

29
00:02:30,500 --> 00:02:36,100
way to represent numbers, what we call base 10, since we use 10 separate digits, 0, 1,

30
00:02:36,100 --> 00:02:38,560
2, 3, 4, 5, 6, 7, 8, 9.

31
00:02:38,560 --> 00:02:44,220
The rhythm of counting begins by walking through all 10 of these digits.

32
00:02:45,220 --> 00:02:52,320
Then, having run out of new digits, you express the next number, 10, with two digits, 1, 0.

33
00:02:52,320 --> 00:02:56,760
You say that 1 is in the tens place, since it's meant to encapsulate the group of 10

34
00:02:56,760 --> 00:03:02,540
that you've already counted up to so far, while freeing the ones place to reset to 0.

35
00:03:02,540 --> 00:03:08,280
The rhythm of counting repeats like this, counting up 9, rolling over to the tens place,

36
00:03:08,280 --> 00:03:13,000
counting up 9 more, rolling over to the tens place, etc.

37
00:03:13,000 --> 00:03:19,800
Well, after repeating that process 9 times, you roll over to a hundreds place, a digit

38
00:03:19,800 --> 00:03:24,640
that keeps track of how many groups of 100 you've hit, freeing up the other two digits

39
00:03:24,640 --> 00:03:30,040
to reset to 0.

40
00:03:30,040 --> 00:03:34,060
In this way, the rhythm of counting is kind of self-similar.

41
00:03:34,060 --> 00:03:38,560
Even if you zoom out to a larger scale, the process looks like doing something, rolling

42
00:03:39,120 --> 00:03:43,960
over, doing that same thing, rolling over, and repeating 9 times before an even larger

43
00:03:43,960 --> 00:03:49,960
rollover.

44
00:03:49,960 --> 00:03:56,200
In binary, also known as base-2, you limit yourself to two digits, 0 and 1, commonly

45
00:03:56,200 --> 00:03:59,700
called bits, which is short for binary digits.

46
00:03:59,700 --> 00:04:03,960
The result is that when you're counting, you have to roll over all the time.

47
00:04:03,960 --> 00:04:08,080
After counting 0, 1, you've already run out of bits, so you need to roll over to a

48
00:04:08,600 --> 00:04:13,440
two's place, writing 1-0, and resisting every urge in your base-10-trained brain to

49
00:04:13,440 --> 00:04:20,120
read this as 10, and instead understand it to mean 1 group of 2 plus 0.

50
00:04:20,120 --> 00:04:26,400
Then increment up to 1-1, which represents 3, and already you have to roll over again,

51
00:04:26,400 --> 00:04:30,920
and since there's a 1 in that two's place, that has to roll over as well, giving you

52
00:04:30,920 --> 00:04:37,800
1-0-0, which represents 1 group of 4 plus 0 groups of 2 plus 0.

53
00:04:37,800 --> 00:04:44,660
In the same way that digits in base-10 represent powers of 10, bits in base-2 represent different

54
00:04:44,660 --> 00:04:46,380
powers of 2.

55
00:04:46,380 --> 00:04:50,360
So instead of talking about a 10's place, a 100's place, a 1000's place, things

56
00:04:50,360 --> 00:04:55,800
like that, you talk about a 2's place, a 4's place, and an 8's place.

57
00:04:55,800 --> 00:05:01,080
The rhythm of counting is now a lot faster, but that almost makes it more noticeable.

58
00:05:01,080 --> 00:05:02,940
Flip the last, roll over once.

59
00:05:02,940 --> 00:05:04,680
Flip the last, roll over twice.

60
00:05:04,680 --> 00:05:06,380
Flip the last, roll over once.

61
00:05:06,380 --> 00:05:09,100
Flip the last, roll over three times.

62
00:05:09,100 --> 00:05:13,980
Again, there's a certain self-similarity to this pattern.

63
00:05:13,980 --> 00:05:22,480
At every scale, the process is to do something, roll over, then do that same thing again.

64
00:05:22,480 --> 00:05:27,980
At the small scale, say counting up to 3, which is 1-1 in binary, this means flip the

65
00:05:27,980 --> 00:05:33,320
last bit, roll over to the two's, then flip the last bit.

66
00:05:33,320 --> 00:05:40,000
At a larger scale, like counting up to 15, which is 1-1-1-1, the process is to let the

67
00:05:40,000 --> 00:05:47,260
last 3 count up to 7, roll over to the 8's place, then let the last 3 bits count up again.

68
00:05:47,260 --> 00:05:53,040
Counting up to 255, which is 8 successive 1's, this looks like letting the last 7

69
00:05:53,040 --> 00:05:57,420
bits count up till they're full, rolling over to the 128's place, then letting the

70
00:05:57,420 --> 00:06:00,080
last 7 bits count up again.

71
00:06:01,080 --> 00:06:05,680
Alright, so with that mini-introduction, the surprising fact that Keith showed me is

72
00:06:05,680 --> 00:06:10,440
that we can use this rhythm to solve the towers of Hanoi.

73
00:06:10,440 --> 00:06:12,720
You start by counting from 0.

74
00:06:12,720 --> 00:06:18,640
Whenever you're only flipping that last bit, from 0 to 1, move disk 0 one peg to the

75
00:06:18,640 --> 00:06:22,420
right.

76
00:06:22,420 --> 00:06:29,140
If it was already on the rightmost peg, you just loop it back to the first peg.

77
00:06:29,200 --> 00:06:35,700
If you roll over once to the two's place, meaning you flip the last two bits, you move

78
00:06:35,700 --> 00:06:37,740
disk 1.

79
00:06:37,740 --> 00:06:39,740
Where do you move it, you might ask?

80
00:06:39,740 --> 00:06:43,220
You have no choice, you can't put it on top of disk 0, and there's only one other

81
00:06:43,220 --> 00:06:47,100
peg, so you move it where you're forced to move it.

82
00:06:47,100 --> 00:06:51,220
After this, counting up to 1-1, that involves just flipping the last bit, so you move disk

83
00:06:51,220 --> 00:06:52,900
0 again.

84
00:06:52,900 --> 00:06:59,620
Then when your binary counting rolls over twice to the four's place, move disk 2,

85
00:06:59,620 --> 00:07:01,440
and the pattern continues like this.

86
00:07:01,440 --> 00:07:03,460
Flip the last, move disk 0.

87
00:07:03,460 --> 00:07:05,900
Flip the last two, move disk 1.

88
00:07:05,900 --> 00:07:08,080
Flip the last, move disk 0.

89
00:07:08,080 --> 00:07:12,420
And here we're going to have to roll over three times to the 8's place, and that corresponds

90
00:07:12,420 --> 00:07:14,100
to moving disk 3.

91
00:07:14,100 --> 00:07:18,180
There's something magical about it, like when I first saw this, I was like, this can't

92
00:07:18,180 --> 00:07:19,180
work.

93
00:07:19,180 --> 00:07:22,500
I don't know how this works, I don't know why this works, now I know, but it's just

94
00:07:22,500 --> 00:07:28,100
magical when you see it, and I remember putting together animation for this for when I was

95
00:07:28,100 --> 00:07:32,540
teaching this, and just like, you know, I know how this works, I know all the things

96
00:07:32,540 --> 00:07:36,260
in it, it's still fun to just sit and just like, you know, watch it play out.

97
00:07:36,260 --> 00:07:37,260
Oh yeah.

98
00:07:37,260 --> 00:07:41,800
I mean, it's not even clear at first that this is always going to give legal moves.

99
00:07:41,800 --> 00:07:45,980
For example, how do you know that every time you're rolling over to the 8's place, that

100
00:07:45,980 --> 00:07:49,820
disk 3 is necessarily going to be freed up to move?

101
00:07:49,820 --> 00:07:53,900
At the same time, the solution just immediately raises these questions like, where does this

102
00:07:53,900 --> 00:07:58,300
come from, why does this work, and is there a better way of doing this than having to

103
00:07:58,300 --> 00:08:00,560
do 2 to the n minus 1 steps?

104
00:08:00,560 --> 00:08:05,140
It turns out, not only does this solve Towers of Hanoi, but it does it in the most efficient

105
00:08:05,140 --> 00:08:07,180
way possible.

106
00:08:07,180 --> 00:08:10,680
Understanding why this works and how it works and what the heck is going on comes down to

107
00:08:10,680 --> 00:08:16,860
a certain perspective on the puzzle, what CS folk might call a recursive perspective.

108
00:08:16,900 --> 00:08:21,420
Disk 3 is thinking, okay, 2, 1, and 0, like you have to get off of me, like I can't really

109
00:08:21,420 --> 00:08:25,020
function under this much weight and pressure.

110
00:08:25,020 --> 00:08:28,660
And so just from disk 3's perspective, if you want to figure out how is disk 3 going

111
00:08:28,660 --> 00:08:33,900
to get over here, somehow, I don't care how, disk 2, 1, and 0 have to get to spindle B.

112
00:08:33,900 --> 00:08:36,020
That's the only way it can move.

113
00:08:36,020 --> 00:08:38,060
If any of these disks are on top of 3, it can't move.

114
00:08:38,060 --> 00:08:41,000
If any of them are in spindle C, it can't move there.

115
00:08:41,000 --> 00:08:43,940
So somehow we have to get 2, 1, and 0 off.

116
00:08:43,980 --> 00:08:48,180
Having done that, then we can move disk 3 over there.

117
00:08:48,180 --> 00:08:50,020
And then disk 3 says, I'm set.

118
00:08:50,020 --> 00:08:51,940
You never need to move me again.

119
00:08:51,940 --> 00:08:54,340
Everyone else just figure out how to get here.

120
00:08:54,340 --> 00:08:57,540
And in a sense, you now have a smaller version of the same problem.

121
00:08:57,540 --> 00:09:02,380
Now you've got disk 0, 1, and 2 sitting on spindle B, you got to get them to C. So the

122
00:09:02,380 --> 00:09:06,180
idea is that if I just focus on one disk and I think about what am I going to have to do

123
00:09:06,180 --> 00:09:10,680
to get this disk to work, I can turn my bigger problem into something slightly smaller.

124
00:09:10,680 --> 00:09:12,020
And then how do I solve that?

125
00:09:12,020 --> 00:09:13,520
Well, it's exactly the same thing.

126
00:09:13,600 --> 00:09:17,160
If disk 2 is going to say, disk 1 and disk 0, it's not you, it's me.

127
00:09:17,160 --> 00:09:18,160
I just need some space.

128
00:09:18,160 --> 00:09:19,160
Get off.

129
00:09:19,160 --> 00:09:20,520
They need to move somewhere.

130
00:09:20,520 --> 00:09:23,040
Then disk 2 can move to where it needs to go.

131
00:09:23,040 --> 00:09:25,120
Then disk 1 and 0 can do this.

132
00:09:25,120 --> 00:09:31,040
But the interesting point is that every single disk pretty much has the exact same strategy.

133
00:09:31,040 --> 00:09:33,220
They all say, everybody above me, get off.

134
00:09:33,220 --> 00:09:34,220
Then I'm going to move.

135
00:09:34,220 --> 00:09:36,560
Okay, everyone pile back on.

136
00:09:36,560 --> 00:09:40,600
When you know that insight, you can code up something that will solve towers of Hanoi,

137
00:09:40,600 --> 00:09:46,720
like five or six lines of code, which probably has the highest ratio of intellectual investment

138
00:09:46,720 --> 00:09:50,680
to lines of code ever.

139
00:09:50,680 --> 00:09:55,800
And if you think about it for a bit, it becomes clear that this has to be the most efficient

140
00:09:55,800 --> 00:09:56,800
solution.

141
00:09:56,800 --> 00:10:00,060
At every step, you're only doing what's forced upon you.

142
00:10:00,060 --> 00:10:04,440
You have to get disk 0 through 2 off before you can move disk 3.

143
00:10:04,440 --> 00:10:06,520
And you have to move disk 3.

144
00:10:06,520 --> 00:10:09,680
And then you have to move disk 0 through 2 back onto it.

145
00:10:09,760 --> 00:10:15,400
There's just not any room for inefficiency from this perspective.

146
00:10:15,400 --> 00:10:18,920
So why does counting in binary capture this algorithm?

147
00:10:18,920 --> 00:10:23,480
Well, what's going on here is that this pattern of solving a subproblem, moving a

148
00:10:23,480 --> 00:10:28,480
big disk, then solving a subproblem again, is perfectly paralleled by the pattern of

149
00:10:28,480 --> 00:10:30,160
binary counting.

150
00:10:30,160 --> 00:10:35,280
Count up some amount, roll over, count up to that same amount again.

151
00:10:35,360 --> 00:10:40,520
And this towers of Hanoi algorithm and binary counting are both self-similar processes,

152
00:10:40,520 --> 00:10:44,980
in the sense that if you zoom out and count up to a larger power of 2, or solve towers

153
00:10:44,980 --> 00:10:48,920
of Hanoi with more disks, they both still have that same structure.

154
00:10:48,920 --> 00:10:52,700
Subproblem, do a thing, subproblem.

155
00:10:52,700 --> 00:10:57,820
For example, at a pretty small scale, solving towers of Hanoi for two disks, move disk 0,

156
00:10:57,820 --> 00:11:03,720
move disk 1, move disk 0, is reflected by counting up to 3 in binary.

157
00:11:03,840 --> 00:11:07,560
Flip the last bit, roll over once, flip the last bit.

158
00:11:07,560 --> 00:11:12,360
At a slightly larger scale, solving towers of Hanoi for three disks looks like doing

159
00:11:12,360 --> 00:11:17,120
whatever it takes to solve two disks, move disk number 2, then do whatever it takes to

160
00:11:17,120 --> 00:11:19,080
solve two disks again.

161
00:11:19,080 --> 00:11:24,960
Analogously, counting up to 111 in binary involves counting up to 3, rolling over all

162
00:11:24,960 --> 00:11:28,000
three bits, then counting up three more.

163
00:11:28,000 --> 00:11:32,060
At all scales, both processes have this same breakdown.

164
00:11:32,100 --> 00:11:35,620
So in a sense, the reason that this binary solution works, or at least an explanation,

165
00:11:35,620 --> 00:11:40,820
I feel like there's no one explanation, but I think the most natural one is that the pattern

166
00:11:40,820 --> 00:11:44,440
you would use to generate these binary numbers has exactly the same structure as the pattern

167
00:11:44,440 --> 00:11:49,560
you would use for towers of Hanoi, which is why if you look at the bits flipping, you're

168
00:11:49,560 --> 00:11:51,860
effectively reversing this process.

169
00:11:51,860 --> 00:11:54,200
You're saying, what process generated these?

170
00:11:54,200 --> 00:12:00,460
Like if I were trying to understand how these bits were flipped to give me this thing, you're

171
00:12:00,460 --> 00:12:06,180
effectively reversing the recursive algorithm for towers of Hanoi, which is why it works out.

172
00:12:07,860 --> 00:12:09,620
That's pretty cool, right?

173
00:12:09,620 --> 00:12:10,940
But it actually gets cooler.

174
00:12:10,940 --> 00:12:14,460
I haven't even gotten to how this relates to Sierpinski's triangle.

175
00:12:14,460 --> 00:12:19,140
And that's exactly what I'm going to do in the follow-on video, part 2.

176
00:12:19,140 --> 00:12:22,620
Many thanks to everybody who's supporting these videos on Patreon.

177
00:12:22,620 --> 00:12:26,380
I just finished the first chapter of Essence of Calculus, and I'm working on the second

178
00:12:26,380 --> 00:12:30,840
one right now, and Patreon supporters are getting early access to these videos before

179
00:12:30,840 --> 00:12:34,780
I publish the full series in a few months.

180
00:12:34,780 --> 00:12:39,260
This video and the next one are also supported in part by Desmos, and before the next video

181
00:12:39,260 --> 00:12:43,020
I just want to take a moment and share with you guys a little about who they are and the

182
00:12:43,020 --> 00:12:44,780
fact that they're hiring.

183
00:12:44,780 --> 00:12:47,020
So Desmos is actually really cool.

184
00:12:47,020 --> 00:12:51,680
They make a lot of these interactive math activities for classrooms and tools for teachers.

185
00:12:51,680 --> 00:12:56,060
The real meat of their offering is in their classroom activities.

186
00:12:56,060 --> 00:13:00,380
For my part, I'm super impressed by just how well-thought-out these activities are

187
00:13:00,380 --> 00:13:02,540
from a pedagogical standpoint.

188
00:13:02,540 --> 00:13:06,000
The team clearly knows their stuff, and they know where they stand to make a difference

189
00:13:06,000 --> 00:13:08,180
in students' and teachers' lives.

190
00:13:08,180 --> 00:13:10,140
And like I said, they're hiring.

191
00:13:10,140 --> 00:13:14,780
They are always looking to bring in more good talent, whether that's engineering talent,

192
00:13:14,780 --> 00:13:19,600
designers, teachers, or whatever other skill sets line up with what they want to do.

193
00:13:19,600 --> 00:13:22,920
If any of you out there are interested in joining them, helping them make some of these

194
00:13:22,920 --> 00:13:26,720
great tools for teachers and students, you can check out the careers page that I've

195
00:13:26,720 --> 00:13:27,720
linked in the description.

196
00:13:27,720 --> 00:13:30,480
Personally, I think they're doing some really meaningful stuff.

197
00:13:30,480 --> 00:13:35,080
I think their activities are building genuinely good math intuitions for students, and the

198
00:13:35,080 --> 00:13:39,060
world could use a few more talented people pointing their efforts towards education the

199
00:13:39,060 --> 00:13:40,520
way that they do.

200
00:13:40,520 --> 00:13:44,640
Alright, so with that I'll see you guys next video, and I think you're really going

201
00:13:44,640 --> 00:13:45,720
to like where this is going.

