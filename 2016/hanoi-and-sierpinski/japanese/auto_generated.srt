1
00:00:04,200 --> 00:00:07,538
今日は、別の数体系で数えるだけでハノイの塔のパズル 

2
00:00:07,538 --> 00:00:10,620
を解く素敵な方法を皆さんと共有したいと思います。

3
00:00:11,220 --> 00:00:13,430
そして驚くべきことに、これはシェルピンスキーの三

4
00:00:13,430 --> 00:00:15,640
角形を満たす曲線を見つけることに関連しています。

5
00:00:16,720 --> 00:00:18,305
このことについては、私の元 CS 

6
00:00:18,305 --> 00:00:20,636
講師、彼の名前はキース・シュワルツから聞きました。

7
00:00:20,636 --> 00:00:23,154
 この人は私がこれまで会った中で最も優れた教育者の一人

8
00:00:23,154 --> 00:00:24,460
であると言わざるを得ません。

9
00:00:25,140 --> 00:00:28,070
私は実際に彼がこれを私に見せた会話の一部を録音したので、 

10
00:00:28,070 --> 00:00:30,900
皆さんは彼が説明した内容の一部を直接聞くことができます。

11
00:00:38,420 --> 00:00:42,249
よく知らない方のために、ハノイの塔のパズルが実 

12
00:00:42,249 --> 00:00:45,760
際にどのようなものかを簡単に説明しましょう。

13
00:00:45,760 --> 00:00:50,216
これらのディスクの中央には穴があり、ペグ 

14
00:00:50,216 --> 00:00:54,460
に取り付けることができると考えられます。

15
00:00:54,460 --> 00:00:56,593
ここに示されているセットアップには 5 

16
00:00:56,593 --> 00:00:58,833
つのディスクがあり、0、1、2、3 、4 

17
00:00:58,833 --> 00:01:01,500
とラベルを付けますが、原則として、必要な数のディス

18
00:01:01,500 --> 00:01:02,460
クを使用できます。

19
00:01:02,580 --> 00:01:04,916
たとえば、最初の移動にはディスク 0 

20
00:01:04,916 --> 00:01:06,883
の移動が含まれる必要があります。

21
00:01:06,883 --> 00:01:10,203
 他のディス クには、移動する前に邪魔にならないように

22
00:01:10,203 --> 00:01:12,540
する必要があるものが上にあるためです。

23
00:01:12,540 --> 00:01:15,110
その後、ディスク 1 を移動できますが、現在ディスク 

24
00:01:15,110 --> 00:01:17,109
0 がないペ グに移動する必要があります。

25
00:01:17,109 --> 00:01:19,013
 そうしないと、より大きなディスクをよ 

26
00:01:19,013 --> 00:01:21,393
り小さなディスクの上に置くことになり、これは許可さ

27
00:01:21,393 --> 00:01:22,060
れていません。

28
00:01:23,720 --> 00:01:26,000
これをこれまで見たことがない場合は、一時停

29
00:01:26,000 --> 00:01:28,281
止してさまざまなサイズ の本を何冊か取り出

30
00:01:28,281 --> 00:01:30,780
して、自分で試してみることを強くお勧めします。

31
00:01:30,780 --> 00:01:34,313
さて、キースはこのパズルについて本当に驚くべき

32
00:01:34,313 --> 00:01:37,846
ことを教えてくれ ました。 それは、二進数で数

33
00:01:37,846 --> 00:01:40,611
えて、その数え方のリズムをディスク 

34
00:01:40,611 --> 00:01:45,220
の動きの特定のリズムと関連付けるだけで解けるということです。

35
00:01:45,220 --> 00:01:48,130
バイナリに詳しくない人のために、最 

36
00:01:48,130 --> 00:01:50,880
初にここで簡単に概要を説明します。

37
00:01:50,880 --> 00:01:53,030
実は、バイナリのことは知っていても、考え

38
00:01:53,030 --> 00:01:55,181
たこともなかったかも しれない、数え方の

39
00:01:55,181 --> 00:01:57,440
リズムに焦点を当てて説明したいと思います。

40
00:01:57,440 --> 00:02:00,569
バイナリの説明は通常、10 個の個別の数字 

41
00:02:00,569 --> 00:02:03,556
0、1、2、3、 4、5、6、7、8、9 

42
00:02:03,556 --> 00:02:06,117
を使用するため、私たちが基数 10 

43
00:02:06,117 --> 00:02:10,100
と呼ぶ通常の数値の表現方法についての内省から始まります。

44
00:02:10,100 --> 00:02:12,396
数を数えるリズムは、これらの 10 

45
00:02:12,396 --> 00:02:14,820
桁をすべて通過することから始まります。

46
00:02:14,820 --> 00:02:17,700
次に、新しい桁がなくなったら、次の数値 

47
00:02:17,700 --> 00:02:20,580
10 を 2 桁の 1、0 で表します。

48
00:02:20,580 --> 00:02:23,835
1 が 10 の位にあると言うのは、これまでに既に数えた 

49
00:02:23,835 --> 00:02:26,866
10 のグループをカプ セル化し、1 の位を解放して 

50
00:02:26,866 --> 00:02:29,560
0 にリセットすることを目的としているからです。

51
00:02:29,560 --> 00:02:34,579
数え方のリズムは、9つ数えて、十の位に転がり、さらに9 

52
00:02:34,579 --> 00:02:39,240
つ数えて、十の位に転がり、というように繰り返します。

53
00:02:39,240 --> 00:02:44,562
このプロセスを 9 回繰り返した後、100 の位にロール 

54
00:02:44,562 --> 00:02:49,884
オーバーします。 この数字は、100 のグループの数を記 

55
00:02:49,884 --> 00:02:54,840
録し、残りの 2 桁を解放して 0 にリセットします。

56
00:02:54,840 --> 00:02:57,320
このように、数を数えるリズムは一種の自己相似です。

57
00:02:57,320 --> 00:03:01,182
より大きなスケールにズームアウトした場合でも、このプロセス 

58
00:03:01,182 --> 00:03:04,788
は、何かをして、寝返りし、同じことをして、寝返りを 9 

59
00:03:04,788 --> 00:03:08,522
回 繰り返した後、さらに大きな寝返りが行われるように見えま

60
00:03:08,522 --> 00:03:08,780
す。

61
00:03:08,780 --> 00:03:14,474
ベース 2 とも呼ばれるバイナリでは、一般に 2 進数の略 

62
00:03:14,474 --> 00:03:19,980
でビットと呼ばれる 0 と 1 の 2 桁に制限されます。

63
00:03:19,980 --> 00:03:22,570
その結果、数を数えるときに常に寝返り

64
00:03:22,570 --> 00:03:25,160
をしなければならないことになります。

65
00:03:25,160 --> 00:03:28,930
0、1 と数えた後は、すでにビットが不足しているため、2 

66
00:03:28,930 --> 00:03:32,180
の位にロールオーバーして 1-0 と 書き、10 

67
00:03:32,180 --> 00:03:34,520
進法で訓練された脳内でこれを 10 

68
00:03:34,520 --> 00:03:38,290
と読み取ろうとするあらゆる衝動に抵抗する必要 があります。

69
00:03:38,290 --> 00:03:40,890
 代わりに、2 の 1 グループに 0 

70
00:03:40,890 --> 00:03:43,620
を加えたものを意味すると理解してください。

71
00:03:43,620 --> 00:03:47,100
次に、3 を表す 1-1 まで増分します。

72
00:03:47,100 --> 00:03:51,410
 すでにもう一度ロールオーバーする必要がありま す。

73
00:03:51,410 --> 00:03:55,720
 2 の位置に 1 があるので、それもロールオーバー

74
00:03:55,720 --> 00:04:00,693
する必要があり、1-0-0 (1 を表します) になります。

75
00:04:00,693 --> 00:04:05,500
 4 プラス 0 のグループ 2 プラス 0 のグループ。

76
00:04:05,500 --> 00:04:08,144
10 進数の数字が 10 の累乗を表すのと同じように、 

77
00:04:08,144 --> 00:04:10,600
2 進数のビットはさまざまな 2 の累乗を表します。

78
00:04:10,600 --> 00:04:15,752
つまり、10の位、100の位、1000の位などについて 

79
00:04:15,752 --> 00:04:20,720
話す代わりに、2の位、4の位、8の位について話します。

80
00:04:20,720 --> 00:04:24,190
数を数えるリズムはかなり速くなりましたが、そ

81
00:04:24,190 --> 00:04:27,660
の分、より顕著に感じられるようになりました。

82
00:04:27,660 --> 00:04:28,020
最後を裏返し、一度裏返します。

83
00:04:28,420 --> 00:04:28,940
最後を裏返し、2回回転させます。

84
00:04:28,940 --> 00:04:32,220
最後を裏返し、一度裏返します。

85
00:04:32,220 --> 00:04:33,340
最後をひっくり返し、3回回転させます。

86
00:04:33,340 --> 00:04:36,127
繰り返しますが、このパターンに

87
00:04:36,127 --> 00:04:39,100
はある種の自己類似性があります。

88
00:04:39,100 --> 00:04:42,080
どのスケールでも、プロセスは何かをして、寝返りを

89
00:04:42,080 --> 00:04:45,060
して、同じことをもう一度繰り返すというものです。

90
00:04:45,060 --> 00:04:48,905
小規模なスケールでは、たとえば、2 進数で 1-1 である 

91
00:04:48,905 --> 00:04:52,110
3 まで数えることは、最後の ビットを反転し、2 

92
00:04:52,110 --> 00:04:55,827
にロールオーバーしてから、最後のビットを反転することを意味

93
00:04:55,827 --> 00:04:56,340
します。

94
00:04:56,340 --> 00:05:01,370
より大きなスケールでは、15 までカウントする 

95
00:05:01,370 --> 00:05:06,400
(1-1-1-1) ようなプロセスでは、最後の 

96
00:05:06,400 --> 00:05:09,754
3 を 7 までカウントし、8 

97
00:05:09,754 --> 00:05:13,736
の位にロールオーバーして、最後の 3 

98
00:05:13,736 --> 00:05:17,300
ビットを再びカウントアップします。

99
00:05:17,300 --> 00:05:20,426
8 個の連続する 1 である 255 

100
00:05:20,426 --> 00:05:23,058
までカウントすると、最後の 7 

101
00:05:23,058 --> 00:05:27,336
ビットがいっぱいになるまでカウントアップし、128 

102
00:05:27,336 --> 00:05:30,955
の位にロールオーバ ーしてから、最後の 7 

103
00:05:30,955 --> 00:05:34,740
ビットを再びカウントアップするように見えます。

104
00:05:34,740 --> 00:05:37,998
さて、そのミニ紹介はこのくらいにして、キースが

105
00:05:37,998 --> 00:05:41,257
私に見せてくれた驚くべき 事実は、このリズムを

106
00:05:41,257 --> 00:05:44,800
使ってハノイの塔を解くことができるということです。

107
00:05:44,800 --> 00:05:48,540
0から数え始めます。

108
00:05:49,140 --> 00:05:51,598
最後のビットだけを 0 から 1 に反転するとき 

109
00:05:51,598 --> 00:05:53,860
は、ディスク 0 を 1 ペグ右に移動します。

110
00:05:53,860 --> 00:05:56,310
すでに右端のペグにある場合は、最初

111
00:05:56,310 --> 00:05:58,760
のペグにループバックするだけです。

112
00:05:58,760 --> 00:06:02,896
2 の位に 1 回ロールオーバーすると、つまり最後の 

113
00:06:02,896 --> 00:06:06,880
2 ビットを反転すると、ディスク 1 が移動します。

114
00:06:06,880 --> 00:06:08,420
どこに移動するのかと疑問に思うかもしれません。

115
00:06:08,420 --> 00:06:11,056
選択肢はありません。 ディスク 0 

116
00:06:11,056 --> 00:06:14,278
の上に置くことはできません。 ペグ は他に 

117
00:06:14,278 --> 00:06:18,380
1 つしかないため、移動せざるを得ない場所に移動します。

118
00:06:18,380 --> 00:06:22,264
この後、1-1 までカウントアップしますが、これは最後のビ 

119
00:06:22,264 --> 00:06:26,020
ットを反転するだけなので、ディスク 0 を再度移動します。

120
00:06:28,800 --> 00:06:30,782
次に、バイナリ カウンティングが 4 の位まで 

121
00:06:30,782 --> 00:06:33,178
2 回ロールオーバー したら、ディスク 2 を移動します。

122
00:06:33,178 --> 00:06:34,500
 パターンは次のように続きます。

123
00:06:34,500 --> 00:06:36,300
最後を反転し、ディスク 0 を移動します。

124
00:06:36,300 --> 00:06:37,900
最後の 2 つを裏返し、ディスク 1 を移動します。

125
00:06:37,900 --> 00:06:38,340
最後を反転し、ディスク 0 を移動します。

126
00:06:38,380 --> 00:06:40,668
ここでは、8 の位まで 3 回ロールオーバーする必要があり 

127
00:06:40,668 --> 00:06:42,880
ます。 これは、ディスク 3 を移動することに相当します。

128
00:06:42,880 --> 00:06:45,331
これには何か魔法のようなものがあって、初めてこ 

129
00:06:45,331 --> 00:06:47,680
れを見たとき、これはうまくいかない、と思った。

130
00:06:47,680 --> 00:06:50,624
これがどのように機能するのかわかりません、なぜこれが

131
00:06:50,624 --> 00:06:53,003
機能するのかもわかりません、今ならわかり 

132
00:06:53,003 --> 00:06:55,042
ますが、これを見ると魔法のようです。

133
00:06:55,042 --> 00:06:58,326
 私がこれを教えていたとき、これ用のアニメーションをまと 

134
00:06:58,326 --> 00:07:01,271
めたのを覚えています。 ほら、私はこれがどのように機

135
00:07:01,271 --> 00:07:03,763
能するのか知っていますし、その中のすべての 

136
00:07:03,763 --> 00:07:06,708
ことを知っていますが、ただ座って、それが展開されるの

137
00:07:06,708 --> 00:07:08,860
をただ見ているだけでもまだ楽しいです。

138
00:07:08,860 --> 00:07:08,860
そうそう。

139
00:07:08,860 --> 00:07:10,370
つまり、これが常に合法的な動きをもたらす

140
00:07:10,370 --> 00:07:11,880
かどうかは、最初は明らかではありません。

141
00:07:11,880 --> 00:07:15,100
たとえば、8 の位にロールオーバーするたびに、ディスク 

142
00:07:15,100 --> 00:07:17,630
3 が必然的 に解放されて移動できることをど

143
00:07:17,630 --> 00:07:19,700
うやって知ることができるでしょうか。

144
00:07:19,700 --> 00:07:22,426
同時に、このソリューションでは、これはどこから

145
00:07:22,426 --> 00:07:25,152
来たのか、なぜこ れが機能するのか、2 から 

146
00:07:25,152 --> 00:07:27,285
n マイナス 1 のステップを実行 

147
00:07:27,285 --> 00:07:30,011
するよりも優れた方法はあるのか、といった疑問が

148
00:07:30,011 --> 00:07:30,960
すぐに生じます。

149
00:07:30,960 --> 00:07:34,668
これはハノイの塔を解決するだけでなく、可能な限り 

150
00:07:34,668 --> 00:07:38,080
最も効率的な方法で解決することが判明しました。

151
00:07:38,080 --> 00:07:40,633
これがなぜ機能するのか、どのように機能するのか、そして一体

152
00:07:40,633 --> 00:07:43,186
何が起こっているのかを理解す るには、パズルに対する特定の

153
00:07:43,186 --> 00:07:45,740
視点、CS の人々が再帰的視点と呼ぶものにかかっています。

154
00:07:45,740 --> 00:07:48,178
ディスク 3 は、分かった、2、1、0 と考えています。

155
00:07:48,178 --> 00:07:49,920
 まるで私から降りなければならないかの 

156
00:07:49,920 --> 00:07:51,923
ように、私はこれほどの重さとプレッシャーの下で

157
00:07:51,923 --> 00:07:53,840
は本当に機能できないかのように考えています。

158
00:07:53,840 --> 00:07:56,056
ディスク 3 の観点から見ると、ディスク 3 

159
00:07:56,056 --> 00:07:58,948
がどのようにしてここに到達するのか知りたければ、どういうわ 

160
00:07:58,948 --> 00:08:01,646
けか、方法は関係ありませんが、ディスク 2、1、および 

161
00:08:01,646 --> 00:08:03,960
0 はスピンドル B に到達する必要があります。

162
00:08:03,960 --> 00:08:05,960
それがそれが動くことができる唯一の方法です。

163
00:08:06,700 --> 00:08:07,537
これらのディスクのいずれかが 3 

164
00:08:07,537 --> 00:08:08,720
枚の上にある場合、そのディスクは移動できません。

165
00:08:08,720 --> 00:08:10,352
それらのいずれかがスピンドル C 

166
00:08:10,352 --> 00:08:12,080
にある場合、そこには移動できません。

167
00:08:12,080 --> 00:08:13,098
したがって、何らかの方法で 2、1、0 

168
00:08:13,098 --> 00:08:13,760
を取り除く必要があります。

169
00:08:13,760 --> 00:08:17,100
それが完了したら、ディスク 3 をそこに移動できます。

170
00:08:17,100 --> 00:08:18,380
そしてディスク 3 では、「準備完了」と表示されます。

171
00:08:18,580 --> 00:08:21,340
二度と私を動かす必要はありません。

172
00:08:21,340 --> 00:08:23,060
他の人は、ここに行く方法を考えているだけです。

173
00:08:23,060 --> 00:08:25,320
ある意味、同じ問題の小規模バージ

174
00:08:25,320 --> 00:08:27,580
ョンが手に入ったことになります。

175
00:08:27,580 --> 00:08:28,787
ディスク 0、1、2 がスピンドル B 

176
00:08:28,787 --> 00:08:29,874
に配置されているので、それらを C 

177
00:08:29,874 --> 00:08:30,660
に移動する必要があります。

178
00:08:30,660 --> 00:08:33,826
つまり、 1 つのディスクに焦点を当てて、このディスクを動

179
00:08:33,826 --> 00:08:35,792
作させるには何をしなければならない 

180
00:08:35,792 --> 00:08:38,958
かを考えれば、より大きな問題を少し小さな問題に変えることが

181
00:08:38,958 --> 00:08:40,159
できるということです。

182
00:08:40,159 --> 00:08:42,240
そして、どうすればそれを解決できるのでしょうか？

183
00:08:42,260 --> 00:08:45,120
まあ、まったく同じことです。

184
00:08:45,120 --> 00:08:47,458
ディスク 2 がディスク 1 とディスク 

185
00:08:47,458 --> 00:08:50,020
0 と言ったら、それはあなたではなく、私です。

186
00:08:50,020 --> 00:08:50,020
ただスペースが必要なんです。

187
00:08:50,020 --> 00:08:50,020
降りる。

188
00:08:50,020 --> 00:08:52,260
彼らはどこかに移動する必要があります。

189
00:08:52,260 --> 00:08:53,380
その後、ディスク 2 は必要な場所に移動できます。

190
00:08:53,980 --> 00:08:55,100
その後、ディスク 1 と 0 でこれを行うことができます。

191
00:08:55,100 --> 00:08:57,280
しかし、興味深い点は、すべてのディスクが

192
00:08:57,280 --> 00:08:59,460
ほぼ同じ戦略を持っているということです。

193
00:08:59,460 --> 00:09:00,980
彼らは皆、「私の上の人は全員降りろ」と言います。

194
00:09:00,980 --> 00:09:03,240
それでは、移動します。

195
00:09:03,240 --> 00:09:04,900
さて、みんなまた積み上げてください。

196
00:09:04,900 --> 00:09:08,257
その洞察がわかれば、5 ～ 6 行のコードなど、ハノイの塔 

197
00:09:08,257 --> 00:09:10,383
を解決するようなコードを作成できます。

198
00:09:10,383 --> 00:09:13,628
 これは、コード行に対 する知的投資の比率がおそらくこれま

199
00:09:13,628 --> 00:09:14,860
でで最も高いものです。

200
00:09:14,860 --> 00:09:18,341
少し考えてみれば、これが最も効率的な 

201
00:09:18,341 --> 00:09:21,640
解決策であることが明らかになります。

202
00:09:21,640 --> 00:09:22,611
あらゆる段階で、あなたは自分に押し

203
00:09:22,611 --> 00:09:23,640
付けられたことをやっているだけです。

204
00:09:23,640 --> 00:09:25,704
ディスク 3 を移動する前に、ディスク 

205
00:09:25,704 --> 00:09:27,460
0 ～ 2 を外す必要があります。

206
00:09:27,460 --> 00:09:27,760
そしてディスク 3 を移動する必要があります。

207
00:09:27,760 --> 00:09:30,940
次に、ディスク 0 から 2 をその上に戻す必要があります。

208
00:09:31,020 --> 00:09:33,600
この観点から見ると、非効率が許される余地はありません。

209
00:09:33,600 --> 00:09:34,445
では、なぜバイナリでのカウントがこ

210
00:09:34,445 --> 00:09:35,340
のアルゴリズムを捉えるのでしょうか?

211
00:09:36,320 --> 00:09:38,695
さて、ここで何が起こっているのかというと、部分問

212
00:09:38,695 --> 00:09:41,071
題を解決し、大き な円盤を移動し、その後、再度部

213
00:09:41,071 --> 00:09:42,852
分問題を解決するというこのパターン 

214
00:09:42,852 --> 00:09:45,228
が、二進数カウントのパターンと完全に類似している

215
00:09:45,228 --> 00:09:46,020
ということです。

216
00:09:46,020 --> 00:09:49,569
ある程度の量を数えて、ロールオー

217
00:09:49,569 --> 00:09:53,120
バーし、再び同じ量まで数えます。

218
00:09:53,120 --> 00:09:55,908
そして、このハノイの塔のアルゴリズムとバイナリ 

219
00:09:55,908 --> 00:09:58,231
カウンティングは、ズームアウトして 2 

220
00:09:58,231 --> 00:10:01,716
のより大きな累乗まで数えたり、より多くのディスクでハノイの塔

221
00:10:01,716 --> 00:10:05,201
を解いたりして も、両方とも同じ構造を持っているという意味で

222
00:10:05,201 --> 00:10:07,060
、どちらも自己類似プロセスです。

223
00:10:07,060 --> 00:10:09,300
サブ問題、何かをしてください、サブ問題。

224
00:10:09,880 --> 00:10:12,132
たとえば、非常に小規模なスケールでは、2 

225
00:10:12,132 --> 00:10:15,028
つのディスク、ムーブ ディスク 0、ムーブ ディスク 

226
00:10:15,028 --> 00:10:17,709
1、ム ーブ ディスク 0 のハノイの塔を解くと、

227
00:10:17,709 --> 00:10:20,820
バイナリで 3 までカウントすることによって反映されます。

228
00:10:20,820 --> 00:10:22,120
最後のビットを反転し、一度ロールオー

229
00:10:22,120 --> 00:10:23,420
バーして、最後のビットを反転します。

230
00:10:23,420 --> 00:10:25,796
もう少し大きなスケールで、3 つのディスクについて

231
00:10:25,796 --> 00:10:27,411
ハノイの塔を解くことは、2 つの 

232
00:10:27,411 --> 00:10:29,787
ディスクを解決するために必要なことをすべて実行し、

233
00:10:29,787 --> 00:10:31,973
ディスク番号 2 を移動し、その 後再び 2 

234
00:10:31,973 --> 00:10:34,349
つのディスクを解決するために必要なことをすべて実行

235
00:10:34,349 --> 00:10:35,300
するように見えます。

236
00:10:35,300 --> 00:10:37,453
同様に、2 進数で 111 までカウントするには、3 

237
00:10:37,453 --> 00:10:39,526
までカウントし、3 ビッ トすべてをロールオーバーし

238
00:10:39,526 --> 00:10:41,600
て、さらに 3 つカウントアップする必要があります。

239
00:10:41,600 --> 00:10:43,600
どの規模においても、両方のプロセ

240
00:10:43,600 --> 00:10:45,600
スでこれと同じ内訳が発生します。

241
00:10:45,600 --> 00:10:49,885
ある意味、このバイナリ ソリューションが機能する理由、また

242
00:10:49,885 --> 00:10:54,170
は少なくと も説明はありませんが、最も自然な説明は、これら

243
00:10:54,170 --> 00:10:58,456
の 2 進数を生成する ために使用するパターンがまったく同

244
00:10:58,456 --> 00:11:00,820
じであるということだと思います。

245
00:11:00,820 --> 00:11:05,105
 こ の構造は、ハノイの塔に使用されるパターンと同じです。

246
00:11:05,105 --> 00:11:09,391
 そのため、ビット の反転を見ると、事実上、このプロセスを

247
00:11:09,391 --> 00:11:11,460
逆にしていることになります。

248
00:11:11,460 --> 00:11:12,118
どのようなプロセスでこれらが生

249
00:11:12,118 --> 00:11:12,820
成されたのか、ということですね。

250
00:11:12,820 --> 00:11:16,258
これを得るためにこれらのビットがどのように反転されたかを

251
00:11:16,258 --> 00:11:18,222
理解しようとしているのと同じよ 

252
00:11:18,222 --> 00:11:21,660
うに、ハノイの塔の再帰アルゴリズムを事実上逆にしているの

253
00:11:21,660 --> 00:11:23,380
で、それがうまくいくのです。

254
00:11:24,120 --> 00:11:25,220
それはとてもクールですよね？

255
00:11:25,220 --> 00:11:28,360
でも実際はもっと涼しくなるんです。

256
00:11:28,360 --> 00:11:30,660
これがシェルピンスキーの三角形とどの

257
00:11:30,660 --> 00:11:32,960
ように関係するのかさえ分かりません。

258
00:11:32,960 --> 00:11:34,754
そして、それはまさに私が次のビデオのパート 

259
00:11:34,754 --> 00:11:36,060
2 でやろうとしていることです。

260
00:11:36,060 --> 00:11:37,161
Patreon でこれらのビデオをサポ

261
00:11:37,161 --> 00:11:38,320
ートしてくださっている皆様に感謝します。

262
00:11:38,320 --> 00:11:40,806
『Essence of Calculus』の第 1 

263
00:11:40,806 --> 00:11:43,485
章を終えたばかりで、現在 第 2 章に取り組んでいます。

264
00:11:43,485 --> 00:11:46,259
 数か月以内に全シリーズを公開する前に、Pat reon 

265
00:11:46,259 --> 00:11:48,937
サポーターはこれらのビデオに早期アクセスできるようになり

266
00:11:48,937 --> 00:11:49,320
ました。

267
00:11:49,500 --> 00:11:51,840
このビデオと次のビデオも Desmos 

268
00:11:51,840 --> 00:11:54,180
によって部分的にサポートされて います。

269
00:11:54,180 --> 00:11:57,222
 次のビデオの前に、少し時間をとって、彼らが誰である

270
00:11:57,222 --> 00:12:00,264
か、そして彼 らが雇用しているという事実について少し

271
00:12:00,264 --> 00:12:02,020
皆さんと共有したいと思います。

272
00:12:02,020 --> 00:12:03,200
デスモスは本当にクールです。

273
00:12:03,200 --> 00:12:06,611
彼らは、このようなインタラクティブな数学アクティビ

274
00:12:06,611 --> 00:12:10,160
ティを教室や教師用のツールとして多く作成しています。

275
00:12:10,160 --> 00:12:12,520
彼らの真骨頂は教室活動にあります。

276
00:12:12,520 --> 00:12:15,255
私としては、これらの活動が教育的な観点から非常によ 

277
00:12:15,255 --> 00:12:17,780
く考えられていることに非常に感銘を受けています。

278
00:12:18,820 --> 00:12:20,631
チームは自分たちのことを明確に理解しており、

279
00:12:20,631 --> 00:12:22,443
生徒と教師の生活に変化を もたらすために自分

280
00:12:22,443 --> 00:12:24,420
たちがどのような立場にあるのかを理解しています。

281
00:12:24,420 --> 00:12:25,680
そして、先ほども言ったように、彼らは雇用を行っています。

282
00:12:25,680 --> 00:12:28,789
彼らは常に、エンジニアリング人材、デザイナー、教師、また

283
00:12:28,789 --> 00:12:31,899
は自分たちがやりたいことに一 致するその他のスキルセット

284
00:12:31,899 --> 00:12:35,120
であるかどうか、より優れた人材を迎え入れようとしています。

285
00:12:35,120 --> 00:12:38,771
皆さんの中に、彼らに参加して、教師や生徒向けの優れた 

286
00:12:38,771 --> 00:12:42,423
ツールの作成を支援することに興味がある人がいる場合は 

287
00:12:42,423 --> 00:12:45,940
、説明でリンクした採用ページをチェックしてください。

288
00:12:45,940 --> 00:12:47,740
個人的には、彼らは本当に意味のあることをしていると思います。

289
00:12:47,740 --> 00:12:52,068
彼らの活動は、生徒たちに真に優れた数学的直観を構築している 

290
00:12:52,068 --> 00:12:56,251
と思います。 そして世界は、彼らと同じように教育に向けた努

291
00:12:56,251 --> 00:13:00,580
力 を向ける才能のある人材をもっと活用できるかもしれません。

292
00:13:00,580 --> 00:13:25,888
さて、それでは次のビデオでお会いしましょう。

293
00:13:25,888 --> 00:13:58,100
 この 先の展開はきっと気に入っていただけると思います。

