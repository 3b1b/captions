1
00:00:00,000 --> 00:00:05,844
今日は、別の数体系で数えるだけでハノイの塔のパズル

2
00:00:05,844 --> 00:00:11,240
を解く素敵な方法を皆さんと共有したいと思います。

3
00:00:11,240 --> 00:00:13,980
そして驚くべきことに、これはシェルピンスキーの三

4
00:00:13,980 --> 00:00:16,720
角形を満たす曲線を見つけることに関連しています。

5
00:00:16,720 --> 00:00:18,383
このことについては、私の元 CS

6
00:00:18,383 --> 00:00:20,828
講師、彼の名前はキース・シュワルツから聞きました。

7
00:00:20,828 --> 00:00:23,470
この人は私がこれまで会った中で最も優れた教育者の一人

8
00:00:23,470 --> 00:00:24,840
であると言わざるを得ません。

9
00:00:24,840 --> 00:00:33,835
私は実際に彼がこれを私に見せた会話の一部を録音したので、

10
00:00:33,835 --> 00:00:42,520
皆さんは彼が説明した内容の一部を直接聞くことができます。

11
00:00:42,520 --> 00:00:48,739
よく知らない方のために、ハノイの塔のパズルが実

12
00:00:48,739 --> 00:00:54,440
際にどのようなものかを簡単に説明しましょう。

13
00:00:54,440 --> 00:00:56,908
これらのディスクの中央には穴があり、ペグ

14
00:00:56,908 --> 00:00:59,260
に取り付けることができると考えられます。

15
00:00:59,260 --> 00:01:05,889
ここに示されているセットアップには 5

16
00:01:05,889 --> 00:01:12,850
つのディスクがあり、0、1、2、3 、4

17
00:01:12,850 --> 00:01:21,136
とラベルを付けますが、原則として、必要な数のディス

18
00:01:21,136 --> 00:01:24,120
クを使用できます。

19
00:01:24,120 --> 00:01:26,278
たとえば、最初の移動にはディスク 0

20
00:01:26,278 --> 00:01:28,095
の移動が含まれる必要があります。

21
00:01:28,095 --> 00:01:31,161
他のディス クには、移動する前に邪魔にならないように

22
00:01:31,161 --> 00:01:33,320
する必要があるものが上にあるためです。

23
00:01:33,320 --> 00:01:36,484
その後、ディスク 1 を移動できますが、現在ディスク

24
00:01:36,484 --> 00:01:38,945
0 がないペ グに移動する必要があります。

25
00:01:38,945 --> 00:01:41,289
そうしないと、より大きなディスクをよ

26
00:01:41,289 --> 00:01:44,219
り小さなディスクの上に置くことになり、これは許可さ

27
00:01:44,219 --> 00:01:45,040
れていません。

28
00:01:45,040 --> 00:01:49,976
これをこれまで見たことがない場合は、一時停

29
00:01:49,976 --> 00:01:54,913
止してさまざまなサイズ の本を何冊か取り出

30
00:01:54,913 --> 00:02:00,320
して、自分で試してみることを強くお勧めします。

31
00:02:00,320 --> 00:02:03,295
さて、キースはこのパズルについて本当に驚くべき

32
00:02:03,295 --> 00:02:06,270
ことを教えてくれ ました。 それは、二進数で数

33
00:02:06,270 --> 00:02:08,599
えて、その数え方のリズムをディスク

34
00:02:08,599 --> 00:02:12,480
の動きの特定のリズムと関連付けるだけで解けるということです。

35
00:02:12,480 --> 00:02:15,020
バイナリに詳しくない人のために、最

36
00:02:15,020 --> 00:02:17,420
初にここで簡単に概要を説明します。

37
00:02:17,420 --> 00:02:20,416
実は、バイナリのことは知っていても、考え

38
00:02:20,416 --> 00:02:23,413
たこともなかったかも しれない、数え方の

39
00:02:23,413 --> 00:02:26,560
リズムに焦点を当てて説明したいと思います。

40
00:02:26,560 --> 00:02:29,526
バイナリの説明は通常、10 個の個別の数字

41
00:02:29,526 --> 00:02:32,357
0、1、2、3、 4、5、6、7、8、9

42
00:02:32,357 --> 00:02:34,784
を使用するため、私たちが基数 10

43
00:02:34,784 --> 00:02:38,560
と呼ぶ通常の数値の表現方法についての内省から始まります。

44
00:02:38,560 --> 00:02:41,800
数を数えるリズムは、これらの 10

45
00:02:41,800 --> 00:02:45,220
桁をすべて通過することから始まります。

46
00:02:45,220 --> 00:02:48,770
次に、新しい桁がなくなったら、次の数値

47
00:02:48,770 --> 00:02:52,320
10 を 2 桁の 1、0 で表します。

48
00:02:52,320 --> 00:02:56,024
1 が 10 の位にあると言うのは、これまでに既に数えた

49
00:02:56,024 --> 00:02:59,474
10 のグループをカプ セル化し、1 の位を解放して

50
00:02:59,474 --> 00:03:02,540
0 にリセットすることを目的としているからです。

51
00:03:02,540 --> 00:03:07,963
数え方のリズムは、9つ数えて、十の位に転がり、さらに9

52
00:03:07,963 --> 00:03:13,000
つ数えて、十の位に転がり、というように繰り返します。

53
00:03:13,000 --> 00:03:18,813
このプロセスを 9 回繰り返した後、100 の位にロール

54
00:03:18,813 --> 00:03:24,627
オーバーします。 この数字は、100 のグループの数を記

55
00:03:24,627 --> 00:03:30,040
録し、残りの 2 桁を解放して 0 にリセットします。

56
00:03:30,040 --> 00:03:34,060
このように、数を数えるリズムは一種の自己相似です。

57
00:03:34,060 --> 00:03:39,419
より大きなスケールにズームアウトした場合でも、このプロセス

58
00:03:39,419 --> 00:03:44,421
は、何かをして、寝返りし、同じことをして、寝返りを 9

59
00:03:44,421 --> 00:03:49,602
回 繰り返した後、さらに大きな寝返りが行われるように見えま

60
00:03:49,602 --> 00:03:49,960
す。

61
00:03:49,960 --> 00:03:54,912
ベース 2 とも呼ばれるバイナリでは、一般に 2 進数の略

62
00:03:54,912 --> 00:03:59,700
でビットと呼ばれる 0 と 1 の 2 桁に制限されます。

63
00:03:59,700 --> 00:04:01,830
その結果、数を数えるときに常に寝返り

64
00:04:01,830 --> 00:04:03,960
をしなければならないことになります。

65
00:04:03,960 --> 00:04:07,260
0、1 と数えた後は、すでにビットが不足しているため、2

66
00:04:07,260 --> 00:04:10,105
の位にロールオーバーして 1-0 と 書き、10

67
00:04:10,105 --> 00:04:12,153
進法で訓練された脳内でこれを 10

68
00:04:12,153 --> 00:04:15,454
と読み取ろうとするあらゆる衝動に抵抗する必要 があります。

69
00:04:15,454 --> 00:04:17,730
代わりに、2 の 1 グループに 0

70
00:04:17,730 --> 00:04:20,120
を加えたものを意味すると理解してください。

71
00:04:20,120 --> 00:04:22,932
次に、3 を表す 1-1 まで増分します。

72
00:04:22,932 --> 00:04:26,415
すでにもう一度ロールオーバーする必要がありま す。

73
00:04:26,415 --> 00:04:29,897
2 の位置に 1 があるので、それもロールオーバー

74
00:04:29,897 --> 00:04:33,915
する必要があり、1-0-0 (1 を表します) になります。

75
00:04:33,915 --> 00:04:37,800
4 プラス 0 のグループ 2 プラス 0 のグループ。

76
00:04:37,800 --> 00:04:42,248
10 進数の数字が 10 の累乗を表すのと同じように、

77
00:04:42,248 --> 00:04:46,380
2 進数のビットはさまざまな 2 の累乗を表します。

78
00:04:46,380 --> 00:04:51,175
つまり、10の位、100の位、1000の位などについて

79
00:04:51,175 --> 00:04:55,800
話す代わりに、2の位、4の位、8の位について話します。

80
00:04:55,800 --> 00:04:58,440
数を数えるリズムはかなり速くなりましたが、そ

81
00:04:58,440 --> 00:05:01,080
の分、より顕著に感じられるようになりました。

82
00:05:01,080 --> 00:05:02,940
最後を裏返し、一度裏返します。

83
00:05:02,940 --> 00:05:04,680
最後を裏返し、2回回転させます。

84
00:05:04,680 --> 00:05:06,380
最後を裏返し、一度裏返します。

85
00:05:06,380 --> 00:05:09,100
最後をひっくり返し、3回回転させます。

86
00:05:09,100 --> 00:05:11,461
繰り返しますが、このパターンに

87
00:05:11,461 --> 00:05:13,980
はある種の自己類似性があります。

88
00:05:13,980 --> 00:05:18,230
どのスケールでも、プロセスは何かをして、寝返りを

89
00:05:18,230 --> 00:05:22,480
して、同じことをもう一度繰り返すというものです。

90
00:05:22,480 --> 00:05:26,175
小規模なスケールでは、たとえば、2 進数で 1-1 である

91
00:05:26,175 --> 00:05:29,255
3 まで数えることは、最後の ビットを反転し、2

92
00:05:29,255 --> 00:05:32,827
にロールオーバーしてから、最後のビットを反転することを意味

93
00:05:32,827 --> 00:05:33,320
します。

94
00:05:33,320 --> 00:05:36,665
より大きなスケールでは、15 までカウントする

95
00:05:36,665 --> 00:05:40,011
(1-1-1-1) ようなプロセスでは、最後の

96
00:05:40,011 --> 00:05:42,241
3 を 7 までカウントし、8

97
00:05:42,241 --> 00:05:44,890
の位にロールオーバーして、最後の 3

98
00:05:44,890 --> 00:05:47,260
ビットを再びカウントアップします。

99
00:05:47,260 --> 00:05:49,737
8 個の連続する 1 である 255

100
00:05:49,737 --> 00:05:51,823
までカウントすると、最後の 7

101
00:05:51,823 --> 00:05:55,213
ビットがいっぱいになるまでカウントアップし、128

102
00:05:55,213 --> 00:05:58,081
の位にロールオーバ ーしてから、最後の 7

103
00:05:58,081 --> 00:06:01,080
ビットを再びカウントアップするように見えます。

104
00:06:01,080 --> 00:06:04,112
さて、そのミニ紹介はこのくらいにして、キースが

105
00:06:04,112 --> 00:06:07,144
私に見せてくれた驚くべき 事実は、このリズムを

106
00:06:07,144 --> 00:06:10,440
使ってハノイの塔を解くことができるということです。

107
00:06:10,440 --> 00:06:12,720
0から数え始めます。

108
00:06:12,720 --> 00:06:17,772
最後のビットだけを 0 から 1 に反転するとき

109
00:06:17,772 --> 00:06:22,420
は、ディスク 0 を 1 ペグ右に移動します。

110
00:06:22,420 --> 00:06:25,810
すでに右端のペグにある場合は、最初

111
00:06:25,810 --> 00:06:29,200
のペグにループバックするだけです。

112
00:06:29,200 --> 00:06:33,550
2 の位に 1 回ロールオーバーすると、つまり最後の

113
00:06:33,550 --> 00:06:37,740
2 ビットを反転すると、ディスク 1 が移動します。

114
00:06:37,740 --> 00:06:39,740
どこに移動するのかと疑問に思うかもしれません。

115
00:06:39,740 --> 00:06:41,688
選択肢はありません。 ディスク 0

116
00:06:41,688 --> 00:06:44,069
の上に置くことはできません。 ペグ は他に

117
00:06:44,069 --> 00:06:47,100
1 つしかないため、移動せざるを得ない場所に移動します。

118
00:06:47,100 --> 00:06:50,049
この後、1-1 までカウントアップしますが、これは最後のビ

119
00:06:50,049 --> 00:06:52,900
ットを反転するだけなので、ディスク 0 を再度移動します。

120
00:06:52,900 --> 00:06:55,870
次に、バイナリ カウンティングが 4 の位まで

121
00:06:55,870 --> 00:06:59,459
2 回ロールオーバー したら、ディスク 2 を移動します。

122
00:06:59,459 --> 00:07:01,440
パターンは次のように続きます。

123
00:07:01,440 --> 00:07:03,460
最後を反転し、ディスク 0 を移動します。

124
00:07:03,460 --> 00:07:05,900
最後の 2 つを裏返し、ディスク 1 を移動します。

125
00:07:05,900 --> 00:07:08,080
最後を反転し、ディスク 0 を移動します。

126
00:07:08,080 --> 00:07:11,141
ここでは、8 の位まで 3 回ロールオーバーする必要があり

127
00:07:11,141 --> 00:07:14,100
ます。 これは、ディスク 3 を移動することに相当します。

128
00:07:14,100 --> 00:07:16,694
これには何か魔法のようなものがあって、初めてこ

129
00:07:16,694 --> 00:07:19,180
れを見たとき、これはうまくいかない、と思った。

130
00:07:19,180 --> 00:07:21,554
これがどのように機能するのかわかりません、なぜこれが

131
00:07:21,554 --> 00:07:23,472
機能するのかもわかりません、今ならわかり

132
00:07:23,472 --> 00:07:25,116
ますが、これを見ると魔法のようです。

133
00:07:25,116 --> 00:07:27,765
私がこれを教えていたとき、これ用のアニメーションをまと

134
00:07:27,765 --> 00:07:30,140
めたのを覚えています。 ほら、私はこれがどのように機

135
00:07:30,140 --> 00:07:32,149
能するのか知っていますし、その中のすべての

136
00:07:32,149 --> 00:07:34,524
ことを知っていますが、ただ座って、それが展開されるの

137
00:07:34,524 --> 00:07:36,260
をただ見ているだけでもまだ楽しいです。

138
00:07:36,260 --> 00:07:37,260
そうそう。

139
00:07:37,260 --> 00:07:39,530
つまり、これが常に合法的な動きをもたらす

140
00:07:39,530 --> 00:07:41,800
かどうかは、最初は明らかではありません。

141
00:07:41,800 --> 00:07:45,102
たとえば、8 の位にロールオーバーするたびに、ディスク

142
00:07:45,102 --> 00:07:47,697
3 が必然的 に解放されて移動できることをど

143
00:07:47,697 --> 00:07:49,820
うやって知ることができるでしょうか。

144
00:07:49,820 --> 00:07:52,420
同時に、このソリューションでは、これはどこから

145
00:07:52,420 --> 00:07:55,020
来たのか、なぜこ れが機能するのか、2 から

146
00:07:55,020 --> 00:07:57,055
n マイナス 1 のステップを実行

147
00:07:57,055 --> 00:07:59,655
するよりも優れた方法はあるのか、といった疑問が

148
00:07:59,655 --> 00:08:00,560
すぐに生じます。

149
00:08:00,560 --> 00:08:04,007
これはハノイの塔を解決するだけでなく、可能な限り

150
00:08:04,007 --> 00:08:07,180
最も効率的な方法で解決することが判明しました。

151
00:08:07,180 --> 00:08:10,420
これがなぜ機能するのか、どのように機能するのか、そして一体

152
00:08:10,420 --> 00:08:13,660
何が起こっているのかを理解す るには、パズルに対する特定の

153
00:08:13,660 --> 00:08:16,900
視点、CS の人々が再帰的視点と呼ぶものにかかっています。

154
00:08:16,900 --> 00:08:19,344
ディスク 3 は、分かった、2、1、0 と考えています。

155
00:08:19,344 --> 00:08:21,090
まるで私から降りなければならないかの

156
00:08:21,090 --> 00:08:23,099
ように、私はこれほどの重さとプレッシャーの下で

157
00:08:23,099 --> 00:08:25,020
は本当に機能できないかのように考えています。

158
00:08:25,020 --> 00:08:26,965
ディスク 3 の観点から見ると、ディスク 3

159
00:08:26,965 --> 00:08:29,502
がどのようにしてここに到達するのか知りたければ、どういうわ

160
00:08:29,502 --> 00:08:31,870
けか、方法は関係ありませんが、ディスク 2、1、および

161
00:08:31,870 --> 00:08:33,900
0 はスピンドル B に到達する必要があります。

162
00:08:33,900 --> 00:08:36,020
それがそれが動くことができる唯一の方法です。

163
00:08:36,020 --> 00:08:36,865
これらのディスクのいずれかが 3

164
00:08:36,865 --> 00:08:38,060
枚の上にある場合、そのディスクは移動できません。

165
00:08:38,060 --> 00:08:39,488
それらのいずれかがスピンドル C

166
00:08:39,488 --> 00:08:41,000
にある場合、そこには移動できません。

167
00:08:41,000 --> 00:08:42,806
したがって、何らかの方法で 2、1、0

168
00:08:42,806 --> 00:08:43,980
を取り除く必要があります。

169
00:08:43,980 --> 00:08:48,180
それが完了したら、ディスク 3 をそこに移動できます。

170
00:08:48,180 --> 00:08:50,020
そしてディスク 3 では、「準備完了」と表示されます。

171
00:08:50,020 --> 00:08:51,940
二度と私を動かす必要はありません。

172
00:08:51,940 --> 00:08:54,340
他の人は、ここに行く方法を考えているだけです。

173
00:08:54,340 --> 00:08:55,940
ある意味、同じ問題の小規模バージ

174
00:08:55,940 --> 00:08:57,540
ョンが手に入ったことになります。

175
00:08:57,540 --> 00:08:59,281
ディスク 0、1、2 がスピンドル B

176
00:08:59,281 --> 00:09:00,849
に配置されているので、それらを C

177
00:09:00,849 --> 00:09:01,981
に移動する必要があります。

178
00:09:01,981 --> 00:09:04,880
つまり、 1 つのディスクに焦点を当てて、このディスクを動

179
00:09:04,880 --> 00:09:06,680
作させるには何をしなければならない

180
00:09:06,680 --> 00:09:09,580
かを考えれば、より大きな問題を少し小さな問題に変えることが

181
00:09:09,580 --> 00:09:10,680
できるということです。

182
00:09:10,680 --> 00:09:12,020
そして、どうすればそれを解決できるのでしょうか？

183
00:09:12,020 --> 00:09:13,600
まあ、まったく同じことです。

184
00:09:13,600 --> 00:09:15,299
ディスク 2 がディスク 1 とディスク

185
00:09:15,299 --> 00:09:17,160
0 と言ったら、それはあなたではなく、私です。

186
00:09:17,160 --> 00:09:18,160
ただスペースが必要なんです。

187
00:09:18,160 --> 00:09:19,160
降りる。

188
00:09:19,160 --> 00:09:20,520
彼らはどこかに移動する必要があります。

189
00:09:20,520 --> 00:09:23,040
その後、ディスク 2 は必要な場所に移動できます。

190
00:09:23,040 --> 00:09:25,120
その後、ディスク 1 と 0 でこれを行うことができます。

191
00:09:25,120 --> 00:09:28,080
しかし、興味深い点は、すべてのディスクが

192
00:09:28,080 --> 00:09:31,040
ほぼ同じ戦略を持っているということです。

193
00:09:31,040 --> 00:09:33,220
彼らは皆、「私の上の人は全員降りろ」と言います。

194
00:09:33,220 --> 00:09:34,220
それでは、移動します。

195
00:09:34,220 --> 00:09:36,560
さて、みんなまた積み上げてください。

196
00:09:36,560 --> 00:09:41,319
その洞察がわかれば、5 ～ 6 行のコードなど、ハノイの塔

197
00:09:41,319 --> 00:09:44,333
を解決するようなコードを作成できます。

198
00:09:44,333 --> 00:09:48,934
これは、コード行に対 する知的投資の比率がおそらくこれま

199
00:09:48,934 --> 00:09:50,680
でで最も高いものです。

200
00:09:50,680 --> 00:09:53,822
少し考えてみれば、これが最も効率的な

201
00:09:53,822 --> 00:09:56,800
解決策であることが明らかになります。

202
00:09:56,800 --> 00:09:58,383
あらゆる段階で、あなたは自分に押し

203
00:09:58,383 --> 00:10:00,060
付けられたことをやっているだけです。

204
00:10:00,060 --> 00:10:02,427
ディスク 3 を移動する前に、ディスク

205
00:10:02,427 --> 00:10:04,440
0 ～ 2 を外す必要があります。

206
00:10:04,440 --> 00:10:06,520
そしてディスク 3 を移動する必要があります。

207
00:10:06,520 --> 00:10:09,760
次に、ディスク 0 から 2 をその上に戻す必要があります。

208
00:10:09,760 --> 00:10:15,400
この観点から見ると、非効率が許される余地はありません。

209
00:10:15,400 --> 00:10:17,109
では、なぜバイナリでのカウントがこ

210
00:10:17,109 --> 00:10:18,920
のアルゴリズムを捉えるのでしょうか?

211
00:10:18,920 --> 00:10:21,672
さて、ここで何が起こっているのかというと、部分問

212
00:10:21,672 --> 00:10:24,425
題を解決し、大き な円盤を移動し、その後、再度部

213
00:10:24,425 --> 00:10:26,489
分問題を解決するというこのパターン

214
00:10:26,489 --> 00:10:29,242
が、二進数カウントのパターンと完全に類似している

215
00:10:29,242 --> 00:10:30,160
ということです。

216
00:10:30,160 --> 00:10:32,760
ある程度の量を数えて、ロールオー

217
00:10:32,760 --> 00:10:35,360
バーし、再び同じ量まで数えます。

218
00:10:35,360 --> 00:10:38,072
そして、このハノイの塔のアルゴリズムとバイナリ

219
00:10:38,072 --> 00:10:40,332
カウンティングは、ズームアウトして 2

220
00:10:40,332 --> 00:10:43,722
のより大きな累乗まで数えたり、より多くのディスクでハノイの塔

221
00:10:43,722 --> 00:10:47,112
を解いたりして も、両方とも同じ構造を持っているという意味で

222
00:10:47,112 --> 00:10:48,920
、どちらも自己類似プロセスです。

223
00:10:48,920 --> 00:10:52,700
サブ問題、何かをしてください、サブ問題。

224
00:10:52,700 --> 00:10:54,993
たとえば、非常に小規模なスケールでは、2

225
00:10:54,993 --> 00:10:57,942
つのディスク、ムーブ ディスク 0、ムーブ ディスク

226
00:10:57,942 --> 00:11:00,672
1、ム ーブ ディスク 0 のハノイの塔を解くと、

227
00:11:00,672 --> 00:11:03,840
バイナリで 3 までカウントすることによって反映されます。

228
00:11:03,840 --> 00:11:05,700
最後のビットを反転し、一度ロールオー

229
00:11:05,700 --> 00:11:07,560
バーして、最後のビットを反転します。

230
00:11:07,560 --> 00:11:09,864
もう少し大きなスケールで、3 つのディスクについて

231
00:11:09,864 --> 00:11:11,430
ハノイの塔を解くことは、2 つの

232
00:11:11,430 --> 00:11:13,734
ディスクを解決するために必要なことをすべて実行し、

233
00:11:13,734 --> 00:11:15,854
ディスク番号 2 を移動し、その 後再び 2

234
00:11:15,854 --> 00:11:18,158
つのディスクを解決するために必要なことをすべて実行

235
00:11:18,158 --> 00:11:19,080
するように見えます。

236
00:11:19,080 --> 00:11:22,128
同様に、2 進数で 111 までカウントするには、3

237
00:11:22,128 --> 00:11:25,064
までカウントし、3 ビッ トすべてをロールオーバーし

238
00:11:25,064 --> 00:11:28,000
て、さらに 3 つカウントアップする必要があります。

239
00:11:28,000 --> 00:11:30,050
どの規模においても、両方のプロセ

240
00:11:30,050 --> 00:11:32,100
スでこれと同じ内訳が発生します。

241
00:11:32,100 --> 00:11:35,374
ある意味、このバイナリ ソリューションが機能する理由、また

242
00:11:35,374 --> 00:11:38,649
は少なくと も説明はありませんが、最も自然な説明は、これら

243
00:11:38,649 --> 00:11:41,923
の 2 進数を生成する ために使用するパターンがまったく同

244
00:11:41,923 --> 00:11:43,730
じであるということだと思います。

245
00:11:43,730 --> 00:11:47,004
こ の構造は、ハノイの塔に使用されるパターンと同じです。

246
00:11:47,004 --> 00:11:50,279
そのため、ビット の反転を見ると、事実上、このプロセスを

247
00:11:50,279 --> 00:11:51,860
逆にしていることになります。

248
00:11:51,860 --> 00:11:52,992
どのようなプロセスでこれらが生

249
00:11:52,992 --> 00:11:54,200
成されたのか、ということですね。

250
00:11:54,200 --> 00:11:58,647
これを得るためにこれらのビットがどのように反転されたかを

251
00:11:58,647 --> 00:12:01,188
理解しようとしているのと同じよ

252
00:12:01,188 --> 00:12:05,636
うに、ハノイの塔の再帰アルゴリズムを事実上逆にしているの

253
00:12:05,636 --> 00:12:07,860
で、それがうまくいくのです。

254
00:12:07,860 --> 00:12:09,620
それはとてもクールですよね？

255
00:12:09,620 --> 00:12:10,940
でも実際はもっと涼しくなるんです。

256
00:12:10,940 --> 00:12:12,700
これがシェルピンスキーの三角形とどの

257
00:12:12,700 --> 00:12:14,460
ように関係するのかさえ分かりません。

258
00:12:14,460 --> 00:12:17,169
そして、それはまさに私が次のビデオのパート

259
00:12:17,169 --> 00:12:19,140
2 でやろうとしていることです。

260
00:12:19,140 --> 00:12:20,835
Patreon でこれらのビデオをサポ

261
00:12:20,835 --> 00:12:22,620
ートしてくださっている皆様に感謝します。

262
00:12:22,620 --> 00:12:25,369
『Essence of Calculus』の第 1

263
00:12:25,369 --> 00:12:28,329
章を終えたばかりで、現在 第 2 章に取り組んでいます。

264
00:12:28,329 --> 00:12:31,396
数か月以内に全シリーズを公開する前に、Pat reon

265
00:12:31,396 --> 00:12:34,357
サポーターはこれらのビデオに早期アクセスできるようになり

266
00:12:34,357 --> 00:12:34,780
ました。

267
00:12:34,780 --> 00:12:36,649
このビデオと次のビデオも Desmos

268
00:12:36,649 --> 00:12:38,518
によって部分的にサポートされて います。

269
00:12:38,518 --> 00:12:40,948
次のビデオの前に、少し時間をとって、彼らが誰である

270
00:12:40,948 --> 00:12:43,378
か、そして彼 らが雇用しているという事実について少し

271
00:12:43,378 --> 00:12:44,780
皆さんと共有したいと思います。

272
00:12:44,780 --> 00:12:47,020
デスモスは本当にクールです。

273
00:12:47,020 --> 00:12:49,304
彼らは、このようなインタラクティブな数学アクティビ

274
00:12:49,304 --> 00:12:51,680
ティを教室や教師用のツールとして多く作成しています。

275
00:12:51,680 --> 00:12:56,060
彼らの真骨頂は教室活動にあります。

276
00:12:56,060 --> 00:12:59,429
私としては、これらの活動が教育的な観点から非常によ

277
00:12:59,429 --> 00:13:02,540
く考えられていることに非常に感銘を受けています。

278
00:13:02,540 --> 00:13:04,364
チームは自分たちのことを明確に理解しており、

279
00:13:04,364 --> 00:13:06,189
生徒と教師の生活に変化を もたらすために自分

280
00:13:06,189 --> 00:13:08,180
たちがどのような立場にあるのかを理解しています。

281
00:13:08,180 --> 00:13:10,140
そして、先ほども言ったように、彼らは雇用を行っています。

282
00:13:10,140 --> 00:13:13,256
彼らは常に、エンジニアリング人材、デザイナー、教師、また

283
00:13:13,256 --> 00:13:16,372
は自分たちがやりたいことに一 致するその他のスキルセット

284
00:13:16,372 --> 00:13:19,600
であるかどうか、より優れた人材を迎え入れようとしています。

285
00:13:19,600 --> 00:13:22,340
皆さんの中に、彼らに参加して、教師や生徒向けの優れた

286
00:13:22,340 --> 00:13:25,081
ツールの作成を支援することに興味がある人がいる場合は

287
00:13:25,081 --> 00:13:27,720
、説明でリンクした採用ページをチェックしてください。

288
00:13:27,720 --> 00:13:30,480
個人的には、彼らは本当に意味のあることをしていると思います。

289
00:13:30,480 --> 00:13:33,864
彼らの活動は、生徒たちに真に優れた数学的直観を構築している

290
00:13:33,864 --> 00:13:37,135
と思います。 そして世界は、彼らと同じように教育に向けた努

291
00:13:37,135 --> 00:13:40,520
力 を向ける才能のある人材をもっと活用できるかもしれません。

292
00:13:40,520 --> 00:13:42,332
さて、それでは次のビデオでお会いしましょう。

293
00:13:42,332 --> 00:13:44,640
この 先の展開はきっと気に入っていただけると思います。

