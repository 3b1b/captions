1
00:00:04,200 --> 00:00:07,538
今日は、別の数体系で数えるだけでハノイの塔のパズル 

2
00:00:07,538 --> 00:00:10,620
を解く素敵な方法を皆さんと共有したいと思います。

3
00:00:11,220 --> 00:00:13,430
そして驚くべきことに、これはシェルピンスキーの三

4
00:00:13,430 --> 00:00:15,640
角形を満たす曲線を見つけることに関連しています。

5
00:00:16,720 --> 00:00:18,305
このことについては、私の元 CS 

6
00:00:18,305 --> 00:00:20,636
講師、彼の名前はキース・シュワルツから聞きました。

7
00:00:20,636 --> 00:00:23,154
 この人は私がこれまで会った中で最も優れた教育者の一人

8
00:00:23,154 --> 00:00:24,460
であると言わざるを得ません。

9
00:00:25,140 --> 00:00:28,070
私は実際に彼がこれを私に見せた会話の一部を録音したので、 

10
00:00:28,070 --> 00:00:30,900
皆さんは彼が説明した内容の一部を直接聞くことができます。

11
00:00:38,420 --> 00:00:43,230
よく知らない方のために、ハノイの塔のパズルが実 

12
00:00:43,230 --> 00:00:47,640
際にどのようなものかを簡単に説明しましょう。

13
00:00:47,640 --> 00:00:53,140
これらのディスクの中央には穴があり、ペグ 

14
00:00:53,140 --> 00:00:58,380
に取り付けることができると考えられます。

15
00:00:59,200 --> 00:01:01,216
ここに示されているセットアップには 5 

16
00:01:01,216 --> 00:01:03,332
つのディスクがあり、0、1、2、3 、4 

17
00:01:03,332 --> 00:01:05,852
とラベルを付けますが、原則として、必要な数のディス

18
00:01:05,852 --> 00:01:06,760
クを使用できます。

19
00:01:07,460 --> 00:01:09,435
たとえば、最初の移動にはディスク 0 

20
00:01:09,435 --> 00:01:11,098
の移動が含まれる必要があります。

21
00:01:11,098 --> 00:01:13,904
 他のディス クには、移動する前に邪魔にならないように

22
00:01:13,904 --> 00:01:15,880
する必要があるものが上にあるためです。

23
00:01:15,880 --> 00:01:19,600
その後、ディスク 1 を移動できますが、現在ディスク 

24
00:01:19,600 --> 00:01:22,494
0 がないペ グに移動する必要があります。

25
00:01:22,494 --> 00:01:25,250
 そうしないと、より大きなディスクをよ 

26
00:01:25,250 --> 00:01:28,695
り小さなディスクの上に置くことになり、これは許可さ

27
00:01:28,695 --> 00:01:29,660
れていません。

28
00:01:29,660 --> 00:01:30,215
これをこれまで見たことがない場合は、一時停

29
00:01:30,215 --> 00:01:30,771
止してさまざまなサイズ の本を何冊か取り出

30
00:01:30,771 --> 00:01:31,380
して、自分で試してみることを強くお勧めします。

31
00:01:31,380 --> 00:01:33,430
さて、キースはこのパズルについて本当に驚くべき

32
00:01:33,430 --> 00:01:35,480
ことを教えてくれ ました。 それは、二進数で数

33
00:01:35,480 --> 00:01:37,085
えて、その数え方のリズムをディスク 

34
00:01:37,085 --> 00:01:39,760
の動きの特定のリズムと関連付けるだけで解けるということです。

35
00:01:39,760 --> 00:01:41,395
バイナリに詳しくない人のために、最 

36
00:01:41,395 --> 00:01:42,940
初にここで簡単に概要を説明します。

37
00:01:42,940 --> 00:01:45,746
実は、バイナリのことは知っていても、考え

38
00:01:45,746 --> 00:01:48,553
たこともなかったかも しれない、数え方の

39
00:01:48,553 --> 00:01:51,500
リズムに焦点を当てて説明したいと思います。

40
00:01:51,500 --> 00:01:55,529
バイナリの説明は通常、10 個の個別の数字 

41
00:01:55,529 --> 00:01:59,375
0、1、2、3、 4、5、6、7、8、9 

42
00:01:59,375 --> 00:02:02,671
を使用するため、私たちが基数 10 

43
00:02:02,671 --> 00:02:07,800
と呼ぶ通常の数値の表現方法についての内省から始まります。

44
00:02:07,800 --> 00:02:08,451
数を数えるリズムは、これらの 10 

45
00:02:08,451 --> 00:02:09,139
桁をすべて通過することから始まります。

46
00:02:09,139 --> 00:02:09,500
次に、新しい桁がなくなったら、次の数値 

47
00:02:09,500 --> 00:02:09,860
10 を 2 桁の 1、0 で表します。

48
00:02:09,860 --> 00:02:14,094
1 が 10 の位にあると言うのは、これまでに既に数えた 

49
00:02:14,094 --> 00:02:18,036
10 のグループをカプ セル化し、1 の位を解放して 

50
00:02:18,036 --> 00:02:21,540
0 にリセットすることを目的としているからです。

51
00:02:21,540 --> 00:02:26,019
数え方のリズムは、9つ数えて、十の位に転がり、さらに9 

52
00:02:26,019 --> 00:02:30,180
つ数えて、十の位に転がり、というように繰り返します。

53
00:02:30,180 --> 00:02:37,337
このプロセスを 9 回繰り返した後、100 の位にロール 

54
00:02:37,337 --> 00:02:44,495
オーバーします。 この数字は、100 のグループの数を記 

55
00:02:44,495 --> 00:02:51,160
録し、残りの 2 桁を解放して 0 にリセットします。

56
00:02:51,260 --> 00:02:55,740
このように、数を数えるリズムは一種の自己相似です。

57
00:02:55,740 --> 00:02:59,987
より大きなスケールにズームアウトした場合でも、このプロセス 

58
00:02:59,987 --> 00:03:03,951
は、何かをして、寝返りし、同じことをして、寝返りを 9 

59
00:03:03,951 --> 00:03:08,056
回 繰り返した後、さらに大きな寝返りが行われるように見えま

60
00:03:08,056 --> 00:03:08,340
す。

61
00:03:08,340 --> 00:03:16,729
ベース 2 とも呼ばれるバイナリでは、一般に 2 進数の略 

62
00:03:16,729 --> 00:03:24,840
でビットと呼ばれる 0 と 1 の 2 桁に制限されます。

63
00:03:24,840 --> 00:03:28,100
その結果、数を数えるときに常に寝返り

64
00:03:28,100 --> 00:03:31,360
をしなければならないことになります。

65
00:03:31,360 --> 00:03:34,133
0、1 と数えた後は、すでにビットが不足しているため、2 

66
00:03:34,133 --> 00:03:36,524
の位にロールオーバーして 1-0 と 書き、10 

67
00:03:36,524 --> 00:03:38,245
進法で訓練された脳内でこれを 10 

68
00:03:38,245 --> 00:03:41,019
と読み取ろうとするあらゆる衝動に抵抗する必要 があります。

69
00:03:41,019 --> 00:03:42,931
 代わりに、2 の 1 グループに 0 

70
00:03:42,931 --> 00:03:44,940
を加えたものを意味すると理解してください。

71
00:03:49,520 --> 00:03:51,562
次に、3 を表す 1-1 まで増分します。

72
00:03:51,562 --> 00:03:54,091
 すでにもう一度ロールオーバーする必要がありま す。

73
00:03:54,091 --> 00:03:56,620
 2 の位置に 1 があるので、それもロールオーバー

74
00:03:56,620 --> 00:03:59,539
する必要があり、1-0-0 (1 を表します) になります。

75
00:03:59,539 --> 00:04:02,360
 4 プラス 0 のグループ 2 プラス 0 のグループ。

76
00:04:02,360 --> 00:04:08,592
10 進数の数字が 10 の累乗を表すのと同じように、 

77
00:04:08,592 --> 00:04:14,380
2 進数のビットはさまざまな 2 の累乗を表します。

78
00:04:15,060 --> 00:04:21,657
つまり、10の位、100の位、1000の位などについて 

79
00:04:21,657 --> 00:04:28,020
話す代わりに、2の位、4の位、8の位について話します。

80
00:04:28,220 --> 00:04:28,020
数を数えるリズムはかなり速くなりましたが、そ

81
00:04:28,420 --> 00:04:28,220
の分、より顕著に感じられるようになりました。

82
00:04:28,420 --> 00:04:29,540
最後を裏返し、一度裏返します。

83
00:04:29,540 --> 00:04:29,540
最後を裏返し、2回回転させます。

84
00:04:29,540 --> 00:04:29,540
最後を裏返し、一度裏返します。

85
00:04:29,540 --> 00:04:30,480
最後をひっくり返し、3回回転させます。

86
00:04:30,480 --> 00:04:33,567
繰り返しますが、このパターンに

87
00:04:33,567 --> 00:04:36,860
はある種の自己類似性があります。

88
00:04:36,860 --> 00:04:36,860
どのスケールでも、プロセスは何かをして、寝返りを

89
00:04:36,860 --> 00:04:36,860
して、同じことをもう一度繰り返すというものです。

90
00:04:36,860 --> 00:04:41,885
小規模なスケールでは、たとえば、2 進数で 1-1 である 

91
00:04:41,885 --> 00:04:46,072
3 まで数えることは、最後の ビットを反転し、2 

92
00:04:46,072 --> 00:04:50,930
にロールオーバーしてから、最後のビットを反転することを意味

93
00:04:50,930 --> 00:04:51,600
します。

94
00:04:51,600 --> 00:04:56,793
より大きなスケールでは、15 までカウントする 

95
00:04:56,793 --> 00:05:01,987
(1-1-1-1) ようなプロセスでは、最後の 

96
00:05:01,987 --> 00:05:05,449
3 を 7 までカウントし、8 

97
00:05:05,449 --> 00:05:09,561
の位にロールオーバーして、最後の 3 

98
00:05:09,561 --> 00:05:13,240
ビットを再びカウントアップします。

99
00:05:13,920 --> 00:05:17,716
8 個の連続する 1 である 255 

100
00:05:17,716 --> 00:05:20,913
までカウントすると、最後の 7 

101
00:05:20,913 --> 00:05:26,108
ビットがいっぱいになるまでカウントアップし、128 

102
00:05:26,108 --> 00:05:30,504
の位にロールオーバ ーしてから、最後の 7 

103
00:05:30,504 --> 00:05:35,100
ビットを再びカウントアップするように見えます。

104
00:05:35,100 --> 00:05:36,667
さて、そのミニ紹介はこのくらいにして、キースが

105
00:05:36,667 --> 00:05:38,235
私に見せてくれた驚くべき 事実は、このリズムを

106
00:05:38,235 --> 00:05:39,940
使ってハノイの塔を解くことができるということです。

107
00:05:39,940 --> 00:05:41,460
0から数え始めます。

108
00:05:41,980 --> 00:05:42,469
最後のビットだけを 0 から 1 に反転するとき 

109
00:05:42,469 --> 00:05:42,920
は、ディスク 0 を 1 ペグ右に移動します。

110
00:05:42,920 --> 00:05:43,080
すでに右端のペグにある場合は、最初

111
00:05:43,080 --> 00:05:43,240
のペグにループバックするだけです。

112
00:05:43,800 --> 00:05:44,890
2 の位に 1 回ロールオーバーすると、つまり最後の 

113
00:05:44,890 --> 00:05:45,940
2 ビットを反転すると、ディスク 1 が移動します。

114
00:05:46,960 --> 00:05:45,940
どこに移動するのかと疑問に思うかもしれません。

115
00:05:46,960 --> 00:05:49,427
選択肢はありません。 ディスク 0 

116
00:05:49,427 --> 00:05:52,442
の上に置くことはできません。 ペグ は他に 

117
00:05:52,442 --> 00:05:56,280
1 つしかないため、移動せざるを得ない場所に移動します。

118
00:05:56,280 --> 00:05:57,917
この後、1-1 までカウントアップしますが、これは最後のビ 

119
00:05:57,917 --> 00:05:59,500
ットを反転するだけなので、ディスク 0 を再度移動します。

120
00:06:01,340 --> 00:06:03,169
次に、バイナリ カウンティングが 4 の位まで 

121
00:06:03,169 --> 00:06:05,380
2 回ロールオーバー したら、ディスク 2 を移動します。

122
00:06:05,380 --> 00:06:06,600
 パターンは次のように続きます。

123
00:06:06,600 --> 00:06:13,840
最後を反転し、ディスク 0 を移動します。

124
00:06:13,840 --> 00:06:17,580
最後の 2 つを裏返し、ディスク 1 を移動します。

125
00:06:17,580 --> 00:06:17,580
最後を反転し、ディスク 0 を移動します。

126
00:06:17,580 --> 00:06:21,871
ここでは、8 の位まで 3 回ロールオーバーする必要があり 

127
00:06:21,871 --> 00:06:26,020
ます。 これは、ディスク 3 を移動することに相当します。

128
00:06:27,380 --> 00:06:26,020
これには何か魔法のようなものがあって、初めてこ 

129
00:06:28,800 --> 00:06:27,380
れを見たとき、これはうまくいかない、と思った。

130
00:06:28,800 --> 00:06:31,194
これがどのように機能するのかわかりません、なぜこれが

131
00:06:31,194 --> 00:06:33,128
機能するのかもわかりません、今ならわかり 

132
00:06:33,128 --> 00:06:34,785
ますが、これを見ると魔法のようです。

133
00:06:34,785 --> 00:06:37,456
 私がこれを教えていたとき、これ用のアニメーションをまと 

134
00:06:37,456 --> 00:06:39,850
めたのを覚えています。 ほら、私はこれがどのように機

135
00:06:39,850 --> 00:06:41,876
能するのか知っていますし、その中のすべての 

136
00:06:41,876 --> 00:06:44,270
ことを知っていますが、ただ座って、それが展開されるの

137
00:06:44,270 --> 00:06:46,020
をただ見ているだけでもまだ楽しいです。

138
00:06:46,660 --> 00:06:49,900
そうそう。

139
00:06:49,900 --> 00:06:52,850
つまり、これが常に合法的な動きをもたらす

140
00:06:52,850 --> 00:06:55,800
かどうかは、最初は明らかではありません。

141
00:06:55,800 --> 00:07:01,227
たとえば、8 の位にロールオーバーするたびに、ディスク 

142
00:07:01,227 --> 00:07:05,491
3 が必然的 に解放されて移動できることをど

143
00:07:05,491 --> 00:07:08,980
うやって知ることができるでしょうか。

144
00:07:08,980 --> 00:07:10,907
同時に、このソリューションでは、これはどこから

145
00:07:10,907 --> 00:07:12,834
来たのか、なぜこ れが機能するのか、2 から 

146
00:07:12,834 --> 00:07:14,342
n マイナス 1 のステップを実行 

147
00:07:14,342 --> 00:07:16,269
するよりも優れた方法はあるのか、といった疑問が

148
00:07:16,269 --> 00:07:16,940
すぐに生じます。

149
00:07:16,940 --> 00:07:22,648
これはハノイの塔を解決するだけでなく、可能な限り 

150
00:07:22,648 --> 00:07:27,900
最も効率的な方法で解決することが判明しました。

151
00:07:27,900 --> 00:07:32,340
これがなぜ機能するのか、どのように機能するのか、そして一体

152
00:07:32,340 --> 00:07:36,780
何が起こっているのかを理解す るには、パズルに対する特定の

153
00:07:36,780 --> 00:07:41,220
視点、CS の人々が再帰的視点と呼ぶものにかかっています。

154
00:07:41,640 --> 00:07:44,319
ディスク 3 は、分かった、2、1、0 と考えています。

155
00:07:44,319 --> 00:07:46,233
 まるで私から降りなければならないかの 

156
00:07:46,233 --> 00:07:48,434
ように、私はこれほどの重さとプレッシャーの下で

157
00:07:48,434 --> 00:07:50,540
は本当に機能できないかのように考えています。

158
00:07:50,540 --> 00:07:53,593
ディスク 3 の観点から見ると、ディスク 3 

159
00:07:53,593 --> 00:07:57,576
がどのようにしてここに到達するのか知りたければ、どういうわ 

160
00:07:57,576 --> 00:08:01,293
けか、方法は関係ありませんが、ディスク 2、1、および 

161
00:08:01,293 --> 00:08:04,480
0 はスピンドル B に到達する必要があります。

162
00:08:04,480 --> 00:08:09,420
それがそれが動くことができる唯一の方法です。

163
00:08:09,420 --> 00:08:09,809
これらのディスクのいずれかが 3 

164
00:08:09,809 --> 00:08:10,360
枚の上にある場合、そのディスクは移動できません。

165
00:08:10,360 --> 00:08:14,721
それらのいずれかがスピンドル C 

166
00:08:14,721 --> 00:08:19,340
にある場合、そこには移動できません。

167
00:08:19,340 --> 00:08:20,406
したがって、何らかの方法で 2、1、0 

168
00:08:20,406 --> 00:08:21,100
を取り除く必要があります。

169
00:08:21,100 --> 00:08:28,920
それが完了したら、ディスク 3 をそこに移動できます。

170
00:08:28,920 --> 00:08:28,920
そしてディスク 3 では、「準備完了」と表示されます。

171
00:08:28,920 --> 00:08:34,179
二度と私を動かす必要はありません。

172
00:08:34,179 --> 00:08:35,940
他の人は、ここに行く方法を考えているだけです。

173
00:08:36,080 --> 00:08:36,559
ある意味、同じ問題の小規模バージ

174
00:08:36,559 --> 00:08:37,039
ョンが手に入ったことになります。

175
00:08:37,039 --> 00:08:38,436
ディスク 0、1、2 がスピンドル B 

176
00:08:38,436 --> 00:08:39,692
に配置されているので、それらを C 

177
00:08:39,692 --> 00:08:40,600
に移動する必要があります。

178
00:08:41,000 --> 00:08:43,200
つまり、 1 つのディスクに焦点を当てて、このディスクを動

179
00:08:43,200 --> 00:08:44,565
作させるには何をしなければならない 

180
00:08:44,565 --> 00:08:46,765
かを考えれば、より大きな問題を少し小さな問題に変えることが

181
00:08:46,765 --> 00:08:47,600
できるということです。

182
00:08:48,120 --> 00:08:53,380
そして、どうすればそれを解決できるのでしょうか？

183
00:08:53,980 --> 00:08:57,660
まあ、まったく同じことです。

184
00:08:57,740 --> 00:08:58,265
ディスク 2 がディスク 1 とディスク 

185
00:08:58,265 --> 00:08:58,840
0 と言ったら、それはあなたではなく、私です。

186
00:08:58,840 --> 00:09:01,180
ただスペースが必要なんです。

187
00:09:01,180 --> 00:09:05,540
降りる。

188
00:09:05,540 --> 00:09:06,240
彼らはどこかに移動する必要があります。

189
00:09:06,240 --> 00:09:06,660
その後、ディスク 2 は必要な場所に移動できます。

190
00:09:06,660 --> 00:09:11,320
その後、ディスク 1 と 0 でこれを行うことができます。

191
00:09:11,320 --> 00:09:14,850
しかし、興味深い点は、すべてのディスクが

192
00:09:14,850 --> 00:09:18,380
ほぼ同じ戦略を持っているということです。

193
00:09:18,820 --> 00:09:18,380
彼らは皆、「私の上の人は全員降りろ」と言います。

194
00:09:18,820 --> 00:09:19,540
それでは、移動します。

195
00:09:19,540 --> 00:09:22,940
さて、みんなまた積み上げてください。

196
00:09:23,020 --> 00:09:28,008
その洞察がわかれば、5 ～ 6 行のコードなど、ハノイの塔 

197
00:09:28,008 --> 00:09:31,168
を解決するようなコードを作成できます。

198
00:09:31,168 --> 00:09:35,990
 これは、コード行に対 する知的投資の比率がおそらくこれま

199
00:09:35,990 --> 00:09:37,820
でで最も高いものです。

200
00:09:37,820 --> 00:09:38,415
少し考えてみれば、これが最も効率的な 

201
00:09:38,415 --> 00:09:38,980
解決策であることが明らかになります。

202
00:09:38,980 --> 00:09:39,650
あらゆる段階で、あなたは自分に押し

203
00:09:39,650 --> 00:09:40,360
付けられたことをやっているだけです。

204
00:09:40,560 --> 00:09:46,062
ディスク 3 を移動する前に、ディスク 

205
00:09:46,062 --> 00:09:50,740
0 ～ 2 を外す必要があります。

206
00:09:50,740 --> 00:09:50,740
そしてディスク 3 を移動する必要があります。

207
00:09:50,740 --> 00:09:52,840
次に、ディスク 0 から 2 をその上に戻す必要があります。

208
00:09:52,840 --> 00:09:54,600
この観点から見ると、非効率が許される余地はありません。

209
00:09:54,600 --> 00:09:56,261
では、なぜバイナリでのカウントがこ

210
00:09:56,261 --> 00:09:58,020
のアルゴリズムを捉えるのでしょうか?

211
00:09:58,020 --> 00:10:01,845
さて、ここで何が起こっているのかというと、部分問

212
00:10:01,845 --> 00:10:05,670
題を解決し、大き な円盤を移動し、その後、再度部

213
00:10:05,670 --> 00:10:08,539
分問題を解決するというこのパターン 

214
00:10:08,539 --> 00:10:12,364
が、二進数カウントのパターンと完全に類似している

215
00:10:12,364 --> 00:10:13,640
ということです。

216
00:10:15,200 --> 00:10:18,010
ある程度の量を数えて、ロールオー

217
00:10:18,010 --> 00:10:20,820
バーし、再び同じ量まで数えます。

218
00:10:20,820 --> 00:10:23,352
そして、このハノイの塔のアルゴリズムとバイナリ 

219
00:10:23,352 --> 00:10:25,462
カウンティングは、ズームアウトして 2 

220
00:10:25,462 --> 00:10:28,627
のより大きな累乗まで数えたり、より多くのディスクでハノイの塔

221
00:10:28,627 --> 00:10:31,792
を解いたりして も、両方とも同じ構造を持っているという意味で

222
00:10:31,792 --> 00:10:33,480
、どちらも自己類似プロセスです。

223
00:10:35,140 --> 00:10:41,900
サブ問題、何かをしてください、サブ問題。

224
00:10:41,900 --> 00:10:43,024
たとえば、非常に小規模なスケールでは、2 

225
00:10:43,024 --> 00:10:44,469
つのディスク、ムーブ ディスク 0、ムーブ ディスク 

226
00:10:44,469 --> 00:10:45,807
1、ム ーブ ディスク 0 のハノイの塔を解くと、

227
00:10:45,807 --> 00:10:47,360
バイナリで 3 までカウントすることによって反映されます。

228
00:10:47,360 --> 00:10:47,360
最後のビットを反転し、一度ロールオー

229
00:10:47,360 --> 00:10:47,360
バーして、最後のビットを反転します。

230
00:10:47,360 --> 00:10:49,932
もう少し大きなスケールで、3 つのディスクについて

231
00:10:49,932 --> 00:10:51,680
ハノイの塔を解くことは、2 つの 

232
00:10:51,680 --> 00:10:54,252
ディスクを解決するために必要なことをすべて実行し、

233
00:10:54,252 --> 00:10:56,619
ディスク番号 2 を移動し、その 後再び 2 

234
00:10:56,619 --> 00:10:59,191
つのディスクを解決するために必要なことをすべて実行

235
00:10:59,191 --> 00:11:00,220
するように見えます。

236
00:11:00,220 --> 00:11:01,040
同様に、2 進数で 111 までカウントするには、3 

237
00:11:01,040 --> 00:11:01,830
までカウントし、3 ビッ トすべてをロールオーバーし

238
00:11:01,830 --> 00:11:02,620
て、さらに 3 つカウントアップする必要があります。

239
00:11:02,620 --> 00:11:03,700
どの規模においても、両方のプロセ

240
00:11:03,700 --> 00:11:04,780
スでこれと同じ内訳が発生します。

241
00:11:04,780 --> 00:11:08,458
ある意味、このバイナリ ソリューションが機能する理由、また

242
00:11:08,458 --> 00:11:12,137
は少なくと も説明はありませんが、最も自然な説明は、これら

243
00:11:12,137 --> 00:11:15,816
の 2 進数を生成する ために使用するパターンがまったく同

244
00:11:15,816 --> 00:11:17,846
じであるということだと思います。

245
00:11:17,846 --> 00:11:21,525
 こ の構造は、ハノイの塔に使用されるパターンと同じです。

246
00:11:21,525 --> 00:11:25,204
 そのため、ビット の反転を見ると、事実上、このプロセスを

247
00:11:25,204 --> 00:11:26,980
逆にしていることになります。

248
00:11:27,600 --> 00:11:29,012
どのようなプロセスでこれらが生

249
00:11:29,012 --> 00:11:30,520
成されたのか、ということですね。

250
00:11:30,520 --> 00:11:34,895
これを得るためにこれらのビットがどのように反転されたかを

251
00:11:34,895 --> 00:11:37,396
理解しようとしているのと同じよ 

252
00:11:37,396 --> 00:11:41,772
うに、ハノイの塔の再帰アルゴリズムを事実上逆にしているの

253
00:11:41,772 --> 00:11:43,960
で、それがうまくいくのです。

254
00:11:43,960 --> 00:11:47,520
それはとてもクールですよね？

255
00:11:47,520 --> 00:11:51,700
でも実際はもっと涼しくなるんです。

256
00:11:51,820 --> 00:11:53,900
これがシェルピンスキーの三角形とどの

257
00:11:53,900 --> 00:11:55,980
ように関係するのかさえ分かりません。

258
00:11:55,980 --> 00:11:57,821
そして、それはまさに私が次のビデオのパート 

259
00:11:57,821 --> 00:11:59,159
2 でやろうとしていることです。

260
00:11:59,159 --> 00:11:59,160
Patreon でこれらのビデオをサポ

261
00:11:59,160 --> 00:11:59,160
ートしてくださっている皆様に感謝します。

262
00:11:59,160 --> 00:12:02,881
『Essence of Calculus』の第 1 

263
00:12:02,881 --> 00:12:06,889
章を終えたばかりで、現在 第 2 章に取り組んでいます。

264
00:12:06,889 --> 00:12:11,039
 数か月以内に全シリーズを公開する前に、Pat reon 

265
00:12:11,039 --> 00:12:15,047
サポーターはこれらのビデオに早期アクセスできるようになり

266
00:12:15,047 --> 00:12:15,620
ました。

267
00:12:15,620 --> 00:12:17,163
このビデオと次のビデオも Desmos 

268
00:12:17,163 --> 00:12:18,707
によって部分的にサポートされて います。

269
00:12:18,707 --> 00:12:20,714
 次のビデオの前に、少し時間をとって、彼らが誰である

270
00:12:20,714 --> 00:12:22,722
か、そして彼 らが雇用しているという事実について少し

271
00:12:22,722 --> 00:12:23,880
皆さんと共有したいと思います。

272
00:12:23,880 --> 00:12:29,580
デスモスは本当にクールです。

273
00:12:29,580 --> 00:12:30,432
彼らは、このようなインタラクティブな数学アクティビ

274
00:12:30,432 --> 00:12:31,320
ティを教室や教師用のツールとして多く作成しています。

275
00:12:31,320 --> 00:12:36,340
彼らの真骨頂は教室活動にあります。

276
00:12:36,340 --> 00:12:38,742
私としては、これらの活動が教育的な観点から非常によ 

277
00:12:38,742 --> 00:12:40,960
く考えられていることに非常に感銘を受けています。

278
00:12:40,960 --> 00:12:44,577
チームは自分たちのことを明確に理解しており、

279
00:12:44,577 --> 00:12:48,194
生徒と教師の生活に変化を もたらすために自分

280
00:12:48,194 --> 00:12:52,140
たちがどのような立場にあるのかを理解しています。

281
00:12:52,140 --> 00:12:53,440
そして、先ほども言ったように、彼らは雇用を行っています。

282
00:12:53,440 --> 00:12:57,386
彼らは常に、エンジニアリング人材、デザイナー、教師、また

283
00:12:57,386 --> 00:13:01,332
は自分たちがやりたいことに一 致するその他のスキルセット

284
00:13:01,332 --> 00:13:05,420
であるかどうか、より優れた人材を迎え入れようとしています。

285
00:13:05,420 --> 00:13:09,301
皆さんの中に、彼らに参加して、教師や生徒向けの優れた 

286
00:13:09,301 --> 00:13:13,182
ツールの作成を支援することに興味がある人がいる場合は 

287
00:13:13,182 --> 00:13:16,920
、説明でリンクした採用ページをチェックしてください。

288
00:13:16,920 --> 00:13:21,060
個人的には、彼らは本当に意味のあることをしていると思います。

289
00:13:21,060 --> 00:13:23,770
彼らの活動は、生徒たちに真に優れた数学的直観を構築している 

290
00:13:23,770 --> 00:13:26,389
と思います。 そして世界は、彼らと同じように教育に向けた努

291
00:13:26,389 --> 00:13:29,100
力 を向ける才能のある人材をもっと活用できるかもしれません。

292
00:13:29,100 --> 00:13:41,860
さて、それでは次のビデオでお会いしましょう。

293
00:13:41,860 --> 00:13:58,100
 この 先の展開はきっと気に入っていただけると思います。

