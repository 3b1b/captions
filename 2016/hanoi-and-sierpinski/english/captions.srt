1
00:00:04,200 --> 00:00:07,435
Today, I want to share with you a neat way to solve the Towers 

2
00:00:07,435 --> 00:00:10,620
of Hanoi puzzle just by counting in a different number system.

3
00:00:11,220 --> 00:00:15,640
And surprisingly, this stuff relates to finding a curve that fills Sierpinski's triangle.

4
00:00:16,720 --> 00:00:20,864
I learned about this from a former CS lecturer of mine, his name's Keith Schwartz, 

5
00:00:20,864 --> 00:00:24,460
and I've gotta say, this man is one of the best educators I've ever met.

6
00:00:25,140 --> 00:00:28,474
I actually recorded a bit of the conversation where he showed me this stuff, 

7
00:00:28,474 --> 00:00:30,900
so you guys can hear some of what he described directly.

8
00:00:38,420 --> 00:00:43,181
In case you're unfamiliar, let's just lay down 

9
00:00:43,181 --> 00:00:47,640
what the Towers of Hanoi puzzle actually is.

10
00:00:47,640 --> 00:00:54,000
So you have a collection of three pegs, and you have these disks of descending size.

11
00:00:54,400 --> 00:00:56,519
You think of these disks as having a hole in the 

12
00:00:56,519 --> 00:00:58,380
middle so that you can fit them onto a peg.

13
00:00:59,200 --> 00:01:03,008
The setup pictured here has five disks, which I'll label 0, 1, 2, 

14
00:01:03,008 --> 00:01:06,760
3, 4, but in principle, you could have as many disks as you want.

15
00:01:07,460 --> 00:01:11,788
So they all start up stacked up from biggest to smallest on one spindle, 

16
00:01:11,788 --> 00:01:15,880
and the goal is to move the entire tower from one spindle to another.

17
00:01:15,880 --> 00:01:18,741
The rule is you can only move one disk at a time, 

18
00:01:18,741 --> 00:01:22,060
and you can't move a bigger disk on top of a smaller disk.

19
00:01:23,720 --> 00:01:26,990
For example, your first move must involve moving disk 0, 

20
00:01:26,990 --> 00:01:31,409
since any other disk has stuff on top of it that needs to get out of the way 

21
00:01:31,409 --> 00:01:32,500
before it can move.

22
00:01:33,080 --> 00:01:36,704
After that, you can move disk 1, but it has to go on whatever 

23
00:01:36,704 --> 00:01:40,212
peg doesn't currently have disk 0, since otherwise you'd be 

24
00:01:40,212 --> 00:01:43,720
putting a bigger disk on a smaller one, which isn't allowed.

25
00:01:44,580 --> 00:01:48,168
If you've never seen this before, I highly encourage you to pause 

26
00:01:48,168 --> 00:01:51,920
and pull out some books of varying sizes and try it out for yourself.

27
00:01:52,300 --> 00:01:55,142
Just kind of get a feel for what the puzzle is, if it's hard, 

28
00:01:55,142 --> 00:01:57,940
why it's hard, if it's not, why it's not, that kind of stuff.

29
00:02:00,300 --> 00:02:03,784
Now Keith showed me something truly surprising about this puzzle, 

30
00:02:03,784 --> 00:02:07,216
which is that you can solve it just by counting up in binary and 

31
00:02:07,216 --> 00:02:11,440
associating the rhythm of that counting with a certain rhythm of disk movements.

32
00:02:12,100 --> 00:02:14,459
For anyone unfamiliar with binary, I'm going to 

33
00:02:14,459 --> 00:02:16,820
take a moment to do a quick overview here first.

34
00:02:17,460 --> 00:02:19,769
Actually, even if you are familiar with binary, 

35
00:02:19,769 --> 00:02:22,705
I want to explain it with a focus on the rhythm of counting, 

36
00:02:22,705 --> 00:02:25,160
which you may or may not have thought about before.

37
00:02:26,400 --> 00:02:30,384
Any description of binary typically starts off with an introspection 

38
00:02:30,384 --> 00:02:34,079
about our usual way to represent numbers, what we call base 10, 

39
00:02:34,079 --> 00:02:37,660
since we use 10 separate digits, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9.

40
00:02:38,180 --> 00:02:42,600
The rhythm of counting begins by walking through all 10 of these digits.

41
00:02:45,340 --> 00:02:49,668
Then, having run out of new digits, you express the next number, 

42
00:02:49,668 --> 00:02:51,400
10, with two digits, 1, 0.

43
00:02:52,200 --> 00:02:56,709
You say that 1 is in the tens place, since it's meant to encapsulate the group of 10 

44
00:02:56,709 --> 00:03:01,220
that you've already counted up to so far, while freeing the ones place to reset to 0.

45
00:03:02,079 --> 00:03:05,657
The rhythm of counting repeats like this, counting up 9, 

46
00:03:05,657 --> 00:03:11,180
rolling over to the tens place, counting up 9 more, rolling over to the tens place, etc.

47
00:03:12,620 --> 00:03:18,148
Until, after repeating that process 9 times, you roll over to a hundreds place, 

48
00:03:18,148 --> 00:03:22,501
a digit that keeps track of how many groups of 100 you've hit, 

49
00:03:22,501 --> 00:03:25,680
freeing up the other two digits to reset to 0.

50
00:03:29,519 --> 00:03:33,240
In this way, the rhythm of counting is kind of self-similar.

51
00:03:33,820 --> 00:03:38,654
Even if you zoom out to a larger scale, the process looks like doing something, 

52
00:03:38,654 --> 00:03:41,736
rolling over, doing that same thing, rolling over, 

53
00:03:41,736 --> 00:03:44,940
and repeating 9 times before an even larger rollover.

54
00:03:49,519 --> 00:03:54,296
In binary, also known as base-2, you limit yourself to two digits, 

55
00:03:54,296 --> 00:03:58,860
0 and 1, commonly called bits, which is short for binary digits.

56
00:03:59,640 --> 00:04:03,180
The result is that when you're counting, you have to roll over all the time.

57
00:04:03,740 --> 00:04:07,044
After counting 01, you've already run out of bits, 

58
00:04:07,044 --> 00:04:10,542
so you need to roll over to a twos place, writing 10, 

59
00:04:10,542 --> 00:04:15,401
and resisting every urge in your base-10 trained brain to read this as 10, 

60
00:04:15,401 --> 00:04:18,899
and instead understand it to mean 1 group of 2 plus 0.

61
00:04:19,899 --> 00:04:26,214
Then increment up to 11, which represents 3, and already you have to roll over again, 

62
00:04:26,214 --> 00:04:31,573
and since there's a 1 in that twos place, that has to roll over as well, 

63
00:04:31,573 --> 00:04:36,860
giving you 100, which represents 1 group of 4 plus 0 groups of 2 plus 0.

64
00:04:36,860 --> 00:04:41,490
In the same way that digits in base-10 represent powers of 10, 

65
00:04:41,490 --> 00:04:47,076
bits in base-2 represent different powers of 2, so instead of a tens place, 

66
00:04:47,076 --> 00:04:53,030
a hundreds place, a thousands place, you talk about a twos place, a fours place, 

67
00:04:53,030 --> 00:04:54,500
and an eights place.

68
00:04:55,820 --> 00:05:00,020
The rhythm of counting is now a lot faster, but that almost makes it more noticeable.

69
00:05:07,400 --> 00:05:13,240
Again, there's a certain self-similarity to this pattern.

70
00:05:13,920 --> 00:05:19,780
At every scale, the process is to do something, roll over, then do that same thing again.

71
00:05:22,360 --> 00:05:26,638
At the small scale, say counting up to 3, which is 11 in binary, 

72
00:05:26,638 --> 00:05:31,640
this means flip the last bit, roll over to the twos, then flip the last bit.

73
00:05:32,960 --> 00:05:37,680
At a larger scale, like counting up to 15, which is 1111 in binary, 

74
00:05:37,680 --> 00:05:41,011
the process is to let the last 3 count up to 7, 

75
00:05:41,011 --> 00:05:45,940
roll over to the eights place, then let the last 3 bits count up again.

76
00:05:46,960 --> 00:05:50,078
Counting up to 255, which is 8 successive ones, 

77
00:05:50,078 --> 00:05:54,496
this looks like letting the last 7 bits count up till they're full, 

78
00:05:54,496 --> 00:05:59,500
rolling over to the 128th place, then letting the last 7 bits count up again.

79
00:06:01,340 --> 00:06:05,264
Alright, so with that mini-introduction, the surprising fact that Keith 

80
00:06:05,264 --> 00:06:09,080
showed me is that we can use this rhythm to solve the towers of Hanoi.

81
00:06:10,380 --> 00:06:11,840
You start by counting from 0.

82
00:06:12,660 --> 00:06:16,797
Whenever you're only flipping that last bit, from a 0 to a 1, 

83
00:06:16,797 --> 00:06:19,000
move disk 0 one peg to the right.

84
00:06:22,020 --> 00:06:26,020
If it was already on the right-most peg, you just loop it back to the first peg.

85
00:06:28,800 --> 00:06:32,990
If, in your binary counting, you roll over once to the twos place, 

86
00:06:32,990 --> 00:06:36,680
meaning you flip the last two bits, you move disk number 1.

87
00:06:37,620 --> 00:06:38,980
Where do you move it, you might ask?

88
00:06:39,300 --> 00:06:40,400
Well, you have no choice.

89
00:06:40,620 --> 00:06:43,821
You can't put it on top of disk 0, and there's only one other peg, 

90
00:06:43,821 --> 00:06:46,020
so you move it where you're forced to move it.

91
00:06:46,659 --> 00:06:50,676
So after this, counting up to 1,1, that involves just flipping the last bit, 

92
00:06:50,676 --> 00:06:51,980
so you move disk 0 again.

93
00:06:52,640 --> 00:06:57,235
Then when your binary counting rolls over twice to the fours place, 

94
00:06:57,235 --> 00:07:01,020
move disk number 2, and the pattern continues like this.

95
00:07:01,320 --> 00:07:02,880
Flip the last, move disk 0.

96
00:07:03,260 --> 00:07:04,900
Flip the last two, move disk 1.

97
00:07:05,760 --> 00:07:07,200
Flip the last, move disk 0.

98
00:07:07,980 --> 00:07:11,660
And here, we're going to have to roll over three times to the eights place, 

99
00:07:11,660 --> 00:07:13,840
and that corresponds to moving disk number 3.

100
00:07:14,800 --> 00:07:16,180
There's something magical about it.

101
00:07:16,300 --> 00:07:17,920
When I first saw this, I was like, this can't work.

102
00:07:18,540 --> 00:07:21,080
I don't know how this works, I don't know why this works.

103
00:07:21,200 --> 00:07:24,280
Now I know, but it's just magical when you see it.

104
00:07:24,400 --> 00:07:29,161
I remember putting together an animation for this when I was teaching this, 

105
00:07:29,161 --> 00:07:31,480
and just like, I know how this works.

106
00:07:31,620 --> 00:07:32,840
I know all the things in it.

107
00:07:32,900 --> 00:07:36,220
It's still fun to just sit and just watch it play out.

108
00:07:36,380 --> 00:07:36,640
Oh yeah.

109
00:07:37,180 --> 00:07:41,220
I mean, it's not even clear at first that this is always going to give legal moves.

110
00:07:41,640 --> 00:07:46,109
For example, how do you know that every time you're rolling over to the eights place, 

111
00:07:46,109 --> 00:07:49,020
that disk 3 is necessarily going to be freed up to move?

112
00:07:49,740 --> 00:07:53,511
At the same time, the solution just immediately raises these questions like, 

113
00:07:53,511 --> 00:07:55,814
where does this come from, why does this work, 

114
00:07:55,814 --> 00:07:59,880
and is there a better way of doing this than having to do 2 to the n minus 1 steps?

115
00:08:00,520 --> 00:08:03,393
It turns out, not only does this solve Towers of Hanoi, 

116
00:08:03,393 --> 00:08:05,960
but it does it in the most efficient way possible.

117
00:08:06,700 --> 00:08:11,094
Understanding why this works and how it works and what the heck is going on comes down 

118
00:08:11,094 --> 00:08:15,540
to a certain perspective on the puzzle, what CS folk might call a recursive perspective.

119
00:08:16,800 --> 00:08:20,280
Disk 3 is thinking, okay, 2, 1, and 0, you have to get off of me.

120
00:08:20,420 --> 00:08:23,620
I can't really function under this much weight and pressure.

121
00:08:24,900 --> 00:08:29,377
And so just from disk 3's perspective, if you want to figure out how is disk 3 going 

122
00:08:29,377 --> 00:08:33,960
to get over here, somehow, I don't care how, disk 2, 1, and 0 have to get to spindle B.

123
00:08:34,020 --> 00:08:35,940
That's the only way it can move.

124
00:08:36,080 --> 00:08:38,000
If any of these disks are on top of 3, it can't move.

125
00:08:38,000 --> 00:08:40,600
If any of them are in spindle C, it can't move there.

126
00:08:41,000 --> 00:08:43,059
So somehow we have to get 2, 1, and 0 off.

127
00:08:43,580 --> 00:08:47,600
Having done that, then we can move disk 3 over there.

128
00:08:48,120 --> 00:08:49,380
And then disk 3 says, I'm set.

129
00:08:49,720 --> 00:08:51,280
You never need to move me again.

130
00:08:51,740 --> 00:08:53,380
Everyone else just figure out how to get here.

131
00:08:53,980 --> 00:08:57,660
And in a sense, you now have a smaller version of the same problem.

132
00:08:57,740 --> 00:09:01,520
Now you've got disk 0, 1, and 2 sitting on spindle B, you've got to get them to C.

133
00:09:02,080 --> 00:09:04,716
So the idea is that if I just focus on one disk and I think 

134
00:09:04,716 --> 00:09:07,440
about what am I going to have to do to get this disk to work, 

135
00:09:07,440 --> 00:09:10,120
I can turn my bigger problem into something slightly smaller.

136
00:09:10,340 --> 00:09:11,840
And then how do I solve that?

137
00:09:11,940 --> 00:09:13,260
Well, it's exactly the same thing.

138
00:09:13,400 --> 00:09:17,160
Disk 2 is going to say, disk 1, disk 0, it's not you, it's me.

139
00:09:17,220 --> 00:09:17,860
I just need some space.

140
00:09:17,960 --> 00:09:18,380
Get off.

141
00:09:18,820 --> 00:09:20,120
They need to move somewhere.

142
00:09:20,340 --> 00:09:22,940
Then disk 2 can move to where it needs to go.

143
00:09:23,020 --> 00:09:24,800
Then disk 1 and 0 can do this.

144
00:09:25,020 --> 00:09:28,044
But the interesting point is that every single 

145
00:09:28,044 --> 00:09:30,940
disk pretty much has the exact same strategy.

146
00:09:31,020 --> 00:09:32,800
They all say, everybody above me, get off.

147
00:09:32,800 --> 00:09:35,340
Then I'm going to move, OK, everyone pile back on.

148
00:09:36,320 --> 00:09:42,074
When you know that insight, you can code up something that will solve Towers of Hanoi, 

149
00:09:42,074 --> 00:09:46,638
like five or six lines of code, which probably has the highest ratio 

150
00:09:46,638 --> 00:09:49,880
of intellectual investment to lines of code ever.

151
00:09:50,420 --> 00:09:53,168
And if you think about it for a bit, it becomes 

152
00:09:53,168 --> 00:09:56,260
clear that this has to be the most efficient solution.

153
00:09:56,760 --> 00:09:59,480
At every step, you're only doing what's forced upon you.

154
00:09:59,920 --> 00:10:03,820
You have to get disk 0 through 2 off before you can move disk 3.

155
00:10:04,340 --> 00:10:05,900
And you have to move disk 3.

156
00:10:06,460 --> 00:10:09,300
And then you have to move disk 0 through 2 back onto it.

157
00:10:09,880 --> 00:10:13,640
There's just not any room for inefficiency from this perspective.

158
00:10:15,200 --> 00:10:18,400
So why does counting in binary capture this algorithm?

159
00:10:19,460 --> 00:10:23,401
Well, what's going on here is that this pattern of solving a subproblem, 

160
00:10:23,401 --> 00:10:26,208
moving a big disk, then solving a subproblem again, 

161
00:10:26,208 --> 00:10:29,340
is perfectly paralleled by the pattern of binary counting.

162
00:10:30,080 --> 00:10:33,480
Count up some amount, roll over, count up to that same amount again.

163
00:10:35,140 --> 00:10:39,998
And this Towers of Hanoi algorithm and binary counting are both self-similar processes, 

164
00:10:39,998 --> 00:10:43,917
in the sense that if you zoom out and count up to a larger power of 2, 

165
00:10:43,917 --> 00:10:48,500
or solve Towers of Hanoi with more disks, they both still have that same structure.

166
00:10:49,040 --> 00:10:51,160
Subproblem, do a thing, subproblem.

167
00:10:52,480 --> 00:10:57,593
For example, at a pretty small scale, solving Towers of Hanoi for two disks, 

168
00:10:57,593 --> 00:11:03,040
move disk 0, move disk 1, move disk 0, is reflected by counting up to 3 in binary.

169
00:11:03,680 --> 00:11:06,540
Flip the last bit, roll over once, flip the last bit.

170
00:11:07,380 --> 00:11:10,850
At a slightly larger scale, solving Towers of Hanoi for three 

171
00:11:10,850 --> 00:11:14,265
disks looks like doing whatever it takes to solve two disks, 

172
00:11:14,265 --> 00:11:18,240
move disk number 2, then do whatever it takes to solve two disks again.

173
00:11:19,100 --> 00:11:23,449
Analogously, counting up to 111 in binary involves counting up to 3, 

174
00:11:23,449 --> 00:11:26,980
rolling over all three bits, and counting up three more.

175
00:11:27,600 --> 00:11:31,360
At all scales, both processes have this same breakdown.

176
00:11:31,820 --> 00:11:36,176
So in a sense, the reason that this binary solution works, or at least an explanation, 

177
00:11:36,176 --> 00:11:40,232
I feel like there's no one explanation, but I think the most natural one is that 

178
00:11:40,232 --> 00:11:44,238
the pattern you would use to generate these binary numbers has exactly the same 

179
00:11:44,238 --> 00:11:47,243
structure as the pattern you would use for Towers of Hanoi, 

180
00:11:47,243 --> 00:11:51,700
which is why if you look at the bits flipping, you're effectively reversing this process.

181
00:11:51,820 --> 00:11:54,020
You're saying, what process generated these?

182
00:11:54,020 --> 00:11:59,153
If I were trying to understand how these bits were flipped to give me this thing, 

183
00:11:59,153 --> 00:12:04,412
you're effectively reverse engineering the recursive algorithm for Towers of Hanoi, 

184
00:12:04,412 --> 00:12:06,040
which is why it works out.

185
00:12:07,620 --> 00:12:09,000
That's pretty cool, right?

186
00:12:09,420 --> 00:12:10,740
But it actually gets cooler.

187
00:12:10,960 --> 00:12:13,640
I haven't even gotten to how this relates to Sierpinski's triangle.

188
00:12:14,260 --> 00:12:17,780
And that's exactly what I'm going to do in the follow-on video, part 2.

189
00:12:18,820 --> 00:12:21,860
Many thanks to everybody who's supporting these videos on Patreon.

190
00:12:21,860 --> 00:12:24,862
I just finished the first chapter of Essence of Calculus, 

191
00:12:24,862 --> 00:12:28,588
and I'm working on the second one right now, and Patreon supporters are 

192
00:12:28,588 --> 00:12:33,040
getting early access to these videos before I publish the full series in a few months.

193
00:12:34,500 --> 00:12:37,569
This video and the next one are also supported in part by Desmos, 

194
00:12:37,569 --> 00:12:40,824
and before the next video I just want to take a moment and share with 

195
00:12:40,824 --> 00:12:44,080
you guys a little about who they are and the fact that they're hiring.

196
00:12:44,740 --> 00:12:46,480
So Desmos is actually really cool.

197
00:12:46,880 --> 00:12:49,209
They make a lot of these interactive math activities 

198
00:12:49,209 --> 00:12:50,880
for classrooms and tools for teachers.

199
00:12:51,480 --> 00:12:55,180
The real meat of their offering is in their classroom activities.

200
00:12:56,040 --> 00:12:59,211
For my part, I'm super impressed by just how well-thought-out 

201
00:12:59,211 --> 00:13:01,820
these activities are from a pedagogical standpoint.

202
00:13:02,500 --> 00:13:04,970
The team clearly knows their stuff, and they know where they 

203
00:13:04,970 --> 00:13:07,400
stand to make a difference in students' and teachers' lives.

204
00:13:08,080 --> 00:13:09,500
And like I said, they're hiring.

205
00:13:10,060 --> 00:13:14,515
They are always looking to bring in more good talent, whether that's engineering talent, 

206
00:13:14,515 --> 00:13:18,720
designers, teachers, or whatever other skill sets line up with what they want to do.

207
00:13:19,220 --> 00:13:21,599
If any of you out there are interested in joining them, 

208
00:13:21,599 --> 00:13:24,615
helping them make some of these great tools for teachers and students, 

209
00:13:24,615 --> 00:13:27,420
you can check out the careers page I've linked in the description.

210
00:13:28,040 --> 00:13:30,400
Personally, I think they're doing some really meaningful stuff.

211
00:13:30,500 --> 00:13:34,558
I think their activities are building genuinely good math intuitions for students, 

212
00:13:34,558 --> 00:13:37,492
and the world could use a few more talented people pointing 

213
00:13:37,492 --> 00:13:39,840
their efforts towards education the way they do.

214
00:13:41,260 --> 00:13:49,078
Alright so with that, I'll see you guys next video, 

215
00:13:49,078 --> 00:13:58,100
and I think you're really going to like where this is going.

