1
00:00:04,200 --> 00:00:07,435
Today, I want to share with you a neat way to solve the Towers 

2
00:00:07,435 --> 00:00:10,620
of Hanoi puzzle just by counting in a different number system.

3
00:00:11,220 --> 00:00:15,640
And surprisingly, this stuff relates to finding a curve that fills Sierpinski's triangle.

4
00:00:16,720 --> 00:00:20,864
I learned about this from a former CS lecturer of mine, his name's Keith Schwartz, 

5
00:00:20,864 --> 00:00:24,460
and I've gotta say, this man is one of the best educators I've ever met.

6
00:00:25,140 --> 00:00:28,474
I actually recorded a bit of the conversation where he showed me this stuff, 

7
00:00:28,474 --> 00:00:30,900
so you guys can hear some of what he described directly.

8
00:00:38,420 --> 00:00:43,181
In case you're unfamiliar, let's just lay down 

9
00:00:43,181 --> 00:00:47,640
what the Towers of Hanoi puzzle actually is.

10
00:00:47,640 --> 00:00:54,000
So you have a collection of three pegs, and you have these disks of descending size.

11
00:00:54,400 --> 00:00:56,519
You think of these disks as having a hole in the 

12
00:00:56,519 --> 00:00:58,380
middle so that you can fit them onto a peg.

13
00:00:59,200 --> 00:01:03,008
The setup pictured here has five disks, which I'll label 0, 1, 2, 

14
00:01:03,008 --> 00:01:06,760
3, 4, but in principle, you could have as many disks as you want.

15
00:01:07,460 --> 00:01:10,596
For example, your first move must involve moving disk 0, 

16
00:01:10,596 --> 00:01:14,834
since any other disk has stuff on top of it that needs to get out of the way 

17
00:01:14,834 --> 00:01:15,880
before it can move.

18
00:01:15,880 --> 00:01:18,533
After that, you can move disk 1, but it has to go on whatever peg doesn't 

19
00:01:18,533 --> 00:01:21,080
currently have disk 0, since otherwise you'd be putting a bigger disk o

20
00:01:21,080 --> 00:01:24,477
n a smaller one, which isn't allowed. If you've never seen this before, 

21
00:01:24,477 --> 00:01:28,300
I highly encourage you to pause and pull out some books of varying sizes and try 

22
00:01:28,300 --> 00:01:32,500
it out for yourself. Now Keith showed me something truly surprising about this puzzle, wh

23
00:01:33,080 --> 00:01:36,682
ich is that you can solve it just by counting up in binary and associating the rhythm 

24
00:01:36,682 --> 00:01:39,112
of that counting with a certain rhythm of disk movements. 

25
00:01:39,112 --> 00:01:42,672
For anyone unfamiliar with binary, I'm going to take a moment to do a quick overview 

26
00:01:42,672 --> 00:01:43,720
here first. Actually, eve

27
00:01:44,580 --> 00:01:48,250
n if you're familiar with binary, I want to explain it with a focus on the 

28
00:01:48,250 --> 00:01:51,920
rhythm of counting, which you may or may not have thought about before. Any

29
00:01:52,300 --> 00:01:55,142
Just kind of get a feel for what the puzzle is, if it's hard, 

30
00:01:55,142 --> 00:01:57,940
why it's hard, if it's not, why it's not, that kind of stuff.

31
00:02:00,300 --> 00:02:03,784
Now Keith showed me something truly surprising about this puzzle, 

32
00:02:03,784 --> 00:02:07,216
which is that you can solve it just by counting up in binary and 

33
00:02:07,216 --> 00:02:11,440
associating the rhythm of that counting with a certain rhythm of disk movements.

34
00:02:12,100 --> 00:02:14,459
For anyone unfamiliar with binary, I'm going to 

35
00:02:14,459 --> 00:02:16,820
take a moment to do a quick overview here first.

36
00:02:17,460 --> 00:02:20,125
10 that you've already counted up to so far, while freeing the ones place to reset to 0. 

37
00:02:20,125 --> 00:02:21,832
The rhythm of counting repeats like this, counting up 9, 

38
00:02:21,832 --> 00:02:23,420
rolling over to the tens place, counting up 9 more, r

39
00:02:23,420 --> 00:02:28,226
olling over to the tens place, etc. Well, after repeating that process 9 times, 

40
00:02:28,226 --> 00:02:32,973
you roll over to a hundreds place, a digit that keeps track of how many groups 

41
00:02:32,973 --> 00:02:37,660
of 100 you've hit, freeing up the other two digits to reset to 0. In this way,

42
00:02:38,180 --> 00:02:42,600
The rhythm of counting begins by walking through all 10 of these digits.

43
00:02:45,340 --> 00:02:49,668
Then, having run out of new digits, you express the next number, 

44
00:02:49,668 --> 00:02:51,400
10, with two digits, 1, 0.

45
00:02:52,200 --> 00:02:56,709
You say that 1 is in the tens place, since it's meant to encapsulate the group of 10 

46
00:02:56,709 --> 00:03:01,220
that you've already counted up to so far, while freeing the ones place to reset to 0.

47
00:03:02,080 --> 00:03:06,686
t when you're counting, you have to roll over all the time. After counting 0, 1, 

48
00:03:06,686 --> 00:03:11,180
you've already run out of bits, so you need to roll over to a two's place, writ

49
00:03:12,620 --> 00:03:18,621
ing 1-0, and resisting every urge in your base-10-trained brain to read this as 10, 

50
00:03:18,621 --> 00:03:24,408
and instead understand it to mean 1 group of 2 plus 0. Then increment up to 1-1, 

51
00:03:24,408 --> 00:03:28,766
which represents 3, and already you have to roll over again, 

52
00:03:28,766 --> 00:03:34,053
and since there's a 1 in that two's place, that has to roll over as well, 

53
00:03:34,053 --> 00:03:39,340
giving you 1-0-0, which represents 1 group of 4 plus 0 groups of 2 plus 0.

54
00:03:39,340 --> 00:03:45,867
In the same way that digits in base-10 represent powers of 10, 

55
00:03:45,867 --> 00:03:55,193
bits in base-2 represent different powers of 2. So instead of talking about a 10's place, 

56
00:03:55,193 --> 00:04:04,518
a 100's place, a 1000's place, things like that, you talk about a 2's place, a 4's place, 

57
00:04:04,518 --> 00:04:06,280
and an 8's place.

58
00:04:06,280 --> 00:04:14,610
Even if you zoom out to a larger scale, the process looks like doing something, 

59
00:04:14,610 --> 00:04:19,921
rolling over, doing that same thing, rolling over, 

60
00:04:19,921 --> 00:04:25,440
and repeating 9 times before an even larger rollover.

61
00:04:25,440 --> 00:04:31,015
ce. Flip the last, roll over twice. Flip the last, roll over once. Flip the last, 

62
00:04:31,015 --> 00:04:36,524
roll over three times. Again, there's a certain self-similarity to this pattern. 

63
00:04:36,524 --> 00:04:42,644
At every scale, the process is to do something, roll over, then do that same thing again. 

64
00:04:42,644 --> 00:04:47,540
At the small scale, say counting up to 3, which is 1-1 in binary, this m

65
00:04:47,540 --> 00:04:55,920
eans flip the last bit, roll over to the two's, then flip the last bit. At a larger scale

66
00:04:55,920 --> 00:04:59,995
After counting 01, you've already run out of bits, 

67
00:04:59,995 --> 00:05:04,311
so you need to roll over to a twos place, writing 10, 

68
00:05:04,311 --> 00:05:10,304
and resisting every urge in your base-10 trained brain to read this as 10, 

69
00:05:10,304 --> 00:05:14,620
and instead understand it to mean 1 group of 2 plus 0.

70
00:05:15,060 --> 00:05:19,691
Then increment up to 11, which represents 3, and already you have to roll over again, 

71
00:05:19,691 --> 00:05:23,622
and since there's a 1 in that twos place, that has to roll over as well, 

72
00:05:23,622 --> 00:05:27,500
giving you 100, which represents 1 group of 4 plus 0 groups of 2 plus 0.

73
00:05:27,500 --> 00:05:32,547
tting the last 7 bits count up till they're full, rolling over to the 128's place, 

74
00:05:32,547 --> 00:05:37,777
then letting the last 7 bits count up again. Alright, so with that mini-introduction, 

75
00:05:37,777 --> 00:05:42,946
the surprising fact that Keith showed me is that we can use this rhythm to solve the 

76
00:05:42,946 --> 00:05:43,920
towers of Hanoi.

77
00:05:43,920 --> 00:05:51,920
The rhythm of counting is now a lot faster, but that almost makes it more noticeable.

78
00:05:51,920 --> 00:05:59,500
Again, there's a certain self-similarity to this pattern.

79
00:06:01,340 --> 00:06:09,136
ontinues like this. Flip the last, move disk 0. Flip the last two, move disk 1. 

80
00:06:09,136 --> 00:06:17,128
Flip the last, move disk 0. And here we're going to have to roll over three times 

81
00:06:17,128 --> 00:06:25,120
to the 8's place, and that corresponds to moving disk 3. There's something magical

82
00:06:25,120 --> 00:06:29,444
At the small scale, say counting up to 3, which is 11 in binary, 

83
00:06:29,444 --> 00:06:34,500
this means flip the last bit, roll over to the twos, then flip the last bit.

84
00:06:34,500 --> 00:06:39,169
At a larger scale, like counting up to 15, which is 1111 in binary, 

85
00:06:39,169 --> 00:06:42,464
the process is to let the last 3 count up to 7, 

86
00:06:42,464 --> 00:06:47,340
roll over to the eights place, then let the last 3 bits count up again.

87
00:06:47,520 --> 00:06:49,270
Counting up to 255, which is 8 successive ones, 

88
00:06:49,270 --> 00:06:51,751
this looks like letting the last 7 bits count up till they're full, 

89
00:06:51,751 --> 00:06:54,560
rolling over to the 128th place, then letting the last 7 bits count up again.

90
00:06:54,560 --> 00:06:57,490
Alright, so with that mini-introduction, the surprising fact that Keith 

91
00:06:57,490 --> 00:07:00,340
showed me is that we can use this rhythm to solve the towers of Hanoi.

92
00:07:00,340 --> 00:07:05,954
i, but it does it in the most efficient way possible. 

93
00:07:05,954 --> 00:07:11,880
Understanding why this works and how it works and what th

94
00:07:11,880 --> 00:07:16,284
e heck is going on comes down to a certain perspective on the puzzle, 

95
00:07:16,284 --> 00:07:21,821
what CS folk might call a recursive perspective. Disk 3 is thinking, okay, 2, 1, and 0, 

96
00:07:21,821 --> 00:07:23,080
like you have to get

97
00:07:23,080 --> 00:07:30,161
off of me, like I can't really function under this much weight and pressure. 

98
00:07:30,161 --> 00:07:33,380
And so just from disk 3's perspecti

99
00:07:33,380 --> 00:07:38,070
If, in your binary counting, you roll over once to the twos place, 

100
00:07:38,070 --> 00:07:42,200
meaning you flip the last two bits, you move disk number 1.

101
00:07:42,480 --> 00:07:43,140
Where do you move it, you might ask?

102
00:07:43,140 --> 00:07:45,220
Well, you have no choice.

103
00:07:45,660 --> 00:07:50,645
this disk to work, I can turn my bigger problem into something slightly smaller. 

104
00:07:50,645 --> 00:07:54,645
And then how do I solve that? Well, it's exactly the same thing. 

105
00:07:54,645 --> 00:07:58,891
If disk 2 is going to say, disk 1 and disk 0, it's not you, it's me. 

106
00:07:58,891 --> 00:08:02,400
I just need some space. Get off. They need to move somewh

107
00:08:02,400 --> 00:08:04,954
ere. Then disk 2 can move to where it needs to go. Then disk 1 and 0 can do this. 

108
00:08:04,954 --> 00:08:07,197
But the interesting point is that every single disk pretty much has the 

109
00:08:07,197 --> 00:08:09,160
exact same strategy. They all say, everybody above me, get off.

110
00:08:09,160 --> 00:08:13,763
Then I'm going to move. Okay, everyone pile back on. When you know that insight, 

111
00:08:13,763 --> 00:08:17,116
you can code up something that will solve towers of Hanoi, 

112
00:08:17,116 --> 00:08:21,947
like five or six lines of code, which probably has the highest ratio of intellectual 

113
00:08:21,947 --> 00:08:25,982
investment to lines of code ever. And if you think about it for a bit, 

114
00:08:25,982 --> 00:08:27,460
it becomes clear that this

115
00:08:27,460 --> 00:08:28,682
has to be the most efficient solution. At every step, 

116
00:08:28,682 --> 00:08:30,109
you're only doing what's forced upon you. You have to get disk 

117
00:08:30,109 --> 00:08:31,740
0 through 2 off before you can move disk 3. And you have to move disk 3.

118
00:08:31,740 --> 00:08:32,179
Flip the last two, move disk 1.

119
00:08:32,200 --> 00:08:32,179
Flip the last, move disk 0.

120
00:08:32,200 --> 00:08:33,305
And here, we're going to have to roll over three times to the eights place, 

121
00:08:33,305 --> 00:08:33,960
and that corresponds to moving disk number 3.

122
00:08:34,020 --> 00:08:33,960
There's something magical about it.

123
00:08:34,020 --> 00:08:38,000
There's just not any room for inefficiency from this perspective.

124
00:08:38,000 --> 00:08:41,940
I don't know how this works, I don't know why this works.

125
00:08:41,940 --> 00:08:46,500
Now I know, but it's just magical when you see it.

126
00:08:46,500 --> 00:08:54,301
I remember putting together an animation for this when I was teaching this, 

127
00:08:54,301 --> 00:08:58,100
and just like, I know how this works.

128
00:08:58,100 --> 00:09:01,076
ove disk 0, move disk 1, move disk 0, is reflected by counting up to 3 in binary. 

129
00:09:01,076 --> 00:09:03,000
Flip the last bit, roll over once, flip the last bit.

130
00:09:03,000 --> 00:09:09,300
It's still fun to just sit and just watch it play out.

131
00:09:09,300 --> 00:09:10,556
At a slightly larger scale, solving towers of 

132
00:09:10,556 --> 00:09:11,840
Hanoi for three disks looks like doing whatever

133
00:09:11,940 --> 00:09:22,140
I mean, it's not even clear at first that this is always going to give legal moves.

134
00:09:22,140 --> 00:09:24,713
k number 2, then do whatever it takes to solve two disks again. 

135
00:09:24,713 --> 00:09:27,488
Analogously, counting up to 111 in binary involves counting up to 3, 

136
00:09:27,488 --> 00:09:29,780
rolling over all three bits, then counting up three more.

137
00:09:29,780 --> 00:09:32,428
At the same time, the solution just immediately raises these questions like, 

138
00:09:32,428 --> 00:09:34,045
where does this come from, why does this work, 

139
00:09:34,045 --> 00:09:36,900
and is there a better way of doing this than having to do 2 to the n minus 1 steps?

140
00:09:36,900 --> 00:09:37,618
It turns out, not only does this solve Towers of Hanoi, 

141
00:09:37,618 --> 00:09:38,260
but it does it in the most efficient way possible.

142
00:09:38,260 --> 00:09:44,036
Understanding why this works and how it works and what the heck is going on comes down 

143
00:09:44,036 --> 00:09:49,880
to a certain perspective on the puzzle, what CS folk might call a recursive perspective.

144
00:09:50,420 --> 00:09:52,575
give me this thing, you're effectively reversing the recursive algorithm for towers of 

145
00:09:52,575 --> 00:09:54,780
Hanoi, which is why it works out. That's pretty cool, right? But it actually gets cooler.

146
00:09:54,780 --> 00:10:03,820
I can't really function under this much weight and pressure.

147
00:10:04,340 --> 00:10:06,791
And so just from disk 3's perspective, if you want to figure out how is disk 3 going 

148
00:10:06,791 --> 00:10:09,300
to get over here, somehow, I don't care how, disk 2, 1, and 0 have to get to spindle B.

149
00:10:09,880 --> 00:10:11,820
That's the only way it can move.

150
00:10:11,820 --> 00:10:13,799
access to these videos before I publish the full series in a few months. 

151
00:10:13,799 --> 00:10:15,480
This video and the next one are also supported in part by Desm

152
00:10:15,480 --> 00:10:21,580
If any of them are in spindle C, it can't move there.

153
00:10:21,580 --> 00:10:22,880
So somehow we have to get 2, 1, and 0 off.

154
00:10:23,200 --> 00:10:23,420
Having done that, then we can move disk 3 over there.

155
00:10:23,420 --> 00:10:27,040
And then disk 3 says, I'm set.

156
00:10:27,040 --> 00:10:29,208
impressed by just how well-thought-out these activities are from a pedagogical standpoint.

157
00:10:29,208 --> 00:10:31,280
 The team clearly knows their stuff, and they know where they stand to make a differen

158
00:10:31,280 --> 00:10:33,480
Everyone else just figure out how to get here.

159
00:10:35,140 --> 00:10:41,040
And in a sense, you now have a smaller version of the same problem.

160
00:10:41,040 --> 00:10:46,880
Now you've got disk 0, 1, and 2 sitting on spindle B, you've got to get them to C.

161
00:10:46,880 --> 00:10:49,207
So the idea is that if I just focus on one disk and I think 

162
00:10:49,207 --> 00:10:51,613
about what am I going to have to do to get this disk to work, 

163
00:10:51,613 --> 00:10:53,980
I can turn my bigger problem into something slightly smaller.

164
00:10:53,980 --> 00:11:03,378
and students, you can check out the careers page that I've linked in the description. 

165
00:11:03,378 --> 00:11:06,220
Personally, I think they'r

166
00:11:06,220 --> 00:11:06,540
Well, it's exactly the same thing.

167
00:11:07,380 --> 00:11:07,700
Disk 2 is going to say, disk 1, disk 0, it's not you, it's me.

168
00:11:07,700 --> 00:11:13,380
I just need some space.

169
00:11:13,380 --> 00:11:16,720
Get off.

170
00:11:16,720 --> 00:11:17,360
They need to move somewhere.

171
00:11:17,360 --> 00:11:17,360
Then disk 2 can move to where it needs to go.

172
00:11:17,360 --> 00:11:25,220
Then disk 1 and 0 can do this.

173
00:11:25,220 --> 00:11:28,356
But the interesting point is that every single 

174
00:11:28,356 --> 00:11:31,360
disk pretty much has the exact same strategy.

175
00:11:31,820 --> 00:11:37,500
They all say, everybody above me, get off.

176
00:11:37,660 --> 00:11:40,500
Then I'm going to move, OK, everyone pile back on.

177
00:11:40,500 --> 00:11:43,411
When you know that insight, you can code up something that will solve Towers of Hanoi, 

178
00:11:43,411 --> 00:11:45,720
like five or six lines of code, which probably has the highest ratio 

179
00:11:45,720 --> 00:11:47,360
of intellectual investment to lines of code ever.

180
00:11:47,360 --> 00:11:52,837
And if you think about it for a bit, it becomes 

181
00:11:52,837 --> 00:11:59,000
clear that this has to be the most efficient solution.

182
00:11:59,000 --> 00:12:04,400
At every step, you're only doing what's forced upon you.

183
00:12:04,400 --> 00:12:04,960
You have to get disk 0 through 2 off before you can move disk 3.

184
00:12:04,960 --> 00:12:11,720
And you have to move disk 3.

185
00:12:11,720 --> 00:12:12,740
And then you have to move disk 0 through 2 back onto it.

186
00:12:12,740 --> 00:12:12,740
There's just not any room for inefficiency from this perspective.

187
00:12:12,740 --> 00:12:14,760
So why does counting in binary capture this algorithm?

188
00:12:14,760 --> 00:12:19,179
Well, what's going on here is that this pattern of solving a subproblem, 

189
00:12:19,179 --> 00:12:22,328
moving a big disk, then solving a subproblem again, 

190
00:12:22,328 --> 00:12:25,840
is perfectly paralleled by the pattern of binary counting.

191
00:12:25,840 --> 00:12:29,800
Count up some amount, roll over, count up to that same amount again.

192
00:12:29,800 --> 00:12:34,992
And this Towers of Hanoi algorithm and binary counting are both self-similar processes, 

193
00:12:34,992 --> 00:12:39,182
in the sense that if you zoom out and count up to a larger power of 2, 

194
00:12:39,182 --> 00:12:44,080
or solve Towers of Hanoi with more disks, they both still have that same structure.

195
00:12:44,740 --> 00:12:50,880
Subproblem, do a thing, subproblem.

196
00:12:51,480 --> 00:12:57,233
For example, at a pretty small scale, solving Towers of Hanoi for two disks, 

197
00:12:57,233 --> 00:13:03,360
move disk 0, move disk 1, move disk 0, is reflected by counting up to 3 in binary.

198
00:13:03,360 --> 00:13:04,940
Flip the last bit, roll over once, flip the last bit.

199
00:13:04,940 --> 00:13:09,343
At a slightly larger scale, solving Towers of Hanoi for three 

200
00:13:09,343 --> 00:13:13,676
disks looks like doing whatever it takes to solve two disks, 

201
00:13:13,676 --> 00:13:18,720
move disk number 2, then do whatever it takes to solve two disks again.

202
00:13:19,220 --> 00:13:21,163
Analogously, counting up to 111 in binary involves counting up to 3, 

203
00:13:21,163 --> 00:13:22,740
rolling over all three bits, and counting up three more.

204
00:13:22,740 --> 00:13:23,500
At all scales, both processes have this same breakdown.

205
00:13:23,500 --> 00:13:26,655
So in a sense, the reason that this binary solution works, or at least an explanation, 

206
00:13:26,655 --> 00:13:29,593
I feel like there's no one explanation, but I think the most natural one is that 

207
00:13:29,593 --> 00:13:32,495
the pattern you would use to generate these binary numbers has exactly the same 

208
00:13:32,495 --> 00:13:34,671
structure as the pattern you would use for Towers of Hanoi, 

209
00:13:34,671 --> 00:13:37,900
which is why if you look at the bits flipping, you're effectively reversing this process.

210
00:13:37,900 --> 00:13:39,100
You're saying, what process generated these?

211
00:13:39,100 --> 00:13:47,171
If I were trying to understand how these bits were flipped to give me this thing, 

212
00:13:47,171 --> 00:13:55,440
you're effectively reverse engineering the recursive algorithm for Towers of Hanoi, 

213
00:13:55,440 --> 00:13:58,000
which is why it works out.

214
00:13:58,000 --> 00:13:58,099
That's pretty cool, right?

215
00:13:58,099 --> 00:13:58,099
But it actually gets cooler.

216
00:13:58,099 --> 00:13:58,099
I haven't even gotten to how this relates to Sierpinski's triangle.

217
00:13:58,099 --> 00:13:58,100
And that's exactly what I'm going to do in the follow-on video, part 2.

218
00:13:58,100 --> 00:13:58,100
Many thanks to everybody who's supporting these videos on Patreon.

219
00:13:58,100 --> 00:13:58,100
I just finished the first chapter of Essence of Calculus, 

220
00:13:58,100 --> 00:13:58,100
and I'm working on the second one right now, and Patreon supporters are 

221
00:13:58,100 --> 00:13:58,100
getting early access to these videos before I publish the full series in a few months.

222
00:13:58,100 --> 00:13:58,100
This video and the next one are also supported in part by Desmos, 

223
00:13:58,100 --> 00:13:58,100
and before the next video I just want to take a moment and share with 

224
00:13:58,100 --> 00:13:58,100
you guys a little about who they are and the fact that they're hiring.

225
00:13:58,100 --> 00:13:58,100
So Desmos is actually really cool.

226
00:13:58,100 --> 00:13:58,100
They make a lot of these interactive math activities 

227
00:13:58,100 --> 00:13:58,100
for classrooms and tools for teachers.

228
00:13:58,100 --> 00:13:58,100
The real meat of their offering is in their classroom activities.

229
00:13:58,100 --> 00:13:58,100
For my part, I'm super impressed by just how well-thought-out 

230
00:13:58,100 --> 00:13:58,100
these activities are from a pedagogical standpoint.

231
00:13:58,100 --> 00:13:58,100
The team clearly knows their stuff, and they know where they 

232
00:13:58,100 --> 00:13:58,100
stand to make a difference in students' and teachers' lives.

233
00:13:58,100 --> 00:13:58,100
And like I said, they're hiring.

234
00:13:58,100 --> 00:13:58,100
They are always looking to bring in more good talent, whether that's engineering talent, 

235
00:13:58,100 --> 00:13:58,100
designers, teachers, or whatever other skill sets line up with what they want to do.

236
00:13:58,100 --> 00:13:58,100
If any of you out there are interested in joining them, 

237
00:13:58,100 --> 00:13:58,100
helping them make some of these great tools for teachers and students, 

238
00:13:58,100 --> 00:13:58,100
you can check out the careers page I've linked in the description.

239
00:13:58,100 --> 00:13:58,100
Personally, I think they're doing some really meaningful stuff.

240
00:13:58,100 --> 00:13:58,100
I think their activities are building genuinely good math intuitions for students, 

241
00:13:58,100 --> 00:13:58,100
and the world could use a few more talented people pointing 

242
00:13:58,100 --> 00:13:58,100
their efforts towards education the way they do.

243
00:13:58,100 --> 00:13:58,100
Alright so with that, I'll see you guys next video, 

244
00:13:58,100 --> 00:13:58,100
and I think you're really going to like where this is going.

