1
00:00:04,200 --> 00:00:08,820
Today, I want to share with you a neat way to solve the Towers of Hanoi puzzle just by

2
00:00:08,820 --> 00:00:10,620
counting in a different number system.

3
00:00:11,220 --> 00:00:15,640
And surprisingly, this stuff relates to finding a curve that fills Sierpinski's triangle.

4
00:00:16,720 --> 00:00:20,920
I learned about this from a former CS lecturer of mine, his name's Keith Schwartz, and

5
00:00:20,920 --> 00:00:24,460
I've gotta say, this man is one of the best educators I've ever met.

6
00:00:25,140 --> 00:00:28,600
I actually recorded a bit of the conversation where he showed me this stuff, so you guys

7
00:00:28,600 --> 00:00:30,900
can hear some of what he described directly.

8
00:00:38,420 --> 00:00:46,580
In case you're unfamiliar, let's just lay down what the Towers of Hanoi puzzle actually

9
00:00:46,580 --> 00:00:47,640
is.

10
00:00:47,640 --> 00:00:54,000
So you have a collection of three pegs, and you have these disks of descending size.

11
00:00:54,400 --> 00:00:57,900
You think of these disks as having a hole in the middle so that you can fit them onto

12
00:00:57,900 --> 00:00:58,380
a peg.

13
00:00:59,200 --> 00:01:04,780
The setup pictured here has five disks, which I'll label 0, 1, 2, 3, 4, but in principle,

14
00:01:05,000 --> 00:01:06,760
you could have as many disks as you want.

15
00:01:07,460 --> 00:01:12,200
So they all start up stacked up from biggest to smallest on one spindle, and the goal is

16
00:01:12,200 --> 00:01:15,880
to move the entire tower from one spindle to another.

17
00:01:15,880 --> 00:01:20,900
The rule is you can only move one disk at a time, and you can't move a bigger disk

18
00:01:20,900 --> 00:01:22,060
on top of a smaller disk.

19
00:01:23,720 --> 00:01:29,440
For example, your first move must involve moving disk 0, since any other disk has stuff

20
00:01:29,440 --> 00:01:32,500
on top of it that needs to get out of the way before it can move.

21
00:01:33,080 --> 00:01:38,020
After that, you can move disk 1, but it has to go on whatever peg doesn't currently

22
00:01:38,020 --> 00:01:43,240
have disk 0, since otherwise you'd be putting a bigger disk on a smaller one, which isn't

23
00:01:43,240 --> 00:01:43,720
allowed.

24
00:01:44,580 --> 00:01:49,620
If you've never seen this before, I highly encourage you to pause and pull out some books

25
00:01:49,620 --> 00:01:51,920
of varying sizes and try it out for yourself.

26
00:01:52,300 --> 00:01:56,000
Just kind of get a feel for what the puzzle is, if it's hard, why it's hard, if it's

27
00:01:56,000 --> 00:01:57,940
not, why it's not, that kind of stuff.

28
00:02:00,300 --> 00:02:04,800
Now Keith showed me something truly surprising about this puzzle, which is that you can solve

29
00:02:04,800 --> 00:02:10,100
it just by counting up in binary and associating the rhythm of that counting with a certain

30
00:02:10,100 --> 00:02:11,440
rhythm of disk movements.

31
00:02:12,100 --> 00:02:16,300
For anyone unfamiliar with binary, I'm going to take a moment to do a quick overview here

32
00:02:16,300 --> 00:02:16,820
first.

33
00:02:17,460 --> 00:02:22,000
Actually, even if you are familiar with binary, I want to explain it with a focus on the rhythm

34
00:02:22,000 --> 00:02:25,160
of counting, which you may or may not have thought about before.

35
00:02:26,400 --> 00:02:30,500
Any description of binary typically starts off with an introspection about our usual

36
00:02:30,500 --> 00:02:35,960
way to represent numbers, what we call base 10, since we use 10 separate digits, 0, 1,

37
00:02:35,960 --> 00:02:37,660
2, 3, 4, 5, 6, 7, 8, 9.

38
00:02:38,180 --> 00:02:42,600
The rhythm of counting begins by walking through all 10 of these digits.

39
00:02:45,340 --> 00:02:51,400
Then, having run out of new digits, you express the next number, 10, with two digits, 1, 0.

40
00:02:52,200 --> 00:02:56,580
You say that 1 is in the tens place, since it's meant to encapsulate the group of 10

41
00:02:56,580 --> 00:03:01,220
that you've already counted up to so far, while freeing the ones place to reset to 0.

42
00:03:02,080 --> 00:03:07,220
The rhythm of counting repeats like this, counting up 9, rolling over to the tens place,

43
00:03:08,100 --> 00:03:11,180
counting up 9 more, rolling over to the tens place, etc.

44
00:03:12,620 --> 00:03:19,800
Until, after repeating that process 9 times, you roll over to a hundreds place, a digit

45
00:03:19,800 --> 00:03:24,640
that keeps track of how many groups of 100 you've hit, freeing up the other two digits

46
00:03:24,640 --> 00:03:25,680
to reset to 0.

47
00:03:29,520 --> 00:03:33,240
In this way, the rhythm of counting is kind of self-similar.

48
00:03:33,820 --> 00:03:38,520
Even if you zoom out to a larger scale, the process looks like doing something, rolling

49
00:03:38,520 --> 00:03:43,940
over, doing that same thing, rolling over, and repeating 9 times before an even larger

50
00:03:43,940 --> 00:03:44,940
rollover.

51
00:03:49,520 --> 00:03:56,180
In binary, also known as base-2, you limit yourself to two digits, 0 and 1, commonly

52
00:03:56,180 --> 00:03:58,860
called bits, which is short for binary digits.

53
00:03:59,640 --> 00:04:03,180
The result is that when you're counting, you have to roll over all the time.

54
00:04:03,740 --> 00:04:08,440
After counting 01, you've already run out of bits, so you need to roll over to a twos

55
00:04:08,440 --> 00:04:13,880
place, writing 10, and resisting every urge in your base-10 trained brain to read this

56
00:04:13,880 --> 00:04:18,900
as 10, and instead understand it to mean 1 group of 2 plus 0.

57
00:04:19,900 --> 00:04:25,880
Then increment up to 11, which represents 3, and already you have to roll over again,

58
00:04:26,280 --> 00:04:30,700
and since there's a 1 in that twos place, that has to roll over as well, giving you

59
00:04:30,700 --> 00:04:36,860
100, which represents 1 group of 4 plus 0 groups of 2 plus 0.

60
00:04:36,860 --> 00:04:44,680
In the same way that digits in base-10 represent powers of 10, bits in base-2 represent different

61
00:04:44,680 --> 00:04:51,600
powers of 2, so instead of a tens place, a hundreds place, a thousands place, you talk

62
00:04:51,600 --> 00:04:54,500
about a twos place, a fours place, and an eights place.

63
00:04:55,820 --> 00:05:00,020
The rhythm of counting is now a lot faster, but that almost makes it more noticeable.

64
00:05:07,400 --> 00:05:13,240
Again, there's a certain self-similarity to this pattern.

65
00:05:13,920 --> 00:05:19,780
At every scale, the process is to do something, roll over, then do that same thing again.

66
00:05:22,360 --> 00:05:28,180
At the small scale, say counting up to 3, which is 11 in binary, this means flip the

67
00:05:28,180 --> 00:05:31,640
last bit, roll over to the twos, then flip the last bit.

68
00:05:32,960 --> 00:05:39,780
At a larger scale, like counting up to 15, which is 1111 in binary, the process is to

69
00:05:39,780 --> 00:05:44,800
let the last 3 count up to 7, roll over to the eights place, then let the last 3 bits

70
00:05:44,800 --> 00:05:45,940
count up again.

71
00:05:46,960 --> 00:05:53,140
Counting up to 255, which is 8 successive ones, this looks like letting the last 7 bits

72
00:05:53,140 --> 00:05:57,780
count up till they're full, rolling over to the 128th place, then letting the last

73
00:05:57,780 --> 00:05:59,500
7 bits count up again.

74
00:06:01,340 --> 00:06:05,860
Alright, so with that mini-introduction, the surprising fact that Keith showed me is that

75
00:06:05,860 --> 00:06:09,080
we can use this rhythm to solve the towers of Hanoi.

76
00:06:10,380 --> 00:06:11,840
You start by counting from 0.

77
00:06:12,660 --> 00:06:18,380
Whenever you're only flipping that last bit, from a 0 to a 1, move disk 0 one peg

78
00:06:18,380 --> 00:06:19,000
to the right.

79
00:06:22,020 --> 00:06:26,020
If it was already on the right-most peg, you just loop it back to the first peg.

80
00:06:28,800 --> 00:06:33,980
If, in your binary counting, you roll over once to the twos place, meaning you flip the

81
00:06:33,980 --> 00:06:36,680
last two bits, you move disk number 1.

82
00:06:37,620 --> 00:06:38,980
Where do you move it, you might ask?

83
00:06:39,300 --> 00:06:40,400
Well, you have no choice.

84
00:06:40,620 --> 00:06:45,080
You can't put it on top of disk 0, and there's only one other peg, so you move it where you're

85
00:06:45,080 --> 00:06:46,020
forced to move it.

86
00:06:46,660 --> 00:06:51,140
So after this, counting up to 1,1, that involves just flipping the last bit, so you move disk

87
00:06:51,140 --> 00:06:51,980
0 again.

88
00:06:52,640 --> 00:06:58,140
Then when your binary counting rolls over twice to the fours place, move disk number

89
00:06:58,140 --> 00:07:01,020
2, and the pattern continues like this.

90
00:07:01,320 --> 00:07:02,880
Flip the last, move disk 0.

91
00:07:03,260 --> 00:07:04,900
Flip the last two, move disk 1.

92
00:07:05,760 --> 00:07:07,200
Flip the last, move disk 0.

93
00:07:07,980 --> 00:07:11,880
And here, we're going to have to roll over three times to the eights place, and that

94
00:07:11,880 --> 00:07:13,840
corresponds to moving disk number 3.

95
00:07:14,800 --> 00:07:16,180
There's something magical about it.

96
00:07:16,300 --> 00:07:17,920
When I first saw this, I was like, this can't work.

97
00:07:18,540 --> 00:07:21,080
I don't know how this works, I don't know why this works.

98
00:07:21,200 --> 00:07:24,280
Now I know, but it's just magical when you see it.

99
00:07:24,400 --> 00:07:29,380
I remember putting together an animation for this when I was teaching this, and just like,

100
00:07:29,700 --> 00:07:31,480
I know how this works.

101
00:07:31,620 --> 00:07:32,840
I know all the things in it.

102
00:07:32,900 --> 00:07:36,220
It's still fun to just sit and just watch it play out.

103
00:07:36,380 --> 00:07:36,640
Oh yeah.

104
00:07:37,180 --> 00:07:41,220
I mean, it's not even clear at first that this is always going to give legal moves.

105
00:07:41,640 --> 00:07:45,220
For example, how do you know that every time you're rolling over to the eights place,

106
00:07:45,660 --> 00:07:49,020
that disk 3 is necessarily going to be freed up to move?

107
00:07:49,740 --> 00:07:53,980
At the same time, the solution just immediately raises these questions like, where does this

108
00:07:53,980 --> 00:07:58,360
come from, why does this work, and is there a better way of doing this than having to

109
00:07:58,360 --> 00:07:59,880
do 2 to the n minus 1 steps?

110
00:08:00,520 --> 00:08:05,140
It turns out, not only does this solve Towers of Hanoi, but it does it in the most efficient

111
00:08:05,140 --> 00:08:05,960
way possible.

112
00:08:06,700 --> 00:08:10,800
Understanding why this works and how it works and what the heck is going on comes down to

113
00:08:10,800 --> 00:08:15,540
a certain perspective on the puzzle, what CS folk might call a recursive perspective.

114
00:08:16,800 --> 00:08:20,280
Disk 3 is thinking, okay, 2, 1, and 0, you have to get off of me.

115
00:08:20,420 --> 00:08:23,620
I can't really function under this much weight and pressure.

116
00:08:24,900 --> 00:08:28,680
And so just from disk 3's perspective, if you want to figure out how is disk 3 going

117
00:08:28,680 --> 00:08:33,960
to get over here, somehow, I don't care how, disk 2, 1, and 0 have to get to spindle B.

118
00:08:34,020 --> 00:08:35,940
That's the only way it can move.

119
00:08:36,080 --> 00:08:38,000
If any of these disks are on top of 3, it can't move.

120
00:08:38,000 --> 00:08:40,600
If any of them are in spindle C, it can't move there.

121
00:08:41,000 --> 00:08:43,060
So somehow we have to get 2, 1, and 0 off.

122
00:08:43,580 --> 00:08:47,600
Having done that, then we can move disk 3 over there.

123
00:08:48,120 --> 00:08:49,380
And then disk 3 says, I'm set.

124
00:08:49,720 --> 00:08:51,280
You never need to move me again.

125
00:08:51,740 --> 00:08:53,380
Everyone else just figure out how to get here.

126
00:08:53,980 --> 00:08:57,660
And in a sense, you now have a smaller version of the same problem.

127
00:08:57,740 --> 00:09:01,520
Now you've got disk 0, 1, and 2 sitting on spindle B, you've got to get them to C.

128
00:09:02,080 --> 00:09:05,780
So the idea is that if I just focus on one disk and I think about what am I going to

129
00:09:05,780 --> 00:09:09,600
have to do to get this disk to work, I can turn my bigger problem into something slightly

130
00:09:09,600 --> 00:09:10,120
smaller.

131
00:09:10,340 --> 00:09:11,840
And then how do I solve that?

132
00:09:11,940 --> 00:09:13,260
Well, it's exactly the same thing.

133
00:09:13,400 --> 00:09:17,160
Disk 2 is going to say, disk 1, disk 0, it's not you, it's me.

134
00:09:17,220 --> 00:09:17,860
I just need some space.

135
00:09:17,960 --> 00:09:18,380
Get off.

136
00:09:18,820 --> 00:09:20,120
They need to move somewhere.

137
00:09:20,340 --> 00:09:22,940
Then disk 2 can move to where it needs to go.

138
00:09:23,020 --> 00:09:24,800
Then disk 1 and 0 can do this.

139
00:09:25,020 --> 00:09:30,940
But the interesting point is that every single disk pretty much has the exact same strategy.

140
00:09:31,020 --> 00:09:32,800
They all say, everybody above me, get off.

141
00:09:32,800 --> 00:09:35,340
Then I'm going to move, OK, everyone pile back on.

142
00:09:36,320 --> 00:09:40,360
When you know that insight, you can code up something that will solve Towers of Hanoi,

143
00:09:40,560 --> 00:09:46,680
like five or six lines of code, which probably has the highest ratio of intellectual investment

144
00:09:47,480 --> 00:09:49,880
to lines of code ever.

145
00:09:50,420 --> 00:09:55,700
And if you think about it for a bit, it becomes clear that this has to be the most efficient

146
00:09:55,700 --> 00:09:56,260
solution.

147
00:09:56,760 --> 00:09:59,480
At every step, you're only doing what's forced upon you.

148
00:09:59,920 --> 00:10:03,820
You have to get disk 0 through 2 off before you can move disk 3.

149
00:10:04,340 --> 00:10:05,900
And you have to move disk 3.

150
00:10:06,460 --> 00:10:09,300
And then you have to move disk 0 through 2 back onto it.

151
00:10:09,880 --> 00:10:13,640
There's just not any room for inefficiency from this perspective.

152
00:10:15,200 --> 00:10:18,400
So why does counting in binary capture this algorithm?

153
00:10:19,460 --> 00:10:23,600
Well, what's going on here is that this pattern of solving a subproblem, moving a

154
00:10:23,600 --> 00:10:28,580
big disk, then solving a subproblem again, is perfectly paralleled by the pattern of

155
00:10:28,580 --> 00:10:29,340
binary counting.

156
00:10:30,080 --> 00:10:33,480
Count up some amount, roll over, count up to that same amount again.

157
00:10:35,140 --> 00:10:39,920
And this Towers of Hanoi algorithm and binary counting are both self-similar processes,

158
00:10:40,380 --> 00:10:44,980
in the sense that if you zoom out and count up to a larger power of 2, or solve Towers

159
00:10:44,980 --> 00:10:48,500
of Hanoi with more disks, they both still have that same structure.

160
00:10:49,040 --> 00:10:51,160
Subproblem, do a thing, subproblem.

161
00:10:52,480 --> 00:10:57,460
For example, at a pretty small scale, solving Towers of Hanoi for two disks, move disk 0,

162
00:10:57,460 --> 00:11:03,040
move disk 1, move disk 0, is reflected by counting up to 3 in binary.

163
00:11:03,680 --> 00:11:06,540
Flip the last bit, roll over once, flip the last bit.

164
00:11:07,380 --> 00:11:12,320
At a slightly larger scale, solving Towers of Hanoi for three disks looks like doing

165
00:11:12,320 --> 00:11:17,180
whatever it takes to solve two disks, move disk number 2, then do whatever it takes to

166
00:11:17,180 --> 00:11:18,240
solve two disks again.

167
00:11:19,100 --> 00:11:25,040
Analogously, counting up to 111 in binary involves counting up to 3, rolling over all

168
00:11:25,040 --> 00:11:26,980
three bits, and counting up three more.

169
00:11:27,600 --> 00:11:31,360
At all scales, both processes have this same breakdown.

170
00:11:31,820 --> 00:11:35,740
So in a sense, the reason that this binary solution works, or at least an explanation,

171
00:11:35,900 --> 00:11:40,800
I feel like there's no one explanation, but I think the most natural one is that the pattern

172
00:11:40,800 --> 00:11:44,440
you would use to generate these binary numbers has exactly the same structure as the pattern

173
00:11:44,440 --> 00:11:49,640
you would use for Towers of Hanoi, which is why if you look at the bits flipping, you're

174
00:11:49,640 --> 00:11:51,700
effectively reversing this process.

175
00:11:51,820 --> 00:11:54,020
You're saying, what process generated these?

176
00:11:54,020 --> 00:12:00,500
If I were trying to understand how these bits were flipped to give me this thing, you're

177
00:12:00,500 --> 00:12:05,140
effectively reverse engineering the recursive algorithm for Towers of Hanoi, which is why

178
00:12:05,140 --> 00:12:06,040
it works out.

179
00:12:07,620 --> 00:12:09,000
That's pretty cool, right?

180
00:12:09,420 --> 00:12:10,740
But it actually gets cooler.

181
00:12:10,960 --> 00:12:13,640
I haven't even gotten to how this relates to Sierpinski's triangle.

182
00:12:14,260 --> 00:12:17,780
And that's exactly what I'm going to do in the follow-on video, part 2.

183
00:12:18,820 --> 00:12:21,860
Many thanks to everybody who's supporting these videos on Patreon.

184
00:12:21,860 --> 00:12:26,360
I just finished the first chapter of Essence of Calculus, and I'm working on the second

185
00:12:26,360 --> 00:12:30,800
one right now, and Patreon supporters are getting early access to these videos before

186
00:12:30,800 --> 00:12:33,040
I publish the full series in a few months.

187
00:12:34,500 --> 00:12:39,260
This video and the next one are also supported in part by Desmos, and before the next video

188
00:12:39,260 --> 00:12:43,080
I just want to take a moment and share with you guys a little about who they are and the

189
00:12:43,080 --> 00:12:44,080
fact that they're hiring.

190
00:12:44,740 --> 00:12:46,480
So Desmos is actually really cool.

191
00:12:46,880 --> 00:12:50,880
They make a lot of these interactive math activities for classrooms and tools for teachers.

192
00:12:51,480 --> 00:12:55,180
The real meat of their offering is in their classroom activities.

193
00:12:56,040 --> 00:13:00,220
For my part, I'm super impressed by just how well-thought-out these activities are

194
00:13:00,220 --> 00:13:01,820
from a pedagogical standpoint.

195
00:13:02,500 --> 00:13:05,960
The team clearly knows their stuff, and they know where they stand to make a difference

196
00:13:05,960 --> 00:13:07,400
in students' and teachers' lives.

197
00:13:08,080 --> 00:13:09,500
And like I said, they're hiring.

198
00:13:10,060 --> 00:13:14,500
They are always looking to bring in more good talent, whether that's engineering talent,

199
00:13:14,680 --> 00:13:18,720
designers, teachers, or whatever other skill sets line up with what they want to do.

200
00:13:19,220 --> 00:13:22,980
If any of you out there are interested in joining them, helping them make some of these

201
00:13:22,980 --> 00:13:26,740
great tools for teachers and students, you can check out the careers page I've linked

202
00:13:26,740 --> 00:13:27,420
in the description.

203
00:13:28,040 --> 00:13:30,400
Personally, I think they're doing some really meaningful stuff.

204
00:13:30,500 --> 00:13:35,100
I think their activities are building genuinely good math intuitions for students, and the

205
00:13:35,100 --> 00:13:39,100
world could use a few more talented people pointing their efforts towards education the

206
00:13:39,100 --> 00:13:39,840
way they do.

207
00:13:41,260 --> 00:13:44,680
Alright so with that, I'll see you guys next video, and I think you're really going

208
00:13:44,680 --> 00:13:45,640
to like where this is going.

209
00:13:48,720 --> 00:13:58,100
Thanks for watching!

