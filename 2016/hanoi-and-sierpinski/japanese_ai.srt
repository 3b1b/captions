1
00:00:00,000 --> 00:00:08,720
今日は、別の数体系で数えるだけでハノイの塔のパズルを解く素敵な方法を皆さんと共有したいと思います。

2
00:00:08,720 --> 00:00:11,240


3
00:00:11,240 --> 00:00:16,720
そして驚くべきことに、これはシェルピンスキーの三角形を満たす曲線を見つけることに関連しています。

4
00:00:16,720 --> 00:00:20,920
このことについては、私の元 CS

5
00:00:20,920 --> 00:00:24,840
講師、彼の名前はキース・シュワルツから聞きました。この人は私がこれまで会った中で最も優れた教育者の一人であると言わざるを得ません。

6
00:00:24,840 --> 00:00:28,560
私は実際に彼がこれを私に見せた会話の一部を録音したので、皆さんは彼が説明した内容の一部を直接聞くことができます。

7
00:00:28,560 --> 00:00:42,520


8
00:00:42,520 --> 00:00:46,840
よく知らない方のために、ハノイの塔のパズルが実際にどのようなものかを簡単に説明しましょう。

9
00:00:46,840 --> 00:00:54,440


10
00:00:54,440 --> 00:00:57,880
これらのディスクの中央には穴があり、ペグに取り付けることができると考えられます。

11
00:00:57,880 --> 00:00:59,260


12
00:00:59,260 --> 00:01:05,040
ここに示されているセットアップには 5

13
00:01:05,040 --> 00:01:24,120
つのディスクがあり、0、1、2、3、4 とラベルを付けますが、原則として、必要な数のディスクを使用できます。

14
00:01:24,120 --> 00:01:29,440
たとえば、最初の移動にはディスク 0

15
00:01:29,440 --> 00:01:33,320
の移動が含まれる必要があります。これは、他のディスクにはその上に物があり、移動する前に邪魔にならないようにする必要があるためです。

16
00:01:33,320 --> 00:01:38,000
その後、ディスク 1

17
00:01:38,000 --> 00:01:44,040
を移動できますが、現在ディスク 0

18
00:01:44,040 --> 00:01:45,040
がないペグに移動する必要があります。そうしないと、より大きなディスクをより小さなディスクの上に置くことになり、これは許可されていません。

19
00:01:45,040 --> 00:01:49,600
これをこれまで見たことがない場合は、一時停止してさまざまなサイズの本を何冊か取り出して、自分で試してみることを強くお勧めします。

20
00:01:49,600 --> 00:02:00,320


21
00:02:00,320 --> 00:02:04,760
さて、キースはこのパズルについて本当に驚くべきことを教えてくれました。それは、二進数で数えて、その数え方のリズムをディスクの動きの特定のリズムと関連付けるだけで解けるということです。

22
00:02:04,760 --> 00:02:10,200


23
00:02:10,200 --> 00:02:12,480


24
00:02:12,480 --> 00:02:16,420
バイナリに詳しくない人のために、最初にここで簡単に概要を説明します。

25
00:02:16,420 --> 00:02:17,420


26
00:02:17,420 --> 00:02:21,260
実は、バイナリのことは知っていても、考えたこともなかったかもしれない、数え方のリズムに焦点を当てて説明したいと思います。

27
00:02:21,260 --> 00:02:26,560


28
00:02:26,560 --> 00:02:30,500
バイナリの説明は通常、10 個の個別の数字 0、1、2、3、4、5、6、7、8、9

29
00:02:30,500 --> 00:02:36,100
を使用するため、私たちが基数 10

30
00:02:36,100 --> 00:02:38,560
と呼ぶ通常の数値の表現方法についての内省から始まります。 。

31
00:02:38,560 --> 00:02:44,220
数を数えるリズムは、これらの 10 桁をすべて通過することから始まります。

32
00:02:45,220 --> 00:02:52,320
次に、新しい桁がなくなったら、次の数値 10 を 2 桁の 1、0 で表します。

33
00:02:52,320 --> 00:02:56,760
1 が 10 の位にあると言うのは、これまでに既に数えた 10

34
00:02:56,760 --> 00:03:02,540
のグループをカプセル化し、1 の位を解放して 0 にリセットすることを目的としているからです。

35
00:03:02,540 --> 00:03:08,280
数え方のリズムは、9つ数えて、十の位に転がり、さらに9つ数えて、十の位に転がり、というように繰り返します。

36
00:03:08,280 --> 00:03:13,000


37
00:03:13,000 --> 00:03:19,800
このプロセスを 9 回繰り返した後、100

38
00:03:19,800 --> 00:03:24,640
の位にロールオーバーします。この数字は、100 のグループの数を記録し、残りの 2

39
00:03:24,640 --> 00:03:30,040
桁を解放して 0 にリセットします。

40
00:03:30,040 --> 00:03:34,060
このように、数を数えるリズムは一種の自己相似です。

41
00:03:34,060 --> 00:03:38,560
より大きなスケールにズームアウトした場合でも、このプロセスは、何かをして、寝返りし、同じことをして、寝返りを

42
00:03:39,120 --> 00:03:43,960
9

43
00:03:43,960 --> 00:03:49,960
回繰り返した後、さらに大きな寝返りが行われるように見えます。

44
00:03:49,960 --> 00:03:56,200
ベース 2 とも呼ばれるバイナリでは、一般に 2 進数の略でビットと呼ばれる 0

45
00:03:56,200 --> 00:03:59,700
と 1 の 2 桁に制限されます。

46
00:03:59,700 --> 00:04:03,960
その結果、数を数えるときに常に寝返りをしなければならないことになります。

47
00:04:03,960 --> 00:04:08,080
0、1 と数えた後は、すでにビットが不足しているため、2 の位にロールオーバーして 1-0 と書き、10

48
00:04:08,600 --> 00:04:13,440
進法で訓練された脳内でこれを 10 と読み取ろうとするあらゆる衝動に抵抗する必要があります。代わりに、2 の

49
00:04:13,440 --> 00:04:20,120
1 グループに 0 を加えたものを意味すると理解してください。

50
00:04:20,120 --> 00:04:26,400
次に、3 を表す 1-1 まで増分します。すでにもう一度ロールオーバーする必要があります。2 の位置に 1

51
00:04:26,400 --> 00:04:30,920
があるので、それもロールオーバーする必要があり、1-0-0 (1 を表します) になります。 4 プラス

52
00:04:30,920 --> 00:04:37,800
0 のグループ 2 プラス 0 のグループ。

53
00:04:37,800 --> 00:04:44,660
10 進数の数字が 10 の累乗を表すのと同じように、2

54
00:04:44,660 --> 00:04:46,380
進数のビットはさまざまな 2 の累乗を表します。

55
00:04:46,380 --> 00:04:50,360
つまり、10の位、100の位、1000の位などについて話す代わりに、2の位、4の位、8の位について話します。

56
00:04:50,360 --> 00:04:55,800


57
00:04:55,800 --> 00:05:01,080
数を数えるリズムはかなり速くなりましたが、その分、より顕著に感じられるようになりました。

58
00:05:01,080 --> 00:05:02,940
最後を裏返し、一度裏返します。

59
00:05:02,940 --> 00:05:04,680
最後を裏返し、2回回転させます。

60
00:05:04,680 --> 00:05:06,380
最後を裏返し、一度裏返します。

61
00:05:06,380 --> 00:05:09,100
最後をひっくり返し、3回回転させます。

62
00:05:09,100 --> 00:05:13,980
繰り返しますが、このパターンにはある種の自己類似性があります。

63
00:05:13,980 --> 00:05:22,480
どのスケールでも、プロセスは何かをして、寝返りをして、同じことをもう一度繰り返すというものです。

64
00:05:22,480 --> 00:05:27,980
小規模なスケールでは、たとえば、2 進数で 1-1 である

65
00:05:27,980 --> 00:05:33,320
3 まで数えることは、最後のビットを反転し、2 にロールオーバーしてから、最後のビットを反転することを意味します。

66
00:05:33,320 --> 00:05:40,000
より大きなスケールでは、15 までカウントする (1-1-1-1) ようなプロセスでは、最後の 3 を

67
00:05:40,000 --> 00:05:47,260
7 までカウントし、8 の位にロールオーバーして、最後の 3 ビットを再びカウントアップします。 。

68
00:05:47,260 --> 00:05:53,040
8 個の連続する 1 である

69
00:05:53,040 --> 00:05:57,420
255 までカウントすると、最後の 7 ビットがいっぱいになるまでカウントアップし、128

70
00:05:57,420 --> 00:06:00,080
の位にロールオーバーしてから、最後の 7 ビットを再びカウントアップするように見えます。

71
00:06:01,080 --> 00:06:05,680
さて、そのミニ紹介はこのくらいにして、キースが私に見せてくれた驚くべき事実は、このリズムを使ってハノイの塔を解くことができるということです。

72
00:06:05,680 --> 00:06:10,440


73
00:06:10,440 --> 00:06:12,720
0から数え始めます。

74
00:06:12,720 --> 00:06:18,640
最後のビットだけを 0 から 1 に反転するときは、ディスク

75
00:06:18,640 --> 00:06:22,420
0 を 1 ペグ右に移動します。

76
00:06:22,420 --> 00:06:29,140
すでに右端のペグにある場合は、最初のペグにループバックするだけです。

77
00:06:29,200 --> 00:06:35,700
2 の位に 1 回ロールオーバーすると、つまり最後の

78
00:06:35,700 --> 00:06:37,740
2 ビットを反転すると、ディスク 1 が移動します。

79
00:06:37,740 --> 00:06:39,740
どこに移動するのかと疑問に思うかもしれません。

80
00:06:39,740 --> 00:06:43,220
選択肢はありません。ディスク 0 の上に置くことはできません。ペグは他に

81
00:06:43,220 --> 00:06:47,100
1 つしかないため、移動せざるを得ない場所に移動します。

82
00:06:47,100 --> 00:06:51,220
この後、1-1 までカウントアップしますが、これは最後のビットを反転するだけなので、ディスク

83
00:06:51,220 --> 00:06:52,900
0 を再度移動します。

84
00:06:52,900 --> 00:06:59,620
次に、バイナリ カウンティングが 4 の位まで

85
00:06:59,620 --> 00:07:01,440
2 回ロールオーバーしたら、ディスク 2 を移動します。すると、パターンは次のように続きます。

86
00:07:01,440 --> 00:07:03,460
最後を反転し、ディスク 0 を移動します。

87
00:07:03,460 --> 00:07:05,900
最後の 2 つを裏返し、ディスク 1 を移動します。

88
00:07:05,900 --> 00:07:08,080
最後を反転し、ディスク 0 を移動します。

89
00:07:08,080 --> 00:07:12,420
ここでは、8 の位まで 3

90
00:07:12,420 --> 00:07:14,100
回ロールオーバーする必要があります。これは、ディスク 3 を移動することに相当します。

91
00:07:14,100 --> 00:07:18,180
これには何か魔法のようなものがあって、初めてこれを見たとき、これはうまくいかない、と思った。

92
00:07:18,180 --> 00:07:19,180


93
00:07:19,180 --> 00:07:22,500
これがどのように機能するのかわかりません、なぜこれが機能するのかもわかりません、今ならわかりますが、これを見ると魔法のようです。私がこれを教えていたとき、これ用のアニメーションをまとめたのを覚えています。ほら、私はこれがどのように機能するのか知っていますし、その中のすべてのことを知っていますが、ただ座って、それが展開されるのをただ見ているだけでもまだ楽しいです。

94
00:07:22,500 --> 00:07:28,100


95
00:07:28,100 --> 00:07:32,540


96
00:07:32,540 --> 00:07:36,260


97
00:07:36,260 --> 00:07:37,260
そうそう。

98
00:07:37,260 --> 00:07:41,800
つまり、これが常に合法的な動きをもたらすかどうかは、最初は明らかではありません。

99
00:07:41,800 --> 00:07:45,980
たとえば、8 の位にロールオーバーするたびに、ディスク

100
00:07:45,980 --> 00:07:49,820
3 が必然的に解放されて移動できることをどうやって知ることができるでしょうか。

101
00:07:49,820 --> 00:07:53,900
同時に、このソリューションでは、これはどこから来たのか、なぜこれが機能するのか、2 から

102
00:07:53,900 --> 00:07:58,300
n マイナス

103
00:07:58,300 --> 00:08:00,560
1 のステップを実行するよりも優れた方法はあるのか、といった疑問がすぐに生じます。

104
00:08:00,560 --> 00:08:05,140
これはハノイの塔を解決するだけでなく、可能な限り最も効率的な方法で解決することが判明しました。

105
00:08:05,140 --> 00:08:07,180


106
00:08:07,180 --> 00:08:10,680
これがなぜ機能するのか、どのように機能するのか、そして一体何が起こっているのかを理解するには、パズルに対する特定の視点、CS

107
00:08:10,680 --> 00:08:16,860
の人々が再帰的視点と呼ぶものにかかっています。

108
00:08:16,900 --> 00:08:21,420
ディスク 3

109
00:08:21,420 --> 00:08:25,020
は、分かった、2、1、0 と考えています。まるで私から降りなければならないかのように、私はこれほどの重さとプレッシャーの下では本当に機能できないかのように考えています。

110
00:08:25,020 --> 00:08:28,660
ディスク 3 の観点から見ると、ディスク 3 がどのようにしてここに到達するのか知りたければ、どういうわけか、方法は関係ありませんが、ディスク

111
00:08:28,660 --> 00:08:33,900
2、1、および 0 はスピンドル B に到達する必要があります。

112
00:08:33,900 --> 00:08:36,020
それがそれが動くことができる唯一の方法です。

113
00:08:36,020 --> 00:08:38,060
これらのディスクのいずれかが 3 枚の上にある場合、そのディスクは移動できません。

114
00:08:38,060 --> 00:08:41,000
それらのいずれかがスピンドル C にある場合、そこには移動できません。

115
00:08:41,000 --> 00:08:43,940
したがって、何らかの方法で 2、1、0 を取り除く必要があります。

116
00:08:43,980 --> 00:08:48,180
それが完了したら、ディスク 3 をそこに移動できます。

117
00:08:48,180 --> 00:08:50,020
そしてディスク 3 では、「準備完了」と表示されます。

118
00:08:50,020 --> 00:08:51,940
二度と私を動かす必要はありません。

119
00:08:51,940 --> 00:08:54,340
他の人は、ここに行く方法を考えているだけです。

120
00:08:54,340 --> 00:08:57,540
ある意味、同じ問題の小規模バージョンが手に入ったことになります。

121
00:08:57,540 --> 00:09:02,380
ディスク 0、1、2 がスピンドル B に配置されているので、それらを C に移動する必要があります。 つまり、1

122
00:09:02,380 --> 00:09:06,180
つのディスクに焦点を当てて、このディスクを動作させるには何をしなければならないかを考えれば、より大きな問題を少し小さな問題に変えることができるということです。

123
00:09:06,180 --> 00:09:10,680


124
00:09:10,680 --> 00:09:12,020
そして、どうすればそれを解決できるのでしょうか？

125
00:09:12,020 --> 00:09:13,520
まあ、まったく同じことです。

126
00:09:13,600 --> 00:09:17,160
ディスク 2 がディスク 1 とディスク 0 と言ったら、それはあなたではなく、私です。

127
00:09:17,160 --> 00:09:18,160
ただスペースが必要なんです。

128
00:09:18,160 --> 00:09:19,160
降りる。

129
00:09:19,160 --> 00:09:20,520
彼らはどこかに移動する必要があります。

130
00:09:20,520 --> 00:09:23,040
その後、ディスク 2 は必要な場所に移動できます。

131
00:09:23,040 --> 00:09:25,120
その後、ディスク 1 と 0 でこれを行うことができます。

132
00:09:25,120 --> 00:09:31,040
しかし、興味深い点は、すべてのディスクがほぼ同じ戦略を持っているということです。

133
00:09:31,040 --> 00:09:33,220
彼らは皆、「私の上の人は全員降りろ」と言います。

134
00:09:33,220 --> 00:09:34,220
それでは、移動します。

135
00:09:34,220 --> 00:09:36,560
さて、みんなまた積み上げてください。

136
00:09:36,560 --> 00:09:40,600
その洞察がわかれば、5 ～

137
00:09:40,600 --> 00:09:46,720
6

138
00:09:46,720 --> 00:09:50,680
行のコードなど、ハノイの塔を解決するようなコードを作成できます。これは、コード行に対する知的投資の比率がおそらくこれまでで最も高いものです。

139
00:09:50,680 --> 00:09:55,800
少し考えてみれば、これが最も効率的な解決策であることが明らかになります。

140
00:09:55,800 --> 00:09:56,800


141
00:09:56,800 --> 00:10:00,060
あらゆる段階で、あなたは自分に押し付けられたことをやっているだけです。

142
00:10:00,060 --> 00:10:04,440
ディスク 3 を移動する前に、ディスク 0 ～ 2 を外す必要があります。

143
00:10:04,440 --> 00:10:06,520
そしてディスク 3 を移動する必要があります。

144
00:10:06,520 --> 00:10:09,680
次に、ディスク 0 から 2 をその上に戻す必要があります。

145
00:10:09,760 --> 00:10:15,400
この観点から見ると、非効率が許される余地はありません。

146
00:10:15,400 --> 00:10:18,920
では、なぜバイナリでのカウントがこのアルゴリズムを捉えるのでしょうか?

147
00:10:18,920 --> 00:10:23,480
さて、ここで何が起こっているのかというと、部分問題を解決し、大きな円盤を移動し、その後、再度部分問題を解決するというこのパターンが、二進数カウントのパターンと完全に類似しているということです。

148
00:10:23,480 --> 00:10:28,480


149
00:10:28,480 --> 00:10:30,160


150
00:10:30,160 --> 00:10:35,280
ある程度の量を数えて、ロールオーバーし、再び同じ量まで数えます。

151
00:10:35,360 --> 00:10:40,520
そして、このハノイの塔のアルゴリズムとバイナリ カウンティングは、ズームアウトして

152
00:10:40,520 --> 00:10:44,980
2 のより大きな累乗まで数えたり、より多くのディスクを使用してハノイの塔を解いたりしても、両方とも同じ構造を持っているという意味で、どちらも自己類似のプロセスです。

153
00:10:44,980 --> 00:10:48,920
。

154
00:10:48,920 --> 00:10:52,700
サブ問題、何かをしてください、サブ問題。

155
00:10:52,700 --> 00:10:57,820
たとえば、非常に小規模なスケールでは、2 つのディスク、ムーブ ディスク 0、ムーブ ディスク 1、ムーブ

156
00:10:57,820 --> 00:11:03,720
ディスク 0 のハノイの塔を解くと、バイナリで 3 までカウントすることによって反映されます。

157
00:11:03,840 --> 00:11:07,560
最後のビットを反転し、一度ロールオーバーして、最後のビットを反転します。

158
00:11:07,560 --> 00:11:12,360
もう少し大きなスケールで、3 つのディスクについてハノイの塔を解くことは、2 つのディスクを解決するために必要なことをすべて実行し、ディスク番号

159
00:11:12,360 --> 00:11:17,120
2 を移動し、その後再び

160
00:11:17,120 --> 00:11:19,080
2 つのディスクを解決するために必要なことをすべて実行するように見えます。

161
00:11:19,080 --> 00:11:24,960
同様に、2 進数で 111 までカウントするには、3

162
00:11:24,960 --> 00:11:28,000
までカウントし、3 ビットすべてをロールオーバーして、さらに 3 つカウントアップする必要があります。

163
00:11:28,000 --> 00:11:32,060
どの規模においても、両方のプロセスでこれと同じ内訳が発生します。

164
00:11:32,100 --> 00:11:35,620
ある意味、このバイナリ

165
00:11:35,620 --> 00:11:40,820
ソリューションが機能する理由、または少なくとも説明はありませんが、最も自然な説明は、これらの

166
00:11:40,820 --> 00:11:44,440
2

167
00:11:44,440 --> 00:11:49,560
進数を生成するために使用するパターンがまったく同じであるということだと思います。この構造は、ハノイの塔に使用されるパターンと同じです。そのため、ビットの反転を見ると、事実上、このプロセスを逆にしていることになります。

168
00:11:49,560 --> 00:11:51,860


169
00:11:51,860 --> 00:11:54,200
どのようなプロセスでこれらが生成されたのか、ということですね。

170
00:11:54,200 --> 00:12:00,460
これを得るためにこれらのビットがどのように反転されたかを理解しようとしているのと同じように、ハノイの塔の再帰アルゴリズムを事実上逆にしているので、それがうまくいくのです。

171
00:12:00,460 --> 00:12:06,180


172
00:12:07,860 --> 00:12:09,620
それはとてもクールですよね？

173
00:12:09,620 --> 00:12:10,940
でも実際はもっと涼しくなるんです。

174
00:12:10,940 --> 00:12:14,460
これがシェルピンスキーの三角形とどのように関係するのかさえ分かりません。

175
00:12:14,460 --> 00:12:19,140
そして、それはまさに私が次のビデオのパート 2 でやろうとしていることです。

176
00:12:19,140 --> 00:12:22,620
Patreon でこれらのビデオをサポートしてくださっている皆様に感謝します。

177
00:12:22,620 --> 00:12:26,380
『Essence of Calculus』の第

178
00:12:26,380 --> 00:12:30,840
1 章を終えたばかりで、現在第 2

179
00:12:30,840 --> 00:12:34,780
章に取り組んでいます。数か月以内に全シリーズを公開する前に、Patreon サポーターはこれらのビデオに早期アクセスできるようになりました。

180
00:12:34,780 --> 00:12:39,260
このビデオと次のビデオも

181
00:12:39,260 --> 00:12:43,020
Desmos

182
00:12:43,020 --> 00:12:44,780
によって部分的にサポートされています。次のビデオの前に、少し時間をとって、彼らが誰であるか、そして彼らが雇用しているという事実について少し皆さんと共有したいと思います。

183
00:12:44,780 --> 00:12:47,020
デスモスは本当にクールです。

184
00:12:47,020 --> 00:12:51,680
彼らは、このようなインタラクティブな数学アクティビティを教室や教師用のツールとして多く作成しています。

185
00:12:51,680 --> 00:12:56,060
彼らの真骨頂は教室活動にあります。

186
00:12:56,060 --> 00:13:00,380
私としては、これらの活動が教育的な観点から非常によく考えられていることに非常に感銘を受けています。

187
00:13:00,380 --> 00:13:02,540


188
00:13:02,540 --> 00:13:06,000
チームは自分たちのことを明確に理解しており、生徒と教師の生活に変化をもたらすために自分たちがどのような立場にあるのかを理解しています。

189
00:13:06,000 --> 00:13:08,180


190
00:13:08,180 --> 00:13:10,140
そして、先ほども言ったように、彼らは雇用を行っています。

191
00:13:10,140 --> 00:13:14,780
彼らは常に、エンジニアリング人材、デザイナー、教師、または自分たちがやりたいことに一致するその他のスキルセットであるかどうか、より優れた人材を迎え入れようとしています。

192
00:13:14,780 --> 00:13:19,600


193
00:13:19,600 --> 00:13:22,920
皆さんの中に、彼らに参加して、教師や生徒向けの優れたツールの作成を支援することに興味がある人がいる場合は、説明でリンクした採用ページをチェックしてください。

194
00:13:22,920 --> 00:13:26,720


195
00:13:26,720 --> 00:13:27,720


196
00:13:27,720 --> 00:13:30,480
個人的には、彼らは本当に意味のあることをしていると思います。

197
00:13:30,480 --> 00:13:35,080
彼らの活動は、生徒たちに真に優れた数学的直観を構築していると思います。そして世界は、彼らと同じように教育に向けた努力を向ける才能のある人材をもっと活用できるかもしれません。

198
00:13:35,080 --> 00:13:39,060


199
00:13:39,060 --> 00:13:40,520


200
00:13:40,520 --> 00:13:44,640
さて、それでは次のビデオでお会いしましょう。この先の展開はきっと気に入っていただけると思います。

201
00:13:44,640 --> 00:13:45,720


