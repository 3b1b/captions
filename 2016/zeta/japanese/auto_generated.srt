1
00:00:00,000 --> 00:00:12,000
リーマンのゼータ関数。これは、多くの人が聞いたことがあるかもしれない現代数学のオブジェクトの 1 つですが、理解するのが非常に難しい場合があります。

2
00:00:12,000 --> 00:00:16,000
心配しないでください。先ほど見たアニメーションについては数分後に説明します。

3
00:00:16,000 --> 00:00:26,000
この関数については多くの人が知っています。リーマン予想として知られる未解決の問題、いつゼロに等しくなるかを理解できた人には 100 万ドルの賞金が与えられるからです。

4
00:00:26,000 --> 00:00:33,000
1 プラス 2 プラス 3 プラス 4 が無限に続く発散和の文脈でこのことを聞いたことがある人もいるかもしれません。

5
00:00:33,000 --> 00:00:41,000
この合計がマイナス 1/12 に等しいという感覚がありますが、これは明らかに間違っているわけではないにしても、ナンセンスに思えます。

6
00:00:41,000 --> 00:00:47,000
しかし、この方程式が実際に何を言っているかを定義する一般的な方法では、リーマン ゼータ関数が使用されます。

7
00:00:47,000 --> 00:00:58,000
しかし、これを読み始めたカジュアルな数学愛好家なら誰でも知っているように、その定義は、複素数値関数に関係する解析継続と呼ばれるこの 1 つのアイデアを参照しています。

8
00:00:58,000 --> 00:01:01,000
そして、このアイデアはイライラするほど不透明で直感的ではない場合があります。

9
00:01:01,000 --> 00:01:12,000
ここで私がやりたいことは、このゼータ関数が実際にどのようなものかを皆さんにお見せし、この解析的継続の考え方がどのようなものかを視覚的かつより直観的な方法で説明することです。

10
00:01:13,000 --> 00:01:18,000
複素数についての知識があり、複素数を扱うことに慣れていることを前提としています。

11
00:01:18,000 --> 00:01:28,000
解析の継続はすべて導関数に関するものなので、微積分を知っておくべきだと言いたくなりますが、私が計画しているものを提示する方法を考えると、実際には微積分を知らなくても大丈夫だと思います。

12
00:01:28,000 --> 00:01:33,000
それでは早速本題に入るために、このゼータ関数が何であるかを定義しましょう。

13
00:01:33,000 --> 00:01:49,000
一般に変数 s を使用する特定の入力の場合、関数は s に対して 1 に対して 1 (常に 1)、s に対して 2 に対して 1 を加え、s に対して 3 に対して 1 を加え、s に対して 4 に対して 1 を加えます。 s を何度も繰り返し、すべての自然数を合計します。

14
00:01:51,000 --> 00:01:54,000
たとえば、s = 2 のような値を入力するとします。

15
00:01:55,000 --> 00:02:09,000
1 プラス 1 オーバー 4 プラス 1 オーバー 9 プラス 1 16 分の 1 が得られ、平方の逆数をどんどん足し続けると、これはたまたま 6 の円周率 2 乗、つまり約 1 に近づきます。645。

16
00:02:09,000 --> 00:02:18,000
ここに pi が表示される理由には非常に美しい理由があり、後日ビデオを作成するかもしれませんが、それはこの関数が美しい理由の氷山の一角にすぎません。

17
00:02:18,000 --> 00:02:24,000
他の入力 (3 や 4 など) に対しても同じことを行うと、他の興味深い値が得られる場合があります。

18
00:02:24,000 --> 00:02:31,000
そして、これまでのところ、すべてがかなり合理的だと感じています。どんどん小さな金額を合計していき、その合計はある数値に近づきます。

19
00:02:31,000 --> 00:02:33,000
素晴らしい、ここには狂気はありません。

20
00:02:34,000 --> 00:02:40,000
しかし、これについて読んでみると、マイナス 1 のゼータはマイナス 1 の 12 分の 1 に等しい、と言う人もいるかもしれません。

21
00:02:41,000 --> 00:02:44,000
しかし、この無限和を見ると、それは何の意味もありません。

22
00:02:45,000 --> 00:02:55,000
各項をマイナスの 1 に上げ、各分数を反転すると、すべての自然数にわたって 1 プラス 2 プラス 3 プラス 4 が繰り返し得られます。

23
00:02:55,000 --> 00:03:00,000
そして明らかに、それは何にも近づきません、確かにマイナス1/12ではありませんよね？

24
00:03:01,000 --> 00:03:09,000
そして、リーマン予想を研究している傭兵なら誰でも知っているように、この関数は負の偶数に自明なゼロを持つと言われています。

25
00:03:09,000 --> 00:03:13,000
したがって、たとえば、マイナス 2 のゼータは 0 に等しいことを意味します。

26
00:03:13,000 --> 00:03:24,000
しかし、マイナス 2 を代入すると、1 プラス 4 プラス 9 プラス 16 が延々と続きます。これも明らかに何にも近づきません。ましてや 0 には近づきませんよね。

27
00:03:25,000 --> 00:03:31,000
そうですね、数分以内に負の値になりますが、今のところ、合理的だと思われることだけを言っておきましょう。

28
00:03:31,000 --> 00:03:36,000
この関数は、s が 1 より大きい場合、つまりこの合計が収束する場合にのみ意味を持ちます。

29
00:03:36,000 --> 00:03:40,000
これまでのところ、他の値については定義されていません。

30
00:03:41,000 --> 00:03:50,000
さて、そうは言っても、バーナード・リーマンは、入力と出力として複素数を持つ関数の研究である複素解析の父のようなものです。

31
00:03:50,000 --> 00:03:57,000
したがって、この合計が実数直線上の数値 s を実数直線上の別の数値にどのように変換するかを考

32
00:03:58,000 --> 00:04:03,000
えることよりも、彼の主な焦点は、s に複素数値を代入すると何が起こるかを理解することでした。

33
00:04:04,000 --> 00:04:09,000
たとえば、2 を接続する代わりに、2 と i を接続するとよいでしょう。

34
00:04:10,000 --> 00:04:16,000
さて、数値を複素数値で累乗するという考え方を見たことがなければ、最初は奇妙に感

35
00:04:16,000 --> 00:04:20,000
じるかもしれません。なぜなら、それは繰り返しの乗算とは何の関係もないからです。

36
00:04:20,000 --> 00:04:26,000
しかし数学者たちは、指数の定義を実数という馴染みのある領域を超えて複素数値

37
00:04:26,000 --> 00:04:31,000
の領域に拡張する、非常に優れた、非常に自然な方法があることを発見しました。

38
00:04:33,000 --> 00:04:37,000
このビデオの目的において、複雑な指数を理解することはそれほど重要で

39
00:04:37,000 --> 00:04:41,000
はありませんが、ここでは要点だけを要約しておくと良いと思います。

40
00:04:41,000 --> 00:04:46,000
基本的な考え方は、1/2 の複素数乗のようなものを書くとき、それを実

41
00:04:46,000 --> 00:04:51,000
数部の 1/2 と純粋な虚数部の 1/2 に分割するということです。

42
00:04:52,000 --> 00:04:55,000
本番までの半分は順調に進んでおり、問題はありません。

43
00:04:55,000 --> 00:04:59,000
しかし、何かを純粋な虚数に引き上げる場合はどうでしょうか?

44
00:05:00,000 --> 00:05:06,000
そうですね、結果は複素平面の単位円上の複素数になります。

45
00:05:06,000 --> 00:05:11,000
純粋な想像上の入力を想像上の線の上を上下に移動させると

46
00:05:11,000 --> 00:05:15,000
、結果として得られる出力はその単位円の周りを歩きます。

47
00:05:19,000 --> 00:05:24,000
1/2 のようなベースの場合、出力は単位円の周囲をややゆっくりと歩き回ります。

48
00:05:24,000 --> 00:05:28,000
しかし、1 9 分の 1 など、1 から離れた基数の場

49
00:05:28,000 --> 00:05:32,000
合、この入力を虚数軸上で上下に移動させると、対応する

50
00:05:32,000 --> 00:05:36,000
出力は単位円の周囲をより速く移動することになります。

51
00:05:36,000 --> 00:05:39,000
これを見たことがなく、一体なぜこのようなことが起こるのか疑問に思ってい

52
00:05:39,000 --> 00:05:42,000
る方のために、説明の中に優れたリソースへのリンクをいくつか残しました。

53
00:05:42,000 --> 00:05:46,000
ここでは、「Why」を使わずに「What」だけを進めていきます。

54
00:05:46,000 --> 00:05:51,000
主なポイントは、1 の半分の 2 乗に i を加えたも

55
00:05:51,000 --> 00:05:54,000
の (1 の 2 乗の 1 の 2 乗に i の 1

56
00:05:54,000 --> 00:05:58,000
の半分を乗じたもの) の場合、その i の 1 の

57
00:05:58,000 --> 00:06:01,000
半分が単位円上にあることです。の絶対値は 1 です。

58
00:06:02,000 --> 00:06:06,000
したがって、乗算しても数値のサイズは変わりません

59
00:06:06,000 --> 00:06:09,000
。4 分の 1 を取り、多少回転させるだけです。

60
00:06:12,000 --> 00:06:16,000
したがって、2 プラス i をゼータ関数に接続する場合、それが何をするか

61
00:06:16,000 --> 00:06:20,000
を考える 1 つの方法は、1 の半分を i の部分に取り込み、それが何

62
00:06:20,000 --> 00:06:24,000
をするかを考えることです。それは、提起されたすべての項から始めることです

63
00:06:24,000 --> 00:06:30,000
。これは、長さが数値の 2 乗の逆数である線をつなぎ合わせたものと考え

64
00:06:30,000 --> 00:06:34,000
ることができ、前に述べたように、6 の pi の 2 乗に収束します。

65
00:06:34,000 --> 00:06:38,000
次に、その入力を 2 から 2 プラス i に変

66
00:06:38,000 --> 00:06:41,000
更すると、これらの各線はある程度回転されます。

67
00:06:41,000 --> 00:06:44,000
しかし重要なのは、これらの線の長さは変わ

68
00:06:44,000 --> 00:06:46,000
らないため、合計は依然として収束します。

69
00:06:46,000 --> 00:06:50,000
それは、複素平面上の特定の点に向かって螺旋状に行われるだけです。

70
00:06:51,000 --> 00:06:54,000
ここで、複素平面上のこの黄色の点で表される、入力 s

71
00:06:54,000 --> 00:06:57,000
を変化させたときにどのようになるかを示します。この

72
00:06:57,000 --> 00:07:02,000
スパイラル和は常に s のゼータの収束値を示します。

73
00:07:02,000 --> 00:07:17,000
これが意味するのは、この無限和として定義される s のゼータは、入力の実

74
00:07:17,000 --> 00:07:23,000
部が 1 より大きい限り、完全に合理的な複素関数であるということです。つ

75
00:07:23,000 --> 00:07:28,000
まり、入力 s が複素平面の右半分のどこかに位置することを意味します。

76
00:07:28,000 --> 00:07:33,000
繰り返しますが、これは、各数値のサイズを決定するのは s

77
00:07:33,000 --> 00:07:36,000
の実数部であり、虚数部は回転を指示するだけであるためです。

78
00:07:39,000 --> 00:07:42,000
ここで私がやりたいのは、この関数を視覚化することです。

79
00:07:42,000 --> 00:07:45,000
複素平面の右半分で入力を受け取り、複素

80
00:07:45,000 --> 00:07:49,000
平面の別の場所に出力を吐き出します。

81
00:07:49,000 --> 00:07:54,000
複雑な関数を理解する非常に優れた方法は、関数を変

82
00:07:55,000 --> 00:07:58,000
換として視覚化することです。つまり、関数へのあら

83
00:07:58,000 --> 00:08:01,000
ゆる入力を調べて、対応する出力に移すだけです。

84
00:08:02,000 --> 00:08:06,000
たとえば、少し時間をとって、ゼータ関数よりももう少し簡単なものを視覚化し

85
00:08:06,000 --> 00:08:09,000
てみましょう。たとえば、s の f が s の 2 乗に等しいとします。

86
00:08:09,000 --> 00:08:12,000
s = 2 を代入すると 4 が得られるため、

87
00:08:12,000 --> 00:08:16,000
最終的に 2 の点を 4 の点に移動します。

88
00:08:16,000 --> 00:08:19,000
マイナス 1 を入力すると 1 が得られるため、マ

89
00:08:19,000 --> 00:08:24,000
イナス 1 の点は最終的に 1 の点に移動します。

90
00:08:24,000 --> 00:08:28,000
i を入力すると、定義上、その 2 乗はマイナス

91
00:08:28,000 --> 00:08:31,000
1 なので、ここではマイナス 1 に移動します。

92
00:08:32,000 --> 00:08:34,000
ここで、さらにカラフルなグリッドを追加します。これは

93
00:08:34,000 --> 00:08:36,000
、ちょうど物事が動き始めているためであり、その動き

94
00:08:36,000 --> 00:08:40,000
の中でグリッド線を区別できる何かがあると便利です。

95
00:08:40,000 --> 00:08:44,000
ここから、s が s の 2 乗に等しい関数 f に基づいて、このグリッド

96
00:08:44,000 --> 00:08:49,000
上のすべての点を対応する出力に移動するようにコンピューターに指示します。

97
00:08:49,000 --> 00:08:51,000
外観は次のとおりです。

98
00:08:55,000 --> 00:08:58,000
それは理解することがたくさんあるかもしれないので、先に進んでもう一度プレイしてみます。

99
00:08:58,000 --> 00:09:01,000
そして今回は、マークされた点の 1 つに焦点を当て、それがその

100
00:09:01,000 --> 00:09:05,000
正方形に対応する点にどのように移動するかに注目してください。

101
00:09:07,000 --> 00:09:10,000
すべての点が一度に移動するのを見るのは少し複雑かもしれませんが、こ

102
00:09:10,000 --> 00:09:16,000
れにより、複雑な関数が実際に何を行っているかについて非常に豊富な

103
00:09:16,000 --> 00:09:18,000
図が得られ、すべてが 2 次元内で行われるという利点があります。

104
00:09:20,000 --> 00:09:22,000
ゼータ関数に戻りましょう。

105
00:09:22,000 --> 00:09:26,000
複素数 s の関数であるこの無限和があり、実部が 1

106
00:09:26,000 --> 00:09:31,000
より大きい s の値を代入し、収束するスパイラル和を介

107
00:09:31,000 --> 00:09:35,000
して意味のある出力を得ることができて満足しています。

108
00:09:35,000 --> 00:09:37,000
この関数を視覚化するために、ここで複素平面の右側にあ

109
00:09:37,000 --> 00:09:41,000
るグリッドの部分 (数値の実部が 1 より大きい部分

110
00:09:41,000 --> 00:09:44,000
) を取得し、コンピューターに移動するよう指示します

111
00:09:44,000 --> 00:09:49,000
。このグリッドの各ポイントを適切な出力に接続します。

112
00:09:49,000 --> 00:09:52,000
実際には、数字の 1 の周りにさらにグリッド線を追加する

113
00:09:52,000 --> 00:09:55,000
と、その領域がかなり引き伸ばされるため、役に立ちます。

114
00:09:59,000 --> 00:10:03,000
さて、それではまず、それがどれほど美しいかをみんなで鑑賞しましょう。

115
00:10:03,000 --> 00:10:09,000
つまり、くそー、複雑な関数についてもっと学びたいと思わないのなら、あなたには心がないということです。

116
00:10:11,000 --> 00:10:16,000
しかしまた、この変換されたグリッドは、少し拡張されることを望んでいます。

117
00:10:17,000 --> 00:10:19,000
たとえば、ここでは虚数部 i または負の i を持つす

118
00:10:19,000 --> 00:10:25,000
べての複素数を表すこれらの行を強調表示してみましょう。

119
00:10:27,000 --> 00:10:32,000
変身後はこの線がとても綺麗な弧を描きながらピタッと止まります。

120
00:10:32,000 --> 00:10:36,000
このままこの弧を続けたくないですか?

121
00:10:36,000 --> 00:10:40,000
実際、平面の左半分にまで拡張された定義を備えた関数の変

122
00:10:40,000 --> 00:10:44,000
更バージョンを使用すると、この図を非常に美しいもので完

123
00:10:44,000 --> 00:10:47,000
成させることができるかもしれないことが想像できます。

124
00:10:48,000 --> 00:10:52,000
そうですね、これはまさに複雑な関数を扱う数学者が行うことです。

125
00:10:52,000 --> 00:10:57,000
これらは、定義された元のドメインを超えて機能を継続します。

126
00:10:58,000 --> 00:11:02,000
ここで、実数部が 1 未満の入力に分岐するとすぐに、最初に関

127
00:11:02,000 --> 00:11:07,000
数を定義するために使用したこの無限の合計は意味を失います。

128
00:11:07,000 --> 00:11:11,000
1 プラス 2 プラス 3 プラス 4 を無限大まで加算するようなナンセンスな結果が得られます。

129
00:11:12,000 --> 00:11:15,000
しかし、この平面の右半分の変換されたバージョンを見ると、合計が意味

130
00:11:15,000 --> 00:11:17,000
を成しており、たとえそれが何らかの拡張関数を定義することを意味す

131
00:11:17,000 --> 00:11:22,000
るとしても、入力として考慮している点のセットを拡張するよう求めら

132
00:11:22,000 --> 00:11:28,000
れているだけです。必ずしもその合計を使用するわけではありません。

133
00:11:29,000 --> 00:11:31,000
もちろん、飛行機の残りの部分でその機能をど

134
00:11:31,000 --> 00:11:34,000
のように定義するかという疑問が残ります。

135
00:11:35,000 --> 00:11:38,000
いくらでも拡張できると思うかもしれません。

136
00:11:38,000 --> 00:11:45,000
おそらく、s がマイナス 1 に等しい点が 12 番目のマイナス 1 に移動するように拡張を定義するとします。

137
00:11:48,000 --> 00:11:51,000
ただし、拡張子を波線にして、他の値に到達する可能性があります。

138
00:11:52,000 --> 00:11:56,000
つまり、収束領域外の値、つまり無限和に基づいていない

139
00:11:56,000 --> 00:11:59,000
値に対して関数を別の方法で定義するというアイデアに心

140
00:11:59,000 --> 00:12:02,000
を開くとすぐに、世界はあなたの好みに合わせて拡張でき

141
00:12:02,000 --> 00:12:06,000
、拡張はいくらでもできるようになります。 、 右？

142
00:12:07,000 --> 00:12:09,000
そうですね、正確にはそうではありません。

143
00:12:09,000 --> 00:12:14,000
つまり、はい、どの子にもマーカーを与えて、これらの線をどの方向にでも拡張させ

144
00:12:14,000 --> 00:12:20,000
ることができますが、この新しい拡張関数がどこにでも導関数を持たなければならな

145
00:12:20,000 --> 00:12:24,000
いという制限を追加すると、可能なのは 1 つだけになってしまいます。拡大。

146
00:12:25,000 --> 00:12:29,000
わかっています、わかっています、このビデオでは導関数について知る必要はないと言いましたが、たとえ

147
00:12:29,000 --> 00:12:34,000
微積分を知っていたとしても、複素関数の導関数を解釈する方法をまだ学習していない可能性があります。

148
00:12:35,000 --> 00:12:39,000
しかし、私たちにとって幸運なことに、私が次のようなフレーズを言うときに覚えて

149
00:12:39,000 --> 00:12:42,000
おくことができる非常に優れた幾何学的直観があり、どこにでも派生があります。

150
00:12:43,000 --> 00:12:47,000
ここで、私が言いたいことを示すために、s の f が s の 2 乗に等しいという例を振り返ってみましょう。

151
00:12:47,000 --> 00:12:50,000
繰り返しますが、この関数は、複素平面のすべての点 s

152
00:12:50,000 --> 00:12:55,000
を点 s の二乗に移動する変換として考えられます。

153
00:12:56,000 --> 00:13:01,000
微積分を知っている人は、任意の入力でこの関数の導関数を取得

154
00:13:01,000 --> 00:13:04,000
できることを知っていますが、その変換には、その事実に関連

155
00:13:04,000 --> 00:13:07,000
し、ほぼ同等であることが判明する興味深い特性があります。

156
00:13:08,000 --> 00:13:12,000
入力空間内で何らかの角度で交差する 2 本の線に注

157
00:13:12,000 --> 00:13:16,000
目し、変換後にそれらがどのようになるかを考慮すると

158
00:13:16,000 --> 00:13:19,000
、それらの線は同じ角度で交差したままになります。

159
00:13:20,000 --> 00:13:23,000
線が曲がるかもしれませんが、それは問題ありませんが、重

160
00:13:23,000 --> 00:13:27,000
要なのは、線が交わる角度は変わらないということです。

161
00:13:28,000 --> 00:13:31,000
これは、選択したどのペアのラインにも当てはまります。

162
00:13:35,000 --> 00:13:37,000
したがって、関数にはどこにでも導関数があると言うとき、この角度保

163
00:13:37,000 --> 00:13:40,000
持の特性について考えてもらいたいのです。つまり、2 本の線が交

164
00:13:40,000 --> 00:13:46,000
差するときはいつでも、それらの間の角度は変換後も変化しません。

165
00:13:47,000 --> 00:13:53,000
これは、グリッド線が変化するすべての曲線が互いに直角に交差

166
00:13:53,000 --> 00:13:56,000
していることに注目すると、一目で理解するのが最も簡単です。

167
00:13:58,000 --> 00:14:02,000
随所に導関数がある複雑な関数は解析的関数と呼ばれるため、この解

168
00:14:02,000 --> 00:14:06,000
析的という用語は角度の保持を意味すると考えることができます。

169
00:14:06,000 --> 00:14:10,000
確かに、ここでは少し嘘をついていますが、ほんの少しだけです。

170
00:14:10,000 --> 00:14:13,000
完全な詳細が必要な方への若干の注意点は、関数の

171
00:14:13,000 --> 00:14:16,000
導関数がゼロである入力では、角度が保持されるの

172
00:14:16,000 --> 00:14:20,000
ではなく、何らかの整数が乗算されることです。

173
00:14:20,000 --> 00:14:23,000
しかし、それらの点は圧倒的に少数であり、分析関数

174
00:14:23,000 --> 00:14:27,000
へのほとんどすべての入力では角度が保持されます。

175
00:14:29,000 --> 00:14:35,000
したがって、私が分析的と言うときに角度の保存を考えるのであれば、それは素晴らしい直観だと思います。

176
00:14:37,000 --> 00:14:43,000
ここで、少し考えてみてください。これは本当に理解して

177
00:14:43,000 --> 00:14:46,000
いただきたい点ですが、これは非常に制限的な特性です。

178
00:14:46,000 --> 00:14:51,000
交差する線のペア間の角度は変更されない必要があります。

179
00:14:51,000 --> 00:14:56,000
それでも、名前が付いているほとんどすべての関数は分析的であることがわかります。

180
00:14:58,000 --> 00:15:03,000
リーマンが現代的な形で確立するのに貢献した複素解析の分野

181
00:15:03,000 --> 00:15:07,000
は、ほぼ完全に解析関数の特性を活用して、数学や科学の他の

182
00:15:07,000 --> 00:15:11,000
分野の結果やパターンを理解することに重点を置いています。

183
00:15:12,000 --> 00:15:19,000
ゼータ関数は、平面の右半分の無限和によって定義され、解析関数です。

184
00:15:19,000 --> 00:15:25,000
グリッド線が変化するこれらすべての曲線が依然として互いに直角に交差していることに注目してください。

185
00:15:26,000 --> 00:15:34,000
したがって、複素関数に関する驚くべき事実は、解析関数

186
00:15:34,000 --> 00:15:37,000
を最初に定義された領域を超えて拡張する場合、たとえば

187
00:15:37,000 --> 00:15:41,000
、このゼータ関数を平面の左半分に拡張する場合、新しい

188
00:15:41,000 --> 00:15:45,000
拡張関数が必要な場合であるということです。まだ分析的

189
00:15:45,000 --> 00:15:48,000
です。つまり、どこでも角度を保持しており、拡張が存在

190
00:15:48,000 --> 00:15:53,000
するとしても、可能な拡張は 1 つだけになります。

191
00:15:53,000 --> 00:15:56,000
これは、無限に連続するジグソーパズルのようなもので、角度を維持するという

192
00:15:56,000 --> 00:16:02,000
要件によって、角度を拡張する方法が 1 つだけの選択肢に固定されます。

193
00:16:04,000 --> 00:16:09,000
ご想像のとおり、分析関数を分析可能な唯一の方法で

194
00:16:09,000 --> 00:16:13,000
拡張するこのプロセスは、分析継続と呼ばれます。

195
00:16:15,000 --> 00:16:18,000
これが完全なリーマン ゼータ関数の定義方法です。

196
00:16:18,000 --> 00:16:22,000
実数部が 1 より大きい、平面の右半分の s の値については

197
00:16:22,000 --> 00:16:25,000
、それらをこの合計に代入して、どこに収束するかを確認します。

198
00:16:25,000 --> 00:16:28,000
そして、これらの各項を複素累乗すると、各項が回転する効果があるた

199
00:16:28,000 --> 00:16:33,000
め、その収束はある種のスパイラルのように見えるかもしれません。

200
00:16:33,000 --> 00:16:39,000
次に、平面の残りの部分については、関数が依然として解析的であるように、つまりすべての単一

201
00:16:39,000 --> 00:16:45,000
点での角度が保持されるように、この定義を拡張する唯一の方法が存在することがわかります。

202
00:16:45,000 --> 00:16:49,000
したがって、定義上、平面の左半分のゼータ関数はその拡張

203
00:16:49,000 --> 00:16:52,000
が何であれ、それが何であるかだけであるとだけ言えます。

204
00:16:52,000 --> 00:16:57,000
そして、可能な分析継続は 1 つだけであるため、これは有効な定義です。

205
00:16:58,000 --> 00:17:01,000
これは非常に暗黙的な定義であることに注意してください。

206
00:17:01,000 --> 00:17:07,000
より抽象的な導出を通じて、このジグソーパズルが存在するはずであることがわかっている、このジグソーパズルの

207
00:17:07,000 --> 00:17:10,000
解決策を使用してくださいとだけ書かれていますが、それを解く方法を正確に指定しているわけではありません。

208
00:17:10,000 --> 00:17:14,000
数学者はこの拡張機能がどのようなものかをかなりよく理解

209
00:17:14,000 --> 00:17:17,000
していますが、その重要な部分は依然として謎のままです。

210
00:17:17,000 --> 00:17:19,000
実際、100万ドルの謎。

211
00:17:19,000 --> 00:17:24,000
実際に少し時間をとって、リーマン予想、100万ドル問題について話しましょう。

212
00:17:24,000 --> 00:17:28,000
この関数がゼロに等しい場所は非常に重要であることがわかります。

213
00:17:28,000 --> 00:17:33,000
つまり、変換後にどの点が原点にマッピングされるかということです。

214
00:17:33,000 --> 00:17:39,000
この拡張機能についてわかっていることの 1 つは、負の偶数はゼロにマップされるということです。

215
00:17:41,000 --> 00:17:44,000
これらは一般に自明ゼロと呼ばれます。

216
00:17:44,000 --> 00:17:47,000
ここでの命名は、最初からまったく明らかではない事

217
00:17:47,000 --> 00:17:50,000
実であっても、よく理解している場合には物事を自明

218
00:17:50,000 --> 00:17:54,000
と呼ぶという数学者の長年の伝統に由来しています。

219
00:17:54,000 --> 00:17:58,000
また、ゼロにマッピングされる残りの点は、クリティカル ストリップと

220
00:17:58,000 --> 00:18:02,000
呼ばれるこの垂直ストリップのどこかに位置することもわかっています。

221
00:18:02,000 --> 00:18:09,000
そして、これらの自明ではないゼロの特定の配置は、素数に関する驚くべき情報をコード化します。

222
00:18:09,000 --> 00:18:13,000
実際、この関数がなぜ素数についてこれほど多くの情報を伝えるのかは非常に興味深いので、それについ

223
00:18:13,000 --> 00:18:19,000
ては後で必ずビデオにしようと思っていますが、現時点では十分に長いので、説明しないままにします。

224
00:18:19,000 --> 00:18:25,000
リーマンは、これらの自明ではないゼロはすべて、実部が 2 分の 1 で

225
00:18:25,000 --> 00:18:29,000
ある数値 s の線上のストリップの中央に位置すると仮説を立てました。

226
00:18:29,000 --> 00:18:31,000
これをクリティカルラインといいます。

227
00:18:31,000 --> 00:18:37,000
それが本当であれば、素数のパターンだけでなく、そこから派生する数

228
00:18:37,000 --> 00:18:40,000
学の他の多くのパターンを驚くほど厳密に把握できるようになります。

229
00:18:40,000 --> 00:18:43,000
さて、これまでゼータ関数がどのようなものであるかを示してきた

230
00:18:43,000 --> 00:18:47,000
とき、画面上のグリッドの部分に対してゼータ関数が何を行うかを

231
00:18:47,000 --> 00:18:50,000
示しただけであり、そのためその複雑さが過小評価されています。

232
00:18:50,000 --> 00:18:54,000
したがって、この重要な線を強調表示して変換を適用した場合

233
00:18:54,000 --> 00:18:57,000
、原点をまったく越えていないように見えるかもしれません。

234
00:18:57,000 --> 00:19:02,000
ただし、そのラインのさらに多くの変形バージョンが次のようになります。

235
00:19:03,000 --> 00:19:07,000
数値のゼロを何度も通過していることに注目してください。

236
00:19:07,000 --> 00:19:12,000
すべての非自明なゼロがこの線上のどこかにあることを証明できれば

237
00:19:12,000 --> 00:19:15,000
、クレイ数学研究所はあなたに 100 万ドルを与え、また、す

238
00:19:15,000 --> 00:19:19,000
でに示されている現代数学の結果を数千とは言わないまでも、数百も

239
00:19:19,000 --> 00:19:23,000
証明することになります。この仮説が真実であることが条件です。

240
00:19:23,000 --> 00:19:30,000
この拡張関数についてわかっているもう 1 つのことは、点のマイナス 1 をマイナス 1 12 にマップしていることです。

241
00:19:31,000 --> 00:19:36,000
これを元の合計に当てはめると、1 プラス 2 プラス 3 プラス 4 を無限

242
00:19:36,000 --> 00:19:39,000
大まで繰り返すと、マイナス 1 12 に等しいと言っているように見えます。

243
00:19:39,000 --> 00:19:42,000
さて、平面の左半分のゼータ関数の定義はこの合計から直接定義されな

244
00:19:42,000 --> 00:19:48,000
いため、これをまだ合計と呼ぶのは不誠実に思われるかもしれません。

245
00:19:48,000 --> 00:19:54,000
代わりに、それは、合計が収束する領域を超えて合計を分析的に継続することによって得られます。

246
00:19:54,000 --> 00:19:58,000
つまり、行の最初の行から始まったジグソーパズルを解くこと

247
00:19:58,000 --> 00:20:02,000
、平面の右半分から始まったジグソーパズルを解くことです。

248
00:20:02,000 --> 00:20:06,000
そうは言っても、この分析継続の独自性、ジグソーパズルの解が 1 つし

249
00:20:06,000 --> 00:20:09,000
かないという事実は、これらの拡張された値と元の合計の間に何らかの本質

250
00:20:09,000 --> 00:20:15,000
的な関係があることを非常に示唆していることを認めなければなりません。

