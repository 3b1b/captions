1
00:00:00,000 --> 00:00:01,923
リーマンのゼータ関数。

2
00:00:01,923 --> 00:00:05,282
これは、多くの人が聞いたことがあるかもしれ

3
00:00:05,282 --> 00:00:08,001
ない現代数学のオブジェクトの 1

4
00:00:08,001 --> 00:00:12,000
つですが、理解するのが非常に難しい場合があります。

5
00:00:12,000 --> 00:00:13,948
心配しないでください。 先ほど見たアニ

6
00:00:13,948 --> 00:00:16,000
メーションについては数分後に説明します。

7
00:00:16,000 --> 00:00:18,619
この関数については多くの人が知っています。

8
00:00:18,619 --> 00:00:21,952
リーマン予想として知られる未解決の問題、いつゼロに等しく

9
00:00:21,952 --> 00:00:23,976
なるかを理解できた人には 100

10
00:00:23,976 --> 00:00:26,000
万ドルの賞金が与えられるからです。

11
00:00:26,000 --> 00:00:28,413
1 プラス 2 プラス 3 プラス 4

12
00:00:28,413 --> 00:00:31,913
が無限に続く発散和の文脈でこのことを聞いたことがある人もい

13
00:00:31,913 --> 00:00:33,000
るかもしれません。

14
00:00:33,000 --> 00:00:35,666
この合計がマイナス 1/12 に等しいという

15
00:00:35,666 --> 00:00:38,333
感覚がありますが、これは明らかに間違っている

16
00:00:38,333 --> 00:00:41,000
わけではないにしても、ナンセンスに思えます。

17
00:00:41,000 --> 00:00:43,943
しかし、この方程式が実際に何を言っているかを定義する

18
00:00:43,943 --> 00:00:47,000
一般的な方法では、リーマン ゼータ関数が使用されます。

19
00:00:47,000 --> 00:00:50,578
しかし、これを読み始めたカジュアルな数学愛好家なら誰で

20
00:00:50,578 --> 00:00:54,156
も知っているように、その定義は、複素数値関数に関係する

21
00:00:54,156 --> 00:00:58,000
解析継続と呼ばれるこの 1 つのアイデアを参照しています。

22
00:00:58,000 --> 00:00:59,500
そして、このアイデアはイライラするほど

23
00:00:59,500 --> 00:01:01,000
不透明で直感的ではない場合があります。

24
00:01:01,000 --> 00:01:04,906
ここで私がやりたいことは、このゼータ関数が実際にどのよう

25
00:01:04,906 --> 00:01:08,813
なものかを皆さんにお見せし、この解析的継続の考え方がどの

26
00:01:08,813 --> 00:01:13,000
ようなものかを視覚的かつより直観的な方法で説明することです。

27
00:01:13,000 --> 00:01:15,500
複素数についての知識があり、複素数を扱う

28
00:01:15,500 --> 00:01:18,000
ことに慣れていることを前提としています。

29
00:01:18,000 --> 00:01:20,500
解析の継続はすべて導関数に関するものなので、微

30
00:01:20,500 --> 00:01:23,000
積分を知っておくべきだと言いたくなりますが、私

31
00:01:23,000 --> 00:01:25,500
が計画しているものを提示する方法を考えると、実

32
00:01:25,500 --> 00:01:28,000
際には微積分を知らなくても大丈夫だと思います。

33
00:01:28,000 --> 00:01:30,432
それでは早速本題に入るために、このゼ

34
00:01:30,432 --> 00:01:33,000
ータ関数が何であるかを定義しましょう。

35
00:01:33,000 --> 00:01:36,416
一般に変数 s を使用する特定の入力の場合、関数は

36
00:01:36,416 --> 00:01:39,700
s に対して 1 に対して 1 (常に 1)、s

37
00:01:39,700 --> 00:01:43,248
に対して 2 に対して 1 を加え、s に対して 3

38
00:01:43,248 --> 00:01:46,795
に対して 1 を加え、s に対して 4 に対して 1

39
00:01:46,795 --> 00:01:50,343
を加えます。 s を何度も繰り返し、すべての自然数を合

40
00:01:50,343 --> 00:01:51,000
計します。

41
00:01:51,000 --> 00:01:55,000
たとえば、s = 2 のような値を入力するとします。

42
00:01:55,000 --> 00:01:58,693
1 プラス 1 オーバー 4 プラス 1 オーバー

43
00:01:58,693 --> 00:02:00,966
9 プラス 1 16 分の 1

44
00:02:00,966 --> 00:02:05,228
が得られ、平方の逆数をどんどん足し続けると、これはたまたま

45
00:02:05,228 --> 00:02:08,780
6 の円周率 2 乗、つまり約 1 に近づきます。

46
00:02:08,780 --> 00:02:09,000
645。

47
00:02:09,000 --> 00:02:11,918
ここに pi が表示される理由には非常に美しい理

48
00:02:11,918 --> 00:02:14,837
由があり、後日ビデオを作成するかもしれませんが、

49
00:02:14,837 --> 00:02:18,000
それはこの関数が美しい理由の氷山の一角にすぎません。

50
00:02:18,000 --> 00:02:19,920
他の入力 (3 や 4 など)

51
00:02:19,920 --> 00:02:22,920
に対しても同じことを行うと、他の興味深い値が得られ

52
00:02:22,920 --> 00:02:24,000
る場合があります。

53
00:02:24,000 --> 00:02:25,257
そして、これまでのところ、すべて

54
00:02:25,257 --> 00:02:26,515
がかなり合理的だと感じています。

55
00:02:26,515 --> 00:02:28,689
どんどん小さな金額を合計していき

56
00:02:28,689 --> 00:02:31,000
、その合計はある数値に近づきます。

57
00:02:31,000 --> 00:02:34,000
素晴らしい、ここには狂気はありません。

58
00:02:34,000 --> 00:02:36,333
しかし、これについて読んでみると、マイナス

59
00:02:36,333 --> 00:02:38,666
1 のゼータはマイナス 1 の 12 分の

60
00:02:38,666 --> 00:02:41,000
1 に等しい、と言う人もいるかもしれません。

61
00:02:41,000 --> 00:02:45,000
しかし、この無限和を見ると、それは何の意味もありません。

62
00:02:45,000 --> 00:02:48,333
各項をマイナスの 1 に上げ、各分数を反転する

63
00:02:48,333 --> 00:02:51,666
と、すべての自然数にわたって 1 プラス 2

64
00:02:51,666 --> 00:02:55,000
プラス 3 プラス 4 が繰り返し得られます。

65
00:02:55,000 --> 00:02:58,000
そして明らかに、それは何にも近づきません、

66
00:02:58,000 --> 00:03:01,000
確かにマイナス1/12ではありませんよね？

67
00:03:01,000 --> 00:03:05,000
そして、リーマン予想を研究している傭兵なら誰でも知っているよ

68
00:03:05,000 --> 00:03:09,000
うに、この関数は負の偶数に自明なゼロを持つと言われています。

69
00:03:09,000 --> 00:03:10,846
したがって、たとえば、マイナス 2

70
00:03:10,846 --> 00:03:13,000
のゼータは 0 に等しいことを意味します。

71
00:03:13,000 --> 00:03:16,670
しかし、マイナス 2 を代入すると、1 プラス 4

72
00:03:16,670 --> 00:03:19,917
プラス 9 プラス 16 が延々と続きます。

73
00:03:19,917 --> 00:03:23,447
これも明らかに何にも近づきません。 ましてや 0

74
00:03:23,447 --> 00:03:25,000
には近づきませんよね。

75
00:03:25,000 --> 00:03:27,941
そうですね、数分以内に負の値になりますが、今のとこ

76
00:03:27,941 --> 00:03:31,000
ろ、合理的だと思われることだけを言っておきましょう。

77
00:03:31,000 --> 00:03:33,444
この関数は、s が 1 より大きい場合、つま

78
00:03:33,444 --> 00:03:36,000
りこの合計が収束する場合にのみ意味を持ちます。

79
00:03:36,000 --> 00:03:41,000
これまでのところ、他の値については定義されていません。

80
00:03:41,000 --> 00:03:45,500
さて、そうは言っても、バーナード・リーマンは、入力と出力とし

81
00:03:45,500 --> 00:03:50,000
て複素数を持つ関数の研究である複素解析の父のようなものです。

82
00:03:50,000 --> 00:03:53,311
したがって、この合計が実数直線上の数値 s

83
00:03:53,311 --> 00:03:57,075
を実数直線上の別の数値にどのように変換するかを考

84
00:03:57,075 --> 00:03:59,784
えることよりも、彼の主な焦点は、s

85
00:03:59,784 --> 00:04:04,000
に複素数値を代入すると何が起こるかを理解することでした。

86
00:04:04,000 --> 00:04:07,166
たとえば、2 を接続する代わりに、2

87
00:04:07,166 --> 00:04:10,000
と i を接続するとよいでしょう。

88
00:04:10,000 --> 00:04:13,250
さて、数値を複素数値で累乗するという考え方を見たこと

89
00:04:13,250 --> 00:04:16,375
がなければ、最初は奇妙に感 じるかもしれません。

90
00:04:16,375 --> 00:04:20,000
なぜなら、それは繰り返しの乗算とは何の関係もないからです。

91
00:04:20,000 --> 00:04:24,333
しかし数学者たちは、指数の定義を実数という馴染みの

92
00:04:24,333 --> 00:04:28,666
ある領域を超えて複素数値 の領域に拡張する、非常に

93
00:04:28,666 --> 00:04:33,000
優れた、非常に自然な方法があることを発見しました。

94
00:04:33,000 --> 00:04:35,666
このビデオの目的において、複雑な指数を理解す

95
00:04:35,666 --> 00:04:38,333
ることはそれほど重要で はありませんが、ここ

96
00:04:38,333 --> 00:04:41,000
では要点だけを要約しておくと良いと思います。

97
00:04:41,000 --> 00:04:44,666
基本的な考え方は、1/2 の複素数乗のようなも

98
00:04:44,666 --> 00:04:47,855
のを書くとき、それを実 数部の 1/2

99
00:04:47,855 --> 00:04:52,000
と純粋な虚数部の 1/2 に分割するということです。

100
00:04:52,000 --> 00:04:55,000
本番までの半分は順調に進んでおり、問題はありません。

101
00:04:55,000 --> 00:05:00,000
しかし、何かを純粋な虚数に引き上げる場合はどうでしょうか?

102
00:05:00,000 --> 00:05:06,000
そうですね、結果は複素平面の単位円上の複素数になります。

103
00:05:06,000 --> 00:05:12,618
純粋な想像上の入力を想像上の線の上を上下に移動させると

104
00:05:12,618 --> 00:05:19,000
、結果として得られる出力はその単位円の周りを歩きます。

105
00:05:19,000 --> 00:05:21,435
1/2 のようなベースの場合、出力は単

106
00:05:21,435 --> 00:05:24,000
位円の周囲をややゆっくりと歩き回ります。

107
00:05:24,000 --> 00:05:28,148
しかし、1 9 分の 1 など、1 から離れた基数の場

108
00:05:28,148 --> 00:05:32,148
合、この入力を虚数軸上で上下に移動させると、対応する

109
00:05:32,148 --> 00:05:36,000
出力は単位円の周囲をより速く移動することになります。

110
00:05:36,000 --> 00:05:37,943
これを見たことがなく、一体なぜこのようなことが

111
00:05:37,943 --> 00:05:39,887
起こるのか疑問に思ってい る方のために、説明の

112
00:05:39,887 --> 00:05:42,000
中に優れたリソースへのリンクをいくつか残しました。

113
00:05:42,000 --> 00:05:44,000
ここでは、「Why」を使わずに「

114
00:05:44,000 --> 00:05:46,000
What」だけを進めていきます。

115
00:05:46,000 --> 00:05:50,148
主なポイントは、1 の半分の 2 乗に i を加えたも

116
00:05:50,148 --> 00:05:54,148
の (1 の 2 乗の 1 の 2 乗に i の 1

117
00:05:54,148 --> 00:05:58,000
の半分を乗じたもの) の場合、その i の 1 の

118
00:05:58,000 --> 00:06:02,000
半分が単位円上にあることです。 の絶対値は 1 です。

119
00:06:02,000 --> 00:06:07,306
したがって、乗算しても数値のサイズは変わりません。

120
00:06:07,306 --> 00:06:12,000
4 分の 1 を取り、多少回転させるだけです。

121
00:06:12,000 --> 00:06:15,142
したがって、2 プラス i をゼータ関数に接続する場

122
00:06:15,142 --> 00:06:18,285
合、それが何をするか を考える 1 つの方法は、1

123
00:06:18,285 --> 00:06:20,824
の半分を i の部分に取り込み、それが何

124
00:06:20,824 --> 00:06:23,967
をするかを考えることです。 それは、提起されたすべて

125
00:06:23,967 --> 00:06:27,109
の項から始めることです。 これは、長さが数値の 2

126
00:06:27,109 --> 00:06:29,769
乗の逆数である線をつなぎ合わせたものと考え

127
00:06:29,769 --> 00:06:32,791
ることができ、前に述べたように、6 の pi の

128
00:06:32,791 --> 00:06:34,000
2 乗に収束します。

129
00:06:34,000 --> 00:06:37,645
次に、その入力を 2 から 2 プラス i に変

130
00:06:37,645 --> 00:06:41,000
更すると、これらの各線はある程度回転されます。

131
00:06:41,000 --> 00:06:43,560
しかし重要なのは、これらの線の長さは変わ

132
00:06:43,560 --> 00:06:46,000
らないため、合計は依然として収束します。

133
00:06:46,000 --> 00:06:48,500
それは、複素平面上の特定の点に向

134
00:06:48,500 --> 00:06:51,000
かって螺旋状に行われるだけです。

135
00:06:51,000 --> 00:06:54,437
ここで、複素平面上のこの黄色の点で表される、入力

136
00:06:54,437 --> 00:06:58,012
s を変化させたときにどのようになるかを示します。

137
00:06:58,012 --> 00:07:02,000
この スパイラル和は常に s のゼータの収束値を示します。

138
00:07:02,000 --> 00:07:08,145
これが意味するのは、この無限和として定義される s

139
00:07:08,145 --> 00:07:11,927
のゼータは、入力の実 部が 1

140
00:07:11,927 --> 00:07:18,309
より大きい限り、完全に合理的な複素関数であるということ

141
00:07:18,309 --> 00:07:24,690
です。 つ まり、入力 s が複素平面の右半分のどこか

142
00:07:24,690 --> 00:07:28,000
に位置することを意味します。

143
00:07:28,000 --> 00:07:33,500
繰り返しますが、これは、各数値のサイズを決定するのは s

144
00:07:33,500 --> 00:07:39,000
の実数部であり、虚数部は回転を指示するだけであるためです。

145
00:07:39,000 --> 00:07:42,000
ここで私がやりたいのは、この関数を視覚化することです。

146
00:07:42,000 --> 00:07:45,684
複素平面の右半分で入力を受け取り、複素

147
00:07:45,684 --> 00:07:49,000
平面の別の場所に出力を吐き出します。

148
00:07:49,000 --> 00:07:53,391
複雑な関数を理解する非常に優れた方法は、関数を変

149
00:07:53,391 --> 00:07:57,959
換として視覚化することです。 つまり、関数へのあら

150
00:07:57,959 --> 00:08:02,000
ゆる入力を調べて、対応する出力に移すだけです。

151
00:08:02,000 --> 00:08:04,270
たとえば、少し時間をとって、ゼータ関数よりももう

152
00:08:04,270 --> 00:08:06,256
少し簡単なものを視覚化し てみましょう。

153
00:08:06,256 --> 00:08:09,000
たとえば、s の f が s の 2 乗に等しいとします。

154
00:08:09,000 --> 00:08:12,652
s = 2 を代入すると 4 が得られるため、

155
00:08:12,652 --> 00:08:16,000
最終的に 2 の点を 4 の点に移動します。

156
00:08:16,000 --> 00:08:20,078
マイナス 1 を入力すると 1 が得られるため、マ

157
00:08:20,078 --> 00:08:24,000
イナス 1 の点は最終的に 1 の点に移動します。

158
00:08:24,000 --> 00:08:28,081
i を入力すると、定義上、その 2 乗はマイナス

159
00:08:28,081 --> 00:08:32,000
1 なので、ここではマイナス 1 に移動します。

160
00:08:32,000 --> 00:08:34,430
ここで、さらにカラフルなグリッドを追加します。

161
00:08:34,430 --> 00:08:37,468
これは 、ちょうど物事が動き始めているためであり、その動き

162
00:08:37,468 --> 00:08:40,000
の中でグリッド線を区別できる何かがあると便利です。

163
00:08:40,000 --> 00:08:42,797
ここから、s が s の 2 乗に等しい関数

164
00:08:42,797 --> 00:08:45,716
f に基づいて、このグリッド 上のすべての点を対

165
00:08:45,716 --> 00:08:49,000
応する出力に移動するようにコンピューターに指示します。

166
00:08:49,000 --> 00:08:55,000
外観は次のとおりです。

167
00:08:55,000 --> 00:08:56,465
それは理解することがたくさんあるかもしれな

168
00:08:56,465 --> 00:08:58,000
いので、先に進んでもう一度プレイしてみます。

169
00:08:58,000 --> 00:09:00,612
そして今回は、マークされた点の 1

170
00:09:00,612 --> 00:09:03,516
つに焦点を当て、それがその 正方形に対応

171
00:09:03,516 --> 00:09:07,000
する点にどのように移動するかに注目してください。

172
00:09:07,000 --> 00:09:10,151
すべての点が一度に移動するのを見るのは少し複雑か

173
00:09:10,151 --> 00:09:13,303
もしれませんが、こ れにより、複雑な関数が実際に

174
00:09:13,303 --> 00:09:15,797
何を行っているかについて非常に豊富な

175
00:09:15,797 --> 00:09:18,949
図が得られ、すべてが 2 次元内で行われるという

176
00:09:18,949 --> 00:09:20,000
利点があります。

177
00:09:20,000 --> 00:09:22,000
ゼータ関数に戻りましょう。

178
00:09:22,000 --> 00:09:26,333
複素数 s の関数であるこの無限和があり、実部が 1

179
00:09:26,333 --> 00:09:30,827
より大きい s の値を代入し、収束するスパイラル和を介

180
00:09:30,827 --> 00:09:35,000
して意味のある出力を得ることができて満足しています。

181
00:09:35,000 --> 00:09:38,532
この関数を視覚化するために、ここで複素平面の右側にあ

182
00:09:38,532 --> 00:09:42,065
るグリッドの部分 (数値の実部が 1 より大きい部分

183
00:09:42,065 --> 00:09:45,728
) を取得し、コンピューターに移動するよう指示します。

184
00:09:45,728 --> 00:09:49,000
このグリッドの各ポイントを適切な出力に接続します。

185
00:09:49,000 --> 00:09:54,178
実際には、数字の 1 の周りにさらにグリッド線を追加する

186
00:09:54,178 --> 00:09:59,000
と、その領域がかなり引き伸ばされるため、役に立ちます。

187
00:09:59,000 --> 00:10:01,000
さて、それではまず、それがどれほど

188
00:10:01,000 --> 00:10:03,000
美しいかをみんなで鑑賞しましょう。

189
00:10:03,000 --> 00:10:07,000
つまり、くそー、複雑な関数についてもっと学びたいと

190
00:10:07,000 --> 00:10:11,000
思わないのなら、あなたには心がないということです。

191
00:10:11,000 --> 00:10:14,000
しかしまた、この変換されたグリッドは

192
00:10:14,000 --> 00:10:17,000
、少し拡張されることを望んでいます。

193
00:10:17,000 --> 00:10:22,090
たとえば、ここでは虚数部 i または負の i を持つす

194
00:10:22,090 --> 00:10:27,000
べての複素数を表すこれらの行を強調表示してみましょう。

195
00:10:27,000 --> 00:10:29,419
変身後はこの線がとても綺麗な弧

196
00:10:29,419 --> 00:10:32,000
を描きながらピタッと止まります。

197
00:10:32,000 --> 00:10:36,000
このままこの弧を続けたくないですか?

198
00:10:36,000 --> 00:10:40,097
実際、平面の左半分にまで拡張された定義を備えた関数の変

199
00:10:40,097 --> 00:10:44,195
更バージョンを使用すると、この図を非常に美しいもので完

200
00:10:44,195 --> 00:10:48,000
成させることができるかもしれないことが想像できます。

201
00:10:48,000 --> 00:10:49,935
そうですね、これはまさに複雑な

202
00:10:49,935 --> 00:10:52,000
関数を扱う数学者が行うことです。

203
00:10:52,000 --> 00:10:58,000
これらは、定義された元のドメインを超えて機能を継続します。

204
00:10:58,000 --> 00:11:02,500
ここで、実数部が 1 未満の入力に分岐するとすぐに、最初に関

205
00:11:02,500 --> 00:11:07,000
数を定義するために使用したこの無限の合計は意味を失います。

206
00:11:07,000 --> 00:11:09,083
1 プラス 2 プラス 3 プラス 4

207
00:11:09,083 --> 00:11:12,000
を無限大まで加算するようなナンセンスな結果が得られます。

208
00:11:12,000 --> 00:11:15,323
しかし、この平面の右半分の変換されたバージョンを見る

209
00:11:15,323 --> 00:11:18,646
と、合計が意味 を成しており、たとえそれが何らかの拡

210
00:11:18,646 --> 00:11:21,969
張関数を定義することを意味す るとしても、入力として

211
00:11:21,969 --> 00:11:24,781
考慮している点のセットを拡張するよう求めら

212
00:11:24,781 --> 00:11:28,105
れているだけです。 必ずしもその合計を使用するわけで

213
00:11:28,105 --> 00:11:29,000
はありません。

214
00:11:29,000 --> 00:11:32,142
もちろん、飛行機の残りの部分でその機能をど

215
00:11:32,142 --> 00:11:35,000
のように定義するかという疑問が残ります。

216
00:11:35,000 --> 00:11:38,000
いくらでも拡張できると思うかもしれません。

217
00:11:38,000 --> 00:11:42,545
おそらく、s がマイナス 1 に等しい点が 12

218
00:11:42,545 --> 00:11:48,000
番目のマイナス 1 に移動するように拡張を定義するとします。

219
00:11:48,000 --> 00:11:49,935
ただし、拡張子を波線にして、他

220
00:11:49,935 --> 00:11:52,000
の値に到達する可能性があります。

221
00:11:52,000 --> 00:11:55,820
つまり、収束領域外の値、つまり無限和に基づいていない

222
00:11:55,820 --> 00:11:59,641
値に対して関数を別の方法で定義するというアイデアに心

223
00:11:59,641 --> 00:12:03,462
を開くとすぐに、世界はあなたの好みに合わせて拡張でき

224
00:12:03,462 --> 00:12:07,000
、拡張はいくらでもできるようになります。 、 右？

225
00:12:07,000 --> 00:12:09,000
そうですね、正確にはそうではありません。

226
00:12:09,000 --> 00:12:13,000
つまり、はい、どの子にもマーカーを与えて、これらの線をどの

227
00:12:13,000 --> 00:12:17,000
方向にでも拡張させ ることができますが、この新しい拡張関数

228
00:12:17,000 --> 00:12:19,758
がどこにでも導関数を持たなければならな

229
00:12:19,758 --> 00:12:22,655
いという制限を追加すると、可能なのは 1

230
00:12:22,655 --> 00:12:25,000
つだけになってしまいます。 拡大。

231
00:12:25,000 --> 00:12:27,474
わかっています、わかっています、このビデオでは導

232
00:12:27,474 --> 00:12:30,051
関数について知る必要はないと言いましたが、たとえ

233
00:12:30,051 --> 00:12:32,525
微積分を知っていたとしても、複素関数の導関数を解

234
00:12:32,525 --> 00:12:35,000
釈する方法をまだ学習していない可能性があります。

235
00:12:35,000 --> 00:12:37,631
しかし、私たちにとって幸運なことに、私が次のような

236
00:12:37,631 --> 00:12:40,263
フレーズを言うときに覚えて おくことができる非常に

237
00:12:40,263 --> 00:12:43,000
優れた幾何学的直観があり、どこにでも派生があります。

238
00:12:43,000 --> 00:12:45,000
ここで、私が言いたいことを示すために、s の f が

239
00:12:45,000 --> 00:12:47,000
s の 2 乗に等しいという例を振り返ってみましょう。

240
00:12:47,000 --> 00:12:51,326
繰り返しますが、この関数は、複素平面のすべての点

241
00:12:51,326 --> 00:12:56,000
s を点 s の二乗に移動する変換として考えられます。

242
00:12:56,000 --> 00:13:00,137
微積分を知っている人は、任意の入力でこの関数の導関数を取得

243
00:13:00,137 --> 00:13:04,137
できることを知っていますが、その変換には、その事実に関連

244
00:13:04,137 --> 00:13:08,000
し、ほぼ同等であることが判明する興味深い特性があります。

245
00:13:08,000 --> 00:13:12,105
入力空間内で何らかの角度で交差する 2 本の線に注

246
00:13:12,105 --> 00:13:16,210
目し、変換後にそれらがどのようになるかを考慮すると

247
00:13:16,210 --> 00:13:20,000
、それらの線は同じ角度で交差したままになります。

248
00:13:20,000 --> 00:13:24,148
線が曲がるかもしれませんが、それは問題ありませんが、重

249
00:13:24,148 --> 00:13:28,000
要なのは、線が交わる角度は変わらないということです。

250
00:13:28,000 --> 00:13:35,000
これは、選択したどのペアのラインにも当てはまります。

251
00:13:35,000 --> 00:13:37,969
したがって、関数にはどこにでも導関数があると言う

252
00:13:37,969 --> 00:13:41,680
とき、この角度保 持の特性について考えてもらいたいのです。

253
00:13:41,680 --> 00:13:44,649
つまり、2 本の線が交 差するときはいつでも、そ

254
00:13:44,649 --> 00:13:47,000
れらの間の角度は変換後も変化しません。

255
00:13:47,000 --> 00:13:52,593
これは、グリッド線が変化するすべての曲線が互いに直角に交差

256
00:13:52,593 --> 00:13:58,000
していることに注目すると、一目で理解するのが最も簡単です。

257
00:13:58,000 --> 00:14:00,580
随所に導関数がある複雑な関数は解析的関数

258
00:14:00,580 --> 00:14:03,161
と呼ばれるため、この解 析的という用語は

259
00:14:03,161 --> 00:14:06,000
角度の保持を意味すると考えることができます。

260
00:14:06,000 --> 00:14:10,000
確かに、ここでは少し嘘をついていますが、ほんの少しだけです。

261
00:14:10,000 --> 00:14:13,428
完全な詳細が必要な方への若干の注意点は、関数の

262
00:14:13,428 --> 00:14:16,857
導関数がゼロである入力では、角度が保持されるの

263
00:14:16,857 --> 00:14:20,000
ではなく、何らかの整数が乗算されることです。

264
00:14:20,000 --> 00:14:24,591
しかし、それらの点は圧倒的に少数であり、分析関数

265
00:14:24,591 --> 00:14:29,000
へのほとんどすべての入力では角度が保持されます。

266
00:14:29,000 --> 00:14:32,918
したがって、私が分析的と言うときに角度の保存を考

267
00:14:32,918 --> 00:14:37,000
えるのであれば、それは素晴らしい直観だと思います。

268
00:14:37,000 --> 00:14:41,666
ここで、少し考えてみてください。 これは本当に理解して

269
00:14:41,666 --> 00:14:46,000
いただきたい点ですが、これは非常に制限的な特性です。

270
00:14:46,000 --> 00:14:51,000
交差する線のペア間の角度は変更されない必要があります。

271
00:14:51,000 --> 00:14:54,410
それでも、名前が付いているほとんどすべ

272
00:14:54,410 --> 00:14:58,000
ての関数は分析的であることがわかります。

273
00:14:58,000 --> 00:15:02,720
リーマンが現代的な形で確立するのに貢献した複素解析の分野

274
00:15:02,720 --> 00:15:07,441
は、ほぼ完全に解析関数の特性を活用して、数学や科学の他の

275
00:15:07,441 --> 00:15:12,000
分野の結果やパターンを理解することに重点を置いています。

276
00:15:12,000 --> 00:15:15,393
ゼータ関数は、平面の右半分の無限

277
00:15:15,393 --> 00:15:19,000
和によって定義され、解析関数です。

278
00:15:19,000 --> 00:15:22,428
グリッド線が変化するこれらすべての曲線が依然とし

279
00:15:22,428 --> 00:15:26,000
て互いに直角に交差していることに注目してください。

280
00:15:26,000 --> 00:15:30,500
したがって、複素関数に関する驚くべき事実は、解析関数

281
00:15:30,500 --> 00:15:35,000
を最初に定義された領域を超えて拡張する場合、たとえば

282
00:15:35,000 --> 00:15:39,500
、このゼータ関数を平面の左半分に拡張する場合、新しい

283
00:15:39,500 --> 00:15:44,166
拡張関数が必要な場合であるということです。 まだ分析的

284
00:15:44,166 --> 00:15:48,833
です。 つまり、どこでも角度を保持しており、拡張が存在

285
00:15:48,833 --> 00:15:53,000
するとしても、可能な拡張は 1 つだけになります。

286
00:15:53,000 --> 00:15:56,666
これは、無限に連続するジグソーパズルのようなもの

287
00:15:56,666 --> 00:16:00,333
で、角度を維持するという 要件によって、角度を拡

288
00:16:00,333 --> 00:16:04,000
張する方法が 1 つだけの選択肢に固定されます。

289
00:16:04,000 --> 00:16:09,729
ご想像のとおり、分析関数を分析可能な唯一の方法で

290
00:16:09,729 --> 00:16:15,000
拡張するこのプロセスは、分析継続と呼ばれます。

291
00:16:15,000 --> 00:16:18,000
これが完全なリーマン ゼータ関数の定義方法です。

292
00:16:18,000 --> 00:16:20,409
実数部が 1 より大きい、平面の右半分の

293
00:16:20,409 --> 00:16:22,704
s の値については 、それらをこの合計に

294
00:16:22,704 --> 00:16:25,000
代入して、どこに収束するかを確認します。

295
00:16:25,000 --> 00:16:27,625
そして、これらの各項を複素累乗すると、各項

296
00:16:27,625 --> 00:16:30,250
が回転する効果があるた め、その収束はある

297
00:16:30,250 --> 00:16:33,000
種のスパイラルのように見えるかもしれません。

298
00:16:33,000 --> 00:16:36,954
次に、平面の残りの部分については、関数が依然として解析的で

299
00:16:36,954 --> 00:16:39,136
あるように、つまりすべての単一

300
00:16:39,136 --> 00:16:43,090
点での角度が保持されるように、この定義を拡張する唯一の方法

301
00:16:43,090 --> 00:16:45,000
が存在することがわかります。

302
00:16:45,000 --> 00:16:48,563
したがって、定義上、平面の左半分のゼータ関数はその拡張

303
00:16:48,563 --> 00:16:52,000
が何であれ、それが何であるかだけであるとだけ言えます。

304
00:16:52,000 --> 00:16:54,914
そして、可能な分析継続は 1 つだ

305
00:16:54,914 --> 00:16:58,000
けであるため、これは有効な定義です。

306
00:16:58,000 --> 00:17:01,000
これは非常に暗黙的な定義であることに注意してください。

307
00:17:01,000 --> 00:17:03,250
より抽象的な導出を通じて、このジグソーパズルが存在す

308
00:17:03,250 --> 00:17:05,586
るはずであることがわかっている、このジグソーパズルの

309
00:17:05,586 --> 00:17:07,836
解決策を使用してくださいとだけ書かれていますが、それ

310
00:17:07,836 --> 00:17:10,000
を解く方法を正確に指定しているわけではありません。

311
00:17:10,000 --> 00:17:13,563
数学者はこの拡張機能がどのようなものかをかなりよく理解

312
00:17:13,563 --> 00:17:17,000
していますが、その重要な部分は依然として謎のままです。

313
00:17:17,000 --> 00:17:19,000
実際、100万ドルの謎。

314
00:17:19,000 --> 00:17:21,500
実際に少し時間をとって、リーマン予想、

315
00:17:21,500 --> 00:17:24,000
100万ドル問題について話しましょう。

316
00:17:24,000 --> 00:17:25,935
この関数がゼロに等しい場所は非

317
00:17:25,935 --> 00:17:28,000
常に重要であることがわかります。

318
00:17:28,000 --> 00:17:30,500
つまり、変換後にどの点が原点にマ

319
00:17:30,500 --> 00:17:33,000
ッピングされるかということです。

320
00:17:33,000 --> 00:17:36,744
この拡張機能についてわかっていることの 1

321
00:17:36,744 --> 00:17:41,000
つは、負の偶数はゼロにマップされるということです。

322
00:17:41,000 --> 00:17:44,000
これらは一般に自明ゼロと呼ばれます。

323
00:17:44,000 --> 00:17:47,378
ここでの命名は、最初からまったく明らかではない事

324
00:17:47,378 --> 00:17:50,756
実であっても、よく理解している場合には物事を自明

325
00:17:50,756 --> 00:17:54,000
と呼ぶという数学者の長年の伝統に由来しています。

326
00:17:54,000 --> 00:17:57,223
また、ゼロにマッピングされる残りの点は、クリティカル

327
00:17:57,223 --> 00:17:59,850
ストリップと 呼ばれるこの垂直ストリップのど

328
00:17:59,850 --> 00:18:02,000
こかに位置することもわかっています。

329
00:18:02,000 --> 00:18:05,422
そして、これらの自明ではないゼロの特定の配置

330
00:18:05,422 --> 00:18:09,000
は、素数に関する驚くべき情報をコード化します。

331
00:18:09,000 --> 00:18:11,421
実際、この関数がなぜ素数についてこれほど多くの

332
00:18:11,421 --> 00:18:14,052
情報を伝えるのかは非常に興味深いので、それについ

333
00:18:14,052 --> 00:18:16,473
ては後で必ずビデオにしようと思っていますが、現

334
00:18:16,473 --> 00:18:19,000
時点では十分に長いので、説明しないままにします。

335
00:18:19,000 --> 00:18:22,857
リーマンは、これらの自明ではないゼロはすべて、実部が

336
00:18:22,857 --> 00:18:25,142
2 分の 1 で ある数値 s

337
00:18:25,142 --> 00:18:29,000
の線上のストリップの中央に位置すると仮説を立てました。

338
00:18:29,000 --> 00:18:31,000
これをクリティカルラインといいます。

339
00:18:31,000 --> 00:18:33,907
それが本当であれば、素数のパターンだけでな

340
00:18:33,907 --> 00:18:36,815
く、そこから派生する数 学の他の多くのパタ

341
00:18:36,815 --> 00:18:40,000
ーンを驚くほど厳密に把握できるようになります。

342
00:18:40,000 --> 00:18:42,500
さて、これまでゼータ関数がどのようなものである

343
00:18:42,500 --> 00:18:45,000
かを示してきた とき、画面上のグリッドの部分に

344
00:18:45,000 --> 00:18:46,739
対してゼータ関数が何を行うかを

345
00:18:46,739 --> 00:18:50,000
示しただけであり、そのためその複雑さが過小評価されています。

346
00:18:50,000 --> 00:18:53,561
したがって、この重要な線を強調表示して変換を適用した場合

347
00:18:53,561 --> 00:18:57,000
、原点をまったく越えていないように見えるかもしれません。

348
00:18:57,000 --> 00:19:00,000
ただし、そのラインのさらに多くの変

349
00:19:00,000 --> 00:19:03,000
形バージョンが次のようになります。

350
00:19:03,000 --> 00:19:07,000
数値のゼロを何度も通過していることに注目してください。

351
00:19:07,000 --> 00:19:10,174
すべての非自明なゼロがこの線上のどこかにあることを

352
00:19:10,174 --> 00:19:13,476
証明できれば 、クレイ数学研究所はあなたに 100

353
00:19:13,476 --> 00:19:16,650
万ドルを与え、また、す でに示されている現代数学の

354
00:19:16,650 --> 00:19:19,063
結果を数千とは言わないまでも、数百も

355
00:19:19,063 --> 00:19:22,238
証明することになります。 この仮説が真実であること

356
00:19:22,238 --> 00:19:23,000
が条件です。

357
00:19:23,000 --> 00:19:25,800
この拡張関数についてわかっているもう 1

358
00:19:25,800 --> 00:19:29,266
つのことは、点のマイナス 1 をマイナス 1 12

359
00:19:29,266 --> 00:19:31,000
にマップしていることです。

360
00:19:31,000 --> 00:19:33,421
これを元の合計に当てはめると、1 プラス 2

361
00:19:33,421 --> 00:19:36,578
プラス 3 プラス 4 を無限 大まで繰り返すと、マイナス

362
00:19:36,578 --> 00:19:39,000
1 12 に等しいと言っているように見えます。

363
00:19:39,000 --> 00:19:41,907
さて、平面の左半分のゼータ関数の定義はこの

364
00:19:41,907 --> 00:19:44,815
合計から直接定義されな いため、これをまだ

365
00:19:44,815 --> 00:19:48,000
合計と呼ぶのは不誠実に思われるかもしれません。

366
00:19:48,000 --> 00:19:50,933
代わりに、それは、合計が収束する領域を超えて

367
00:19:50,933 --> 00:19:54,000
合計を分析的に継続することによって得られます。

368
00:19:54,000 --> 00:19:58,070
つまり、行の最初の行から始まったジグソーパズルを解くこと

369
00:19:58,070 --> 00:20:02,000
、平面の右半分から始まったジグソーパズルを解くことです。

370
00:20:02,000 --> 00:20:04,019
そうは言っても、この分析継続の独自性、ジグソーパズルの解が

371
00:20:04,019 --> 00:20:05,769
1 つし かないという事実は、これらの拡張された値と

372
00:20:05,769 --> 00:20:07,519
元の合計の間に何らかの本質 的な関係があることを非常

373
00:20:07,519 --> 00:20:09,000
に示唆していることを認めなければなりません。

