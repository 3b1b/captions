1
00:00:04,220 --> 00:00:05,700
리만 제타 함수.

2
00:00:06,400 --> 00:00:08,874
이것은 많은 분들이 들어보셨을 현대 수학의 객체 

3
00:00:08,874 --> 00:00:11,440
중 하나이지만 이해하기는 정말 어려울 수 있습니다.

4
00:00:12,280 --> 00:00:13,906
걱정하지 마십시오. 방금 본 애니메이션에 

5
00:00:13,906 --> 00:00:15,180
대해 몇 분 후에 설명하겠습니다.

6
00:00:15,980 --> 00:00:17,893
많은 사람들이 이 함수에 대해 알고 있습니다. 

7
00:00:17,893 --> 00:00:19,660
왜냐하면 그것이 0과 같을 때를 알아낼 수 

8
00:00:19,660 --> 00:00:21,868
있는 사람에게는 백만 달러의 상금이 있기 때문입니다. 

9
00:00:21,868 --> 00:00:24,003
이는 리만 가설(Riemann Hypothese)로 

10
00:00:24,003 --> 00:00:24,960
알려진 공개 문제입니다.

11
00:00:25,600 --> 00:00:28,812
여러분 중 일부는 1 더하기 2 더하기 3 

12
00:00:28,812 --> 00:00:32,560
더하기 4의 무한한 합에 대해 들어보셨을 것입니다.

13
00:00:33,300 --> 00:00:36,331
알다시피, 이 합이 -1/12와 같다는 의미가 

14
00:00:36,331 --> 00:00:39,596
있는데, 이는 명백히 틀린 것은 아니지만 무의미해 

15
00:00:39,596 --> 00:00:40,180
보입니다.

16
00:00:40,700 --> 00:00:43,410
그러나 이 방정식이 실제로 말하는 것을 정의하는 

17
00:00:43,410 --> 00:00:45,920
일반적인 방법은 리만 제타 함수를 사용합니다.

18
00:00:46,760 --> 00:00:50,464
그러나 이 내용을 읽기 시작한 평범한 수학 애호가라면 

19
00:00:50,464 --> 00:00:53,798
누구나 알고 있듯이 이 정의는 복소수 값 함수와 

20
00:00:53,798 --> 00:00:57,380
관련된 분석 연속이라는 하나의 아이디어를 참조합니다.

21
00:00:57,860 --> 00:00:59,190
그리고 이 아이디어는 실망스러울 정도로 

22
00:00:59,190 --> 00:01:00,520
불투명하고 직관적이지 않을 수 있습니다.

23
00:01:01,400 --> 00:01:03,826
그래서 제가 여기서 하고 싶은 것은 이 

24
00:01:03,826 --> 00:01:06,695
제타 함수가 실제로 어떻게 보이는지 보여주고, 

25
00:01:06,695 --> 00:01:09,342
분석 연속이라는 개념이 무엇인지 시각적이고 

26
00:01:09,342 --> 00:01:11,880
보다 직관적인 방식으로 설명하는 것입니다.

27
00:01:13,980 --> 00:01:15,898
나는 당신이 복소수에 대해 알고 있고 

28
00:01:15,898 --> 00:01:18,000
그것들을 다루는 데 익숙하다고 가정합니다.

29
00:01:18,440 --> 00:01:20,842
분석 연속은 도함수에 관한 것이기 때문에 

30
00:01:20,842 --> 00:01:23,872
여러분은 미적분학을 알아야 한다고 말하고 싶습니다. 

31
00:01:23,872 --> 00:01:26,066
그러나 제가 제시하려는 방식에 따르면 

32
00:01:26,066 --> 00:01:28,260
미적분학이 없어도 괜찮을 것 같습니다.

33
00:01:29,140 --> 00:01:30,970
그럼 바로 시작하기 위해 이 제타 

34
00:01:30,970 --> 00:01:32,800
함수가 무엇인지 정의해 보겠습니다.

35
00:01:32,800 --> 00:01:35,945
일반적으로 변수 s를 사용하는 주어진 입력에 

36
00:01:35,945 --> 00:01:38,839
대해 함수는 s에 대한 1분의 1입니다. 

37
00:01:38,839 --> 00:01:42,111
이는 항상 1이고, s에 2분의 1을 더하고, 

38
00:01:42,111 --> 00:01:45,885
s에 3분의 1을 더하고, s에 4분의 1을 더합니다.

39
00:01:45,885 --> 00:01:48,780
 s, 계속해서 모든 자연수를 합산합니다.

40
00:01:50,960 --> 00:01:52,386
예를 들어 s = 2와 같은 

41
00:01:52,386 --> 00:01:54,080
값을 대입한다고 가정해 보겠습니다.

42
00:01:54,720 --> 00:01:58,093
4분의 1 더하기 1 더하기 9분의 1 

43
00:01:58,093 --> 00:02:01,006
더하기 16분의 1을 얻게 되고, 

44
00:02:01,006 --> 00:02:04,686
계속해서 제곱의 역수를 더하면 6분의 파이 

45
00:02:04,686 --> 00:02:08,979
제곱에 접근하게 되는데, 이는 약 1.645입니다.

46
00:02:09,979 --> 00:02:12,528
pi가 여기에 나타나는 매우 아름다운 이유가 있으며 

47
00:02:12,528 --> 00:02:14,988
나중에 이에 대한 비디오를 만들 수도 있지만 이는 

48
00:02:14,988 --> 00:02:17,272
이 함수가 아름다운 이유에 대한 빙산의 일각에 

49
00:02:17,272 --> 00:02:17,800
불과합니다.

50
00:02:18,380 --> 00:02:20,413
3이나 4와 같은 다른 입력에 대해서도 

51
00:02:20,413 --> 00:02:22,446
동일한 작업을 수행할 수 있으며 때로는 

52
00:02:22,446 --> 00:02:24,480
다른 흥미로운 값을 얻을 수도 있습니다.

53
00:02:25,240 --> 00:02:26,241
그리고 지금까지는 모든 것이 

54
00:02:26,241 --> 00:02:27,180
꽤 합리적이라고 느껴집니다.

55
00:02:27,720 --> 00:02:29,509
점점 더 적은 금액을 합산하고 있으며 

56
00:02:29,509 --> 00:02:31,640
이러한 합계는 어느 정도 숫자에 가까워집니다.

57
00:02:32,180 --> 00:02:33,800
좋습니다. 여기에는 광기가 없습니다.

58
00:02:34,660 --> 00:02:36,792
그러나 그것에 대해 읽으면 일부 사람들이 

59
00:02:36,792 --> 00:02:38,646
-1의 제타는 -1의 12분의 1과 

60
00:02:38,646 --> 00:02:40,500
같다고 말하는 것을 볼 수 있습니다.

61
00:02:41,520 --> 00:02:43,006
그러나 이 무한한 합을 보면 

62
00:02:43,006 --> 00:02:44,400
그것은 말이 되지 않습니다.

63
00:02:44,400 --> 00:02:48,312
각 항을 -1로 올리고 각 분수를 뒤집으면 

64
00:02:48,312 --> 00:02:52,062
모든 자연수에 대해 1 더하기 2 더하기 

65
00:02:52,062 --> 00:02:55,160
3 더하기 4가 계속해서 나옵니다.

66
00:02:55,720 --> 00:02:58,076
그리고 분명히 그것은 아무것도 접근하지 않습니다. 

67
00:02:58,076 --> 00:02:59,760
확실히 -1/12도 아니죠, 그렇죠?

68
00:03:00,940 --> 00:03:04,880
그리고 리만 가설을 조사하는 모든 용병이 알고 있듯이 

69
00:03:04,880 --> 00:03:08,820
이 함수는 음의 짝수에서 사소한 0을 갖는다고 합니다.

70
00:03:09,400 --> 00:03:11,178
예를 들어, 이는 -2의 제타가 

71
00:03:11,178 --> 00:03:12,760
0과 같다는 것을 의미합니다.

72
00:03:12,760 --> 00:03:16,406
하지만 마이너스 2를 연결하면 1 더하기 4 더하기 

73
00:03:16,406 --> 00:03:18,921
9 더하기 16이 계속해서 나오죠. 

74
00:03:18,921 --> 00:03:21,688
이는 분명히 아무 것도 접근하지 않고, 

75
00:03:21,688 --> 00:03:23,700
0은 훨씬 적습니다. 그렇죠?

76
00:03:24,860 --> 00:03:27,602
글쎄, 우리는 몇 분 안에 음수 값에 도달할 것입니다.

77
00:03:27,602 --> 00:03:29,340
 그러나 지금은 합리적으로 보이는 

78
00:03:29,340 --> 00:03:30,620
유일한 것을 말하겠습니다.

79
00:03:31,240 --> 00:03:33,342
이 함수는 s가 1보다 큰 경우, 

80
00:03:33,342 --> 00:03:36,220
즉 이 합이 수렴되는 경우에만 의미가 있습니다.

81
00:03:36,740 --> 00:03:39,760
지금까지는 단순히 다른 값에 대해 정의되지 않았습니다.

82
00:03:40,840 --> 00:03:43,227
말하자면, 버나드 리만(Bernard 

83
00:03:43,227 --> 00:03:45,955
Riemann)은 복소수를 입력과 출력으로 

84
00:03:45,955 --> 00:03:48,569
사용하는 함수에 대한 연구인 복소 분석의 

85
00:03:48,569 --> 00:03:49,820
아버지와도 같습니다.

86
00:03:50,720 --> 00:03:53,609
따라서 이 합이 어떻게 실수선의 숫자 s를 

87
00:03:53,609 --> 00:03:56,859
실수선의 다른 숫자로 가져오는지에 대해 생각하는 

88
00:03:56,859 --> 00:03:59,748
것보다 그의 주요 초점은 s에 복소수 값을 

89
00:03:59,748 --> 00:04:03,240
대입하면 어떤 일이 발생하는지 이해하는 것이었습니다.

90
00:04:04,040 --> 00:04:06,388
예를 들어 2를 연결하는 대신 

91
00:04:06,388 --> 00:04:08,460
2와 i를 연결하면 됩니다.

92
00:04:10,280 --> 00:04:13,472
숫자를 복소수로 거듭제곱하는 아이디어를 본 적이 

93
00:04:13,472 --> 00:04:16,547
없다면 처음에는 이상하게 느껴질 수 있습니다. 

94
00:04:16,547 --> 00:04:19,740
더 이상 반복되는 곱셈과 관련이 없기 때문입니다.

95
00:04:20,660 --> 00:04:23,954
그러나 수학자들은 지수의 정의를 친숙한 실수 

96
00:04:23,954 --> 00:04:27,513
영역을 넘어 복소수 값의 영역으로 확장하는 매우 

97
00:04:27,513 --> 00:04:30,940
훌륭하고 자연스러운 방법이 있음을 발견했습니다.

98
00:04:32,920 --> 00:04:35,604
이 비디오에서 내가 어디로 갈 것인지에 대해 복잡한 

99
00:04:35,604 --> 00:04:38,010
지수를 이해하는 것이 그다지 중요하지는 않지만 

100
00:04:38,010 --> 00:04:40,324
여기서 요점만 요약하면 여전히 좋을 것이라고 

101
00:04:40,324 --> 00:04:40,880
생각합니다.

102
00:04:41,500 --> 00:04:44,897
기본적인 아이디어는 1/2의 복소수 거듭제곱과 

103
00:04:44,897 --> 00:04:48,033
같은 것을 쓸 때 1/2을 실수 부분으로, 

104
00:04:48,033 --> 00:04:51,300
1/2을 순수 허수 부분으로 나누는 것입니다.

105
00:04:52,080 --> 00:04:53,597
우리는 실제 부분에 대해 1/2을 잘 

106
00:04:53,597 --> 00:04:55,260
수행하고 있으며 거기에는 문제가 없습니다.

107
00:04:55,560 --> 00:04:58,600
하지만 무언가를 순수 허수로 올리는 것은 어떻습니까?

108
00:05:02,660 --> 00:05:05,653
결과는 복소 평면의 단위원에 

109
00:05:05,653 --> 00:05:08,460
있는 복소수가 될 것입니다.

110
00:05:09,480 --> 00:05:13,529
순수 가상 입력이 가상 선을 따라 위아래로 이동하게 

111
00:05:13,529 --> 00:05:17,300
하면 결과 출력이 해당 단위원 주위를 이동합니다.

112
00:05:21,280 --> 00:05:23,412
1/2과 같은 밑의 경우 출력은 

113
00:05:23,412 --> 00:05:25,900
단위원 주위를 다소 천천히 이동합니다.

114
00:05:26,840 --> 00:05:29,685
그러나 9분의 1과 같이 1에서 더 멀리 

115
00:05:29,685 --> 00:05:32,406
떨어져 있는 밑의 경우 이 입력이 허수 

116
00:05:32,406 --> 00:05:35,251
축을 위아래로 이동하게 하면 해당 출력이 

117
00:05:35,251 --> 00:05:38,220
단위 원 주위를 더 빠르게 이동하게 됩니다.

118
00:05:39,300 --> 00:05:41,112
이것을 본 적이 없고 대체 왜 이런 일이 

119
00:05:41,112 --> 00:05:43,004
발생하는지 궁금하다면 설명에 좋은 리소스에 

120
00:05:43,004 --> 00:05:44,660
대한 몇 가지 링크를 남겨 두었습니다.

121
00:05:45,320 --> 00:05:46,629
여기서는 이유 없이 무엇만을 

122
00:05:46,629 --> 00:05:48,020
가지고 앞으로 나아갈 것입니다.

123
00:05:49,180 --> 00:05:53,494
주요 시사점은 1/2의 2 더하기 i의 거듭제곱, 

124
00:05:53,494 --> 00:05:57,193
즉 1/2의 제곱 곱하기 1/2의 i 값을 

125
00:05:57,193 --> 00:06:00,737
올리면 i 부분의 1/2이 단위원에 있게 

126
00:06:00,737 --> 00:06:03,820
된다는 것입니다. 절대값은 1입니다.

127
00:06:05,680 --> 00:06:09,082
따라서 이를 곱하면 숫자의 크기는 변경되지 

128
00:06:09,082 --> 00:06:12,060
않고 1/4을 취하고 약간 회전합니다.

129
00:06:15,100 --> 00:06:18,817
따라서 2 더하기 i를 제타 함수에 연결하면 

130
00:06:18,817 --> 00:06:22,089
그것이 무엇을 하는지 생각하는 한 가지 

131
00:06:22,089 --> 00:06:26,550
방법은 모든 항을 2의 거듭제곱으로 시작하는 것입니다.

132
00:06:26,550 --> 00:06:29,524
 길이는 숫자의 제곱의 역수입니다. 

133
00:06:29,524 --> 00:06:33,540
앞서 말했듯이 6 분의 파이 제곱으로 수렴됩니다.

134
00:06:34,300 --> 00:06:37,451
그런 다음 해당 입력을 2에서 2 + i로 

135
00:06:37,451 --> 00:06:40,340
변경하면 각 선이 어느 정도 회전됩니다.

136
00:06:40,340 --> 00:06:43,264
그러나 중요한 점은 선의 길이가 변하지 않기 

137
00:06:43,264 --> 00:06:45,954
때문에 합은 여전히 수렴한다는 것입니다. 

138
00:06:45,954 --> 00:06:48,995
나선형으로 복소 평면의 특정 지점에 수렴한다는 

139
00:06:48,995 --> 00:06:49,580
것입니다.

140
00:06:50,880 --> 00:06:53,901
여기에서는 입력 s를 변경할 때의 모습을 보여 

141
00:06:53,901 --> 00:06:57,388
드리겠습니다. 복소 평면에 노란색 점으로 표시됩니다. 

142
00:06:57,388 --> 00:07:00,642
이 나선형 합은 항상 s의 제타에 대한 수렴 값을 

143
00:07:00,642 --> 00:07:01,340
표시합니다.

144
00:07:12,820 --> 00:07:16,589
이것이 의미하는 바는 이 무한 합으로 정의된 s의 

145
00:07:16,589 --> 00:07:20,358
제타가 입력의 실수 부분이 1보다 큰 한 완벽하게 

146
00:07:20,358 --> 00:07:23,319
합리적인 복소 함수라는 것입니다. 즉, 

147
00:07:23,319 --> 00:07:26,684
입력 s가 복소 평면의 오른쪽 절반 어딘가에 

148
00:07:26,684 --> 00:07:28,300
위치한다는 의미입니다.

149
00:07:29,140 --> 00:07:31,508
다시 말하지만, 이는 각 숫자의 크기를 

150
00:07:31,508 --> 00:07:33,768
결정하는 것이 s의 실수 부분인 반면 

151
00:07:33,768 --> 00:07:36,460
허수 부분은 일부 회전을 지시하기 때문입니다.

152
00:07:39,160 --> 00:07:40,860
이제 제가 하고 싶은 것은 이 

153
00:07:40,860 --> 00:07:42,360
기능을 시각화하는 것입니다.

154
00:07:42,540 --> 00:07:45,909
이는 복소 평면의 오른쪽 절반에서 입력을 받아 

155
00:07:45,909 --> 00:07:49,020
복소 평면의 다른 곳으로 출력을 내보냅니다.

156
00:07:49,760 --> 00:07:53,102
복잡한 함수를 이해하는 가장 좋은 방법은 함수를 

157
00:07:53,102 --> 00:07:55,577
변환으로 시각화하는 것입니다. 즉, 

158
00:07:55,577 --> 00:07:59,167
함수에 대한 가능한 모든 입력을 보고 해당 출력으로 

159
00:07:59,167 --> 00:08:00,900
이동하도록 하는 것입니다.

160
00:08:01,940 --> 00:08:04,195
예를 들어, 잠시 시간을 내어 제타 함수보다 

161
00:08:04,195 --> 00:08:06,180
조금 더 쉬운 것을 시각화해 보겠습니다.

162
00:08:06,180 --> 00:08:08,820
f(s)가 s의 제곱과 같다고 가정해 보세요.

163
00:08:09,400 --> 00:08:12,216
s = 2를 연결하면 4가 됩니다. 

164
00:08:12,216 --> 00:08:16,160
따라서 2의 지점을 4의 지점으로 이동하게 됩니다.

165
00:08:16,880 --> 00:08:20,490
-1을 연결하면 1이 나오므로 여기 -1의 

166
00:08:20,490 --> 00:08:24,100
지점은 결국 1의 지점으로 이동하게 됩니다.

167
00:08:24,980 --> 00:08:28,040
i를 연결하면 정의에 따라 그 사각형은 

168
00:08:28,040 --> 00:08:31,380
-1이므로 여기에서 -1로 이동하게 됩니다.

169
00:08:32,179 --> 00:08:34,594
이제 좀 더 다채로운 그리드를 추가하겠습니다. 

170
00:08:34,594 --> 00:08:36,916
이는 사물이 곧 움직이기 시작하기 때문이며, 

171
00:08:36,916 --> 00:08:39,424
움직이는 동안 그리드 선을 구별할 수 있는 것이 

172
00:08:39,424 --> 00:08:40,260
있으면 좋습니다.

173
00:08:40,860 --> 00:08:43,819
여기에서 나는 컴퓨터에게 이 그리드의 모든 단일 

174
00:08:43,819 --> 00:08:46,560
점을 함수 f of s = s squared 

175
00:08:46,560 --> 00:08:49,520
아래의 해당 출력으로 이동하라고 지시할 것입니다.

176
00:08:50,140 --> 00:08:51,340
그 모습은 다음과 같습니다.

177
00:08:55,420 --> 00:08:56,718
이해해야 할 내용이 많을 수 

178
00:08:56,718 --> 00:08:58,260
있으므로 다시 플레이해 보겠습니다.

179
00:08:58,260 --> 00:09:00,466
그리고 이번에는 표시된 점 중 하나에 

180
00:09:00,466 --> 00:09:02,778
초점을 맞추고 그것이 사각형에 해당하는 

181
00:09:02,778 --> 00:09:04,880
점으로 어떻게 이동하는지 확인하세요.

182
00:09:07,240 --> 00:09:09,835
모든 점이 한꺼번에 움직이는 것을 보는 것은 약간 

183
00:09:09,835 --> 00:09:12,524
복잡할 수 있지만, 이를 통해 복잡한 기능이 실제로 

184
00:09:12,524 --> 00:09:15,120
수행하는 작업에 대한 매우 풍부한 그림을 얻을 수 

185
00:09:15,120 --> 00:09:17,716
있으며 모든 것이 단 2차원에서 발생한다는 보상이 

186
00:09:17,716 --> 00:09:18,180
있습니다.

187
00:09:20,340 --> 00:09:21,800
그럼 다시 제타 함수로 돌아가 보겠습니다.

188
00:09:22,120 --> 00:09:25,249
우리는 일부 복소수 s의 함수인 이 무한 합을 

189
00:09:25,249 --> 00:09:28,500
가지고 있으며 실수 부분이 1보다 큰 s의 값을 

190
00:09:28,500 --> 00:09:31,630
연결하고 수렴하는 나선형 합을 통해 의미 있는 

191
00:09:31,630 --> 00:09:34,760
출력을 얻는 것에 대해 기분이 좋고 행복합니다.

192
00:09:35,600 --> 00:09:38,760
따라서 이 기능을 시각화하기 위해 여기 복소 평면의 

193
00:09:38,760 --> 00:09:42,030
오른쪽에 있는 그리드 부분(숫자의 실수 부분이 1보다 

194
00:09:42,030 --> 00:09:44,536
큰 부분)을 선택하고 컴퓨터에 움직이라고 

195
00:09:44,536 --> 00:09:47,370
지시하겠습니다. 이 그리드의 각 지점을 적절한 

196
00:09:47,370 --> 00:09:48,460
출력으로 보냅니다.

197
00:09:49,220 --> 00:09:52,016
숫자 1 주위에 그리드 선을 몇 개 더 추가하면 해당 

198
00:09:52,016 --> 00:09:54,720
영역이 상당히 늘어나기 때문에 실제로 도움이 됩니다.

199
00:09:59,520 --> 00:10:01,550
좋습니다. 우선 그것이 얼마나 

200
00:10:01,550 --> 00:10:03,580
아름다운지 모두 감상해 봅시다.

201
00:10:04,000 --> 00:10:06,427
내 말은, 젠장, 복잡한 기능에 대해 더 

202
00:10:06,427 --> 00:10:08,960
배우고 싶지 않다면 마음이 없다는 뜻입니다.

203
00:10:10,880 --> 00:10:13,121
그러나 또한 이렇게 변형된 그리드는 

204
00:10:13,121 --> 00:10:15,700
조금 더 확장되기를 바라는 것일 뿐입니다.

205
00:10:16,880 --> 00:10:20,740
예를 들어, 허수부 i 또는 음수 i가 있는 모든 

206
00:10:20,740 --> 00:10:24,600
복소수를 나타내는 이 선을 여기에서 강조하겠습니다.

207
00:10:26,940 --> 00:10:29,610
변형 후, 이 선은 갑자기 멈추기 

208
00:10:29,610 --> 00:10:32,280
전에 정말 아름다운 호를 만듭니다.

209
00:10:33,000 --> 00:10:35,760
그냥, 그 호를 계속하고 싶지 않나요?

210
00:10:36,800 --> 00:10:40,498
사실, 평면의 왼쪽 절반으로 확장되는 정의를 사용하여 

211
00:10:40,498 --> 00:10:43,827
함수의 일부 변경된 버전이 어떻게 이 그림을 꽤 

212
00:10:43,827 --> 00:10:47,280
예쁜 것으로 완성할 수 있는지 상상할 수 있습니다.

213
00:10:48,260 --> 00:10:50,310
음, 이것이 바로 복잡한 함수를 

214
00:10:50,310 --> 00:10:52,360
다루는 수학자들이 하는 일입니다.

215
00:10:52,360 --> 00:10:57,280
정의된 원래 도메인을 넘어 기능을 계속합니다.

216
00:10:58,000 --> 00:11:00,872
이제 실수 부분이 1보다 작은 입력으로 

217
00:11:00,872 --> 00:11:03,614
분기하자마자 원래 함수를 정의하는 데 

218
00:11:03,614 --> 00:11:07,140
사용했던 이 무한 합은 더 이상 의미가 없습니다.

219
00:11:07,420 --> 00:11:08,822
1 더하기 2 더하기 3 더하기 4를 

220
00:11:08,822 --> 00:11:10,157
계속해서 무한대로 더하는 것과 같은 

221
00:11:10,157 --> 00:11:11,560
말도 안되는 결과를 얻게 될 것입니다.

222
00:11:12,260 --> 00:11:15,563
하지만 합계가 의미가 있는 평면의 오른쪽 절반에 대한 

223
00:11:15,563 --> 00:11:18,426
변환된 버전을 보는 것만으로도 우리가 입력으로 

224
00:11:18,426 --> 00:11:21,179
고려하고 있는 점 집합을 확장하라고 간청하는 

225
00:11:21,179 --> 00:11:21,840
것뿐입니다.

226
00:11:22,360 --> 00:11:24,401
비록 그것이 반드시 그 합계를 사용하지 

227
00:11:24,401 --> 00:11:26,164
않는 어떤 방식으로 확장된 함수를 

228
00:11:26,164 --> 00:11:28,020
정의하는 것을 의미하더라도 말입니다.

229
00:11:29,220 --> 00:11:31,214
물론, 이는 우리에게 평면의 나머지 부분에서 해당 

230
00:11:31,214 --> 00:11:33,280
기능을 어떻게 정의할 것인지에 대한 질문을 남깁니다.

231
00:11:34,840 --> 00:11:36,580
다양한 방법으로 확장할 수 있다고 

232
00:11:36,580 --> 00:11:37,680
생각할 수도 있습니다.

233
00:11:38,260 --> 00:11:41,173
아마도 당신은 s가 -1과 같은 지점이 -1의 

234
00:11:41,173 --> 00:11:44,199
12번째 지점으로 이동하도록 확장을 정의할 수도 

235
00:11:44,199 --> 00:11:44,760
있습니다.

236
00:11:47,620 --> 00:11:49,450
하지만 다른 값에 도달하게 만드는 일부 

237
00:11:49,450 --> 00:11:51,280
확장에 대해 신호를 보낼 수도 있습니다.

238
00:11:51,280 --> 00:11:54,853
내 말은, 수렴 영역 외부의 값에 대해 함수를 

239
00:11:54,853 --> 00:11:58,426
다르게 정의한다는 아이디어에 마음을 열자마자, 

240
00:11:58,426 --> 00:12:02,137
즉 이 무한한 합에 기반하지 않고 세상은 굴이고 

241
00:12:02,137 --> 00:12:06,260
확장은 얼마든지 가질 수 있다는 뜻입니다. , 오른쪽?

242
00:12:07,320 --> 00:12:08,940
글쎄요, 정확히는 아닙니다.

243
00:12:09,420 --> 00:12:12,323
내 말은, 네, 어떤 아이에게든 마커를 주고 

244
00:12:12,323 --> 00:12:15,690
이 선을 어떤 방향으로든 확장하도록 할 수 있지만, 

245
00:12:15,690 --> 00:12:18,478
이 새로운 확장 기능이 어디에서나 파생어를 

246
00:12:18,478 --> 00:12:21,149
가져야 한다는 제한을 추가하면 우리를 단 

247
00:12:21,149 --> 00:12:23,820
하나만의 가능성으로 가두게 됩니다. 확대.

248
00:12:25,340 --> 00:12:27,304
알아요, 알아요, 이 비디오에서는 여러분이 

249
00:12:27,304 --> 00:12:29,351
도함수에 대해 알 필요가 없다고 말했습니다. 

250
00:12:29,351 --> 00:12:31,398
미적분학을 알고 있더라도 복잡한 함수에 대한 

251
00:12:31,398 --> 00:12:33,445
도함수를 해석하는 방법을 아직 배우지 않았을 

252
00:12:33,445 --> 00:12:34,100
수도 있습니다.

253
00:12:34,880 --> 00:12:37,456
그러나 운 좋게도 우리에게는 매우 훌륭한 기하학적 

254
00:12:37,456 --> 00:12:39,848
직관이 있습니다. 제가 와 같은 구를 말할 때 

255
00:12:39,848 --> 00:12:42,240
어디에서나 파생어가 있다는 점을 염두에 두세요.

256
00:12:43,260 --> 00:12:45,206
여기에서 제가 말하는 것이 무엇인지 보여드리기 위해 

257
00:12:45,206 --> 00:12:47,220
f(s)가 s 제곱과 같다는 예를 다시 살펴보겠습니다.

258
00:12:47,860 --> 00:12:51,349
다시 말하지만, 우리는 이 함수를 복소 평면의 모든 

259
00:12:51,349 --> 00:12:54,960
점 s를 제곱된 점 s로 이동하는 변환으로 생각합니다.

260
00:12:56,080 --> 00:12:58,760
미적분학을 아시는 분들은 주어진 입력에서 

261
00:12:58,760 --> 00:13:01,440
이 함수의 도함수를 얻을 수 있다는 것을 

262
00:13:01,440 --> 00:13:04,237
아실 것입니다. 그러나 해당 사실과 관련이 

263
00:13:04,237 --> 00:13:07,500
있고 거의 동등한 변환의 흥미로운 속성이 있습니다.

264
00:13:08,760 --> 00:13:12,170
어떤 각도로 교차하는 입력 공간의 두 

265
00:13:12,170 --> 00:13:15,419
선을 보고 변환 후 어떻게 변하는지 

266
00:13:15,419 --> 00:13:19,480
고려하면 여전히 같은 각도로 서로 교차합니다.

267
00:13:21,020 --> 00:13:23,628
선이 휘어질 수도 있지만 괜찮습니다. 

268
00:13:23,628 --> 00:13:27,229
그러나 중요한 부분은 선이 교차하는 각도가 변경되지 

269
00:13:27,229 --> 00:13:30,334
않고 유지된다는 점이며 이는 선택한 선 쌍에 

270
00:13:30,334 --> 00:13:31,080
해당됩니다.

271
00:13:34,780 --> 00:13:37,621
따라서 함수가 어디에서나 도함수를 갖는다고 

272
00:13:37,621 --> 00:13:40,700
말할 때 두 선이 교차할 때마다 두 선 사이의 

273
00:13:40,700 --> 00:13:43,661
각도는 변환 후에도 변경되지 않고 유지된다는 

274
00:13:43,661 --> 00:13:46,740
각도 보존 속성에 대해 생각해 보시기 바랍니다.

275
00:13:47,860 --> 00:13:50,608
한눈에 그리드 선이 바뀌는 모든 곡선이 

276
00:13:50,608 --> 00:13:53,231
여전히 직각으로 서로 교차하는 방식을 

277
00:13:53,231 --> 00:13:55,980
확인하면 가장 쉽게 이해할 수 있습니다.

278
00:13:58,580 --> 00:14:00,732
어디에서나 도함수가 있는 복잡한 함수를 

279
00:14:00,732 --> 00:14:03,178
해석적이라고 부르므로 이 해석적이라는 용어를 

280
00:14:03,178 --> 00:14:05,820
각도 보존을 의미하는 것으로 생각할 수 있습니다.

281
00:14:06,680 --> 00:14:08,266
물론, 나는 여기서 당신에게 약간의 거짓말을 

282
00:14:08,266 --> 00:14:09,980
하고 있습니다. 그러나 아주 약간의 거짓말입니다.

283
00:14:10,400 --> 00:14:13,367
전체 세부 사항을 원하는 분들을 위한 약간의 

284
00:14:13,367 --> 00:14:16,215
주의 사항은 함수의 도함수가 0인 입력에서 

285
00:14:16,215 --> 00:14:19,420
각도가 유지되는 대신 정수가 곱해진다는 것입니다.

286
00:14:20,600 --> 00:14:23,566
그러나 이러한 점은 극소수이며 분석 함수에 

287
00:14:23,566 --> 00:14:26,780
대한 거의 모든 입력에 대해 각도가 유지됩니다.

288
00:14:29,520 --> 00:14:31,980
따라서 내가 분석적이라고 말할 때 각도 보존을 

289
00:14:31,980 --> 00:14:34,440
생각한다면 그것은 훌륭한 직관이라고 생각합니다.

290
00:14:39,000 --> 00:14:41,146
자, 잠시 생각해 보면 이것이 제가 

291
00:14:41,146 --> 00:14:43,828
여러분이 정말로 높이 평가하고 싶은 점인데, 

292
00:14:43,828 --> 00:14:45,760
이것은 매우 제한적인 속성입니다.

293
00:14:46,420 --> 00:14:48,276
교차하는 선 쌍 사이의 각도는 

294
00:14:48,276 --> 00:14:50,680
변경되지 않은 상태로 유지되어야 합니다.

295
00:14:51,560 --> 00:14:53,522
그럼에도 불구하고 이름이 있는 거의 

296
00:14:53,522 --> 00:14:55,780
모든 기능은 분석적인 것으로 밝혀졌습니다.

297
00:14:58,420 --> 00:15:01,395
Riemann이 현대적인 형태로 확립하는 데 

298
00:15:01,395 --> 00:15:04,252
도움을 준 복합 분석 분야는 거의 전적으로 

299
00:15:04,252 --> 00:15:07,347
분석 기능의 속성을 활용하여 다른 수학과 과학 

300
00:15:07,347 --> 00:15:10,680
분야의 결과와 패턴을 이해하는 것에 관한 것입니다.

301
00:15:12,900 --> 00:15:15,720
평면의 오른쪽 절반에 있는 무한합으로 

302
00:15:15,720 --> 00:15:18,540
정의되는 제타 함수는 분석 함수입니다.

303
00:15:19,340 --> 00:15:21,980
그리드 선이 변환하는 모든 곡선이 여전히 

304
00:15:21,980 --> 00:15:24,620
서로 직각으로 교차하는 방식에 주목하세요.

305
00:15:28,100 --> 00:15:32,243
따라서 복잡한 함수에 대한 놀라운 사실은 분석 함수를 

306
00:15:32,243 --> 00:15:35,834
원래 정의된 영역 너머로 확장하려는 경우(예: 

307
00:15:35,834 --> 00:15:39,563
이 제타 함수를 평면의 왼쪽 절반으로 확장하려는 

308
00:15:39,563 --> 00:15:43,292
경우) 새로운 확장 함수가 필요하다는 것입니다. 

309
00:15:43,292 --> 00:15:45,916
여전히 분석적이어야 합니다. 즉, 

310
00:15:45,916 --> 00:15:48,816
각도는 여전히 모든 곳에서 유지되며, 

311
00:15:48,816 --> 00:15:52,960
확장이 존재하는 경우 가능한 확장은 하나만 강제됩니다.

312
00:15:53,500 --> 00:15:56,359
이는 각도를 유지해야 한다는 요구 사항이 

313
00:15:56,359 --> 00:15:59,094
각도를 확장하는 방법에 대한 단 하나의 

314
00:15:59,094 --> 00:16:02,700
선택에 갇히게 되는 무한 연속 직소 퍼즐과 같습니다.

315
00:16:04,400 --> 00:16:07,238
여전히 분석적이면서 가능한 유일한 방식으로 

316
00:16:07,238 --> 00:16:09,839
분석 기능을 확장하는 이러한 프로세스를 

317
00:16:09,839 --> 00:16:12,560
짐작할 수 있듯이 분석 연속이라고 합니다.

318
00:16:14,920 --> 00:16:17,720
이것이 전체 리만 제타 함수가 정의되는 방식입니다.

319
00:16:18,240 --> 00:16:20,333
실수 부분이 1보다 큰 평면의 오른쪽 

320
00:16:20,333 --> 00:16:22,727
절반에 있는 s 값의 경우 이를 이 합계에 

321
00:16:22,727 --> 00:16:25,220
연결하여 수렴되는 위치를 확인할 수 있습니다.

322
00:16:25,680 --> 00:16:28,201
그리고 그 수렴은 일종의 나선형처럼 보일 수 있습니다.

323
00:16:28,201 --> 00:16:30,386
 왜냐하면 이들 항 각각을 복소수 거듭제곱으로 

324
00:16:30,386 --> 00:16:32,740
올리면 각 항을 회전시키는 효과가 있기 때문입니다.

325
00:16:33,520 --> 00:16:36,094
그런 다음 평면의 나머지 부분에 대해 우리는 

326
00:16:36,094 --> 00:16:38,772
이 정의를 확장하여 함수가 여전히 분석적일 수 

327
00:16:38,772 --> 00:16:41,656
있도록, 즉 모든 단일 지점에서 각도를 유지하도록 

328
00:16:41,656 --> 00:16:44,540
하는 단 하나의 방법이 있다는 것을 알고 있습니다.

329
00:16:45,300 --> 00:16:48,777
그래서 우리는 정의에 따르면 평면의 왼쪽 절반에 있는 

330
00:16:48,777 --> 00:16:52,140
제타 함수는 그 확장이 무엇이든 상관없다고 말합니다.

331
00:16:52,960 --> 00:16:55,566
가능한 분석 연속은 단 하나뿐이므로 

332
00:16:55,566 --> 00:16:57,260
이는 유효한 정의입니다.

333
00:16:58,600 --> 00:17:00,900
이는 매우 암묵적인 정의입니다.

334
00:17:01,420 --> 00:17:03,624
단지 이 직소 퍼즐의 해결책을 사용하라고 

335
00:17:03,624 --> 00:17:05,924
말할 뿐입니다. 이는 보다 추상적인 파생을 

336
00:17:05,924 --> 00:17:08,319
통해 존재해야 한다는 것을 알고 있지만 이를 

337
00:17:08,319 --> 00:17:10,619
해결하는 방법을 정확히 지정하지는 않습니다.

338
00:17:11,160 --> 00:17:13,990
수학자들은 이 확장이 어떻게 생겼는지 꽤 잘 이해하고 

339
00:17:13,990 --> 00:17:16,819
있지만, 일부 중요한 부분은 미스터리로 남아 있습니다.

340
00:17:17,339 --> 00:17:18,940
사실 백만 달러짜리 미스터리입니다.

341
00:17:19,640 --> 00:17:21,615
실제로 잠시 시간을 내어 백만 달러짜리 

342
00:17:21,615 --> 00:17:23,859
문제인 리만 가설에 대해 이야기해 보겠습니다.

343
00:17:24,980 --> 00:17:29,130
이 함수가 0인 위치, 즉 변환 후 어떤 

344
00:17:29,130 --> 00:17:33,280
점이 원점에 매핑되는지가 매우 중요합니다.

345
00:17:34,480 --> 00:17:36,870
이 확장에 대해 우리가 아는 한 가지는 

346
00:17:36,870 --> 00:17:39,260
음의 짝수는 0으로 매핑된다는 것입니다.

347
00:17:41,160 --> 00:17:43,560
이를 일반적으로 사소한 0이라고 합니다.

348
00:17:44,300 --> 00:17:47,306
여기서 명명된 이름은 처음부터 전혀 명백하지 

349
00:17:47,306 --> 00:17:50,433
않은 사실일지라도 아주 잘 이해하면 사소하다고 

350
00:17:50,433 --> 00:17:53,560
부르는 수학자들의 오랜 전통에서 비롯되었습니다.

351
00:17:54,560 --> 00:17:57,863
우리는 또한 0으로 매핑되는 나머지 점들이 임계 

352
00:17:57,863 --> 00:18:01,044
스트립이라고 불리는 이 수직 스트립의 어딘가에 

353
00:18:01,044 --> 00:18:04,102
있고 이러한 중요하지 않은 0의 특정 배치가 

354
00:18:04,102 --> 00:18:07,528
소수에 대한 놀라운 정보를 인코딩한다는 것을 알고 

355
00:18:07,528 --> 00:18:08,140
있습니다.

356
00:18:09,120 --> 00:18:11,477
실제로 이 함수가 소수에 대해 그토록 많은 정보를 

357
00:18:11,477 --> 00:18:13,162
전달하는 이유는 매우 흥미롭습니다. 

358
00:18:13,162 --> 00:18:15,435
나중에 그에 대한 비디오를 만들 것이라고 확실히 

359
00:18:15,435 --> 00:18:17,877
생각하지만 지금은 내용이 너무 길어서 설명하지 않고 

360
00:18:17,877 --> 00:18:18,720
그대로 두겠습니다.

361
00:18:19,780 --> 00:18:22,771
리만(Riemann)은 이 모든 중요하지 않은 

362
00:18:22,771 --> 00:18:25,533
0이 띠의 중앙, 즉 실수 부분이 1/2인 

363
00:18:25,533 --> 00:18:28,640
숫자 s 선에 바로 위치한다는 가설을 세웠습니다.

364
00:18:29,460 --> 00:18:30,880
이를 임계선이라고 합니다.

365
00:18:31,780 --> 00:18:34,413
그것이 사실이라면, 우리는 소수의 패턴뿐만 

366
00:18:34,413 --> 00:18:36,936
아니라 이것에서 비롯된 수학의 다른 많은 

367
00:18:36,936 --> 00:18:39,460
패턴을 매우 정확하게 이해할 수 있습니다.

368
00:18:40,340 --> 00:18:43,276
지금까지 제타 함수가 어떻게 생겼는지 보여줬을 

369
00:18:43,276 --> 00:18:46,212
때 화면의 그리드 부분에 어떤 역할을 하는지만 

370
00:18:46,212 --> 00:18:49,600
보여주었기 때문에 그 복잡성이 너무 과소평가되었습니다.

371
00:18:50,320 --> 00:18:53,480
따라서 이 중요한 선을 강조하고 변환을 적용하면 

372
00:18:53,480 --> 00:18:56,640
전혀 원점을 넘지 않는 것처럼 보일 수 있습니다.

373
00:18:57,200 --> 00:18:59,507
그러나 점점 더 많은 라인이 

374
00:18:59,507 --> 00:19:01,960
변형된 버전은 다음과 같습니다.

375
00:19:06,440 --> 00:19:08,293
그것이 어떻게 숫자 0을 여러 

376
00:19:08,293 --> 00:19:09,820
번 통과하는지 주목하세요.

377
00:19:10,500 --> 00:19:12,898
중요한 0이 모두 이 선 어딘가에 있다는 

378
00:19:12,898 --> 00:19:15,297
것을 증명할 수 있다면 Clay Math 

379
00:19:15,297 --> 00:19:17,800
Institute에서 백만 달러를 드립니다.

380
00:19:18,240 --> 00:19:20,579
그리고 당신은 또한 이 가설이 사실이라는 

381
00:19:20,579 --> 00:19:22,512
것을 조건으로 이미 입증된 수백, 

382
00:19:22,512 --> 00:19:25,360
수천 개의 현대 수학 결과를 증명하게 될 것입니다.

383
00:19:26,520 --> 00:19:29,177
이 확장 함수에 대해 우리가 아는 또 다른 사실은 

384
00:19:29,177 --> 00:19:31,645
음수 1의 점을 음의 12분의 1로 매핑한다는 

385
00:19:31,645 --> 00:19:32,120
것입니다.

386
00:19:34,160 --> 00:19:36,671
이것을 원래 합에 대입하면 1 더하기 2 

387
00:19:36,671 --> 00:19:39,182
더하기 3 더하기 4가 계속해서 무한대로 

388
00:19:39,182 --> 00:19:42,240
마이너스 1/12가 된다고 말하는 것처럼 보입니다.

389
00:19:42,240 --> 00:19:45,131
이제 평면의 왼쪽 절반에 있는 제타 함수의 정의가 

390
00:19:45,131 --> 00:19:48,125
이 합에서 직접 정의되지 않기 때문에 이를 합이라고 

391
00:19:48,125 --> 00:19:51,120
부르는 것이 솔직하지 않은 것처럼 보일 수 있습니다.

392
00:19:51,740 --> 00:19:54,179
대신, 수렴하는 영역을 넘어 합계를 

393
00:19:54,179 --> 00:19:56,620
분석적으로 계속하는 데서 비롯됩니다.

394
00:19:57,120 --> 00:19:58,980
즉, 비행기의 오른쪽 절반에서 

395
00:19:58,980 --> 00:20:01,060
시작된 직소 퍼즐을 푸는 것입니다.

396
00:20:01,880 --> 00:20:04,186
즉, 이 분석 연속의 고유성, 

397
00:20:04,186 --> 00:20:07,441
직소 퍼즐에 단 하나의 해가 있다는 사실은 

398
00:20:07,441 --> 00:20:10,290
이러한 확장된 값과 원래 합계 사이의 

399
00:20:10,290 --> 00:20:14,360
본질적인 연결을 매우 암시한다는 점을 인정해야 합니다.

