1
00:00:03,860 --> 00:00:06,080
리만 제타 함수

2
00:00:06,220 --> 00:00:08,140
많이 들어보긴 했지만

3
00:00:08,140 --> 00:00:09,440
현대 수학의 주제들 중에서

4
00:00:09,440 --> 00:00:11,960
가장 이해하기 어려운 것 중 하나입니다.

5
00:00:11,960 --> 00:00:13,760
지금 이 그림을 모른다고 걱정하지 마세요.

6
00:00:13,760 --> 00:00:15,760
이제부터 이 그래프가 뭔지 설명해 드리겠습니다.

7
00:00:15,769 --> 00:00:17,390
많은 사람들이 이 함수에 대해 알고 있는데

8
00:00:17,390 --> 00:00:18,650
이 함수가 백만 달러의 상금이 달려 있다는 밀레니엄 난제와 관련있기 때문일겁니다.

9
00:00:18,650 --> 00:00:20,690
이 함수가 백만 달러의 상금이 달려 있다는 밀레니엄 난제와 관련있기 때문일겁니다.

10
00:00:20,690 --> 00:00:23,840
화면에 보이는 식(리만 제타 함수)이 0이 되는 값을 구하는 문제로, 리만 가설 이라고 하죠.

11
00:00:23,840 --> 00:00:25,600
화면에 보이는 식(리만 제타 함수)이 0이 되는 값을 구하는 문제로, 리만 가설 이라고 하죠.

12
00:00:25,700 --> 00:00:28,800
누군가는 이 함수를 1 + 2 + 3 + 4 + ... 라는 합에 대한

13
00:00:28,800 --> 00:00:32,700
신기한 결과와 연관이 있다는 것도 알고 있을 것입니다.

14
00:00:32,960 --> 00:00:35,059
당신이 직관적으로 보더라도

15
00:00:35,059 --> 00:00:37,670
이 합의 결과가 -1/12이 된다는 것은

16
00:00:37,670 --> 00:00:40,999
완전히 틀렸거나 넌센스로 보일 것입니다.

17
00:00:40,999 --> 00:00:43,500
하지만 이 수식의 정당성을 함의해줄 수 있는

18
00:00:43,500 --> 00:00:46,700
수학적 논의가 리만 제타 함수를 정의하는 데 쓰입니다.

19
00:00:46,800 --> 00:00:48,710
하지만 수학을 취미로 공부하는 사람들은

20
00:00:48,710 --> 00:00:50,030
이에 대한 내용을 읽으려 할 때

21
00:00:50,030 --> 00:00:52,639
굉장히 비직관적인 아이디어를 담고 있는 용어,

22
00:00:52,639 --> 00:00:55,100
"해석적 연속" 을 보게 되죠.

23
00:00:55,100 --> 00:00:57,350
이는 복소함수에서 쓰이는 용어이고,

24
00:00:57,350 --> 00:01:00,800
불분명하고, 비직관적이죠.

25
00:01:00,900 --> 00:01:04,010
제가 여기서 할 것은 당신에게

26
00:01:04,010 --> 00:01:05,750
제타 함수가 정말로 어떻게 생겼는지를 보여주고

27
00:01:05,750 --> 00:01:08,270
해석적 연속이라는 아이디어에 대해

28
00:01:08,270 --> 00:01:10,700
보다 시각적이고 직관적인 방법으로

29
00:01:10,700 --> 00:01:12,500
설명해줄 것입니다.

30
00:01:14,000 --> 00:01:15,900
저는 당신이 복소수에 대해 알고 있고

31
00:01:15,900 --> 00:01:18,000
그것을 별 문제 없이 잘 다룰 수 있다고 가정할 것입니다.

32
00:01:18,000 --> 00:01:20,900
그리고 미적분에 대해서도 알아야 한다고 말하고 싶으나

33
00:01:20,900 --> 00:01:23,700
(해석적 연속이 미분과 큰 연관성을 가지고 있기 때문에)

34
00:01:23,700 --> 00:01:26,600
제가 영상으로 표현하는 과정을 생각해볼 때

35
00:01:26,600 --> 00:01:28,800
어쩌면 별로 큰 문제가 없을지도 모릅니다.

36
00:01:28,900 --> 00:01:30,410
그래서 이제부터 시작해봅시다.

37
00:01:30,410 --> 00:01:32,400
제타 함수의 정의를 보면,

38
00:01:32,400 --> 00:01:34,730
어떤 정의역에 대해

39
00:01:34,730 --> 00:01:37,310
변수를 보통 s라 표기하고
(역자 : 수학자들이 리만의 노테이션을 따름)

40
00:01:37,310 --> 00:01:39,860
1/1^s(언제나 1)

41
00:01:39,860 --> 00:01:43,010
더하기 1/2^s 더하기 1/3^s

42
00:01:43,010 --> 00:01:46,220
더하기 1/4^s ...를 반복하여

43
00:01:46,220 --> 00:01:50,500
모든 자연수에 대해 반복한 것이 함숫값입니다.

44
00:01:50,500 --> 00:01:52,540
예를 들어서, 변수 s에

45
00:01:52,540 --> 00:01:54,120
2를 넣는다고 하면,

46
00:01:54,120 --> 00:01:56,700
함숫값은 1에

47
00:01:56,710 --> 00:02:01,030
+ 1/4 + 1/9 + 1/16 + ... 를 더하는 것이고,

48
00:02:01,030 --> 00:02:02,140
이렇게 계속 제곱수의

49
00:02:02,140 --> 00:02:04,420
역수의 합을 더해보다 보면

50
00:02:04,420 --> 00:02:06,940
π^2/6 로 수렴하게 됩니다.

51
00:02:06,940 --> 00:02:10,509
이것은 약 1.645이고, 여기서

52
00:02:10,509 --> 00:02:12,340
왜 π가 나오는지에 대한 굉장히 아름다운 논증을

53
00:02:12,340 --> 00:02:14,350
알고 있고, 나중에 만들 영상에서 이를 다룰지도 모르나

54
00:02:14,350 --> 00:02:16,000
이정도는 그저 이 함수가 얼마나

55
00:02:16,000 --> 00:02:18,310
아름다운지에 대한 빙산의 일각일 뿐입니다.

56
00:02:18,310 --> 00:02:20,020
이 함수는 같은 방법으로

57
00:02:20,020 --> 00:02:22,660
변수 s에 3이나 4를 넣어서

58
00:02:22,660 --> 00:02:23,920
때때로 다른 흥미로운 결과들을 보게 되죠.

59
00:02:23,920 --> 00:02:26,530
일단 지금까지의 모든 방법론은

60
00:02:26,530 --> 00:02:28,180
충분히 합리적으로 보입니다. 그저

61
00:02:28,180 --> 00:02:30,070
작아지고 더 작아지는 수열에 대해

62
00:02:30,070 --> 00:02:31,900
더해서 값을 구하는 것 뿐이니까요...

63
00:02:31,900 --> 00:02:34,600
좋네요. 지금까지 완벽합니다.

64
00:02:34,600 --> 00:02:37,150
하지만, 제타 함수에 대한 내용을 읽어보면

65
00:02:37,150 --> 00:02:40,600
제타함수의 -1값이 -1/12라고 하는데요,

66
00:02:40,680 --> 00:02:42,880
이것은 무한합으로 볼 때

67
00:02:42,880 --> 00:02:45,280
전혀 말이 되지 않죠. 만약에

68
00:02:45,280 --> 00:02:46,750
함수의 정의에 -1을 대입해서

69
00:02:46,750 --> 00:02:52,360
분수를 뒤집게 되면, 1 + 2 + 3 + 4 + ... 라는

70
00:02:52,360 --> 00:02:55,740
모든 자연수의 합이란 결과를 얻고

71
00:02:55,750 --> 00:02:57,549
이것은 자명하게도 어디에도 수렴하지 않죠.

72
00:02:57,549 --> 00:03:00,909
적어도 -1/12는 아니죠, 안그래요?

73
00:03:00,909 --> 00:03:03,420
그리고, 리만 가설에 돈이 달려 있다는

74
00:03:03,430 --> 00:03:05,560
말만 듣고 온 사람들은, 이 함수가

75
00:03:05,560 --> 00:03:08,769
"음수인 짝수에서 자명한 영점"
을 갖는다는 말을 들었을 것입니다.

76
00:03:08,769 --> 00:03:10,930
예를 들어서, 이 리만 제타 함수에

77
00:03:10,930 --> 00:03:14,080
-2를 넣으면 0이 된다는 것인

78
00:03:14,080 --> 00:03:15,980
하지만 여기에 -2를 대입해본다면

79
00:03:15,980 --> 00:03:20,019
1 + 4 + 9 + 16 + ... 라는 값을 얻게 되고, 이것도 또한

80
00:03:20,019 --> 00:03:22,299
자명하게도 어디에도 수렴하지 않습니다.

81
00:03:22,299 --> 00:03:23,800
적어도 0은 아니죠. 그렇죠?

82
00:03:24,200 --> 00:03:27,300
그... 몇분 뒤에 이것에 대해서 말해주겠지만

83
00:03:27,300 --> 00:03:29,890
지금은 일단 이 함수가 잘 정의되는

84
00:03:29,890 --> 00:03:31,090
합리적인 경우는

85
00:03:31,090 --> 00:03:34,200
함수의 정의역인 s가 1 이상인 경우,

86
00:03:34,200 --> 00:03:36,200
이 무한합이 수렴할 경우라고 합시다.

87
00:03:36,200 --> 00:03:38,860
지금까진, 도저히 다른 경우에 대해서는

88
00:03:38,860 --> 00:03:40,180
생각해낼 수 없습니다.

89
00:03:40,180 --> 00:03:43,420
이제부턴 베른하르트 리만 이야기를 해보겠습니다.

90
00:03:43,420 --> 00:03:45,310
그는 복소해석학의 아버지라고 불리우는데

91
00:03:45,310 --> 00:03:47,380
복소해석학은 함수를 연구하는 학문 중에서도

92
00:03:47,380 --> 00:03:50,000
특히 복소수를 정의역과 치역으로 갖는
함수를 연구하는 학문입니다.

93
00:03:50,000 --> 00:03:52,220
그래서 리만이 리만 제타 함수를 생각했을 땐

94
00:03:52,220 --> 00:03:54,170
무한합으로서 정의되는, s에 대해

95
00:03:54,170 --> 00:03:56,180
실수에서 실수로 가는 함수로 정의했다

96
00:03:56,180 --> 00:03:57,800
라고 생각했다기 보단,

97
00:03:57,800 --> 00:03:59,900
그는 이 함수에 대한 주요 목적을

98
00:03:59,900 --> 00:04:02,900
변수 s를 복소수로 확장했을 때 어떤 일이 일어나는가

99
00:04:02,900 --> 00:04:05,570
에 두고 생각했을 것입니다. 이제 한번

100
00:04:05,570 --> 00:04:08,209
2를 대입하는 대신, 2 + i 를 대입해보죠.

101
00:04:10,000 --> 00:04:12,230
만약에 당신이 복소수를 지수를 가지는

102
00:04:12,230 --> 00:04:14,700
형태에 대해서 익숙하지 않다면,

103
00:04:14,700 --> 00:04:16,400
당신은 이것을 굉장히 이상하다고 생각할 것입니다.

104
00:04:16,400 --> 00:04:19,500
더 이상 곱을 이만큼 반복하라는
개념으로서는 생각할 수 없을 테니까요.

105
00:04:21,620 --> 00:04:23,400
하지만 수학자들은 지수라는 개념에 대해

106
00:04:23,400 --> 00:04:26,300
굉장히 자연적인 정의의 확장을 생각해 냈습니다.

107
00:04:26,300 --> 00:04:30,800
익숙한 실수에서 복소수로도 생각할 수 있게요.

108
00:04:33,000 --> 00:04:35,960
이것이 이 영상을 이해하는 데

109
00:04:35,960 --> 00:04:37,600
굉장히 중요한 것은 아니지만

110
00:04:37,600 --> 00:04:41,000
저는 여기서 이것에 대한 요지 정도만 요약하고 싶네요.

111
00:04:41,060 --> 00:04:43,300
기본적인 아이디어는 이런 겁니다.

112
00:04:43,400 --> 00:04:47,400
1/2의 2+i 제곱이라고 한다면, 둘을 나눠서

113
00:04:47,680 --> 00:04:51,440
1/2의 i제곱이란 순허수 부분으로 나누는 것입니다.

114
00:04:52,020 --> 00:04:55,520
실수 부분에는 어떤 문제도 없습니다.

115
00:04:55,520 --> 00:04:59,780
하지만 순허수 부분에 대해서는 어떻게 해야 할까요?

116
00:04:59,780 --> 00:05:00,640
 

117
00:05:00,640 --> 00:05:02,520
 

118
00:05:02,520 --> 00:05:05,820
이것의 결과는, 어떤 복소 평면 상의 단위원 위의 값

119
00:05:05,820 --> 00:05:08,960
(역자 : 변수 θ가 있다 할 때 cosθ + isinθ) 중 하나가 됩니다.

120
00:05:09,460 --> 00:05:13,960
당신이 순허수에 있는 변수를 위아래로 움직일때,

121
00:05:13,960 --> 00:05:17,520
함숫값은 단위원의 좌표를 돌게 됩니다.

122
00:05:21,240 --> 00:05:23,080
1/2 등의 큰 수일 수록

123
00:05:23,260 --> 00:05:26,400
함수는 단위원의 좌표를 더 느리게 움직이고,

124
00:05:26,940 --> 00:05:30,480
1/9 같은 작은 수일수록

125
00:05:30,480 --> 00:05:38,220
함수는 단위원의 좌표를 더 빠르게 움직입니다.

126
00:05:39,300 --> 00:05:40,560
만약 이런 내용을 단 한번도 들어본 적이 없고,

127
00:05:40,560 --> 00:05:42,300
왜 이렇게 되는지 궁금하다면,

128
00:05:42,300 --> 00:05:43,760
제가 예전에 만든 영상 중에

129
00:05:43,760 --> 00:05:45,280
이것을 다룬 것이 있으니 보시길 바랍니다.

130
00:05:45,280 --> 00:05:48,540
이 영상에서는 이것에 대해 그냥 넘기겠습니다.

131
00:05:49,100 --> 00:05:50,360
여기서 기억해야 할 중요한 사실은

132
00:05:50,360 --> 00:05:52,660
(1/2)^(2+i) 같은 수를 나눈 상황에서,

133
00:05:52,660 --> 00:05:54,470
(1/2)^i 부분은 단위원 위에 있을 것이고,

134
00:05:54,470 --> 00:05:56,720
따라서 절댓값이 1이 된다는 것입니다.

135
00:05:56,720 --> 00:06:01,600
(역자 : 수학자들이 절댓값을 일반화한 norm을 고안했는데,
이를 통해서 복소수 상에서도 절댓값이 가지는 특정한 성질들을 보존할 수 있게 되었음.
복소수의 norm은 a+bi에 대해 √a^2+b^2

136
00:06:01,940 --> 00:06:06,139
그래서 이 허수 부분을 곱한다 해도,

137
00:06:06,139 --> 00:06:07,759
그 크기는 변하지 않고,

138
00:06:07,759 --> 00:06:09,889
오직 방향만이 변하게 된다는 것입니다.

139
00:06:09,889 --> 00:06:14,760
오직 방향만이 변하게 된다는 것입니다.

140
00:06:14,760 --> 00:06:17,730
이제 제타 함수에 2+i를 대입하고,

141
00:06:17,730 --> 00:06:19,890
차근차근 생각해 보죠.

142
00:06:19,890 --> 00:06:22,260
일단 각 항목에 제곱을 취한 후

143
00:06:22,260 --> 00:06:24,630
각 항의 길이를 시각화 하여

144
00:06:24,630 --> 00:06:31,200
x축 위에 올려 놓는 것을 상상 할 수 있습니다. 그리고 그 길이는

145
00:06:31,200 --> 00:06:33,510
전에 말했듯이 π^2/6으로 수렴합니다.

146
00:06:33,510 --> 00:06:36,090
이제 2에서 2+i로 값을 바꿔서

147
00:06:36,090 --> 00:06:39,090
각각의 선들의 방향을 변환하는 것입니다.

148
00:06:39,090 --> 00:06:41,610
여기서 중요한 점은,

149
00:06:41,610 --> 00:06:43,740
크기가 변하는 것이 아니기 때문에

150
00:06:43,740 --> 00:06:46,500
이 급수도 결국 수렴한다는 것이며,

151
00:06:46,500 --> 00:06:48,690
나선(와선) 형태를 그리며 복소평면의 특정한 점에 수렴하게 됩니다.

152
00:06:48,690 --> 00:06:51,540
나선(와선) 형태를 그리며 복소평면의 특정한 점에 수렴하게 됩니다.

153
00:06:51,540 --> 00:06:53,340
이제 s가 바뀌면 어떻게 되는지 보여드리겠습니다.

154
00:06:53,340 --> 00:06:55,560
복소평면의 노란 점은 s를 나타냅니다.

155
00:06:55,560 --> 00:06:57,990
그리고 나선형의 끝에 있는 점은, ζ(s), 즉 이 합계가 어디로 수렴하는지 보여줍니다.

156
00:06:57,990 --> 00:06:59,040
그리고 나선형의 끝에 있는 점은, ζ(s), 즉 이 합계가 어디로 수렴하는지 보여줍니다.

157
00:06:59,040 --> 00:07:12,990
그리고 나선형의 끝에 있는 점은, ζ(s), 즉 이 합계가 어디로 수렴하는지 보여줍니다.

158
00:07:12,990 --> 00:07:16,110
다시말해,  ζ(s)는 무한합에 의한 정의로서

159
00:07:16,110 --> 00:07:18,390
다시말해,  ζ(s)는 무한합에 의한 정의로서

160
00:07:18,390 --> 00:07:20,850
실수부가 1 이상이라는 가정 하에는 아주 합리적인 함수가 된다는 것입니다.

161
00:07:20,850 --> 00:07:22,830
실수부가 1 이상이라는 가정 하에는 아주 합리적인 함수가 된다는 것입니다.

162
00:07:22,830 --> 00:07:26,370
즉, s는 복소평면에서 오른쪽 절반에 위치하게 됩니다.

163
00:07:26,370 --> 00:07:28,900
즉, s는 복소평면에서 오른쪽 절반에 위치하게 됩니다.

164
00:07:28,900 --> 00:07:31,080
다시한번 말하자면, s의 실수부는 크기를 결정하고

165
00:07:31,080 --> 00:07:33,180
다시한번 말하자면, s의 실수부는 크기를 결정하고

166
00:07:33,180 --> 00:07:35,250
s의 허수부는 방향(회전)만을 결정합니다.

167
00:07:35,250 --> 00:07:38,270
s의 허수부는 방향(회전)만을 결정합니다.

168
00:07:38,270 --> 00:07:40,200
이제 이 기능을 시각화 해봅시다.

169
00:07:40,200 --> 00:07:42,990
이제 이 기능을 시각화 해봅시다.

170
00:07:42,990 --> 00:07:44,820
복소평면의 오른쪽 절반(s의 실수부가 1보다 큰 영역)에 주어진 숫자를 넣으면

171
00:07:44,820 --> 00:07:47,220
복소평면의 오른쪽 절반(s의 실수부가 1보다 큰 영역)에 주어진 숫자를 넣으면

172
00:07:47,220 --> 00:07:49,860
이 함수는 복소평면의 다른 숫자를 출력할 겁니다.

173
00:07:49,860 --> 00:07:51,750
복잡한 함수를 이해하는 가장 좋은 방법은 시각화하는 것입니다.

174
00:07:51,750 --> 00:07:53,670
복잡한 함수를 이해하는 가장 좋은 방법은 시각화하는 것입니다.

175
00:07:53,670 --> 00:07:55,860
복잡한 함수를 이해하는 가장 좋은 방법은 시각화하는 것입니다.

176
00:07:55,860 --> 00:07:58,260
함수에 넣을 수 있는 모든 점들을 함수에 넣고

177
00:07:58,260 --> 00:07:59,820
그 함수에 넣은 점들의 위치를

178
00:07:59,820 --> 00:08:02,760
각각의 출력값으로 이동 시키는겁니다.

179
00:08:02,760 --> 00:08:03,720
ζ(s)보다 간단한 함수를 시각화 해봅시다.

180
00:08:03,720 --> 00:08:05,430
ζ(s)보다 간단한 함수를 시각화 해봅시다.

181
00:08:05,430 --> 00:08:09,310
f(s) = s^2 함수에 2를 대입하면

182
00:08:09,310 --> 00:08:11,040
f(s) = s^2 함수에 2를 대입하면

183
00:08:11,040 --> 00:08:13,590
4를 얻게 됩니다. 따라서 2에 표시된 점은 4(결과값)로 이동합니다.

184
00:08:13,590 --> 00:08:16,020
4를 얻게 됩니다. 따라서 2에 표시된 점은 4(결과값)로 이동합니다.

185
00:08:16,020 --> 00:08:19,830
-1을 대입하면 을 1얻게 되며

186
00:08:19,830 --> 00:08:21,480
-1에 표시한 노란 점은 1(결과값)로 이동합니다.

187
00:08:21,480 --> 00:08:24,000
-1에 표시한 노란 점은 1(결과값)로 이동합니다.

188
00:08:24,000 --> 00:08:25,740
i를 대입하면 -1이 되므로

189
00:08:25,740 --> 00:08:28,880
i를 대입하면 -1이 되므로

190
00:08:28,880 --> 00:08:31,500
i에 표시된 노란 점은 -1(결과값)로 이동합니다.

191
00:08:32,500 --> 00:08:33,450
이제 더 다양한 색채의 눈금을 추가하겠습니다.

192
00:08:33,450 --> 00:08:35,040
이제 더 다양한 색채의 눈금을 추가하겠습니다.

193
00:08:35,040 --> 00:08:36,510
복소 평면을 이동할 때 각 라인들이 어떻게 움직이는지 더 잘 이해할 수 있게 말이죠.

194
00:08:36,510 --> 00:08:37,920
복소 평면을 이동할 때 각 라인들이 어떻게 움직이는지 더 잘 이해할 수 있게 말이죠.

195
00:08:37,920 --> 00:08:40,800
복소 평면을 이동할 때 각 라인들이 어떻게 움직이는지 더 잘 이해할 수 있게 말이죠.

196
00:08:40,800 --> 00:08:43,630
우선 평면 위에 우리가 대입했던 모든 점을 올려놓고

197
00:08:43,630 --> 00:08:44,130
각 점을 컴퓨터를 통해 결과값으로 이동시키겠습니다.

198
00:08:44,130 --> 00:08:45,990
각 점을 컴퓨터를 통해 결과값으로 이동시키겠습니다.

199
00:08:45,990 --> 00:08:50,000
각 점을 컴퓨터를 통해 결과값으로 이동시키겠습니다.

200
00:08:50,000 --> 00:08:51,200
그리고 이것이 최종 결과입니다.

201
00:08:55,350 --> 00:08:57,300
한번에 이해하시기 힘들테니 다시한번 해 보겠습니다.

202
00:08:57,300 --> 00:08:59,100
한번에 이해하시기 힘들테니 다시한번 해 보겠습니다.

203
00:08:59,100 --> 00:09:01,560
그리고 이번에는 표시된 점들이 자신의 제곱수로 어떻게 움직이는지 잘 보세요.

204
00:09:01,560 --> 00:09:03,600
그리고 이번에는 표시된 점들이 자신의 제곱수로 어떻게 움직이는지 잘 보세요.

205
00:09:03,600 --> 00:09:07,620
그리고 이번에는 표시된 점들이 자신의 제곱수로 어떻게 움직이는지 잘 보세요.

206
00:09:07,620 --> 00:09:09,210
동시에 모든 포인트를 관찰하는 것이 어려울수도 있지만

207
00:09:09,210 --> 00:09:11,760
동시에 모든 포인트를 관찰하는 것이 어려울수도 있지만

208
00:09:11,760 --> 00:09:13,530
이것은 복소함수가 어떤 것인지 조금 더 직관적으로 이해할 수 있게 해줍니다.

209
00:09:13,530 --> 00:09:15,360
이것은 복소함수가 어떤 것인지 조금 더 직관적으로 이해할 수 있게 해줍니다.

210
00:09:15,360 --> 00:09:19,300
이 모든게 2차원 평면에서 이루어지죠.

211
00:09:20,300 --> 00:09:21,420
자 이제 제타 함수로 넘어가죠.

212
00:09:21,420 --> 00:09:23,850
우리는 이 무한합의 정의역을 복소수 범위로 확장했고

213
00:09:23,850 --> 00:09:25,770
우리는 이 무한합의 정의역을 복소수 범위로 확장했고

214
00:09:25,770 --> 00:09:27,630
실수부가 1 이상일 경우 이 무한합이 어느 점에 수렴한다는 것을 알아냈습니다.

215
00:09:27,630 --> 00:09:29,880
실수부가 1 이상일 경우 이 무한합이 어느 점에 수렴한다는 것을 알아냈습니다.

216
00:09:29,880 --> 00:09:31,860
실수부가 1 이상일 경우 이 무한합이 어느 점에 수렴한다는 것을 알아냈습니다.

217
00:09:31,860 --> 00:09:33,960
그리고 시각화 했을때 그 값은 나선을 그려가며 수렴하는 것도 알아냈죠.

218
00:09:33,960 --> 00:09:36,540
그리고 시각화 했을때 그 값은 나선을 그려가며 수렴하는 것도 알아냈죠.

219
00:09:36,540 --> 00:09:38,400
자, 이 함수를 시각화하기 위해

220
00:09:38,400 --> 00:09:40,320
실수부가 1 이상인 복소평면의 오른쪽 부분에 격자선을 표시해둔 뒤에

221
00:09:40,320 --> 00:09:42,300
실수부가 1 이상인 복소평면의 오른쪽 부분에 격자선을 표시해둔 뒤에

222
00:09:42,300 --> 00:09:44,640
실수부가 1 이상인 복소평면의 오른쪽 부분에 격자선을 표시해둔 뒤에

223
00:09:44,640 --> 00:09:46,320
컴퓨터를 통해 각각의 점(s)이 제타함수에 대응하는 점으로 가도록 해두었습니다.

224
00:09:46,320 --> 00:09:48,700
컴퓨터를 통해 각각의 점(s)이 제타함수에 대응하는 점으로 가도록 해두었습니다.

225
00:09:48,700 --> 00:09:50,520
여기에 추가적으로 더 세밀한 격자를 추하하는 것이 도움이 될겁니다.

226
00:09:50,520 --> 00:09:52,320
여기에 추가적으로 더 세밀한 격자를 추하하는 것이 도움이 될겁니다.

227
00:09:52,320 --> 00:09:54,150
이 부분은 바깥쪽으로 많이 뻗어나가기 때문입니다.

228
00:09:54,150 --> 00:09:56,730
이 부분은 바깥쪽으로 많이 뻗어나가기 때문입니다.

229
00:10:00,700 --> 00:10:01,770
그리고 이제 이것이 얼마나 아름다운지 알아보도록 하죠.

230
00:10:01,770 --> 00:10:03,780
그리고 이제 이것이 얼마나 아름다운지 알아보도록 하죠.

231
00:10:03,780 --> 00:10:06,210
당신이 이걸 보고도 복소함수에대해 더 배우고싶어하지 않는다면

232
00:10:06,210 --> 00:10:07,760
당신이 이걸 보고도 복소함수에대해 더 배우고싶어하지 않는다면

233
00:10:07,770 --> 00:10:10,620
당신은 냉혈한입니다.

234
00:10:10,620 --> 00:10:12,180
하지만, 이 격자선들은 왼쪽으로 뻗어나가다가 멈춰진 것처럼 보입니다.

235
00:10:12,180 --> 00:10:17,200
하지만, 이 격자선들은 왼쪽으로 뻗어나가다가 멈춰진 것처럼 보입니다.

236
00:10:17,200 --> 00:10:17,970
지금 이 선들 중에서 허수부가 i와 -i인 것만을 강조해서 표시해보겠습니다.

237
00:10:17,970 --> 00:10:19,800
지금 이 선들 중에서 허수부가 i와 -i인 것만을 강조해서 표시해보겠습니다.

238
00:10:19,800 --> 00:10:21,690
지금 이 선들 중에서 허수부가 i와 -i인 것만을 강조해서 표시해보겠습니다.

239
00:10:21,690 --> 00:10:26,600
지금 이 선들 중에서 허수부가 i와 -i인 것만을 강조해서 표시해보겠습니다.

240
00:10:27,600 --> 00:10:29,580
변환을 해놓고 보니 두개의 아름다운 호가 보이지만 그리다가 멈춘것 처럼 보입니다.

241
00:10:29,580 --> 00:10:31,590
변환을 해놓고 보니 두개의 아름다운 호가 보이지만 그리다가 멈춘것 처럼 보입니다.

242
00:10:31,590 --> 00:10:32,790
변환을 해놓고 보니 두개의 아름다운 호가 보이지만 그리다가 멈춘것 처럼 보입니다.

243
00:10:32,790 --> 00:10:34,770
그냥... 이 곡선을... 계속 그려보고 싶지 않나요?

244
00:10:34,770 --> 00:10:37,000
그냥... 이 곡선을... 계속 그려보고 싶지 않나요?

245
00:10:37,000 --> 00:10:40,020
어쩌면, 이 함수가 조금 수정된 버전을 생각해볼 수도 있을 겁니다

246
00:10:40,020 --> 00:10:42,360
평면의 왼쪽 부분도 오른쪽처럼 이쁜 모양을 그릴 수 있게 함수의 정의역을 확장시켜서요.

247
00:10:42,360 --> 00:10:44,580
평면의 왼쪽 부분도 오른쪽처럼 이쁜 모양을 그릴 수 있게 함수의 정의역을 확장시켜서요.

248
00:10:44,580 --> 00:10:46,140
평면의 왼쪽 부분도 오른쪽처럼 이쁜 모양을 그릴 수 있게 함수의 정의역을 확장시켜서요.

249
00:10:46,140 --> 00:10:47,900
평면의 왼쪽 부분도 오른쪽처럼 이쁜 모양을 그릴 수 있게 함수의 정의역을 확장시켜서요.

250
00:10:47,900 --> 00:10:50,060
바로 이것이 복소함수를 연구하는 수학자들이 하는 일입니다.

251
00:10:50,060 --> 00:10:53,030
바로 이것이 복소함수를 연구하는 수학자들이 하는 일입니다.

252
00:10:53,030 --> 00:10:55,280
수학자들은 기존 함수의 정의역을 벗어나는 곳에서도 계속 함수를 정의할 수 있도록 만들었습니다.

253
00:10:55,280 --> 00:10:58,640
수학자들은 기존 함수의 정의역을 벗어나는 곳에서도 계속 함수를 정의할 수 있도록 만들었습니다.

254
00:10:58,640 --> 00:11:00,710
자 이제, 예전에 이야기한 부분이었던 실수부가 1 이하일 때의 함숫값은,

255
00:11:00,710 --> 00:11:02,870
자 이제, 예전에 이야기한 부분이었던 실수부가 1 이하일 때의 함숫값은,

256
00:11:02,870 --> 00:11:04,880
무한한 합으로만 본다면 의미가 없습니다.

257
00:11:04,880 --> 00:11:06,590
무한한 합으로만 본다면 의미가 없습니다.

258
00:11:06,590 --> 00:11:08,810
1 + 2 + 3 + 4 + ... 를 더하는 것과 같이 말도 안되는 결과가 나오니까요.

259
00:11:08,810 --> 00:11:11,900
1 + 2 + 3 + 4 + ... 를 더하는 것과 같이 말도 안되는 결과가 나오니까요.

260
00:11:11,900 --> 00:11:13,850
하지만 무한합으로 정의되던 이 평면의 오른쪽 부분을 보면

261
00:11:13,850 --> 00:11:15,410
하지만 무한합으로 정의되던 이 평면의 오른쪽 부분을 보면

262
00:11:15,410 --> 00:11:18,200
마치 좀 더 연결해달라고 하는 것처럼 보입니다

263
00:11:18,200 --> 00:11:20,180
마치 좀 더 연결해달라고 하는 것처럼 보입니다

264
00:11:20,180 --> 00:11:22,760
마치 좀 더 연결해달라고 하는 것처럼 보입니다

265
00:11:22,760 --> 00:11:24,440
그럴 경우 그 무한합으로서의 정의을 벗어나게 되는데 말이죠.

266
00:11:24,440 --> 00:11:29,130
그럴 경우 그 무한합으로서의 정의을 벗어나게 되는데 말이죠.

267
00:11:29,130 --> 00:11:29,630
물론 나머지 평면에서 이 함수를 어떻게 정의해야 할지 생각해 봐야겠죠.

268
00:11:29,630 --> 00:11:31,250
물론 나머지 평면에서 이 함수를 어떻게 정의해야 할지 생각해 봐야겠죠.

269
00:11:31,250 --> 00:11:33,800
물론 나머지 평면에서 이 함수를 어떻게 정의해야 할지 생각해 봐야겠죠.

270
00:11:34,800 --> 00:11:36,530
당신은 어쩌면 이것을 수많은 방법으로 연결시킬 수 있다고 생각할지도 모릅니다.

271
00:11:36,530 --> 00:11:39,050
당신은 어쩌면 이것을 수많은 방법으로 연결시킬 수 있다고 생각할지도 모릅니다.

272
00:11:39,050 --> 00:11:41,380
s가 -1일때  -1/12 로 이동하도록 연장선을 그릴 수도 있고

273
00:11:41,380 --> 00:11:43,760
s가 -1일때  -1/12 로 이동하도록 연장선을 그릴 수도 있고

274
00:11:43,760 --> 00:11:45,900
s가 -1일때  -1/12 로 이동하도록 연장선을 그릴 수도 있고

275
00:11:47,100 --> 00:11:50,660
또한 연장선을 뒤틀어서 다른 값이 나오도록 정의 할 수도 있습니다.

276
00:11:50,660 --> 00:11:51,890
또한 연장선을 뒤틀어서 다른 값이 나오도록 정의 할 수도 있습니다.

277
00:11:51,890 --> 00:11:53,600
제 말은, 무한합으로 정의되지 않는 영역에서 당신 마음대로 함수를 다르게 정의해 보자는 겁니다.

278
00:11:53,600 --> 00:11:55,310
제 말은, 무한합으로 정의되지 않는 영역에서 당신 마음대로 함수를 다르게 정의해 보자는 겁니다.

279
00:11:55,310 --> 00:11:59,900
제 말은, 무한합으로 정의되지 않는 영역에서 당신 마음대로 함수를 다르게 정의해 보자는 겁니다.

280
00:11:59,900 --> 00:12:02,400
제 말은, 무한합으로 정의되지 않는 영역에서 당신 마음대로 함수를 다르게 정의해 보자는 겁니다.

281
00:12:02,400 --> 00:12:04,100
정의되지 않은 영역인데 뭐 어때요

282
00:12:04,100 --> 00:12:07,800
아무렇게나 정의하고 그래프로 그리면 되겠네요. 안그래요?

283
00:12:07,800 --> 00:12:09,500
뭐 꼭 그렇지는 않습니다. 제말은...

284
00:12:09,500 --> 00:12:11,810
맞아요. 당신은 그냥 초등학생에게 마커 쥐어주고

285
00:12:11,810 --> 00:12:14,500
이 선들을 아무렇게나 연결시키라고 할 수 있겠지만

286
00:12:14,500 --> 00:12:15,890
제가 그 확장된 함수가 전 구역에서 미분이 가능하다는 조건을 하나 추가한다면

287
00:12:15,890 --> 00:12:18,440
제가 그 확장된 함수가 전 구역에서 미분이 가능하다는 조건을 하나 추가한다면

288
00:12:18,440 --> 00:12:21,290
제가 그 확장된 함수가 전 구역에서 미분이 가능하다는 조건을 하나 추가한다면

289
00:12:21,290 --> 00:12:24,920
이 확장된 함수는 단 하나만으로 고정되게 됩니다.

290
00:12:24,920 --> 00:12:26,780
아, 제가 이 영상에서 미분은 필요없을거라고 말한거 압니다.

291
00:12:26,780 --> 00:12:28,280
아, 제가 이 영상에서 미분은 필요없을거라고 말한거 압니다.

292
00:12:28,280 --> 00:12:30,140
미적분학을 배웠다고 하더라도 복소함수에 관한 미분을 모를 수도 있습니다.

293
00:12:30,140 --> 00:12:31,760
미적분학을 배웠더라도 복소함수에 관한 미분을 아직 안배웠을수도 있죠.

294
00:12:31,760 --> 00:12:35,000
미적분학을 배웠더라도 복소함수에 관한 미분을 아직 안배웠을수도 있죠.

295
00:12:35,000 --> 00:12:36,230
하지만 다행히도 '어디서든지 미분 가능하다' 라는 제 말을 이해할 수 있는 훌륭한 도구가 있습니다.

296
00:12:36,230 --> 00:12:38,360
하지만 다행히도 '어디서든지 미분 가능하다' 라는 제 말을 이해할 수 있는 훌륭한 도구가 있습니다.

297
00:12:38,360 --> 00:12:40,310
하지만 다행히도 '어디서든지 미분 가능하다' 라는 제 말을 이해할 수 있는 훌륭한 도구가 있습니다.

298
00:12:40,310 --> 00:12:42,500
바로 기하학적 직관입니다.

299
00:12:42,500 --> 00:12:45,020
설명을 위해 앞의 f(s) = s^2 예제를 다시 들여다 봅시다.

300
00:12:45,020 --> 00:12:47,570
설명을 위해 앞의 f(s) = s^2 예제를 다시 들여다 봅시다.

301
00:12:47,570 --> 00:12:51,700
우리는 이 함수를 일종의 변형이라고 생각 할 것입니다.

302
00:12:51,700 --> 00:12:52,280
모든 점 s를 복소평면상의 s^2으로 대응/이동시키는 변형으로 말이죠.

303
00:12:52,280 --> 00:12:55,500
모든 점 s를 복소평면상의 s^2으로 대응/이동시키는 변형으로 말이죠.

304
00:12:55,500 --> 00:12:56,780
미적분학을 알고있는 사람들은

305
00:12:56,780 --> 00:12:58,580
이 함수가 주어진 모든 점에서 미분이 가능하다는 것을 알고 있을 겁니다.

306
00:12:58,580 --> 00:13:00,500
이 함수가 주어진 모든 점에서 미분이 가능하다는 것을 알고 있을 겁니다.

307
00:13:00,500 --> 00:13:01,500
이 함수가 주어진 모든 점에서 미분이 가능하다는 것을 알고 있을 겁니다.

308
00:13:01,500 --> 00:13:04,340
하지만 이 변환의 흥미로운 성질이 있습니다.

309
00:13:04,340 --> 00:13:05,900
그리고 대부분의 지점에서 이 속성은 같습니다.

310
00:13:05,900 --> 00:13:08,200
그리고 대부분의 지점에서 이 속성은 같습니다.

311
00:13:08,900 --> 00:13:11,330
원래의 공간에서 두개의 교차선을 그리고

312
00:13:11,330 --> 00:13:13,700
원래의 공간에서 두개의 교차선을 그리고

313
00:13:13,700 --> 00:13:15,170
변환 후에 두 교차선의 교차각이 어떻게 되는지 보세요.

314
00:13:15,170 --> 00:13:17,000
변환 후에 두 교차선의 교차각이 어떻게 되는지 보세요.

315
00:13:17,000 --> 00:13:20,860
교차각은 변하지 않습니다.

316
00:13:20,860 --> 00:13:23,440
선은 구부러질 수 있지만 그건 상관 없습니다.

317
00:13:23,450 --> 00:13:25,310
중요한 것은 교차각이 변하지 않는다는 것입니다.

318
00:13:25,310 --> 00:13:27,710
중요한 것은 교차각이 변하지 않는다는 것입니다.

319
00:13:27,710 --> 00:13:30,170
그리고 이건 어느 교차선에서나 성립합니다.

320
00:13:30,170 --> 00:13:31,670
그리고 이건 어느 교차선에서나 성립합니다.

321
00:13:34,400 --> 00:13:36,440
제가 '어디서든지 미분 가능하다' 라고 말했을때

322
00:13:36,440 --> 00:13:38,360
제가 '어디서든지 미분 가능하다' 라고 말했을때

323
00:13:38,360 --> 00:13:40,010
두 교차선의 교차각이 변환 후에도 불변하는 이 성질을 떠올리기 바랍니다.

324
00:13:40,010 --> 00:13:42,050
두 교차선의 교차각이 변환 후에도 불변하는 이 성질을 떠올리기 바랍니다.

325
00:13:42,050 --> 00:13:44,570
두 교차선의 교차각이 변환 후에도 불변하는 이 성질을 떠올리기 바랍니다.

326
00:13:44,570 --> 00:13:47,960
두 교차선의 교차각이 변환 후에도 불변하는 이 성질을 떠올리기 바랍니다.

327
00:13:47,960 --> 00:13:50,030
한눈에 봐도 격자선들은 변환 후에도 여전히 직각을 이루고 있음을 알 수 있습니다.

328
00:13:50,030 --> 00:13:52,010
한눈에 봐도 격자선들은 변환 후에도 여전히 직각을 이루고 있음을 알 수 있습니다.

329
00:13:52,010 --> 00:13:54,620
한눈에 봐도 격자선들은 변환 후에도 여전히 직각을 이루고 있음을 알 수 있습니다.

330
00:13:54,620 --> 00:13:56,640
한눈에 봐도 격자선들은 변환 후에도 여전히 직각을 이루고 있음을 알 수 있습니다.

331
00:13:58,480 --> 00:13:59,560
모든 구간에서 미분 가능한 복소함수를 "분석 함수" 라고 합니다.

332
00:13:59,570 --> 00:14:01,280
모든 구간에서 미분 가능한 복소함수를 "분석 함수" 라고 합니다.

333
00:14:01,280 --> 00:14:02,800
모든 구간에서 미분 가능한 복소함수를 "분석 함수" 라고 합니다.

334
00:14:02,800 --> 00:14:05,600
따라서 분석함수는 각을 보존하는 성질의 함수로 생각 할 수 있습니다.

335
00:14:06,700 --> 00:14:08,210
이 설명이 완전히 정확하진 않지만 거의 차이는 없습니다.

336
00:14:08,210 --> 00:14:10,600
이 설명이 완전히 정확하진 않지만 거의 차이는 없습니다.

337
00:14:10,600 --> 00:14:11,990
더 자세한 설명을 원하는 분들을 위해 조금 더 설명하겠습니다.

338
00:14:11,990 --> 00:14:14,180
더 자세한 설명을 원하는 분들을 위해 조금 더 설명하겠습니다.

339
00:14:14,180 --> 00:14:15,800
함수의 미분값을 0으로 만드는 s 위에서 교차하는 직선의 교차각은

340
00:14:15,800 --> 00:14:17,960
변환후에 그 각을 유지하지 않고 정수배가 됩니다.

341
00:14:17,960 --> 00:14:21,530
변환후에 그 각을 유지하지 않고 정수배가 됩니다.

342
00:14:21,530 --> 00:14:23,930
하지만 이런 경우는 얼마 되지 않습니다.

343
00:14:23,930 --> 00:14:26,120
거의 모든 경우에 분석함수는 변환 후에 그 교차각을 유지합니다.

344
00:14:26,120 --> 00:14:29,590
거의 모든 경우에 분석함수는 변환 후에 그 교차각을 유지합니다.

345
00:14:29,590 --> 00:14:31,930
이제 제가 분석함수 라고 하면 '교차각이 변환 후에도 유지된다.'라는 직관을 떠올리면 됩니다.

346
00:14:31,930 --> 00:14:33,490
이제 제가 분석함수 라고 하면 '교차각이 변환 후에도 유지된다.'라는 직관을 떠올리면 됩니다.

347
00:14:33,490 --> 00:14:38,910
이제 제가 분석함수 라고 하면 '교차각이 변환 후에도 유지된다.'라는 직관을 떠올리면 됩니다.

348
00:14:38,910 --> 00:14:40,530
조금 더 생각해 봅시다.

349
00:14:40,530 --> 00:14:42,210
여러분들께 특히 강조하고 싶은점은

350
00:14:42,210 --> 00:14:44,460
여러분들께 특히 강조하고 싶은점은

351
00:14:44,460 --> 00:14:46,860
'변환 후에도 교차각이 변하지 않는다'라는것은 굉장히 특별한 성질 이라는 겁니다.

352
00:14:46,860 --> 00:14:51,900
'변환 후에도 교차각이 변하지 않는다'라는것은 굉장히 특별한 성질 이라는 겁니다.

353
00:14:51,900 --> 00:14:52,800
그리고 저기에 각각의 이름을 가지고 있는 함수들도 분석함수라는 것이 밝혀졌습니다.
(e^x : Expernantial, Sin(x) : 사인파, log(x) : 로그...등등)

354
00:14:52,800 --> 00:14:54,660
그리고 저기에 각각의 이름을 가지고 있는 함수들도 분석함수라는 것이 밝혀졌습니다.
(e^x : Expernantial, Sin(x) : 사인파, log(x) : 로그...등등)

355
00:14:54,660 --> 00:14:59,310
그리고 저기에 각각의 이름을 가지고 있는 함수들도 분석함수라는 것이 밝혀졌습니다.
(e^x : Expernantial, Sin(x) : 사인파, log(x) : 로그...등등)

356
00:14:59,310 --> 00:15:01,500
리만은 이 복소해석학 이라는 학문을 현대화하는 데 상당한 기여를 했습니다.

357
00:15:01,500 --> 00:15:03,690
리만은 이 복소해석학 이라는 학문을 현대화하는 데 상당한 기여를 했습니다.

358
00:15:03,690 --> 00:15:05,880
복소해석학의 대부분은 해석함수의 성질을 파악하고 이해함으로써

359
00:15:05,880 --> 00:15:08,130
복소해석학의 대부분은 해석함수의 성질을 파악하고 이해함으로써

360
00:15:08,130 --> 00:15:09,750
이를 수학이나 과학의 다른 분야에 도움을 주는 것에 있습니다.

361
00:15:09,750 --> 00:15:13,380
이를 수학이나 과학의 다른 분야에 도움을 주는 것에 있습니다.

362
00:15:13,380 --> 00:15:15,870
평면의 오른쪽 부분에서 무한합으로 정의했던 제타 함수는 해석함수입니다.

363
00:15:15,870 --> 00:15:19,000
평면의 오른쪽 부분에서 무한합으로 정의했던 제타 함수는 해석함수입니다.

364
00:15:19,000 --> 00:15:20,910
격자선이 곡선으로 변환되었음에도 각각이 만나 생긴 각들은 전부 90°인 것을 주목해주세요.

365
00:15:20,910 --> 00:15:22,860
격자선이 곡선으로 변환되었음에도 각각이 만나 생긴 각들은 전부 90°인 것을 주목해주세요.

366
00:15:22,860 --> 00:15:25,279
격자선이 곡선으로 변환되었음에도 각각이 만나 생긴 각들은 전부 90°인 것을 주목해주세요.

367
00:15:27,620 --> 00:15:30,319
복소함수에 대한 놀라운 사실은,

368
00:15:30,319 --> 00:15:32,360
바로 이 해석함수에 대해 정의역을 확장하고 싶을 때

369
00:15:32,360 --> 00:15:35,089
확장 할 수 있는 방법은 하나밖에 없다는 겁니다.

370
00:15:35,089 --> 00:15:37,550
확장 할 수 있는 방법은 하나밖에 없다는 겁니다.

371
00:15:37,550 --> 00:15:39,949
예를 들어 제타함수를 왼쪽 부분까지 확장할 때,

372
00:15:39,949 --> 00:15:42,199
예를 들어 제타함수를 왼쪽 부분까지 확장할 때,

373
00:15:42,199 --> 00:15:44,389
그 확장된 함수도 연속적인 분석함수여야 합니다.

374
00:15:44,389 --> 00:15:46,670
그 확장된 함수도 연속적인 분석함수여야 합니다.

375
00:15:46,670 --> 00:15:48,559
그렇게 되면 나머지 왼쪽 평면을 마저 그릴 수 있는 방법은 하나밖에 없습니다.

376
00:15:48,559 --> 00:15:50,899
그렇게 되면 나머지 왼쪽 평면을 마저 그릴 수 있는 방법은 하나밖에 없습니다.

377
00:15:50,899 --> 00:15:53,269
그렇게 되면 나머지 왼쪽 평면을 마저 그릴 수 있는 방법은 하나밖에 없습니다.

378
00:15:53,269 --> 00:15:55,670
(각을 보존하는 것은)마치 무한한 퍼즐 맞추기랑 같은 겁니다.

379
00:15:55,670 --> 00:15:57,949
(각을 보존하는 것은)마치 무한한 퍼즐 맞추기랑 같은 겁니다.

380
00:15:57,949 --> 00:16:00,410
각을 보존한다는 조건 하에서 오직 단 하나의 확장만이 정답이니까요.

381
00:16:00,410 --> 00:16:02,779
각을 보존한다는 조건 하에서 오직 단 하나의 확장만이 정답이니까요.

382
00:16:02,779 --> 00:16:06,350
이렇게, 분석함수의 성질을 해치지 않으면서 정의역을 확장하는 유일한 방법을

383
00:16:06,350 --> 00:16:08,449
이렇게, 분석함수의 성질을 해치지 않으면서 정의역을 확장하는 유일한 방법을

384
00:16:08,449 --> 00:16:10,639
바로 "해석적 연속" 이라고 하는 것입니다.

385
00:16:10,639 --> 00:16:15,350
바로 "해석적 연속" 이라고 하는 것입니다.

386
00:16:15,350 --> 00:16:18,500
그리고 이것이 리만 함수의 정의 과정입니다.

387
00:16:18,500 --> 00:16:19,579
실수부분이 1보다 큰 오른쪽 절반의 영역에 있는 s를 대입하면

388
00:16:19,579 --> 00:16:21,350
실수부분이 1보다 큰 오른쪽 절반의 영역에 있는 s를 이 무한합에 대입해보면

389
00:16:21,350 --> 00:16:23,300
실수부분이 1보다 큰 오른쪽 절반의 영역에 있는 s를 이 무한합에 대입해보면

390
00:16:23,300 --> 00:16:25,759
실수부분이 1보다 큰 오른쪽 절반의 영역에 있는 s를 이 무한합에 대입해보면

391
00:16:25,759 --> 00:16:27,079
나선형을 그리며 어느 한 점에 수렴하는 것을 볼 수 있습니다.

392
00:16:27,079 --> 00:16:28,910
나선형을 그리며 어느 한 점에 수렴하는 것을 볼 수 있습니다.

393
00:16:28,910 --> 00:16:31,069
지수에 복소수가 있는 항들은 회전하는 효과가 있기 때문이죠.

394
00:16:31,069 --> 00:16:33,000
지수에 복소수가 있는 항들은 회전하는 효과가 있기 때문이죠.

395
00:16:33,700 --> 00:16:35,839
나머지 왼쪽 평면에 대해서는 확장할 수 있는 방법이 오직 한가지라는 것을 알고있습니다.

396
00:16:35,839 --> 00:16:38,209
나머지 왼쪽 평면에 대해서는 확장할 수 있는 방법이 오직 한가지라는 것을 알고있습니다.

397
00:16:38,209 --> 00:16:40,129
나머지 왼쪽 평면에 대해서는 확장할 수 있는 방법이 오직 한가지라는 것을 알고있습니다.

398
00:16:40,129 --> 00:16:42,350
변환 후에도 각이 변하지 않는 분석함수임을 유지한 채로 정의해야 했기 때문이죠.

399
00:16:42,350 --> 00:16:43,910
변환 후에도 각이 변하지 않는 분석함수임을 유지한 채로 정의해야 했기 때문이죠.

400
00:16:43,910 --> 00:16:46,279
변환 후에도 각이 변하지 않는 분석함수임을 유지한 채로 정의해야 했기 때문이죠.

401
00:16:46,279 --> 00:16:48,470
그러니까 우리는 정의에 따라서 이렇게 말할 수 있을겁니다.

402
00:16:48,470 --> 00:16:50,870
왼쪽 평면에 있는 제타함수가 무엇이든간에 그것은 존재할 것이며

403
00:16:50,870 --> 00:16:51,800
왼쪽 평면에 있는 제타함수가 무엇이든간에 그것은 존재할 것이며

404
00:16:51,800 --> 00:16:54,000
그 것은 매우 합리적인 생각일겁니다.

405
00:16:54,000 --> 00:16:59,000
왜냐하면 "해석적 연속"이라는 오직 한가지 방법밖에 없기 때문이죠.

406
00:16:59,000 --> 00:17:00,470
이 정의는 간단하지 않다는 것을 명심하십시오.

407
00:17:00,470 --> 00:17:03,200
이것은 "퍼즐"을 사용한 결과입니다.

408
00:17:03,200 --> 00:17:05,020
이것은 "퍼즐"을 사용한 결과입니다.

409
00:17:05,030 --> 00:17:07,220
추상적으로 이런 정의가 존재해야 한다고 생각했을 뿐이죠.

410
00:17:07,220 --> 00:17:09,799
하지만 이것이 우리가 어떻게 해결할지를 나타내는 것은 아닙니다.

411
00:17:09,799 --> 00:17:10,669
하지만 이것이 우리가 어떻게 해결할지를 나타내는 것은 아닙니다.

412
00:17:10,669 --> 00:17:12,559
수학자들은 이 확장된 함수가 어떤 형태를 가졌는지에 대해 많은 것을 알아냈지만

413
00:17:12,559 --> 00:17:14,959
수학자들은 이 확장된 함수가 어떤 형태를 가졌는지에 대해 많은 것을 알아냈지만

414
00:17:14,959 --> 00:17:16,370
몇몇 중요한 부분들은 아직까지 문제로 남아 있습니다.

415
00:17:16,370 --> 00:17:17,270
몇몇 중요한 부분들은 아직까지 문제로 남아 있습니다.

416
00:17:17,270 --> 00:17:19,819
백만 달러의 상금이 달린 문제로요.

417
00:17:19,819 --> 00:17:21,169
사실, 지금이 딱 리만 가설을 이야기하기 좋은 때인 거 같습니다.

418
00:17:21,169 --> 00:17:22,760
사실, 지금이 딱 리만 가설을 이야기하기 좋은 때인 거 같습니다.

419
00:17:22,760 --> 00:17:23,980
 

420
00:17:23,980 --> 00:17:26,530
수학자들은 어떤 변수가 함숫값을  0으로 만드는지가 매우 중요한 문제임을 밝혀냈습니다.

421
00:17:26,530 --> 00:17:28,990
수학자들은 어떤 변수가 함숫값을  0으로 만드는지가 매우 중요한 문제임을 밝혀냈습니다.

422
00:17:28,990 --> 00:17:29,440
수학자들은 어떤 변수가 함숫값을  0으로 만드는지가 매우 중요한 문제임을 밝혀냈습니다.

423
00:17:29,440 --> 00:17:31,960
같은 말로 어떤 점이 함수에 의해 변환될 때 원점으로 가는지가 궁금했던 거죠.

424
00:17:31,960 --> 00:17:34,870
같은 말로 어떤 점이 함수에 의해 변환될 때 원점으로 가는지가 궁금했던 거죠.

425
00:17:34,870 --> 00:17:36,580
우리가 이것에 대해 하나 알고 있는 것은,

426
00:17:36,580 --> 00:17:41,740
음의 짝수에서는 함숫값이 영점으로 간다는 것입니다.

427
00:17:41,740 --> 00:17:43,510
이것을 흔히 자명한 영점이라고 부릅니다.

428
00:17:43,510 --> 00:17:46,000
이 이름이 이렇게 붙은 이유는 수학자들의 전통 때문입니다

429
00:17:46,000 --> 00:17:47,919
이 이름이 이렇게 붙은 이유는 수학자들의 전통 때문입니다

430
00:17:47,919 --> 00:17:49,809
사실 전혀 자명(당연)하지 않은데도

431
00:17:49,809 --> 00:17:51,730
수학자들이 이 성질에 대해서 잘 알고 있기만 하면

432
00:17:51,730 --> 00:17:54,940
자명하다는 표기를 종종 합니다.

433
00:17:54,940 --> 00:17:56,470
각설하고, 우리는 영점으로 가는 다른 점들이

434
00:17:56,470 --> 00:17:59,169
이 임계대(critical strip) 안에 있다는 것을 알고 있습니다.

435
00:17:59,169 --> 00:18:01,480
이 임계대(critical strip) 안에 있다는 것을 알고 있습니다.

436
00:18:01,480 --> 00:18:03,669
이 비자명한 근이 어디에 있는지에 대한 정보는 놀랍게도 소수의 개수에 대한 정보를 알려줍니다.

437
00:18:03,669 --> 00:18:06,490
이 비자명한 근이 어디에 있는지에 대한 정보는 놀랍게도 소수의 개수에 대한 정보를 알려줍니다.

438
00:18:06,490 --> 00:18:09,220
이 비자명한 근이 어디에 있는지에 대한 정보는 놀랍게도 소수의 개수에 대한 정보를 알려줍니다.

439
00:18:09,220 --> 00:18:10,630
왜 이 함수가 소수에 대한 정보를 담고 있는지에 대해 굉장히 흥미로운 이야기들이 많고

440
00:18:10,630 --> 00:18:12,280
왜 이 함수가 소수에 대한 정보를 담고 있는지에 대해 굉장히 흥미로운 이야기들이 많고

441
00:18:12,280 --> 00:18:14,080
이에 대한 영상을 분명 만들어봐야 하겠으나

442
00:18:14,080 --> 00:18:16,090
이에 대한 영상을 분명 만들어봐야 하겠으나

443
00:18:16,090 --> 00:18:18,040
지금은 이미 충분히 긴 시간이 지났으니 이에 대한 설명은 여기서 하지 않겠습니다.

444
00:18:18,040 --> 00:18:19,200
지금은 이미 충분히 긴 시간이 지났으니 이에 대한 설명은 여기서 하지 않겠습니다.

445
00:18:19,200 --> 00:18:23,559
리만은 비자명한 모든 근이 이 공간의 정가운데를 지난다는,

446
00:18:23,559 --> 00:18:25,570
리만은 비자명한 모든 근이 이 공간의 정가운데를 지난다는,

447
00:18:25,570 --> 00:18:28,120
즉 s가 모두 실수부가 1/2 (임계선이라 부르는 곳 위)라는 가설을 세웠습니다.

448
00:18:28,120 --> 00:18:31,300
즉 s가 모두 실수부가 1/2 (임계선이라 부르는 곳 위)라는 가설을 세웠습니다.

449
00:18:31,300 --> 00:18:32,400
이것이 사실이라면,

450
00:18:32,400 --> 00:18:35,679
우리는 소수의 규칙성 뿐만 아니라 제타 함수와 관련된 수학 분야에서

451
00:18:35,679 --> 00:18:37,809
우리는 소수의 규칙성 뿐만 아니라 제타 함수와 관련된 수학 분야에서

452
00:18:37,809 --> 00:18:40,809
더 놀라울만한 규칙성을 파악 할 수 있을겁니다.

453
00:18:40,809 --> 00:18:42,549
지금 우리가 보는 이 임계선은 -4i에서 4i 까지 아주 좁은 범위에서만 보고 있습니다.

454
00:18:42,549 --> 00:18:44,860
지금 우리가 보는 이 임계선은 -4i에서 4i 까지 아주 좁은 범위에서만 보고 있습니다.

455
00:18:44,860 --> 00:18:47,020
지금 우리가 보는 이 임계선은 -4i에서 4i 까지 아주 좁은 범위에서만 보고 있습니다.

456
00:18:47,020 --> 00:18:48,970
그래서 이 임계선을 노란색 선으로 강조해서 함수로 변환을 하더라도

457
00:18:48,970 --> 00:18:51,340
그래서 이 임계선을 노란색 선으로 강조해서 함수로 변환을 하더라도

458
00:18:51,340 --> 00:18:54,000
영점을 지나지 않는 것처럼 보일 겁니다.

459
00:18:54,000 --> 00:18:57,200
영점을 지나지 않는 것처럼 보일 겁니다.

460
00:18:57,200 --> 00:18:58,120
이제 이 강조한 노란 선을 무한대로 뻗어 나가보면

461
00:18:58,120 --> 00:19:01,100
이제 이 강조한 노란 선을 무한대로 뻗어 나가보면

462
00:19:01,100 --> 00:19:03,900
이렇게 보이게 될 겁니다.

463
00:19:06,900 --> 00:19:07,980
영점을 계속 지나가는 것에 주목해주세요.

464
00:19:07,980 --> 00:19:11,250
영점을 계속 지나가는 것에 주목해주세요.

465
00:19:11,250 --> 00:19:13,110
만약 이 영점들이 모두 선 위에 있다는 것을 증명한다면

466
00:19:13,110 --> 00:19:15,990
만약 이 영점들이 모두 선 위에 있다는 것을 증명한다면

467
00:19:15,990 --> 00:19:17,790
클레이 수학 연구소에서 백만 달러를 줄 것이고

468
00:19:17,790 --> 00:19:19,770
그리고 동시에 수백 수천가지의 현대 수학에서의 리만 가설을 참이라고 가정하고 세운

469
00:19:19,770 --> 00:19:21,300
그리고 동시에 수백 수천가지의 현대 수학에서의 리만 가설을 참이라고 가정하고 세운

470
00:19:21,300 --> 00:19:23,730
다른 모든 수학적 정리들을 같이 증명한 것이 됩니다.

471
00:19:23,730 --> 00:19:25,770
다른 모든 수학적 정리들을 같이 증명한 것이 됩니다.

472
00:19:26,300 --> 00:19:27,600
우리가 이 왼쪽 평면에 대해서 알고 있는 것은

473
00:19:27,600 --> 00:19:29,460
우리가 이 왼쪽 평면에 대해서 알고 있는 것은

474
00:19:29,460 --> 00:19:32,040
s=-1일때 -1/12로 이동한다는 것입니다.

475
00:19:32,040 --> 00:19:35,730
그리고 s=-1을 무한합으로 정의된 각항에 직접 대입하면

476
00:19:35,730 --> 00:19:38,740
그리고 s=-1을 무한합으로 정의된 각항에 직접 대입하면

477
00:19:38,740 --> 00:19:41,180
마치 1+2+3+4+... = -1/12 가 되는 것 처럼 보입니다.

478
00:19:41,190 --> 00:19:43,440
마치 1+2+3+4+... = -1/12 가 되는 것 처럼 보입니다.

479
00:19:43,440 --> 00:19:45,210
이걸 보니 이 식을 합계라고 부르는것은 좀 이상해 보이네요.

480
00:19:45,210 --> 00:19:47,010
이것은 제타함수의 왼쪽 평면은 이런 합으로 정의되지 않기 때문입니다.

481
00:19:47,010 --> 00:19:48,600
이것은 제타함수의 왼쪽 평면은 이런 합으로 정의되지 않기 때문입니다.

482
00:19:48,600 --> 00:19:51,000
이것은 제타함수의 왼쪽 평면은 이런 합으로 정의되지 않기 때문입니다.

483
00:19:51,000 --> 00:19:53,340
대신에 이것은 본래의 정의역을 너머 "해석적 연속"을 적용 하는 것에서 나옵니다.

484
00:19:53,340 --> 00:19:55,650
대신에 이것은 본래의 정의역을 너머 "해석적 연속"을 적용 하는 것에서 나옵니다.

485
00:19:55,650 --> 00:19:58,230
그것은 오른쪽에서 시작해서 직쏘퍼즐을 푸는것과 같습니다.

486
00:19:58,230 --> 00:20:00,180
그것은 오른쪽에서 시작해서 직쏘퍼즐을 푸는것과 같습니다.

487
00:20:00,180 --> 00:20:03,120
그리고 당신은 "해석적 연속"이 굉장히 값진것이라고 인정하게 될겁니다.

488
00:20:03,120 --> 00:20:04,680
그리고 당신은 "해석적 연속"이 굉장히 값진것이라고 인정하게 될겁니다.

489
00:20:04,680 --> 00:20:06,930
직소퍼즐이 오직 한가지 해만 가지고 있다는 사실은

490
00:20:06,930 --> 00:20:09,420
직소퍼즐이 오직 한가지 해만 가지고 있다는 사실은

491
00:20:09,420 --> 00:20:11,400
무한 합의 값과 그 확장된 값 사이에 몇가지 직관을 줍니다.

492
00:20:11,400 --> 00:20:13,620
무한 합의 값과 그 확장된 값 사이에 몇가지 직관을 줍니다.

493
00:20:13,620 --> 00:20:17,190
마지막 애니메이션에선

494
00:20:17,190 --> 00:20:19,050
여러분들께 제타함수를 미분하면 어떤 모습인지 보여드리고자 합니다.

495
00:20:19,050 --> 00:20:19,980
 

496
00:20:19,980 --> 00:20:21,780
 

497
00:20:21,780 --> 00:20:24,210
하지만 그 전에 여러분들께 이 비디오를 만들 수 있도록 도와주신 분들을 소개하려 합니다.

498
00:20:24,210 --> 00:20:25,830
 

499
00:20:25,830 --> 00:20:27,300
 

500
00:20:27,300 --> 00:20:29,040
 

501
00:20:29,040 --> 00:20:31,290
 

502
00:20:31,290 --> 00:20:33,660
 

503
00:20:33,660 --> 00:20:36,090
 

504
00:20:36,090 --> 00:20:37,830
 

505
00:20:37,830 --> 00:20:40,560
 

506
00:20:40,560 --> 00:20:42,810
 

507
00:20:42,810 --> 00:20:44,250
 

508
00:20:44,250 --> 00:20:46,230
 

509
00:20:46,230 --> 00:20:47,820
 

510
00:20:47,820 --> 00:20:50,130
 

511
00:20:50,130 --> 00:20:52,890
 

512
00:20:52,890 --> 00:20:54,900
 

513
00:20:54,900 --> 00:20:57,120
 

514
00:20:57,120 --> 00:20:59,040
 

515
00:20:59,040 --> 00:21:00,720
 

516
00:21:00,720 --> 00:21:02,910
 

517
00:21:02,910 --> 00:21:04,950
 

518
00:21:04,950 --> 00:21:06,630
 

519
00:21:06,630 --> 00:21:09,090
 

520
00:21:09,090 --> 00:21:10,710
 

521
00:21:10,710 --> 00:21:11,399
 

522
00:21:11,399 --> 00:21:13,379
 

523
00:21:13,379 --> 00:21:15,479
 

524
00:21:15,479 --> 00:21:17,669
 

525
00:21:17,669 --> 00:21:19,349
 

526
00:21:19,349 --> 00:21:21,509
 

527
00:21:21,509 --> 00:21:23,909
 

528
00:21:23,909 --> 00:21:25,950
 

529
00:21:25,950 --> 00:21:30,640
 

530
00:21:30,640 --> 00:21:32,180
 

531
00:21:32,190 --> 00:21:34,649
 

532
00:21:34,649 --> 00:21:36,599
 

533
00:21:36,599 --> 00:21:38,429
 

534
00:21:38,429 --> 00:21:40,649
 

535
00:21:40,649 --> 00:21:42,570
 

536
00:21:42,570 --> 00:21:45,389
 

537
00:21:45,389 --> 00:21:47,519
자 이제 마지막이네요. 그리고 이것이 제타함수를 미분했을때의 모습입니다.

538
00:21:47,519 --> 00:21:51,000
자 이제 마지막이네요. 그리고 이것이 제타함수를 미분했을때의 모습입니다.

