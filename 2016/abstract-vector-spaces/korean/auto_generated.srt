1
00:00:16,880 --> 00:00:19,243
저는 이 시리즈의 첫 번째 비디오에서 제가 

2
00:00:19,243 --> 00:00:22,000
물었던 매우 간단한 질문을 다시 살펴보고 싶습니다.

3
00:00:22,700 --> 00:00:23,560
벡터란 무엇입니까?

4
00:00:24,480 --> 00:00:27,417
예를 들어 2차원 벡터는 기본적으로 편의상 

5
00:00:27,417 --> 00:00:30,600
좌표로 설명할 수 있는 평면 위의 화살표인가요?

6
00:00:30,860 --> 00:00:34,480
아니면 근본적으로 평면의 화살표로 

7
00:00:34,480 --> 00:00:37,720
멋지게 시각화된 실수 쌍인가요?

8
00:00:38,480 --> 00:00:41,360
아니면 둘 다 더 깊은 무언가의 표현일까요?

9
00:00:42,300 --> 00:00:45,587
한편으로 벡터를 주로 숫자 목록으로 정의하는 

10
00:00:45,587 --> 00:00:48,480
것은 명확하고 모호하지 않게 느껴집니다.

11
00:00:49,060 --> 00:00:51,380
이는 4차원 벡터나 100차원 벡터 같은 

12
00:00:51,380 --> 00:00:53,600
것을 실제로 작업할 수 있는 실제적이고 

13
00:00:53,600 --> 00:00:55,720
구체적인 아이디어처럼 들리게 만듭니다.

14
00:00:55,720 --> 00:00:58,492
그렇지 않으면 4차원과 같은 아이디어는 

15
00:00:58,492 --> 00:01:00,887
손을 조금 흔들지 않고는 설명하기 

16
00:01:00,887 --> 00:01:03,660
어려운 모호한 기하학적 개념일 뿐입니다.

17
00:01:05,540 --> 00:01:09,399
그러나 반면에, 실제로 선형 대수학을 다루는 사람들, 

18
00:01:09,399 --> 00:01:11,972
특히 기저 변경에 더욱 능숙해지면, 

19
00:01:11,972 --> 00:01:15,574
여러분이 제공한 좌표와 독립적으로 존재하는 공간을 

20
00:01:15,574 --> 00:01:18,276
다루고 있다는 공통된 느낌이 듭니다. 

21
00:01:18,276 --> 00:01:21,878
해당 좌표는 기본 벡터로 무엇을 선택하느냐에 따라 

22
00:01:21,878 --> 00:01:23,680
실제로 다소 임의적입니다.

23
00:01:24,480 --> 00:01:27,494
행렬식 및 고유벡터와 같은 선형 대수학의 

24
00:01:27,494 --> 00:01:30,640
핵심 주제는 좌표계 선택과 무관해 보입니다.

25
00:01:31,440 --> 00:01:35,313
행렬식은 변환이 영역을 얼마나 확장하는지 알려주며, 

26
00:01:35,313 --> 00:01:39,320
고유벡터는 변환 중에 자체 범위를 유지하는 벡터입니다.

27
00:01:40,000 --> 00:01:43,021
그러나 이 두 속성은 본질적으로 공간적이므로 

28
00:01:43,021 --> 00:01:45,801
둘 중 하나의 기본 값을 변경하지 않고도 

29
00:01:45,801 --> 00:01:48,340
좌표계를 자유롭게 변경할 수 있습니다.

30
00:01:50,760 --> 00:01:53,766
그러나 벡터가 근본적으로 실수의 목록이 아니고 

31
00:01:53,766 --> 00:01:56,889
그 기본 본질이 더 공간적인 것이라면 수학자들이 

32
00:01:56,889 --> 00:01:59,895
공간이나 공간과 같은 단어를 사용할 때 무엇을 

33
00:01:59,895 --> 00:02:02,440
의미하는지에 대한 의문이 생길 뿐입니다.

34
00:02:03,400 --> 00:02:06,525
이것이 어디로 가는지 확인하기 위해 실제로 저는 이 

35
00:02:06,525 --> 00:02:09,758
비디오의 대부분을 화살표나 숫자 목록이 아닌 벡터적인 

36
00:02:09,758 --> 00:02:12,561
특성, 즉 기능에 대해 이야기하는 데 할애하고 

37
00:02:12,561 --> 00:02:13,100
싶습니다.

38
00:02:13,740 --> 00:02:15,761
보시다시피, 함수는 실제로는 또 다른 

39
00:02:15,761 --> 00:02:17,880
유형의 벡터일 뿐이라는 의미가 있습니다.

40
00:02:19,760 --> 00:02:22,652
두 개의 벡터를 더할 수 있는 것과 같은 방식으로, 

41
00:02:22,652 --> 00:02:25,246
두 개의 함수 f와 g를 추가하여 새로운 함수 

42
00:02:25,246 --> 00:02:27,640
f + g를 얻는 합리적인 개념도 있습니다.

43
00:02:28,200 --> 00:02:30,472
그것은 당신이 이미 그것이 무엇인지 알고 

44
00:02:30,472 --> 00:02:33,140
있지만 실제로 그것을 표현하는 것 중 하나입니다.

45
00:02:33,960 --> 00:02:38,902
-4와 같이 주어진 입력에서 이 새로운 

46
00:02:38,902 --> 00:02:44,520
함수의 출력은 동일한 입력(-4)의 합입니다.

47
00:02:45,420 --> 00:02:49,504
또는 더 일반적으로, 주어진 입력 x에서 sum 

48
00:02:49,504 --> 00:02:53,740
함수의 값은 x의 f 값과 x의 g 값의 합입니다.

49
00:03:00,700 --> 00:03:03,418
이는 좌표별로 벡터 좌표를 추가하는 것과 

50
00:03:03,418 --> 00:03:06,254
매우 유사합니다. 어떤 의미에서는 처리해야 

51
00:03:06,254 --> 00:03:08,500
할 좌표가 무한히 많다는 것입니다.

52
00:03:11,100 --> 00:03:13,537
마찬가지로 함수를 실수로 스케일링하는 

53
00:03:13,537 --> 00:03:15,626
합리적인 개념이 있습니다. 모든 

54
00:03:15,626 --> 00:03:18,180
출력을 해당 숫자로 스케일링하면 됩니다.

55
00:03:20,240 --> 00:03:22,295
그리고 다시 말하지만 이는 벡터 좌표를 

56
00:03:22,295 --> 00:03:24,257
좌표별로 크기 조정하는 것과 유사하며 

57
00:03:24,257 --> 00:03:26,220
좌표가 무한히 많은 것처럼 느껴집니다.

58
00:03:28,900 --> 00:03:32,004
이제 벡터가 실제로 할 수 있는 유일한 일은 

59
00:03:32,004 --> 00:03:35,233
서로 더하거나 크기를 조정하는 것뿐이므로 원래 

60
00:03:35,233 --> 00:03:38,585
화살표와 공간의 맥락에서 생각했던 선형 대수학의 

61
00:03:38,585 --> 00:03:41,938
유용한 구성과 문제 해결 기술을 동일하게 사용할 

62
00:03:41,938 --> 00:03:45,540
수 있어야 할 것 같습니다. 함수에도 적용해 보세요.

63
00:03:46,540 --> 00:03:49,560
예를 들어, 함수에 대한 선형 변환, 

64
00:03:49,560 --> 00:03:52,292
즉 한 함수를 가져와 다른 함수로 

65
00:03:52,292 --> 00:03:55,600
바꾸는 완벽하게 합리적인 개념이 있습니다.

66
00:03:59,820 --> 00:04:02,780
하나의 친숙한 예는 미적분학(미적분학)에서 나옵니다.

67
00:04:03,420 --> 00:04:07,140
한 기능을 다른 기능으로 변환하는 것입니다.

68
00:04:08,720 --> 00:04:11,403
때때로 이러한 맥락에서 변환 대신 연산자라고 

69
00:04:11,403 --> 00:04:13,980
불리는 것을 듣게 되지만 의미는 동일합니다.

70
00:04:16,240 --> 00:04:18,727
당신이 묻고 싶은 자연스러운 질문은 함수 

71
00:04:18,727 --> 00:04:21,540
변환이 선형이라는 것이 무엇을 의미하는지입니다.

72
00:04:22,440 --> 00:04:25,186
선형성의 형식적 정의는 내가 이 시리즈의 

73
00:04:25,186 --> 00:04:27,574
3장에서 처음 이야기한 방식에 비해 

74
00:04:27,574 --> 00:04:30,440
상대적으로 추상적이고 상징적으로 추진됩니다.

75
00:04:30,440 --> 00:04:33,426
그러나 추상화의 보상은 화살표뿐만 아니라 함수에도 

76
00:04:33,426 --> 00:04:36,306
적용할 수 있을 만큼 일반적인 것을 얻게 된다는 

77
00:04:36,306 --> 00:04:36,840
것입니다.

78
00:04:39,180 --> 00:04:41,963
일반적으로 가산성과 스케일링이라고 하는 

79
00:04:41,963 --> 00:04:45,000
두 가지 속성을 충족하는 변환은 선형입니다.

80
00:04:46,040 --> 00:04:50,715
가산성은 두 개의 벡터 v와 w를 더한 다음 그 

81
00:04:50,715 --> 00:04:55,218
합에 변환을 적용하면 v와 w의 변환된 버전을 

82
00:04:55,218 --> 00:05:00,240
추가한 것과 동일한 결과를 얻는다는 것을 의미합니다.

83
00:05:04,520 --> 00:05:09,160
스케일링 속성은 벡터 v를 특정 숫자만큼 스케일링한 

84
00:05:09,160 --> 00:05:13,480
다음 변환을 적용하면 v의 변환된 버전을 동일한 

85
00:05:13,480 --> 00:05:18,120
양만큼 스케일링한 것과 동일한 최종 벡터를 얻는다는 

86
00:05:18,120 --> 00:05:18,920
것입니다.

87
00:05:21,700 --> 00:05:25,532
이 설명을 자주 듣게 되는 방식은 선형 변환이 벡터 

88
00:05:25,532 --> 00:05:29,100
덧셈과 스칼라 곱셈의 연산을 보존한다는 것입니다.

89
00:05:32,200 --> 00:05:34,822
이전 비디오에서 제가 이야기한 격자선이 

90
00:05:34,822 --> 00:05:37,921
평행하고 균일한 간격으로 유지된다는 아이디어는 

91
00:05:37,921 --> 00:05:40,662
실제로 2D 공간의 특정 점 사례에서 이 

92
00:05:40,662 --> 00:05:44,000
두 속성이 의미하는 바를 보여주는 예시일 뿐입니다.

93
00:05:44,880 --> 00:05:48,405
행렬 벡터 곱셈을 가능하게 하는 이러한 속성의 

94
00:05:48,405 --> 00:05:51,931
가장 중요한 결과 중 하나는 선형 변환이 기본 

95
00:05:51,931 --> 00:05:56,000
벡터를 취하는 위치에 따라 완전히 설명된다는 것입니다.

96
00:05:57,720 --> 00:06:01,189
모든 벡터는 어떤 방식으로든 기저 벡터를 스케일링하고 

97
00:06:01,189 --> 00:06:04,426
추가하여 표현할 수 있으므로 벡터의 변환된 버전을 

98
00:06:04,426 --> 00:06:07,433
찾는 것은 동일한 방식으로 기저 벡터의 변환된 

99
00:06:07,433 --> 00:06:10,440
버전을 스케일링하고 추가하는 것으로 귀결됩니다.

100
00:06:12,280 --> 00:06:14,637
잠시 후에 보게 되겠지만 이는 화살표와 

101
00:06:14,637 --> 00:06:16,780
마찬가지로 함수에서도 마찬가지입니다.

102
00:06:18,360 --> 00:06:20,305
예를 들어, 미적분학을 전공하는 학생들은 

103
00:06:20,305 --> 00:06:22,420
도함수가 덧셈적이며 스케일링 속성을 갖는다는 

104
00:06:22,420 --> 00:06:23,943
사실을 항상 사용하고 있습니다. 

105
00:06:23,943 --> 00:06:26,058
비록 그런 식으로 표현되는 것을 들어본 적이 

106
00:06:26,058 --> 00:06:26,820
없더라도 말이죠.

107
00:06:28,140 --> 00:06:31,848
두 개의 함수를 추가한 다음 도함수를 취하는 경우, 

108
00:06:31,848 --> 00:06:34,406
먼저 각 함수의 도함수를 취한 다음 

109
00:06:34,406 --> 00:06:36,580
결과를 추가하는 것과 같습니다.

110
00:06:40,140 --> 00:06:42,320
마찬가지로, 함수의 크기를 조정한 다음 

111
00:06:42,320 --> 00:06:44,600
도함수를 구하는 것은 먼저 도함수를 구한 

112
00:06:44,600 --> 00:06:46,880
다음 결과를 크기 조정하는 것과 같습니다.

113
00:06:50,280 --> 00:06:53,040
병렬로 실제로 드릴링하기 위해 행렬을 사용하여 

114
00:06:53,040 --> 00:06:56,120
도함수를 설명하는 것이 어떤 모습인지 살펴보겠습니다.

115
00:06:56,980 --> 00:06:59,260
기능 공간은 무한한 차원을 갖는 경향이 있기 

116
00:06:59,260 --> 00:07:01,722
때문에 이것은 약간 까다로울 수 있지만 실제로는 

117
00:07:01,722 --> 00:07:03,820
이 연습이 상당히 만족스럽다고 생각합니다.

118
00:07:04,840 --> 00:07:07,310
x 제곱 더하기 3x 더하기 5, 

119
00:07:07,310 --> 00:07:10,820
또는 4x 7 빼기 5x 제곱과 같은 다항식으로 

120
00:07:10,820 --> 00:07:11,860
제한해 봅시다.

121
00:07:12,330 --> 00:07:16,664
우리 공간의 각 다항식은 유한한 수의 항만 가지지만 

122
00:07:16,664 --> 00:07:21,000
전체 공간에는 임의의 큰 차수의 다항식이 포함됩니다.

123
00:07:22,220 --> 00:07:24,611
우리가 가장 먼저 해야 할 일은 이 공간에 좌표를 

124
00:07:24,611 --> 00:07:26,747
부여하는 것인데, 이를 위해서는 기초 선택이 

125
00:07:26,747 --> 00:07:27,260
필요합니다.

126
00:07:28,180 --> 00:07:31,346
다항식은 이미 변수 x의 거듭제곱의 합으로 

127
00:07:31,346 --> 00:07:34,645
기록되어 있으므로 x의 순수 거듭제곱을 기본 

128
00:07:34,645 --> 00:07:37,680
함수로 선택하는 것이 매우 자연스럽습니다.

129
00:07:38,280 --> 00:07:40,990
즉, 첫 번째 기본 함수는 x의 

130
00:07:40,990 --> 00:07:43,700
b0이 1인 상수 함수가 됩니다.

131
00:07:44,180 --> 00:07:47,952
두 번째 기본 함수는 x의 b1이 x와 같고, 

132
00:07:47,952 --> 00:07:50,418
b2의 x는 x 제곱과 같고, 

133
00:07:50,418 --> 00:07:53,320
x의 b3은 x의 세제곱과 같습니다.

134
00:07:53,860 --> 00:07:55,985
이러한 기본 함수가 수행하는 역할은 

135
00:07:55,985 --> 00:07:58,323
화살표로서의 벡터 세계에서 i-hat, 

136
00:07:58,323 --> 00:08:00,980
j-hat 및 k-hat의 역할과 유사합니다.

137
00:08:02,120 --> 00:08:04,613
다항식은 임의로 큰 차수를 가질 수 

138
00:08:04,613 --> 00:08:07,480
있으므로 이 기본 함수 세트는 무한합니다.

139
00:08:08,240 --> 00:08:11,302
하지만 괜찮습니다. 다항식을 벡터로 취급하면 

140
00:08:11,302 --> 00:08:14,120
무한히 많은 좌표를 갖게 된다는 뜻입니다.

141
00:08:15,600 --> 00:08:18,474
예를 들어 x 제곱 더하기 3x 

142
00:08:18,474 --> 00:08:21,827
더하기 5와 같은 다항식은 좌표 5, 

143
00:08:21,827 --> 00:08:25,500
3, 1과 무한히 많은 0으로 설명됩니다.

144
00:08:26,100 --> 00:08:28,773
이것을 첫 번째 기저 함수의 5배, 

145
00:08:28,773 --> 00:08:31,981
두 번째 기저 함수의 3배, 세 번째 기저 

146
00:08:31,981 --> 00:08:35,189
함수의 1배를 더한 다음 그 시점부터 다른 

147
00:08:35,189 --> 00:08:39,200
기저 함수를 추가하면 안 된다는 의미로 읽힐 것입니다.

148
00:08:40,620 --> 00:08:44,526
4x에서 7번째 빼기 5x의 제곱의 다항식은 

149
00:08:44,526 --> 00:08:48,277
좌표 0, 0, 음수 5, 0, 0, 0, 

150
00:08:48,277 --> 00:08:52,340
0, 4를 가지며 무한한 0 문자열을 갖습니다.

151
00:08:53,260 --> 00:08:56,134
일반적으로 모든 개별 다항식에는 

152
00:08:56,134 --> 00:08:59,167
유한한 항만 있으므로 좌표는 끝이 

153
00:08:59,167 --> 00:09:03,000
0인 무한한 숫자의 유한한 문자열이 됩니다.

154
00:09:06,900 --> 00:09:10,417
이 좌표계에서 도함수는 대부분 0으로 가득 

155
00:09:10,417 --> 00:09:14,228
차 있지만 이 오프셋 대각선에서 카운트다운되는 

156
00:09:14,228 --> 00:09:17,600
양의 정수를 갖는 무한 행렬로 설명됩니다.

157
00:09:18,400 --> 00:09:19,745
잠시 후에 이 행렬을 어떻게 찾을 수 

158
00:09:19,745 --> 00:09:20,899
있는지에 대해 이야기하겠습니다. 

159
00:09:20,899 --> 00:09:22,437
그러나 그것에 대한 느낌을 얻는 가장 좋은 

160
00:09:22,437 --> 00:09:24,360
방법은 그것이 실제로 작동하는 것을 지켜보는 것입니다.

161
00:09:24,970 --> 00:09:28,135
다항식 x 세제곱 + 5x 제곱 + 

162
00:09:28,135 --> 00:09:31,458
4x + 5를 나타내는 좌표를 가져온 

163
00:09:31,458 --> 00:09:34,940
다음 그 좌표를 행렬 오른쪽에 놓습니다.

164
00:09:40,410 --> 00:09:43,996
결과의 첫 번째 좌표에 기여하는 유일한 항은 1 

165
00:09:43,996 --> 00:09:47,583
곱하기 4입니다. 이는 결과의 상수 항이 4임을 

166
00:09:47,583 --> 00:09:48,380
의미합니다.

167
00:09:50,100 --> 00:09:54,380
이는 4x의 미분값이 상수 4라는 사실에 해당합니다.

168
00:09:55,640 --> 00:09:58,911
행렬 벡터 곱의 두 번째 좌표에 기여하는 

169
00:09:58,911 --> 00:10:01,614
유일한 항은 2 곱하기 5입니다. 

170
00:10:01,614 --> 00:10:05,740
이는 도함수에서 x 앞의 계수가 10임을 의미합니다.

171
00:10:06,500 --> 00:10:09,280
그것은 5x 제곱의 미분에 해당합니다.

172
00:10:10,780 --> 00:10:13,497
마찬가지로 행렬 벡터 곱의 세 번째 

173
00:10:13,497 --> 00:10:16,080
좌표는 3 곱하기 1로 귀결됩니다.

174
00:10:17,660 --> 00:10:19,954
이것은 x 세제곱이 3x 제곱이 

175
00:10:19,954 --> 00:10:21,740
되는 도함수에 해당합니다.

176
00:10:23,080 --> 00:10:25,020
그 이후에는 0에 지나지 않을 것입니다.

177
00:10:26,880 --> 00:10:29,800
이를 가능하게 하는 것은 도함수가 선형이라는 것입니다.

178
00:10:31,640 --> 00:10:34,926
그리고 잠시 멈춰서 숙고하는 것을 좋아하는 분들을 

179
00:10:34,926 --> 00:10:38,330
위해 각 기본 함수의 도함수를 취하고 결과의 좌표를 

180
00:10:38,330 --> 00:10:41,500
각 열에 배치하여 이 행렬을 구성할 수 있습니다.

181
00:10:59,780 --> 00:11:03,133
따라서 놀랍게도 처음에는 완전히 다른 동물처럼 

182
00:11:03,133 --> 00:11:06,486
보이는 행렬 벡터 곱셈과 도함수를 취하는 것은 

183
00:11:06,486 --> 00:11:09,840
둘 다 실제로는 같은 계열의 구성원일 뿐입니다.

184
00:11:11,220 --> 00:11:13,938
사실, 내적이나 고유벡터와 같은 공간의 

185
00:11:13,938 --> 00:11:17,026
화살표인 벡터와 관련하여 이 시리즈에서 제가 

186
00:11:17,026 --> 00:11:19,868
이야기한 대부분의 개념은 함수의 세계에서 

187
00:11:19,868 --> 00:11:22,586
직접적인 유사성을 가지지만 때로는 다른 

188
00:11:22,586 --> 00:11:25,798
이름으로 사용되기도 합니다. 내적이나 고유함수 

189
00:11:25,798 --> 00:11:26,540
같은 거죠.

190
00:11:28,400 --> 00:11:29,680
그럼 벡터가 무엇인지에 대한 

191
00:11:29,680 --> 00:11:30,880
질문으로 돌아가 보겠습니다.

192
00:11:31,560 --> 00:11:33,749
제가 여기서 말하고 싶은 점은 수학에는 

193
00:11:33,749 --> 00:11:35,840
벡터적인 것들이 많이 있다는 것입니다.

194
00:11:35,840 --> 00:11:38,431
공간의 화살표 세트, 숫자 목록, 

195
00:11:38,431 --> 00:11:42,524
함수 또는 정의하기로 선택한 기타 이상한 것 등 크기 

196
00:11:42,524 --> 00:11:46,207
조정 및 추가에 대한 합리적인 개념이 있는 개체 

197
00:11:46,207 --> 00:11:48,662
세트를 다루는 한, 모든 벡터, 

198
00:11:48,662 --> 00:11:52,618
선형 변환 및 기타 모든 것에 관해 선형 대수학에서 

199
00:11:52,618 --> 00:11:55,620
개발된 도구를 적용할 수 있어야 합니다.

200
00:11:57,480 --> 00:12:00,166
잠시 시간을 내어 선형 대수학 이론을 개발하는 

201
00:12:00,166 --> 00:12:02,440
수학자로서 지금 자신을 상상해 보십시오.

202
00:12:02,440 --> 00:12:05,283
당신은 당신의 작업에 대한 모든 정의와 발견이 

203
00:12:05,283 --> 00:12:08,346
하나의 특정 사례에만 적용되는 것이 아니라 완전히 

204
00:12:08,346 --> 00:12:11,300
일반화된 모든 벡터적 항목에 적용되기를 원합니다.

205
00:12:13,400 --> 00:12:16,486
화살표, 숫자 또는 함수 목록과 같은 

206
00:12:16,486 --> 00:12:19,720
벡터적인 집합을 벡터 공간이라고 합니다.

207
00:12:20,580 --> 00:12:22,518
그리고 수학자로서 당신이 하고 싶은 말은 

208
00:12:22,518 --> 00:12:24,540
'안녕하세요 여러분. 저는 여러분이 생각해 

209
00:12:24,540 --> 00:12:26,563
낼 수 있는 모든 종류의 말도 안되는 벡터 

210
00:12:26,563 --> 00:12:28,501
공간에 대해 생각하고 싶지 않습니다'라고 

211
00:12:28,501 --> 00:12:29,260
말하는 것입니다.

212
00:12:29,260 --> 00:12:31,878
따라서 당신이 해야 할 일은 벡터 추가 및 

213
00:12:31,878 --> 00:12:34,714
스케일링이 준수해야 하는 규칙 목록을 설정하는 

214
00:12:34,714 --> 00:12:35,260
것입니다.

215
00:12:36,400 --> 00:12:38,455
이러한 규칙을 공리라고 하며, 

216
00:12:38,455 --> 00:12:42,082
현대 선형 대수학 이론에는 우리가 발견한 모든 이론과 

217
00:12:42,082 --> 00:12:45,468
구성이 적용되려면 모든 벡터 공간이 충족해야 하는 

218
00:12:45,468 --> 00:12:47,040
8개의 공리가 있습니다.

219
00:12:47,700 --> 00:12:50,213
잠시 멈추고 숙고하고 싶은 분들을 위해 화면에 

220
00:12:50,213 --> 00:12:52,823
남겨 두겠습니다. 그러나 기본적으로 이것은 벡터 

221
00:12:52,823 --> 00:12:55,336
덧셈과 스칼라 곱셈의 개념이 여러분이 기대하는 

222
00:12:55,336 --> 00:12:58,140
대로 작동하는지 확인하기 위한 체크리스트일 뿐입니다.

223
00:12:58,720 --> 00:13:02,640
이러한 공리는 자연의 기본 규칙이라기보다는 수학자, 

224
00:13:02,640 --> 00:13:06,424
결과 발견, 그리고 그 결과를 새로운 종류의 벡터 

225
00:13:06,424 --> 00:13:10,480
공간에 적용하려는 다른 사람들 사이의 인터페이스입니다.

226
00:13:11,420 --> 00:13:14,562
예를 들어, 누군가가 파이 생물을 추가하고 크기를 

227
00:13:14,562 --> 00:13:17,816
조정하는 정의가 있는 모든 파이 생물의 집합과 같은 

228
00:13:17,816 --> 00:13:21,182
미친 유형의 벡터 공간을 정의하는 경우 이러한 공리는 

229
00:13:21,182 --> 00:13:24,212
정의를 확인하기 전에 확인해야 하는 사항에 대한 

230
00:13:24,212 --> 00:13:27,466
체크리스트와 같습니다. 선형 대수학 결과를 적용하기 

231
00:13:27,466 --> 00:13:28,140
시작합니다.

232
00:13:28,820 --> 00:13:30,539
그리고 수학자로서 당신은 사람들이 

233
00:13:30,539 --> 00:13:32,258
정의할 수 있는 모든 가능한 미친 

234
00:13:32,258 --> 00:13:34,340
벡터 공간에 대해 생각할 필요가 없습니다.

235
00:13:34,860 --> 00:13:37,567
이러한 공리 측면에서 결과를 증명하면 해당 

236
00:13:37,567 --> 00:13:40,275
공리를 충족하는 정의를 가진 사람이 자신의 

237
00:13:40,275 --> 00:13:42,983
상황에 대해 전혀 생각해 본 적이 없더라도 

238
00:13:42,983 --> 00:13:45,240
행복하게 결과를 적용할 수 있습니다.

239
00:13:46,520 --> 00:13:49,515
결과적으로 모든 결과를 매우 추상적으로 표현하는 

240
00:13:49,515 --> 00:13:52,400
경향이 있습니다. 즉, 공간의 화살표나 함수와 

241
00:13:52,400 --> 00:13:55,173
같은 특정 유형의 벡터를 중심으로 하기보다는 

242
00:13:55,173 --> 00:13:58,280
이러한 공리의 관점에서만 표현하는 경향이 있습니다.

243
00:14:01,860 --> 00:14:04,654
예를 들어, 이것이 바로 여러분이 찾을 거의 

244
00:14:04,654 --> 00:14:07,560
모든 교과서가 평행하고 균일한 간격을 유지하는 

245
00:14:07,560 --> 00:14:10,354
격자선에 대해 이야기하는 대신 가산성과 크기 

246
00:14:10,354 --> 00:14:13,260
조정 측면에서 선형 변환을 정의하는 이유입니다.

247
00:14:13,260 --> 00:14:16,033
비록 후자가 더 직관적이고 적어도 내 생각에는 

248
00:14:16,033 --> 00:14:18,700
비록 한 가지 상황에 국한된 것이라 하더라도 

249
00:14:18,700 --> 00:14:21,260
처음 학습자에게 더 도움이 되기는 하지만요.

250
00:14:22,620 --> 00:14:24,872
따라서 벡터가 무엇인지에 대한 수학자의 

251
00:14:24,872 --> 00:14:26,920
대답은 그 질문을 무시하는 것입니다.

252
00:14:27,500 --> 00:14:29,326
현대 이론에서는 벡터가 취하는 

253
00:14:29,326 --> 00:14:31,260
형태는 실제로 중요하지 않습니다.

254
00:14:31,860 --> 00:14:34,668
화살표, 숫자 목록, 함수, 파이 생물 등 

255
00:14:34,668 --> 00:14:37,593
실제로 이러한 규칙을 따르는 벡터를 추가하고 

256
00:14:37,593 --> 00:14:40,635
크기 조정하는 개념이 있는 한 무엇이든 될 수 

257
00:14:40,635 --> 00:14:41,220
있습니다.

258
00:14:41,860 --> 00:14:44,880
그것은 숫자 3이 실제로 무엇인지 묻는 것과 같습니다.

259
00:14:45,380 --> 00:14:48,523
구체적으로 나올 때마다 어떤 삼중항의 맥락에 

260
00:14:48,523 --> 00:14:51,667
있지만 수학에서는 가능한 모든 삼중항에 대한 

261
00:14:51,667 --> 00:14:54,810
추상화로 취급되며 하나의 아이디어를 사용하여 

262
00:14:54,810 --> 00:14:58,080
가능한 모든 삼중항에 대해 추론할 수 있습니다.

263
00:14:59,120 --> 00:15:01,354
많은 구현이 있는 벡터의 경우에도 

264
00:15:01,354 --> 00:15:03,942
마찬가지이지만 수학은 이러한 모든 것을 

265
00:15:03,942 --> 00:15:07,000
하나의 무형의 벡터 공간 개념으로 추상화합니다.

266
00:15:08,860 --> 00:15:11,199
하지만 이 시리즈를 보는 사람이라면 누구나 

267
00:15:11,199 --> 00:15:13,733
알고 있듯이 원점에 화살표가 있는 2D 공간과 

268
00:15:13,733 --> 00:15:16,268
같이 구체적이고 시각화 가능한 환경에서 벡터에 

269
00:15:16,268 --> 00:15:18,900
대한 추론을 시작하는 것이 더 낫다고 생각합니다.

270
00:15:19,660 --> 00:15:22,001
그러나 선형 대수학을 더 많이 배울수록 

271
00:15:22,001 --> 00:15:24,555
이러한 도구가 훨씬 더 일반적으로 적용되며 

272
00:15:24,555 --> 00:15:27,110
이것이 교과서와 강의가 추상적으로 표현되는 

273
00:15:27,110 --> 00:15:30,090
경향이 있는 근본적인 이유라는 것을 알아야 합니다.

274
00:15:31,940 --> 00:15:33,993
그래서 여러분, 저는 이것을 선형 대수 

275
00:15:33,993 --> 00:15:36,140
시리즈의 본질로 부를 것이라고 생각합니다.

276
00:15:36,140 --> 00:15:38,799
만약 여러분이 비디오를 시청하고 이해했다면, 

277
00:15:38,799 --> 00:15:41,246
저는 여러분이 선형 대수학의 기본 직관에 

278
00:15:41,246 --> 00:15:43,800
대한 탄탄한 기초를 가지고 있다고 믿습니다.

279
00:15:44,640 --> 00:15:47,311
물론 이것은 전체 주제를 배우는 것과 같은 것은 

280
00:15:47,311 --> 00:15:50,082
아닙니다. 이는 실제로 문제를 해결함으로써만 얻을 

281
00:15:50,082 --> 00:15:52,754
수 있는 것이지만, 앞으로 진행하는 학습은 모든 

282
00:15:52,754 --> 00:15:55,525
올바른 직관을 갖추고 있다면 훨씬 더 효율적일 수 

283
00:15:55,525 --> 00:15:56,020
있습니다.

284
00:15:56,660 --> 00:15:58,368
따라서 이러한 직관을 재미있게 적용하고 

285
00:15:58,368 --> 00:16:00,000
미래의 학습에 행운이 있기를 바랍니다.

