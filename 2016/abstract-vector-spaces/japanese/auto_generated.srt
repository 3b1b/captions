1
00:00:17,081 --> 00:00:20,004
このシリーズの最初のビデオで私が尋ねた、一見

2
00:00:20,004 --> 00:00:22,800
単純な質問をもう一度考えてみたいと思います。

3
00:00:22,800 --> 00:00:24,600
ベクトルとは何ですか?

4
00:00:24,600 --> 00:00:27,940
たとえば、2 次元ベクトルは基本的に平面上の矢

5
00:00:27,940 --> 00:00:31,280
印であり、便宜上座標で説明できるのでしょうか?

6
00:00:31,280 --> 00:00:34,980
それとも、根本的には、平面上の矢印としてう

7
00:00:34,980 --> 00:00:38,680
まく視覚化された実数のペアなのでしょうか?

8
00:00:38,680 --> 00:00:40,540
それとも、これらは両方とも、より深

9
00:00:40,540 --> 00:00:42,400
い何かの単なる現れなのでしょうか？

10
00:00:42,400 --> 00:00:45,733
一方で、ベクトルを主に数値のリストとして定義する

11
00:00:45,733 --> 00:00:48,800
ことは、明確で曖昧さのないように感じられます。

12
00:00:48,800 --> 00:00:51,403
これにより、4 次元ベクトルや 100

13
00:00:51,403 --> 00:00:54,526
次元ベクトルのようなものが、実際に取り組むこと

14
00:00:54,526 --> 00:00:57,910
ができる現実的で具体的なアイデアのように聞こえます。

15
00:00:57,910 --> 00:01:00,253
そうでない場合、4 次元のようなア

16
00:01:00,253 --> 00:01:03,637
イデアは、少し手を振らなければ説明するのが難しい漠然

17
00:01:03,637 --> 00:01:05,720
とした幾何学的概念にすぎません。

18
00:01:05,720 --> 00:01:09,489
しかしその一方で、実際に線形代数を扱う人たちに共通

19
00:01:09,489 --> 00:01:13,259
する感覚は、 特に基底の変更がより流暢になるにつれ

20
00:01:13,259 --> 00:01:17,029
、与えられた座標から独立し て存在する空間を扱って

21
00:01:17,029 --> 00:01:20,196
いるということです。その座標は実際には、

22
00:01:20,196 --> 00:01:24,720
基底ベクトルとして何を選択したかに応じて多少任意になります。

23
00:01:24,720 --> 00:01:28,193
行列式や固有ベクトルなど、線形代数のその他のトピッ

24
00:01:28,193 --> 00:01:31,400
クは、座標系の選択に無関係であるように見えます。

25
00:01:31,400 --> 00:01:34,225
行列式は、変換によって領域がどの程度スケ

26
00:01:34,225 --> 00:01:37,051
ーリングされるかを示し ます。固有ベクト

27
00:01:37,051 --> 00:01:40,160
ルは、変換中に独自のスパンに留まるものです。

28
00:01:40,160 --> 00:01:43,846
ただし、これらのプロパティは両方とも本質的に

29
00:01:43,846 --> 00:01:47,533
空間的なものであるため 、どちらかの基礎とな

30
00:01:47,533 --> 00:01:51,220
る値を変更せずに座標系を自由に変更できます。

31
00:01:51,220 --> 00:01:54,285
しかし、ベクトルが基本的に実数のリストではなく

32
00:01:54,285 --> 00:01:57,350
、その根底にあ る本質がより空間的なものである

33
00:01:57,350 --> 00:01:59,482
場合、数学者が空間や空間といっ

34
00:01:59,482 --> 00:02:03,480
た言葉を使用するときに何を意味するのかという疑問が生じます。

35
00:02:03,480 --> 00:02:07,077
ここまでの話を進めるために、このビデオの大部分を、矢

36
00:02:07,077 --> 00:02:10,675
印でも数字のリストでもない、ベクトルのような性質や関

37
00:02:10,675 --> 00:02:14,140
数を持つものについて話すことに費やしたいと思います。

38
00:02:14,140 --> 00:02:16,980
ご存知のとおり、関数は実際にはベクトル

39
00:02:16,980 --> 00:02:19,820
の一種にすぎないという意味があります。

40
00:02:19,820 --> 00:02:22,567
2 つのベクトルを加算するのと同じように、2

41
00:02:22,567 --> 00:02:25,433
つの関数 f と g を加 算して、新しい関数

42
00:02:25,433 --> 00:02:28,420
f と g を加算するという賢明な概念もあります。

43
00:02:28,420 --> 00:02:31,323
それは、それがどうなるかはすでにわかっているものの、実

44
00:02:31,323 --> 00:02:34,020
際にそれを表現するのは一口に過ぎないものの1つです。

45
00:02:34,020 --> 00:02:37,820
負の 4 などの任意の入力におけるこの新しい関数

46
00:02:37,820 --> 00:02:40,512
の出力は、同じ入力 (負の 4)

47
00:02:40,512 --> 00:02:43,679
でそれぞれを評価したときの f と g

48
00:02:43,679 --> 00:02:45,580
の出力の合計になります。

49
00:02:45,580 --> 00:02:49,249
より一般的には、任意の入力 x における sum

50
00:02:49,249 --> 00:02:53,360
関 数の値は、x の値 f と x の g の合計です。

51
00:02:53,360 --> 00:03:04,420
これは、座標ごとにベクトルを追加することに非常に似ています。

52
00:03:04,420 --> 00:03:08,340
ある意味、扱うべき座標が無限にあるというだけのことです。

53
00:03:08,340 --> 00:03:12,040
同様に、関数を実数でスケーリング

54
00:03:12,040 --> 00:03:15,740
するという賢明な概念もあります。

55
00:03:15,740 --> 00:03:20,340
すべての出力をその数値でスケールするだけです。

56
00:03:20,340 --> 00:03:22,195
繰り返しになりますが、これはベクトル座標を

57
00:03:22,195 --> 00:03:24,140
座標ごとにスケーリングすることに似ています。

58
00:03:24,140 --> 00:03:27,780
座標が無限にあるような気がします。

59
00:03:27,780 --> 00:03:31,431
さて、ベクトルが実際にできることは足し合わせたりス

60
00:03:31,431 --> 00:03:35,082
ケーリングした りすることだけだとすると、もともと

61
00:03:35,082 --> 00:03:38,733
矢印と矢印のコンテキストで考 えられていたのと同じ

62
00:03:38,733 --> 00:03:42,092
便利な構成要素と線形代数の問題解決手法を利用

63
00:03:42,092 --> 00:03:45,743
できるはずだと感じます。スペースを作成し、関数にも

64
00:03:45,743 --> 00:03:46,620
適用します。

65
00:03:46,620 --> 00:03:53,474
たとえば、関数の線形変換という完全に合理的な概念があります

66
00:03:53,474 --> 00:04:00,100
。これは、ある関数を取り込んで別の関数に変換するものです。

67
00:04:00,100 --> 00:04:03,720
身近な例の 1 つは、微分積分学に由来します。

68
00:04:03,720 --> 00:04:08,800
ある機能を別の機能に変換するものです。

69
00:04:08,800 --> 00:04:12,654
この文脈では、変換の代わりにこれらの演算子と呼ばれ

70
00:04:12,654 --> 00:04:16,360
る言葉が聞こえることがありますが、意味は同じです。

71
00:04:16,360 --> 00:04:19,491
当然のことながら、関数の変換が線形であると

72
00:04:19,491 --> 00:04:22,480
はどういう意味なのかという疑問が生じます。

73
00:04:22,480 --> 00:04:26,863
線形性の正式な定義は、このシリーズの第 3 章で最初に説明

74
00:04:26,863 --> 00:04:31,100
した方法に比べて比較的抽象的で、象徴的に説明されています。

75
00:04:31,100 --> 00:04:35,311
しかし、抽象性の恩恵は、関数や矢印に適用で

76
00:04:35,311 --> 00:04:39,140
きるほど一般的なものが得られることです。

77
00:04:39,140 --> 00:04:42,617
一般に加法性とスケーリングと呼ばれる

78
00:04:42,617 --> 00:04:46,460
2 つの特性を満たす場合、変換は線形です。

79
00:04:46,460 --> 00:04:49,911
加法性とは、2 つのベクトル v と w

80
00:04:49,911 --> 00:04:54,019
を加算し、その合計に変換を適用すると、v と w

81
00:04:54,019 --> 00:04:58,456
の変換されたバージョンを加算した場合と同じ結果が得られ

82
00:04:58,456 --> 00:05:00,100
ることを意味します。

83
00:05:00,100 --> 00:05:04,376
スケーリング特性とは、ベクトル v

84
00:05:04,376 --> 00:05:11,030
をある数値でスケーリング してから変換を適用すると、v

85
00:05:11,030 --> 00:05:14,831
の変換バージョンを同じ量だけス

86
00:05:14,831 --> 00:05:21,960
ケーリングした場合と同じ最終的なベクトルが得られることです。

87
00:05:21,960 --> 00:05:27,422
これについてよく耳にするのは、線形変換ではベクトル加

88
00:05:27,422 --> 00:05:32,480
算とスカラー乗算の演算が保持されるということです。

89
00:05:32,480 --> 00:05:35,583
過去のビデオで説明した、グリッド線が平行かつ等間

90
00:05:35,583 --> 00:05:38,686
隔に保たれるという アイデアは、実際には、2D

91
00:05:38,686 --> 00:05:41,659
空間内の点の特定の場合において、これ ら 2

92
00:05:41,659 --> 00:05:45,280
つのプロパティが何を意味するかを示したものにすぎません。

93
00:05:45,280 --> 00:05:49,550
行列ベクトルの乗算を可能にするこれらのプロパティ

94
00:05:49,550 --> 00:05:53,820
の最も重要な結果の 1 つは、線形変換が基底ベク

95
00:05:53,820 --> 00:05:57,920
トルを取る場所によって完全に記述されることです。

96
00:05:57,920 --> 00:06:01,567
任意のベクトルは、何らかの方法で基底ベクトルをスケーリン

97
00:06:01,567 --> 00:06:05,214
グおよび加算するこ とによって表現できるため、ベクトルの

98
00:06:05,214 --> 00:06:07,820
変換バージョンを見つけるには、同じ方法

99
00:06:07,820 --> 00:06:11,467
で基底ベクトルの変換バージョンをスケーリングおよび加算す

100
00:06:11,467 --> 00:06:12,640
ることになります。

101
00:06:12,640 --> 00:06:15,580
すぐにわかるように、これは矢印だ

102
00:06:15,580 --> 00:06:18,520
けでなく関数にも当てはまります。

103
00:06:18,520 --> 00:06:21,695
たとえば、微積分の学生は、たとえそのように表現され

104
00:06:21,695 --> 00:06:24,870
ているのを聞いたことがなく ても、導関数が加法的で

105
00:06:24,870 --> 00:06:28,300
スケーリング特性があるという事実を常に利用しています。

106
00:06:28,300 --> 00:06:31,713
2 つの関数を追加してから導関数を取得する場

107
00:06:31,713 --> 00:06:35,126
合、最初にそれぞれの関 数の導関数を個別に取

108
00:06:35,126 --> 00:06:38,540
得してから、その結果を加算するのと同じです。

109
00:06:38,540 --> 00:06:44,660
同様に、関数をスケーリングしてから導関数を取得する場合、最初

110
00:06:44,660 --> 00:06:50,780
に導関数を取得してから結果をスケーリングするのと同じです。

111
00:06:50,780 --> 00:06:53,981
並列処理を実際にドリルするために、行列を使用して導

112
00:06:53,981 --> 00:06:57,060
関数を記述するとどのようになるかを見てみましょう。

113
00:06:57,060 --> 00:07:01,107
関数空間は無限次元になる傾向があるため、これは少し難しいで

114
00:07:01,107 --> 00:07:05,020
すが、この演習は実際には非常に満足できるものだと思います。

115
00:07:05,020 --> 00:07:07,742
x の 2 乗プラス 3x プラス 5、または

116
00:07:07,742 --> 00:07:09,897
4x の 7 乗か ら 5x の 2

117
00:07:09,897 --> 00:07:12,620
乗を引いたものなどの多項式に限定してみましょう。

118
00:07:12,620 --> 00:07:17,562
空間内の各多項式には有限数の項しか含まれませんが、空間全体

119
00:07:17,562 --> 00:07:22,340
には任意の大きな次数をもつ多項式が含まれることになります。

120
00:07:22,340 --> 00:07:25,360
最初に行う必要があるのは、この空間に座標を与える

121
00:07:25,360 --> 00:07:28,380
ことです。これには基底を選択する必要があります。

122
00:07:28,380 --> 00:07:31,671
多項式は変数 x のスケーリングされた累乗の合

123
00:07:31,671 --> 00:07:34,533
計としてすでに記述されて いるため、x

124
00:07:34,533 --> 00:07:38,540
の純粋な累乗を基底関数として選択するのは非常に自然です。

125
00:07:38,540 --> 00:07:41,560
言い換えれば、最初の基底関数は定数関数となり、x

126
00:07:41,560 --> 00:07:44,460
の b0 は 1 に等しいということになります。

127
00:07:44,460 --> 00:07:47,116
2 番目の基底関数は、x の b1 が x

128
00:07:47,116 --> 00:07:49,894
に等しく、次に x の b2 が x の 2

129
00:07:49,894 --> 00:07:52,792
乗に等しく、次に x の b3 が x の 3

130
00:07:52,792 --> 00:07:54,000
乗に等しくなります。

131
00:07:54,000 --> 00:07:56,806
これらの基底関数が果たす役割は、矢印として

132
00:07:56,806 --> 00:07:59,613
のベクトルの世界にお ける i-hat、j

133
00:07:59,613 --> 00:08:02,420
-hat、k-hat の役割と似ています。

134
00:08:02,420 --> 00:08:05,476
多項式の次数は任意に大きくできるため、

135
00:08:05,476 --> 00:08:08,380
この基底関数のセットは無限になります。

136
00:08:08,380 --> 00:08:10,739
しかし、それは問題ありません。それは、多項式を

137
00:08:10,739 --> 00:08:13,098
ベクトルとして扱うと、多 項式が無限に多くの座

138
00:08:13,098 --> 00:08:15,560
標を持つことになるということを意味するだけです。

139
00:08:15,560 --> 00:08:19,461
たとえば、x の 2 乗 + 3x + 5

140
00:08:19,461 --> 00:08:24,781
のような多項式は 、座標 5、3、1 と、無限に多くの 0

141
00:08:24,781 --> 00:08:26,200
で記述されます。

142
00:08:26,200 --> 00:08:31,133
これは、最初の基底関数の 5 倍、2 番目の基底関数の 3

143
00:08:31,133 --> 00:08:36,066
倍、3 番目の基底関数の 1 倍であり、その時点以降は他の基

144
00:08:36,066 --> 00:08:41,000
底関数を追加しないでください、と言っているように読めます。

145
00:08:41,000 --> 00:08:45,034
多項式 4x から 7 番目の 5x を引いた

146
00:08:45,034 --> 00:08:49,741
2 乗は、座標 0、0、負 の 5、0、0、0、0、4

147
00:08:49,741 --> 00:08:53,440
を持ち、その後無限のゼロの文字列になります。

148
00:08:53,440 --> 00:09:00,506
一般に、個々の多項式には有限数の項しか含まれないため、

149
00:09:00,506 --> 00:09:07,320
その座標は無限のゼロの尾を持つ有限の数値列になります。

150
00:09:07,320 --> 00:09:10,960
この座標系では、導関数は、ほとんどがゼロで満た

151
00:09:10,960 --> 00:09:14,601
されているが、このオフセ ット対角線でカウント

152
00:09:14,601 --> 00:09:18,400
ダウンする正の整数を持つ無限行列で記述されます。

153
00:09:18,400 --> 00:09:20,693
このマトリックスを見つける方法についてはす

154
00:09:20,693 --> 00:09:22,986
ぐに説明しますが、そ の感触を得る最良の方

155
00:09:22,986 --> 00:09:25,280
法は、実際に動作しているのを見ることです。

156
00:09:25,280 --> 00:09:30,100
多項式 x 3 乗 + 5x 2 乗 + 4x + 5

157
00:09:30,100 --> 00:09:34,920
を表す座標を取得し、それらの座標を行列の右側に置きます。

158
00:09:34,920 --> 00:09:42,963
結果の最初の座標に寄与する唯一の項は 1 x 4 です

159
00:09:42,963 --> 00:09:50,720
。これは、結果の定数項が 4 になることを意味します。

160
00:09:50,720 --> 00:09:53,376
これは、4x の導関数が定数 4

161
00:09:53,376 --> 00:09:55,720
であるという事実に対応します。

162
00:09:55,720 --> 00:09:59,932
行列ベクトル積の 2 番目の座標に寄与する唯一の項は

163
00:09:59,932 --> 00:10:03,208
2 x 5 です 。これは、導関数の x

164
00:10:03,208 --> 00:10:06,640
の前の係数が 10 であることを意味します。

165
00:10:06,640 --> 00:10:10,440
これは 5x の 2 乗の微分に相当します。

166
00:10:10,440 --> 00:10:14,404
同様に、行列ベクトル積の 3 番目の

167
00:10:14,404 --> 00:10:18,160
座標は、3 掛ける 1 になります。

168
00:10:18,160 --> 00:10:23,200
これは、x の 3 乗を 3 乗した微分に相当します。

169
00:10:23,200 --> 00:10:27,040
そしてその後はゼロばかりになります。

170
00:10:27,040 --> 00:10:32,000
これが可能になるのは、導関数が線形であるためです。

171
00:10:32,000 --> 00:10:41,721
立ち止まってじっくり考えたい人のために、各基

172
00:10:41,721 --> 00:10:51,443
底関数の導関数を取得し、その結果の座標を各列

173
00:10:51,443 --> 00:11:00,320
に入力することで、この行列を構築できます。

174
00:11:00,320 --> 00:11:04,067
驚くべきことに、行列ベクトルの乗算と導関数は、最

175
00:11:04,067 --> 00:11:07,815
初はまったく別の動物のよ うに見えましたが、実際

176
00:11:07,815 --> 00:11:11,720
には両方とも同じファミリーのメンバーにすぎません。

177
00:11:11,720 --> 00:11:16,040
実際、ドット積や固有ベクトルなど、このシリーズで空間

178
00:11:16,040 --> 00:11:20,200
内の矢印としてのベクトルに関して私が話してきた概念

179
00:11:20,200 --> 00:11:24,520
のほとんどは、関数の世界で直接類似していますが、別の

180
00:11:24,520 --> 00:11:28,520
名前で呼ばれることもあります。内積や固有関数など。

181
00:11:28,520 --> 00:11:31,680
さて、ベクトルとは何かという問題に戻ります。

182
00:11:31,680 --> 00:11:34,067
ここで私が言いたいのは、数学にはベクト

183
00:11:34,067 --> 00:11:36,580
ル的なものがたくさんあるということです。

184
00:11:36,580 --> 00:11:40,755
スケーリングと加算という合理的な概念が存在するオブジェクト

185
00:11:40,755 --> 00:11:44,930
のセットを扱っ ている限り、それが空間内の矢印のセット、数

186
00:11:44,930 --> 00:11:47,233
値のリスト、関数、または定義す

187
00:11:47,233 --> 00:11:51,409
ることを選択したその他のおかしなものであるかどうかにかかわ

188
00:11:51,409 --> 00:11:55,584
らず、ベクトル 、線形変換などに関する線形代数で開発された

189
00:11:55,584 --> 00:11:57,600
ツールは適用できるはずです。

190
00:11:57,600 --> 00:12:00,590
少し時間を取って、今自分が線形代数の理論を開

191
00:12:00,590 --> 00:12:03,320
発している数学者であると想像してください。

192
00:12:03,320 --> 00:12:06,181
自分の作品のすべての定義と発見が、1

193
00:12:06,181 --> 00:12:08,590
つの特定のケースだけでなく、ベ

194
00:12:08,590 --> 00:12:11,903
クトル的なものすべてに完全に一般的に適用され

195
00:12:11,903 --> 00:12:13,560
ることを望んでいます。

196
00:12:13,560 --> 00:12:17,289
矢印や数値や関数のリストなど、ベクトルっぽ

197
00:12:17,289 --> 00:12:20,680
いものの集合はベクトル空間と呼ばれます。

198
00:12:20,680 --> 00:12:22,960
そして、数学者としてあなたがしたいことは、「やあ

199
00:12:22,960 --> 00:12:25,240
、皆さん、私は皆 さんが思いつくかもしれないさま

200
00:12:25,240 --> 00:12:26,855
ざまな種類のクレイジーなベクトル

201
00:12:26,855 --> 00:12:29,135
空間について考える必要はありません」と言うことか

202
00:12:29,135 --> 00:12:29,800
もしれません。

203
00:12:29,800 --> 00:12:33,248
したがって、ベクトルの加算とスケーリングが従う必

204
00:12:33,248 --> 00:12:36,560
要があるルールのリストを確立することになります。

205
00:12:36,560 --> 00:12:40,380
これらの規則は公理と呼ばれます。現代の線形代数理論では、私

206
00:12:40,380 --> 00:12:44,074
たちが発見したすべての理論と構成が適用される場合、ベクト

207
00:12:44,074 --> 00:12:47,640
ル空間が満たさなければならない 8 つの公理があります。

208
00:12:47,640 --> 00:12:50,491
立ち止まって熟考したい人のために、ここでは画面上に

209
00:12:50,491 --> 00:12:53,342
それらを残してお きますが、基本的に、これはベクト

210
00:12:53,342 --> 00:12:55,396
ル加算とスカラー乗算の概念が期待ど

211
00:12:55,396 --> 00:12:58,247
おりの動作をするかどうかを確認するための単なるチェ

212
00:12:58,247 --> 00:12:59,160
ックリストです。

213
00:12:59,160 --> 00:13:03,172
これらの公理は、基本的な自然法則というよりも、結果を発見

214
00:13:03,172 --> 00:13:07,184
する数学者と、その結果を新しい種類のベクトル空間に適用し

215
00:13:07,184 --> 00:13:10,920
たいと考えている他の人々との間のインターフェイスです。

216
00:13:10,920 --> 00:13:14,495
たとえば、誰かが、pi クリーチャーの追加とスケーリングの

217
00:13:14,495 --> 00:13:18,070
定義を備えたす べての pi クリーチャーのセットなど、ク

218
00:13:18,070 --> 00:13:20,043
レイジーなタイプのベクトル空間

219
00:13:20,043 --> 00:13:23,618
を定義した場合、これらの公理は、定義を行う前に確認する必要

220
00:13:23,618 --> 00:13:27,193
があるもののチ ェックリストのようなものになります。線形代

221
00:13:27,193 --> 00:13:28,920
数の結果の適用を開始します。

222
00:13:28,920 --> 00:13:30,933
そして、数学者であるあなたは、人々が定義

223
00:13:30,933 --> 00:13:32,946
する可能性のあるすべ てのクレイジーなベ

224
00:13:32,946 --> 00:13:35,060
クトル空間について考える必要はありません。

225
00:13:35,060 --> 00:13:39,066
これらの公理に従って結果を証明するだけで、定義がこれらの公理

226
00:13:39,066 --> 00:13:43,073
を満たす人なら誰でも、たとえ彼らの状況を考えたこともなかっ

227
00:13:43,073 --> 00:13:47,080
たとしても、あなたの結果を喜んで適用できるようになります。

228
00:13:47,080 --> 00:13:52,258
その結果、空間内の矢印や関数など、特定の種類のベクトルを

229
00:13:52,258 --> 00:13:57,258
中心とするのではなく、すべての結果をかなり抽象的に、つ

230
00:13:57,258 --> 00:14:02,080
まりこれらの公理の観点からのみ表現する傾向があります。

231
00:14:02,080 --> 00:14:06,128
たとえば、これが、ほぼすべての教科書で、グリッド線が平

232
00:14:06,128 --> 00:14:10,176
行で等間隔に保たれることについてではなく、加法性とスケ

233
00:14:10,176 --> 00:14:14,080
ーリングという観点から線形変換を定義している理由です。

234
00:14:14,080 --> 00:14:16,980
たとえそれが特定の状況に限定されていたとしても

235
00:14:16,980 --> 00:14:19,880
、後者の方が直感的であ り、少なくとも私の見解

236
00:14:19,880 --> 00:14:22,780
では、初めて学習する人にとってはより有益です。

237
00:14:22,780 --> 00:14:25,190
したがって、ベクトルとは何かに対する数学

238
00:14:25,190 --> 00:14:27,600
者の答えは、その質問を無視することです。

239
00:14:27,600 --> 00:14:31,560
現代の理論では、ベクトルの形はあまり重要ではありません。

240
00:14:31,560 --> 00:14:35,115
矢印、数値のリスト、関数、円周率の生き物など、

241
00:14:35,115 --> 00:14:38,670
これらのルールに従うベク トルの追加とスケーリ

242
00:14:38,670 --> 00:14:42,380
ングの概念がある限り、実際には何でも構いません。

243
00:14:42,380 --> 00:14:43,880
それは、数字の 3 が実際には

244
00:14:43,880 --> 00:14:45,480
何なのかを尋ねるようなものです。

245
00:14:45,480 --> 00:14:48,899
それが具体的に現れるときは常に、物事のいくつかの三つ組の

246
00:14:48,899 --> 00:14:52,318
文脈の中にあります が、数学では、物事の考えられるすべて

247
00:14:52,318 --> 00:14:54,761
の三つ組の抽象化として扱われ、単一のア

248
00:14:54,761 --> 00:14:58,180
イデアを使用して、考えられるすべての三つ組について推論す

249
00:14:58,180 --> 00:14:59,280
ることができます。

250
00:14:59,280 --> 00:15:02,660
同じことがベクトルにも当てはまります。ベクトルに

251
00:15:02,660 --> 00:15:06,040
は多くの具体例があります が、数学はそれらすべて

252
00:15:06,040 --> 00:15:09,420
をベクトル空間の単一の無形の概念に抽象化します。

253
00:15:09,420 --> 00:15:12,853
しかし、このシリーズを見ている人なら誰でも知っているように

254
00:15:12,853 --> 00:15:16,287
、原点を矢印の根とした 2D 空間のような、具体的で視覚化

255
00:15:16,287 --> 00:15:19,840
可能な設定でベクトルについて推論し始める方が良いと思います。

256
00:15:19,840 --> 00:15:24,080
しかし、線形代数をさらに学ぶにつれて、これらのツールはより

257
00:15:24,080 --> 00:15:28,321
一般的に適用できること、そしてこれが教科書や講義が抽象的な

258
00:15:28,321 --> 00:15:32,280
表現になりがちな根本的な理由であることを知ってください。

259
00:15:32,280 --> 00:15:35,041
それでは、皆さん、これをこの線形代数のエッセンス

260
00:15:35,041 --> 00:15:36,920
シリーズの紹介にしようと思います。

261
00:15:36,920 --> 00:15:40,906
ビデオを見て理解できたなら、線形代数の根底にある直

262
00:15:40,906 --> 00:15:44,740
観にしっかりとした基礎があると私は確信しています。

263
00:15:44,740 --> 00:15:47,717
もちろん、これはトピック全体を学習することと同じでは

264
00:15:47,717 --> 00:15:50,695
ありません。それは 実際に問題に取り組むことによって

265
00:15:50,695 --> 00:15:52,986
のみ得られるものですが、適切な直感がす

266
00:15:52,986 --> 00:15:55,963
べて備わっていれば、今後の学習は大幅に効率的になる可

267
00:15:55,963 --> 00:15:56,880
能性があります。

268
00:15:56,880 --> 00:15:58,570
その直感を楽しんで応用してくださ

269
00:15:58,570 --> 00:16:00,260
い。今後の学習に幸運を祈ります。

