1
00:00:17,081 --> 00:00:21,240
このシリーズの最初のビデオで私が尋ねた、一見

2
00:00:21,240 --> 00:00:22,800
単純な質問をもう一度考えてみたいと思います。

3
00:00:22,800 --> 00:00:24,600
ベクトルとは何ですか?

4
00:00:24,600 --> 00:00:28,720
たとえば、2 次元ベクトルは基本的に平面上の矢

5
00:00:28,720 --> 00:00:31,280
印であり、便宜上座標で説明できるのでしょうか?

6
00:00:31,280 --> 00:00:36,760
それとも、根本的には、平面上の矢印としてう

7
00:00:36,760 --> 00:00:38,680
まく視覚化された実数のペアなのでしょうか?

8
00:00:38,680 --> 00:00:42,400
それとも、これらは両方とも、より深い何かの単なる現れなのでしょうか？

9
00:00:42,400 --> 00:00:47,800
一方で、ベクトルを主に数値のリストとして定義する

10
00:00:47,800 --> 00:00:48,800
ことは、明確で曖昧さのないように感じられます。

11
00:00:48,800 --> 00:00:53,480
これにより、4 次元ベクトルや 100 次元ベクトルのようなものが、実際に取り組むこと

12
00:00:53,480 --> 00:00:58,120
ができる現実的で具体的なアイデアのように聞こえます。そうでない場合、4 次元のようなア

13
00:00:58,120 --> 00:01:05,720
イデアは、少し手を振らなければ説明するのが難しい漠然とした幾何学的概念にすぎません。

14
00:01:05,720 --> 00:01:10,440
しかしその一方で、実際に線形代数を扱う人たちに共通する感覚は、

15
00:01:10,440 --> 00:01:14,380
特に基底の変更がより流暢になるにつれ、与えられた座標から独立し

16
00:01:14,380 --> 00:01:19,080
て存在する空間を扱っているということです。その座標は実際には、

17
00:01:19,080 --> 00:01:24,720
基底ベクトルとして何を選択したかに応じて多少任意になります。

18
00:01:24,720 --> 00:01:29,400
行列式や固有ベクトルなど、線形代数のその他のトピッ

19
00:01:29,400 --> 00:01:31,400
クは、座標系の選択に無関係であるように見えます。

20
00:01:31,400 --> 00:01:36,860
行列式は、変換によって領域がどの程度スケーリングされるかを示し

21
00:01:36,860 --> 00:01:40,160
ます。固有ベクトルは、変換中に独自のスパンに留まるものです。

22
00:01:40,160 --> 00:01:44,560
ただし、これらのプロパティは両方とも本質的に空間的なものであるため

23
00:01:44,560 --> 00:01:51,220
、どちらかの基礎となる値を変更せずに座標系を自由に変更できます。

24
00:01:51,220 --> 00:01:55,880
しかし、ベクトルが基本的に実数のリストではなく、その根底にあ

25
00:01:55,880 --> 00:02:00,240
る本質がより空間的なものである場合、数学者が空間や空間といっ

26
00:02:00,240 --> 00:02:03,480
た言葉を使用するときに何を意味するのかという疑問が生じます。

27
00:02:03,480 --> 00:02:07,000
ここまでの話を進めるために、このビデオの大部分を、矢

28
00:02:07,000 --> 00:02:11,940
印でも数字のリストでもない、ベクトルのような性質や関

29
00:02:11,940 --> 00:02:14,140
数を持つものについて話すことに費やしたいと思います。

30
00:02:14,140 --> 00:02:19,820
ご存知のとおり、関数は実際にはベクトルの一種にすぎないという意味があります。

31
00:02:19,820 --> 00:02:23,780
2 つのベクトルを加算するのと同じように、2 つの関数 f と g を加

32
00:02:23,780 --> 00:02:28,420
算して、新しい関数 f と g を加算するという賢明な概念もあります。

33
00:02:28,420 --> 00:02:31,900
それは、それがどうなるかはすでにわかっているものの、実

34
00:02:31,900 --> 00:02:34,020
際にそれを表現するのは一口に過ぎないものの1つです。

35
00:02:34,020 --> 00:02:39,720
負の 4 などの任意の入力におけるこの新しい関数の出力は、同じ入力 (負の

36
00:02:39,720 --> 00:02:45,580
4) でそれぞれを評価したときの f と g の出力の合計になります。

37
00:02:45,580 --> 00:02:51,360
より一般的には、任意の入力 x における sum 関

38
00:02:51,360 --> 00:02:53,360
数の値は、x の値 f と x の g の合計です。

39
00:03:01,180 --> 00:03:04,420
これは、座標ごとにベクトルを追加することに非常に似ています。

40
00:03:04,420 --> 00:03:08,340
ある意味、扱うべき座標が無限にあるというだけのことです。

41
00:03:08,340 --> 00:03:15,740
同様に、関数を実数でスケーリングするという賢明な概念もあります。

42
00:03:15,740 --> 00:03:20,340
すべての出力をその数値でスケールするだけです。

43
00:03:20,340 --> 00:03:24,140
繰り返しになりますが、これはベクトル座標を座標ごとにスケーリングすることに似ています。

44
00:03:24,140 --> 00:03:27,780
座標が無限にあるような気がします。

45
00:03:27,780 --> 00:03:34,320
さて、ベクトルが実際にできることは足し合わせたりスケーリングした

46
00:03:34,320 --> 00:03:38,140
りすることだけだとすると、もともと矢印と矢印のコンテキストで考

47
00:03:38,140 --> 00:03:42,580
えられていたのと同じ便利な構成要素と線形代数の問題解決手法を利用

48
00:03:42,580 --> 00:03:46,620
できるはずだと感じます。スペースを作成し、関数にも適用します。

49
00:03:46,620 --> 00:03:52,580
たとえば、関数の線形変換という完全に合理的な概念があります

50
00:03:52,580 --> 00:04:00,100
。これは、ある関数を取り込んで別の関数に変換するものです。

51
00:04:00,100 --> 00:04:03,720
身近な例の 1 つは、微分積分学に由来します。

52
00:04:03,720 --> 00:04:08,800
ある機能を別の機能に変換するものです。

53
00:04:08,800 --> 00:04:12,860
この文脈では、変換の代わりにこれらの演算子と呼ばれ

54
00:04:12,860 --> 00:04:16,360
る言葉が聞こえることがありますが、意味は同じです。

55
00:04:16,360 --> 00:04:20,760
当然のことながら、関数の変換が線形であると

56
00:04:20,760 --> 00:04:22,480
はどういう意味なのかという疑問が生じます。

57
00:04:22,480 --> 00:04:27,600
線形性の正式な定義は、このシリーズの第 3 章で最初に説明

58
00:04:27,600 --> 00:04:31,100
した方法に比べて比較的抽象的で、象徴的に説明されています。

59
00:04:31,100 --> 00:04:35,660
しかし、抽象性の恩恵は、関数や矢印に適用で

60
00:04:35,660 --> 00:04:39,140
きるほど一般的なものが得られることです。

61
00:04:39,140 --> 00:04:44,340
一般に加法性とスケーリングと呼ばれる 2

62
00:04:44,340 --> 00:04:46,460
つの特性を満たす場合、変換は線形です。

63
00:04:46,460 --> 00:04:51,600
加法性とは、2 つのベクトル v と w を加算し、その合計に変換を適用すると、v

64
00:04:51,600 --> 00:05:00,100
と w の変換されたバージョンを加算した場合と同じ結果が得られることを意味します。

65
00:05:00,100 --> 00:05:10,420
スケーリング特性とは、ベクトル v をある数値でスケーリング

66
00:05:10,420 --> 00:05:17,100
してから変換を適用すると、v の変換バージョンを同じ量だけス

67
00:05:17,100 --> 00:05:21,960
ケーリングした場合と同じ最終的なベクトルが得られることです。

68
00:05:21,960 --> 00:05:26,580
これについてよく耳にするのは、線形変換ではベクトル加

69
00:05:26,580 --> 00:05:32,480
算とスカラー乗算の演算が保持されるということです。

70
00:05:32,480 --> 00:05:36,580
過去のビデオで説明した、グリッド線が平行かつ等間隔に保たれるという

71
00:05:36,580 --> 00:05:42,060
アイデアは、実際には、2D 空間内の点の特定の場合において、これ

72
00:05:42,060 --> 00:05:45,280
ら 2 つのプロパティが何を意味するかを示したものにすぎません。

73
00:05:45,280 --> 00:05:48,900
行列ベクトルの乗算を可能にするこれらのプロパティ

74
00:05:48,900 --> 00:05:54,320
の最も重要な結果の 1 つは、線形変換が基底ベク

75
00:05:54,320 --> 00:05:57,920
トルを取る場所によって完全に記述されることです。

76
00:05:57,920 --> 00:06:02,720
任意のベクトルは、何らかの方法で基底ベクトルをスケーリングおよび加算するこ

77
00:06:02,720 --> 00:06:07,400
とによって表現できるため、ベクトルの変換バージョンを見つけるには、同じ方法

78
00:06:07,400 --> 00:06:12,640
で基底ベクトルの変換バージョンをスケーリングおよび加算することになります。

79
00:06:12,640 --> 00:06:18,520
すぐにわかるように、これは矢印だけでなく関数にも当てはまります。

80
00:06:18,520 --> 00:06:23,100
たとえば、微積分の学生は、たとえそのように表現されているのを聞いたことがなく

81
00:06:23,100 --> 00:06:28,300
ても、導関数が加法的でスケーリング特性があるという事実を常に利用しています。

82
00:06:28,300 --> 00:06:33,820
2 つの関数を追加してから導関数を取得する場合、最初にそれぞれの関

83
00:06:33,820 --> 00:06:38,540
数の導関数を個別に取得してから、その結果を加算するのと同じです。

84
00:06:38,540 --> 00:06:44,700
同様に、関数をスケーリングしてから導関数を取得する場合、最初

85
00:06:44,700 --> 00:06:50,780
に導関数を取得してから結果をスケーリングするのと同じです。

86
00:06:50,780 --> 00:06:55,380
並列処理を実際にドリルするために、行列を使用して導

87
00:06:55,380 --> 00:06:57,060
関数を記述するとどのようになるかを見てみましょう。

88
00:06:57,060 --> 00:07:01,520
関数空間は無限次元になる傾向があるため、これは少し難しいで

89
00:07:01,520 --> 00:07:05,020
すが、この演習は実際には非常に満足できるものだと思います。

90
00:07:05,020 --> 00:07:10,380
x の 2 乗プラス 3x プラス 5、または 4x の 7 乗か

91
00:07:10,380 --> 00:07:12,620
ら 5x の 2 乗を引いたものなどの多項式に限定してみましょう。

92
00:07:12,620 --> 00:07:17,220
空間内の各多項式には有限数の項しか含まれませんが、空間全体

93
00:07:17,220 --> 00:07:22,340
には任意の大きな次数をもつ多項式が含まれることになります。

94
00:07:22,340 --> 00:07:28,380
最初に行う必要があるのは、この空間に座標を与えることです。これには基底を選択する必要があります。

95
00:07:28,380 --> 00:07:32,780
多項式は変数 x のスケーリングされた累乗の合計としてすでに記述されて

96
00:07:32,780 --> 00:07:38,540
いるため、x の純粋な累乗を基底関数として選択するのは非常に自然です。

97
00:07:38,540 --> 00:07:44,460
言い換えれば、最初の基底関数は定数関数となり、x の b0 は 1 に等しいということになります。

98
00:07:44,460 --> 00:07:50,540
2 番目の基底関数は、x の b1 が x に等しく、次に x の b2 が x

99
00:07:50,540 --> 00:07:54,000
の 2 乗に等しく、次に x の b3 が x の 3 乗に等しくなります。

100
00:07:54,000 --> 00:07:58,500
これらの基底関数が果たす役割は、矢印としてのベクトルの世界にお

101
00:07:58,500 --> 00:08:02,420
ける i-hat、j-hat、k-hat の役割と似ています。

102
00:08:02,420 --> 00:08:07,000
多項式の次数は任意に大きくできるため、

103
00:08:07,000 --> 00:08:08,380
この基底関数のセットは無限になります。

104
00:08:08,380 --> 00:08:12,320
しかし、それは問題ありません。それは、多項式をベクトルとして扱うと、多

105
00:08:12,320 --> 00:08:15,560
項式が無限に多くの座標を持つことになるということを意味するだけです。

106
00:08:15,560 --> 00:08:21,160
たとえば、x の 2 乗 + 3x + 5 のような多項式は

107
00:08:21,160 --> 00:08:26,200
、座標 5、3、1 と、無限に多くの 0 で記述されます。

108
00:08:26,200 --> 00:08:31,360
これは、最初の基底関数の 5 倍、2 番目の基底関数の 3

109
00:08:31,360 --> 00:08:37,080
倍、3 番目の基底関数の 1 倍であり、その時点以降は他の基

110
00:08:37,080 --> 00:08:41,000
底関数を追加しないでください、と言っているように読めます。

111
00:08:41,000 --> 00:08:47,240
多項式 4x から 7 番目の 5x を引いた 2 乗は、座標 0、0、負

112
00:08:47,240 --> 00:08:53,440
の 5、0、0、0、0、4 を持ち、その後無限のゼロの文字列になります。

113
00:08:53,440 --> 00:08:59,180
一般に、個々の多項式には有限数の項しか含まれないため、

114
00:08:59,180 --> 00:09:07,320
その座標は無限のゼロの尾を持つ有限の数値列になります。

115
00:09:07,320 --> 00:09:11,760
この座標系では、導関数は、ほとんどがゼロで満たされているが、このオフセ

116
00:09:11,760 --> 00:09:18,400
ット対角線でカウントダウンする正の整数を持つ無限行列で記述されます。

117
00:09:18,400 --> 00:09:21,840
このマトリックスを見つける方法についてはすぐに説明しますが、そ

118
00:09:21,840 --> 00:09:25,280
の感触を得る最良の方法は、実際に動作しているのを見ることです。

119
00:09:25,280 --> 00:09:32,160
多項式 x 3 乗 + 5x 2 乗 + 4x + 5

120
00:09:32,160 --> 00:09:34,920
を表す座標を取得し、それらの座標を行列の右側に置きます。

121
00:09:37,320 --> 00:09:45,920
結果の最初の座標に寄与する唯一の項は 1 x 4 です

122
00:09:45,920 --> 00:09:50,720
。これは、結果の定数項が 4 になることを意味します。

123
00:09:50,720 --> 00:09:55,720
これは、4x の導関数が定数 4 であるという事実に対応します。

124
00:09:55,720 --> 00:10:02,320
行列ベクトル積の 2 番目の座標に寄与する唯一の項は 2 x 5 です

125
00:10:02,320 --> 00:10:06,640
。これは、導関数の x の前の係数が 10 であることを意味します。

126
00:10:06,640 --> 00:10:10,440
これは 5x の 2 乗の微分に相当します。

127
00:10:10,440 --> 00:10:15,960
同様に、行列ベクトル積の 3 番目の

128
00:10:15,960 --> 00:10:18,160
座標は、3 掛ける 1 になります。

129
00:10:18,160 --> 00:10:23,200
これは、x の 3 乗を 3 乗した微分に相当します。

130
00:10:23,200 --> 00:10:27,040
そしてその後はゼロばかりになります。

131
00:10:27,040 --> 00:10:32,000
これが可能になるのは、導関数が線形であるためです。

132
00:10:32,000 --> 00:10:35,920
立ち止まってじっくり考えたい人のために、各基

133
00:10:35,920 --> 00:10:40,600
底関数の導関数を取得し、その結果の座標を各列

134
00:10:40,600 --> 00:11:00,320
に入力することで、この行列を構築できます。

135
00:11:00,320 --> 00:11:05,560
驚くべきことに、行列ベクトルの乗算と導関数は、最初はまったく別の動物のよ

136
00:11:05,600 --> 00:11:11,720
うに見えましたが、実際には両方とも同じファミリーのメンバーにすぎません。

137
00:11:11,720 --> 00:11:15,480
実際、ドット積や固有ベクトルなど、このシリーズで空間

138
00:11:15,480 --> 00:11:21,320
内の矢印としてのベクトルに関して私が話してきた概念

139
00:11:21,320 --> 00:11:25,520
のほとんどは、関数の世界で直接類似していますが、別の

140
00:11:25,520 --> 00:11:28,520
名前で呼ばれることもあります。内積や固有関数など。

141
00:11:28,520 --> 00:11:31,680
さて、ベクトルとは何かという問題に戻ります。

142
00:11:31,680 --> 00:11:36,580
ここで私が言いたいのは、数学にはベクトル的なものがたくさんあるということです。

143
00:11:36,580 --> 00:11:40,740
スケーリングと加算という合理的な概念が存在するオブジェクトのセットを扱っ

144
00:11:40,740 --> 00:11:45,680
ている限り、それが空間内の矢印のセット、数値のリスト、関数、または定義す

145
00:11:45,680 --> 00:11:50,440
ることを選択したその他のおかしなものであるかどうかにかかわらず、ベクトル

146
00:11:50,440 --> 00:11:57,600
、線形変換などに関する線形代数で開発されたツールは適用できるはずです。

147
00:11:57,600 --> 00:12:01,680
少し時間を取って、今自分が線形代数の理論を開

148
00:12:01,680 --> 00:12:03,320
発している数学者であると想像してください。

149
00:12:03,320 --> 00:12:07,920
自分の作品のすべての定義と発見が、1 つの特定のケースだけでなく、ベ

150
00:12:07,920 --> 00:12:13,560
クトル的なものすべてに完全に一般的に適用されることを望んでいます。

151
00:12:13,560 --> 00:12:18,800
矢印や数値や関数のリストなど、ベクトルっぽ

152
00:12:18,800 --> 00:12:20,680
いものの集合はベクトル空間と呼ばれます。

153
00:12:20,680 --> 00:12:24,880
そして、数学者としてあなたがしたいことは、「やあ、皆さん、私は皆

154
00:12:24,880 --> 00:12:28,480
さんが思いつくかもしれないさまざまな種類のクレイジーなベクトル

155
00:12:28,480 --> 00:12:29,800
空間について考える必要はありません」と言うことかもしれません。

156
00:12:29,800 --> 00:12:35,000
したがって、ベクトルの加算とスケーリングが従う必

157
00:12:35,000 --> 00:12:36,560
要があるルールのリストを確立することになります。

158
00:12:36,560 --> 00:12:40,760
これらの規則は公理と呼ばれます。現代の線形代数理論では、私

159
00:12:40,760 --> 00:12:45,760
たちが発見したすべての理論と構成が適用される場合、ベクト

160
00:12:45,760 --> 00:12:47,640
ル空間が満たさなければならない 8 つの公理があります。

161
00:12:47,640 --> 00:12:51,480
立ち止まって熟考したい人のために、ここでは画面上にそれらを残してお

162
00:12:51,480 --> 00:12:56,080
きますが、基本的に、これはベクトル加算とスカラー乗算の概念が期待ど

163
00:12:56,080 --> 00:12:59,160
おりの動作をするかどうかを確認するための単なるチェックリストです。

164
00:12:59,160 --> 00:13:04,000
これらの公理は、基本的な自然法則というよりも、結果を発見

165
00:13:04,000 --> 00:13:08,240
する数学者と、その結果を新しい種類のベクトル空間に適用し

166
00:13:08,240 --> 00:13:10,920
たいと考えている他の人々との間のインターフェイスです。

167
00:13:10,920 --> 00:13:15,680
たとえば、誰かが、pi クリーチャーの追加とスケーリングの定義を備えたす

168
00:13:15,680 --> 00:13:20,880
べての pi クリーチャーのセットなど、クレイジーなタイプのベクトル空間

169
00:13:20,880 --> 00:13:25,700
を定義した場合、これらの公理は、定義を行う前に確認する必要があるもののチ

170
00:13:25,700 --> 00:13:28,920
ェックリストのようなものになります。線形代数の結果の適用を開始します。

171
00:13:28,920 --> 00:13:33,020
そして、数学者であるあなたは、人々が定義する可能性のあるすべ

172
00:13:33,020 --> 00:13:35,060
てのクレイジーなベクトル空間について考える必要はありません。

173
00:13:35,060 --> 00:13:39,880
これらの公理に従って結果を証明するだけで、定義がこれらの公理

174
00:13:39,880 --> 00:13:44,720
を満たす人なら誰でも、たとえ彼らの状況を考えたこともなかっ

175
00:13:44,720 --> 00:13:47,080
たとしても、あなたの結果を喜んで適用できるようになります。

176
00:13:47,080 --> 00:13:51,160
その結果、空間内の矢印や関数など、特定の種類のベクトルを

177
00:13:51,160 --> 00:13:56,640
中心とするのではなく、すべての結果をかなり抽象的に、つ

178
00:13:56,640 --> 00:14:02,080
まりこれらの公理の観点からのみ表現する傾向があります。

179
00:14:02,080 --> 00:14:07,360
たとえば、これが、ほぼすべての教科書で、グリッド線が平

180
00:14:07,360 --> 00:14:12,240
行で等間隔に保たれることについてではなく、加法性とスケ

181
00:14:12,240 --> 00:14:14,080
ーリングという観点から線形変換を定義している理由です。

182
00:14:14,080 --> 00:14:18,020
たとえそれが特定の状況に限定されていたとしても、後者の方が直感的であ

183
00:14:18,020 --> 00:14:22,780
り、少なくとも私の見解では、初めて学習する人にとってはより有益です。

184
00:14:22,780 --> 00:14:27,600
したがって、ベクトルとは何かに対する数学者の答えは、その質問を無視することです。

185
00:14:27,600 --> 00:14:31,560
現代の理論では、ベクトルの形はあまり重要ではありません。

186
00:14:31,560 --> 00:14:37,100
矢印、数値のリスト、関数、円周率の生き物など、これらのルールに従うベク

187
00:14:37,100 --> 00:14:42,380
トルの追加とスケーリングの概念がある限り、実際には何でも構いません。

188
00:14:42,380 --> 00:14:45,480
それは、数字の 3 が実際には何なのかを尋ねるようなものです。

189
00:14:45,480 --> 00:14:49,700
それが具体的に現れるときは常に、物事のいくつかの三つ組の文脈の中にあります

190
00:14:49,700 --> 00:14:54,840
が、数学では、物事の考えられるすべての三つ組の抽象化として扱われ、単一のア

191
00:14:54,840 --> 00:14:59,280
イデアを使用して、考えられるすべての三つ組について推論することができます。

192
00:14:59,280 --> 00:15:04,860
同じことがベクトルにも当てはまります。ベクトルには多くの具体例があります

193
00:15:04,860 --> 00:15:09,420
が、数学はそれらすべてをベクトル空間の単一の無形の概念に抽象化します。

194
00:15:09,460 --> 00:15:13,460
しかし、このシリーズを見ている人なら誰でも知っているように、原点を矢印の根とした 2D

195
00:15:13,460 --> 00:15:19,840
空間のような、具体的で視覚化可能な設定でベクトルについて推論し始める方が良いと思います。

196
00:15:19,840 --> 00:15:24,480
しかし、線形代数をさらに学ぶにつれて、これらのツールはより

197
00:15:24,480 --> 00:15:29,000
一般的に適用できること、そしてこれが教科書や講義が抽象的な

198
00:15:29,000 --> 00:15:32,280
表現になりがちな根本的な理由であることを知ってください。

199
00:15:32,280 --> 00:15:36,920
それでは、皆さん、これをこの線形代数のエッセンス シリーズの紹介にしようと思います。

200
00:15:36,920 --> 00:15:40,700
ビデオを見て理解できたなら、線形代数の根底にある直

201
00:15:40,700 --> 00:15:44,740
観にしっかりとした基礎があると私は確信しています。

202
00:15:44,740 --> 00:15:47,760
もちろん、これはトピック全体を学習することと同じではありません。それは

203
00:15:47,760 --> 00:15:52,140
実際に問題に取り組むことによってのみ得られるものですが、適切な直感がす

204
00:15:52,140 --> 00:15:56,880
べて備わっていれば、今後の学習は大幅に効率的になる可能性があります。

205
00:15:56,880 --> 00:16:00,260
その直感を楽しんで応用してください。今後の学習に幸運を祈ります。

