1
00:00:13,411 --> 00:00:18,360
皆さん、今日は比較的簡単なビデオをご用意

2
00:00:18,360 --> 00:00:19,360
しました。章間の脚注のようなものです。

3
00:00:19,360 --> 00:00:23,240
最後の 2 つのビデオでは、線形変換と行列について

4
00:00:23,240 --> 00:00:28,240
説明しましたが、2 次元ベクトルから他の 2 次元

5
00:00:28,240 --> 00:00:29,240
ベクトルへの変換の具体的なケースのみを示しました。

6
00:00:29,480 --> 00:00:33,120
このシリーズ全体を通して、主に 2 次元で動作します。

7
00:00:33,120 --> 00:00:36,560
これは主に、実際に画面上で見て理解しやすいためです。

8
00:00:36,560 --> 00:00:40,280
しかし、それよりも重要なことは、すべての核となるアイデアを 2 次元で取

9
00:00:40,280 --> 00:00:43,400
得すると、それらは非常にシームレスに高次元に引き継がれるということです。

10
00:00:43,400 --> 00:00:47,480
それでも、時々平地の外を覗いて、これらのアイデアを 2 つの次元以上

11
00:00:47,480 --> 00:00:52,440
の側面に適用することが何を意味するのかを確認するのは良いことです。

12
00:00:52,440 --> 00:00:57,220
たとえば、入力として 3 次元ベクトル、出力として 3

13
00:00:57,260 --> 00:01:00,460
次元ベクトルを使用する線形変換を考えてみましょう。

14
00:01:00,460 --> 00:01:05,260
これは、グリッド線を平行かつ等間隔に保ち、原点を所定の位

15
00:01:05,260 --> 00:01:10,940
置に固定する方法で、グリッドで表される 3 次元空間内

16
00:01:10,940 --> 00:01:13,580
のすべての点の周囲を滑らかにすることで視覚化できます。

17
00:01:13,580 --> 00:01:18,020
そして、2 次元の場合と同じように、私たちが動き回っているのが見える空間のすべての

18
00:01:18,020 --> 00:01:23,020
点は、実際にはその点に先端を持つベクトルの単なる代理であり、私たちが実際に行ってい

19
00:01:23,020 --> 00:01:27,980
るのは、入力ベクトルが対応する出力に移動することについて考えていることです。 。

20
00:01:27,980 --> 00:01:32,100
そして、2 次元の場合と同様に、これらの変換の 1 つは

21
00:01:32,100 --> 00:01:34,240
、基底ベクトルがどこに行くかによって完全に記述されます。

22
00:01:34,240 --> 00:01:38,740
しかし現在、私たちが通常使用する 3 つの標準基底ベクトルがあります。x

23
00:01:38,740 --> 00:01:44,060
方向の単位ベクトル i-hat、y 方向の単位ベクトル j-hat、そ

24
00:01:44,060 --> 00:01:47,260
して新しいやつ、z 方向の単位ベクトルです。 、k-hatと呼ばれます。

25
00:01:47,260 --> 00:01:51,420
実際、すべての点を表す完全な 3D グリッドはやや乱雑になる可能性があるた

26
00:01:51,420 --> 00:01:57,060
め、基底ベクトルのみに従うことでこれらの変換を考える方が簡単だと思います。

27
00:01:57,060 --> 00:02:01,400
元の軸のコピーをバックグラウンドに残すことで、これら 3 つの

28
00:02:01,400 --> 00:02:06,180
基底ベクトルのそれぞれが着地する座標を考えることができます。

29
00:02:06,180 --> 00:02:11,560
これら 3 つのベクトルの座標を 3x3 行列の列として記録します。

30
00:02:11,560 --> 00:02:17,800
これにより、9 つの数値のみを使用して変換を完全に記述する行列が得られます。

31
00:02:17,800 --> 00:02:23,280
簡単な例として、y 軸を中心に空間を 9

32
00:02:23,280 --> 00:02:24,920
0 度回転する変換を考えてみましょう。

33
00:02:24,920 --> 00:02:29,640
つまり、i-hat が z 軸上の座標 0、0

34
00:02:29,640 --> 00:02:31,100
、マイナス 1 に移動することを意味します。

35
00:02:31,100 --> 00:02:35,000
j-hat は移動しないので、座標 0、1、0 に留まります。

36
00:02:35,000 --> 00:02:41,280
そして、k-hat は 1、0、0 の x 軸に移動します。

37
00:02:41,280 --> 00:02:46,780
これら 3 つの座標セットは、その回転を説明する行列の列に

38
00:02:46,780 --> 00:02:54,940
なります。座標 x、y、z を持つベクトルがどこに着地する

39
00:02:54,940 --> 00:02:57,060
かを確認するための推論は、2 次元の場合とほぼ同じです。

40
00:02:57,060 --> 00:03:01,700
これらの各座標は、各基底ベクトルをスケーリングして加算してベ

41
00:03:01,700 --> 00:03:06,460
クトルを取得する方法についての指示と考えることができます。

42
00:03:06,460 --> 00:03:11,340
そして重要な部分は、2D の場合と同様に、このスケーリングと

43
00:03:11,340 --> 00:03:16,420
追加のプロセスが変換の前後の両方で機能するということです。

44
00:03:16,420 --> 00:03:21,660
したがって、ベクトルがどこに到達するかを確認するには、これら

45
00:03:21,660 --> 00:03:29,980
の座標に行列の対応する列を乗算し、3 つの結果を加算します。

46
00:03:29,980 --> 00:03:32,080
2 つの行列の乗算も同様です。

47
00:03:32,080 --> 00:03:37,220
2 つの 3x3 行列が乗算されるのを見るときは常に、最初に右

48
00:03:37,220 --> 00:03:41,860
側の行列によってエンコードされた変換を適用し、次に左側の行列に

49
00:03:41,860 --> 00:03:44,140
よってエンコードされた変換を適用することを想像してください。

50
00:03:44,140 --> 00:03:48,180
3D 行列の乗算は、コンピューター グラフィックスやロボット工学など

51
00:03:48,180 --> 00:03:52,580
の分野では実際に非常に重要であることがわかりました。回転や 3 次元

52
00:03:52,580 --> 00:03:56,900
などは説明するのが非常に難しいためです。しかし、次のように分解できれ

53
00:03:56,900 --> 00:04:04,900
ば、理解しやすくなります。別々の、考えやすいローテーションの構成。

54
00:04:04,900 --> 00:04:09,620
この行列の乗算を数値的に実行することは、や

55
00:04:09,620 --> 00:04:10,620
はり 2 次元の場合と非常に似ています。

56
00:04:10,620 --> 00:04:14,980
実際、最後のビデオの理解度をテストする良い方法は、この行列の乗算が具体的に

57
00:04:14,980 --> 00:04:19,700
どのようなものであるかを推論して、それが空間内で 2 つの連続する変換を適

58
00:04:19,700 --> 00:04:32,660
用するというアイデアとどのように関連しているかを詳しく考えてみることです。

59
00:04:32,660 --> 00:04:35,020
次のビデオでは、決定要因について説明していきます。

