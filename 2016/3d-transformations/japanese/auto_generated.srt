1
00:00:13,460 --> 00:00:16,668
皆さん、今日は比較的簡単なビデオをご用意 しました。

2
00:00:16,668 --> 00:00:18,520
 章間の脚注のようなものです。

3
00:00:19,060 --> 00:00:22,207
最後の 2 つのビデオでは、線形変換と行列について 

4
00:00:22,207 --> 00:00:25,354
説明しましたが、2 次元ベクトルから他の 2 次元 

5
00:00:25,354 --> 00:00:28,380
ベクトルへの変換の具体的なケースのみを示しました。

6
00:00:28,920 --> 00:00:32,490
このシリーズ全体を通して、主に 2 次元で動作します。

7
00:00:32,490 --> 00:00:36,060
 これは主に、実際に画面上で見て理解しやすいためです。

8
00:00:36,500 --> 00:00:39,089
しかし、それよりも重要なことは、すべての核となるアイデアを 

9
00:00:39,089 --> 00:00:41,160
2 次元で取 得すると、それらは非常にシームレス

10
00:00:41,160 --> 00:00:42,800
に高次元に引き継がれるということです。

11
00:00:43,800 --> 00:00:46,552
それでも、時々平地の外を覗いて、これらのアイデアを 

12
00:00:46,552 --> 00:00:48,882
2 つの次元以上 の側面に適用することが何を

13
00:00:48,882 --> 00:00:51,000
意味するのかを確認するのは良いことです。

14
00:00:52,340 --> 00:00:55,548
たとえば、入力として 3 次元ベクトル、出力として 

15
00:00:55,548 --> 00:00:58,880
3 次元ベクトルを使用する線形変換を考えてみましょう。

16
00:01:00,160 --> 00:01:04,427
これは、グリッド線を平行かつ等間隔に保ち、原点を所定の位 

17
00:01:04,427 --> 00:01:08,547
置に固定する方法で、グリッドで表される 3 次元空間内 

18
00:01:08,547 --> 00:01:12,520
のすべての点の周囲を滑らかにすることで視覚化できます。

19
00:01:13,460 --> 00:01:16,111
そして、2 次元の場合と同じように、私たちが動き

20
00:01:16,111 --> 00:01:18,100
回っているのが見える空間のすべての 

21
00:01:18,100 --> 00:01:20,751
点は、実際にはその点に先端を持つベクトルの単なる

22
00:01:20,751 --> 00:01:22,740
代理であり、私たちが実際に行ってい 

23
00:01:22,740 --> 00:01:25,392
るのは、入力ベクトルが対応する出力に移動すること

24
00:01:25,392 --> 00:01:27,160
について考えていることです。 。

25
00:01:27,900 --> 00:01:30,779
そして、2 次元の場合と同様に、これらの変換の 1 つは 

26
00:01:30,779 --> 00:01:33,560
、基底ベクトルがどこに行くかによって完全に記述されます。

27
00:01:34,160 --> 00:01:36,301
しかし現在、私たちが通常使用する 3 

28
00:01:36,301 --> 00:01:38,105
つの標準基底ベクトルがあります。

29
00:01:38,105 --> 00:01:40,472
 x 方向の単位ベクトル i-hat、y 

30
00:01:40,472 --> 00:01:43,629
方向の単位ベクトル j-hat、そ して新しいやつ、z 

31
00:01:43,629 --> 00:01:46,560
方向の単位ベクトルです。 、k-hatと呼ばれます。

32
00:01:47,140 --> 00:01:49,271
実際、すべての点を表す完全な 3D 

33
00:01:49,271 --> 00:01:51,639
グリッドはやや乱雑になる可能性があるた 

34
00:01:51,639 --> 00:01:54,599
め、基底ベクトルのみに従うことでこれらの変換を考え

35
00:01:54,599 --> 00:01:56,020
る方が簡単だと思います。

36
00:01:56,920 --> 00:02:00,003
元の軸のコピーをバックグラウンドに残すことで、これら 

37
00:02:00,003 --> 00:02:02,287
3 つの 基底ベクトルのそれぞれが着地す

38
00:02:02,287 --> 00:02:04,000
る座標を考えることができます。

39
00:02:05,820 --> 00:02:08,139
これら 3 つのベクトルの座標を 

40
00:02:08,139 --> 00:02:10,460
3x3 行列の列として記録します。

41
00:02:11,260 --> 00:02:13,709
これにより、9 つの数値のみを使用して

42
00:02:13,709 --> 00:02:16,160
変換を完全に記述する行列が得られます。

43
00:02:17,200 --> 00:02:20,411
簡単な例として、y 軸を中心に空間を 

44
00:02:20,411 --> 00:02:23,960
9 0 度回転する変換を考えてみましょう。

45
00:02:24,860 --> 00:02:27,593
つまり、i-hat が z 軸上の座標 0、0 

46
00:02:27,593 --> 00:02:30,100
、マイナス 1 に移動することを意味します。

47
00:02:30,820 --> 00:02:32,829
j-hat は移動しないので、座標 

48
00:02:32,829 --> 00:02:34,280
0、1、0 に留まります。

49
00:02:34,880 --> 00:02:38,840
そして、k-hat は 1、0、0 の x 軸に移動します。

50
00:02:40,990 --> 00:02:46,123
これら 3 つの座標セットは、その回転を説明する行列の列に 

51
00:02:46,123 --> 00:02:51,086
なります。 座標 x、y、z を持つベクトルがどこに着地す

52
00:02:51,086 --> 00:02:56,220
る かを確認するための推論は、2 次元の場合とほぼ同じです。

53
00:02:56,940 --> 00:03:00,490
これらの各座標は、各基底ベクトルをスケーリングして加算してベ

54
00:03:00,490 --> 00:03:04,040
 クトルを取得する方法についての指示と考えることができます。

55
00:03:06,260 --> 00:03:10,130
そして重要な部分は、2D の場合と同様に、このスケーリングと

56
00:03:10,130 --> 00:03:14,000
 追加のプロセスが変換の前後の両方で機能するということです。

57
00:03:16,380 --> 00:03:19,147
したがって、ベクトルがどこに到達するかを

58
00:03:19,147 --> 00:03:23,298
確認するには、これら の座標に行列の対応する列を乗算し、3 

59
00:03:23,298 --> 00:03:24,820
つの結果を加算します。

60
00:03:29,600 --> 00:03:31,500
2 つの行列の乗算も同様です。

61
00:03:32,020 --> 00:03:34,770
2 つの 3x3 行列が乗算されるのを見るとき

62
00:03:34,770 --> 00:03:37,520
は常に、最初に右 側の行列によってエンコードさ

63
00:03:37,520 --> 00:03:39,672
れた変換を適用し、次に左側の行列に 

64
00:03:39,672 --> 00:03:43,260
よってエンコードされた変換を適用することを想像してください。

65
00:03:44,060 --> 00:03:46,242
3D 行列の乗算は、コンピューター 

66
00:03:46,242 --> 00:03:48,304
グラフィックスやロボット工学など 

67
00:03:48,304 --> 00:03:51,457
の分野では実際に非常に重要であることがわかりました。

68
00:03:51,457 --> 00:03:55,096
 回転や 3 次元 などは説明するのが非常に難しいためです。

69
00:03:55,096 --> 00:03:58,613
 しかし、次のように分解できれ ば、理解しやすくなります。

70
00:03:58,613 --> 00:04:01,160
 別々の、考えやすいローテーションの構成。

71
00:04:04,359 --> 00:04:07,240
この行列の乗算を数値的に実行することは、や 

72
00:04:07,240 --> 00:04:09,860
はり 2 次元の場合と非常に似ています。

73
00:04:10,480 --> 00:04:13,785
実際、最後のビデオの理解度をテストする良い方法は、この行

74
00:04:13,785 --> 00:04:17,090
列の乗算が具体的に どのようなものであるかを推論して、そ

75
00:04:17,090 --> 00:04:19,452
れが空間内で 2 つの連続する変換を適 

76
00:04:19,452 --> 00:04:22,757
用するというアイデアとどのように関連しているかを詳しく考

77
00:04:22,757 --> 00:04:23,820
えてみることです。

78
00:04:32,140 --> 00:04:34,500
次のビデオでは、決定要因について説明していきます。

