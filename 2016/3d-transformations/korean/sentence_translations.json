[
 {
  "input": "Hey folks, I've got a relatively quick video for you today, just sort of a footnote between chapters.",
  "translatedText": "안녕하세요 여러분, 오늘은 장 사이의 각주에 불과한 비교적 빠른 비디오를 준비했습니다.",
  "model": "google_nmt",
  "from_community_srt": "[고전 음악] \"리사: 아빠는 어디있어요?\" \"프링크: 글쎄, 가장 멍청한 사람이 보기에도 확실할거야.\" \"...쌍곡기하학 고급학위를 취득한사람이란 말야... 호머 심슨은 비틀거릴 수 밖에 없어.\" \" 3차원 공간에서!\"  - 만화 심슨 중에서 여러분 안녕, 오늘은 꽤 짧은 동영상을 가져왔어. 챕터사이의 각주정도되는 분량이야.",
  "n_reviews": 0,
  "start": 13.46,
  "end": 18.52
 },
 {
  "input": "In the last two videos I talked about linear transformations and matrices, but I only showed the specific case of transformations that take two-dimensional vectors to other two-dimensional vectors.",
  "translatedText": "지난 두 영상에서는 선형변환과 행렬에 대해 이야기했지만, 2차원 벡터를 다른 2차원 벡터로 변환하는 구체적인 사례만 보여드렸습니다.",
  "model": "google_nmt",
  "from_community_srt": "지난 두 동영상을 통해 내가 말했던 것은 선형변환(linear transformation) 과 행렬(matrix) 이였어. 근데 특수한 예제 상황만을 보여줬었어. 2차원 벡터 -> 2차원 벡터로 바뀌는 예제들만 보여줬었지.",
  "n_reviews": 0,
  "start": 19.06,
  "end": 28.38
 },
 {
  "input": "In general throughout the series we'll work mainly in two dimensions, mostly because it's easier to actually see on the screen and wrap your mind around.",
  "translatedText": "일반적으로 시리즈 전체에서 우리는 주로 2차원에서 작업할 것입니다. 그 이유는 실제로 화면에서 보고 마음을 사로잡는 것이 더 쉽기 때문입니다.",
  "model": "google_nmt",
  "from_community_srt": "그 시리즈 연장선으로 우리는 이번에도 주로 2차원을 다룰거야. 주요이유는 화면에도 보여주기 훨씬 쉽고, 마음속에도 담기에도 편하기 때문이지.",
  "n_reviews": 0,
  "start": 28.92,
  "end": 36.06
 },
 {
  "input": "But more importantly than that, once you get all the core ideas in two dimensions, they carry over pretty seamlessly to higher dimensions.",
  "translatedText": "하지만 그보다 더 중요한 것은 일단 2차원에서 모든 핵심 아이디어를 얻으면 더 높은 차원으로 원활하게 전달된다는 것입니다.",
  "model": "google_nmt",
  "from_community_srt": "하지만 그보다 더 중요한 이유는, 일단 2차원에서 이 핵심 개념들을 제대로 이해했다면, 그보다 높은 차원에도 부드럽게 잘 적용돼.",
  "n_reviews": 0,
  "start": 36.5,
  "end": 42.8
 },
 {
  "input": "Nevertheless, it's good to peek our heads outside of flatland now and then to, you know, see what it means to apply these ideas in more than just those two dimensions.",
  "translatedText": "그럼에도 불구하고 때때로 평지 밖에서 머리를 들여다보고 이러한 아이디어를 두 가지 차원 이상의 차원에 적용하는 것이 무엇을 의미하는지 확인하는 것이 좋습니다.",
  "model": "google_nmt",
  "from_community_srt": "그렇지만, 가끔은 평면세계 바깥으로 고개를 들어보는 것도 좋겠어... 2차원 이상의 차원에 이 개념들을 적용한다는 것은 어떤 의미일지 살펴보자.",
  "n_reviews": 0,
  "start": 43.8,
  "end": 51.0
 },
 {
  "input": "For example, consider a linear transformation with three-dimensional vectors as inputs and three-dimensional vectors as outputs.",
  "translatedText": "예를 들어, 3차원 벡터를 입력으로 사용하고 3차원 벡터를 출력으로 사용하는 선형 변환을 생각해 보세요.",
  "model": "google_nmt",
  "from_community_srt": "예를 들어, 3차원의 선형변환을 생각해보자. 3차원 벡터를 입력받아 3차원 벡터를 출력하지.",
  "n_reviews": 0,
  "start": 52.34,
  "end": 58.88
 },
 {
  "input": "We can visualize this by smooshing around all the points in three-dimensional space, as represented by a grid, in such a way that keeps the grid lines parallel and evenly spaced, and which fixes the origin in place.",
  "translatedText": "그리드 선을 평행하고 균일한 간격으로 유지하고 원점을 제자리에 고정하는 방식으로 그리드로 표시되는 3차원 공간의 모든 점 주위를 스무딩하여 이를 시각화할 수 있습니다.",
  "model": "google_nmt",
  "from_community_srt": "우리는 문제없이 자연스럽게 3차원 공간으로 시각화할 수 있어. 격자로 표현된 3차원 공간을 상상해봐. 격자선은 평행하고, 간격이 일정하고, 원점이 고정되어 있지.",
  "n_reviews": 0,
  "start": 60.16,
  "end": 72.52
 },
 {
  "input": "And just as with two dimensions, every point of space that we see moving around is really just a proxy for a vector who has its tip at that point, and what we're really doing is thinking about input vectors moving over to their corresponding outputs.",
  "translatedText": "2차원과 마찬가지로 우리가 움직이는 모든 공간 지점은 실제로 그 지점에 끝이 있는 벡터의 프록시일 뿐이며 우리가 실제로 하는 일은 입력 벡터가 해당 출력으로 이동하는 것에 대해 생각하는 것입니다. .",
  "model": "google_nmt",
  "from_community_srt": "그리고 2차원에서와 마찬가지로, 공간의 모든 점들을 벡터의 끝점을 대신한다고 생각하는 거야. 그리고 우리가 하는 것은 입력 벡터를 받아서 *움직여서* 대응되는 결과벡터로 만드는 거지.",
  "n_reviews": 0,
  "start": 73.46,
  "end": 87.16
 },
 {
  "input": "And just as with two dimensions, one of these transformations is completely described by where the basis vectors go.",
  "translatedText": "2차원과 마찬가지로 이러한 변환 중 하나는 기본 벡터의 위치에 따라 완전히 설명됩니다.",
  "model": "google_nmt",
  "from_community_srt": "그리고 2차원에서와 마찬가지로, 이 변환은 기저벡터의 움직임을 알면 완벽하게 서술될 수 있어.",
  "n_reviews": 0,
  "start": 87.9,
  "end": 93.56
 },
 {
  "input": "But now, there are three standard basis vectors that we typically use.",
  "translatedText": "하지만 이제 우리가 일반적으로 사용하는 세 가지 표준 기저 벡터가 있습니다.",
  "model": "google_nmt",
  "from_community_srt": "근데, 세 개의 표준 기저벡터를 표시하는 일반적인 방법이 있어.",
  "n_reviews": 0,
  "start": 94.16,
  "end": 97.68
 },
 {
  "input": "The unit vector in the x direction, i-hat, the unit vector in the y direction, j-hat, and a new guy, the unit vector in the z direction, called k-hat.",
  "translatedText": "x 방향의 단위 벡터 i-hat, y 방향의 단위 벡터 j-hat, 그리고 k-hat이라는 z 방향의 단위 벡터인 새로운 녀석입니다.",
  "model": "google_nmt",
  "from_community_srt": "x 축 방향 단위벡터는 i-hat 이라고 하고, y 축 단위벡터를 j-hat, 이번에 추가된 z 축 단위벡터는 k-hat 이라고 표기해.",
  "n_reviews": 0,
  "start": 98.0,
  "end": 106.56
 },
 {
  "input": "In fact, I think it's easier to think about these transformations by only following those basis vectors, since the full 3D grid representing all points can get kind of messy.",
  "translatedText": "사실, 모든 점을 나타내는 전체 3D 그리드가 다소 지저분해질 수 있기 때문에 기본 벡터만 따르면 이러한 변환에 대해 생각하는 것이 더 쉽다고 생각합니다.",
  "model": "google_nmt",
  "from_community_srt": "사실, 나는 이 변환들을 오직 앞서말한 기저벡터들을 가지고 생각하는게 더 쉬울거 같아. 왜냐하면, 3차원 격자에서 모든 점을 표시하는 것은 꽤 지저분해 보여.",
  "n_reviews": 0,
  "start": 107.14,
  "end": 116.02
 },
 {
  "input": "By leaving a copy of the original axes in the background, we can think about the coordinates of where each of these three basis vectors lands.",
  "translatedText": "배경에 원본 축의 복사본을 남겨두면 세 가지 기본 벡터가 각각 어디에 위치하는지 좌표를 생각해 볼 수 있습니다.",
  "model": "google_nmt",
  "from_community_srt": "원본 축만 배경에 남겨놓고 변환 후의 세 기저벡터의 좌표값만 생각하는 거야.",
  "n_reviews": 0,
  "start": 116.92,
  "end": 124.0
 },
 {
  "input": "Record the coordinates of these three vectors as the columns of a 3x3 matrix.",
  "translatedText": "이 세 벡터의 좌표를 3x3 행렬의 열로 기록합니다.",
  "model": "google_nmt",
  "from_community_srt": "세 벡터의 좌표값을 열(column)로 합쳐 3x3 행렬로 적어.",
  "n_reviews": 0,
  "start": 125.82,
  "end": 130.46
 },
 {
  "input": "This gives a matrix that completely describes the transformation using only nine numbers.",
  "translatedText": "이는 단지 9개의 숫자만을 사용하여 변환을 완벽하게 설명하는 행렬을 제공합니다.",
  "model": "google_nmt",
  "from_community_srt": "단지 9 개의 숫자들만 있으면 이 변환을 완전하게 설명할 수 있어.",
  "n_reviews": 0,
  "start": 131.26,
  "end": 136.16
 },
 {
  "input": "As a simple example, consider the transformation that rotates space 90 degrees around the y-axis.",
  "translatedText": "간단한 예로, y축을 중심으로 공간을 90도 회전시키는 변환을 생각해 보세요.",
  "model": "google_nmt",
  "from_community_srt": "간단한 예를 들게. 공간을 회전시키는 변환을 생각해보자. y 축 기준으로 90 도 회전시키는 거야.",
  "n_reviews": 0,
  "start": 137.2,
  "end": 143.96
 },
 {
  "input": "So that would mean that it takes i-hat to the coordinates 0,0, negative 1 on the z-axis.",
  "translatedText": "즉, i-hat이 z축의 좌표 0,0, -1로 이동한다는 의미입니다.",
  "model": "google_nmt",
  "from_community_srt": "그럼 i-hat 좌표값은 z축 위의 [0, 0, -1] 에 위치하게 돼.",
  "n_reviews": 0,
  "start": 144.86,
  "end": 150.1
 },
 {
  "input": "It doesn't move j-hat, so it stays at the coordinates 0,1,0.",
  "translatedText": "j-hat을 움직이지 않으므로 좌표 0,1,0에 유지됩니다.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 150.82,
  "end": 154.28
 },
 {
  "input": "And then k-hat moves over to the x-axis at 1,0,0.",
  "translatedText": "그런 다음 k-hat은 1,0,0의 x축으로 이동합니다.",
  "model": "google_nmt",
  "from_community_srt": "j-hat 은 움직이지 않아서 그대로 [0,1,0] 이고, k-hat 은 x 축 위인 [1,0,0]으로 이동하지.",
  "n_reviews": 0,
  "start": 154.88,
  "end": 158.84
 },
 {
  "input": "Those three sets of coordinates become the columns of a matrix that describes that rotation transformation.",
  "translatedText": "이 세 가지 좌표 세트는 해당 회전 변환을 설명하는 행렬의 열이 됩니다.",
  "model": "google_nmt",
  "from_community_srt": "3 좌표값의 집합이 행렬의 열을 구성하게 돼. 이 행렬이 이 회전변환을 나타내게 돼.",
  "n_reviews": 0,
  "start": 160.99,
  "end": 166.76
 },
 {
  "input": "To see where a vector with coordinates x,y,z lands, the reasoning is almost identical to what it was for two dimensions.",
  "translatedText": "x,y,z 좌표를 가진 벡터가 어디에 있는지 확인하기 위한 추론은 2차원의 경우와 거의 동일합니다.",
  "model": "google_nmt",
  "from_community_srt": "어떤 벡터 [x,y,z] 가 변환 후 어디가 되는지는 2차원에서 했던 방법이랑 거의 동일해.",
  "n_reviews": 0,
  "start": 169.76,
  "end": 176.22
 },
 {
  "input": "Each of those coordinates can be thought of as instructions for how to scale each basis vector so that they add together to get your vector.",
  "translatedText": "각 좌표는 각 기본 벡터의 크기를 조정하여 벡터를 더하는 방법에 대한 지침으로 생각할 수 있습니다.",
  "model": "google_nmt",
  "from_community_srt": "각 좌표값을 스케일링 팩터로 보면 돼. 각 기저벡터들은 그 팩터로 스케일링해서 합치면 원하는 결과벡터를 얻게돼.",
  "n_reviews": 0,
  "start": 176.94,
  "end": 184.04
 },
 {
  "input": "And the important part, just like the 2D case, is that this scaling and adding process works both before and after the transformation.",
  "translatedText": "그리고 중요한 부분은 2D 사례와 마찬가지로 이러한 크기 조정 및 추가 프로세스가 변환 전후에 모두 작동한다는 것입니다.",
  "model": "google_nmt",
  "from_community_srt": "2차원 경우와 마찬가지로, 중요한 점은 이렇게 스케일링과 더하는 절차가 변환 전-후에도 같다는 것이야.",
  "n_reviews": 0,
  "start": 186.26,
  "end": 194.0
 },
 {
  "input": "So to see where your vector lands, you multiply those coordinates by the corresponding columns of the matrix, and then you add together the three results.",
  "translatedText": "따라서 벡터가 어디에 있는지 확인하려면 해당 좌표에 행렬의 해당 열을 곱한 다음 세 가지 결과를 더합니다.",
  "model": "google_nmt",
  "from_community_srt": "그래서 벡터의 변환결과를 알려면, 벡터의 좌표값을 행렬의 대응되는 열과 곱한다음 그 결과들을 합하면 돼.",
  "n_reviews": 0,
  "start": 196.38,
  "end": 204.82
 },
 {
  "input": "Multiplying two matrices is also similar.",
  "translatedText": "두 행렬을 곱하는 것도 비슷합니다.",
  "model": "google_nmt",
  "from_community_srt": "두 행렬의 곱셈도 이와 유사해.",
  "n_reviews": 0,
  "start": 209.6,
  "end": 211.5
 },
 {
  "input": "Whenever you see two 3x3 matrices getting multiplied together, you should imagine first applying the transformation encoded by the right one, then applying the transformation encoded by the left one.",
  "translatedText": "두 개의 3x3 행렬이 함께 곱해지는 것을 볼 때마다 먼저 오른쪽 행렬로 인코딩된 변환을 적용한 다음 왼쪽 행렬로 인코딩된 변환을 적용하는 것을 상상해야 합니다.",
  "model": "google_nmt",
  "from_community_srt": "두 개의 3x3 행렬을 곱할 때마다 생각할때는, 오른쪽 행렬로 먼저 변환처리가 되고, 그리고나서 왼쪽 행렬을 적용을 하는 것으로 생각하도록 해.",
  "n_reviews": 0,
  "start": 212.02,
  "end": 223.26
 },
 {
  "input": "It turns out that 3D matrix multiplication is actually pretty important for fields like computer graphics and robotics, since things like rotations and three dimensions can be pretty hard to describe, but they're easier to wrap your mind around if you can break them down as the composition of separate, easier-to-think-about rotations.",
  "translatedText": "3D 행렬 곱셈은 실제로 컴퓨터 그래픽이나 로봇 공학과 같은 분야에서 매우 중요하다는 것이 밝혀졌습니다. 회전이나 3차원 같은 것은 설명하기 꽤 어려울 수 있지만 다음과 같이 분해할 수 있다면 마음을 정리하기가 더 쉽기 때문입니다. 분리되어 생각하기 쉬운 회전의 구성입니다.",
  "model": "google_nmt",
  "from_community_srt": "요즘들어 3차원 행렬의 곱셈이 실제로 컴퓨터 그래픽이나 로봇 분야에서 꽤 중요해졌어. 3차원에서 여러회전들을 서술하기 상당히 어렵거든. 근데, 작은 변환들로 쪼개고 그것의 결합(composition) 으로 생각하면, 회전을 다루기 좀 더 쉬워져.",
  "n_reviews": 0,
  "start": 224.06,
  "end": 241.16
 },
 {
  "input": "Performing this matrix multiplication numerically is, once again, pretty similar to the two-dimensional case.",
  "translatedText": "이 행렬 곱셈을 수치적으로 수행하는 것은 다시 한번 2차원 경우와 매우 유사합니다.",
  "model": "google_nmt",
  "from_community_srt": "수치적으로 행렬 곱셈을 수행할때는, 2차원 예제랑 거의 똑같아.",
  "n_reviews": 0,
  "start": 244.36,
  "end": 249.86
 },
 {
  "input": "In fact, a good way to test your understanding of the last video would be to try to reason through what specifically this matrix multiplication should look like, thinking closely about how it relates to the idea of applying two successive transformations in space.",
  "translatedText": "사실, 지난 비디오에 대한 이해를 테스트하는 좋은 방법은 이 행렬 곱셈이 구체적으로 어떤 모습이어야 하는지 추론하고, 이것이 공간에서 두 개의 연속적인 변환을 적용하는 아이디어와 어떻게 관련되는지 자세히 생각해 보는 것입니다.",
  "model": "google_nmt",
  "from_community_srt": "사실 너가 지난 동영상을 어느정도 이해했는지 테스트해보는 좋은 방법은 한번 구체적으로 설명해보는 거야. 이 행렬 곱셈이 어떨지를 말야. 저번에 배웠던 아이디어와 관련해서 생각해봐. 공간속에서 연속된 변환의 적용이라는 개념으로 말야.",
  "n_reviews": 0,
  "start": 250.48,
  "end": 263.82
 },
 {
  "input": "In the next video, I'll start getting into the determinant.",
  "translatedText": "다음 비디오에서는 행렬식에 대해 알아보겠습니다.",
  "model": "google_nmt",
  "from_community_srt": "다음 동영상부터는 행렬식(determinant) 으로 들어갈거야.",
  "n_reviews": 0,
  "start": 272.14,
  "end": 274.5
 }
]