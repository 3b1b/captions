1
00:00:13,460 --> 00:00:17,074
嘿伙计们，我今天为你们准备了一个相 对较快的视频，

2
00:00:17,074 --> 00:00:18,520
只是章节之间的脚注。

3
00:00:19,060 --> 00:00:22,897
在上两个视频中，我讨论了线性变换和 矩阵，

4
00:00:22,897 --> 00:00:28,380
但我只展示了将二维向量转换 为其他二维向量的变换的具体情况。

5
00:00:28,920 --> 00:00:31,776
本系列的一般内容将主要在二维空间中工作，

6
00:00:31,776 --> 00:00:36,060
主要是因为 它更容易在屏幕上实际看到并让您的思维更容易理解。

7
00:00:36,500 --> 00:00:40,187
但更重要的是，一旦你获得了二维的所有核心 思想，

8
00:00:40,187 --> 00:00:42,800
它们就可以无缝地转移到更高的维度。

9
00:00:43,800 --> 00:00:47,142
尽管如此，时不时地把我们的头脑抛向平地之外是件好事，

10
00:00:47,142 --> 00:00:51,000
你知 道，看看将这些想法应用到不仅仅是这两个维度意味着什么。

11
00:00:52,340 --> 00:00:55,715
例如，考虑以三维向量作为输入、 

12
00:00:55,715 --> 00:00:58,880
以三维向量作为输出的线性变换。

13
00:01:00,160 --> 00:01:04,346
我们可以通过平滑网格表示的三维空间中的所 

14
00:01:04,346 --> 00:01:09,928
有点来可视化这一点，以保持网格线平行且均 匀分布的方式，

15
00:01:09,928 --> 00:01:12,520
并将原点固定在适当的位置。

16
00:01:13,460 --> 00:01:18,157
就像二维一样，我们看到移动的每个空间点实际上只 

17
00:01:18,157 --> 00:01:22,071
是一个向量的代理，该向量的尖端位于该点，

18
00:01:22,071 --> 00:01:27,160
而我们 真正要做的是考虑输入向量移动到其相应的输出。

19
00:01:27,900 --> 00:01:33,560
就像二维一样，这些变换之一 完全由基向量的走向来描述。

20
00:01:34,160 --> 00:01:37,068
但是现在，我们通常使用三个标准基向量，

21
00:01:37,068 --> 00:01:39,671
x 方向的单位向 量 i-hat，

22
00:01:39,671 --> 00:01:43,651
y 方向的单位向量 j-hat，以及 一个新的家伙，

23
00:01:43,651 --> 00:01:46,560
z 方向的单位向量，称为 k-hat。

24
00:01:47,140 --> 00:01:51,657
事实上，我认为仅通过遵循这些基本向量来考虑这些变换会更容 

25
00:01:51,657 --> 00:01:56,020
易，因为表示所有点的完整 3D 网格可能会变得有点混乱。

26
00:01:56,920 --> 00:02:00,646
通过在背景中保留原始轴的副本，我们可以 

27
00:02:00,646 --> 00:02:04,000
考虑这三个基本向量中的每一个的坐标。

28
00:02:05,820 --> 00:02:10,460
将这三个向量的坐标记录为 3x3 矩阵的列。

29
00:02:11,260 --> 00:02:16,160
这给出了一个仅使用九个数字就可以完整描述变换的矩阵。

30
00:02:17,200 --> 00:02:20,477
作为一个简单的示例，请考虑围绕 

31
00:02:20,477 --> 00:02:23,960
y 轴将空间旋转 90 度的变换。

32
00:02:24,860 --> 00:02:29,081
所以这意味着它需要 i-hat 到 z 轴上的坐标 0, 

33
00:02:29,081 --> 00:02:30,100
0, 负 1。

34
00:02:30,820 --> 00:02:34,280
它不会移动 j-hat，因此它停留在坐标 0, 1, 0。

35
00:02:34,880 --> 00:02:38,840
然后 k-hat 移动到 x 轴 1,0,0。

36
00:02:40,990 --> 00:02:45,875
这三组坐标成为描述旋转的矩阵的列。

37
00:02:45,875 --> 00:02:52,484
 要查看坐标为 x、y、z 的向量落 在哪里，

38
00:02:52,484 --> 00:02:56,220
推理几乎与二维的推理相同。

39
00:02:56,940 --> 00:03:00,651
这些坐标中的每一个都可以被认为是如何缩放每个 

40
00:03:00,651 --> 00:03:04,040
基本向量的指令，以便它们加在一起得到向量。

41
00:03:06,260 --> 00:03:10,234
与 2D 情况一样，重要的部分是此缩 

42
00:03:10,234 --> 00:03:14,000
放和添加过程在转换之前和之后都有效。

43
00:03:16,380 --> 00:03:22,349
因此，要查看向量落在哪里，请将这些坐标乘 以矩阵的相应列，

44
00:03:22,349 --> 00:03:24,820
然后将三个结果加在一起。

45
00:03:29,600 --> 00:03:31,500
两个矩阵相乘也类似。

46
00:03:32,020 --> 00:03:35,698
每当您看到两个 3x3 矩阵相乘时，

47
00:03:35,698 --> 00:03:40,194
 您应该想象首先应用由右侧矩阵编码的变 换，

48
00:03:40,194 --> 00:03:43,260
然后应用由左侧矩阵编码的变换。

49
00:03:44,060 --> 00:03:48,434
事实证明，3D 矩阵乘法实际上对于计算机图 

50
00:03:48,434 --> 00:03:52,808
形学和机器人学等领域非常重要，因为像旋转和 

51
00:03:52,808 --> 00:03:57,183
三维这样的东西可能很难描述，但如果你能将它 

52
00:03:57,183 --> 00:04:01,160
们分解为单独的、更容易思考的轮换的组成。

53
00:04:04,359 --> 00:04:09,860
以数字方式执行此矩阵乘法 再次与二维情况非常相似。

54
00:04:10,480 --> 00:04:14,989
事实上，测试您对上一个视频的理解的一个好方法是 

55
00:04:14,989 --> 00:04:18,747
尝试推理这个矩阵乘法具体应该是什么样子，

56
00:04:18,747 --> 00:04:23,820
仔细思 考它与在空间中应用两个连续变换的想法有何关系。

57
00:04:32,140 --> 00:04:34,500
在下一个视频中，我将开始讨论行列式。

