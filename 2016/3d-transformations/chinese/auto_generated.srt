1
00:00:13,411 --> 00:00:16,470
嘿伙计们，我今天为你们准备了一个相

2
00:00:16,470 --> 00:00:19,360
对较快的视频，只是章节之间的脚注。

3
00:00:19,360 --> 00:00:22,931
在上两个视频中，我讨论了线性变换和

4
00:00:22,931 --> 00:00:26,305
矩阵，但我只展示了将二维向量转换

5
00:00:26,305 --> 00:00:29,480
为其他二维向量的变换的具体情况。

6
00:00:29,480 --> 00:00:33,161
本系列的一般内容将主要在二维空间中工作，主要是因为

7
00:00:33,161 --> 00:00:36,560
它更容易在屏幕上实际看到并让您的思维更容易理解。

8
00:00:36,560 --> 00:00:40,063
但更重要的是，一旦你获得了二维的所有核心

9
00:00:40,063 --> 00:00:43,400
思想，它们就可以无缝地转移到更高的维度。

10
00:00:43,400 --> 00:00:48,081
尽管如此，时不时地把我们的头脑抛向平地之外是件好事，你知

11
00:00:48,081 --> 00:00:52,440
道，看看将这些想法应用到不仅仅是这两个维度意味着什么。

12
00:00:52,440 --> 00:00:56,579
例如，考虑以三维向量作为输入、

13
00:00:56,579 --> 00:01:00,460
以三维向量作为输出的线性变换。

14
00:01:00,460 --> 00:01:04,903
我们可以通过平滑网格表示的三维空间中的所

15
00:01:04,903 --> 00:01:09,347
有点来可视化这一点，以保持网格线平行且均

16
00:01:09,347 --> 00:01:13,580
匀分布的方式，并将原点固定在适当的位置。

17
00:01:13,580 --> 00:01:18,517
就像二维一样，我们看到移动的每个空间点实际上只

18
00:01:18,517 --> 00:01:23,454
是一个向量的代理，该向量的尖端位于该点，而我们

19
00:01:23,454 --> 00:01:27,980
真正要做的是考虑输入向量移动到其相应的输出。

20
00:01:27,980 --> 00:01:34,240
就像二维一样，这些变换之一 完全由基向量的走向来描述。

21
00:01:34,240 --> 00:01:38,740
但是现在，我们通常使用三个标准基向量，x 方向的单位向

22
00:01:38,740 --> 00:01:43,080
量 i-hat，y 方向的单位向量 j-hat，以及

23
00:01:43,080 --> 00:01:47,260
一个新的家伙，z 方向的单位向量，称为 k-hat。

24
00:01:47,260 --> 00:01:52,245
事实上，我认为仅通过遵循这些基本向量来考虑这些变换会更容

25
00:01:52,245 --> 00:01:57,060
易，因为表示所有点的完整 3D 网格可能会变得有点混乱。

26
00:01:57,060 --> 00:02:01,860
通过在背景中保留原始轴的副本，我们可以

27
00:02:01,860 --> 00:02:06,180
考虑这三个基本向量中的每一个的坐标。

28
00:02:06,180 --> 00:02:11,560
将这三个向量的坐标记录为 3x3 矩阵的列。

29
00:02:11,560 --> 00:02:17,800
这给出了一个仅使用九个数字就可以完整描述变换的矩阵。

30
00:02:17,800 --> 00:02:21,252
作为一个简单的示例，请考虑围绕

31
00:02:21,252 --> 00:02:24,920
y 轴将空间旋转 90 度的变换。

32
00:02:24,920 --> 00:02:28,010
所以这意味着它需要 i-hat 到

33
00:02:28,010 --> 00:02:31,100
z 轴上的坐标 0, 0, 负 1。

34
00:02:31,100 --> 00:02:35,000
它不会移动 j-hat，因此它停留在坐标 0, 1, 0。

35
00:02:35,000 --> 00:02:41,280
然后 k-hat 移动到 x 轴 1,0,0。

36
00:02:41,280 --> 00:02:48,723
这三组坐标成为描述旋转的矩阵的列。 要查看坐标为

37
00:02:48,723 --> 00:02:57,060
x、y、z 的向量落 在哪里，推理几乎与二维的推理相同。

38
00:02:57,060 --> 00:03:01,973
这些坐标中的每一个都可以被认为是如何缩放每个

39
00:03:01,973 --> 00:03:06,460
基本向量的指令，以便它们加在一起得到向量。

40
00:03:06,460 --> 00:03:11,574
与 2D 情况一样，重要的部分是此缩

41
00:03:11,574 --> 00:03:16,420
放和添加过程在转换之前和之后都有效。

42
00:03:16,420 --> 00:03:23,365
因此，要查看向量落在哪里，请将这些坐标乘

43
00:03:23,365 --> 00:03:29,980
以矩阵的相应列，然后将三个结果加在一起。

44
00:03:29,980 --> 00:03:32,080
两个矩阵相乘也类似。

45
00:03:32,080 --> 00:03:36,246
每当您看到两个 3x3 矩阵相乘时，

46
00:03:36,246 --> 00:03:40,412
您应该想象首先应用由右侧矩阵编码的变

47
00:03:40,412 --> 00:03:44,140
换，然后应用由左侧矩阵编码的变换。

48
00:03:44,140 --> 00:03:49,450
事实证明，3D 矩阵乘法实际上对于计算机图

49
00:03:49,450 --> 00:03:54,761
形学和机器人学等领域非常重要，因为像旋转和

50
00:03:54,761 --> 00:04:00,072
三维这样的东西可能很难描述，但如果你能将它

51
00:04:00,072 --> 00:04:04,900
们分解为单独的、更容易思考的轮换的组成。

52
00:04:04,900 --> 00:04:10,620
以数字方式执行此矩阵乘法 再次与二维情况非常相似。

53
00:04:10,620 --> 00:04:18,070
事实上，测试您对上一个视频的理解的一个好方法是

54
00:04:18,070 --> 00:04:25,520
尝试推理这个矩阵乘法具体应该是什么样子，仔细思

55
00:04:25,520 --> 00:04:32,660
考它与在空间中应用两个连续变换的想法有何关系。

56
00:04:32,660 --> 00:04:32,660
在下一个视频中，我将开始讨论行列式。

