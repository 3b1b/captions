1
00:00:00,000 --> 00:00:10,116
[ベートーベンの「歓喜の歌」がピアノの最後まで演奏されます。

2
00:00:10,116 --> 00:00:18,884
] 伝統的に、ドット積は線形代数コースの非常に早

3
00:00:18,884 --> 00:00:26,640
い段階で、通常は開始直後に導入されるものです。

4
00:00:26,640 --> 00:00:28,335
したがって、私がシリーズでここまで押し

5
00:00:28,335 --> 00:00:30,120
戻したのは奇妙に思われるかもしれません。

6
00:00:30,120 --> 00:00:33,542
私がこのようにしたのは、このトピックを紹介する標準的な

7
00:00:33,542 --> 00:00:36,842
方法があり、それにはベクトルの基本的な理解だけが必要

8
00:00:36,842 --> 00:00:40,142
ですが、数学において内積が果たす役割をより完全に理解

9
00:00:40,142 --> 00:00:43,320
するには、実際には線形変換を考慮する必要があります。

10
00:00:43,320 --> 00:00:45,891
ただし、その前に、点積が導入される標準的な方法につ

11
00:00:45,891 --> 00:00:48,462
いて簡単に説明しておきます。 これは、多くの視聴者

12
00:00:48,462 --> 00:00:51,240
にとって少なくとも部分的には復習されていると思います。

13
00:00:51,240 --> 00:00:55,136
数値的には、同じ次元の 2 つのベクトル、つまり同じ

14
00:00:55,136 --> 00:00:59,032
長さの数値の 2 つのリストがある場合、それらの内積

15
00:00:59,032 --> 00:01:02,928
を求めることは、すべての座標をペアにし、それらのペア

16
00:01:02,928 --> 00:01:06,680
を掛け合わせて、その結果を加算することを意味します。

17
00:01:06,680 --> 00:01:10,443
したがって、3、4 が点在するベクトル 1、2

18
00:01:10,443 --> 00:01:14,520
は、1 掛ける 3 と 2 掛ける 4 になります。

19
00:01:14,520 --> 00:01:17,853
1、8、5、3 が点在するベクトル 6、2、8、3

20
00:01:17,853 --> 00:01:21,186
は、6 掛ける 1 プラス 2 掛ける 8 プラス

21
00:01:21,186 --> 00:01:24,520
8 掛ける 5 プラス 3 掛ける 3 になります。

22
00:01:24,520 --> 00:01:26,680
幸いなことに、この計算には非常に

23
00:01:26,680 --> 00:01:28,840
優れた幾何学的解釈が得られます。

24
00:01:28,840 --> 00:01:33,560
2 つのベクトル v と w の間の内積について考えるには、

25
00:01:33,560 --> 00:01:38,280
v の原点と先端を通る直線に w を投影すると想像します。

26
00:01:38,280 --> 00:01:43,055
この投影の長さに v の長さを乗算すると、内積

27
00:01:43,055 --> 00:01:46,040
v dot w が得られます。

28
00:01:46,040 --> 00:01:50,002
この w の射影が v と反対の方向を向いてい

29
00:01:50,002 --> 00:01:53,800
る場合を除き、その内積は実際には負になります。

30
00:01:53,800 --> 00:01:56,600
したがって、2 つのベクトルが通常同じ方向を

31
00:01:56,600 --> 00:01:59,400
向いている場合、それらの内積は正になります。

32
00:01:59,400 --> 00:02:02,755
それらが垂直である場合、つまり一方のもう一方への投影がゼ

33
00:02:02,755 --> 00:02:05,880
ロ ベクトルである場合、それらの内積はゼロになります。

34
00:02:05,880 --> 00:02:08,682
そして、それらがほぼ逆の方向を向いて

35
00:02:08,682 --> 00:02:11,640
いる場合、それらの内積は負になります。

36
00:02:11,640 --> 00:02:14,680
さて、この解釈は奇妙なことに非対称です。

37
00:02:14,680 --> 00:02:16,760
2 つのベクトルをまったく異なる方法で扱います。

38
00:02:16,760 --> 00:02:18,520
なので、初めてこのことを知ったとき

39
00:02:18,520 --> 00:02:20,280
、順番は関係ないことに驚きました。

40
00:02:20,280 --> 00:02:24,926
代わりに、v を w に投影し、投影された v の長

41
00:02:24,926 --> 00:02:29,400
さに w の長さを乗算すると、同じ結果が得られます。

42
00:02:29,400 --> 00:02:34,600
つまり、それはまったく異なるプロセスのように感じませんか?

43
00:02:34,600 --> 00:02:37,640
順序が重要ではない理由についての直感は次のとおりです。

44
00:02:37,640 --> 00:02:39,920
v と w がたまたま同じ長さであれ

45
00:02:39,920 --> 00:02:42,200
ば、対称性を活用することができます。

46
00:02:42,200 --> 00:02:47,312
w を v に投影し、その投影の長さに v の長さを

47
00:02:47,312 --> 00:02:52,425
掛けることは、v を w に投影し、その投影の長さに

48
00:02:52,425 --> 00:02:57,160
w の長さを掛けることの完全な鏡像となるためです。

49
00:02:57,160 --> 00:02:59,523
ここで、そのうちの 1 つ (たとえば

50
00:02:59,523 --> 00:03:02,004
v) を 2 などの定数 でスケールして、

51
00:03:02,004 --> 00:03:04,840
長さが等しくなるようにすると、対称性が崩れます。

52
00:03:04,840 --> 00:03:07,656
しかし、この新しいベクトル、v の 2 倍と

53
00:03:07,656 --> 00:03:10,840
w の間の内積を解釈する方法をよく考えてみましょう。

54
00:03:10,840 --> 00:03:15,391
w を v に投影すると考えると、内積 2v dot

55
00:03:15,391 --> 00:03:20,280
w は内積 v dot w のちょうど 2 倍になります。

56
00:03:20,280 --> 00:03:23,800
これは、v を 2 倍にスケールすると、w

57
00:03:23,800 --> 00:03:28,440
の投影の長さは変わ りませんが、投影先のベクトルの長さが

58
00:03:28,440 --> 00:03:30,200
2 倍になるためです。

59
00:03:30,200 --> 00:03:32,480
しかしその一方で、v が w に投影

60
00:03:32,480 --> 00:03:34,760
されることを考えていたとしましょう。

61
00:03:34,760 --> 00:03:39,187
その場合、v を 2 で乗算すると投影の長さがスケーリング

62
00:03:39,187 --> 00:03:43,320
されますが、投影しているベクトルの長さは一定のままです。

63
00:03:43,320 --> 00:03:45,773
したがって、全体的な効果は依然として内積を

64
00:03:45,773 --> 00:03:47,000
2 倍にするだけです。

65
00:03:47,000 --> 00:03:50,365
したがって、この場合は対称性が崩れてい

66
00:03:50,365 --> 00:03:53,731
ますが、このスケーリングが内積の値に与

67
00:03:53,731 --> 00:03:56,760
える影響はどちらの解釈でも同じです。

68
00:03:56,760 --> 00:03:59,296
私がこのことを初めて学んだとき、私を混乱させたもう

69
00:03:59,296 --> 00:04:00,760
1 つの大きな疑問があります。

70
00:04:00,760 --> 00:04:04,908
一体なぜ、座標を一致させ、ペアを掛け合わせ、それらを加

71
00:04:04,908 --> 00:04:08,760
算するという数値処理が投影と関係があるのでしょうか?

72
00:04:08,760 --> 00:04:11,970
そうですね、満足のいく答えを与えるために、また

73
00:04:11,970 --> 00:04:15,180
内積の重要性を完 全に正当に評価するには、ここ

74
00:04:15,180 --> 00:04:19,367
で起こっていることをもう少し深く 掘り起こす必要があります。

75
00:04:19,367 --> 00:04:21,880
これはしばしば二重性と呼ばれます。

76
00:04:21,880 --> 00:04:27,290
しかし、本題に入る前に、複数の次元から 1 つの次元 (単

77
00:04:27,290 --> 00:04:32,520
なる数直線) への線形変換について説明する必要があります。

78
00:04:32,520 --> 00:04:34,995
これらは 2D ベクトルを受け取り、何らかの

79
00:04:34,995 --> 00:04:37,471
数値を吐き出す関 数ですが、線形変換は、当然

80
00:04:37,471 --> 00:04:39,384
のことながら、2D 入力と 1D

81
00:04:39,384 --> 00:04:42,760
出力を使用するありふれた関数よりもはるかに制限されています。

82
00:04:42,760 --> 00:04:46,833
第 3 章で説明したような高次元での変換と同様、これらの関

83
00:04:46,833 --> 00:04:50,907
数を線形にする形式的特性がいくつかありますが、最終目標から

84
00:04:50,907 --> 00:04:54,438
逸れないように、ここでは意図的にそれらを無視します。

85
00:04:54,438 --> 00:04:58,376
すべて の形式的なものと同等の特定の視覚的特性に焦点を当

86
00:04:58,376 --> 00:04:58,920
てます。

87
00:04:58,920 --> 00:05:03,463
等間隔のドットの線を取得して変換を適用すると、線形

88
00:05:03,463 --> 00:05:07,831
変換により、これらのドットが出力空間 (数直線)

89
00:05:07,831 --> 00:05:12,200
に到達すると、それらのドットは等間隔に保たれます。

90
00:05:12,200 --> 00:05:15,863
それ以外の場合、不均等な間隔の点の線が

91
00:05:15,863 --> 00:05:19,160
ある場合、変換は線形ではありません。

92
00:05:19,160 --> 00:05:22,745
これまでに見たケースと同様に、これらの線形変換の 1

93
00:05:22,745 --> 00:05:25,135
つ は、i-hat と j-hat

94
00:05:25,135 --> 00:05:28,852
がどこにかかるかによって 完全に決定されますが、今回は、

95
00:05:28,852 --> 00:05:32,703
これらの基底ベクトルのそれ ぞれが数値に到達するだけです。

96
00:05:32,703 --> 00:05:36,288
それらは行列の列として配置 され、それらの各列には

97
00:05:36,288 --> 00:05:38,280
1 つの数値だけが含まれます。

98
00:05:38,280 --> 00:05:41,640
これは 1x2 の行列です。

99
00:05:41,640 --> 00:05:43,866
これらの変換の 1 つをベクトルに適用する

100
00:05:43,866 --> 00:05:46,200
ことが何を意味するのか、例を見てみましょう。

101
00:05:46,200 --> 00:05:48,869
i-hat を 1 に、j-hat

102
00:05:48,869 --> 00:05:52,280
をマイナス 2 にする線形変換があるとします。

103
00:05:52,280 --> 00:05:55,329
たとえば 4, 3 などの座標を持つベクトルがどこに終わる

104
00:05:55,329 --> 00:05:58,274
かを追跡するには、このベクトル を i-hat の 4

105
00:05:58,274 --> 00:06:01,324
倍と j-hat の 3 倍として分割することを考えてくだ

106
00:06:01,324 --> 00:06:01,640
さい。

107
00:06:01,640 --> 00:06:05,720
線形性の結果、変換後のベクトルは、i-hat が着地

108
00:06:05,720 --> 00:06:09,800
する場所の 4 倍 1、さらに j-hat が着地す

109
00:06:09,800 --> 00:06:13,124
る場所の 3 倍、マイナス 2 になります。

110
00:06:13,124 --> 00:06:17,506
これは、 この場合、負の位置に着地することを意味します。

111
00:06:17,506 --> 00:06:17,960
2.

112
00:06:17,960 --> 00:06:20,524
この計算を純粋に数値的に行う場合、

113
00:06:20,524 --> 00:06:23,240
それは行列ベクトルの乗算になります。

114
00:06:23,240 --> 00:06:28,470
さて、1x2 行列にベクトルを乗算するこの数値演算は、2

115
00:06:28,470 --> 00:06:33,160
つのベクトルの内積を取るのと同じように感じられます。

116
00:06:33,160 --> 00:06:35,448
その 1x2 行列は、単にベクト

117
00:06:35,448 --> 00:06:37,880
ルを横に傾けたように見えませんか?

118
00:06:37,880 --> 00:06:40,510
実際、今のところ、1x2 行列と 2D

119
00:06:40,510 --> 00:06:43,667
ベクトルの間には適切な関連性があると言 えます。

120
00:06:43,667 --> 00:06:47,481
これは、ベクトルの数値表現を横に傾けて関連する行列を取得

121
00:06:47,481 --> 00:06:51,295
するか、行列を 傾けて元の位置に戻して関連するベクトルを取

122
00:06:51,295 --> 00:06:53,400
得することによって定義されます。

123
00:06:53,400 --> 00:06:56,249
今は数値式を見ているだけなので、ベクトルと

124
00:06:56,249 --> 00:06:58,969
1x2 行列の間を 行ったり来たりするのは

125
00:06:58,969 --> 00:07:01,560
愚かなことのように感じるかもしれません。

126
00:07:01,560 --> 00:07:03,520
しかし、これは幾何学的な観点から見ると

127
00:07:03,520 --> 00:07:05,480
本当に素晴らしいことを示唆しています。

128
00:07:05,480 --> 00:07:09,081
ベクトルを数値に変換する線形変換とベクトル

129
00:07:09,081 --> 00:07:12,520
自体の間には、ある種のつながりがあります。

130
00:07:12,520 --> 00:07:17,344
重要性を明確にする例を示しますが、これは偶然

131
00:07:17,344 --> 00:07:21,960
にも、先ほどの内積パズルの答えにもなります。

132
00:07:21,960 --> 00:07:25,591
これまで学んだことを忘れて、内積が投影に関連し

133
00:07:25,591 --> 00:07:28,920
ていることをまだ知らないと想像してください。

134
00:07:28,920 --> 00:07:31,379
ここでやろうとしていることは、数直線のコピ

135
00:07:31,379 --> 00:07:33,956
ーを取り、それを何らかの形で空間に斜めに配

136
00:07:33,956 --> 00:07:36,298
置し、数字の 0 を原点に置くことです。

137
00:07:36,298 --> 00:07:39,098
ここで、数直線上の数字 1 の位置に先端があ

138
00:07:39,098 --> 00:07:42,264
る 2 次元の単位ベクトルについて考えてみましょう。

139
00:07:42,264 --> 00:07:45,560
あの男に名前を付けたい、ユーハット。

140
00:07:45,560 --> 00:07:48,343
この小さな男はこれから起こることにおいて重要な役割を

141
00:07:48,343 --> 00:07:50,920
果たしているので、頭の片隅に置いておいてください。

142
00:07:50,920 --> 00:07:53,773
2D ベクトルをこの対角の数直線上に真っ直

143
00:07:53,773 --> 00:07:56,626
ぐ投影すると、事実上 、2D ベクトルを数

144
00:07:56,626 --> 00:07:59,480
値に変換する関数を定義したことになります。

145
00:07:59,480 --> 00:08:02,581
さらに、この関数は実際には線形であり、等間

146
00:08:02,581 --> 00:08:05,683
隔の点の行が数直線上に 到達すると等間隔の

147
00:08:05,683 --> 00:08:09,080
ままであるという視覚テストに合格するためです。

148
00:08:09,080 --> 00:08:13,070
念のために言っておきますが、このように数直線を

149
00:08:13,070 --> 00:08:17,060
2D 空間に埋め 込んだとしても、関数の出力は

150
00:08:17,060 --> 00:08:19,720
2D ベクトルではなく数値です。

151
00:08:19,720 --> 00:08:22,249
2 つの座標を受け取り、1 つの座標

152
00:08:22,249 --> 00:08:24,920
を出力する関数を考える必要があります。

153
00:08:24,920 --> 00:08:27,989
しかし、そのベクトル U ハットは入力空間に存在する

154
00:08:27,989 --> 00:08:29,240
2 次元ベクトルです。

155
00:08:29,240 --> 00:08:33,160
数直線の埋め込みと重なるように配置されているだけです。

156
00:08:33,160 --> 00:08:37,213
この投影では、2D ベクトルから数値への線形変換を

157
00:08:37,213 --> 00:08:41,266
定義しただけなので、その 変換を記述するある種の

158
00:08:41,266 --> 00:08:45,320
1x2 行列を見つけることができるようになります。

159
00:08:45,320 --> 00:08:48,544
1x2 行列を見つけるために、この対角線の数直

160
00:08:48,544 --> 00:08:51,209
線設定を拡大し て、I ハットと J

161
00:08:51,209 --> 00:08:54,994
ハットがそれぞれどこに着地するかを考え てみましょう。

162
00:08:54,994 --> 00:08:58,360
それらの着地スポットは行列の列になるからです。

163
00:08:58,360 --> 00:08:59,492
この部分は超クールです。

164
00:08:59,492 --> 00:09:01,157
非常にエレガントな対称性の作品によ

165
00:09:01,157 --> 00:09:02,920
って、それを推論することができます。

166
00:09:02,920 --> 00:09:06,637
I ハットと U ハットはどちらも単位ベクトルであるため

167
00:09:06,637 --> 00:09:10,098
、I ハットを U ハットを通る線上に投影すると、U

168
00:09:10,098 --> 00:09:13,560
ハットを X 軸上に投影するのと完全に対称に見えます。

169
00:09:13,560 --> 00:09:16,560
したがって、I ハットが投影されたときに着地する番

170
00:09:16,560 --> 00:09:19,440
号は何なのかと尋ねると、答 えは、U ハットが

171
00:09:19,440 --> 00:09:22,680
X 軸に投影されたときに着地するものと同じになります。

172
00:09:22,680 --> 00:09:26,105
ただし、U ハットを X 軸に投影するということは、U

173
00:09:26,105 --> 00:09:28,920
ハットの X 座標を取得することを意味します。

174
00:09:28,920 --> 00:09:32,771
したがって、対称性により、I ハットが対角の数直線に投影され

175
00:09:32,771 --> 00:09:36,622
たときに着 地する数値が U ハットの x 座標になります。

176
00:09:36,622 --> 00:09:39,080
それはクールじゃないですか？

177
00:09:39,080 --> 00:09:41,628
推論は J-hat 事件でもほぼ同じです。

178
00:09:41,628 --> 00:09:49,240
少し考えてみましょう。

179
00:09:49,240 --> 00:09:53,471
同じ理由で、U ハットの y 座標は、J ハットが数直

180
00:09:53,471 --> 00:09:57,400
線のコピーに投影されたときに着地する番号を示します。

181
00:09:57,400 --> 00:09:58,760
立ち止まって、少し考えてみましょう。

182
00:09:58,760 --> 00:10:00,920
それは本当に素晴らしいことだと思います。

183
00:10:00,920 --> 00:10:04,516
したがって、射影変換を記述する 1x2 行列

184
00:10:04,516 --> 00:10:07,800
のエントリは、U ハットの座標になります。

185
00:10:07,800 --> 00:10:12,520
そして、空間内の任意のベクトルに対するこの射影変換を計算

186
00:10:12,520 --> 00:10:17,241
することは、その行列にそれらのベクトルを乗算する必要があ

187
00:10:17,241 --> 00:10:21,800
り、計算的には U ハットで内積を求めることと同じです。

188
00:10:21,800 --> 00:10:25,774
このため、単位ベクトルとの内積を求めるこ

189
00:10:25,774 --> 00:10:29,748
とは、その単位ベクトル のスパンにベクト

190
00:10:29,748 --> 00:10:34,120
ルを投影し、長さを求めることと解釈できます。

191
00:10:34,120 --> 00:10:36,200
では、単位でないベクトルはどうなるでしょうか?

192
00:10:36,200 --> 00:10:39,192
たとえば、単位ベクトル U ハットを

193
00:10:39,192 --> 00:10:41,240
3 倍に拡大するとします。

194
00:10:41,240 --> 00:10:44,760
数値的には、その各コンポーネントは 3 倍されます。

195
00:10:44,760 --> 00:10:49,902
したがって、そのベクトルに関連付けられた行列を見ると、I

196
00:10:49,902 --> 00:10:54,158
ハ ットと J ハットは以前に到達した値の 3

197
00:10:54,158 --> 00:10:55,400
倍かかります。

198
00:10:55,400 --> 00:10:58,706
これはすべて線形であるため、より一般的には、新しい行列

199
00:10:58,706 --> 00:11:02,258
は任意のベクトルを数直線の コピーに投影し、その到達点で

200
00:11:02,258 --> 00:11:05,320
3 を乗じるものとして解釈できることを意味します。

201
00:11:05,320 --> 00:11:09,453
これが、非単位ベクトルとの内積が、最初にそのベク

202
00:11:09,453 --> 00:11:13,586
トルに投影され、次にその 投影の長さをベクトルの

203
00:11:13,586 --> 00:11:17,720
長さだけスケールアップすると解釈できる理由です。

204
00:11:17,720 --> 00:11:19,800
ここで何が起こったのか少し考えてみましょう。

205
00:11:19,800 --> 00:11:23,809
2D 空間から数直線への線形変換がありましたが、これは

206
00:11:23,809 --> 00:11:27,676
数値ベクトルや数値内積によって定義されず、空間を数直

207
00:11:27,676 --> 00:11:31,400
線の対角コピーに投影することによって定義されました。

208
00:11:31,400 --> 00:11:34,987
しかし、変換は線形であるため、必然的に何らかの

209
00:11:34,987 --> 00:11:37,080
1x2 行列で記述されます。

210
00:11:37,080 --> 00:11:39,980
そして、1x2 行列に 2D ベクトルを乗算す

211
00:11:39,980 --> 00:11:43,006
ることは、その行列をひっくり返して内積を求める

212
00:11:43,006 --> 00:11:46,158
ことと同じであるため、この変換は必然的に何らかの

213
00:11:46,158 --> 00:11:48,680
2D ベクトルに関連することになります。

214
00:11:48,680 --> 00:11:52,826
ここでの教訓は、出力空間が数直線であるこれらの線形変換の

215
00:11:52,826 --> 00:11:56,829
1 つがある ときは常に、それがどのように定義されたかに

216
00:11:56,829 --> 00:12:00,833
関係なく、変換を適用すると いう意味で、その変換に対応す

217
00:12:00,833 --> 00:12:03,835
る何らかの一意のベクトル v が存在する

218
00:12:03,835 --> 00:12:07,839
ことになるということです。 そのベクトルの内積を取るのと

219
00:12:07,839 --> 00:12:08,840
同じことです。

220
00:12:08,840 --> 00:12:11,800
私にとって、これはまったく美しいことです。

221
00:12:11,800 --> 00:12:14,360
これは数学における双対性と呼ばれるものの一例です。

222
00:12:14,360 --> 00:12:17,429
双対性は数学全体でさまざまな方法や形で現れ

223
00:12:17,429 --> 00:12:20,360
ますが、実際に定義するのは非常に困難です。

224
00:12:20,360 --> 00:12:24,852
大まかに言えば、これは 2 種類の数学的なものの間

225
00:12:24,852 --> 00:12:29,000
に自然だが驚くべき対応関係がある状況を指します。

226
00:12:29,000 --> 00:12:32,642
先ほど学んだ線形代数の場合、ベクトルの双対

227
00:12:32,642 --> 00:12:37,113
はそれがエンコードする線形変換であり、ある 空間から

228
00:12:37,113 --> 00:12:39,928
1 次元への線形変換の双対はその

229
00:12:39,928 --> 00:12:43,240
空間内の特定のベクトルであると言えます。

230
00:12:43,240 --> 00:12:46,466
要約すると、表面的には、内積は投影を理解し、ベ

231
00:12:46,466 --> 00:12:49,693
クトルが同じ方向を向く 傾向があるかどうかをテ

232
00:12:49,693 --> 00:12:52,920
ストするための非常に便利な幾何学的ツールです。

233
00:12:52,920 --> 00:12:55,080
そしてそれはおそらく、ドット積につい

234
00:12:55,080 --> 00:12:57,240
て覚えておくべき最も重要なことです。

235
00:12:57,240 --> 00:13:00,964
しかし、より深いレベルでは、2 つのベクトルを点在させるこ

236
00:13:00,964 --> 00:13:04,440
とは、そのうちの 1 つを変換の世界に変換する方法です。

237
00:13:04,440 --> 00:13:06,200
繰り返しになりますが、数値的には、これを強調

238
00:13:06,200 --> 00:13:08,040
するのは愚かな点のように感じるかもしれません。

239
00:13:08,040 --> 00:13:10,040
それはあまりにも計算的です。

240
00:13:10,040 --> 00:13:13,160
しかし、私がこれが非常に重要であると考える理由は、

241
00:13:13,160 --> 00:13:16,280
数学全体を通 して、ベクトルを扱うとき、その性質を

242
00:13:16,280 --> 00:13:19,400
実際に理解すると、それを 空間の矢印としてではなく

243
00:13:19,400 --> 00:13:21,771
、ベクトルとして理解する方が簡単であ

244
00:13:21,771 --> 00:13:23,892
ることに気づくことがあるためです。

245
00:13:23,892 --> 00:13:25,640
線形変換の物理的な具体化。

246
00:13:25,640 --> 00:13:29,004
空間全体を動かすよりも空間内の矢印について考え

247
00:13:29,004 --> 00:13:32,369
るほうが簡単なので、ベク トルが実際には特定の

248
00:13:32,369 --> 00:13:35,880
変換の単なる概念的な省略表現であるかのようです。

249
00:13:35,880 --> 00:13:38,238
次のビデオでは、外積について説明しながら、この二重性が実際

250
00:13:38,238 --> 00:13:40,440
に動作している別の本当に素晴らしい例をご覧いただけます。

