1
00:00:16,580 --> 00:00:19,071
[ベートーベンの「歓喜の歌」がピアノの最後まで演奏されます。

2
00:00:19,071 --> 00:00:21,230
 ] 伝統的に、ドット積は線形代数コースの非常に早 

3
00:00:21,230 --> 00:00:23,140
い段階で、通常は開始直後に導入されるものです。

4
00:00:23,140 --> 00:00:25,176
したがって、私がシリーズでここまで押し

5
00:00:25,176 --> 00:00:27,320
戻したのは奇妙に思われるかもしれません。

6
00:00:27,320 --> 00:00:30,825
私がこのようにしたのは、このトピックを紹介する標準的な 

7
00:00:30,825 --> 00:00:34,205
方法があり、それにはベクトルの基本的な理解だけが必要 

8
00:00:34,205 --> 00:00:37,585
ですが、数学において内積が果たす役割をより完全に理解 

9
00:00:37,585 --> 00:00:40,840
するには、実際には線形変換を考慮する必要があります。

10
00:00:40,840 --> 00:00:43,801
ただし、その前に、点積が導入される標準的な方法につ

11
00:00:43,801 --> 00:00:46,762
いて簡単に説明しておきます。 これは、多くの視聴者

12
00:00:46,762 --> 00:00:49,960
にとって少なくとも部分的には復習されていると思います。

13
00:00:49,960 --> 00:00:53,750
数値的には、同じ次元の 2 つのベクトル、つまり同じ 

14
00:00:53,750 --> 00:00:57,540
長さの数値の 2 つのリストがある場合、それらの内積 

15
00:00:57,540 --> 00:01:01,330
を求めることは、すべての座標をペアにし、それらのペア 

16
00:01:01,330 --> 00:01:04,980
を掛け合わせて、その結果を加算することを意味します。

17
00:01:06,860 --> 00:01:09,893
したがって、3、4 が点在するベクトル 1、2 

18
00:01:09,893 --> 00:01:13,180
は、1 掛ける 3 と 2 掛ける 4 になります。

19
00:01:14,580 --> 00:01:17,626
1、8、5、3 が点在するベクトル 6、2、8、3 

20
00:01:17,626 --> 00:01:20,673
は、6 掛ける 1 プラス 2 掛ける 8 プラス 

21
00:01:20,673 --> 00:01:23,720
8 掛ける 5 プラス 3 掛ける 3 になります。

22
00:01:24,740 --> 00:01:26,700
幸いなことに、この計算には非常に

23
00:01:26,700 --> 00:01:28,660
優れた幾何学的解釈が得られます。

24
00:01:29,340 --> 00:01:33,660
2 つのベクトル v と w の間の内積について考えるには、

25
00:01:33,660 --> 00:01:37,980
 v の原点と先端を通る直線に w を投影すると想像します。

26
00:01:38,780 --> 00:01:42,275
この投影の長さに v の長さを乗算すると、内積 

27
00:01:42,275 --> 00:01:44,460
v dot w が得られます。

28
00:01:46,420 --> 00:01:49,351
この w の射影が v と反対の方向を向いてい 

29
00:01:49,351 --> 00:01:52,160
る場合を除き、その内積は実際には負になります。

30
00:01:53,720 --> 00:01:55,789
したがって、2 つのベクトルが通常同じ方向を

31
00:01:55,789 --> 00:01:57,860
向いている場合、それらの内積は正になります。

32
00:01:59,240 --> 00:02:02,512
それらが垂直である場合、つまり一方のもう一方への投影がゼ 

33
00:02:02,512 --> 00:02:05,560
ロ ベクトルである場合、それらの内積はゼロになります。

34
00:02:05,980 --> 00:02:07,741
そして、それらがほぼ逆の方向を向いて

35
00:02:07,741 --> 00:02:09,600
いる場合、それらの内積は負になります。

36
00:02:11,620 --> 00:02:14,560
さて、この解釈は奇妙なことに非対称です。

37
00:02:14,800 --> 00:02:16,500
2 つのベクトルをまったく異なる方法で扱います。

38
00:02:16,880 --> 00:02:18,440
なので、初めてこのことを知ったとき

39
00:02:18,440 --> 00:02:20,000
、順番は関係ないことに驚きました。

40
00:02:20,960 --> 00:02:24,658
代わりに、v を w に投影し、投影された v の長 

41
00:02:24,658 --> 00:02:28,220
さに w の長さを乗算すると、同じ結果が得られます。

42
00:02:30,400 --> 00:02:32,840
つまり、それはまったく異なるプロセスのように感じませんか?

43
00:02:35,320 --> 00:02:37,760
順序が重要ではない理由についての直感は次のとおりです。

44
00:02:38,440 --> 00:02:40,310
v と w がたまたま同じ長さであれ

45
00:02:40,310 --> 00:02:42,180
ば、対称性を活用することができます。

46
00:02:43,080 --> 00:02:47,235
w を v に投影し、その投影の長さに v の長さを 

47
00:02:47,235 --> 00:02:51,391
掛けることは、v を w に投影し、その投影の長さに 

48
00:02:51,391 --> 00:02:55,240
w の長さを掛けることの完全な鏡像となるためです。

49
00:02:57,280 --> 00:02:59,458
ここで、そのうちの 1 つ (たとえば 

50
00:02:59,458 --> 00:03:01,745
v) を 2 などの定数 でスケールして、

51
00:03:01,745 --> 00:03:04,360
長さが等しくなるようにすると、対称性が崩れます。

52
00:03:05,020 --> 00:03:07,376
しかし、この新しいベクトル、v の 2 倍と 

53
00:03:07,376 --> 00:03:10,040
w の間の内積を解釈する方法をよく考えてみましょう。

54
00:03:10,880 --> 00:03:15,142
w を v に投影すると考えると、内積 2v dot 

55
00:03:15,142 --> 00:03:19,720
w は内積 v dot w のちょうど 2 倍になります。

56
00:03:20,460 --> 00:03:23,674
これは、v を 2 倍にスケールすると、w 

57
00:03:23,674 --> 00:03:27,912
の投影の長さは変わ りませんが、投影先のベクトルの長さが 

58
00:03:27,912 --> 00:03:29,520
2 倍になるためです。

59
00:03:30,460 --> 00:03:32,329
しかしその一方で、v が w に投影

60
00:03:32,329 --> 00:03:34,200
されることを考えていたとしましょう。

61
00:03:34,900 --> 00:03:39,089
その場合、v を 2 で乗算すると投影の長さがスケーリング 

62
00:03:39,089 --> 00:03:43,000
されますが、投影しているベクトルの長さは一定のままです。

63
00:03:43,000 --> 00:03:45,440
したがって、全体的な効果は依然として内積を 

64
00:03:45,440 --> 00:03:46,660
2 倍にするだけです。

65
00:03:47,280 --> 00:03:49,893
したがって、この場合は対称性が崩れてい 

66
00:03:49,893 --> 00:03:52,507
ますが、このスケーリングが内積の値に与 

67
00:03:52,507 --> 00:03:54,860
える影響はどちらの解釈でも同じです。

68
00:03:56,640 --> 00:03:58,986
私がこのことを初めて学んだとき、私を混乱させたもう 

69
00:03:58,986 --> 00:04:00,340
1 つの大きな疑問があります。

70
00:04:00,840 --> 00:04:04,936
一体なぜ、座標を一致させ、ペアを掛け合わせ、それらを加 

71
00:04:04,936 --> 00:04:08,740
算するという数値処理が投影と関係があるのでしょうか?

72
00:04:10,640 --> 00:04:13,272
そうですね、満足のいく答えを与えるために、また

73
00:04:13,272 --> 00:04:15,905
内積の重要性を完 全に正当に評価するには、ここ

74
00:04:15,905 --> 00:04:19,339
で起こっていることをもう少し深く 掘り起こす必要があります。

75
00:04:19,339 --> 00:04:21,399
 これはしばしば二重性と呼ばれます。

76
00:04:22,140 --> 00:04:26,156
しかし、本題に入る前に、複数の次元から 1 つの次元 (単 

77
00:04:26,156 --> 00:04:30,040
なる数直線) への線形変換について説明する必要があります。

78
00:04:32,420 --> 00:04:34,808
これらは 2D ベクトルを受け取り、何らかの

79
00:04:34,808 --> 00:04:37,197
数値を吐き出す関 数ですが、線形変換は、当然

80
00:04:37,197 --> 00:04:39,042
のことながら、2D 入力と 1D 

81
00:04:39,042 --> 00:04:42,300
出力を使用するありふれた関数よりもはるかに制限されています。

82
00:04:43,020 --> 00:04:46,862
第 3 章で説明したような高次元での変換と同様、これらの関 

83
00:04:46,862 --> 00:04:50,704
数を線形にする形式的特性がいくつかありますが、最終目標から 

84
00:04:50,704 --> 00:04:54,033
逸れないように、ここでは意図的にそれらを無視します。

85
00:04:54,033 --> 00:04:57,747
 すべて の形式的なものと同等の特定の視覚的特性に焦点を当

86
00:04:57,747 --> 00:04:58,260
てます。

87
00:04:59,040 --> 00:05:03,227
等間隔のドットの線を取得して変換を適用すると、線形 

88
00:05:03,227 --> 00:05:07,253
変換により、これらのドットが出力空間 (数直線) 

89
00:05:07,253 --> 00:05:11,280
に到達すると、それらのドットは等間隔に保たれます。

90
00:05:12,420 --> 00:05:14,904
それ以外の場合、不均等な間隔の点の線が 

91
00:05:14,904 --> 00:05:17,140
ある場合、変換は線形ではありません。

92
00:05:19,220 --> 00:05:22,520
これまでに見たケースと同様に、これらの線形変換の 1 

93
00:05:22,520 --> 00:05:24,720
つ は、i-hat と j-hat 

94
00:05:24,720 --> 00:05:28,142
がどこにかかるかによって 完全に決定されますが、今回は、

95
00:05:28,142 --> 00:05:31,686
これらの基底ベクトルのそれ ぞれが数値に到達するだけです。

96
00:05:31,686 --> 00:05:34,986
 それらは行列の列として配置 され、それらの各列には 

97
00:05:34,986 --> 00:05:36,820
1 つの数値だけが含まれます。

98
00:05:38,460 --> 00:05:39,840
これは 1x2 の行列です。

99
00:05:41,860 --> 00:05:43,715
これらの変換の 1 つをベクトルに適用する

100
00:05:43,715 --> 00:05:45,660
ことが何を意味するのか、例を見てみましょう。

101
00:05:46,380 --> 00:05:48,706
i-hat を 1 に、j-hat 

102
00:05:48,706 --> 00:05:51,680
をマイナス 2 にする線形変換があるとします。

103
00:05:52,420 --> 00:05:55,222
たとえば 4, 3 などの座標を持つベクトルがどこに終わる

104
00:05:55,222 --> 00:05:57,927
かを追跡するには、このベクトル を i-hat の 4 

105
00:05:57,927 --> 00:06:00,730
倍と j-hat の 3 倍として分割することを考えてくだ

106
00:06:00,730 --> 00:06:01,020
さい。

107
00:06:01,840 --> 00:06:05,325
線形性の結果、変換後のベクトルは、i-hat が着地 

108
00:06:05,325 --> 00:06:08,809
する場所の 4 倍 1、さらに j-hat が着地す 

109
00:06:08,809 --> 00:06:11,649
る場所の 3 倍、マイナス 2 になります。

110
00:06:11,649 --> 00:06:15,392
 これは、 この場合、負の位置に着地することを意味します。

111
00:06:15,392 --> 00:06:15,780
 2.

112
00:06:18,020 --> 00:06:20,128
この計算を純粋に数値的に行う場合、

113
00:06:20,128 --> 00:06:22,360
それは行列ベクトルの乗算になります。

114
00:06:25,700 --> 00:06:29,475
さて、1x2 行列にベクトルを乗算するこの数値演算は、2 

115
00:06:29,475 --> 00:06:32,860
つのベクトルの内積を取るのと同じように感じられます。

116
00:06:33,460 --> 00:06:35,079
その 1x2 行列は、単にベクト

117
00:06:35,079 --> 00:06:36,800
ルを横に傾けたように見えませんか?

118
00:06:37,960 --> 00:06:40,437
実際、今のところ、1x2 行列と 2D 

119
00:06:40,437 --> 00:06:43,411
ベクトルの間には適切な関連性があると言 えます。

120
00:06:43,411 --> 00:06:47,004
 これは、ベクトルの数値表現を横に傾けて関連する行列を取得

121
00:06:47,004 --> 00:06:50,597
するか、行列を 傾けて元の位置に戻して関連するベクトルを取

122
00:06:50,597 --> 00:06:52,580
得することによって定義されます。

123
00:06:53,560 --> 00:06:56,109
今は数値式を見ているだけなので、ベクトルと 

124
00:06:56,109 --> 00:06:58,542
1x2 行列の間を 行ったり来たりするのは

125
00:06:58,542 --> 00:07:00,860
愚かなことのように感じるかもしれません。

126
00:07:01,460 --> 00:07:03,289
しかし、これは幾何学的な観点から見ると

127
00:07:03,289 --> 00:07:05,120
本当に素晴らしいことを示唆しています。

128
00:07:05,380 --> 00:07:08,623
ベクトルを数値に変換する線形変換とベクトル 

129
00:07:08,623 --> 00:07:11,720
自体の間には、ある種のつながりがあります。

130
00:07:14,780 --> 00:07:18,153
重要性を明確にする例を示しますが、これは偶然 

131
00:07:18,153 --> 00:07:21,380
にも、先ほどの内積パズルの答えにもなります。

132
00:07:22,140 --> 00:07:24,769
これまで学んだことを忘れて、内積が投影に関連し 

133
00:07:24,769 --> 00:07:27,180
ていることをまだ知らないと想像してください。

134
00:07:28,860 --> 00:07:31,260
ここでやろうとしていることは、数直線のコピ

135
00:07:31,260 --> 00:07:33,774
ーを取り、それを何らかの形で空間に斜めに配 

136
00:07:33,774 --> 00:07:36,060
置し、数字の 0 を原点に置くことです。

137
00:07:36,900 --> 00:07:39,256
ここで、数直線上の数字 1 の位置に先端があ 

138
00:07:39,256 --> 00:07:41,920
る 2 次元の単位ベクトルについて考えてみましょう。

139
00:07:42,400 --> 00:07:44,560
あの男に名前を付けたい、ユーハット。

140
00:07:45,620 --> 00:07:47,904
この小さな男はこれから起こることにおいて重要な役割を 

141
00:07:47,904 --> 00:07:50,020
果たしているので、頭の片隅に置いておいてください。

142
00:07:50,740 --> 00:07:53,480
2D ベクトルをこの対角の数直線上に真っ直

143
00:07:53,480 --> 00:07:56,219
ぐ投影すると、事実上 、2D ベクトルを数

144
00:07:56,219 --> 00:07:58,960
値に変換する関数を定義したことになります。

145
00:07:59,660 --> 00:08:02,664
さらに、この関数は実際には線形であり、等間

146
00:08:02,664 --> 00:08:05,669
隔の点の行が数直線上に 到達すると等間隔の

147
00:08:05,669 --> 00:08:08,960
ままであるという視覚テストに合格するためです。

148
00:08:11,640 --> 00:08:14,505
念のために言っておきますが、このように数直線を 

149
00:08:14,505 --> 00:08:17,370
2D 空間に埋め 込んだとしても、関数の出力は 

150
00:08:17,370 --> 00:08:19,280
2D ベクトルではなく数値です。

151
00:08:19,960 --> 00:08:21,769
2 つの座標を受け取り、1 つの座標

152
00:08:21,769 --> 00:08:23,680
を出力する関数を考える必要があります。

153
00:08:25,060 --> 00:08:27,873
しかし、そのベクトル U ハットは入力空間に存在する 

154
00:08:27,873 --> 00:08:29,020
2 次元ベクトルです。

155
00:08:29,440 --> 00:08:33,220
数直線の埋め込みと重なるように配置されているだけです。

156
00:08:34,600 --> 00:08:37,933
この投影では、2D ベクトルから数値への線形変換を

157
00:08:37,933 --> 00:08:41,266
定義しただけなので、その 変換を記述するある種の 

158
00:08:41,266 --> 00:08:44,600
1x2 行列を見つけることができるようになります。

159
00:08:45,540 --> 00:08:48,240
1x2 行列を見つけるために、この対角線の数直

160
00:08:48,240 --> 00:08:50,471
線設定を拡大し て、I ハットと J 

161
00:08:50,471 --> 00:08:53,641
ハットがそれぞれどこに着地するかを考え てみましょう。

162
00:08:53,641 --> 00:08:56,460
 それらの着地スポットは行列の列になるからです。

163
00:08:58,480 --> 00:08:59,440
この部分は超クールです。

164
00:08:59,700 --> 00:09:01,021
非常にエレガントな対称性の作品によ

165
00:09:01,021 --> 00:09:02,420
って、それを推論することができます。

166
00:09:03,020 --> 00:09:06,562
I ハットと U ハットはどちらも単位ベクトルであるため 

167
00:09:06,562 --> 00:09:09,861
、I ハットを U ハットを通る線上に投影すると、U 

168
00:09:09,861 --> 00:09:13,160
ハットを X 軸上に投影するのと完全に対称に見えます。

169
00:09:13,840 --> 00:09:16,629
したがって、I ハットが投影されたときに着地する番

170
00:09:16,629 --> 00:09:19,307
号は何なのかと尋ねると、答 えは、U ハットが 

171
00:09:19,307 --> 00:09:22,320
X 軸に投影されたときに着地するものと同じになります。

172
00:09:22,920 --> 00:09:26,038
ただし、U ハットを X 軸に投影するということは、U 

173
00:09:26,038 --> 00:09:28,600
ハットの X 座標を取得することを意味します。

174
00:09:29,020 --> 00:09:32,819
したがって、対称性により、I ハットが対角の数直線に投影され

175
00:09:32,819 --> 00:09:36,620
たときに着 地する数値が U ハットの x 座標になります。

176
00:09:37,160 --> 00:09:37,660
それはクールじゃないですか？

177
00:09:39,200 --> 00:09:41,800
推論は J-hat 事件でもほぼ同じです。

178
00:09:42,180 --> 00:09:43,260
少し考えてみましょう。

179
00:09:49,120 --> 00:09:52,998
同じ理由で、U ハットの y 座標は、J ハットが数直 

180
00:09:52,998 --> 00:09:56,600
線のコピーに投影されたときに着地する番号を示します。

181
00:09:57,580 --> 00:09:58,720
立ち止まって、少し考えてみましょう。

182
00:09:58,780 --> 00:10:00,200
それは本当に素晴らしいことだと思います。

183
00:10:00,920 --> 00:10:04,234
したがって、射影変換を記述する 1x2 行列 

184
00:10:04,234 --> 00:10:07,260
のエントリは、U ハットの座標になります。

185
00:10:08,040 --> 00:10:11,695
そして、空間内の任意のベクトルに対するこの射影変換を計算 

186
00:10:11,695 --> 00:10:15,350
することは、その行列にそれらのベクトルを乗算する必要があ 

187
00:10:15,350 --> 00:10:18,880
り、計算的には U ハットで内積を求めることと同じです。

188
00:10:21,460 --> 00:10:24,405
このため、単位ベクトルとの内積を求めるこ

189
00:10:24,405 --> 00:10:27,350
とは、その単位ベクトル のスパンにベクト

190
00:10:27,350 --> 00:10:30,590
ルを投影し、長さを求めることと解釈できます。

191
00:10:34,030 --> 00:10:35,790
では、単位でないベクトルはどうなるでしょうか?

192
00:10:36,310 --> 00:10:38,875
たとえば、単位ベクトル U ハットを 

193
00:10:38,875 --> 00:10:40,630
3 倍に拡大するとします。

194
00:10:41,350 --> 00:10:44,390
数値的には、その各コンポーネントは 3 倍されます。

195
00:10:44,810 --> 00:10:48,473
したがって、そのベクトルに関連付けられた行列を見ると、I 

196
00:10:48,473 --> 00:10:51,505
ハ ットと J ハットは以前に到達した値の 3 

197
00:10:51,505 --> 00:10:52,390
倍かかります。

198
00:10:55,230 --> 00:10:58,370
これはすべて線形であるため、より一般的には、新しい行列

199
00:10:58,370 --> 00:11:01,742
は任意のベクトルを数直線の コピーに投影し、その到達点で 

200
00:11:01,742 --> 00:11:04,650
3 を乗じるものとして解釈できることを意味します。

201
00:11:05,470 --> 00:11:08,630
これが、非単位ベクトルとの内積が、最初にそのベク

202
00:11:08,630 --> 00:11:11,790
トルに投影され、次にその 投影の長さをベクトルの

203
00:11:11,790 --> 00:11:14,950
長さだけスケールアップすると解釈できる理由です。

204
00:11:17,590 --> 00:11:19,550
ここで何が起こったのか少し考えてみましょう。

205
00:11:19,890 --> 00:11:23,692
2D 空間から数直線への線形変換がありましたが、これは 

206
00:11:23,692 --> 00:11:27,359
数値ベクトルや数値内積によって定義されず、空間を数直 

207
00:11:27,359 --> 00:11:30,890
線の対角コピーに投影することによって定義されました。

208
00:11:31,670 --> 00:11:34,928
しかし、変換は線形であるため、必然的に何らかの 

209
00:11:34,928 --> 00:11:36,830
1x2 行列で記述されます。

210
00:11:37,330 --> 00:11:39,975
そして、1x2 行列に 2D ベクトルを乗算す

211
00:11:39,975 --> 00:11:42,735
ることは、その行列をひっくり返して内積を求める 

212
00:11:42,735 --> 00:11:45,610
ことと同じであるため、この変換は必然的に何らかの 

213
00:11:45,610 --> 00:11:47,910
2D ベクトルに関連することになります。

214
00:11:49,410 --> 00:11:52,894
ここでの教訓は、出力空間が数直線であるこれらの線形変換の 

215
00:11:52,894 --> 00:11:56,258
1 つがある ときは常に、それがどのように定義されたかに

216
00:11:56,258 --> 00:11:59,622
関係なく、変換を適用すると いう意味で、その変換に対応す

217
00:11:59,622 --> 00:12:02,145
る何らかの一意のベクトル v が存在する 

218
00:12:02,145 --> 00:12:05,509
ことになるということです。 そのベクトルの内積を取るのと

219
00:12:05,509 --> 00:12:06,350
同じことです。

220
00:12:09,930 --> 00:12:12,030
私にとって、これはまったく美しいことです。

221
00:12:12,730 --> 00:12:15,390
これは数学における双対性と呼ばれるものの一例です。

222
00:12:16,270 --> 00:12:19,165
双対性は数学全体でさまざまな方法や形で現れ 

223
00:12:19,165 --> 00:12:21,930
ますが、実際に定義するのは非常に困難です。

224
00:12:22,670 --> 00:12:26,601
大まかに言えば、これは 2 種類の数学的なものの間 

225
00:12:26,601 --> 00:12:30,230
に自然だが驚くべき対応関係がある状況を指します。

226
00:12:31,010 --> 00:12:34,499
先ほど学んだ線形代数の場合、ベクトルの双対 

227
00:12:34,499 --> 00:12:38,781
はそれがエンコードする線形変換であり、ある 空間から 

228
00:12:38,781 --> 00:12:41,477
1 次元への線形変換の双対はその 

229
00:12:41,477 --> 00:12:44,650
空間内の特定のベクトルであると言えます。

230
00:12:46,730 --> 00:12:49,923
要約すると、表面的には、内積は投影を理解し、ベ

231
00:12:49,923 --> 00:12:53,116
クトルが同じ方向を向く 傾向があるかどうかをテ

232
00:12:53,116 --> 00:12:56,310
ストするための非常に便利な幾何学的ツールです。

233
00:12:56,970 --> 00:12:58,880
そしてそれはおそらく、ドット積につい

234
00:12:58,880 --> 00:13:00,790
て覚えておくべき最も重要なことです。

235
00:13:01,270 --> 00:13:04,611
しかし、より深いレベルでは、2 つのベクトルを点在させるこ 

236
00:13:04,611 --> 00:13:07,730
とは、そのうちの 1 つを変換の世界に変換する方法です。

237
00:13:08,670 --> 00:13:10,078
繰り返しになりますが、数値的には、これを強調

238
00:13:10,078 --> 00:13:11,550
するのは愚かな点のように感じるかもしれません。

239
00:13:11,670 --> 00:13:14,090
それはあまりにも計算的です。

240
00:13:14,090 --> 00:13:17,290
しかし、私がこれが非常に重要であると考える理由は、

241
00:13:17,290 --> 00:13:20,490
数学全体を通 して、ベクトルを扱うとき、その性質を

242
00:13:20,490 --> 00:13:23,690
実際に理解すると、それを 空間の矢印としてではなく

243
00:13:23,690 --> 00:13:26,122
、ベクトルとして理解する方が簡単であ 

244
00:13:26,122 --> 00:13:28,298
ることに気づくことがあるためです。

245
00:13:28,298 --> 00:13:30,090
 線形変換の物理的な具体化。

246
00:13:30,730 --> 00:13:34,094
空間全体を動かすよりも空間内の矢印について考え

247
00:13:34,094 --> 00:13:37,459
るほうが簡単なので、ベク トルが実際には特定の

248
00:13:37,459 --> 00:13:40,970
変換の単なる概念的な省略表現であるかのようです。

249
00:13:42,610 --> 00:13:46,013
次のビデオでは、外積について説明しながら、この二重性が実際 

250
00:13:46,013 --> 00:13:49,190
に動作している別の本当に素晴らしい例をご覧いただけます。

