1
00:00:16,580 --> 00:00:19,520
[贝多芬的《欢乐颂》，钢琴演奏到最后。 ] 传统上，

2
00:00:19,520 --> 00:00:21,895
点积是在线性代数课程中很早 就引入的东西，

3
00:00:21,895 --> 00:00:23,140
通常是在开始时引入的。

4
00:00:23,140 --> 00:00:27,320
所以我在这个系列中把它们推迟到这么远可能看起来很奇怪。

5
00:00:27,320 --> 00:00:31,427
我这样做是因为有一个标准的方法来介绍这 个主题，

6
00:00:31,427 --> 00:00:34,165
它只需要对向量有基本的了解，但 

7
00:00:34,165 --> 00:00:37,588
对点积在数学中所扮演的角色的更全面的理 

8
00:00:37,588 --> 00:00:40,840
解只能在线性变换的指导下才能真正找到。

9
00:00:40,840 --> 00:00:46,193
不过，在此之前，让我简单介绍一下点积的引入标准 方式，

10
00:00:46,193 --> 00:00:49,960
我认为至少部分观众已经了解了这种方式。

11
00:00:49,960 --> 00:00:54,156
在数字上，如果有两个相同维度的向量 ，

12
00:00:54,156 --> 00:00:57,690
两个具有相同长度的数字列表，获 

13
00:00:57,690 --> 00:01:03,212
取它们的点积意味着将所有坐标配对 ，将这些对相乘，

14
00:01:03,212 --> 00:01:04,980
然后将结果相加。

15
00:01:06,860 --> 00:01:09,687
因此向量 1, 2 点缀着 3, 

16
00:01:09,687 --> 00:01:13,180
4 将是 1 乘以 3 加 2 乘以 4。

17
00:01:14,580 --> 00:01:17,488
向量 6, 2, 8, 3 点缀着 1, 

18
00:01:17,488 --> 00:01:20,534
8, 5, 3 将是 6 乘以 1 加 2 

19
00:01:20,534 --> 00:01:23,720
乘以 8 加 8 乘以 5 加 3 乘以 3。

20
00:01:24,740 --> 00:01:28,660
幸运的是，这个计算有一个非常好的几何解释。

21
00:01:29,340 --> 00:01:33,096
要考虑两个向量 v 和 w 之间的点积，

22
00:01:33,096 --> 00:01:37,980
请想象 将 w 投影到穿过原点和 v 尖端的直线上。

23
00:01:38,780 --> 00:01:44,460
将此投影的长度乘以 v 的长度，即可得到点积 v 点 w。

24
00:01:46,420 --> 00:01:50,007
除非 w 的投影指向 v 的相反 方向，

25
00:01:50,007 --> 00:01:52,160
否则该点积实际上将为负。

26
00:01:53,720 --> 00:01:57,860
因此，当两个向量通常指向同一方向时，它们的点积为正。

27
00:01:59,240 --> 00:02:04,027
当它们垂直时，意味着一个到另一个 的投影为零向量，

28
00:02:04,027 --> 00:02:05,560
它们的点积为零。

29
00:02:05,980 --> 00:02:09,600
如果它们通常指向相反的方向，则它们的点积为负。

30
00:02:11,620 --> 00:02:14,560
现在，这种解释奇怪地不对称。

31
00:02:14,800 --> 00:02:16,500
它对待这两个向量的方式非常不同。

32
00:02:16,880 --> 00:02:20,000
所以当我第一次了解到这一点时，我很惊讶顺序并不重要。

33
00:02:20,960 --> 00:02:24,590
您可以将 v 投影到 w 上，将投影 v 

34
00:02:24,590 --> 00:02:28,220
的长度乘以 w 的长度，并得到相同的结果。

35
00:02:30,400 --> 00:02:32,840
我的意思是，这难道不感觉是一个完全不同的过程吗？

36
00:02:35,320 --> 00:02:37,760
这是为什么顺序不重要的直觉。

37
00:02:38,440 --> 00:02:40,732
如果 v 和 w 碰巧具有相同的长度，

38
00:02:40,732 --> 00:02:42,180
我们可以利用一些对称性。

39
00:02:43,080 --> 00:02:47,302
由于将 w 投影到 v 上，然后将该投影的长度乘 

40
00:02:47,302 --> 00:02:51,186
以 v 的长度，因此是将 v 投影到 w 上，

41
00:02:51,186 --> 00:02:55,240
 然后将该投影的长度乘以 w 的长度的完整镜像。

42
00:02:57,280 --> 00:03:01,020
现在，如果您将其中一个（例如 v）缩放为某个常数（例如 

43
00:03:01,020 --> 00:03:04,360
2），从而使它们的长度不相等，则对称性就会被打破。

44
00:03:05,020 --> 00:03:07,597
但是让我们考虑一下如何解释这个新向量 

45
00:03:07,597 --> 00:03:10,040
（2 乘以 v）和 w 之间的点积。

46
00:03:10,880 --> 00:03:13,885
如果您将 w 视为投影到 v 上，

47
00:03:13,885 --> 00:03:17,952
则点积 2v d ot w 将恰好是点积 v 

48
00:03:17,952 --> 00:03:19,720
dot w 的两倍。

49
00:03:20,460 --> 00:03:23,737
这是因为当您将 v 缩放 2 时，

50
00:03:23,737 --> 00:03:29,520
它不会改变 w 投影的长度，但会将您投影到的向量的长度加倍。

51
00:03:30,460 --> 00:03:34,200
但另一方面，假设您正在考虑将 v 投影到 w 上。

52
00:03:34,900 --> 00:03:38,788
好吧，在这种情况下，当我们将 v 乘以 2 时，

53
00:03:38,788 --> 00:03:43,000
投 影的长度就会缩放，但投影到的向量的长度保持不变。

54
00:03:43,000 --> 00:03:46,660
所以总体效果仍然是点积的两倍。

55
00:03:47,280 --> 00:03:50,629
因此，即使在这种情况下对称性 被打破，

56
00:03:50,629 --> 00:03:54,860
这种缩放对点积值的影 响在两种解释下都是相同的。

57
00:03:56,640 --> 00:04:00,340
当我第一次学习这些东西时，还有一个让我困惑的大问题。

58
00:04:00,840 --> 00:04:05,022
到底为什么这种匹配坐标、相乘并将它 

59
00:04:05,022 --> 00:04:08,740
们加在一起的数值过程与投影有关？

60
00:04:10,640 --> 00:04:13,590
好吧，为了给出一个令人满意的答案，

61
00:04:13,590 --> 00:04:16,367
并且为 了充分理解点积的重要性，

62
00:04:16,367 --> 00:04:21,399
我们需要挖掘这里 发生的更深入的事情，这通常被称为对偶性。

63
00:04:22,140 --> 00:04:26,297
但在开始讨论之前，我需要花一些时间讨论 

64
00:04:26,297 --> 00:04:30,040
从多维到一维的线性变换，这只是数轴。

65
00:04:32,420 --> 00:04:36,125
这些函数接受 2d 向量并输出一些数字 ，

66
00:04:36,125 --> 00:04:39,830
但线性变换当然比具有 2d 输入和 1d 

67
00:04:39,830 --> 00:04:42,300
输出的普通函数受到更多限制。

68
00:04:43,020 --> 00:04:47,709
与更高维度的变换一样，就像我在第 3 章中讨 论的那样，

69
00:04:47,709 --> 00:04:50,556
有一些形式属性使这些函数成为线性，

70
00:04:50,556 --> 00:04:54,408
 但我将故意忽略这些，以免分散我们的最终目标，

71
00:04:54,408 --> 00:04:58,260
 相反专注于某种与所有正式事物等效的视觉属性。

72
00:04:59,040 --> 00:05:03,120
如果您采用一行均匀间隔的点并应用变换，

73
00:05:03,120 --> 00:05:07,844
 那么一旦这些点落在输出空间（即数轴） 中，

74
00:05:07,844 --> 00:05:11,280
线性变换将使这些点保持均匀间隔。

75
00:05:12,420 --> 00:05:15,160
否则，如果有一些点线的间距不均 匀，

76
00:05:15,160 --> 00:05:17,140
那么您的变换就不是线性的。

77
00:05:19,220 --> 00:05:22,925
与我们之前看到的情况一样，这些线性变换 

78
00:05:22,925 --> 00:05:27,927
之一完全由 i-hat 和 j-ha t 的位置决定，

79
00:05:27,927 --> 00:05:31,262
但这次每个基向量都落 在一个数字上，

80
00:05:31,262 --> 00:05:36,820
因此当我们记录它们以矩 阵的列形式出现，每一列只有一个数字。

81
00:05:38,460 --> 00:05:39,840
这是一个 1x2 矩阵。

82
00:05:41,860 --> 00:05:45,660
让我们通过一个示例来了解将这些变换之一应用于向量的含义。

83
00:05:46,380 --> 00:05:49,727
假设您有一个线性变换，将 i-hat 变为 1，

84
00:05:49,727 --> 00:05:51,680
将 j-hat 变为负 2。

85
00:05:52,420 --> 00:05:55,547
要追踪坐标为 4、3 的向量的最终位置，

86
00:05:55,547 --> 00:05:59,612
请将此向量分解 为 4 乘以 i-hat 加上 3 

87
00:05:59,612 --> 00:06:01,020
乘以 j-hat。

88
00:06:01,840 --> 00:06:05,898
线性的结果是，变换后，向量将是 i-h at 

89
00:06:05,898 --> 00:06:10,309
落地位置的 4 倍，即 1，再加 上 j-hat 

90
00:06:10,309 --> 00:06:13,133
落地位置的 3 倍，即 负 2，

91
00:06:13,133 --> 00:06:15,780
在本例中意味着它落在负数上2.

92
00:06:18,020 --> 00:06:22,360
当您纯粹以数字方式进行此计算时，它是矩阵向量乘法。

93
00:06:25,700 --> 00:06:29,382
现在，将 1x2 矩阵乘以向量的数 

94
00:06:29,382 --> 00:06:32,860
值运算就像计算两个向量的点积一样。

95
00:06:33,460 --> 00:06:36,800
这个 1x2 矩阵看起来不像是我们倾斜的向量吗？

96
00:06:37,960 --> 00:06:42,892
事实上，我们现在可以说 1x2 矩阵和 2D 向量之间 

97
00:06:42,892 --> 00:06:47,824
存在很好的关联，通过将向量的数值表示倾斜到其一侧以获得 

98
00:06:47,824 --> 00:06:52,580
关联的矩阵，或者将矩阵向后倾斜以获得关联的向量来定义。

99
00:06:53,560 --> 00:06:55,993
由于我们现在只是在研究数值表达式，

100
00:06:55,993 --> 00:06:59,571
因此在向量和 1 x2 矩阵之间来回切换可能感觉像

101
00:06:59,571 --> 00:07:00,860
是一件愚蠢的事情。

102
00:07:01,460 --> 00:07:05,120
但这表明从几何角度来看确实很棒。

103
00:07:05,380 --> 00:07:11,720
将向量转化为数字的线性变换与 向量本身之间存在某种联系。

104
00:07:14,780 --> 00:07:18,286
让我举一个例子来阐明其重要性，并 

105
00:07:18,286 --> 00:07:21,380
且恰好也回答了之前的点积难题。

106
00:07:22,140 --> 00:07:27,180
忘掉你所学的知识，想象一下 你还不知道点积与投影有关。

107
00:07:28,860 --> 00:07:33,777
我要做的就是复制一份数轴，并以某种方式将其对角放置在空 

108
00:07:33,777 --> 00:07:36,060
间中，数字 0 位于原点。

109
00:07:36,900 --> 00:07:41,920
现在考虑二维单位向量，其尖 端位于数轴上数字 1 的位置。

110
00:07:42,400 --> 00:07:44,560
我想给那个家伙起个名字，U-hat。

111
00:07:45,620 --> 00:07:48,474
这个小家伙在即将发生的事情中扮演着重 要的角色，

112
00:07:48,474 --> 00:07:50,020
所以把他放在你的脑海里吧。

113
00:07:50,740 --> 00:07:55,154
如果我们将 2D 向量直接投影到这条对角数线上，实际上 ，

114
00:07:55,154 --> 00:07:58,960
我们刚刚定义了一个将 2D 向量转换为数字的函数。

115
00:07:59,660 --> 00:08:02,546
更重要的是，这个函数实际上是线性的，

116
00:08:02,546 --> 00:08:07,196
因为它通过了我们的视觉 测试，即任何均匀分布的点线一旦落在

117
00:08:07,196 --> 00:08:08,960
数轴上就保持均匀分布。

118
00:08:11,640 --> 00:08:16,154
需要明确的是，即使我像这样将数轴嵌入到二维空 间中，

119
00:08:16,154 --> 00:08:19,280
函数的输出也是数字，而不是二维向量。

120
00:08:19,960 --> 00:08:23,680
您应该考虑一个接受两个坐标并输出一个坐标的函数。

121
00:08:25,060 --> 00:08:29,020
但向量 U-hat 是一个二维向量，存在于输入空间中。

122
00:08:29,440 --> 00:08:33,220
它只是以与数轴的嵌入重叠的方式定位。

123
00:08:34,600 --> 00:08:39,778
通过这个投影，我们刚刚定义了从 2D 向量到数字的线性变 

124
00:08:39,778 --> 00:08:44,600
换，因此我们将能够找到某种描述该变换的 1x2 矩阵。

125
00:08:45,540 --> 00:08:49,940
为了找到 1x2 矩阵，让我们放大这个对角数 轴设置，

126
00:08:49,940 --> 00:08:54,178
并考虑 I-hat 和 J-hat 各自着陆的位置，

127
00:08:54,178 --> 00:08:56,460
因为这些着陆点将是矩阵的列。

128
00:08:58,480 --> 00:08:59,440
这部分超级酷。

129
00:08:59,700 --> 00:09:02,420
我们可以用一个非常优雅的对称性来推理它。

130
00:09:03,020 --> 00:09:06,180
由于 I-hat 和 U-hat 都是单位向量，

131
00:09:06,180 --> 00:09:09,209
因 此将 I-hat 投影到穿过 U-hat 

132
00:09:09,209 --> 00:09:13,160
的直线上 看起来与将 U-hat 投影到 x 轴上完全对称。

133
00:09:13,840 --> 00:09:17,933
因此，当我们询问 I-hat 在投影时落在什么数字上时，

134
00:09:17,933 --> 00:09:22,320
答 案将与 U-hat 在投影到 x 轴上时落在的数字相同。

135
00:09:22,920 --> 00:09:26,604
但将 U-hat 投影到 x 轴只是意味着获取 

136
00:09:26,604 --> 00:09:28,600
U-hat 的 x 坐标。

137
00:09:29,020 --> 00:09:32,819
因此，根据对称性，当 I-hat 投影到对角数轴上时，

138
00:09:32,819 --> 00:09:36,620
I-hat 落在的数字将是 U-hat 的 x 坐标。

139
00:09:37,160 --> 00:09:37,660
这不是很酷吗？

140
00:09:39,200 --> 00:09:41,800
J 帽案例的推理几乎相同。

141
00:09:42,180 --> 00:09:43,260
想一想。

142
00:09:49,120 --> 00:09:52,933
出于所有相同的原因，U-hat 的 y 坐标为我们 

143
00:09:52,933 --> 00:09:56,600
提供了 J-hat 投影到数轴副本上时落在的数字。

144
00:09:57,580 --> 00:09:58,720
暂停并思考一下。

145
00:09:58,780 --> 00:10:00,200
我只是觉得这真的很酷。

146
00:10:00,920 --> 00:10:04,276
因此，描述投影变换的 1x2 矩阵 

147
00:10:04,276 --> 00:10:07,260
的条目将是 U-hat 的坐标。

148
00:10:08,040 --> 00:10:14,203
计算空间中任意向量的投影变换，需要 将该矩阵乘以这些向量，

149
00:10:14,203 --> 00:10:18,880
在计算上与 使用 U-hat 进行点积相同。

150
00:10:21,460 --> 00:10:26,136
这就是为什么用单位向量求点积可以解释为将 

151
00:10:26,136 --> 00:10:30,590
向量投影到该单位向量的跨度上并获取长度。

152
00:10:34,030 --> 00:10:35,790
那么非单位向量呢？

153
00:10:36,310 --> 00:10:39,010
例如，假设我们采用单位向量 U-hat，

154
00:10:39,010 --> 00:10:40,630
但我们将其放大 3 倍。

155
00:10:41,350 --> 00:10:44,390
从数字上看，它的每个分量都乘以 3。

156
00:10:44,810 --> 00:10:48,599
因此，查看与该向量关联的矩阵，I-hat 

157
00:10:48,599 --> 00:10:52,390
和 J-hat 的值是它们之前的值的三倍。

158
00:10:55,230 --> 00:11:00,121
由于这都是线性的，因此更一般地意味着新矩阵可以解释为 

159
00:11:00,121 --> 00:11:04,650
将任何向量投影到数轴副本上并将其所在位置乘以 3。

160
00:11:05,470 --> 00:11:10,399
这就是为什么具有非单位向量的点积可以解释为首先投影 

161
00:11:10,399 --> 00:11:14,950
到该向量上，然后将该投影的长度按向量的长度放大。

162
00:11:17,590 --> 00:11:19,550
花点时间想想这里发生了什么。

163
00:11:19,890 --> 00:11:23,207
我们有一个从二维空间到数轴的线性变换，

164
00:11:23,207 --> 00:11:26,524
它不 是用数值向量或数值点积来定义的，

165
00:11:26,524 --> 00:11:30,890
它只是通 过将空间投影到数轴的对角线副本上来定义。

166
00:11:31,670 --> 00:11:36,830
但由于变换是线性的，因此必须用某个 1x2 矩阵来描述。

167
00:11:37,330 --> 00:11:42,808
由于将 1x2 矩阵乘以 2D 向量与将该矩阵翻转并取点 

168
00:11:42,808 --> 00:11:47,910
积相同，因此这种变换不可避免地与某些 2D 向量相关。

169
00:11:49,410 --> 00:11:53,888
这里的教训是，任何时候你有这些线性变换之一 ，

170
00:11:53,888 --> 00:11:57,587
其输出空间是数轴，无论它是如何定义的，

171
00:11:57,587 --> 00:12:03,429
都 会有一些与该变换相对应的唯一向量 v，从某 种意义上说，

172
00:12:03,429 --> 00:12:06,350
应用变换是与该向量的点积相同。

173
00:12:09,930 --> 00:12:12,030
对我来说，这真是太美了。

174
00:12:12,730 --> 00:12:15,390
这是数学中所谓的对偶性的一个例子。

175
00:12:16,270 --> 00:12:19,827
对偶性在数学中以多种不同的方式和形 式出现，

176
00:12:19,827 --> 00:12:21,930
并且实际定义起来非常棘手。

177
00:12:22,670 --> 00:12:26,660
宽泛地说，它指的是两种数学事物之间存 

178
00:12:26,660 --> 00:12:30,230
在自然但令人惊讶的对应关系的情况。

179
00:12:31,010 --> 00:12:34,633
对于您刚刚了解的线性代数情况，您 

180
00:12:34,633 --> 00:12:38,469
会说向量的对偶是它编码的线性变 换，

181
00:12:38,469 --> 00:12:44,650
而从某个空间到一维的线性变 换的对偶是该空间中的某个向量。

182
00:12:46,730 --> 00:12:51,903
总而言之，从表面上看，点积是一个非常有用的几何工具 ，

183
00:12:51,903 --> 00:12:56,310
用于理解投影和测试向量是否倾向于指向同一方向。

184
00:12:56,970 --> 00:13:00,790
这可能是您要记住的关于点积的最重要的事情。

185
00:13:01,270 --> 00:13:04,582
但在更深层次上，将两个向量点在一起是将 

186
00:13:04,582 --> 00:13:07,730
其中一个向量转化为变换世界的一种方法。

187
00:13:08,670 --> 00:13:11,550
再次强调，从数字上看，这可能感觉是一个愚蠢的强调点。

188
00:13:11,670 --> 00:13:14,090
实在是太计算了。

189
00:13:14,090 --> 00:13:18,423
但我发现这一点如此重要的原因是，在整个数学过程 中，

190
00:13:18,423 --> 00:13:21,756
当你处理向量时，一旦你真正了解它的个性，

191
00:13:21,756 --> 00:13:25,256
有 时你会意识到，将它理解为空间中的箭头，

192
00:13:25,256 --> 00:13:30,090
而不是空 间中的箭头，会更容易理解。 线性变换的物理体现。

193
00:13:30,730 --> 00:13:35,182
就好像向量实际上只是某种变换的概念简写，

194
00:13:35,182 --> 00:13:40,970
因为我 们更容易考虑空间中的箭头而不是移动整个空间。

195
00:13:42,610 --> 00:13:45,706
在下一个视频中，当我谈论叉积时，

196
00:13:45,706 --> 00:13:49,190
您 将看到另一个非常酷的二元性示例。

