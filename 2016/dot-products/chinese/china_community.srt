1
00:00:20,880 --> 00:00:25,150
传统上，点积是线性代数课程中很靠前的内容

2
00:00:25,220 --> 00:00:26,310
一般就在最开始

3
00:00:26,700 --> 00:00:29,650
我把它放得如此靠后，看起来似乎很奇怪

4
00:00:30,210 --> 00:00:35,840
我这么做是有原因的，虽然引入点积的标准方法只需要向量的基础认识即可

5
00:00:36,240 --> 00:00:39,250
但是要更进一步理解点积所发挥的作用

6
00:00:39,530 --> 00:00:42,670
只能从线性变换的角度才能完成

7
00:00:43,390 --> 00:00:47,460
不过在此之前，我先简单介绍引入点积的标准方法

8
00:00:47,680 --> 00:00:50,720
我想对于部分观众来说，这算是复习了吧

9
00:00:51,300 --> 00:00:54,680
如果你有两个维数相同的向量

10
00:00:54,900 --> 00:00:56,960
或是两个长度相同的数组

11
00:00:57,440 --> 00:01:01,210
求它们的点积，就是将相应坐标配对

12
00:01:01,610 --> 00:01:03,520
求出每一对坐标的乘积

13
00:01:03,880 --> 00:01:05,120
然后将结果相加

14
00:01:06,790 --> 00:01:13,240
所以向量(1, 2)点乘向量(3, 4)的结果为1×3+2×4

15
00:01:14,590 --> 00:01:23,770
向量(6, 2, 8, 3)点乘向量(1, 8, 5, 3)的结果为6×1+2×8+8×5+3×3

16
00:01:24,900 --> 00:01:28,900
幸运的是，这个计算有一个优美的几何解释

17
00:01:29,310 --> 00:01:32,590
要求两个向量v和w的点积

18
00:01:32,910 --> 00:01:38,050
想象将向量w朝着过原点和向量v终点的直线上投影

19
00:01:38,710 --> 00:01:42,050
将投影的长度与向量v的长度相乘

20
00:01:42,370 --> 00:01:44,610
你就得到了它们的点积 - v点乘w

21
00:01:46,490 --> 00:01:50,120
除非w的投影与v的方向相反

22
00:01:50,330 --> 00:01:52,290
这种情况下点积为负值

23
00:01:54,020 --> 00:01:56,660
所以当两个向量的指向大致相同时

24
00:01:56,660 --> 00:01:57,970
它们的点积为正

25
00:01:59,540 --> 00:02:04,190
当它们相互垂直时，意味着一个向量在另一个向量上的投影为零向量

26
00:02:04,190 --> 00:02:05,730
它们的点积为零

27
00:02:06,070 --> 00:02:08,460
而当它们的指向基本相反时

28
00:02:08,460 --> 00:02:09,710
它们的点积为负

29
00:02:11,740 --> 00:02:14,700
现在看看，这种解释异常地不对称

30
00:02:14,850 --> 00:02:16,690
它对两个向量的处理方式完全不同

31
00:02:16,980 --> 00:02:20,070
所以我初次学习时，点积与顺序无关让我感到很惊讶

32
00:02:21,340 --> 00:02:26,990
你可以将v投影到w上，将v的投影长度与w的长度相乘

33
00:02:27,180 --> 00:02:28,340
然后得到相同的结果

34
00:02:30,340 --> 00:02:32,980
我说，你不觉得这是个完全不同的过程吗？

35
00:02:35,550 --> 00:02:37,860
下面从直观上说说为什么点积与顺序无关

36
00:02:38,530 --> 00:02:42,360
如果v和w的长度恰好相同，我们可以利用其中的对称性

37
00:02:43,070 --> 00:02:48,280
因为w向v上投影，并将w的投影长度与v的长度相乘

38
00:02:48,540 --> 00:02:55,300
和v向w上投影，并将v的投影长度与w的长度相乘互为镜像

39
00:02:57,220 --> 00:03:01,040
现在如果你将其中一个缩放若干倍，比如将v变成两倍

40
00:03:01,310 --> 00:03:04,520
使得它们的长度不同，对称性就被破坏了

41
00:03:05,010 --> 00:03:10,220
但是我们可以这样解读新向量2v和w的点积

42
00:03:10,970 --> 00:03:13,450
如果你认为w向v上投影

43
00:03:13,660 --> 00:03:19,900
那么2v点乘w就应该恰好是v点乘w的两倍

44
00:03:20,410 --> 00:03:26,050
这是因为，将v放大为原来的两倍并不改变w的投影长度

45
00:03:26,340 --> 00:03:29,800
但是被投影的向量长度变为原来的两倍

46
00:03:30,420 --> 00:03:34,380
另一方面，假设你想将v投影到w上

47
00:03:34,980 --> 00:03:39,890
我们将v变为原来的两倍，这次是投影的长度变为原来的两倍

48
00:03:40,200 --> 00:03:43,130
但是被投影的向量长度保持不变

49
00:03:43,570 --> 00:03:46,830
所以总体效果仍然是点积变为两倍

50
00:03:47,240 --> 00:03:49,290
所以说，即便这种情况下对称性被破坏了

51
00:03:49,500 --> 00:03:55,170
在两种理解方式下，缩放向量对点积结果的影响是相同的

52
00:03:56,890 --> 00:04:00,340
初次学习的时候，我还遇到了另一个让我困惑的大问题

53
00:04:00,850 --> 00:04:03,190
究竟为什么点积的这一运算过程

54
00:04:03,190 --> 00:04:09,010
也就是对应坐标相乘并将结果相加，和投影有所联系？

55
00:04:10,950 --> 00:04:16,200
如果想要给出一个满意的答案，并且正视点积的重要性

56
00:04:16,480 --> 00:04:21,520
我们需要挖掘更深层次的东西，它通常被称为“对偶性”

57
00:04:22,100 --> 00:04:24,950
不过在继续深入之前，我需要花点时间讨论

58
00:04:24,950 --> 00:04:30,110
多维空间到一维空间（数轴）的线性变换

59
00:04:32,680 --> 00:04:35,760
有不少函数能够接收二维向量并输出一个数

60
00:04:36,130 --> 00:04:42,410
同样是二维输入和一维输出，和一般的函数相比，线性变换的要求更加严格

61
00:04:42,970 --> 00:04:50,040
就像我在第三章中讨论的，高维空间中的变换需要满足一些严格的性质才会具有线性

62
00:04:50,270 --> 00:04:53,910
但是为了不偏离最终目标，我特意忽略这些内容

63
00:04:54,160 --> 00:04:58,260
而是聚焦于一种与之等价的直观特性

64
00:04:59,120 --> 00:05:03,650
如果你有一系列等距分布于一条直线上的点，然后应用变换

65
00:05:04,380 --> 00:05:11,200
线性变换会保持这些点等距分布在输出空间中，也就是数轴上

66
00:05:12,310 --> 00:05:17,270
否则，如果这些点没有等距分布，那么这个变换就不是线性的

67
00:05:19,330 --> 00:05:20,900
如同我们之前看到的例子一样

68
00:05:21,150 --> 00:05:26,500
这些线性变换完全由它对i帽和j帽的变换决定

69
00:05:26,930 --> 00:05:30,280
但是这一次，这些基向量只落在一个数上

70
00:05:30,630 --> 00:05:33,860
所以当我们将它们变换后的位置记录为矩阵的列时

71
00:05:34,270 --> 00:05:36,930
矩阵的每列只是一个单独的数

72
00:05:38,440 --> 00:05:40,000
这是一个1×2矩阵

73
00:05:41,830 --> 00:05:45,850
我们来考察一个例子，了解它对向量作用的含义

74
00:05:46,340 --> 00:05:51,770
假设你有一个线性变换，它将i帽和j帽分别变换至1和-2

75
00:05:52,440 --> 00:05:56,340
要跟踪一个向量，比如向量(4, 3)，在变换之后的去向

76
00:05:56,810 --> 00:06:01,130
将这个向量分解为4乘以i帽加上3乘以j帽

77
00:06:01,800 --> 00:06:05,120
由于线性性质，在变换后

78
00:06:05,330 --> 00:06:08,890
这个向量的位置是4乘以变换后的i帽，也就是1

79
00:06:09,140 --> 00:06:12,450
加上3乘以变换后的j帽，也就是-2

80
00:06:12,900 --> 00:06:15,510
结果说明它落在-2上

81
00:06:18,120 --> 00:06:22,600
当你完全从数值角度进行计算时，它就是矩阵向量乘法

82
00:06:26,060 --> 00:06:30,300
1×2矩阵与向量相乘这一数值运算过程

83
00:06:30,580 --> 00:06:33,040
感觉上就和两个向量的点积一样

84
00:06:33,360 --> 00:06:36,940
那个1×2矩阵不正像是一个倾倒的向量吗？

85
00:06:37,970 --> 00:06:39,360
实际上，我们现在可以说

86
00:06:39,360 --> 00:06:43,840
1×2矩阵与二维向量之间有着微妙的联系

87
00:06:44,020 --> 00:06:49,340
这种关系在于：将向量放倒，从而得到与之相关的矩阵

88
00:06:49,620 --> 00:06:52,750
或者将矩阵立直，从而得到与之相关的向量

89
00:06:53,490 --> 00:06:56,030
因为我们现在只是从数值表达上来看这个联系

90
00:06:56,030 --> 00:07:00,910
所以向量和1×2矩阵之间的来回转化看上去毫无意义

91
00:07:01,760 --> 00:07:05,260
但是这暗示了一点，从几何角度可以看到一些美妙的事情

92
00:07:05,680 --> 00:07:11,930
将向量转化为数的线性变换和这个向量本身有着某种关系

93
00:07:15,530 --> 00:07:17,970
我来举个例子说明这种关系的重要性

94
00:07:17,970 --> 00:07:21,440
而它恰恰回答了之前提到的点积的问题

95
00:07:22,050 --> 00:07:23,480
忘记你所学过的

96
00:07:23,480 --> 00:07:27,360
假设你还不知道点积与投影有关

97
00:07:29,070 --> 00:07:31,850
我现在将数轴复制一份

98
00:07:31,850 --> 00:07:36,260
然后保持0在原点，将它斜向放置在空间中

99
00:07:36,850 --> 00:07:42,160
现在考虑这样一个二维向量，它的终点落在这条数轴的1上

100
00:07:42,470 --> 00:07:44,660
我给它起个名字，就叫“u帽”

101
00:07:45,680 --> 00:07:48,460
这个向量在接下来的讲解中扮演着重要的角色

102
00:07:48,460 --> 00:07:50,140
所以请你牢记它

103
00:07:51,030 --> 00:07:54,800
如果将二维向量直接投影到这条数轴上

104
00:07:54,960 --> 00:07:59,110
实际上，我们就这样定义了一个从二维向量到数的函数

105
00:07:59,640 --> 00:08:04,030
更重要的是，这个函数是线性的，因为它顺利通过了线性检验

106
00:08:04,030 --> 00:08:09,060
即直线上等距分布的点在投影到数轴上后仍然等距分布

107
00:08:11,890 --> 00:08:16,260
这里说明一点，即便我把这条数轴放在二维空间中

108
00:08:16,390 --> 00:08:19,460
上述函数的输出结果还是数，而不是二维向量

109
00:08:19,890 --> 00:08:23,780
你应该把它看作一个接收两个坐标并输出一个坐标的函数

110
00:08:25,050 --> 00:08:29,170
不过，u帽是二维空间中的一个向量

111
00:08:29,380 --> 00:08:33,330
而它碰巧又落在这条数轴上

112
00:08:34,650 --> 00:08:39,830
根据这个投影，我们定义了一个从二维向量到数的线性变换

113
00:08:40,130 --> 00:08:44,810
所以我们就能够找到描述这个变换的1×2矩阵

114
00:08:45,490 --> 00:08:50,050
为了找到这个矩阵，我们把这条斜着的数轴放大来看

115
00:08:50,050 --> 00:08:56,620
并且需要考虑变换后i帽和j帽的位置，因为它们就是矩阵的列

116
00:08:58,560 --> 00:08:59,680
这一部分内容超级漂亮

117
00:08:59,680 --> 00:09:02,560
我们可以通过精妙的对称性进行推理

118
00:09:02,980 --> 00:09:05,680
因为i帽和u帽都是单位向量

119
00:09:05,940 --> 00:09:13,330
将i帽向u帽所在的直线投影与u帽向x轴投影看上去完全对称

120
00:09:13,760 --> 00:09:17,150
所以说，如果要问i帽在投影之后落在哪个数上

121
00:09:17,410 --> 00:09:22,450
答案就应该是u帽向x轴投影所得到的数

122
00:09:22,880 --> 00:09:28,690
而u帽向x轴投影得到的数就是u帽的横坐标

123
00:09:29,060 --> 00:09:34,400
因此根据对称性，将i帽向斜着的数轴上投影所得到的数

124
00:09:34,400 --> 00:09:36,750
就是u帽的横坐标

125
00:09:37,070 --> 00:09:37,840
是不是很酷？

126
00:09:39,290 --> 00:09:42,130
以上推理过程对j帽几乎一致

127
00:09:42,130 --> 00:09:43,230
花点时间思考一下

128
00:09:49,450 --> 00:09:50,770
与之前的原因相同

129
00:09:50,770 --> 00:09:56,740
u帽的y坐标给出了j帽向斜着的数轴上投影所得到的数

130
00:09:57,560 --> 00:10:00,310
暂停思考一会儿，我觉得这部分非常漂亮

131
00:10:01,100 --> 00:10:04,950
所以描述投影变换的1×2矩阵的两列

132
00:10:05,090 --> 00:10:07,420
就分别是u帽的两个坐标

133
00:10:07,930 --> 00:10:11,920
而空间中任意向量经过投影变换的结果

134
00:10:11,920 --> 00:10:14,940
也就是投影矩阵与这个向量相乘

135
00:10:15,160 --> 00:10:18,920
和这个向量与u帽的点积在计算上完全相同

136
00:10:21,860 --> 00:10:26,040
这就是为什么与单位向量的点积可以解读为

137
00:10:26,040 --> 00:10:30,640
将向量投影到单位向量所在的直线上所得到的投影长度

138
00:10:34,260 --> 00:10:36,050
那对于非单位向量呢？

139
00:10:36,290 --> 00:10:40,770
比如说，还是这个单位向量u帽，不过我们把它放大为原来的3倍

140
00:10:41,300 --> 00:10:44,520
数值上说，它的每个坐标都被放大为原来的3倍

141
00:10:44,850 --> 00:10:47,690
所以要寻找与这个向量相关的投影矩阵

142
00:10:47,920 --> 00:10:52,540
实际上就是之前i帽和j帽投影得到的值的3倍

143
00:10:55,540 --> 00:11:00,530
更普遍地说，因为这个变换是线性的，意味着这个新矩阵可以看作

144
00:11:00,530 --> 00:11:04,810
将任何向量朝斜着的数轴上投影，然后将结果乘以3

145
00:11:05,330 --> 00:11:09,620
这就是为什么向量与给定非单位向量的点积可以解读为

146
00:11:09,620 --> 00:11:11,610
首先朝给定向量上投影

147
00:11:11,610 --> 00:11:15,090
然后将投影的值与给定向量长度相乘

148
00:11:17,840 --> 00:11:19,680
思考一下这个过程

149
00:11:19,930 --> 00:11:23,040
我们有一个从二维空间到数轴的线性变换

150
00:11:23,200 --> 00:11:26,930
它并不是由向量数值或点积运算定义得到的

151
00:11:27,060 --> 00:11:30,960
而只是通过将空间投影到给定数轴上来定义

152
00:11:31,620 --> 00:11:37,010
但是因为这个变换是线性的，所以它必然可以用某个1×2矩阵描述

153
00:11:37,270 --> 00:11:40,450
又因为1×2矩阵与二维向量相乘的计算过程

154
00:11:40,450 --> 00:11:43,650
和转置矩阵并求点积的计算过程相同

155
00:11:43,810 --> 00:11:48,130
所以这个投影变换必然会与某个二维向量相关

156
00:11:49,740 --> 00:11:53,680
这里给你的启发是，你在任何时候看到一个线性变换

157
00:11:53,680 --> 00:11:55,580
它的输出空间是一维数轴

158
00:11:55,790 --> 00:11:57,320
无论它是如何定义的

159
00:11:57,320 --> 00:12:01,390
空间中会存在唯一的向量v与之相关

160
00:12:01,390 --> 00:12:06,460
就这一意义而言，应用变换和与向量v做点积是一样的

161
00:12:09,890 --> 00:12:12,240
对我来说，这个结果格外精彩

162
00:12:12,780 --> 00:12:15,460
它是数学中“对偶性”的一个实例

163
00:12:16,160 --> 00:12:19,730
对偶性贯穿数学始终，在多个方面均有体现

164
00:12:19,900 --> 00:12:22,180
而实际定义它却是比较棘手的

165
00:12:22,480 --> 00:12:24,760
粗略地说，它指的是

166
00:12:24,760 --> 00:12:30,460
两种数学事物之间自然而又出乎意料的对应关系

167
00:12:31,040 --> 00:12:33,130
对于你刚学到的情况而言

168
00:12:33,330 --> 00:12:37,930
你可以说一个向量的对偶是由它定义的线性变换

169
00:12:38,690 --> 00:12:44,840
一个多维空间到一维空间的线性变换的对偶是多维空间中的某个特定向量

170
00:12:47,090 --> 00:12:53,060
总结一下，表面上看，点积是理解投影的有利几何工具

171
00:12:53,210 --> 00:12:56,510
并且方便检验两个向量的指向是否相同

172
00:12:56,900 --> 00:13:00,950
这大概也是你需要记住的点积中最重要的部分

173
00:13:01,300 --> 00:13:02,440
不过更进一步讲

174
00:13:02,600 --> 00:13:08,030
两个向量点乘，就是将其中一个向量转化为线性变换

175
00:13:08,450 --> 00:13:11,810
同样，在数值上强调它可能显得没有意义

176
00:13:11,930 --> 00:13:14,610
因为只是两种看上去恰好相似的计算过程而已

177
00:13:14,960 --> 00:13:17,220
但是我认为这一过程非常重要

178
00:13:17,220 --> 00:13:19,550
因为从始至终你都在和向量打交道

179
00:13:19,800 --> 00:13:22,050
一旦你真正了解了向量的“个性”

180
00:13:22,210 --> 00:13:26,540
有时你就会意识到，不把它看作空间中的箭头

181
00:13:26,730 --> 00:13:30,320
而把它看作线性变换的物质载体，会更容易理解向量

182
00:13:30,740 --> 00:13:35,250
向量就仿佛是一个特定变换的概念性记号

183
00:13:35,510 --> 00:13:41,150
因为对我们来说，想象空间中的向量比想象整个空间移动到数轴上更加容易

184
00:13:43,040 --> 00:13:44,020
下期视频中

185
00:13:44,020 --> 00:13:49,390
我将开始讨论叉积，你会在其中看到对偶性的另一个漂亮的体现

186
00:13:50,200 --> 00:14:11,230
（下期视频：以线性变换的眼光看叉积）

