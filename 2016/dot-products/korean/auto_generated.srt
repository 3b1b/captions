1
00:00:16,580 --> 00:00:19,326
[베토벤의 &quot;환희의 송가&quot;는 

2
00:00:19,326 --> 00:00:21,651
피아노 끝까지 연주됩니다.] 전통적으로 

3
00:00:21,651 --> 00:00:23,870
내적은 선형 대수 과정의 초기 단계, 

4
00:00:23,870 --> 00:00:26,300
일반적으로 시작 부분에 소개되는 것입니다.

5
00:00:26,640 --> 00:00:28,168
그래서 제가 시리즈에서 그것들을 여기까지 뒤로 

6
00:00:28,168 --> 00:00:29,580
밀었다는 것이 이상하게 보일 수도 있습니다.

7
00:00:29,580 --> 00:00:32,713
제가 이렇게 한 이유는 주제를 소개하는 표준 방법이 

8
00:00:32,713 --> 00:00:35,955
있기 때문입니다. 이를 위해서는 벡터에 대한 기본적인 

9
00:00:35,955 --> 00:00:39,197
이해만 필요하지만 수학에서 내적의 역할에 대한 완전한 

10
00:00:39,197 --> 00:00:42,440
이해는 실제로 선형 변환을 통해서만 찾을 수 있습니다.

11
00:00:43,480 --> 00:00:45,476
하지만 그 전에 내적(dot product)이 

12
00:00:45,476 --> 00:00:47,702
도입되는 표준 방식에 대해 간략하게 설명하겠습니다. 

13
00:00:47,702 --> 00:00:49,545
이는 적어도 많은 시청자를 위해 부분적으로 

14
00:00:49,545 --> 00:00:50,620
검토된 것으로 가정합니다.

15
00:00:51,440 --> 00:00:54,283
수치적으로, 동일한 차원의 두 벡터, 

16
00:00:54,283 --> 00:00:57,397
동일한 길이의 두 숫자 목록이 있는 경우 

17
00:00:57,397 --> 00:01:00,511
내적을 취한다는 것은 모든 좌표를 쌍으로 

18
00:01:00,511 --> 00:01:03,761
만들고 해당 쌍을 곱한 다음 결과를 더하는 

19
00:01:03,761 --> 00:01:04,980
것을 의미합니다.

20
00:01:06,860 --> 00:01:09,776
따라서 3, 4가 점으로 표시된 벡터 1, 

21
00:01:09,776 --> 00:01:13,180
2는 1 곱하기 3 더하기 2 곱하기 4가 됩니다.

22
00:01:14,580 --> 00:01:17,735
1, 8, 5, 3이 점으로 표시된 벡터 6, 2, 

23
00:01:17,735 --> 00:01:20,564
8, 3은 6 곱하기 1 더하기 2 곱하기 8 

24
00:01:20,564 --> 00:01:23,720
더하기 8 곱하기 5 더하기 3 곱하기 3이 됩니다.

25
00:01:24,740 --> 00:01:26,640
운 좋게도 이 계산에는 정말 

26
00:01:26,640 --> 00:01:28,660
좋은 기하학적 해석이 있습니다.

27
00:01:29,340 --> 00:01:33,293
두 벡터 v와 w 사이의 내적을 생각하려면 v의 

28
00:01:33,293 --> 00:01:37,394
원점과 끝을 통과하는 선에 w를 투영한다고 상상해 

29
00:01:37,394 --> 00:01:37,980
보세요.

30
00:01:38,780 --> 00:01:41,389
이 투영의 길이에 v의 길이를 

31
00:01:41,389 --> 00:01:44,460
곱하면 내적 v dot w가 됩니다.

32
00:01:46,420 --> 00:01:49,106
w의 투영이 v와 반대 방향을 가리키는 

33
00:01:49,106 --> 00:01:52,160
경우를 제외하고 내적은 실제로 음수가 됩니다.

34
00:01:53,720 --> 00:01:55,789
따라서 두 벡터가 일반적으로 같은 

35
00:01:55,789 --> 00:01:57,860
방향을 가리키면 내적은 양수입니다.

36
00:01:59,240 --> 00:02:02,526
수직인 경우, 즉 하나를 다른 하나에 투영하는 

37
00:02:02,526 --> 00:02:05,560
것이 0 벡터임을 의미하며 내적은 0입니다.

38
00:02:05,980 --> 00:02:07,903
그리고 일반적으로 반대 방향을 

39
00:02:07,903 --> 00:02:09,600
가리키면 내적은 음수입니다.

40
00:02:11,620 --> 00:02:14,560
그런데 이 해석은 이상하게도 비대칭적입니다.

41
00:02:14,800 --> 00:02:16,500
두 벡터를 매우 다르게 처리합니다.

42
00:02:16,880 --> 00:02:18,518
그래서 처음 이것을 배웠을 때 순서가 

43
00:02:18,518 --> 00:02:20,000
중요하지 않다는 사실에 놀랐습니다.

44
00:02:20,960 --> 00:02:24,724
대신 v를 w에 투영하고 투영된 v의 길이에 w의 

45
00:02:24,724 --> 00:02:28,220
길이를 곱하여 동일한 결과를 얻을 수 있습니다.

46
00:02:30,400 --> 00:02:32,840
제 말은, 그건 정말 다른 과정처럼 느껴지지 않나요?

47
00:02:35,320 --> 00:02:36,540
순서가 중요하지 않은 이유에 

48
00:02:36,540 --> 00:02:37,760
대한 직관은 다음과 같습니다.

49
00:02:38,440 --> 00:02:42,180
v와 w의 길이가 같다면 대칭성을 활용할 수 있습니다.

50
00:02:43,080 --> 00:02:47,035
w를 v에 투영한 다음 해당 투영의 길이에 v의 

51
00:02:47,035 --> 00:02:51,137
길이를 곱하면 v를 w에 투영한 다음 해당 투영의 

52
00:02:51,137 --> 00:02:55,240
길이에 w의 길이를 곱하는 완전한 거울상이 됩니다.

53
00:02:57,280 --> 00:03:00,961
이제 v 중 하나를 2와 같은 상수로 확장하여 

54
00:03:00,961 --> 00:03:04,360
길이가 동일하지 않게 하면 대칭이 깨집니다.

55
00:03:05,020 --> 00:03:07,530
하지만 이 새로운 벡터인 2 곱하기 v와 w 

56
00:03:07,530 --> 00:03:10,040
사이의 내적을 어떻게 해석할지 생각해 봅시다.

57
00:03:10,880 --> 00:03:13,778
w가 v에 투영되는 것으로 생각하면 

58
00:03:13,778 --> 00:03:16,386
내적 2v dot w는 내적 v 

59
00:03:16,386 --> 00:03:19,720
dot w의 정확히 두 배가 될 것입니다.

60
00:03:20,460 --> 00:03:23,236
이는 v를 2로 스케일링하면 w의 

61
00:03:23,236 --> 00:03:26,305
투영 길이는 변경되지 않지만 투영하는 

62
00:03:26,305 --> 00:03:29,520
벡터의 길이는 두 배가 되기 때문입니다.

63
00:03:30,460 --> 00:03:32,291
하지만 다른 한편으로, v가 w에 투영되는 

64
00:03:32,291 --> 00:03:34,200
것에 대해 생각하고 있다고 가정해 보겠습니다.

65
00:03:34,900 --> 00:03:38,810
이 경우 투영의 길이는 v에 2를 곱할 때 크기가 

66
00:03:38,810 --> 00:03:43,000
조정되지만 투영하는 벡터의 길이는 일정하게 유지됩니다.

67
00:03:43,000 --> 00:03:44,777
따라서 전체적인 효과는 여전히 

68
00:03:44,777 --> 00:03:46,660
내적을 두 배로 늘리는 것입니다.

69
00:03:47,280 --> 00:03:50,870
따라서 이 경우 대칭이 깨졌더라도 이 스케일링이 

70
00:03:50,870 --> 00:03:54,860
내적 값에 미치는 영향은 두 해석 모두에서 동일합니다.

71
00:03:56,640 --> 00:03:58,293
제가 이 내용을 처음 배웠을 때 저를 

72
00:03:58,293 --> 00:04:00,340
혼란스럽게 했던 또 하나의 큰 질문이 있습니다.

73
00:04:00,840 --> 00:04:03,427
좌표를 일치시키고, 쌍을 곱하고, 

74
00:04:03,427 --> 00:04:07,377
더하는 이 수치적 과정이 도대체 투영과 관련이 있는 

75
00:04:07,377 --> 00:04:08,740
이유는 무엇입니까?

76
00:04:10,640 --> 00:04:13,329
글쎄, 만족스러운 대답을 제공하고 내적의 

77
00:04:13,329 --> 00:04:16,253
중요성을 완전히 정의하려면 여기에서 진행되는 

78
00:04:16,253 --> 00:04:18,593
좀 더 깊은 내용을 찾아야 합니다. 

79
00:04:18,593 --> 00:04:21,399
이는 종종 이중성이라는 이름으로 사용됩니다.

80
00:04:22,140 --> 00:04:24,887
하지만 이에 대해 알아보기 전에 다차원에서 

81
00:04:24,887 --> 00:04:27,406
수직선인 1차원으로의 선형 변환에 대해 

82
00:04:27,406 --> 00:04:30,040
이야기하는 데 시간을 좀 할애해야 합니다.

83
00:04:32,420 --> 00:04:35,674
이는 2D 벡터를 받아들이고 일부 숫자를 뱉어내는 

84
00:04:35,674 --> 00:04:38,812
함수이지만 선형 변환은 물론 2D 입력 및 1D 

85
00:04:38,812 --> 00:04:42,300
출력을 사용하는 일반적인 함수보다 훨씬 더 제한됩니다.

86
00:04:43,020 --> 00:04:45,966
3장에서 이야기한 것과 같은 더 높은 차원의 변환과 

87
00:04:45,966 --> 00:04:48,811
마찬가지로 이러한 함수를 선형으로 만드는 몇 가지 

88
00:04:48,811 --> 00:04:51,655
형식적 속성이 있지만 여기서는 최종 목표에 방해가 

89
00:04:51,655 --> 00:04:54,703
되지 않도록 의도적으로 이러한 속성을 무시하겠습니다. 

90
00:04:54,703 --> 00:04:57,447
모든 형식적인 내용과 동등한 특정 시각적 속성에 

91
00:04:57,447 --> 00:04:58,260
중점을 둡니다.

92
00:04:59,040 --> 00:05:03,460
균일한 간격의 점선을 선택하고 변환을 적용하면 

93
00:05:03,460 --> 00:05:07,200
선형 변환은 해당 점들이 수직선인 출력 

94
00:05:07,200 --> 00:05:11,280
공간에 도달한 후 균일한 간격을 유지합니다.

95
00:05:12,420 --> 00:05:14,598
그렇지 않고 간격이 고르지 않은 

96
00:05:14,598 --> 00:05:17,140
점선이 있으면 변환이 선형이 아닙니다.

97
00:05:19,220 --> 00:05:22,690
이전에 본 사례와 마찬가지로 이러한 선형 변환 중 

98
00:05:22,690 --> 00:05:26,160
하나는 i-hat 및 j-hat이 사용되는 위치에 

99
00:05:26,160 --> 00:05:29,507
따라 완전히 결정되지만 이번에는 해당 기본 벡터 

100
00:05:29,507 --> 00:05:32,977
각각이 숫자에 도달하므로 위치를 기록할 때 그들은 

101
00:05:32,977 --> 00:05:36,200
행렬의 열로 착륙하며, 각 열에는 단일 숫자만 

102
00:05:36,200 --> 00:05:36,820
있습니다.

103
00:05:38,460 --> 00:05:39,840
이것은 1x2 행렬입니다.

104
00:05:41,860 --> 00:05:43,836
이러한 변환 중 하나를 벡터에 적용한다는 것이 

105
00:05:43,836 --> 00:05:45,660
무엇을 의미하는지 예를 통해 살펴보겠습니다.

106
00:05:46,380 --> 00:05:48,809
i-hat을 1로, j-hat을 -2로 

107
00:05:48,809 --> 00:05:51,680
변환하는 선형 변환이 있다고 가정해 보겠습니다.

108
00:05:52,420 --> 00:05:55,066
좌표가 있는 벡터(가령 4, 3)가 끝나는 

109
00:05:55,066 --> 00:05:57,932
위치를 추적하려면 이 벡터를 i-hat의 4배 

110
00:05:57,932 --> 00:06:01,020
+ j-hat의 3배로 나누는 것을 생각해 보세요.

111
00:06:01,840 --> 00:06:05,396
선형성의 결과로 변환 후 벡터는 i-hat이 

112
00:06:05,396 --> 00:06:08,952
착지한 위치의 4배인 1에 더해 j-hat이 

113
00:06:08,952 --> 00:06:11,939
착지한 장소의 3배인 -2가 됩니다. 

114
00:06:11,939 --> 00:06:15,780
이 경우 이는 음수에 착지했음을 의미합니다. 2.

115
00:06:18,020 --> 00:06:20,004
이 계산을 순전히 수치적으로 

116
00:06:20,004 --> 00:06:22,360
수행하면 행렬 벡터 곱셈이 됩니다.

117
00:06:25,700 --> 00:06:28,981
이제 1x2 행렬에 벡터를 곱하는 수치 

118
00:06:28,981 --> 00:06:32,860
연산은 두 벡터의 내적을 구하는 것과 같습니다.

119
00:06:33,460 --> 00:06:35,177
저 1x2 행렬은 우리가 옆으로 

120
00:06:35,177 --> 00:06:36,800
기울인 벡터처럼 보이지 않나요?

121
00:06:37,960 --> 00:06:40,955
사실, 우리는 지금 당장 1x2 행렬과 2D 

122
00:06:40,955 --> 00:06:44,550
벡터 사이에 좋은 연관성이 있다고 말할 수 있습니다. 

123
00:06:44,550 --> 00:06:47,546
이는 벡터의 수치 표현을 옆으로 기울여 관련 

124
00:06:47,546 --> 00:06:50,183
행렬을 얻거나 행렬을 위로 기울여 관련 

125
00:06:50,183 --> 00:06:52,580
벡터를 얻는 방식으로 정의됩니다. .

126
00:06:53,560 --> 00:06:56,030
지금은 수치 표현식만 보고 있기 때문에 

127
00:06:56,030 --> 00:06:58,501
벡터와 1x2 행렬 사이를 오가는 것이 

128
00:06:58,501 --> 00:07:00,860
어리석은 일처럼 느껴질 수도 있습니다.

129
00:07:01,460 --> 00:07:03,193
그러나 이것은 기하학적 관점에서 

130
00:07:03,193 --> 00:07:05,120
볼 때 정말 놀라운 것을 시사합니다.

131
00:07:05,380 --> 00:07:08,620
벡터를 숫자로 변환하는 선형 변환과 벡터 

132
00:07:08,620 --> 00:07:11,720
자체 사이에는 일종의 연관성이 있습니다.

133
00:07:14,780 --> 00:07:18,080
그 의미를 명확하게 하고 이전의 내적 

134
00:07:18,080 --> 00:07:21,380
퍼즐에 답하는 예를 보여 드리겠습니다.

135
00:07:22,140 --> 00:07:24,760
배운 내용을 잊어버리고 내적이 투영과 관련되어 

136
00:07:24,760 --> 00:07:27,180
있다는 사실을 아직 모른다고 상상해 보세요.

137
00:07:28,860 --> 00:07:31,478
여기서 제가 하려는 일은 수직선의 복사본을 

138
00:07:31,478 --> 00:07:34,096
가져와 어떻게든 공간에 대각선으로 배치하고 

139
00:07:34,096 --> 00:07:36,060
숫자 0을 원점에 두는 것입니다.

140
00:07:36,900 --> 00:07:39,409
이제 숫자의 숫자 1이 있는 곳에 팁이 

141
00:07:39,409 --> 00:07:41,920
있는 2차원 단위 벡터를 생각해 보세요.

142
00:07:42,400 --> 00:07:44,560
그 사람에게 이름을 지어주고 싶어요. u-hat.

143
00:07:45,620 --> 00:07:47,864
이 작은 사람은 앞으로 일어날 일에서 중요한 

144
00:07:47,864 --> 00:07:50,020
역할을 하므로 그를 마음 속에 간직하십시오.

145
00:07:50,740 --> 00:07:53,300
2차원 벡터를 이 대각선 수직선에 

146
00:07:53,300 --> 00:07:55,995
직접 투영하면 사실상 2차원 벡터를 

147
00:07:55,995 --> 00:07:58,960
숫자로 변환하는 함수를 정의한 것입니다.

148
00:07:59,660 --> 00:08:01,806
게다가 이 함수는 실제로 선형입니다. 

149
00:08:01,806 --> 00:08:04,054
왜냐하면 균일하게 간격을 둔 점의 선이 

150
00:08:04,054 --> 00:08:06,302
일단 수직선에 도달하면 균일한 간격으로 

151
00:08:06,302 --> 00:08:08,960
유지된다는 시각적 테스트를 통과했기 때문입니다.

152
00:08:11,640 --> 00:08:14,104
분명히 말하자면, 이와 같이 2차원 

153
00:08:14,104 --> 00:08:16,569
공간에 수직선을 삽입했더라도 함수의 

154
00:08:16,569 --> 00:08:19,280
출력은 2차원 벡터가 아니라 숫자입니다.

155
00:08:19,960 --> 00:08:21,917
두 개의 좌표를 받아 하나의 좌표를 

156
00:08:21,917 --> 00:08:23,680
출력하는 함수를 생각해야 합니다.

157
00:08:25,060 --> 00:08:27,039
하지만 그 벡터 u-hat은 입력 

158
00:08:27,039 --> 00:08:29,020
공간에 존재하는 2차원 벡터입니다.

159
00:08:29,440 --> 00:08:31,218
그것은 단지 수직선의 삽입과 

160
00:08:31,218 --> 00:08:33,220
겹치는 방식으로 위치할 뿐입니다.

161
00:08:34,600 --> 00:08:38,200
이 투영을 통해 우리는 2차원 벡터에서 숫자로의 

162
00:08:38,200 --> 00:08:41,666
선형 변환을 정의했으므로 해당 변환을 설명하는 

163
00:08:41,666 --> 00:08:44,600
일종의 1x2 행렬을 찾을 수 있습니다.

164
00:08:45,540 --> 00:08:48,298
1x2 행렬을 찾기 위해 이 대각선 숫자선 

165
00:08:48,298 --> 00:08:50,942
설정을 확대하고 i-hat과 j-hat이 

166
00:08:50,942 --> 00:08:53,471
각각 어디에 착지하는지 생각해 봅시다. 

167
00:08:53,471 --> 00:08:56,460
착지 지점이 행렬의 열이 될 것이기 때문입니다.

168
00:08:58,480 --> 00:08:59,440
이 부분은 정말 멋지네요.

169
00:08:59,700 --> 00:09:01,220
우리는 정말 우아한 대칭 조각으로 

170
00:09:01,220 --> 00:09:02,420
그것을 추론할 수 있습니다.

171
00:09:03,020 --> 00:09:05,982
i-hat과 u-hat은 모두 단위 벡터이므로 

172
00:09:05,982 --> 00:09:09,400
u-hat을 통과하는 선에 i-hat을 투영하는 것은 

173
00:09:09,400 --> 00:09:12,590
u-hat을 x축에 투영하는 것과 완전히 대칭으로 

174
00:09:12,590 --> 00:09:13,160
보입니다.

175
00:09:13,840 --> 00:09:16,590
따라서 i-hat이 투영될 때 어떤 숫자에 

176
00:09:16,590 --> 00:09:19,225
착지하는지 묻는다면 대답은 x축에 투영될 

177
00:09:19,225 --> 00:09:22,320
때 u-hat이 착지하는 숫자와 동일할 것입니다.

178
00:09:22,920 --> 00:09:25,646
그러나 u-hat을 x축에 투영한다는 것은 

179
00:09:25,646 --> 00:09:28,600
u-hat의 x 좌표를 취하는 것을 의미합니다.

180
00:09:29,020 --> 00:09:32,497
따라서 대칭에 따라 i-hat이 대각선 수직선에 

181
00:09:32,497 --> 00:09:36,104
투영될 때 착지하는 숫자는 u-hat의 x 좌표가 

182
00:09:36,104 --> 00:09:36,620
됩니다.

183
00:09:37,160 --> 00:09:37,660
멋지지 않나요?

184
00:09:39,200 --> 00:09:41,800
j-hat 사건의 추론은 거의 동일합니다.

185
00:09:42,180 --> 00:09:43,260
잠시 생각해 보십시오.

186
00:09:49,120 --> 00:09:52,791
같은 이유로 u-hat의 y좌표는 수직선 사본에 

187
00:09:52,791 --> 00:09:56,600
투영될 때 j-hat이 도달하는 숫자를 제공합니다.

188
00:09:57,580 --> 00:09:58,720
잠시 멈춰서 생각해 보세요.

189
00:09:58,780 --> 00:10:00,200
정말 멋지다고 생각해요.

190
00:10:00,920 --> 00:10:03,868
따라서 투영 변환을 설명하는 1x2 

191
00:10:03,868 --> 00:10:07,260
행렬의 항목은 u-hat의 좌표가 됩니다.

192
00:10:08,040 --> 00:10:11,782
그리고 해당 행렬에 해당 벡터를 곱해야 하는 공간의 

193
00:10:11,782 --> 00:10:15,266
임의 벡터에 대한 이 투영 변환을 계산하는 것은 

194
00:10:15,266 --> 00:10:18,880
u-hat과 내적을 구하는 것과 계산상 동일합니다.

195
00:10:21,460 --> 00:10:24,249
이것이 단위 벡터와 내적을 취하는 것이 

196
00:10:24,249 --> 00:10:27,166
벡터를 해당 단위 벡터의 범위에 투영하고 

197
00:10:27,166 --> 00:10:30,590
길이를 취하는 것으로 해석될 수 있는 이유입니다.

198
00:10:34,030 --> 00:10:35,790
그렇다면 단위가 아닌 벡터는 어떨까요?

199
00:10:36,310 --> 00:10:38,560
예를 들어, 단위 벡터 u-hat을 사용하고 

200
00:10:38,560 --> 00:10:40,630
이를 3배로 확장한다고 가정해 보겠습니다.

201
00:10:41,350 --> 00:10:44,390
수치적으로 각 구성 요소에는 3이 곱해집니다.

202
00:10:44,810 --> 00:10:48,806
따라서 해당 벡터와 관련된 행렬을 보면 i-hat과 

203
00:10:48,806 --> 00:10:52,390
j-hat이 이전에 도달한 값의 3배가 됩니다.

204
00:10:55,230 --> 00:10:58,261
이것은 모두 선형이기 때문에 더 일반적으로 새로운 

205
00:10:58,261 --> 00:11:01,293
행렬은 모든 벡터를 수직선 복사본에 투영하고 해당 

206
00:11:01,293 --> 00:11:04,000
위치에 3을 곱하는 것으로 해석될 수 있음을 

207
00:11:04,000 --> 00:11:04,650
의미합니다.

208
00:11:05,470 --> 00:11:08,470
이것이 단위가 아닌 벡터의 내적이 먼저 해당 

209
00:11:08,470 --> 00:11:11,590
벡터에 투영된 다음 해당 투영의 길이를 벡터의 

210
00:11:11,590 --> 00:11:14,950
길이로 확장하는 것으로 해석될 수 있는 이유입니다.

211
00:11:17,590 --> 00:11:19,550
여기서 무슨 일이 일어났는지 잠시 생각해 보세요.

212
00:11:19,890 --> 00:11:22,464
우리는 2D 공간에서 수직선으로의 선형 

213
00:11:22,464 --> 00:11:25,272
변환을 수행했는데, 이는 수치 벡터나 수치 

214
00:11:25,272 --> 00:11:27,847
내적의 관점에서 정의되지 않고 수직선의 

215
00:11:27,847 --> 00:11:30,890
대각선 복사본에 공간을 투영하여 정의되었습니다.

216
00:11:31,670 --> 00:11:34,495
그러나 변환이 선형이기 때문에 필연적으로 

217
00:11:34,495 --> 00:11:36,830
일부 1x2 행렬로 설명되었습니다.

218
00:11:37,330 --> 00:11:40,739
그리고 1x2 행렬에 2D 벡터를 곱하는 것은 해당 

219
00:11:40,739 --> 00:11:44,148
행렬을 옆으로 돌려 내적을 취하는 것과 같기 때문에 

220
00:11:44,148 --> 00:11:47,204
이 변환은 불가피하게 일부 2D 벡터와 관련이 

221
00:11:47,204 --> 00:11:47,910
있었습니다.

222
00:11:49,410 --> 00:11:52,658
여기서 얻을 수 있는 교훈은 출력 공간이 수직선인 

223
00:11:52,658 --> 00:11:55,791
이러한 선형 변환 중 하나가 있을 때마다 그것이 

224
00:11:55,791 --> 00:11:58,924
어떻게 정의되었는지에 관계없이 변환을 적용한다는 

225
00:11:58,924 --> 00:12:02,405
의미에서 해당 변환에 해당하는 고유한 벡터 v가 있을 

226
00:12:02,405 --> 00:12:05,769
것이라는 점입니다. 해당 벡터로 내적을 취하는 것과 

227
00:12:05,769 --> 00:12:06,350
같습니다.

228
00:12:09,930 --> 00:12:12,030
나에게 이것은 정말 아름답습니다.

229
00:12:12,730 --> 00:12:15,390
이것은 수학에서 이중성이라고 불리는 것의 예입니다.

230
00:12:16,270 --> 00:12:19,099
이중성은 수학 전반에 걸쳐 다양한 방식과 형태로 

231
00:12:19,099 --> 00:12:21,930
나타나며 실제로 정의하는 것은 매우 까다롭습니다.

232
00:12:22,670 --> 00:12:24,986
느슨하게 말하면, 두 가지 유형의 

233
00:12:24,986 --> 00:12:27,425
수학적 사물 사이에 자연스러우면서도 

234
00:12:27,425 --> 00:12:30,230
놀라운 대응 관계가 있는 상황을 말합니다.

235
00:12:31,010 --> 00:12:33,262
방금 배운 선형 대수학의 경우, 

236
00:12:33,262 --> 00:12:36,641
벡터의 쌍대(dual)는 그것이 인코딩하는 선형 

237
00:12:36,641 --> 00:12:39,769
변환이고, 일부 공간에서 한 차원으로의 선형 

238
00:12:39,769 --> 00:12:43,398
변환의 쌍대(dual)는 해당 공간의 특정 벡터라고 

239
00:12:43,398 --> 00:12:44,650
말할 수 있습니다.

240
00:12:46,730 --> 00:12:49,837
요약하자면, 내적은 투영을 이해하고 벡터가 

241
00:12:49,837 --> 00:12:52,944
같은 방향을 가리키는 경향이 있는지 여부를 

242
00:12:52,944 --> 00:12:56,310
테스트하는 데 매우 유용한 기하학적 도구입니다.

243
00:12:56,970 --> 00:12:58,657
그리고 그것은 아마도 내적에 관해 

244
00:12:58,657 --> 00:13:00,790
여러분이 기억해야 할 가장 중요한 것입니다.

245
00:13:01,270 --> 00:13:04,500
그러나 더 깊은 수준에서 두 벡터를 함께 점으로 찍는 

246
00:13:04,500 --> 00:13:07,730
것은 그 중 하나를 변환의 세계로 변환하는 방법입니다.

247
00:13:08,670 --> 00:13:10,270
다시 말하지만, 이는 수치적으로 강조하기에는 

248
00:13:10,270 --> 00:13:11,550
어리석은 점처럼 느껴질 수 있습니다.

249
00:13:11,670 --> 00:13:14,490
유사해 보이는 것은 단지 두 가지 계산일 뿐입니다.

250
00:13:14,490 --> 00:13:17,610
하지만 제가 이것이 중요하다고 생각하는 이유는 

251
00:13:17,610 --> 00:13:20,850
수학 전반에 걸쳐 벡터를 다룰 때 벡터의 성격을 

252
00:13:20,850 --> 00:13:24,090
실제로 알게 되면 때로는 벡터를 공간의 화살표가 

253
00:13:24,090 --> 00:13:27,089
아니라 벡터로 이해하는 것이 더 쉽다는 것을 

254
00:13:27,089 --> 00:13:30,090
깨닫기 때문입니다. 선형 변환의 물리적 구현.

255
00:13:30,730 --> 00:13:33,401
이는 마치 벡터가 실제로 특정 변환에 대한 

256
00:13:33,401 --> 00:13:35,404
개념적 약칭인 것처럼 보입니다. 

257
00:13:35,404 --> 00:13:37,853
공간 전체를 수직선으로 이동하는 것보다 

258
00:13:37,853 --> 00:13:40,970
공간의 화살표를 생각하는 것이 더 쉽기 때문입니다.

259
00:13:42,610 --> 00:13:44,432
다음 비디오에서는 교차곱에 대해 

260
00:13:44,432 --> 00:13:46,760
이야기하면서 이 이중성이 실제로 작동하는 

261
00:13:46,760 --> 00:13:49,190
또 다른 정말 멋진 예를 보게 될 것입니다.

