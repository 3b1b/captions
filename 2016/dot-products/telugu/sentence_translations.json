[
 {
  "input": "Traditionally, dot products are something that's introduced really early on in a linear algebra course, typically right at the start.",
  "translatedText": "[బీథోవెన్ రచించిన &quot;ఓడ్ టు జాయ్&quot;, పియానో చివరి వరకు ప్లే చేస్తుంది. ] సాంప్రదాయకంగా, డాట్ ఉత్పత్తులు అనేది ఒక సరళ బీజగణిత కోర్సులో చాలా ప్రారంభంలో పరిచయం చేయబడినవి, సాధారణంగా ప్రారంభంలోనే.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 16.58,
  "end": 26.3
 },
 {
  "input": "So it might seem strange that I've pushed them back this far in the series.",
  "translatedText": "కాబట్టి నేను వారిని సిరీస్‌లో ఇంత దూరం వెనక్కి నెట్టడం వింతగా అనిపించవచ్చు.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 26.64,
  "end": 29.58
 },
 {
  "input": "I did this because there's a standard way to introduce the topic, which requires nothing more than a basic understanding of vectors, but a fuller understanding of the role that dot products play in math can only really be found under the light of linear transformations.",
  "translatedText": "టాపిక్‌ని పరిచయం చేయడానికి ప్రామాణిక మార్గం ఉన్నందున నేను దీన్ని చేసాను, దీనికి వెక్టర్స్‌పై ప్రాథమిక అవగాహన తప్ప మరేమీ అవసరం లేదు, అయితే గణితంలో డాట్ ఉత్పత్తులు పోషించే పాత్రపై పూర్తి అవగాహన నిజంగా సరళ పరివర్తనల వెలుగులో మాత్రమే కనుగొనబడుతుంది.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 29.58,
  "end": 42.44
 },
 {
  "input": "Before that, though, let me just briefly cover the standard way that dot products are introduced, which I'm assuming is at least partially review for a number of viewers.",
  "translatedText": "అయితే, దీనికి ముందు, డాట్ ఉత్పత్తులను ప్రవేశపెట్టిన ప్రామాణిక మార్గాన్ని నేను క్లుప్తంగా వివరిస్తాను, ఇది చాలా మంది వీక్షకుల కోసం కనీసం పాక్షికంగా సమీక్షించబడుతుందని నేను ఊహిస్తున్నాను.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 43.48,
  "end": 50.62
 },
 {
  "input": "Numerically, if you have two vectors of the same dimension, two lists of numbers with the same lengths, taking their dot product means pairing up all of the coordinates, multiplying those pairs together, and adding the result.",
  "translatedText": "సంఖ్యాపరంగా, మీరు ఒకే పరిమాణంలో ఉన్న రెండు వెక్టర్‌లను కలిగి ఉంటే, ఒకే పొడవుతో ఉన్న సంఖ్యల రెండు జాబితాలు, వాటి చుక్కల ఉత్పత్తిని తీసుకోవడం అంటే అన్ని కోఆర్డినేట్‌లను జత చేయడం, ఆ జతలను కలిపి గుణించడం మరియు ఫలితాన్ని జోడించడం.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 51.44,
  "end": 64.98
 },
 {
  "input": "So the vector 1, 2 dotted with 3, 4 would be 1 times 3 plus 2 times 4.",
  "translatedText": "కాబట్టి వెక్టార్ 1, 2 3, 4 చుక్కలు 1 సార్లు 3 ప్లస్ 2 సార్లు 4 అవుతుంది.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 66.86,
  "end": 73.18
 },
 {
  "input": "The vector 6, 2, 8, 3 dotted with 1, 8, 5, 3 would be 6 times 1 plus 2 times 8 plus 8 times 5 plus 3 times 3.",
  "translatedText": "వెక్టార్ 6, 2, 8, 3 1, 8, 5, 3 చుక్కలు 6 సార్లు 1 ప్లస్ 2 సార్లు 8 ప్లస్ 8 సార్లు 5 ప్లస్ 3 సార్లు 3 అవుతుంది.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 74.58,
  "end": 83.72
 },
 {
  "input": "Luckily, this computation has a really nice geometric interpretation.",
  "translatedText": "అదృష్టవశాత్తూ, ఈ గణన నిజంగా మంచి రేఖాగణిత వివరణను కలిగి ఉంది.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 84.74,
  "end": 88.66
 },
 {
  "input": "To think about the dot product between two vectors, v and w, imagine projecting w onto the line that passes through the origin and the tip of v.",
  "translatedText": "రెండు వెక్టర్స్, v మరియు w మధ్య డాట్ ఉత్పత్తి గురించి ఆలోచించడానికి, v యొక్క మూలం మరియు కొన గుండా వెళ్ళే రేఖపై w ప్రొజెక్ట్ చేయడాన్ని ఊహించండి.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 89.34,
  "end": 97.98
 },
 {
  "input": "Multiplying the length of this projection by the length of v, you have the dot product v dot w.",
  "translatedText": "ఈ ప్రొజెక్షన్ పొడవును v పొడవుతో గుణిస్తే, మీరు డాట్ ఉత్పత్తి v డాట్ wని కలిగి ఉంటారు.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 98.78,
  "end": 104.46
 },
 {
  "input": "Except when this projection of w is pointing in the opposite direction from v, that dot product will actually be negative.",
  "translatedText": "ఈ w యొక్క ప్రొజెక్షన్ v నుండి వ్యతిరేక దిశలో చూపుతున్నప్పుడు తప్ప, ఆ డాట్ ఉత్పత్తి వాస్తవానికి ప్రతికూలంగా ఉంటుంది.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 106.42,
  "end": 112.16
 },
 {
  "input": "So when two vectors are generally pointing in the same direction, their dot product is positive.",
  "translatedText": "కాబట్టి రెండు వెక్టర్‌లు సాధారణంగా ఒకే దిశలో చూపుతున్నప్పుడు, వాటి డాట్ ఉత్పత్తి సానుకూలంగా ఉంటుంది.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 113.72,
  "end": 117.86
 },
 {
  "input": "When they're perpendicular, meaning the projection of one onto the other is the zero vector, their dot product is zero.",
  "translatedText": "అవి లంబంగా ఉన్నప్పుడు, ఒకదానిపై మరొకటి ప్రొజెక్షన్ అంటే సున్నా వెక్టర్, వాటి డాట్ ఉత్పత్తి సున్నా.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 119.24,
  "end": 125.56
 },
 {
  "input": "And if they point in generally the opposite direction, their dot product is negative.",
  "translatedText": "మరియు వారు సాధారణంగా వ్యతిరేక దిశలో సూచించినట్లయితే, వారి డాట్ ఉత్పత్తి ప్రతికూలంగా ఉంటుంది.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 125.98,
  "end": 129.6
 },
 {
  "input": "Now, this interpretation is weirdly asymmetric.",
  "translatedText": "ఇప్పుడు, ఈ వివరణ విచిత్రంగా అసమానమైనది.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 131.62,
  "end": 134.56
 },
 {
  "input": "It treats the two vectors very differently.",
  "translatedText": "ఇది రెండు వెక్టర్‌లను చాలా భిన్నంగా పరిగణిస్తుంది.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 134.8,
  "end": 136.5
 },
 {
  "input": "So when I first learned this, I was surprised that order doesn't matter.",
  "translatedText": "కాబట్టి నేను దీన్ని మొదట తెలుసుకున్నప్పుడు, ఆర్డర్ పట్టింపు లేదని నేను ఆశ్చర్యపోయాను.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 136.88,
  "end": 140.0
 },
 {
  "input": "You could instead project v onto w, multiply the length of the projected v by the length of w, and get the same result.",
  "translatedText": "మీరు బదులుగా w పై v ని ప్రొజెక్ట్ చేయవచ్చు, ప్రొజెక్ట్ చేయబడిన v యొక్క పొడవును w పొడవుతో గుణించండి మరియు అదే ఫలితాన్ని పొందవచ్చు.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 140.96,
  "end": 148.22
 },
 {
  "input": "I mean, doesn't that feel like a really different process?",
  "translatedText": "నా ఉద్దేశ్యం, ఇది నిజంగా భిన్నమైన ప్రక్రియగా అనిపించలేదా?",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 150.4,
  "end": 152.84
 },
 {
  "input": "Here's the intuition for why order doesn't matter.",
  "translatedText": "ఆర్డర్ ఎందుకు పట్టింపు లేదు అనేదానికి ఇక్కడ అంతర్ దృష్టి ఉంది.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 155.32,
  "end": 157.76
 },
 {
  "input": "If v and w happened to have the same length, we could leverage some symmetry.",
  "translatedText": "v మరియు w ఒకే పొడవు కలిగి ఉంటే, మనం కొంత సమరూపతను ఉపయోగించుకోవచ్చు.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 158.44,
  "end": 162.18
 },
 {
  "input": "Since projecting w onto v, then multiplying the length of that projection by the length of v, is a complete mirror image of projecting v onto w, then multiplying the length of that projection by the length of w.",
  "translatedText": "w మీదకి w ప్రొజెక్ట్ చేయడం వలన, ఆ ప్రొజెక్షన్ యొక్క పొడవును v పొడవుతో గుణించడం, v పై ప్రొజెక్ట్ చేసే పూర్తి అద్దం చిత్రం, ఆ ప్రొజెక్షన్ పొడవును w పొడవుతో గుణించడం.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 163.08,
  "end": 175.24
 },
 {
  "input": "Now, if you scale one of them, say v, by some constant like 2, so that they don't have equal length, the symmetry is broken.",
  "translatedText": "ఇప్పుడు, మీరు వాటిలో ఒకదానిని స్కేల్ చేస్తే, 2 వంటి స్థిరాంకం ద్వారా v అని చెప్పండి, తద్వారా అవి సమాన పొడవును కలిగి ఉండవు, సమరూపత విచ్ఛిన్నమవుతుంది.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 177.28,
  "end": 184.36
 },
 {
  "input": "But let's think through how to interpret the dot product between this new vector, 2 times v, and w.",
  "translatedText": "అయితే ఈ కొత్త వెక్టర్, 2 సార్లు v మరియు w మధ్య డాట్ ఉత్పత్తిని ఎలా అర్థం చేసుకోవాలో ఆలోచిద్దాం.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 185.02,
  "end": 190.04
 },
 {
  "input": "If you think of w as getting projected onto v, then the dot product 2v dot w will be exactly twice the dot product v dot w.",
  "translatedText": "మీరు w పై ప్రొజెక్ట్ చేయబడుతుందని అనుకుంటే, అప్పుడు డాట్ ఉత్పత్తి 2v డాట్ w డాట్ ఉత్పత్తి v డాట్ w కంటే రెట్టింపు అవుతుంది.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 190.88,
  "end": 199.72
 },
 {
  "input": "This is because when you scale v by 2, it doesn't change the length of the projection of w, but it doubles the length of the vector that you're projecting onto.",
  "translatedText": "ఎందుకంటే మీరు vని 2 ద్వారా స్కేల్ చేసినప్పుడు, అది w యొక్క ప్రొజెక్షన్ పొడవును మార్చదు, కానీ మీరు ప్రొజెక్ట్ చేస్తున్న వెక్టార్ పొడవును రెట్టింపు చేస్తుంది.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 200.46,
  "end": 209.52
 },
 {
  "input": "But on the other hand, let's say you were thinking about v getting projected onto w.",
  "translatedText": "కానీ మరోవైపు, మీరు v పై అంచనా వేయడం గురించి ఆలోచిస్తున్నారనుకుందాం.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 210.46,
  "end": 214.2
 },
 {
  "input": "Well, in that case, the length of the projection is the thing that gets scaled when we multiply v by 2, but the length of the vector that you're projecting onto stays constant.",
  "translatedText": "సరే, అలాంటప్పుడు, ప్రొజెక్షన్ పొడవు అనేది మనం vని 2తో గుణించినప్పుడు స్కేల్ చేయబడే అంశం, కానీ మీరు ప్రొజెక్ట్ చేస్తున్న వెక్టార్ పొడవు స్థిరంగా ఉంటుంది.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 214.9,
  "end": 223.0
 },
 {
  "input": "So the overall effect is still to just double the dot product.",
  "translatedText": "కాబట్టి మొత్తం ప్రభావం ఇప్పటికీ డాట్ ఉత్పత్తిని రెట్టింపు చేస్తుంది.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 223.0,
  "end": 226.66
 },
 {
  "input": "So even though symmetry is broken in this case, the effect that this scaling has on the value of the dot product is the same under both interpretations.",
  "translatedText": "కాబట్టి ఈ సందర్భంలో సమరూపత విచ్ఛిన్నమైనప్పటికీ, ఈ స్కేలింగ్ డాట్ ఉత్పత్తి యొక్క విలువపై చూపే ప్రభావం రెండు వివరణల క్రింద ఒకే విధంగా ఉంటుంది.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 227.28,
  "end": 234.86
 },
 {
  "input": "There's also one other big question that confused me when I first learned this stuff.",
  "translatedText": "నేను ఈ విషయాన్ని మొదట తెలుసుకున్నప్పుడు నన్ను గందరగోళానికి గురిచేసిన మరొక పెద్ద ప్రశ్న కూడా ఉంది.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 236.64,
  "end": 240.34
 },
 {
  "input": "Why on earth does this numerical process of matching coordinates, multiplying pairs, and adding them together have anything to do with projection?",
  "translatedText": "భూమ్మీద ఎందుకు కోఆర్డినేట్‌లను సరిపోల్చడం, జతలను గుణించడం మరియు వాటిని జోడించడం వంటి ఈ సంఖ్యా ప్రక్రియకు ప్రొజెక్షన్‌తో సంబంధం ఉందా?",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 240.84,
  "end": 248.74
 },
 {
  "input": "Well, to give a satisfactory answer, and also to do full justice to the significance of the dot product, we need to unearth something a little bit deeper going on here, which often goes by the name duality.",
  "translatedText": "సరే, సంతృప్తికరమైన సమాధానం ఇవ్వడానికి మరియు డాట్ ఉత్పత్తి యొక్క ప్రాముఖ్యతకు పూర్తి న్యాయం చేయడానికి, మనం ఇక్కడ ద్వంద్వత్వం అనే పేరుతో జరిగే కొంచెం లోతుగా ఏదో వెలికితీయాలి.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 250.64,
  "end": 261.4
 },
 {
  "input": "But before getting into that, I need to spend some time talking about linear transformations from multiple dimensions to one dimension, which is just the number line.",
  "translatedText": "కానీ దానిలోకి ప్రవేశించే ముందు, నేను బహుళ కొలతలు నుండి ఒక కోణానికి సరళ పరివర్తనల గురించి కొంత సమయం గడపాలి, ఇది కేవలం సంఖ్యా రేఖ మాత్రమే.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 262.14,
  "end": 270.04
 },
 {
  "input": "These are functions that take in a 2D vector and spit out some number, but linear transformations are of course much more restricted than your run-of-the-mill function with a 2D input and a 1D output.",
  "translatedText": "ఇవి 2d వెక్టార్‌ను తీసుకొని కొంత సంఖ్యను ఉమ్మివేసే ఫంక్షన్‌లు, అయితే 2d ఇన్‌పుట్ మరియు 1d అవుట్‌పుట్‌తో మీ రన్-ఆఫ్-ది-మిల్ ఫంక్షన్ కంటే లీనియర్ ట్రాన్స్‌ఫార్మేషన్‌లు చాలా పరిమితం చేయబడ్డాయి.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 272.42,
  "end": 282.3
 },
 {
  "input": "As with transformations in higher dimensions, like the ones I talked about in chapter 3, there are some formal properties that make these functions linear, but I'm going to purposefully ignore those here so as to not distract from our end goal, and instead focus on a certain visual property that's equivalent to all the formal stuff.",
  "translatedText": "అధ్యాయం 3లో నేను మాట్లాడిన వాటిలాగా, ఉన్నత పరిమాణాలలో పరివర్తనల మాదిరిగానే, ఈ ఫంక్షన్‌లను సరళంగా చేసే కొన్ని అధికారిక లక్షణాలు ఉన్నాయి, కానీ మా అంతిమ లక్ష్యం నుండి దృష్టి మరల్చకుండా ఉండటానికి నేను ఉద్దేశపూర్వకంగా ఇక్కడ వాటిని విస్మరించబోతున్నాను. అన్ని అధికారిక అంశాలకు సమానమైన నిర్దిష్ట దృశ్యమాన ఆస్తిపై దృష్టి పెట్టండి.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 283.02,
  "end": 298.26
 },
 {
  "input": "If you take a line of evenly spaced dots and apply a transformation, a linear transformation will keep those dots evenly spaced once they land in the output space, which is the number line.",
  "translatedText": "మీరు సమాన అంతరం ఉన్న చుక్కల పంక్తిని తీసుకొని, పరివర్తనను వర్తింపజేస్తే, ఒక సరళ పరివర్తన ఆ చుక్కలను అవుట్‌పుట్ స్థలంలో ల్యాండ్ చేసిన తర్వాత వాటిని సమానంగా ఉంచుతుంది, ఇది సంఖ్యా రేఖ.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 299.04,
  "end": 311.28
 },
 {
  "input": "Otherwise, if there's some line of dots that gets unevenly spaced, then your transformation is not linear.",
  "translatedText": "లేకపోతే, అసమానంగా ఖాళీగా ఉండే కొన్ని చుక్కల వరుస ఉంటే, మీ పరివర్తన సరళంగా ఉండదు.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 312.42,
  "end": 317.14
 },
 {
  "input": "As with the cases we've seen before, one of these linear transformations is completely determined by where it takes i-hat and j-hat, but this time each one of those basis vectors just lands on a number, so when we record where they land as the columns of a matrix, each of those columns just has a single number.",
  "translatedText": "మనం ఇంతకు ముందు చూసిన కేసుల మాదిరిగానే, ఈ లీనియర్ ట్రాన్స్‌ఫార్మేషన్‌లలో ఒకటి అది i-hat మరియు j-hatని ఎక్కడ తీసుకుంటుందో పూర్తిగా నిర్ణయించబడుతుంది, అయితే ఈసారి ఆ ప్రాతిపదిక వెక్టర్‌లలో ప్రతి ఒక్కటి ఒక సంఖ్యపై ల్యాండ్ అవుతుంది, కాబట్టి మనం ఎక్కడ రికార్డ్ చేసినప్పుడు అవి మాతృక యొక్క నిలువు వరుసలుగా ఉంటాయి, ఆ నిలువు వరుసలలో ప్రతి ఒక్కటి ఒకే సంఖ్యను కలిగి ఉంటుంది.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 319.22,
  "end": 336.82
 },
 {
  "input": "This is a 1x2 matrix.",
  "translatedText": "ఇది 1x2 మాతృక.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 338.46,
  "end": 339.84
 },
 {
  "input": "Let's walk through an example of what it means to apply one of these transformations to a vector.",
  "translatedText": "వెక్టర్‌కు ఈ పరివర్తనలలో ఒకదాన్ని వర్తింపజేయడం అంటే ఏమిటో ఒక ఉదాహరణ ద్వారా చూద్దాం.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 341.86,
  "end": 345.66
 },
 {
  "input": "Let's say you have a linear transformation that takes i-hat to 1 and j-hat to negative 2.",
  "translatedText": "మీరు i-hatని 1కి మరియు j-hatని నెగెటివ్ 2కి తీసుకునే సరళ పరివర్తనను కలిగి ఉన్నారని అనుకుందాం.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 346.38,
  "end": 351.68
 },
 {
  "input": "To follow where a vector with coordinates, say, 4, 3 ends up, think of breaking up this vector as 4 times i-hat plus 3 times j-hat.",
  "translatedText": "కోఆర్డినేట్‌లతో ఉన్న వెక్టార్‌ని అనుసరించడానికి, 4, 3 ముగుస్తుంది, ఈ వెక్టర్‌ను 4 సార్లు i-hat ప్లస్ 3 సార్లు j-hatగా విభజించడం గురించి ఆలోచించండి.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 352.42,
  "end": 361.02
 },
 {
  "input": "A consequence of linearity is that after the transformation, the vector will be 4 times the place where i-hat lands, 1, plus 3 times the place where j-hat lands, negative 2, which in this case implies that it lands on negative 2.",
  "translatedText": "రేఖీయత యొక్క పరిణామం ఏమిటంటే, పరివర్తన తర్వాత, వెక్టార్ i-hat దిగిన ప్రదేశానికి 4 రెట్లు ఉంటుంది, 1, మరియు j-hat ల్యాండ్ అయ్యే ప్రదేశానికి 3 రెట్లు, నెగెటివ్ 2, ఈ సందర్భంలో అది ప్రతికూలంగా ల్యాండ్ అవుతుందని సూచిస్తుంది. 2.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 361.84,
  "end": 375.78
 },
 {
  "input": "When you do this calculation purely numerically, it's matrix vector multiplication.",
  "translatedText": "మీరు ఈ గణనను పూర్తిగా సంఖ్యాపరంగా చేసినప్పుడు, అది మాతృక వెక్టర్ గుణకారం.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 378.02,
  "end": 382.36
 },
 {
  "input": "Now, this numerical operation of multiplying a 1x2 matrix by a vector feels just like taking the dot product of two vectors.",
  "translatedText": "ఇప్పుడు, 1x2 మాతృకను వెక్టర్ ద్వారా గుణించడం యొక్క ఈ సంఖ్యాపరమైన ఆపరేషన్ రెండు వెక్టర్‌ల యొక్క డాట్ ఉత్పత్తిని తీసుకున్నట్లుగా అనిపిస్తుంది.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 385.7,
  "end": 392.86
 },
 {
  "input": "Doesn't that 1x2 matrix just look like a vector that we tipped on its side?",
  "translatedText": "ఆ 1x2 మాతృక కేవలం మనం దాని వైపు తిప్పిన వెక్టర్ లాగా కనిపించడం లేదా?",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 393.46,
  "end": 396.8
 },
 {
  "input": "In fact, we could say right now that there's a nice association between 1x2 matrices and 2D vectors, defined by tilting the numerical representation of a vector on its side to get the associated matrix, or to tip the matrix back up to get the associated vector.",
  "translatedText": "వాస్తవానికి, 1x2 మాత్రికలు మరియు 2D వెక్టర్‌ల మధ్య మంచి అనుబంధం ఉందని, అనుబంధిత మాత్రికను పొందడానికి వెక్టర్ యొక్క సంఖ్యా ప్రాతినిధ్యాన్ని దాని వైపుకు వంచి లేదా అనుబంధిత వెక్టర్‌ను పొందడానికి మ్యాట్రిక్స్‌ను తిరిగి పైకి తిప్పడం ద్వారా నిర్వచించబడిందని మేము ఇప్పుడే చెప్పగలం.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 397.96,
  "end": 412.58
 },
 {
  "input": "Since we're just looking at numerical expressions right now, going back and forth between vectors and 1x2 matrices might feel like a silly thing to do.",
  "translatedText": "మేము ప్రస్తుతం సంఖ్యా వ్యక్తీకరణలను చూస్తున్నాము కాబట్టి, వెక్టర్స్ మరియు 1x2 మాత్రికల మధ్య ముందుకు వెనుకకు వెళ్లడం ఒక వెర్రి పనిలా అనిపించవచ్చు.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 413.56,
  "end": 420.86
 },
 {
  "input": "But this suggests something that's truly awesome from the geometric view.",
  "translatedText": "కానీ ఇది రేఖాగణిత వీక్షణ నుండి నిజంగా అద్భుతమైనది అని సూచిస్తుంది.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 421.46,
  "end": 425.12
 },
 {
  "input": "There's some kind of connection between linear transformations that take vectors to numbers and vectors themselves.",
  "translatedText": "వెక్టర్‌లను సంఖ్యలకు మరియు వెక్టర్‌లకు తీసుకెళ్లే సరళ పరివర్తనల మధ్య ఒక రకమైన కనెక్షన్ ఉంది.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 425.38,
  "end": 431.72
 },
 {
  "input": "Let me show an example that clarifies the significance, and which just so happens to also answer the dot product puzzle from earlier.",
  "translatedText": "నేను ప్రాముఖ్యతను స్పష్టం చేసే ఒక ఉదాహరణను చూపుతాను మరియు ఇంతకు ముందు నుండి డాట్ ఉత్పత్తి పజిల్‌కు సమాధానం ఇవ్వడానికి కూడా ఇది జరుగుతుంది.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 434.78,
  "end": 441.38
 },
 {
  "input": "Unlearn what you have learned, and imagine that you don't already know that the dot product relates to projection.",
  "translatedText": "మీరు నేర్చుకున్న వాటిని తెలుసుకోండి మరియు డాట్ ఉత్పత్తి ప్రొజెక్షన్‌కు సంబంధించినదని మీకు ఇప్పటికే తెలియదని ఊహించుకోండి.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 442.14,
  "end": 447.18
 },
 {
  "input": "What I'm going to do here is take a copy of the number line and place it diagonally in space somehow, with the number 0 sitting at the origin.",
  "translatedText": "నేను ఇక్కడ చేయబోయేది సంఖ్య రేఖ యొక్క కాపీని తీసుకొని దానిని వికర్ణంగా అంతరిక్షంలో ఎలాగైనా ఉంచడం, మూలం వద్ద కూర్చున్న సంఖ్య 0.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 448.86,
  "end": 456.06
 },
 {
  "input": "Now think of the two-dimensional unit vector whose tip sits where the number 1 on the number is.",
  "translatedText": "ఇప్పుడు ద్విమితీయ యూనిట్ వెక్టార్ గురించి ఆలోచించండి, దాని చిట్కా సంఖ్య రేఖపై సంఖ్య 1 ఉన్న చోట ఉంటుంది.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 456.9,
  "end": 461.92
 },
 {
  "input": "I want to give that guy a name, u-hat.",
  "translatedText": "నేను ఆ వ్యక్తికి U-hat అనే పేరు పెట్టాలనుకుంటున్నాను.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 462.4,
  "end": 464.56
 },
 {
  "input": "This little guy plays an important role in what's about to happen, so just keep him in the back of your mind.",
  "translatedText": "ఈ చిన్న వ్యక్తి జరగబోయే దానిలో ముఖ్యమైన పాత్ర పోషిస్తాడు, కాబట్టి అతనిని మీ మనస్సులో ఉంచుకోండి.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 465.62,
  "end": 470.02
 },
 {
  "input": "If we project 2d vectors straight onto this diagonal number line, in effect, we've just defined a function that takes 2d vectors to numbers.",
  "translatedText": "మేము ఈ వికర్ణ సంఖ్య రేఖపై నేరుగా 2D వెక్టర్‌లను ప్రొజెక్ట్ చేస్తే, మేము 2D వెక్టర్‌లను సంఖ్యలకు తీసుకెళ్లే ఫంక్షన్‌ను నిర్వచించాము.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 470.74,
  "end": 478.96
 },
 {
  "input": "What's more, this function is actually linear, since it passes our visual test that any line of evenly spaced dots remains evenly spaced once it lands on the number line.",
  "translatedText": "ఇంకా ఏమిటంటే, ఈ ఫంక్షన్ వాస్తవానికి సరళంగా ఉంటుంది, ఎందుకంటే ఇది మా దృశ్య పరీక్షలో ఉత్తీర్ణత సాధిస్తుంది, ఇది సంఖ్యా రేఖపైకి వచ్చిన తర్వాత సమానమైన ఖాళీ చుక్కల యొక్క ఏదైనా పంక్తి సమానంగా ఖాళీగా ఉంటుంది.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 479.66,
  "end": 488.96
 },
 {
  "input": "Just to be clear, even though I've embedded the number line in 2d space like this, the outputs of the function are numbers, not 2d vectors.",
  "translatedText": "స్పష్టంగా చెప్పాలంటే, నేను ఈ విధంగా 2D స్పేస్‌లో నంబర్ లైన్‌ను పొందుపరిచినప్పటికీ, ఫంక్షన్ యొక్క అవుట్‌పుట్‌లు సంఖ్యలు, 2D వెక్టర్స్ కాదు.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 491.64,
  "end": 499.28
 },
 {
  "input": "You should think of a function that takes in two coordinates and outputs a single coordinate.",
  "translatedText": "మీరు రెండు కోఆర్డినేట్‌లను తీసుకొని ఒకే కోఆర్డినేట్‌ను అవుట్‌పుట్ చేసే ఫంక్షన్ గురించి ఆలోచించాలి.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 499.96,
  "end": 503.68
 },
 {
  "input": "But that vector u-hat is a two-dimensional vector, living in the input space.",
  "translatedText": "కానీ ఆ వెక్టార్ U-టోపీ అనేది ఇన్‌పుట్ స్పేస్‌లో నివసిస్తున్న ద్విమితీయ వెక్టార్.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 505.06,
  "end": 509.02
 },
 {
  "input": "It's just situated in such a way that overlaps with the embedding of the number line.",
  "translatedText": "ఇది కేవలం సంఖ్య రేఖను పొందుపరచడంతో అతివ్యాప్తి చెందే విధంగా ఉంది.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 509.44,
  "end": 513.22
 },
 {
  "input": "With this projection, we just defined a linear transformation from 2d vectors to numbers, so we're going to be able to find some kind of 1x2 matrix that describes that transformation.",
  "translatedText": "ఈ ప్రొజెక్షన్‌తో, మేము 2D వెక్టర్స్ నుండి నంబర్‌లకు సరళ పరివర్తనను నిర్వచించాము, కాబట్టి మేము ఆ పరివర్తనను వివరించే ఒక రకమైన 1x2 మాతృకను కనుగొనగలుగుతాము.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 514.6,
  "end": 524.6
 },
 {
  "input": "To find that 1x2 matrix, let's zoom in on this diagonal number line setup and think about where i-hat and j-hat each land, since those landing spots are going to be the columns of the matrix.",
  "translatedText": "ఆ 1x2 మ్యాట్రిక్స్‌ని కనుగొనడానికి, ఈ వికర్ణ సంఖ్య రేఖ సెటప్‌లో జూమ్ చేద్దాం మరియు I-hat మరియు J-hat ప్రతి ల్యాండ్‌ను ఎక్కడ ఉంచాలో ఆలోచిద్దాం, ఎందుకంటే ఆ ల్యాండింగ్ స్పాట్‌లు మ్యాట్రిక్స్ యొక్క నిలువు వరుసలుగా ఉంటాయి.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 525.54,
  "end": 536.46
 },
 {
  "input": "This part's super cool.",
  "translatedText": "ఈ భాగం చాలా బాగుంది.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 538.48,
  "end": 539.44
 },
 {
  "input": "We can reason through it with a really elegant piece of symmetry.",
  "translatedText": "మేము దాని ద్వారా నిజంగా సొగసైన సమరూపతతో తర్కించవచ్చు.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 539.7,
  "end": 542.42
 },
 {
  "input": "Since i-hat and u-hat are both unit vectors, projecting i-hat onto the line passing through u-hat looks totally symmetric to projecting u-hat onto the x-axis.",
  "translatedText": "I-hat మరియు U-hat రెండూ యూనిట్ వెక్టర్‌లు కాబట్టి, U-hat గుండా వెళుతున్న లైన్‌పై I-hatని ప్రొజెక్ట్ చేయడం U-hatని x-యాక్సిస్‌పై ప్రొజెక్ట్ చేయడానికి పూర్తిగా సౌష్టవంగా కనిపిస్తుంది.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 543.02,
  "end": 553.16
 },
 {
  "input": "So when we ask what number does i-hat land on when it gets projected, the answer is going to be the same as whatever u-hat lands on when it's projected onto the x-axis.",
  "translatedText": "ఐ-హాట్ ప్రొజెక్ట్ చేయబడినప్పుడు అది ఏ సంఖ్యలో ల్యాండ్ అవుతుంది అని మనం అడిగినప్పుడు, x-యాక్సిస్‌పై ప్రొజెక్ట్ చేయబడినప్పుడు ఏ U-hat ల్యాండ్ అవుతుందో అదే సమాధానం వస్తుంది.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 553.84,
  "end": 562.32
 },
 {
  "input": "But projecting u-hat onto the x-axis just means taking the x-coordinate of u-hat.",
  "translatedText": "కానీ x-యాక్సిస్‌పై U-టోపీని ప్రొజెక్ట్ చేయడం అంటే U-hat యొక్క x-కోఆర్డినేట్ తీసుకోవడం.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 562.92,
  "end": 568.6
 },
 {
  "input": "So by symmetry, the number where i-hat lands when it's projected onto that diagonal number line is going to be the x-coordinate of u-hat.",
  "translatedText": "కాబట్టి సమరూపత ద్వారా, ఆ వికర్ణ సంఖ్య రేఖపై అంచనా వేయబడినప్పుడు I-hat ల్యాండ్ అయ్యే సంఖ్య U-hat యొక్క x-కోఆర్డినేట్ అవుతుంది.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 569.02,
  "end": 576.62
 },
 {
  "input": "Isn't that cool?",
  "translatedText": "బాగుంది కదా?",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 577.16,
  "end": 577.66
 },
 {
  "input": "The reasoning is almost identical for the j-hat case.",
  "translatedText": "J-hat కేసుకు సంబంధించిన వాదన దాదాపు ఒకేలా ఉంటుంది.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 579.2,
  "end": 581.8
 },
 {
  "input": "Think about it for a moment.",
  "translatedText": "ఒక్కసారి ఆలోచించండి.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 582.18,
  "end": 583.26
 },
 {
  "input": "For all the same reasons, the y-coordinate of u-hat gives us the number where j-hat lands when it's projected onto the number line copy.",
  "translatedText": "అవే కారణాల వల్ల, U-hat యొక్క y-కోఆర్డినేట్ నంబర్ లైన్ కాపీపై అంచనా వేసినప్పుడు J-hat ల్యాండ్ అయ్యే సంఖ్యను ఇస్తుంది.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 589.12,
  "end": 596.6
 },
 {
  "input": "Pause and ponder that for a moment.",
  "translatedText": "ఆగి ఒక్క క్షణం ఆలోచించండి.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 597.58,
  "end": 598.72
 },
 {
  "input": "I just think that's really cool.",
  "translatedText": "ఇది నిజంగా బాగుంది అని నేను అనుకుంటున్నాను.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 598.78,
  "end": 600.2
 },
 {
  "input": "So the entries of the 1x2 matrix describing the projection transformation are going to be the coordinates of u-hat.",
  "translatedText": "కాబట్టి ప్రొజెక్షన్ పరివర్తనను వివరించే 1x2 మాతృక యొక్క ఎంట్రీలు U-hat యొక్క కోఆర్డినేట్‌లుగా ఉంటాయి.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 600.92,
  "end": 607.26
 },
 {
  "input": "And computing this projection transformation for arbitrary vectors in space, which requires multiplying that matrix by those vectors, is computationally identical to taking a dot product with u-hat.",
  "translatedText": "మరియు స్పేస్‌లోని ఏకపక్ష వెక్టర్‌ల కోసం ఈ ప్రొజెక్షన్ ట్రాన్స్‌ఫర్మేషన్‌ను గణించడం, ఆ మాతృకను ఆ వెక్టర్‌ల ద్వారా గుణించడం అవసరం, ఇది U-hatతో డాట్ ఉత్పత్తిని తీసుకోవడానికి గణనపరంగా సమానంగా ఉంటుంది.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 608.04,
  "end": 618.88
 },
 {
  "input": "This is why taking the dot product with a unit vector can be interpreted as projecting a vector onto the span of that unit vector and taking the length.",
  "translatedText": "అందుకే యూనిట్ వెక్టార్‌తో డాట్ ఉత్పత్తిని తీసుకోవడం అనేది వెక్టార్‌ను ఆ యూనిట్ వెక్టర్ యొక్క స్పాన్‌పై ప్రొజెక్ట్ చేయడం మరియు పొడవును తీసుకోవడం అని అర్థం చేసుకోవచ్చు.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 621.46,
  "end": 630.59
 },
 {
  "input": "So what about non-unit vectors?",
  "translatedText": "కాబట్టి యూనిట్ కాని వెక్టర్స్ గురించి ఏమిటి?",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 634.03,
  "end": 635.79
 },
 {
  "input": "For example, let's say we take that unit vector u-hat, but we scale it up by a factor of 3.",
  "translatedText": "ఉదాహరణకు, మేము ఆ యూనిట్ వెక్టార్ U-hatని తీసుకున్నామని అనుకుందాం, కానీ మేము దానిని 3 కారకంతో పెంచాము.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 636.31,
  "end": 640.63
 },
 {
  "input": "Numerically, each of its components gets multiplied by 3.",
  "translatedText": "సంఖ్యాపరంగా, దానిలోని ప్రతి భాగం 3తో గుణించబడుతుంది.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 641.35,
  "end": 644.39
 },
 {
  "input": "So looking at the matrix associated with that vector, it takes i-hat and j-hat to three times the values where they landed before.",
  "translatedText": "కాబట్టి ఆ వెక్టార్‌తో అనుబంధించబడిన మాతృకను చూస్తే, ఇది I-hat మరియు J-hat లను అవి ఇంతకు ముందు దిగిన విలువల కంటే మూడు రెట్లు చేరుకుంటుంది.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 644.81,
  "end": 652.39
 },
 {
  "input": "Since this is all linear, it implies more generally that the new matrix can be interpreted as projecting any vector onto the number line copy and multiplying where it lands by 3.",
  "translatedText": "ఇదంతా సరళంగా ఉన్నందున, కొత్త మ్యాట్రిక్స్ ఏదైనా వెక్టార్‌ను నంబర్ లైన్ కాపీపై ప్రొజెక్ట్ చేయడం మరియు అది ఎక్కడ ల్యాండ్ అవుతుందో అక్కడ 3తో గుణించడం అని అర్థం చేసుకోవచ్చు.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 655.23,
  "end": 664.65
 },
 {
  "input": "This is why the dot product with a non-unit vector can be interpreted as first projecting onto that vector, then scaling up the length of that projection by the length of the vector.",
  "translatedText": "అందుకే నాన్-యూనిట్ వెక్టర్‌తో ఉన్న డాట్ ఉత్పత్తిని మొదట ఆ వెక్టర్‌పై ప్రొజెక్ట్ చేసి, ఆ ప్రొజెక్షన్ పొడవును వెక్టార్ పొడవుతో పెంచినట్లుగా అర్థం చేసుకోవచ్చు.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 665.47,
  "end": 674.95
 },
 {
  "input": "Take a moment to think about what happened here.",
  "translatedText": "ఇక్కడ ఏమి జరిగిందో ఒక్క క్షణం ఆలోచించండి.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 677.59,
  "end": 679.55
 },
 {
  "input": "We had a linear transformation from 2D space to the number line, which was not defined in terms of numerical vectors or numerical dot products, it was just defined by projecting space onto a diagonal copy of the number line.",
  "translatedText": "మేము 2D స్పేస్ నుండి నంబర్ లైన్‌కు సరళ పరివర్తనను కలిగి ఉన్నాము, ఇది సంఖ్యా వెక్టర్స్ లేదా న్యూమరికల్ డాట్ ప్రొడక్ట్‌ల పరంగా నిర్వచించబడలేదు, ఇది కేవలం నంబర్ లైన్ యొక్క వికర్ణ కాపీపై స్పేస్‌ను ప్రొజెక్ట్ చేయడం ద్వారా నిర్వచించబడింది.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 679.89,
  "end": 690.89
 },
 {
  "input": "But because the transformation is linear, it was necessarily described by some 1x2 matrix.",
  "translatedText": "కానీ పరివర్తన సరళంగా ఉన్నందున, అది తప్పనిసరిగా కొన్ని 1x2 మాతృక ద్వారా వివరించబడింది.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 691.67,
  "end": 696.83
 },
 {
  "input": "And since multiplying a 1x2 matrix by a 2D vector is the same as turning that matrix on its side and taking a dot product, this transformation was inescapably related to some 2D vector.",
  "translatedText": "మరియు 2D వెక్టర్ ద్వారా 1x2 మాత్రికను గుణించడం అనేది ఆ మాతృకను దాని వైపుకు తిప్పడం మరియు చుక్కల ఉత్పత్తిని తీసుకోవడం వంటిదే కాబట్టి, ఈ పరివర్తన తప్పనిసరిగా కొన్ని 2D వెక్టార్‌కు సంబంధించినది.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 697.33,
  "end": 707.91
 },
 {
  "input": "The lesson here is that any time you have one of these linear transformations whose output space is the number line, no matter how it was defined, there's going to be some unique vector v corresponding to that transformation, in the sense that applying the transformation is the same thing as taking a dot product with that vector.",
  "translatedText": "ఇక్కడ పాఠం ఏమిటంటే, మీరు ఎప్పుడైనా ఈ లీనియర్ ట్రాన్స్‌ఫార్మేషన్‌లలో ఒకదానిని కలిగి ఉంటే, దాని అవుట్‌పుట్ స్పేస్ నంబర్ లైన్, అది ఎలా నిర్వచించబడినప్పటికీ, పరివర్తనను వర్తింపజేయడం అనే అర్థంలో ఆ పరివర్తనకు అనుగుణంగా కొన్ని ప్రత్యేకమైన వెక్టర్ v ఉంటుంది. ఆ వెక్టార్‌తో డాట్ ఉత్పత్తిని తీసుకోవడం అదే విషయం.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 709.41,
  "end": 726.35
 },
 {
  "input": "To me, this is utterly beautiful.",
  "translatedText": "నాకు, ఇది చాలా అందంగా ఉంది.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 729.93,
  "end": 732.03
 },
 {
  "input": "It's an example of something in math called duality.",
  "translatedText": "ఇది ద్వంద్వత్వం అని పిలువబడే గణితంలో ఏదో ఒక ఉదాహరణ.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 732.73,
  "end": 735.39
 },
 {
  "input": "Duality shows up in many different ways and forms throughout math, and it's super tricky to actually define.",
  "translatedText": "ద్వంద్వత్వం గణితంలో అనేక రకాలుగా మరియు రూపాల్లో కనిపిస్తుంది మరియు వాస్తవానికి నిర్వచించడం చాలా గమ్మత్తైనది.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 736.27,
  "end": 741.93
 },
 {
  "input": "Loosely speaking, it refers to situations where you have a natural but surprising correspondence between two types of mathematical thing.",
  "translatedText": "వదులుగా చెప్పాలంటే, మీరు రెండు రకాల గణిత విషయాల మధ్య సహజమైన కానీ ఆశ్చర్యకరమైన అనురూప్యతను కలిగి ఉన్న పరిస్థితులను ఇది సూచిస్తుంది.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 742.67,
  "end": 750.23
 },
 {
  "input": "For the linear algebra case that you just learned about, you'd say that the dual of a vector is the linear transformation that it encodes, and the dual of a linear transformation from some space to one dimension is a certain vector in that space.",
  "translatedText": "మీరు ఇప్పుడే నేర్చుకున్న లీనియర్ ఆల్జీబ్రా కేసు కోసం, వెక్టర్ యొక్క ద్వంద్వ అది ఎన్‌కోడ్ చేసే లీనియర్ ట్రాన్స్‌ఫర్మేషన్ అని మరియు కొంత స్పేస్ నుండి ఒక డైమెన్షన్‌కు లీనియర్ ట్రాన్స్‌ఫర్మేషన్ యొక్క ద్వంద్వ ఆ స్థలంలో నిర్దిష్ట వెక్టర్ అని మీరు చెబుతారు.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 751.01,
  "end": 764.65
 },
 {
  "input": "So to sum up, on the surface, the dot product is a very useful geometric tool for understanding projections and for testing whether or not vectors tend to point in the same direction.",
  "translatedText": "కాబట్టి మొత్తానికి, ఉపరితలంపై, డాట్ ఉత్పత్తి అనేది ప్రొజెక్షన్‌లను అర్థం చేసుకోవడానికి మరియు వెక్టర్‌లు ఒకే దిశలో ఉన్నాయో లేదో పరీక్షించడానికి చాలా ఉపయోగకరమైన రేఖాగణిత సాధనం.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 766.73,
  "end": 776.31
 },
 {
  "input": "And that's probably the most important thing for you to remember about the dot product.",
  "translatedText": "మరియు మీరు డాట్ ఉత్పత్తి గురించి గుర్తుంచుకోవడానికి ఇది చాలా ముఖ్యమైన విషయం.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 776.97,
  "end": 780.79
 },
 {
  "input": "But at a deeper level, dotting two vectors together is a way to translate one of them into the world of transformations.",
  "translatedText": "కానీ లోతైన స్థాయిలో, రెండు వెక్టర్‌లను కలిపి చుక్కలు వేయడం వాటిలో ఒకదానిని పరివర్తనల ప్రపంచంలోకి అనువదించడానికి ఒక మార్గం.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 781.27,
  "end": 787.73
 },
 {
  "input": "Again, numerically, this might feel like a silly point to emphasize.",
  "translatedText": "మళ్ళీ, సంఖ్యాపరంగా, ఇది నొక్కిచెప్పడానికి వెర్రి పాయింట్ లాగా అనిపించవచ్చు.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 788.67,
  "end": 791.55
 },
 {
  "input": "It's just two computations that happen to look similar.",
  "translatedText": "ఇది చాలా గణనపరంగా ఉంది.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 791.67,
  "end": 794.49
 },
 {
  "input": "But the reason I find this so important is that throughout math, when you're dealing with a vector, once you really get to know its personality, sometimes you realize that it's easier to understand it not as an arrow in space, but as the physical embodiment of a linear transformation.",
  "translatedText": "కానీ నేను దీన్ని చాలా ముఖ్యమైనదిగా భావించడానికి కారణం ఏమిటంటే, మీరు గణితమంతటా, మీరు వెక్టర్‌తో వ్యవహరిస్తున్నప్పుడు, మీరు దాని వ్యక్తిత్వాన్ని నిజంగా తెలుసుకున్న తర్వాత, కొన్నిసార్లు మీరు దానిని అంతరిక్షంలో బాణంలా కాకుండా అర్థం చేసుకోవడం సులభం అని గ్రహిస్తారు. సరళ పరివర్తన యొక్క భౌతిక స్వరూపం.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 794.49,
  "end": 810.09
 },
 {
  "input": "It's as if the vector is really just a conceptual shorthand for a certain transformation, since it's easier for us to think about arrows in space rather than moving all of that space to the number line.",
  "translatedText": "వెక్టార్ నిజంగా ఒక నిర్దిష్ట పరివర్తన కోసం సంభావిత సంక్షిప్తలిపి వలె ఉంటుంది, ఎందుకంటే ఆ స్థలం మొత్తాన్ని తరలించడం కంటే అంతరిక్షంలో బాణాల గురించి ఆలోచించడం మాకు సులభం.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 810.73,
  "end": 820.15
 },
 {
  "input": "In the next video, you'll see another really cool example of this duality in action, as I talk about the cross product.",
  "translatedText": "తదుపరి వీడియోలో, నేను క్రాస్ ప్రోడక్ట్ గురించి మాట్లాడుతున్నప్పుడు మీరు ఈ ద్వంద్వత్వం యొక్క మరొక అద్భుతమైన ఉదాహరణను చూస్తారు.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 820.15,
  "end": 829.19
 }
]