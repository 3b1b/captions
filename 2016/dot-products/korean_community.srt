1
00:00:20,800 --> 00:00:24,760
전통적으로, 내적(dot product) 같은 것은 
선형대수 강의에서 상당히 앞쪽에 나와.

2
00:00:24,769 --> 00:00:25,769
 

3
00:00:25,769 --> 00:00:26,800
보통 시작 부근에 있지.

4
00:00:26,800 --> 00:00:29,849
그래서 내가 이 시리즈에서 뒷쪽에 놓는 게
좀 이상하게 보일수도 있어.

5
00:00:29,849 --> 00:00:33,250
내가 이렇게 한 이유는 기존 방법대로 소개하면

6
00:00:33,250 --> 00:00:36,320
벡터의 기초지식만 있어도 되긴한데,

7
00:00:36,320 --> 00:00:39,580
하지만 수학에서 
내적의 역할에 대한 제대로된 이해를 하려면

8
00:00:39,580 --> 00:00:43,650
선형변환이라는 이해가 반드시 있어야만 해.

9
00:00:43,650 --> 00:00:45,140
하지만, 그전에 간단하게 소개할게.

10
00:00:45,140 --> 00:00:47,800
기존 방법이 내적을 어떻게 소개하는지를.

11
00:00:47,800 --> 00:00:51,280
내가 가정하는 건 많은 사람들에게 
적어도 부분적으로라도 검토받았어.

12
00:00:51,280 --> 00:00:54,980
수치적으로, 같은 차원의 두 벡터가 있다고 해볼게.

13
00:00:54,980 --> 00:00:57,540
같은 갯수의 숫자를 가지고 있을 것이고,

14
00:00:57,540 --> 00:00:59,540
내적(dot product) 구한다는 것은, 말하자면,

15
00:00:59,540 --> 00:01:02,290
같은 좌표값으로 짝을 지어

16
00:01:02,290 --> 00:01:04,000
곱하고

17
00:01:04,000 --> 00:01:06,870
모두 더하면 돼.

18
00:01:06,870 --> 00:01:10,320
그래서 [1,2] 벡터와 [3,4] 벡터의 내적은

19
00:01:10,320 --> 00:01:14,700
1 x 3 + 2 x 4 가 되지.

20
00:01:14,700 --> 00:01:19,810
[6, 2, 8, 3] 벡터와 [1, 8, 5, 3] 벡터의 내적은

21
00:01:19,810 --> 00:01:25,570
6 x 1   +   2 x 8   +   8 x 5   +   3 x 3

22
00:01:25,570 --> 00:01:29,359
다행히도, 이 계산에 잘 맞는 기하학적 해석방법이 있어.

23
00:01:29,359 --> 00:01:32,990
두 벡터 v, w 의 내적(dot product)을 살펴보자.

24
00:01:32,990 --> 00:01:38,689
w 벡터를 투영(project)할건데,
v 벡터와 원점을 지나는 선 위로 할거야.

25
00:01:38,689 --> 00:01:43,520
이 투영된 w 벡터의 길이에 벡터v 길이를 곱하는 것

26
00:01:43,520 --> 00:01:46,619
이것이 v・w 내적이야.

27
00:01:46,619 --> 00:01:50,450
w 벡터 투사체가 v 벡터 방향과 반대이면,

28
00:01:50,450 --> 00:01:54,079
그럼 내적(dot product)은 음수가 돼.

29
00:01:54,079 --> 00:01:56,770
그리고 두 벡터가 같은 방향을 가리키면,

30
00:01:56,770 --> 00:01:59,670
내적은 양수(positive number)가 돼.

31
00:01:59,670 --> 00:02:01,250
그리고 직각을 이루는 경우, 즉,

32
00:02:01,250 --> 00:02:04,270
한 벡터가 다른벡터로 투영 하면
0벡터가 되는 경우,

33
00:02:04,270 --> 00:02:06,180
내적은 0 이야.

34
00:02:06,180 --> 00:02:10,720
반대방향을 가리킬 경우, 
내적은 음수가 돼.

35
00:02:10,720 --> 00:02:14,920
근데, 이런 해석방법은 뭔가 좀 비대칭적이야.

36
00:02:14,920 --> 00:02:16,480
이 방법은 두 벡터를 매우 다르게 다뤄.

37
00:02:16,480 --> 00:02:21,420
그래서 난 처음 이걸 배울때,
순서가 중요하지 않다는 것에 놀랐었어.

38
00:02:21,420 --> 00:02:24,390
반대로 v 를 w 로 투사(project) 하는 것,

39
00:02:24,390 --> 00:02:27,100
즉, v 의 투사체에 w 벡터길이를 곱해도

40
00:02:27,100 --> 00:02:28,880
같은 값을 얻게 된다니!

41
00:02:28,880 --> 00:02:35,640
두 방법이 전혀 다른 계산 같지 않아?

42
00:02:35,640 --> 00:02:38,620
그럼 왜 순서가 중요하지 않은지에 대해
직관적 설명을 해볼게.

43
00:02:38,620 --> 00:02:41,180
v 와 w 가 같은 길이를 가진다면,

44
00:02:41,180 --> 00:02:43,260
여기서는 둘의 대칭성을 사용할 수 있어.

45
00:02:43,260 --> 00:02:45,180
그럼, w 를 v 쪽으로 투사해서

46
00:02:45,180 --> 00:02:48,620
투사체 길이에 v 길이를 곱하는 것이

47
00:02:48,620 --> 00:02:53,600
반대방향으로 투사하는 것과 완전한 대칭 거울상이야.
v 를 w 로 투사해서 그 길이에

48
00:02:53,600 --> 00:02:56,350
w 길이를 곱하는 것과 말야.

49
00:02:56,350 --> 00:03:01,350
이제, 벡터들 중 하나를 "스케일(scale)" 해서,
v 벡터를 2배만큼 늘려보자.

50
00:03:01,350 --> 00:03:03,240
그래서 두 벡터의 길이를 다르게 만들어.

51
00:03:03,240 --> 00:03:05,100
이제 대칭성이 깨졌어.

52
00:03:05,100 --> 00:03:10,010
2v 와 w 의 내적을 어떻게 해석해야할지 생각해보자.

53
00:03:10,010 --> 00:03:11,010
 

54
00:03:11,010 --> 00:03:13,550
만약 w 가 v 로 투사하는 경우라면,

55
00:03:13,550 --> 00:03:16,670
2v・w 내적값은

56
00:03:16,670 --> 00:03:20,520
정확히 v・w 내적값의 두배가 될거야.
(v 길이만 두배가 됐기때문에)

57
00:03:20,520 --> 00:03:23,400
왜냐하면 v 를 2로 "스케일(scale)" 했기 때문이야.

58
00:03:23,400 --> 00:03:26,210
투사된 w 길이는 그대로야.

59
00:03:26,210 --> 00:03:29,840
하지만 투사받는 쪽 벡터 길이는 두배가 됬지.

60
00:03:29,840 --> 00:03:34,151
이번엔 반대로, v 에서 w 로 투사하는 경우를 생각해보자.

61
00:03:34,151 --> 00:03:39,000
이 경우에는, "스케일" 된 v 벡터의 투사체 길이가

62
00:03:39,000 --> 00:03:40,340
2 배야.

63
00:03:40,340 --> 00:03:43,600
투사받는 쪽인 벡터 길이는 그대로야.

64
00:03:43,600 --> 00:03:47,090
그래서 결과적으로 이번에도 내적이 두배가 돼.

65
00:03:47,090 --> 00:03:49,620
이렇게 대칭성이 깨진 경우라도,

66
00:03:49,620 --> 00:03:53,720
내적값에 영향을 주는 "스케일링" 효과는

67
00:03:53,720 --> 00:03:57,040
어느쪽 설명으로보나 똑같아.

68
00:03:57,040 --> 00:04:00,450
이제 또 다른 커다란 질문이 있어.
처음 배울때 나를 혼란스럽게 했던 거야.

69
00:04:00,450 --> 00:04:05,680
도대체 숫자상으로 좌표값을 매칭하고 곱한다음

70
00:04:05,680 --> 00:04:07,020
더하는 거랑,

71
00:04:07,020 --> 00:04:10,040
투사(projection, 투영)과는 무슨 관계인거야?

72
00:04:10,040 --> 00:04:13,160
글쎄, 만족스러운 대답을 얻으려면,

73
00:04:13,160 --> 00:04:16,549
또, 내적에 중요성에 대한 제대로된 정의를 해야한다면,

74
00:04:16,549 --> 00:04:19,219
좀 더 파고 내려가야 될 거야.

75
00:04:19,219 --> 00:04:21,449
그리고 거기서 "이중성(duality)" 이라는 것을 만나게 돼.

76
00:04:21,449 --> 00:04:23,290
근데, 바로 설명 들어가기 전에,

77
00:04:23,290 --> 00:04:26,360
선형변환에 대해 먼저 얘기해야할 게 있어.

78
00:04:26,360 --> 00:04:28,710
다차원에서 1차원으로의 선형변환에 관한 거야.

79
00:04:28,710 --> 00:04:32,770
즉, 결과 차원이 그냥 1차원 수선이 되는 변환이지.

80
00:04:32,770 --> 00:04:36,210
이 변환들은 일종의 함수로서,
2차원 벡터를 입력받아서 숫자 하나를 내놓고 있어.

81
00:04:36,210 --> 00:04:38,240
물론, 선형변환은

82
00:04:38,240 --> 00:04:43,090
2차원 입력에서 1차원 출력으로 가는 
다른 흔한 함수들보다는 훨씬 제한적이야.

83
00:04:43,090 --> 00:04:45,150
더 높은 차원으로 가는 변환도 마찬가지로,

84
00:04:45,150 --> 00:04:46,900
챕터 3에서 내가 말했던 것이기도 한데,

85
00:04:46,900 --> 00:04:50,350
이 함수가 선형(linear)이 되려면 
어떤 공식적인 속성이 있어야만 하지.
(역주: 평행, 균등간격, 원점고정)

86
00:04:50,350 --> 00:04:54,259
하지만 여기서는 자세한 것들을 무시할게.
이런 것들은 주의만 산만해질 뿐이야.

87
00:04:54,259 --> 00:04:59,210
대신 모든 공식적 속성을 
동등한 시각적 속성을 통해 살펴보자.

88
00:04:59,210 --> 00:05:02,050
선에 같은 간격으로 점이 있고,

89
00:05:02,050 --> 00:05:04,080
이 선에 변환을 적용하면,

90
00:05:04,080 --> 00:05:08,169
선형변환이라면 점들사이 균등간격이 유지될거야.

91
00:05:08,169 --> 00:05:11,470
결과 공간, 즉 수선(number line) 의 점들로 바뀐 이후에도 그렇겠지.

92
00:05:11,470 --> 00:05:15,520
반면에, 선의 점 간격이 균등하지 않게 바뀌면,

93
00:05:15,520 --> 00:05:19,430
이런 변환은 비선형적(not linear) 이야.

94
00:05:19,430 --> 00:05:21,300
우리가 앞서 봤던 예제들 처럼,

95
00:05:21,300 --> 00:05:23,060
선형변환은

96
00:05:23,060 --> 00:05:27,029
i-hat 과 j-hat 의 도착위치에 의해 완전히 결정돼.

97
00:05:27,029 --> 00:05:30,719
하지만 이번에는, 
기저벡터들의 도착지가 수선의 숫자일뿐이지.

98
00:05:30,719 --> 00:05:34,240
기저벡터의 도착지가 행렬의 열이기 때문에

99
00:05:34,240 --> 00:05:38,529
각 열은 하나의 숫자로만 이루어지게 돼.

100
00:05:38,529 --> 00:05:41,949
이것이 1 x 2 행렬이야.

101
00:05:41,949 --> 00:05:45,360
예를 통해서 좀 더 살펴보자. 
이 변환(행렬)을 벡터에 적용한다는 것은 무슨 의미일까?

102
00:05:45,360 --> 00:05:46,490
 

103
00:05:46,490 --> 00:05:52,490
어떤 선형변환이 있다고 해보자. 
변환후 i-hat 은 1, j-hat 은 -2 인 경우야.

104
00:05:52,490 --> 00:05:56,919
좌표값 [4, 3]인 벡터가 어디로 이동하는지 알기 위해서는

105
00:05:56,919 --> 00:06:00,669
벡터를 4 * i-hat + 3 * j-hat 으로 분해해서 생각해야해.

106
00:06:00,669 --> 00:06:05,249
선형성(linearity)에 따르면,
변환 후에는 같은 비율이여야 하기 때문에

107
00:06:05,249 --> 00:06:08,819
변환된 i-hat 의 4배에

108
00:06:08,819 --> 00:06:12,990
변환된 j-hat 의 3배를 더한것과 같아.

109
00:06:12,990 --> 00:06:18,210
이 경우 결과적으로 -2 에 도착하지.

110
00:06:18,210 --> 00:06:24,199
이 계산을 순전히 수치적으로 보면,
이게바로 행렬-벡터 곱셈이 되지.

111
00:06:24,199 --> 00:06:30,689
이제, 이 1x2 행렬에 벡터를 곱하는 수치연산은

112
00:06:30,689 --> 00:06:33,580
두 벡터의 내적(dot product)과 똑같게 느껴질거야.

113
00:06:33,580 --> 00:06:37,180
1x2 행렬이 벡터를 그냥 옆으로 뉘여놓은 것 같지 않아?

114
00:06:37,180 --> 00:06:42,659
사실, 이제는 말할때가 된 것 같아.
1x2 행렬과 2차원 벡터사이에는 멋진 관련성이 있어.

115
00:06:42,659 --> 00:06:44,110
 

116
00:06:44,110 --> 00:06:49,139
벡터의 숫자 표현을 옆으로 기울여서 연관 행렬을 얻거나

117
00:06:49,139 --> 00:06:50,139
 

118
00:06:50,139 --> 00:06:53,720
또는 행렬을 세워서 연관 벡터를 얻거나
하는 관련성이지.

119
00:06:53,720 --> 00:06:56,229
당장 수치 표현만을 살펴볼것이기 때문에

120
00:06:56,229 --> 00:07:00,319
벡터와 1 × 2 행렬 사이를 바꾸는 것이
뭔가 단순한 바보 짓처럼 느껴질수도 있어.

121
00:07:00,319 --> 00:07:01,849
 

122
00:07:01,849 --> 00:07:05,800
하지만, 이건 기하학적 관점에서 보면 
뭔가 멋진 어떤 것을 제공해줘.

123
00:07:05,800 --> 00:07:10,330
어떤 연결성 같은 건데, 
입력이 벡터고 출력이 숫자인 선형변환과

124
00:07:10,330 --> 00:07:15,620
벡터 그 자신과의 관계야.

125
00:07:15,620 --> 00:07:17,909
그 중요성을 명확히 보여주는 예를 하나 들어볼게.

126
00:07:17,909 --> 00:07:22,240
그리고 앞에나온 내적 문제에 관한 답변과도 관련있어.

127
00:07:22,240 --> 00:07:23,439
기존에 배웠던 것들은 잊어버리고

128
00:07:23,439 --> 00:07:29,199
내적과 투영이 관계있다는 것을 아직 모른다고 생각하고 들어봐.

129
00:07:29,199 --> 00:07:31,849
난 여기 수선의 복사본을 만들어서

130
00:07:31,849 --> 00:07:36,960
대각선 방향으로 비스듬히 놓을 건데,
숫자 0 이 원점과 겹치게 둘거야.

131
00:07:36,960 --> 00:07:39,110
이제 2차원 형태의 수선의 단위벡터를 떠올려봐.

132
00:07:39,110 --> 00:07:42,120
수선의 숫자 1을 가리키고 있을거야.

133
00:07:42,120 --> 00:07:45,819
이 벡터에 u-hat 이라고 이름을 붙일거야.

134
00:07:45,819 --> 00:07:48,529
이 작은 벡터가 앞으로 일어날 일에서
중요한 역할을 할거야.

135
00:07:48,529 --> 00:07:51,129
마음속에 잘 기억해둬.

136
00:07:51,129 --> 00:07:54,830
2차원 벡터를 이 대각선방향의 수선에 
투영(project) 하게 되면

137
00:07:54,830 --> 00:07:59,189
이건 사실상, 우리가 2차원 벡터를 입력받아 
숫자를 내놓는 함수를 정의한게 돼.

138
00:07:59,189 --> 00:08:02,050
무엇보다도, 이 함수는 진짜 선형적이야.

139
00:08:02,050 --> 00:08:03,809
눈으로 보면 일단 맞아.

140
00:08:03,809 --> 00:08:08,600
균등 간격의 점을 가진 선이라면
수선으로 투사한 이후에도 균등 간격이야.

141
00:08:08,600 --> 00:08:12,089
 

142
00:08:12,089 --> 00:08:13,180
다만 이해를 도우려고,

143
00:08:13,180 --> 00:08:16,469
2차원 공간에 수선을 넣어놨을 뿐,

144
00:08:16,469 --> 00:08:19,969
이 함수의 출력은 (수선의) 숫자이지,
2차원 평면의 벡터로 보면 안돼.

145
00:08:19,969 --> 00:08:25,180
이 함수를 마치 두개의 좌표값을 입력받아 하나의 좌표값을 출력하는 것처럼 생각할 수도 있어.

146
00:08:25,180 --> 00:08:27,740
근데 벡터 u-hat 은 2차원 벡터야.

147
00:08:27,740 --> 00:08:29,539
입력과 같은 공간에 존재하지.

148
00:08:29,539 --> 00:08:34,750
단지 삽입된 수선과 겹쳐진 상황이지.

149
00:08:34,750 --> 00:08:40,240
이렇게 투영을 통해, 우리는 2차원벡터에서 숫자로 가는 선형변환 하나를 정의했어.

150
00:08:40,240 --> 00:08:45,050
이 변환은 1x2 행렬로 나타낼 수 있지.

151
00:08:45,050 --> 00:08:50,000
이 1 × 2 행렬의 값을 알아내기 위해서,
아까 그려놓은 수선을 확대해서

152
00:08:50,000 --> 00:08:53,500
i-hat 과 j-hat 이 어디로 움직이는 살펴보자.

153
00:08:53,500 --> 00:08:58,680
기저벡터의 도착지가 행렬의 열인 것은 이미 알거야.

154
00:08:58,680 --> 00:09:03,180
이 부분이 굉장히 멋진 부분인데,
우리는 진짜 우아한 대칭성을 사용해서 알아낼 수 있어.

155
00:09:03,180 --> 00:09:06,300
i-hat 과 u-hat 모두 단위벡터(길이 1)여서

156
00:09:06,300 --> 00:09:09,100
i-hat 을 u-hat 을 통과하는 선으로 투영하는 것은

157
00:09:09,100 --> 00:09:13,810
u-hat 을 x 축(i-hat) 에 투영하는 것과 완전히 대칭이야. 
(역자: 앞의 내적 설명에서 나왔죠.)

158
00:09:13,810 --> 00:09:17,360
그래서 i-hat 이 투영 위치를 구할때

159
00:09:17,360 --> 00:09:21,820
u-hat 을 x 축(i-hat) 에 투영된 위치를 구하는 것과 똑같아.

160
00:09:21,820 --> 00:09:22,820
 

161
00:09:22,820 --> 00:09:25,800
그런데 u-hat 을 x 축에 투영하는 것은

162
00:09:25,800 --> 00:09:28,670
그냥 u-hat 의 x 좌표값을 구하는 거랑 같아.

163
00:09:28,670 --> 00:09:33,800
그래서, 대칭성에 의해,
i-hat 에서 수선으로 투영후 위치는

164
00:09:33,800 --> 00:09:34,800
 

165
00:09:34,800 --> 00:09:37,020
u-hat 의 x 좌표값이 될거야.

166
00:09:37,020 --> 00:09:39,350
멋지지 않아?

167
00:09:39,350 --> 00:09:42,269
j-hat 의 경우에도 완전이 같아.

168
00:09:42,269 --> 00:09:49,510
잠깐만 생각하면 나올거야.

169
00:09:49,510 --> 00:09:52,410
같은 이유로, u-hat 의 y 좌표값은

170
00:09:52,410 --> 00:09:56,730
j-hat 을 수선으로 투영한 위치와 같을거야.

171
00:09:56,730 --> 00:10:01,199
잠깐 여기서 잠시 생각해봐야 돼.
난 이부분이 정말로 굉장한 것 같아.

172
00:10:01,199 --> 00:10:05,069
투영 변환을 나타내는 1x2 행렬은

173
00:10:05,069 --> 00:10:08,069
그냥 u-hat 의 좌표가 되는거야.(!)

174
00:10:08,069 --> 00:10:12,030
임의 벡터의 투영은

175
00:10:12,030 --> 00:10:15,269
이 행렬에 임의벡터를 곱하는 것이고,

176
00:10:15,269 --> 00:10:22,040
이건 계산적으로
u-hat 과의 내적(dot product)과 똑같아.

177
00:10:22,040 --> 00:10:24,920
이것이 어째서 단위벡터와의 내적과 ,

178
00:10:24,920 --> 00:10:30,089
벡터를 단위벡터로 투영한 길이를 구하는 것과 같아지는지를 설명해줘.

179
00:10:30,089 --> 00:10:34,319
 

180
00:10:34,319 --> 00:10:36,370
그럼 비-단위(non-unit) 벡터의 경우는 어떨까?

181
00:10:36,370 --> 00:10:37,370
예를 들어,

182
00:10:37,370 --> 00:10:38,860
u-hat 벡터를 가져다가

183
00:10:38,860 --> 00:10:41,290
3배로 "스케일" 해보는 거야.

184
00:10:41,290 --> 00:10:44,930
수치적으로는, 각 구성요소가 3배가 될거야.

185
00:10:44,930 --> 00:10:48,029
그리고 그 벡터와 연관된 행렬을 찾으려면

186
00:10:48,029 --> 00:10:55,740
이전에 i-hat 과 j-hat 의 변환된 위치에 3배를 하면 돼.

187
00:10:55,740 --> 00:10:57,090
모두 선형(linear) 이기 때문이야.

188
00:10:57,090 --> 00:10:58,750
이것이 암시하는 것은,

189
00:10:58,750 --> 00:11:02,399
새로운 행렬을 해석하기를, 어떤 벡터를 
수선(number line) 원본 (3배하기 전)에 투영한다음

190
00:11:02,399 --> 00:11:03,399
 

191
00:11:03,399 --> 00:11:05,600
투영 후 위치에서 3을 곱한거야.

192
00:11:05,600 --> 00:11:08,449
이것이 왜 비-단위(non-unit) 벡터의 내적(dot product)을

193
00:11:08,449 --> 00:11:11,560
해석할때, 그 벡터 위로 투영한 후,

194
00:11:11,560 --> 00:11:17,970
벡터의 길이만큼 투사체 길이를 늘리는 것이라고
보는 이유야.

195
00:11:17,970 --> 00:11:20,009
잠시 멈춰서 이게 무슨 말인지 생각해보자.

196
00:11:20,009 --> 00:11:23,300
우리는 2차원 공간에서 1차원 수선으로 가는 선형변환을 가지고 있었어.

197
00:11:23,300 --> 00:11:27,149
수치적 벡터나 수치적 내적이라는 용어로 
정의하기 전이였지.

198
00:11:27,149 --> 00:11:31,720
단지 대각방향의 수선 원본에 투영만을 정의했을 뿐이야.

199
00:11:31,720 --> 00:11:33,760
하지만, 변환이 선형적(linear) 이기 때문에

200
00:11:33,760 --> 00:11:37,370
이건 필연적으로 1x2 행렬로 표현할 수 있었어.
(역자: 선형변환은 모두 행렬로 표현할 수 있는 듯)

201
00:11:37,370 --> 00:11:40,459
그리고 1x2 행렬에 2차원 벡터를 곱하는 것은

202
00:11:40,459 --> 00:11:43,920
그 행렬을 옆으로 눕혀서 내적을 구한 것과 같기 때문에

203
00:11:43,920 --> 00:11:49,870
이런 변환은 불가피하게 
2차원 벡터와 관련이 있을 수밖에 없어.

204
00:11:49,870 --> 00:11:53,620
여기서 배울 것은, 
언제든 이런 선형 변환 중 하나를 가지고 있다면,

205
00:11:53,620 --> 00:11:55,899
즉, 결과 공간이 수선(number line)인
선형변환을 가지고 있다면,

206
00:11:55,899 --> 00:11:59,490
어떻게 정의하든지 간에, 
어떤 유일한 벡터가

207
00:11:59,490 --> 00:12:01,529
그 변환에 대응되고 있을거야.

208
00:12:01,529 --> 00:12:05,569
변환의 적용은 
벡터의 내적을 구하는 것과 같음을 알 수 있어.

209
00:12:05,569 --> 00:12:09,990
 

210
00:12:09,990 --> 00:12:12,940
나에게 있어, 이건 정말 아름답게 느껴져.

211
00:12:12,940 --> 00:12:15,779
이것이 수학에서 말하는 
"이중성(duality)" 에 관한 경우야.

212
00:12:15,779 --> 00:12:19,860
"이중성" 은 수학 전반을 통해 많은 방법과 형태로 등장해.

213
00:12:19,860 --> 00:12:22,259
그리고 실제로 정의 내용은 굉장히 까다로워.

214
00:12:22,259 --> 00:12:27,930
쉽게 말하자면,
자연스러우면서도 놀라운 대응관계가

215
00:12:27,930 --> 00:12:30,639
두 개의 수학적 대상물 사이에서 나타나는 거야.

216
00:12:30,639 --> 00:12:33,410
방금 배운 선형 대수의 경우에는,

217
00:12:33,410 --> 00:12:38,800
벡터에서 "이중(dual)"이라는 것은
그 벡터가 가진 선형변한 성질을 말해.

218
00:12:38,800 --> 00:12:42,759
그리고 1차원으로 변환시키는 
선형변환에서 이중(dual)이란,

219
00:12:42,759 --> 00:12:45,180
공간상의 특정 벡터를 말해.

220
00:12:45,180 --> 00:12:52,250
요약하면, 내적은 투영을 이해하는데
매우 유용한 기하학적 도구야.

221
00:12:52,250 --> 00:12:53,250
 

222
00:12:53,250 --> 00:12:56,990
벡터가 같은 방향을 가리키는지를 알아내는데도 
유용한 도구지.

223
00:12:56,990 --> 00:13:01,410
이것이 아마도 너가 내적에서 기억해야 할 
가장 중요한 점일 거야.

224
00:13:01,410 --> 00:13:04,440
좀 더 깊게 보자면,
두 벡터를 함께 내적하는 것(dotting)은

225
00:13:04,440 --> 00:13:08,399
두 벡터 중 하나를 변환인자로 보는 거야.

226
00:13:08,399 --> 00:13:12,079
다시말해, 수치적으로 볼 때,
이건 강조하는게 좀 웃길수도 있는데,

227
00:13:12,079 --> 00:13:15,069
두 계산이 유사하다는 거야.

228
00:13:15,069 --> 00:13:17,010
하지만 이것이 중요한 이유는,

229
00:13:17,010 --> 00:13:19,920
수학 전반에 걸쳐서, 
너가 벡터로 다룰때라든지 할때,

230
00:13:19,920 --> 00:13:22,190
너가 제대로 이해했다면,

231
00:13:22,190 --> 00:13:26,829
언젠가 느껴질때가 있을거야.
공간속의 화살표보다는

232
00:13:26,829 --> 00:13:29,790
선형변환의 물리적 실체 이해하는 편이 
더 쉬울때가 있을거야.

233
00:13:29,790 --> 00:13:35,670
벡터를 마치 어떤 변환의 개념적 단축 표현으로 생각해.

234
00:13:35,670 --> 00:13:38,350
우리는 공간상의 화살표를 생각하는 것이

235
00:13:38,350 --> 00:13:43,129
공간에서 수선으로 투영을 생각하는 것보다 
쉽기 때문이야.

236
00:13:43,129 --> 00:13:47,610
다음 동영상에서는 "이중성(duality)" 의 또다른 멋진 예제를 보여줄거야.

237
00:13:47,610 --> 00:14:09,560
이번에는 외적(cross product) 와 관련지어서 말야.

