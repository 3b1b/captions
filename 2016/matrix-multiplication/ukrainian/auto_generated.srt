1
00:00:11,109 --> 00:00:14,676
Усім привіт! Там, де ми зупинилися, я показав, як виглядають

2
00:00:14,676 --> 00:00:18,360
лінійні перетворення та як їх представити за допомогою матриць.

3
00:00:18,360 --> 00:00:22,227
Це варто короткого підсумку, оскільки це просто дуже важливо, але, звісно, якщо вам

4
00:00:22,227 --> 00:00:26,280
здається, що це більше, ніж просто підсумок, поверніться назад і подивіться повне відео.

5
00:00:26,280 --> 00:00:29,918
Взагалі кажучи, лінійні перетворення — це функції з векторами як входами, а

6
00:00:29,918 --> 00:00:33,796
векторами — як результатами, але минулого разу я показав, як ми можемо сприймати

7
00:00:33,796 --> 00:00:37,531
їх візуально як згладжування простору таким чином, щоб лінії сітки залишалися

8
00:00:37,531 --> 00:00:41,840
паралельними та рівномірними, і таким чином, щоб початок координат залишається фіксованим.

9
00:00:41,840 --> 00:00:46,984
Ключовим висновком було те, що лінійне перетворення повністю визначається тим,

10
00:00:46,984 --> 00:00:52,260
де воно бере базисні вектори простору, що для двох вимірів означає i-hat і j-hat.

11
00:00:52,260 --> 00:00:55,189
Це тому, що будь-який інший вектор можна описати

12
00:00:55,189 --> 00:00:57,820
як лінійну комбінацію цих базисних векторів.

13
00:00:57,820 --> 00:01:03,460
Вектор із координатами x, y дорівнює x, помноженому на i-hat плюс y, помноженому на j-hat.

14
00:01:03,460 --> 00:01:06,719
Після проходження трансформації ця властивість, що лінії сітки

15
00:01:06,719 --> 00:01:10,600
залишаються паралельними та рівномірно розташованими, має чудовий наслідок.

16
00:01:10,600 --> 00:01:14,712
Місце, куди приземляється ваш вектор, буде перетвореною версією

17
00:01:14,712 --> 00:01:18,440
i-hat у х разів плюс перетвореною версією j-hat у y разів.

18
00:01:18,440 --> 00:01:23,286
Це означає, що якщо ви записуєте координати, де приземляється i-hat, і координати, де

19
00:01:23,286 --> 00:01:28,133
приземляється j-hat, ви можете обчислити, що вектор, який починається в x, y, повинен

20
00:01:28,133 --> 00:01:32,641
приземлитися на x, помножених на нові координати i-hat плюс y помножити на нові

21
00:01:32,641 --> 00:01:33,600
координати j-hat.

22
00:01:33,600 --> 00:01:38,063
Конвенція полягає в тому, щоб записати координати місця розташування

23
00:01:38,063 --> 00:01:42,463
i-hat і j-hat як стовпці матриці, і визначити цю суму масштабованих

24
00:01:42,463 --> 00:01:46,280
версій цих стовпців на x і y як множення матриці на вектор.

25
00:01:46,280 --> 00:01:52,193
Таким чином, матриця представляє конкретне лінійне перетворення, і множення матриці на

26
00:01:52,193 --> 00:01:58,040
вектор – це те, що обчислювально означає застосувати це перетворення до цього вектора.

27
00:01:58,040 --> 00:02:01,760
Гаразд, підсумовуємо, переходимо до нового матеріалу.

28
00:02:01,760 --> 00:02:07,680
Часто вам хочеться описати наслідки застосування однієї трансформації, а потім іншої.

29
00:02:07,680 --> 00:02:11,728
Наприклад, можливо, ви хочете описати, що відбувається, коли ви спочатку повертаєте

30
00:02:11,728 --> 00:02:15,440
площину на 90 градусів проти годинникової стрілки, а потім застосовуєте зсув.

31
00:02:15,440 --> 00:02:18,762
Загальний ефект тут, від початку до кінця, є іншою

32
00:02:18,762 --> 00:02:22,540
лінійною трансформацією, відмінною від обертання та зсуву.

33
00:02:22,540 --> 00:02:25,511
Це нове лінійне перетворення зазвичай називають

34
00:02:25,511 --> 00:02:29,040
композицією двох окремих перетворень, які ми застосували.

35
00:02:29,040 --> 00:02:32,627
І, як будь-яке лінійне перетворення, його можна описати

36
00:02:32,627 --> 00:02:36,280
за допомогою власної матриці, дотримуючись i-hat і j-hat.

37
00:02:36,280 --> 00:02:40,879
У цьому прикладі кінцева точка посадки для i-hat після обох перетворень

38
00:02:40,879 --> 00:02:44,840
дорівнює 1,1, тому давайте зробимо це першим стовпцем матриці.

39
00:02:44,840 --> 00:02:48,964
Подібним чином, j-hat врешті-решт опиняється в положенні

40
00:02:48,964 --> 00:02:52,800
мінус 1,0, тому ми робимо це другим стовпцем матриці.

41
00:02:52,800 --> 00:02:57,593
Ця нова матриця фіксує загальний ефект застосування

42
00:02:57,593 --> 00:03:03,400
обертання, а потім зсуву, але як одну дію, а не дві послідовні.

43
00:03:03,400 --> 00:03:05,480
Ось один спосіб подумати про цю нову матрицю.

44
00:03:05,480 --> 00:03:10,353
Якби ви взяли якийсь вектор і прокачали його через обертання, то зсув, довгий спосіб

45
00:03:10,353 --> 00:03:15,400
обчислити, де він закінчується, це спочатку помножити його ліворуч на матрицю обертання.

46
00:03:15,400 --> 00:03:20,520
Потім візьміть все, що ви отримаєте, і помножте це ліворуч на матрицю зсуву.

47
00:03:20,520 --> 00:03:27,000
Це, чисельно кажучи, що означає застосувати обертання, а потім зсув до даного вектора.

48
00:03:27,000 --> 00:03:30,817
Але все, що ви отримаєте, має бути таким же, як і застосування цієї

49
00:03:30,817 --> 00:03:34,972
нової композиційної матриці, яку ми щойно знайшли, за тим самим вектором,

50
00:03:34,972 --> 00:03:38,790
незалежно від того, який вектор ви обрали, оскільки ця нова матриця

51
00:03:38,790 --> 00:03:42,720
має фіксувати той самий загальний ефект, що й обертання, а потім зсув.

52
00:03:42,720 --> 00:03:46,773
Виходячи з того, як тут записані речі, я вважаю розумним назвати

53
00:03:46,773 --> 00:03:50,640
цю нову матрицю добутком двох оригінальних матриць, чи не так?

54
00:03:50,640 --> 00:03:54,099
Ми можемо подумати про те, як обчислити цей добуток більш

55
00:03:54,099 --> 00:03:57,440
загально за мить, але заблукати в лісі чисел дуже легко.

56
00:03:57,440 --> 00:04:01,492
Завжди пам’ятайте, що множення двох матриць, як це, має

57
00:04:01,492 --> 00:04:06,340
геометричний сенс застосування одного перетворення, а потім іншого.

58
00:04:06,340 --> 00:04:10,080
Одна річ, яка є трохи дивною, це те, що ми читаємо справа наліво.

59
00:04:10,080 --> 00:04:14,005
Спочатку ви застосовуєте перетворення, представлене матрицею праворуч,

60
00:04:14,005 --> 00:04:17,600
а потім застосовуєте перетворення, представлене матрицею ліворуч.

61
00:04:17,600 --> 00:04:21,905
Це випливає з нотації функцій, оскільки ми пишемо функції ліворуч від змінних, тому

62
00:04:21,905 --> 00:04:26,160
щоразу, коли ви створюєте дві функції, вам завжди потрібно читати їх справа наліво.

63
00:04:26,160 --> 00:04:30,080
Хороші новини для читачів івритом, погані новини для всіх нас.

64
00:04:30,080 --> 00:04:31,880
Давайте розглянемо інший приклад.

65
00:04:31,880 --> 00:04:38,240
Візьмемо матрицю зі стовпцями 1,1 і мінус 2,0, перетворення якої виглядає так.

66
00:04:38,240 --> 00:04:40,000
І назвемо це m1.

67
00:04:40,000 --> 00:04:47,840
Далі беремо матрицю зі стовпцями 0,1 і 2,0, перетворення якої виглядає так.

68
00:04:47,840 --> 00:04:50,040
І давайте назвемо цього хлопця m2.

69
00:04:50,040 --> 00:04:53,205
Загальний ефект застосування m1, потім m2 дає нам

70
00:04:53,205 --> 00:04:56,560
нове перетворення, тож давайте знайдемо його матрицю.

71
00:04:56,560 --> 00:05:00,365
Але цього разу давайте подивимося, чи зможемо ми зробити це без перегляду

72
00:05:00,365 --> 00:05:04,480
анімації, а замість цього просто використовуючи числові записи в кожній матриці.

73
00:05:04,480 --> 00:05:08,280
По-перше, нам потрібно з’ясувати, куди йде i-hat.

74
00:05:08,280 --> 00:05:12,364
Після застосування m1 нові координати i-hat, за

75
00:05:12,364 --> 00:05:16,960
визначенням, задаються першим стовпцем m1, а саме 1,1.

76
00:05:16,960 --> 00:05:21,478
Щоб побачити, що відбувається після застосування

77
00:05:21,478 --> 00:05:25,720
m2, помножте матрицю для m2 на цей вектор 1,1.

78
00:05:25,720 --> 00:05:30,860
Опрацювавши це, як я описав останнє відео, ви отримаєте вектор 2,1.

79
00:05:30,860 --> 00:05:34,160
Це буде перший стовпець композиційної матриці.

80
00:05:34,160 --> 00:05:38,011
Так само, щоб слідувати за j-капелюхом, другий стовпець

81
00:05:38,011 --> 00:05:42,000
m1 повідомляє нам, що він спочатку потрапляє на мінус 2,0.

82
00:05:42,000 --> 00:05:49,648
Потім, коли ми застосовуємо m2 до цього вектора, ви можете розрахувати векторний добуток

83
00:05:49,648 --> 00:05:57,040
матриці, щоб отримати 0, мінус 2, що стає другим стовпцем нашої композиційної матриці.

84
00:05:57,040 --> 00:05:59,729
Дозвольте мені знову розповісти про той самий процес, але

85
00:05:59,729 --> 00:06:02,373
цього разу я покажу записи змінних у кожній матриці, щоб

86
00:06:02,373 --> 00:06:05,620
показати, що одна і та ж лінія міркувань працює для будь-яких матриць.

87
00:06:05,620 --> 00:06:09,714
Це більше символів і вимагатиме більше місця, але це має бути досить

88
00:06:09,714 --> 00:06:14,580
задовільним для тих, хто раніше навчався множення матриці більш запам’ятовуванням.

89
00:06:14,580 --> 00:06:18,410
Щоб зрозуміти, куди йде i-hat, почніть із першого стовпця

90
00:06:18,410 --> 00:06:22,440
матриці праворуч, оскільки саме тут спочатку потрапляє i-hat.

91
00:06:22,440 --> 00:06:26,881
Помноживши цей стовпець на матрицю ліворуч, ви можете визначити, де

92
00:06:26,881 --> 00:06:31,780
закінчується проміжна версія i-hat після застосування другого перетворення.

93
00:06:31,780 --> 00:06:35,732
Отже, перший стовпець композиційної матриці завжди дорівнюватиме

94
00:06:35,732 --> 00:06:39,380
лівій матриці, помноженій на перший стовпець правої матриці.

95
00:06:39,380 --> 00:06:48,960
Подібним чином j-hat завжди спочатку потраплятиме у другий стовпець правої матриці.

96
00:06:48,960 --> 00:06:55,201
Отже, множення лівої матриці на цей другий стовпець дасть її остаточне

97
00:06:55,201 --> 00:07:00,740
розташування, а отже, це другий стовпець композиційної матриці.

98
00:07:00,740 --> 00:07:05,132
Зауважте, що тут багато символів, і цю формулу зазвичай навчають як щось, що потрібно

99
00:07:05,132 --> 00:07:09,320
запам’ятати, разом із певним алгоритмічним процесом, щоб допомогти її запам’ятати.

100
00:07:09,320 --> 00:07:12,748
Але я справді вважаю, що перш ніж запам’ятовувати цей процес,

101
00:07:12,748 --> 00:07:16,452
ви повинні виробити звичку думати про те, що насправді представляє

102
00:07:16,452 --> 00:07:19,660
множення матриць, застосовуючи одне перетворення за іншим.

103
00:07:19,660 --> 00:07:23,131
Повірте мені, це дасть вам набагато кращу концептуальну

104
00:07:23,131 --> 00:07:27,160
структуру, яка полегшить розуміння властивостей множення матриць.

105
00:07:27,160 --> 00:07:29,080
Наприклад, ось таке запитання.

106
00:07:29,080 --> 00:07:33,480
Чи має значення, у якому порядку ми розміщуємо дві матриці, коли ми їх множимо?

107
00:07:33,480 --> 00:07:37,760
Ну, давайте поміркуємо на простому прикладі, як той, що був раніше.

108
00:07:37,760 --> 00:07:40,953
Візьміть ножиці, які фіксують i-hat і розтискають

109
00:07:40,953 --> 00:07:43,700
j-hat праворуч, і обертайте на 90 градусів.

110
00:07:43,700 --> 00:07:47,277
Якщо ви спочатку виконуєте зсув, а потім повертаєте, ми можемо

111
00:07:47,277 --> 00:07:51,480
побачити, що i-hat закінчується на 0,1, а j-hat закінчується на мінус 1,1.

112
00:07:51,480 --> 00:07:54,000
Обидва, як правило, спрямовані близько один до одного.

113
00:07:54,000 --> 00:07:59,962
Якщо ви спочатку обертаєте, а потім виконуєте зсув, i-hat закінчується на 1,1, а

114
00:07:59,962 --> 00:08:06,440
j-hat змінюється в іншому напрямку на мінус 1,0, і вони спрямовані далі один від одного.

115
00:08:06,440 --> 00:08:12,480
Загальний ефект тут явно інший, тому, очевидно, порядок має значення.

116
00:08:12,480 --> 00:08:15,392
Зверніть увагу, думаючи в термінах трансформацій, це

117
00:08:15,392 --> 00:08:18,360
те, що ви можете зробити у своїй голові, візуалізуючи.

118
00:08:18,360 --> 00:08:21,800
Множення матриці не потрібне.

119
00:08:21,800 --> 00:08:25,927
Я пам’ятаю, коли я вперше пройшов курс лінійної алгебри, було одне домашнє

120
00:08:25,927 --> 00:08:29,780
завдання, яке просили нас довести, що множення матриць є асоціативним.

121
00:08:29,780 --> 00:08:34,854
Це означає, що якщо у вас є три матриці, A, B і C, і ви множите їх усі разом, не повинно

122
00:08:34,854 --> 00:08:39,985
мати значення, чи ви спочатку обчислюєте A помножити на B, а потім помножити результат на

123
00:08:39,985 --> 00:08:45,060
C, або якщо ви спочатку помножите B раз C, потім помножте отриманий результат на A зліва.

124
00:08:45,060 --> 00:08:48,100
Іншими словами, не має значення, де ви ставите дужки.

125
00:08:48,100 --> 00:08:52,260
Тепер, якщо ви спробуєте пропрацювати це чисельно, як я

126
00:08:52,260 --> 00:08:56,420
тоді, це буде жахливо, просто жахливо і непросвітницько.

127
00:08:56,420 --> 00:08:59,883
Але коли ви думаєте про множення матриць як про застосування

128
00:08:59,883 --> 00:09:03,460
одного перетворення за іншим, ця властивість просто тривіальна.

129
00:09:03,460 --> 00:09:05,060
Ви бачите чому?

130
00:09:05,060 --> 00:09:09,060
Це означає, що якщо ви спочатку застосували C, потім B,

131
00:09:09,060 --> 00:09:13,060
потім A, це те саме, що застосувати C, потім B, потім A.

132
00:09:13,060 --> 00:09:16,480
Я маю на увазі, що нема чого доводити, ви просто застосовуєте

133
00:09:16,480 --> 00:09:19,680
ті самі три речі одна за одною, все в тому самому порядку.

134
00:09:19,680 --> 00:09:22,080
Це може здатися обманом, але це не так.

135
00:09:22,080 --> 00:09:26,360
Це щирий доказ того, що множення матриць є асоціативним.

136
00:09:26,360 --> 00:09:31,820
І навіть краще, це гарне пояснення того, чому ця властивість має бути істинною.

137
00:09:31,820 --> 00:09:35,317
Я дійсно заохочую вас більше пограти з цією ідеєю, уявивши два

138
00:09:35,317 --> 00:09:38,647
різні перетворення, подумавши про те, що станеться, коли ви

139
00:09:38,647 --> 00:09:42,700
застосовуєте одне за одним, а потім розробите матричний добуток чисельно.

140
00:09:42,700 --> 00:09:47,460
Повірте мені, це той вид гри, який справді захоплює ідею.

141
00:09:47,460 --> 00:09:52,060
У наступному відео я почну говорити про розширення цих ідей за межі двох вимірів.

142
00:09:52,060 --> 00:09:52,060
Побачимось!

