1
00:00:10,940 --> 00:00:13,191
Усім привіт! Там, де ми зупинилися, я показав, 

2
00:00:13,191 --> 00:00:16,880
як виглядають лінійні перетворення та як їх представити за допомогою матриць.

3
00:00:18,320 --> 00:00:21,293
Це варто короткого підсумку, оскільки це просто дуже важливо, але, звісно, 

4
00:00:21,293 --> 00:00:23,435
якщо вам здається, що це більше, ніж просто підсумок, 

5
00:00:23,435 --> 00:00:25,140
поверніться назад і подивіться повне відео.

6
00:00:25,779 --> 00:00:29,286
Взагалі кажучи, лінійні перетворення — це функції з векторами як входами, 

7
00:00:29,286 --> 00:00:32,129
а векторами — як результатами, але минулого разу я показав, 

8
00:00:32,129 --> 00:00:35,635
як ми можемо сприймати їх візуально як згладжування простору таким чином, 

9
00:00:35,635 --> 00:00:39,047
щоб лінії сітки залишалися паралельними та рівномірними, і таким чином, 

10
00:00:39,047 --> 00:00:41,180
щоб початок координат залишається фіксованим.

11
00:00:41,820 --> 00:00:46,520
Ключовим висновком було те, що лінійне перетворення повністю визначається тим, 

12
00:00:46,520 --> 00:00:51,340
де воно бере базисні вектори простору, що для двох вимірів означає i-hat і j-hat.

13
00:00:51,340 --> 00:00:54,501
Це тому, що будь-який інший вектор можна описати 

14
00:00:54,501 --> 00:00:57,340
як лінійну комбінацію цих базисних векторів.

15
00:00:57,940 --> 00:01:02,340
Вектор із координатами x, y дорівнює x, помноженому на i-hat плюс y, помноженому на j-hat.

16
00:01:03,460 --> 00:01:05,686
Після проходження трансформації ця властивість, 

17
00:01:05,686 --> 00:01:09,860
що лінії сітки залишаються паралельними та рівномірно розташованими, має чудовий наслідок.

18
00:01:10,500 --> 00:01:14,203
Місце, куди приземляється ваш вектор, буде перетвореною версією 

19
00:01:14,203 --> 00:01:17,560
i-hat у х разів плюс перетвореною версією j-hat у y разів.

20
00:01:18,240 --> 00:01:22,707
Це означає, що якщо ви записуєте координати, де приземляється i-hat, і координати, 

21
00:01:22,707 --> 00:01:27,067
де приземляється j-hat, ви можете обчислити, що вектор, який починається в x, y, 

22
00:01:27,067 --> 00:01:31,804
повинен приземлитися на x, помножених на нові координати i-hat плюс y помножити на нові 

23
00:01:31,804 --> 00:01:32,720
координати j-hat.

24
00:01:33,560 --> 00:01:37,714
Конвенція полягає в тому, щоб записати координати місця розташування 

25
00:01:37,714 --> 00:01:41,807
i-hat і j-hat як стовпці матриці, і визначити цю суму масштабованих 

26
00:01:41,807 --> 00:01:45,360
версій цих стовпців на x і y як множення матриці на вектор.

27
00:01:46,050 --> 00:01:50,194
Таким чином, матриця представляє конкретне лінійне перетворення, 

28
00:01:50,194 --> 00:01:55,167
і множення матриці на вектор – це те, що обчислювально означає застосувати це 

29
00:01:55,167 --> 00:01:57,080
перетворення до цього вектора.

30
00:01:58,800 --> 00:02:00,880
Гаразд, підсумовуємо, переходимо до нового матеріалу.

31
00:02:01,600 --> 00:02:07,000
Часто вам хочеться описати наслідки застосування однієї трансформації, а потім іншої.

32
00:02:07,620 --> 00:02:10,006
Наприклад, можливо, ви хочете описати, що відбувається, 

33
00:02:10,006 --> 00:02:13,372
коли ви спочатку повертаєте площину на 90 градусів проти годинникової стрілки, 

34
00:02:13,372 --> 00:02:14,480
а потім застосовуєте зсув.

35
00:02:15,260 --> 00:02:19,820
Загальний ефект тут, від початку до кінця, є іншою лінійною трансформацією, 

36
00:02:19,820 --> 00:02:21,800
відмінною від обертання та зсуву.

37
00:02:22,280 --> 00:02:27,145
Це нове лінійне перетворення зазвичай називають композицією двох окремих перетворень, 

38
00:02:27,145 --> 00:02:28,220
які ми застосували.

39
00:02:28,920 --> 00:02:33,882
І, як будь-яке лінійне перетворення, його можна описати за допомогою власної матриці, 

40
00:02:33,882 --> 00:02:35,440
дотримуючись i-hat і j-hat.

41
00:02:36,020 --> 00:02:41,218
У цьому прикладі кінцева точка посадки для i-hat після обох перетворень дорівнює 1,1, 

42
00:02:41,218 --> 00:02:44,120
тому давайте зробимо це першим стовпцем матриці.

43
00:02:44,960 --> 00:02:49,225
Подібним чином, j-hat врешті-решт опиняється в положенні мінус 1,0, 

44
00:02:49,225 --> 00:02:51,860
тому ми робимо це другим стовпцем матриці.

45
00:02:52,680 --> 00:02:57,424
Ця нова матриця фіксує загальний ефект застосування обертання, 

46
00:02:57,424 --> 00:03:01,340
а потім зсуву, але як одну дію, а не дві послідовні.

47
00:03:03,040 --> 00:03:04,880
Ось один спосіб подумати про цю нову матрицю.

48
00:03:05,420 --> 00:03:09,277
Якби ви взяли якийсь вектор і прокачали його через обертання, то зсув, 

49
00:03:09,277 --> 00:03:13,841
довгий спосіб обчислити, де він закінчується, це спочатку помножити його ліворуч на 

50
00:03:13,841 --> 00:03:14,820
матрицю обертання.

51
00:03:15,320 --> 00:03:19,800
Потім візьміть все, що ви отримаєте, і помножте це ліворуч на матрицю зсуву.

52
00:03:20,460 --> 00:03:26,060
Це, чисельно кажучи, що означає застосувати обертання, а потім зсув до даного вектора.

53
00:03:26,800 --> 00:03:30,243
Але все, що ви отримаєте, має бути таким же, як і застосування цієї 

54
00:03:30,243 --> 00:03:33,991
нової композиційної матриці, яку ми щойно знайшли, за тим самим вектором, 

55
00:03:33,991 --> 00:03:37,435
незалежно від того, який вектор ви обрали, оскільки ця нова матриця 

56
00:03:37,435 --> 00:03:40,980
має фіксувати той самий загальний ефект, що й обертання, а потім зсув.

57
00:03:42,480 --> 00:03:46,011
Виходячи з того, як тут записані речі, я вважаю розумним назвати 

58
00:03:46,011 --> 00:03:49,380
цю нову матрицю добутком двох оригінальних матриць, чи не так?

59
00:03:50,420 --> 00:03:54,540
Ми можемо подумати про те, як обчислити цей добуток більш загально за мить, 

60
00:03:54,540 --> 00:03:56,600
але заблукати в лісі чисел дуже легко.

61
00:03:56,600 --> 00:03:59,846
Завжди пам’ятайте, що множення двох матриць, як це, 

62
00:03:59,846 --> 00:04:04,280
має геометричний сенс застосування одного перетворення, а потім іншого.

63
00:04:05,860 --> 00:04:09,660
Одна річ, яка є трохи дивною, це те, що ми читаємо справа наліво.

64
00:04:10,040 --> 00:04:13,527
Спочатку ви застосовуєте перетворення, представлене матрицею праворуч, 

65
00:04:13,527 --> 00:04:16,720
а потім застосовуєте перетворення, представлене матрицею ліворуч.

66
00:04:17,399 --> 00:04:21,212
Це випливає з нотації функцій, оскільки ми пишемо функції ліворуч від змінних, 

67
00:04:21,212 --> 00:04:25,460
тому щоразу, коли ви створюєте дві функції, вам завжди потрібно читати їх справа наліво.

68
00:04:25,920 --> 00:04:28,980
Хороші новини для читачів івритом, погані новини для всіх нас.

69
00:04:29,880 --> 00:04:31,100
Давайте розглянемо інший приклад.

70
00:04:31,760 --> 00:04:36,860
Візьмемо матрицю зі стовпцями 1,1 і мінус 2,0, перетворення якої виглядає так.

71
00:04:37,980 --> 00:04:39,060
І назвемо це m1.

72
00:04:40,100 --> 00:04:45,700
Далі беремо матрицю зі стовпцями 0,1 і 2,0, перетворення якої виглядає так.

73
00:04:47,520 --> 00:04:49,240
І давайте назвемо цього хлопця m2.

74
00:04:49,920 --> 00:04:53,778
Загальний ефект застосування m1, потім m2 дає нам нове перетворення, 

75
00:04:53,778 --> 00:04:55,680
тож давайте знайдемо його матрицю.

76
00:04:56,280 --> 00:05:00,414
Але цього разу давайте подивимося, чи зможемо ми зробити це без перегляду анімації, 

77
00:05:00,414 --> 00:05:03,860
а замість цього просто використовуючи числові записи в кожній матриці.

78
00:05:04,740 --> 00:05:07,140
По-перше, нам потрібно з’ясувати, куди йде i-hat.

79
00:05:08,040 --> 00:05:12,788
Після застосування m1 нові координати i-hat, за визначенням, 

80
00:05:12,788 --> 00:05:15,980
задаються першим стовпцем m1, а саме 1,1.

81
00:05:16,780 --> 00:05:20,529
Щоб побачити, що відбувається після застосування m2, 

82
00:05:20,529 --> 00:05:23,500
помножте матрицю для m2 на цей вектор 1,1.

83
00:05:25,300 --> 00:05:29,880
Опрацювавши це, як я описав останнє відео, ви отримаєте вектор 2,1.

84
00:05:30,700 --> 00:05:33,100
Це буде перший стовпець композиційної матриці.

85
00:05:34,520 --> 00:05:38,480
Так само, щоб слідувати за j-капелюхом, другий стовпець m1 повідомляє нам, 

86
00:05:38,480 --> 00:05:40,540
що він спочатку потрапляє на мінус 2,0.

87
00:05:42,700 --> 00:05:46,200
Потім, коли ми застосовуємо m2 до цього вектора, 

88
00:05:46,200 --> 00:05:51,485
ви можете розрахувати векторний добуток матриці, щоб отримати 0, мінус 2, 

89
00:05:51,485 --> 00:05:55,200
що стає другим стовпцем нашої композиційної матриці.

90
00:05:56,640 --> 00:05:59,056
Дозвольте мені знову розповісти про той самий процес, 

91
00:05:59,056 --> 00:06:01,608
але цього разу я покажу записи змінних у кожній матриці, 

92
00:06:01,608 --> 00:06:04,920
щоб показати, що одна і та ж лінія міркувань працює для будь-яких матриць.

93
00:06:05,540 --> 00:06:10,379
Це більше символів і вимагатиме більше місця, але це має бути досить задовільним для тих, 

94
00:06:10,379 --> 00:06:13,660
хто раніше навчався множення матриці більш запам’ятовуванням.

95
00:06:14,460 --> 00:06:18,675
Щоб зрозуміти, куди йде i-hat, почніть із першого стовпця матриці праворуч, 

96
00:06:18,675 --> 00:06:21,060
оскільки саме тут спочатку потрапляє i-hat.

97
00:06:22,000 --> 00:06:25,772
Помноживши цей стовпець на матрицю ліворуч, ви можете визначити, 

98
00:06:25,772 --> 00:06:30,300
де закінчується проміжна версія i-hat після застосування другого перетворення.

99
00:06:31,620 --> 00:06:35,767
Отже, перший стовпець композиційної матриці завжди дорівнюватиме лівій матриці, 

100
00:06:35,767 --> 00:06:38,100
помноженій на перший стовпець правої матриці.

101
00:06:42,160 --> 00:06:47,140
Подібним чином j-hat завжди спочатку потраплятиме у другий стовпець правої матриці.

102
00:06:48,940 --> 00:06:53,722
Отже, множення лівої матриці на цей другий стовпець дасть її остаточне розташування, 

103
00:06:53,722 --> 00:06:56,480
а отже, це другий стовпець композиційної матриці.

104
00:06:56,480 --> 00:07:02,012
Зауважте, що тут багато символів, і цю формулу зазвичай навчають як щось, 

105
00:07:02,012 --> 00:07:06,871
що потрібно запам’ятати, разом із певним алгоритмічним процесом, 

106
00:07:06,871 --> 00:07:09,040
щоб допомогти її запам’ятати.

107
00:07:09,160 --> 00:07:12,389
Але я справді вважаю, що перш ніж запам’ятовувати цей процес, 

108
00:07:12,389 --> 00:07:16,816
ви повинні виробити звичку думати про те, що насправді представляє множення матриць, 

109
00:07:16,816 --> 00:07:18,900
застосовуючи одне перетворення за іншим.

110
00:07:19,620 --> 00:07:23,318
Повірте мені, це дасть вам набагато кращу концептуальну структуру, 

111
00:07:23,318 --> 00:07:26,300
яка полегшить розуміння властивостей множення матриць.

112
00:07:27,060 --> 00:07:28,360
Наприклад, ось таке запитання.

113
00:07:28,880 --> 00:07:32,840
Чи має значення, у якому порядку ми розміщуємо дві матриці, коли ми їх множимо?

114
00:07:33,620 --> 00:07:37,000
Ну, давайте поміркуємо на простому прикладі, як той, що був раніше.

115
00:07:37,640 --> 00:07:41,316
Візьміть ножиці, які фіксують i-hat і розтискають j-hat праворуч, 

116
00:07:41,316 --> 00:07:42,820
і обертайте на 90 градусів.

117
00:07:43,600 --> 00:07:47,521
Якщо ви спочатку виконуєте зсув, а потім повертаєте, ми можемо побачити, 

118
00:07:47,521 --> 00:07:50,960
що i-hat закінчується на 0,1, а j-hat закінчується на мінус 1,1.

119
00:07:51,320 --> 00:07:53,060
Обидва, як правило, спрямовані близько один до одного.

120
00:07:53,860 --> 00:07:59,310
Якщо ви спочатку обертаєте, а потім виконуєте зсув, i-hat закінчується на 1,1, 

121
00:07:59,310 --> 00:08:05,520
а j-hat змінюється в іншому напрямку на мінус 1,0, і вони спрямовані далі один від одного.

122
00:08:06,380 --> 00:08:12,440
Загальний ефект тут явно інший, тому, очевидно, порядок має значення.

123
00:08:12,700 --> 00:08:15,101
Зверніть увагу, думаючи в термінах трансформацій, 

124
00:08:15,101 --> 00:08:17,840
це те, що ви можете зробити у своїй голові, візуалізуючи.

125
00:08:18,220 --> 00:08:19,900
Множення матриці не потрібне.

126
00:08:21,480 --> 00:08:25,958
Я пам’ятаю, коли я вперше пройшов курс лінійної алгебри, було одне домашнє завдання, 

127
00:08:25,958 --> 00:08:29,120
яке просили нас довести, що множення матриць є асоціативним.

128
00:08:29,560 --> 00:08:33,867
Це означає, що якщо у вас є три матриці, A, B і C, і ви множите їх усі разом, 

129
00:08:33,867 --> 00:08:37,733
не повинно мати значення, чи ви спочатку обчислюєте A помножити на B, 

130
00:08:37,733 --> 00:08:41,819
а потім помножити результат на C, або якщо ви спочатку помножите B раз C, 

131
00:08:41,819 --> 00:08:44,360
потім помножте отриманий результат на A зліва.

132
00:08:44,940 --> 00:08:47,400
Іншими словами, не має значення, де ви ставите дужки.

133
00:08:48,380 --> 00:08:51,740
Тепер, якщо ви спробуєте пропрацювати це чисельно, 

134
00:08:51,740 --> 00:08:55,760
як я тоді, це буде жахливо, просто жахливо і непросвітницько.

135
00:08:55,760 --> 00:08:59,213
Але коли ви думаєте про множення матриць як про застосування 

136
00:08:59,213 --> 00:09:02,780
одного перетворення за іншим, ця властивість просто тривіальна.

137
00:09:03,300 --> 00:09:04,000
Ви бачите чому?

138
00:09:04,860 --> 00:09:08,620
Це означає, що якщо ви спочатку застосували C, потім B, 

139
00:09:08,620 --> 00:09:12,380
потім A, це те саме, що застосувати C, потім B, потім A.

140
00:09:12,820 --> 00:09:15,837
Я маю на увазі, що нема чого доводити, ви просто застосовуєте 

141
00:09:15,837 --> 00:09:18,660
ті самі три речі одна за одною, все в тому самому порядку.

142
00:09:19,460 --> 00:09:21,540
Це може здатися обманом, але це не так.

143
00:09:21,540 --> 00:09:25,900
Це щирий доказ того, що множення матриць є асоціативним.

144
00:09:25,900 --> 00:09:30,680
І навіть краще, це гарне пояснення того, чому ця властивість має бути істинною.

145
00:09:31,560 --> 00:09:34,312
Я дійсно заохочую вас більше пограти з цією ідеєю, 

146
00:09:34,312 --> 00:09:37,767
уявивши два різні перетворення, подумавши про те, що станеться, 

147
00:09:37,767 --> 00:09:42,140
коли ви застосовуєте одне за одним, а потім розробите матричний добуток чисельно.

148
00:09:42,600 --> 00:09:46,440
Повірте мені, це той вид гри, який справді захоплює ідею.

149
00:09:47,200 --> 00:09:51,420
У наступному відео я почну говорити про розширення цих ідей за межі двох вимірів.

150
00:09:52,020 --> 00:09:52,180
Побачимось!

