1
00:00:10,940 --> 00:00:12,861
안녕하세요 여러분, 지난번에 이어 선형 

2
00:00:12,861 --> 00:00:14,696
변환이 어떤 모습인지, 그리고 행렬을 

3
00:00:14,696 --> 00:00:16,880
사용하여 이를 표현하는 방법을 보여드렸습니다.

4
00:00:18,320 --> 00:00:20,366
이것은 매우 중요하기 때문에 빠르게 요약할 

5
00:00:20,366 --> 00:00:22,667
가치가 있지만, 물론 이것이 단순한 요약 이상의 

6
00:00:22,667 --> 00:00:25,140
것처럼 느껴지면 돌아가서 전체 비디오를 시청하십시오.

7
00:00:25,780 --> 00:00:28,515
기술적으로 말하면 선형 변환은 벡터를 입력으로, 

8
00:00:28,515 --> 00:00:30,845
벡터를 출력으로 사용하는 함수이지만 지난 

9
00:00:30,845 --> 00:00:33,277
시간에 그리드 선이 평행하고 균일한 간격을 

10
00:00:33,277 --> 00:00:35,911
유지하고 원점을 유지하는 방식으로 공간 주위를 

11
00:00:35,911 --> 00:00:38,444
스무딩하는 것으로 시각적으로 생각할 수 있는 

12
00:00:38,444 --> 00:00:41,180
방법을 보여주었습니다. 고정된 상태로 유지됩니다.

13
00:00:41,820 --> 00:00:44,687
핵심 내용은 선형 변환이 공간의 기본 벡터를 

14
00:00:44,687 --> 00:00:47,784
취하는 위치에 따라 완전히 결정된다는 것입니다. 

15
00:00:47,784 --> 00:00:50,651
이는 2차원의 경우 i-hat과 j-hat을 

16
00:00:50,651 --> 00:00:51,340
의미합니다.

17
00:00:51,340 --> 00:00:54,130
이는 다른 벡터가 해당 기저 벡터의 

18
00:00:54,130 --> 00:00:57,340
선형 조합으로 설명될 수 있기 때문입니다.

19
00:00:57,940 --> 00:00:59,999
x, y 좌표를 갖는 벡터는 x 곱하기 

20
00:00:59,999 --> 00:01:02,340
i-hat 더하기 y 곱하기 j-hat입니다.

21
00:01:03,460 --> 00:01:06,545
변환을 거친 후에도 그리드 선이 평행하고 균일한 

22
00:01:06,545 --> 00:01:09,860
간격을 유지하는 이 속성은 놀라운 결과를 가져옵니다.

23
00:01:10,500 --> 00:01:14,096
벡터가 착지하는 장소는 변환된 i-hat 버전의 

24
00:01:14,096 --> 00:01:17,560
x배와 변환된 j-hat 버전의 y배가 됩니다.

25
00:01:18,240 --> 00:01:21,377
즉, i-hat이 착지하는 좌표와 j-hat이 

26
00:01:21,377 --> 00:01:23,669
착지하는 좌표를 기록해 두면 x, 

27
00:01:23,669 --> 00:01:27,169
y에서 시작하는 벡터가 i-hat과 y의 새 좌표의 

28
00:01:27,169 --> 00:01:30,548
x배에 착지해야 한다는 것을 계산할 수 있습니다. 

29
00:01:30,548 --> 00:01:32,720
j-hat의 새 좌표를 곱합니다.

30
00:01:33,560 --> 00:01:36,542
규칙은 i-hat과 j-hat이 위치하는 

31
00:01:36,542 --> 00:01:39,395
좌표를 행렬의 열로 기록하고 해당 열의 

32
00:01:39,395 --> 00:01:41,988
스케일링된 버전의 합계를 x와 y로 

33
00:01:41,988 --> 00:01:45,360
정의하여 행렬-벡터 곱셈으로 정의하는 것입니다.

34
00:01:46,050 --> 00:01:49,999
이러한 방식으로 행렬은 특정 선형 변환을 나타내며, 

35
00:01:49,999 --> 00:01:53,403
행렬에 벡터를 곱하는 것은 해당 변환을 해당 

36
00:01:53,403 --> 00:01:57,080
벡터에 적용한다는 것이 계산상 의미하는 것입니다.

37
00:01:58,800 --> 00:02:00,880
좋습니다. 새로운 내용을 요약해 보겠습니다.

38
00:02:01,600 --> 00:02:04,408
한 변환을 적용한 후 다른 변환을 적용할 때의 

39
00:02:04,408 --> 00:02:07,000
효과를 설명하고 싶은 경우가 종종 있습니다.

40
00:02:07,620 --> 00:02:09,637
예를 들어, 먼저 평면을 시계 반대 

41
00:02:09,637 --> 00:02:11,655
방향으로 90도 회전한 다음 전단을 

42
00:02:11,655 --> 00:02:14,480
적용하면 어떤 일이 발생하는지 설명할 수 있습니다.

43
00:02:15,260 --> 00:02:18,660
여기에서 처음부터 끝까지 전반적인 효과는 회전 

44
00:02:18,660 --> 00:02:21,800
및 전단과는 다른 또 다른 선형 변환입니다.

45
00:02:22,280 --> 00:02:25,068
이 새로운 선형 변환은 일반적으로 우리가 

46
00:02:25,068 --> 00:02:28,220
적용한 두 가지 개별 변환의 구성이라고 합니다.

47
00:02:28,920 --> 00:02:32,008
그리고 모든 선형 변환과 마찬가지로 i-hat과 

48
00:02:32,008 --> 00:02:35,440
j-hat을 따르면서 자체 행렬로 설명할 수 있습니다.

49
00:02:36,020 --> 00:02:38,632
이 예에서 두 변환 후 i-hat의 

50
00:02:38,632 --> 00:02:41,245
최종 착지 지점은 1,1이므로 이를 

51
00:02:41,245 --> 00:02:44,120
행렬의 첫 번째 열로 만들어 보겠습니다.

52
00:02:44,960 --> 00:02:48,163
마찬가지로 j-hat은 궁극적으로 음수 1,0 

53
00:02:48,163 --> 00:02:51,860
위치에서 끝나므로 이를 행렬의 두 번째 열로 만듭니다.

54
00:02:52,680 --> 00:02:55,463
이 새로운 매트릭스는 회전을 적용한 다음 전단을 

55
00:02:55,463 --> 00:02:57,937
적용하는 전체적인 효과를 포착합니다. 단, 

56
00:02:57,937 --> 00:03:00,721
두 개의 연속 동작이 아닌 하나의 단일 동작으로 

57
00:03:00,721 --> 00:03:01,340
수행됩니다.

58
00:03:03,040 --> 00:03:04,122
여기에 새로운 행렬에 대해 생각하는 

59
00:03:04,122 --> 00:03:04,880
한 가지 방법이 있습니다.

60
00:03:05,420 --> 00:03:09,046
벡터를 가져와서 회전과 전단을 통해 펌핑하려는 경우 

61
00:03:09,046 --> 00:03:12,297
벡터가 끝나는 위치를 계산하는 긴 방법은 먼저 

62
00:03:12,297 --> 00:03:15,798
왼쪽에 회전 행렬을 곱한 다음 얻은 값을 가져와서 

63
00:03:15,798 --> 00:03:19,049
벡터에 곱하는 것입니다. 전단 매트릭스에 의해 

64
00:03:19,049 --> 00:03:19,800
남겨집니다.

65
00:03:20,460 --> 00:03:23,376
이는 수치적으로 말하면 주어진 벡터에 회전을 

66
00:03:23,376 --> 00:03:26,060
적용한 다음 전단을 적용한다는 의미입니다.

67
00:03:26,800 --> 00:03:29,612
그러나 무엇을 얻든, 어떤 벡터를 선택하든 

68
00:03:29,612 --> 00:03:32,307
동일한 벡터로 방금 찾은 이 새로운 구성 

69
00:03:32,307 --> 00:03:34,886
행렬을 적용하는 것과 동일해야 합니다. 

70
00:03:34,886 --> 00:03:37,581
왜냐하면 이 새로운 행렬은 회전 및 전단 

71
00:03:37,581 --> 00:03:40,980
동작과 동일한 전체 효과를 캡처해야 하기 때문입니다.

72
00:03:42,480 --> 00:03:44,579
여기에 적힌 내용을 토대로 이 새로운 

73
00:03:44,579 --> 00:03:46,780
행렬을 원래 두 행렬의 곱이라고 부르는 

74
00:03:46,780 --> 00:03:49,380
것이 합리적이라고 생각합니다. 그렇지 않습니까?

75
00:03:50,420 --> 00:03:52,633
우리는 그 곱을 좀 더 일반적으로 계산하는 

76
00:03:52,633 --> 00:03:54,478
방법을 잠시 생각해 볼 수 있지만, 

77
00:03:54,478 --> 00:03:56,600
숫자의 숲에서 길을 잃기가 너무 쉽습니다.

78
00:03:56,600 --> 00:03:58,987
이와 같이 두 행렬을 곱하는 것은 하나의 

79
00:03:58,987 --> 00:04:01,477
변환을 적용한 다음 다른 변환을 적용한다는 

80
00:04:01,477 --> 00:04:04,280
기하학적 의미를 갖는다는 것을 항상 기억하십시오.

81
00:04:05,860 --> 00:04:07,528
여기서 좀 이상한 점 중 하나는 

82
00:04:07,528 --> 00:04:09,660
오른쪽에서 왼쪽으로 읽게 된다는 것입니다.

83
00:04:10,040 --> 00:04:13,311
먼저 오른쪽 행렬로 표시되는 변환을 적용한 

84
00:04:13,311 --> 00:04:16,720
다음 왼쪽 행렬로 표시되는 변환을 적용합니다.

85
00:04:17,399 --> 00:04:19,497
이는 함수 표기법에서 유래합니다. 

86
00:04:19,497 --> 00:04:22,147
변수의 왼쪽에 함수를 작성하므로 두 함수를 

87
00:04:22,147 --> 00:04:25,460
작성할 때마다 항상 오른쪽에서 왼쪽으로 읽어야 합니다.

88
00:04:25,920 --> 00:04:27,489
히브리어 독자들에게는 좋은 소식이고 

89
00:04:27,489 --> 00:04:28,980
나머지 우리에게는 나쁜 소식입니다.

90
00:04:29,880 --> 00:04:31,100
또 다른 예를 살펴보겠습니다.

91
00:04:31,760 --> 00:04:34,055
열 1,1과 음수 2,0이 있는 

92
00:04:34,055 --> 00:04:36,860
행렬을 가져오면 변환은 다음과 같습니다.

93
00:04:37,980 --> 00:04:39,060
그리고 그것을 M1이라고 부르자.

94
00:04:40,100 --> 00:04:42,602
다음으로, 0,1과 2,0 열이 있는 

95
00:04:42,602 --> 00:04:45,700
행렬을 가져옵니다. 그 변환은 다음과 같습니다.

96
00:04:47,520 --> 00:04:49,240
그리고 그 사람을 M2라고 부르자.

97
00:04:49,920 --> 00:04:52,616
M1과 M2를 적용한 총 효과는 새로운 

98
00:04:52,616 --> 00:04:55,680
변환을 제공하므로 해당 행렬을 찾아보겠습니다.

99
00:04:56,280 --> 00:04:58,885
하지만 이번에는 애니메이션을 보지 않고 

100
00:04:58,885 --> 00:05:01,372
대신 각 행렬의 숫자 항목을 사용하여 

101
00:05:01,372 --> 00:05:03,860
이를 수행할 수 있는지 살펴보겠습니다.

102
00:05:04,740 --> 00:05:07,140
먼저, i-hat이 어디로 가는지 알아내야 합니다.

103
00:05:08,040 --> 00:05:12,146
M1을 적용한 후 정의에 따라 i-hat의 새 좌표는 

104
00:05:12,146 --> 00:05:15,980
M1의 첫 번째 열, 즉 1,1에 의해 제공됩니다.

105
00:05:16,780 --> 00:05:20,398
M2를 적용한 후 어떤 일이 발생하는지 확인하려면 

106
00:05:20,398 --> 00:05:23,500
M2의 행렬에 해당 벡터 1,1을 곱합니다.

107
00:05:25,300 --> 00:05:27,296
이를 해결하면 지난 비디오에서 

108
00:05:27,296 --> 00:05:29,880
설명한 대로 벡터 2,1을 얻게 됩니다.

109
00:05:30,700 --> 00:05:33,100
이는 컴포지션 매트릭스의 첫 번째 열이 됩니다.

110
00:05:34,520 --> 00:05:37,530
마찬가지로 j-hat에 따르면 M1의 두 번째 

111
00:05:37,530 --> 00:05:40,540
열은 먼저 음수 2,0에 도달했음을 알려줍니다.

112
00:05:42,700 --> 00:05:46,318
그런 다음 해당 벡터에 M2를 적용하면 

113
00:05:46,318 --> 00:05:49,114
행렬-벡터 곱을 계산하여 0, 

114
00:05:49,114 --> 00:05:53,226
음수 2를 얻을 수 있으며 이는 구성 행렬의 

115
00:05:53,226 --> 00:05:55,200
두 번째 열이 됩니다.

116
00:05:56,640 --> 00:05:58,588
동일한 과정을 다시 설명하겠습니다. 

117
00:05:58,588 --> 00:06:01,218
하지만 이번에는 동일한 추론 방식이 모든 행렬에 

118
00:06:01,218 --> 00:06:03,751
적용된다는 것을 보여주기 위해 각 행렬의 변수 

119
00:06:03,751 --> 00:06:04,920
항목을 표시하겠습니다.

120
00:06:05,540 --> 00:06:07,908
이는 기호가 더 많고 더 많은 공간이 

121
00:06:07,908 --> 00:06:10,727
필요하지만 이전에 더 암기적인 방식으로 행렬 

122
00:06:10,727 --> 00:06:13,660
곱셈을 배운 사람에게는 꽤 만족스러울 것입니다.

123
00:06:14,460 --> 00:06:16,439
i-hat이 어디로 가는지 따라가려면 먼저 

124
00:06:16,439 --> 00:06:18,337
오른쪽 행렬의 첫 번째 열을 살펴보세요. 

125
00:06:18,337 --> 00:06:20,565
i-hat이 처음에 도착하는 곳이 바로 이곳이기 

126
00:06:20,565 --> 00:06:21,060
때문입니다.

127
00:06:22,000 --> 00:06:24,898
해당 열에 왼쪽 행렬을 곱하면 두 번째 

128
00:06:24,898 --> 00:06:27,533
변환을 적용한 후 i-hat의 중간 

129
00:06:27,533 --> 00:06:30,300
버전이 끝나는 위치를 알 수 있습니다.

130
00:06:31,620 --> 00:06:34,975
따라서 구성 행렬의 첫 번째 열은 항상 왼쪽 행렬과 

131
00:06:34,975 --> 00:06:38,100
오른쪽 행렬의 첫 번째 열을 곱한 것과 같습니다.

132
00:06:42,160 --> 00:06:44,592
마찬가지로, j-hat은 항상 처음에 

133
00:06:44,592 --> 00:06:47,140
오른쪽 행렬의 두 번째 열에 착륙합니다.

134
00:06:48,940 --> 00:06:51,721
따라서 왼쪽 행렬에 이 두 번째 열을 

135
00:06:51,721 --> 00:06:54,503
곱하면 최종 위치가 제공되므로 이것이 

136
00:06:54,503 --> 00:06:57,020
구성 행렬의 두 번째 열이 됩니다.

137
00:07:00,620 --> 00:07:02,455
여기에는 많은 기호가 있으며, 

138
00:07:02,455 --> 00:07:05,477
이 공식을 기억하는 데 도움이 되는 특정 알고리즘 

139
00:07:05,477 --> 00:07:08,284
프로세스와 함께 외워야 할 것으로 배우는 것이 

140
00:07:08,284 --> 00:07:09,040
일반적입니다.

141
00:07:09,160 --> 00:07:12,156
하지만 저는 그 과정을 기억하기 전에 행렬 

142
00:07:12,156 --> 00:07:15,528
곱셈이 실제로 무엇을 나타내는지 생각하고 변환을 

143
00:07:15,528 --> 00:07:18,900
하나씩 적용하는 습관을 들여야 한다고 생각합니다.

144
00:07:19,620 --> 00:07:21,876
저를 믿으십시오. 이것은 행렬 곱셈의 속성을 

145
00:07:21,876 --> 00:07:24,043
훨씬 더 쉽게 이해할 수 있게 해주는 훨씬 

146
00:07:24,043 --> 00:07:26,300
더 나은 개념적 프레임워크를 제공할 것입니다.

147
00:07:27,060 --> 00:07:28,360
예를 들어, 여기에 질문이 있습니다.

148
00:07:28,880 --> 00:07:30,750
두 행렬을 곱할 때 두 행렬을 

149
00:07:30,750 --> 00:07:32,840
어떤 순서로 넣는 것이 중요한가요?

150
00:07:33,620 --> 00:07:37,000
자, 앞서 말한 것과 같은 간단한 예를 생각해 봅시다.

151
00:07:37,640 --> 00:07:40,282
i-hat을 고정하고 j-hat을 오른쪽으로 

152
00:07:40,282 --> 00:07:42,820
밀어내는 가위를 사용하고 90도 회전합니다.

153
00:07:43,600 --> 00:07:45,784
먼저 전단을 수행한 다음 회전하면 

154
00:07:45,784 --> 00:07:48,430
i-hat이 0,1로 끝나고 j-hat이 

155
00:07:48,430 --> 00:07:50,960
-1,1로 끝나는 것을 볼 수 있습니다.

156
00:07:51,320 --> 00:07:53,060
둘 다 일반적으로 서로 가깝게 가리키고 있습니다.

157
00:07:53,860 --> 00:07:57,797
먼저 회전한 다음 전단을 수행하면 i-hat은 

158
00:07:57,797 --> 00:08:01,431
1,1에서 끝나고 j-hat은 -1,0에서 

159
00:08:01,431 --> 00:08:05,520
다른 방향으로 벗어나서 더 멀리 떨어져 있습니다.

160
00:08:06,380 --> 00:08:08,346
여기서 전체적인 효과는 분명히 

161
00:08:08,346 --> 00:08:10,660
다르므로 순서가 전적으로 중요합니다.

162
00:08:12,200 --> 00:08:15,020
변형의 관점에서 생각함으로써 시각화를 통해 머리 

163
00:08:15,020 --> 00:08:17,840
속에서 할 수 있는 일이 있다는 점에 주목하세요.

164
00:08:18,220 --> 00:08:19,900
행렬 곱셈이 필요하지 않습니다.

165
00:08:21,480 --> 00:08:25,372
제가 처음 선형대수학을 수강했을 때 행렬 곱셈이 

166
00:08:25,372 --> 00:08:29,120
결합적이라는 것을 증명하라는 숙제가 있었습니다.

167
00:08:29,560 --> 00:08:32,543
이는 A, B, C라는 세 개의 행렬이 있고 

168
00:08:32,543 --> 00:08:35,527
이를 모두 곱하는 경우 먼저 A 곱하기 B를 

169
00:08:35,527 --> 00:08:38,392
계산한 다음 그 결과에 C를 곱하거나 먼저 

170
00:08:38,392 --> 00:08:41,376
B를 곱해도 문제가 되지 않음을 의미합니다. 

171
00:08:41,376 --> 00:08:44,360
C를 구하고 그 결과에 왼쪽의 A를 곱합니다.

172
00:08:44,940 --> 00:08:47,400
즉, 괄호를 어디에 넣는지는 중요하지 않습니다.

173
00:08:48,380 --> 00:08:50,650
자, 만약 제가 그때 그랬던 것처럼 이것을 

174
00:08:50,650 --> 00:08:53,205
수치적으로 해결하려고 한다면, 그것은 끔찍하고, 

175
00:08:53,205 --> 00:08:55,760
끔찍하고, 그 문제에 있어서는 깨달음이 없습니다.

176
00:08:55,760 --> 00:08:59,333
그러나 행렬 곱셈을 하나의 변환을 차례로 적용하는 

177
00:08:59,333 --> 00:09:02,780
것으로 생각하면 이 속성은 아주 사소한 것입니다.

178
00:09:03,300 --> 00:09:04,000
이유를 알 수 있나요?

179
00:09:04,860 --> 00:09:07,594
즉, C를 먼저 적용한 다음 B를 적용하고 

180
00:09:07,594 --> 00:09:09,987
A를 적용하면 C를 적용한 다음 B를 

181
00:09:09,987 --> 00:09:12,380
적용하고 A를 적용하는 것과 같습니다.

182
00:09:12,820 --> 00:09:14,380
즉, 증명할 것이 아무것도 없습니다.

183
00:09:14,540 --> 00:09:16,321
동일한 세 가지 항목을 모두 

184
00:09:16,321 --> 00:09:18,660
동일한 순서로 하나씩 적용하면 됩니다.

185
00:09:19,460 --> 00:09:21,540
부정행위처럼 느껴질 수도 있지만 그렇지 않습니다.

186
00:09:21,540 --> 00:09:24,751
이는 행렬 곱셈이 결합적이라는 사실을 증명하는 

187
00:09:24,751 --> 00:09:27,715
것이며, 그보다 더 좋은 점은 해당 속성이 

188
00:09:27,715 --> 00:09:30,680
왜 참이어야 하는지에 대한 좋은 설명입니다.

189
00:09:31,560 --> 00:09:35,007
두 가지 다른 변환을 상상하고 하나씩 적용하면 어떤 

190
00:09:35,007 --> 00:09:38,335
일이 일어나는지 생각한 다음 행렬 곱을 수치적으로 

191
00:09:38,335 --> 00:09:41,545
계산하면서 이 아이디어를 더 많이 시도해 보시기 

192
00:09:41,545 --> 00:09:42,140
바랍니다.

193
00:09:42,600 --> 00:09:44,562
저를 믿으십시오. 이것은 정말 아이디어를 

194
00:09:44,562 --> 00:09:46,440
깊이있게 만드는 일종의 놀이 시간입니다.

195
00:09:47,200 --> 00:09:49,590
다음 비디오에서는 이러한 아이디어를 2차원 

196
00:09:49,590 --> 00:09:52,180
이상으로 확장하는 방법에 대해 이야기하겠습니다.

