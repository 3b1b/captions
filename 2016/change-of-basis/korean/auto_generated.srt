1
00:00:19,920 --> 00:00:22,596
고유벡터와 고유값은 많은 학생들이 특히 

2
00:00:22,596 --> 00:00:25,760
직관적이지 않다고 생각하는 주제 중 하나입니다.

3
00:00:25,760 --> 00:00:28,155
우리가 이것을 하는 이유와 이것이 실제로 

4
00:00:28,155 --> 00:00:30,655
무엇을 의미하는지와 같은 질문은 답이 없는 

5
00:00:30,655 --> 00:00:33,260
계산의 바다에 떠다니는 경우가 너무 많습니다.

6
00:00:33,920 --> 00:00:36,025
그리고 제가 이 시리즈의 영상을 공개하면서 

7
00:00:36,025 --> 00:00:38,042
많은 분들이 이 주제를 특히 시각화할 수 

8
00:00:38,042 --> 00:00:40,060
있기를 기대한다는 의견을 많이 주셨습니다.

9
00:00:40,680 --> 00:00:43,414
나는 그 이유가 고유 사물이 특별히 복잡하거나 

10
00:00:43,414 --> 00:00:46,360
제대로 설명되지 않았기 때문이 아니라고 생각합니다.

11
00:00:46,860 --> 00:00:48,514
사실, 그것은 비교적 간단하고, 

12
00:00:48,514 --> 00:00:51,180
대부분의 책이 그것을 잘 설명하고 있다고 생각합니다.

13
00:00:51,520 --> 00:00:55,000
문제는 앞에 나오는 많은 주제에 대해 확실한 시각적 

14
00:00:55,000 --> 00:00:58,480
이해가 있는 경우에만 실제로 의미가 있다는 것입니다.

15
00:00:59,060 --> 00:01:01,570
여기서 가장 중요한 것은 행렬을 선형 

16
00:01:01,570 --> 00:01:04,320
변환으로 생각하는 방법을 아는 것입니다. 

17
00:01:04,320 --> 00:01:06,831
하지만 행렬식, 방정식의 선형 시스템 

18
00:01:06,831 --> 00:01:09,940
및 기저 변경과 같은 사항에도 익숙해야 합니다.

19
00:01:10,720 --> 00:01:13,601
고유량에 대한 혼란은 일반적으로 고유벡터 

20
00:01:13,601 --> 00:01:16,232
및 고유값 자체보다는 이러한 주제 중 

21
00:01:16,232 --> 00:01:19,240
하나의 불안정한 기초와 더 관련이 있습니다.

22
00:01:19,980 --> 00:01:22,410
시작하려면 여기에 표시된 것과 같은 

23
00:01:22,410 --> 00:01:24,840
2차원의 선형 변환을 고려해 보세요.

24
00:01:25,460 --> 00:01:27,715
기본 벡터 i-hat을 좌표 3, 

25
00:01:27,715 --> 00:01:31,040
0으로 이동하고 j-hat을 1, 2로 이동합니다.

26
00:01:31,780 --> 00:01:35,640
따라서 열이 3, 0, 1, 2인 행렬로 표현됩니다.

27
00:01:36,600 --> 00:01:39,275
하나의 특정 벡터에 어떤 역할을 하는지에 

28
00:01:39,275 --> 00:01:41,601
집중하고 해당 벡터의 범위, 원점과 

29
00:01:41,601 --> 00:01:44,160
끝을 통과하는 선에 대해 생각해 보세요.

30
00:01:44,920 --> 00:01:46,929
대부분의 벡터는 변환 중에 해당 

31
00:01:46,929 --> 00:01:48,380
범위를 벗어나게 됩니다.

32
00:01:48,780 --> 00:01:51,662
내 말은, 벡터가 착륙한 장소도 우연히 그 선 

33
00:01:51,662 --> 00:01:54,765
어딘가에 있었다면 그것은 꽤 우연의 일치처럼 보일 

34
00:01:54,765 --> 00:01:55,320
것입니다.

35
00:01:57,400 --> 00:02:01,015
그러나 일부 특수 벡터는 자체 범위에 남아 있습니다. 

36
00:02:01,015 --> 00:02:03,786
즉, 행렬이 그러한 벡터에 미치는 영향은 

37
00:02:03,786 --> 00:02:07,040
스칼라처럼 단순히 늘리거나 찌그러뜨리는 것입니다.

38
00:02:09,460 --> 00:02:12,012
이 특정 예에서 기본 벡터 i-hat은 

39
00:02:12,012 --> 00:02:14,100
그러한 특수 벡터 중 하나입니다.

40
00:02:14,640 --> 00:02:17,707
i-hat의 범위는 x축이고 행렬의 첫 

41
00:02:17,707 --> 00:02:20,774
번째 열에서 i-hat이 여전히 x축에 

42
00:02:20,774 --> 00:02:24,120
있는 3배로 이동하는 것을 볼 수 있습니다.

43
00:02:26,320 --> 00:02:31,224
게다가 선형 변환이 작동하는 방식으로 인해 x축의 

44
00:02:31,224 --> 00:02:36,480
다른 벡터도 3배만큼 늘어나서 자체 범위를 유지합니다.

45
00:02:38,500 --> 00:02:41,085
이 변환 중에 자체 범위에 남아 있는 

46
00:02:41,085 --> 00:02:44,040
약간 더 교묘한 벡터는 음수 1, 1입니다.

47
00:02:44,660 --> 00:02:47,140
결국 2배로 늘어나게 됩니다.

48
00:02:49,000 --> 00:02:53,531
그리고 다시 선형성은 이 사람이 가로지르는 대각선의 

49
00:02:53,531 --> 00:02:58,220
다른 벡터가 2배만큼 늘어나게 된다는 것을 의미합니다.

50
00:02:59,820 --> 00:03:02,388
그리고 이 변환의 경우, 그것들은 범위를 

51
00:03:02,388 --> 00:03:05,180
유지하는 특별한 속성을 가진 모든 벡터입니다.

52
00:03:05,620 --> 00:03:08,588
x축에 있는 것들은 3배로 늘어나고, 

53
00:03:08,588 --> 00:03:11,980
이 대각선에 있는 것들은 2배로 늘어납니다.

54
00:03:12,760 --> 00:03:15,546
다른 모든 벡터는 변환 중에 어느 정도 

55
00:03:15,546 --> 00:03:18,080
회전하여 해당 선을 벗어나게 됩니다.

56
00:03:22,520 --> 00:03:26,092
지금쯤 추측할 수 있듯이 이러한 특수 벡터를 

57
00:03:26,092 --> 00:03:29,521
변환의 고유 벡터라고 하며 각 고유 벡터는 

58
00:03:29,521 --> 00:03:33,093
고유값이라고 불리는 것과 연관되어 있습니다. 

59
00:03:33,093 --> 00:03:37,380
이는 변환 중에 늘어나거나 찌그러지는 요소일 뿐입니다.

60
00:03:40,280 --> 00:03:43,001
물론, 스트레칭과 스퀴싱에 대해 특별한 것은 

61
00:03:43,001 --> 00:03:45,940
없으며 이러한 고유값이 양수라는 사실도 있습니다.

62
00:03:46,380 --> 00:03:48,858
또 다른 예로, 고유값이 1/2인 

63
00:03:48,858 --> 00:03:51,076
고유벡터가 있을 수 있습니다. 

64
00:03:51,076 --> 00:03:54,337
이는 벡터가 1/2만큼 뒤집히고 찌그러진다는 

65
00:03:54,337 --> 00:03:55,120
의미입니다.

66
00:03:56,980 --> 00:03:59,934
하지만 여기서 중요한 점은 회전하지 않고 

67
00:03:59,934 --> 00:04:02,760
뻗어나가는 선에 머물러 있다는 것입니다.

68
00:04:04,460 --> 00:04:07,130
이것이 생각하기에 유용한 이유를 엿볼 

69
00:04:07,130 --> 00:04:09,800
수 있도록 3차원 회전을 고려해보세요.

70
00:04:11,660 --> 00:04:16,160
해당 회전에 대한 고유벡터(자체 범위에 남아 있는 

71
00:04:16,160 --> 00:04:20,500
벡터)를 찾을 수 있다면 회전축을 찾은 것입니다.

72
00:04:22,600 --> 00:04:26,496
그리고 해당 변환과 관련된 전체 3x3 행렬에 

73
00:04:26,496 --> 00:04:30,543
대해 생각하는 것보다 일부 회전 축과 회전 각도 

74
00:04:30,543 --> 00:04:34,740
측면에서 3D 회전을 생각하는 것이 훨씬 쉽습니다.

75
00:04:37,000 --> 00:04:39,917
그런데 이 경우 해당 고유값은 1이어야 합니다. 

76
00:04:39,917 --> 00:04:42,726
왜냐하면 회전은 아무것도 늘어나거나 찌그러지지 

77
00:04:42,726 --> 00:04:45,860
않으므로 벡터의 길이는 동일하게 유지되기 때문입니다.

78
00:04:48,080 --> 00:04:50,020
이 패턴은 선형대수학에서 많이 나타납니다.

79
00:04:50,440 --> 00:04:53,468
행렬로 설명되는 모든 선형 변환을 사용하면 

80
00:04:53,468 --> 00:04:56,497
이 행렬의 열을 기저 벡터의 착지 지점으로 

81
00:04:56,497 --> 00:04:59,400
읽어서 무엇을 하는지 이해할 수 있습니다.

82
00:05:00,020 --> 00:05:03,245
그러나 특정 좌표계에 덜 의존하면서 선형 

83
00:05:03,245 --> 00:05:06,892
변환이 실제로 수행하는 작업의 핵심을 파악하는 

84
00:05:06,892 --> 00:05:10,820
더 좋은 방법은 고유벡터와 고유값을 찾는 것입니다.

85
00:05:15,460 --> 00:05:18,858
여기서는 고유벡터와 고유값을 계산하는 방법에 대해 

86
00:05:18,858 --> 00:05:22,257
자세히 다루지는 않지만 개념적 이해에 가장 중요한 

87
00:05:22,257 --> 00:05:25,413
계산 아이디어에 대한 개요를 제공하려고 노력할 

88
00:05:25,413 --> 00:05:26,020
것입니다.

89
00:05:27,180 --> 00:05:30,480
상징적으로 고유벡터의 아이디어는 다음과 같습니다.

90
00:05:31,040 --> 00:05:36,260
A는 v가 고유벡터인 일부 변환을 나타내는 행렬이고, 

91
00:05:36,260 --> 00:05:39,740
람다는 숫자, 즉 해당 고유값입니다.

92
00:05:40,680 --> 00:05:43,553
이 표현식이 말하는 것은 행렬-벡터 곱 A 

93
00:05:43,553 --> 00:05:46,427
곱하기 v가 고유벡터 v를 일부 값 람다로 

94
00:05:46,427 --> 00:05:49,900
스케일링하는 것과 동일한 결과를 제공한다는 것입니다.

95
00:05:51,000 --> 00:05:53,940
따라서 행렬 A의 고유벡터와 고유값을 

96
00:05:53,940 --> 00:05:56,880
찾는 것은 이 표현식을 참으로 만드는 

97
00:05:56,880 --> 00:06:00,100
v와 람다의 값을 찾는 것으로 귀결됩니다.

98
00:06:01,920 --> 00:06:04,399
처음에는 작업하기가 약간 어색합니다. 

99
00:06:04,399 --> 00:06:07,351
왜냐하면 왼쪽은 행렬-벡터 곱셈을 나타내지만 

100
00:06:07,351 --> 00:06:10,540
오른쪽은 스칼라-벡터 곱셈을 나타내기 때문입니다.

101
00:06:11,120 --> 00:06:14,016
그럼 우변을 일종의 행렬-벡터 곱셈으로 다시 

102
00:06:14,016 --> 00:06:16,101
작성하는 것부터 시작하겠습니다. 

103
00:06:16,101 --> 00:06:19,577
행렬을 사용하면 모든 벡터를 람다 배율로 스케일링하는 

104
00:06:19,577 --> 00:06:20,620
효과가 있습니다.

105
00:06:21,680 --> 00:06:24,901
그러한 행렬의 열은 각 기저 벡터에 어떤 일이 

106
00:06:24,901 --> 00:06:28,000
일어나는지 나타내며, 각 기저 벡터는 단순히 

107
00:06:28,000 --> 00:06:31,098
람다와 곱해집니다. 따라서 이 행렬의 대각선 

108
00:06:31,098 --> 00:06:34,320
아래 숫자는 람다이고 다른 곳은 모두 0입니다.

109
00:06:36,180 --> 00:06:38,720
이 함수를 작성하는 일반적인 방법은 람다를 

110
00:06:38,720 --> 00:06:41,684
인수분해하여 람다 곱하기 i로 작성하는 것입니다. 

111
00:06:41,684 --> 00:06:44,860
여기서 i는 대각선 아래에 1이 있는 단위 행렬입니다.

112
00:06:45,860 --> 00:06:48,723
양쪽 변이 행렬-벡터 곱셈처럼 보이면 

113
00:06:48,723 --> 00:06:51,860
우변을 빼고 v를 인수분해할 수 있습니다.

114
00:06:54,160 --> 00:06:57,461
이제 우리가 가진 것은 새로운 행렬 A - 람다 

115
00:06:57,461 --> 00:07:01,007
곱하기 항등식입니다. 그리고 우리는 이 새로운 행렬 

116
00:07:01,007 --> 00:07:04,308
곱하기 v가 0 벡터를 제공하는 벡터 v를 찾고 

117
00:07:04,308 --> 00:07:04,920
있습니다.

118
00:07:06,380 --> 00:07:08,641
이제, v 자체가 0 벡터라면 이는 항상 

119
00:07:08,641 --> 00:07:11,100
참이 될 것입니다. 그러나 그것은 지루합니다.

120
00:07:11,340 --> 00:07:13,640
우리가 원하는 것은 0이 아닌 고유벡터입니다.

121
00:07:14,420 --> 00:07:17,786
그리고 5장과 6장을 보면 0이 아닌 벡터를 

122
00:07:17,786 --> 00:07:21,018
가진 행렬의 곱이 0이 되는 유일한 방법은 

123
00:07:21,018 --> 00:07:24,249
해당 행렬과 관련된 변환이 공간을 더 낮은 

124
00:07:24,249 --> 00:07:28,020
차원으로 압축하는 것이라는 것을 알게 될 것입니다.

125
00:07:29,300 --> 00:07:34,220
그리고 그 찌그러짐은 행렬의 행렬식 0에 해당합니다.

126
00:07:35,480 --> 00:07:38,687
구체적으로 행렬 A에 열 2, 1과 2, 

127
00:07:38,687 --> 00:07:41,894
3이 있다고 가정하고 각 대각선 항목에서 

128
00:07:41,894 --> 00:07:45,520
가변 양인 람다를 빼는 것을 생각해 보겠습니다.

129
00:07:46,480 --> 00:07:48,380
이제 람다를 조정하고 손잡이를 돌려 

130
00:07:48,380 --> 00:07:50,280
값을 변경하는 것을 상상해 보십시오.

131
00:07:50,940 --> 00:07:53,847
람다 값이 변경되면 행렬 자체도 

132
00:07:53,847 --> 00:07:57,240
변경되므로 행렬의 행렬식도 변경됩니다.

133
00:07:58,220 --> 00:08:01,346
여기서 목표는 이 행렬식을 0으로 만드는 람다 

134
00:08:01,346 --> 00:08:04,113
값을 찾는 것입니다. 즉, 조정된 변환이 

135
00:08:04,113 --> 00:08:07,240
공간을 더 낮은 차원으로 압축한다는 의미입니다.

136
00:08:08,160 --> 00:08:11,160
이 경우 최적 지점은 람다가 1일 때 발생합니다.

137
00:08:12,180 --> 00:08:14,347
물론, 다른 행렬을 선택했다면 고유값이 

138
00:08:14,347 --> 00:08:16,120
반드시 1이 아닐 수도 있습니다.

139
00:08:16,240 --> 00:08:18,600
최적의 지점은 람다의 다른 값에 도달할 수 있습니다.

140
00:08:20,080 --> 00:08:21,752
내용이 좀 많지만 이것이 무엇을 

141
00:08:21,752 --> 00:08:22,960
말하는지 풀어보겠습니다.

142
00:08:22,960 --> 00:08:26,260
람다가 1이면 행렬 A에서 람다를 곱하고 

143
00:08:26,260 --> 00:08:29,560
항등식을 곱하여 공간을 선으로 압축합니다.

144
00:08:30,440 --> 00:08:34,229
이는 A 마이너스 람다 곱하기 항등 시간 v가 0 

145
00:08:34,229 --> 00:08:37,747
벡터와 같은 0이 아닌 벡터 v가 있다는 것을 

146
00:08:37,747 --> 00:08:38,559
의미합니다.

147
00:08:40,480 --> 00:08:43,596
그리고 우리가 그것에 관심을 갖는 이유는 

148
00:08:43,596 --> 00:08:46,712
A 곱하기 v가 람다 곱하기 v와 같다는 

149
00:08:46,712 --> 00:08:49,963
것을 의미하기 때문이라는 것을 기억하세요. 

150
00:08:49,963 --> 00:08:53,079
이는 벡터 v가 A의 고유 벡터이며 변환 

151
00:08:53,079 --> 00:08:56,331
A 동안 자체 범위에 머무르는 것으로 읽을 

152
00:08:56,331 --> 00:08:57,280
수 있습니다.

153
00:08:58,320 --> 00:09:01,027
이 예에서 해당 고유값은 1이므로 

154
00:09:01,027 --> 00:09:04,020
v는 실제로 고정된 상태로 유지됩니다.

155
00:09:06,220 --> 00:09:07,860
해당 추론 방식이 좋은지 확인해야 

156
00:09:07,860 --> 00:09:09,500
하는지 잠시 멈추고 숙고해 보세요.

157
00:09:13,380 --> 00:09:15,640
서문에서 언급한 내용이 바로 이런 내용입니다.

158
00:09:16,220 --> 00:09:18,765
행렬식을 확실히 이해하지 못하고 왜 행렬식이 

159
00:09:18,765 --> 00:09:21,209
0이 아닌 해를 갖는 선형 방정식 시스템과 

160
00:09:21,209 --> 00:09:23,550
관련되어 있는지 알지 못한다면 이와 같은 

161
00:09:23,550 --> 00:09:26,300
표현은 전혀 예상치 못한 일처럼 느껴질 것입니다.

162
00:09:28,320 --> 00:09:30,864
이것이 실제로 작동하는 모습을 보려면 열이 3, 

163
00:09:30,864 --> 00:09:33,126
0 및 1, 2인 행렬을 사용하여 처음부터 

164
00:09:33,126 --> 00:09:34,540
예제를 다시 살펴보겠습니다.

165
00:09:35,350 --> 00:09:39,460
람다 값이 고유값인지 확인하려면 이 행렬의 

166
00:09:39,460 --> 00:09:43,400
대각선에서 이를 빼고 행렬식을 계산하세요.

167
00:09:50,580 --> 00:09:53,768
이렇게 하면 우리는 람다에서 3 - 람다 곱하기 

168
00:09:53,768 --> 00:09:56,720
2 - 람다라는 특정 이차 다항식을 얻습니다.

169
00:09:57,800 --> 00:10:01,429
람다는 이 행렬식이 0인 경우에만 고유값이 

170
00:10:01,429 --> 00:10:04,756
될 수 있으므로 가능한 고유값은 람다가 

171
00:10:04,756 --> 00:10:08,840
2이고 람다가 3이라는 결론을 내릴 수 있습니다.

172
00:10:09,640 --> 00:10:12,436
실제로 이러한 고유값 중 하나(예: 

173
00:10:12,436 --> 00:10:16,210
람다가 2)를 갖는 고유벡터가 무엇인지 알아내기 

174
00:10:16,210 --> 00:10:19,426
위해 해당 람다 값을 행렬에 연결한 다음 

175
00:10:19,426 --> 00:10:23,061
대각선으로 변경된 행렬이 0으로 보내는 벡터를 

176
00:10:23,061 --> 00:10:23,900
해결합니다.

177
00:10:24,940 --> 00:10:27,968
다른 선형 시스템과 같은 방식으로 이를 

178
00:10:27,968 --> 00:10:31,134
계산하면 해는 -1, 1 범위의 대각선에 

179
00:10:31,134 --> 00:10:34,300
있는 모든 벡터라는 것을 알 수 있습니다.

180
00:10:35,220 --> 00:10:38,432
이는 변경되지 않은 행렬 3, 0, 1, 

181
00:10:38,432 --> 00:10:42,622
2가 모든 벡터를 2배로 늘리는 효과가 있다는 사실에 

182
00:10:42,622 --> 00:10:43,460
해당합니다.

183
00:10:46,320 --> 00:10:50,200
이제 2D 변환에는 고유벡터가 필요하지 않습니다.

184
00:10:50,720 --> 00:10:53,400
예를 들어 90도 회전을 가정해 보겠습니다.

185
00:10:53,660 --> 00:10:55,763
이것은 자체 범위에서 모든 벡터를 

186
00:10:55,763 --> 00:10:58,200
회전시키기 때문에 고유 벡터가 없습니다.

187
00:11:00,800 --> 00:11:03,288
실제로 이와 같이 회전의 고유값을 계산해 

188
00:11:03,288 --> 00:11:05,560
보면 어떤 일이 발생하는지 확인하세요.

189
00:11:06,300 --> 00:11:10,140
해당 행렬에는 열 0, 1과 음수 1, 0이 있습니다.

190
00:11:11,100 --> 00:11:13,188
대각선 요소에서 람다를 빼고 

191
00:11:13,188 --> 00:11:15,800
행렬식이 0이 되는 시점을 찾습니다.

192
00:11:18,140 --> 00:11:21,940
이 경우 다항식 람다 제곱에 1을 더한 값을 얻습니다.

193
00:11:22,680 --> 00:11:27,920
해당 다항식의 유일한 근은 허수 i와 음수 i입니다.

194
00:11:28,840 --> 00:11:31,724
실수 해가 없다는 사실은 고유벡터가 

195
00:11:31,724 --> 00:11:33,600
없다는 것을 나타냅니다.

196
00:11:35,540 --> 00:11:37,625
마음 속에 간직할 가치가 있는 또 

197
00:11:37,625 --> 00:11:39,820
다른 매우 흥미로운 예는 가위입니다.

198
00:11:40,560 --> 00:11:42,876
그러면 i-hat이 제자리에 고정되고 

199
00:11:42,876 --> 00:11:45,192
j-hat 1이 위로 이동하므로 해당 

200
00:11:45,192 --> 00:11:47,840
행렬에는 열 1, 0과 1, 1이 있습니다.

201
00:11:48,740 --> 00:11:51,508
x축의 모든 벡터는 제자리에 고정되어 

202
00:11:51,508 --> 00:11:54,540
있으므로 고유값 1을 갖는 고유벡터입니다.

203
00:11:55,680 --> 00:11:57,820
사실, 이것들은 유일한 고유벡터입니다.

204
00:11:58,760 --> 00:12:02,261
대각선에서 람다를 빼고 행렬식을 

205
00:12:02,261 --> 00:12:06,540
계산하면 1 빼기 람다 제곱이 나옵니다.

206
00:12:09,320 --> 00:12:11,194
그리고 이 표현식의 유일한 근은 

207
00:12:11,194 --> 00:12:12,860
람다가 1과 같다는 것입니다.

208
00:12:14,560 --> 00:12:17,462
이는 우리가 기하학적으로 보는 것과 일치합니다. 

209
00:12:17,462 --> 00:12:19,720
모든 고유벡터는 고유값 1을 갖습니다.

210
00:12:21,080 --> 00:12:24,209
그러나 고유값은 하나만 가질 수도 있지만 

211
00:12:24,209 --> 00:12:28,020
고유벡터로 가득 찬 선 이상을 가질 수도 있습니다.

212
00:12:29,900 --> 00:12:33,180
간단한 예는 모든 것을 2로 확장하는 행렬입니다.

213
00:12:33,900 --> 00:12:37,004
유일한 고유값은 2이지만 평면의 모든 

214
00:12:37,004 --> 00:12:40,700
벡터는 해당 고유값을 갖는 고유벡터가 됩니다.

215
00:12:42,000 --> 00:12:44,321
이제 마지막 주제로 넘어가기 전에 잠시 

216
00:12:44,321 --> 00:12:46,960
멈춰서 이에 대해 생각해 볼 좋은 시간입니다.

217
00:13:03,540 --> 00:13:06,445
지난 비디오의 아이디어에 크게 의존하는 

218
00:13:06,445 --> 00:13:09,880
고유기초 아이디어로 여기서 마무리하고 싶습니다.

219
00:13:11,480 --> 00:13:13,930
우리의 기저 벡터가 우연히 고유 벡터가 

220
00:13:13,930 --> 00:13:16,380
된다면 무슨 일이 일어나는지 살펴보세요.

221
00:13:17,120 --> 00:13:19,859
예를 들어, i-hat은 -1로 스케일링되고 

222
00:13:19,859 --> 00:13:22,380
j-hat은 2로 스케일링될 수 있습니다.

223
00:13:23,420 --> 00:13:27,564
새 좌표를 행렬의 열로 작성하면 i-hat과 

224
00:13:27,564 --> 00:13:31,709
j-hat의 고유값인 음수 1과 2의 스칼라 

225
00:13:31,709 --> 00:13:36,019
배수가 행렬의 대각선에 있고 다른 모든 항목은 

226
00:13:36,019 --> 00:13:37,180
0입니다. .

227
00:13:38,880 --> 00:13:41,916
행렬의 대각선 이외의 모든 부분에서 0이 있을 

228
00:13:41,916 --> 00:13:45,420
때마다 이를 대각 행렬이라고 부르는 것이 합리적입니다.

229
00:13:45,840 --> 00:13:48,646
그리고 이것을 해석하는 방법은 모든 

230
00:13:48,646 --> 00:13:51,593
기본 벡터가 고유 벡터이고 이 행렬의 

231
00:13:51,593 --> 00:13:54,400
대각선 항목이 고유값이라는 것입니다.

232
00:13:57,100 --> 00:13:58,970
대각 행렬을 작업하기 훨씬 더 

233
00:13:58,970 --> 00:14:01,060
좋게 만드는 많은 것들이 있습니다.

234
00:14:01,780 --> 00:14:04,946
한 가지 큰 점은 이 행렬 자체를 여러 번 곱하면 

235
00:14:04,946 --> 00:14:08,340
어떤 일이 일어날지 계산하는 것이 더 쉽다는 것입니다.

236
00:14:09,420 --> 00:14:12,966
이러한 행렬 중 하나는 각 기본 벡터를 일부 

237
00:14:12,966 --> 00:14:16,655
고유값만큼 스케일링하므로 해당 행렬을 여러 번 

238
00:14:16,655 --> 00:14:20,343
적용하는 것(가령 100번)은 각 기본 벡터를 

239
00:14:20,343 --> 00:14:24,600
해당 고유값의 100승으로 스케일링하는 것과 같습니다.

240
00:14:25,700 --> 00:14:27,860
이와 대조적으로, 비대각선 행렬의 

241
00:14:27,860 --> 00:14:29,680
100제곱을 계산해 보십시오.

242
00:14:29,680 --> 00:14:31,320
정말로, 한번 시도해 보세요.

243
00:14:31,740 --> 00:14:32,440
악몽이다.

244
00:14:36,080 --> 00:14:38,480
물론, 기본 벡터가 고유벡터가 될 

245
00:14:38,480 --> 00:14:41,260
정도로 운이 좋은 경우는 거의 없습니다.

246
00:14:42,040 --> 00:14:45,559
그러나 변환에 이 비디오의 시작 부분과 같이 

247
00:14:45,559 --> 00:14:49,219
전체 공간에 걸쳐 있는 집합을 선택할 수 있을 

248
00:14:49,219 --> 00:14:52,739
만큼 고유벡터가 많은 경우 이러한 고유벡터가 

249
00:14:52,739 --> 00:14:56,540
기본 벡터가 되도록 좌표계를 변경할 수 있습니다.

250
00:14:57,140 --> 00:15:00,241
지난 영상에서 기저 변경에 대해 이야기했지만, 

251
00:15:00,241 --> 00:15:03,103
여기서는 현재 좌표계에 쓰여진 변환을 다른 

252
00:15:03,103 --> 00:15:06,085
시스템으로 표현하는 방법에 대해 매우 빠르게 

253
00:15:06,085 --> 00:15:07,040
설명하겠습니다.

254
00:15:08,440 --> 00:15:12,021
새 기저로 사용하려는 벡터의 좌표(이 경우에는 두 

255
00:15:12,021 --> 00:15:15,730
개의 고유 벡터를 의미)를 선택한 다음 해당 좌표를 

256
00:15:15,730 --> 00:15:19,440
기저 행렬의 변경이라고 알려진 행렬의 열로 만듭니다.

257
00:15:20,180 --> 00:15:24,029
원래 변환을 끼우고 기본 행렬의 변경 사항을 

258
00:15:24,029 --> 00:15:27,724
오른쪽에 배치하고 기본 행렬 변경의 역수를 

259
00:15:27,724 --> 00:15:31,727
왼쪽에 배치하면 결과는 동일한 변환을 나타내는 

260
00:15:31,727 --> 00:15:35,576
행렬이 되지만 새 기본 벡터 좌표의 관점에서 

261
00:15:35,576 --> 00:15:36,500
보면 체계.

262
00:15:37,440 --> 00:15:40,443
고유벡터를 사용하여 이 작업을 수행하는 요점은 

263
00:15:40,443 --> 00:15:43,445
이 새로운 행렬이 해당 대각선 아래에 해당하는 

264
00:15:43,445 --> 00:15:46,680
고유값과 함께 대각선이 되도록 보장된다는 것입니다.

265
00:15:46,860 --> 00:15:50,657
이는 기본 벡터에 발생하는 일이 변환 중에 크기가 

266
00:15:50,657 --> 00:15:54,320
조정되는 좌표계에서의 작업을 나타내기 때문입니다.

267
00:15:55,800 --> 00:15:58,510
고유벡터이기도 한 기저 벡터 

268
00:15:58,510 --> 00:16:01,560
세트를 다시 고유기저라고 합니다.

269
00:16:02,340 --> 00:16:05,439
따라서 예를 들어 이 행렬의 100제곱을 

270
00:16:05,439 --> 00:16:08,807
계산해야 하는 경우 고유기저로 변경하고 해당 

271
00:16:08,807 --> 00:16:11,907
시스템에서 100제곱을 계산한 다음 표준 

272
00:16:11,907 --> 00:16:15,680
시스템으로 다시 변환하는 것이 훨씬 쉬울 것입니다.

273
00:16:16,620 --> 00:16:18,320
모든 변환에 대해 이 작업을 수행할 수는 없습니다.

274
00:16:18,320 --> 00:16:20,365
예를 들어 전단에는 전체 공간을 

275
00:16:20,365 --> 00:16:22,980
포괄할 만큼 고유벡터가 충분하지 않습니다.

276
00:16:23,460 --> 00:16:25,873
그러나 고유기저를 찾을 수 있다면 

277
00:16:25,873 --> 00:16:28,160
행렬 연산이 정말 멋질 것입니다.

278
00:16:29,120 --> 00:16:30,461
이것이 실제로 어떻게 보이는지, 

279
00:16:30,461 --> 00:16:32,474
그리고 이것이 놀라운 결과를 생성하는 데 어떻게 

280
00:16:32,474 --> 00:16:34,338
사용될 수 있는지 알아보기 위해 매우 깔끔한 

281
00:16:34,338 --> 00:16:36,201
퍼즐을 풀고자 하는 분들을 위해 여기 화면에 

282
00:16:36,201 --> 00:16:37,320
프롬프트를 남겨 두겠습니다.

283
00:16:37,600 --> 00:16:40,280
약간의 노력이 필요하지만, 즐기시면 될 것 같아요.

284
00:16:40,840 --> 00:16:43,544
이 시리즈의 다음이자 마지막 비디오는 

285
00:16:43,544 --> 00:16:46,120
추상적인 벡터 공간에 관한 것입니다.

