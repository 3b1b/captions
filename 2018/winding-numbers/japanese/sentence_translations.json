[
 {
  "input": "There's two things here, the main topic and the meta topic.",
  "model": "nmt",
  "translatedText": "ここにはメイントピックとメタトピックの 2 つがあります。",
  "time_range": [
   0.0,
   6.72
  ]
 },
 {
  "input": "The main topic is going to be this really neat algorithm for solving two-dimensional equations, things that have two unknown real numbers, or also those involving a single unknown which is a complex number.",
  "model": "nmt",
  "translatedText": "主なトピックは、2 次元方程式、2 つの未知の実数 を持つもの、または 1 つの未知の複素数を含むもの を解くための、この非常に優れたアルゴリズムです。",
  "time_range": [
   6.72,
   17.42
  ]
 },
 {
  "input": "So for example, if you wanted to find the complex roots of a polynomial, or maybe some of those million dollar zeros of the Riemann zeta function, this algorithm would do it for you.",
  "model": "nmt",
  "translatedText": "たとえば、多項式の複素根を見つけたい場合、またはおそらく リーマン ゼータ関数の数百万ドルのゼロの一部を見つけた い場合は、このアルゴリズムが代わりにそれを実行します。",
  "time_range": [
   17.42,
   27.0
  ]
 },
 {
  "input": "And this method is super pretty, since a lot of colors are involved.",
  "model": "nmt",
  "translatedText": "そしてこの方法はたくさんの色が使われているのでとてもきれいです。",
  "time_range": [
   27.0,
   30.52
  ]
 },
 {
  "input": "And more importantly, the core underlying idea applies to all sorts of math well beyond this algorithm for solving equations, including a bit of topology, which I'll talk about afterwards.",
  "model": "nmt",
  "translatedText": "そしてさらに重要なことは、核となる基礎的な考え方は、この方程式 を解くためのアルゴリズムをはるかに超えて、後で説明する少しのト ポロジーを含め、あらゆる種類の数学に適用できるということです。",
  "time_range": [
   30.52,
   40.6
  ]
 },
 {
  "input": "But what really makes this worth 20 minutes or so of your time is that it illustrates a lesson much more generally useful throughout math, which is try to define constructs that compose nicely with each other.",
  "model": "nmt",
  "translatedText": "しかし、これが 20 分ほどの時間をかける価値があるのは、 互いに適切に構成する構成要素を定義するという、数学全体を 通してより一般的に役立つレッスンを説明していることです。",
  "time_range": [
   40.6,
   52.12
  ]
 },
 {
  "input": "You'll see what I mean by that as the story progresses.",
  "model": "nmt",
  "translatedText": "物語が進むにつれて、私が何を意味するかがわかります。",
  "time_range": [
   52.12,
   55.46
  ]
 },
 {
  "input": "To motivate the case with functions that have 2d inputs and 2d outputs, let's start off simpler, with functions that just take in a real number and spit out a real number.",
  "model": "nmt",
  "translatedText": "2 次元入力と 2 次元出力を持つ関数のケースを動機付けるために、実数を 取り込んで実数を吐き出すだけの関数から、より単純なことから始めましょう。",
  "time_range": [
   55.46,
   65.1
  ]
 },
 {
  "input": "If you want to know when a function f of x equals some other function g of x, you might think of this as searching for when the graphs of those functions intersect, right?",
  "model": "nmt",
  "translatedText": "x の関数 f が x の他の関数 g と等しいときを知りたい場合、これは それらの関数のグラフが交差するときを検索すると考えることができますよね。",
  "time_range": [
   65.1,
   74.26
  ]
 },
 {
  "input": "I mean, that gives you an input where both functions have the same output.",
  "model": "nmt",
  "translatedText": "つまり、両方の関数が同じ出力を持つ入力が得られます。",
  "time_range": [
   74.26,
   79.34
  ]
 },
 {
  "input": "To take a very simple example, imagine f of x is x squared, and g of x is the constant function 2.",
  "model": "nmt",
  "translatedText": "非常に単純な例を挙げると、x の f は x の 2 乗であ り、x の g は定数関数 2 であると想像してください。",
  "time_range": [
   79.34,
   85.52
  ]
 },
 {
  "input": "In other words, you want to find the square root of 2.",
  "model": "nmt",
  "translatedText": "つまり、2 の平方根を求めます。",
  "time_range": [
   85.52,
   89.62
  ]
 },
 {
  "input": "Even if you know almost nothing about finding square roots, you can probably see that 1 squared is less than 2, and 2 squared is bigger than 2, so you realize, ah, there's going to be some solution in between those two values.",
  "model": "nmt",
  "translatedText": "平方根を求めることについてほとんど何も知らなかったとしても、1 の 2 乗は 2 より小さく、2 の 2 乗は 2 より大きいことがわかるの で、ああ、これら 2 つの値の間に何らかの解があることがわかります。",
  "time_range": [
   89.62,
   102.64
  ]
 },
 {
  "input": "And then if you wanted to narrow it down further, maybe you try squaring the halfway point, 1.",
  "model": "nmt",
  "translatedText": "さらに絞り込みたい場合は、中間点 1 を二乗し てみるとよいでしょう。",
  "time_range": [
   102.64,
   107.24
  ]
 },
 {
  "input": "5.",
  "model": "nmt",
  "translatedText": "5.",
  "time_range": [
   107.24,
   107.74
  ]
 },
 {
  "input": "This comes out to be 2.",
  "model": "nmt",
  "translatedText": "これは 2 になります。",
  "time_range": [
   107.74,
   109.08528735632183
  ]
 },
 {
  "input": "25, a little too high, so you'd focus on the region between 1 and 1.",
  "model": "nmt",
  "translatedText": "25 は少し高すぎるため、1 と 1 の 間の領域に焦点を当てます。",
  "time_range": [
   109.08528735632183,
   114.0
  ]
 },
 {
  "input": "5.",
  "model": "nmt",
  "translatedText": "5.",
  "time_range": [
   114.0,
   114.94
  ]
 },
 {
  "input": "And so on, you can probably see how this would keep going, you'd keep computing at the midpoint and then chopping your search space in half.",
  "model": "nmt",
  "translatedText": "などなど、おそらくこれがどのように継続するかがわかるでしょう。 中 間点で計算を続け、検索スペースを半分に切り分けることになります。",
  "time_range": [
   114.94,
   125.54
  ]
 },
 {
  "input": "Another way to think about this, which is going to make it easier for us once we get up to higher dimensions, is to instead focus on the equivalent question for when the difference between these two functions is zero.",
  "model": "nmt",
  "translatedText": "これについて考えるもう 1 つの方法は、より高い次元に到 達すると簡単になりますが、代わりに、これら 2 つの関 数の差がゼロの場合の同等の質問に焦点を当てることです。",
  "time_range": [
   125.54,
   136.38
  ]
 },
 {
  "input": "In those terms, we found a region of inputs where that difference was negative on one end, and it was positive on another end.",
  "model": "nmt",
  "translatedText": "これらの観点から、その差が一方の端では負であり、も う一方の端では正である入力の領域が見つかりました。",
  "time_range": [
   136.38,
   144.02
  ]
 },
 {
  "input": "We split it into two, and the half we narrowed our attention to was the one where the outermost points had varying signs.",
  "model": "nmt",
  "translatedText": "私たちはそれを 2 つに分割し、最も外側の点に さまざまな兆候がある半分に注意を絞りました。",
  "time_range": [
   144.02,
   151.6
  ]
 },
 {
  "input": "Like this, we were able to keep going forever, taking each region with varying signs on the border, finding a smaller such region among its halves, knowing that ultimately we have to be narrowing in on a point which is going to be exactly zero.",
  "model": "nmt",
  "translatedText": "このようにして、最終的には正確にゼロになる点に絞り込む必要があることを認 識しながら、境界上のさまざまな標識を持つ各領域を取得し、その半分の中から そのような小さな領域を見つけながら、永遠に作業を続けることができました。",
  "time_range": [
   151.6,
   166.26
  ]
 },
 {
  "input": "In short, solving equations can always be framed as finding when a certain function is equal to zero, and to do that, we have this heuristic, if f is positive at one point and negative at another point, you can find someplace in between where it's zero, at least if everything changes smoothly with no sudden jumps.",
  "model": "nmt",
  "translatedText": "つまり、方程式を解くということは、常に特定の関数がゼロに等しいときを見つけると いう枠組みで行うことができ、それを行うには、このヒューリスティックがあり、f がある点で正で、別の点で負である場合、その間のどこかを見つけることができます。 少なくとも、すべてが急激に変化することなくスムーズに変化する場合はゼロです。",
  "time_range": [
   166.26,
   183.98
  ]
 },
 {
  "input": "The amazing thing I want to show you is that you can extend this kind of thinking into two-dimensional equations, equations between functions whose inputs and outputs are both two-dimensional.",
  "model": "nmt",
  "translatedText": "私がお見せしたい驚くべきことは、この種の考え方を 2 次元の方程式、つまり入力と出力が両方とも 2 次 元である関数間の方程式に拡張できるということです。",
  "time_range": [
   183.98,
   194.94
  ]
 },
 {
  "input": "For example, complex numbers are 2D, and this tool we're developing is perfect for finding solutions to complex equations.",
  "model": "nmt",
  "translatedText": "たとえば、複素数は 2D であり、私たちが開発している このツールは、複雑な方程式の解を見つけるのに最適です。",
  "time_range": [
   194.94,
   201.78
  ]
 },
 {
  "input": "Now, since we're going to be talking about these 2D functions so much, let's take a brief side step and consider how we illustrate these.",
  "model": "nmt",
  "translatedText": "さて、これらの 2D 関数についてたくさん話しますので、少し横 道にそれて、これらをどのように説明するかを考えてみましょう。",
  "time_range": [
   201.78,
   209.38
  ]
 },
 {
  "input": "Graphing a function with a 2D input and 2D output would require four dimensions, and that's not going to work so well in our 3D world on our 2D screens, but we still have a couple good options.",
  "model": "nmt",
  "translatedText": "2D 入力と 2D 出力を持つ関数をグラフ化するには 4 次 元が必要ですが、2D 画面上の 3D 世界ではあまりうまく機 能しませんが、それでもいくつかの良いオプションがあります。",
  "time_range": [
   209.38,
   221.14
  ]
 },
 {
  "input": "One is to just look at both the input space and output space side by side.",
  "model": "nmt",
  "translatedText": "1 つは、入力空間と出力空間の両方を並べて見ることです。",
  "time_range": [
   221.14,
   226.02
  ]
 },
 {
  "input": "Each point in the input space moves to a particular point in the output space, and I can show how moving around that input point corresponds to certain movements in the output space.",
  "model": "nmt",
  "translatedText": "入力空間内の各点は出力空間内の特定の点に移動し、その入力点の周りの移動 が出力空間内の特定の動きにどのように対応するかを示すことができます。",
  "time_range": [
   226.02,
   237.06
  ]
 },
 {
  "input": "All of the functions we consider will be continuous, in the sense that small little changes to the input only correspond to small little changes in the output, there's no sudden jumps.",
  "model": "nmt",
  "translatedText": "私たちが考慮する関数はすべて連続的であり、入力に対 する小さな小さな変化は出力の小さな小さな変化にのみ 対応するという意味で、突然のジャンプはありません。",
  "time_range": [
   237.06,
   247.46
  ]
 },
 {
  "input": "Another option we have is to imagine the arrow from the origin of the output space to that output point, and to attach a miniature version of that arrow to the input point.",
  "model": "nmt",
  "translatedText": "もう 1 つのオプションは、出力空間の原点からその出力点までの矢印を 想像し、その矢印のミニチュア バージョンを入力点に接続することです。",
  "time_range": [
   247.46,
   257.38
  ]
 },
 {
  "input": "This can give us a sense, at a glance, for where a given input point goes, or where many different input points go by drawing the full vector field.",
  "model": "nmt",
  "translatedText": "これにより、特定の入力ポイントがどこに行くのか、または完全なベクトル フィール ドを描画することで多くの異なる入力ポイントがどこに行くのかが一目でわかります。",
  "time_range": [
   257.38,
   267.58
  ]
 },
 {
  "input": "And unfortunately when you do this at a lot of points it can get pretty cluttered, so here let me make all of the arrows the same size, and what this means is we can get a sense of the direction of each output point.",
  "model": "nmt",
  "translatedText": "残念ながら、多くのポイントでこれを行うと、かなり乱雑になる可 能性があるため、ここではすべての矢印を同じサイズにします。 これは、各出力ポイントの方向を把握できることを意味します。",
  "time_range": [
   267.58,
   277.9
  ]
 },
 {
  "input": "But perhaps the prettiest way to illustrate two-dimensional functions, and the one we'll be using most this video, is to associate each point in that output space with a color.",
  "model": "nmt",
  "translatedText": "しかし、おそらく 2 次元関数を説明する最も美しい方法は、このビデオ で最も使用する方法であり、出力空間内の各点を色に関連付けることです。",
  "time_range": [
   277.9,
   287.4
  ]
 },
 {
  "input": "Here we've used hues, that is where the color falls along a rainbow or a color wheel, to correspond to the direction away from the origin, and we're using darkness or brightness to correspond to the distance from the origin.",
  "model": "nmt",
  "translatedText": "ここでは、原点から遠ざかる方向に対応するために色相、つまり虹 またはカラー ホイールに沿って色が分布する場所を使用し、原点 からの距離に対応するために暗さまたは明るさを使用しています。",
  "time_range": [
   287.4,
   300.06
  ]
 },
 {
  "input": "For example, focusing on this array of outputs, all of these points are red, but the ones closer to the origin are a little darker, and the ones farther away are a little brighter.",
  "model": "nmt",
  "translatedText": "たとえば、この出力配列に注目すると、これらの点はすべて赤で すが、原点に近い点は少し暗く、遠い点は少し明るくなります。",
  "time_range": [
   300.06,
   310.34
  ]
 },
 {
  "input": "And focusing on this array of outputs, all of the points are green, and again, closer to the origin means darker, farther away means lighter.",
  "model": "nmt",
  "translatedText": "この出力の配列に注目すると、すべての点が緑色であり、 原点に近いほど暗く、遠いほど明るいことを意味します。",
  "time_range": [
   310.34,
   318.98
  ]
 },
 {
  "input": "And so on, all we're doing here is assigning a specific color to each direction, all changing continuously.",
  "model": "nmt",
  "translatedText": "など、ここで行っているのは各方向に特定の色を割り 当てているだけであり、すべて継続的に変化します。",
  "time_range": [
   318.98,
   325.3
  ]
 },
 {
  "input": "You might notice the darkness and brightness differences here are pretty subtle, but for this video, all we care about is the direction of outputs, not the magnitudes, the hues, not the brightness.",
  "model": "nmt",
  "translatedText": "ここでの暗さと明るさの違いは非常に微妙であることに気 づくかもしれませんが、このビデオでは、出力の方向だけ が重要であり、大きさ、色相、明るさではありません。",
  "time_range": [
   325.3,
   335.3
  ]
 },
 {
  "input": "The one important thing about brightness for you to notice is that near the origin, which has no particular direction, all of the colors fade to black.",
  "model": "nmt",
  "translatedText": "明るさに関して注目していただきたい重要な点は、特定の方向のな い原点付近では、すべての色が黒にフェードアウトすることです。",
  "time_range": [
   335.3,
   344.44
  ]
 },
 {
  "input": "So for thinking about functions, now that we've decided on a color for each output, we can visualize 2D functions by coloring each point in the input space based on the color of the point where it lands in the output space.",
  "model": "nmt",
  "translatedText": "関数について考えるために、各出力の色を決定したので 、出力空間で到達する点の色に基づいて入力空間の各点 を色付けすることで 2D 関数を視覚化できます。",
  "time_range": [
   344.44,
   357.86
  ]
 },
 {
  "input": "I like to imagine many different points from that input space hopping over to their corresponding outputs in the output space, then getting painted based on the color of the point where they land, and then hopping back to where they came from in the input space.",
  "model": "nmt",
  "translatedText": "私は、多くの異なる点が入力空間から出力空間の対応する出 力に飛び移り、着地した点の色に基づいてペイントされ、入 力空間の元の場所に飛び戻る様子を想像するのが好きです。",
  "time_range": [
   357.86,
   371.82
  ]
 },
 {
  "input": "Doing this for every point in the input space, you can get a sense just by looking at that input space for roughly where the function takes each point.",
  "model": "nmt",
  "translatedText": "入力空間内のすべてのポイントに対してこれを行うと、その入力空間を見 るだけで、関数が各ポイントを取得するおおよその場所がわかります。",
  "time_range": [
   371.82,
   379.14
  ]
 },
 {
  "input": "For example, this stripe of pink points on the left tells us that all of those points get mapped somewhere in the pink direction, that lower left of the output space.",
  "model": "nmt",
  "translatedText": "たとえば、左側のピンク色の点のストライプは、これらの点すべてがピンク 色の方向、つまり出力空間の左下にマッピングされることを示しています。",
  "time_range": [
   379.14,
   390.0
  ]
 },
 {
  "input": "Also those three points which are black with lots of colors around them are the ones that go to zero.",
  "model": "nmt",
  "translatedText": "また、周囲が黒く色がたくさんある 3 つの点は、ゼロになる点です。",
  "time_range": [
   390.0,
   397.12
  ]
 },
 {
  "input": "Alright, so just like the 1D case, solving equations of 2D functions can always be reframed by asking when a certain function is equal to zero.",
  "model": "nmt",
  "translatedText": "わかりました。 1 次元の場合と同様に、2 次元関数の方程式を解くことは、 特定の関数がいつゼロに等しいかを尋ねることによって常に再構成できます。",
  "time_range": [
   397.12,
   409.78
  ]
 },
 {
  "input": "So that's our challenge right now, create an algorithm that finds which input points of a given 2D function go to zero.",
  "model": "nmt",
  "translatedText": "それが今の私たちの課題です。 与えられた 2D 関数のどの 入力点がゼロになるかを見つけるアルゴリズムを作成します。",
  "time_range": [
   409.78,
   420.9
  ]
 },
 {
  "input": "You might point out that if you're looking at a color map like this by seeing those black dots, you already know where the zeros of the function are.",
  "model": "nmt",
  "translatedText": "このようなカラー マップを見ている場合、これらの黒い点を見れば、関数 のゼロがどこにあるかがすでにわかっていると指摘されるかもしれません。",
  "time_range": [
   420.9,
   428.7
  ]
 },
 {
  "input": "So does that count?",
  "model": "nmt",
  "translatedText": "それで、それはカウントされますか？",
  "time_range": [
   428.7,
   431.46
  ]
 },
 {
  "input": "Keep in mind that to create a diagram like this, we've had the computer compute the function at all the pixels on the plane, but our goal is to find a more efficient algorithm that only requires computing the function at as few points as possible, only having a limited view of the colors, so to speak.",
  "model": "nmt",
  "translatedText": "このような図を作成するために、コンピューターに平面上のすべてのピクセ ルで関数を計算させましたが、私たちの目標は、できるだけ少ない点で関 数を計算するだけで済む、より効率的なアルゴリズムを見つけることである ことに注意してください。 いわば、色の見え方が限られているだけです。",
  "time_range": [
   431.46,
   449.6
  ]
 },
 {
  "input": "And also from a more theoretical standpoint, it'd be nice to have a general construct that tells us the conditions for whether or not a zero exists inside a given region.",
  "model": "nmt",
  "translatedText": "また、より理論的な観点から見ると、特定の領域内にゼロが存 在するかどうかの条件を示す一般的な構成があれば便利です。",
  "time_range": [
   449.6,
   458.3
  ]
 },
 {
  "input": "Remember, in one dimension the main insight was that if a continuous function is positive at one point and negative at another, somewhere in between it must be zero.",
  "model": "nmt",
  "translatedText": "ある次元での主要な洞察は、連続関数がある点で正で別の点で負である場合 、その間のどこかでゼロになるはずだということを思い出してください。",
  "time_range": [
   458.3,
   468.92
  ]
 },
 {
  "input": "So how do we extend that into two dimensions?",
  "model": "nmt",
  "translatedText": "では、それを二次元に拡張するにはどうすればよいでしょうか?",
  "time_range": [
   468.92,
   470.96
  ]
 },
 {
  "input": "We need some sort of analog of talking about signs.",
  "model": "nmt",
  "translatedText": "記号について話すのに似たようなものが必要です。",
  "time_range": [
   470.96,
   475.18
  ]
 },
 {
  "input": "One way to think about what signs even are is directions.",
  "model": "nmt",
  "translatedText": "標識とは何かについて考える 1 つの方法は、方向です。",
  "time_range": [
   475.18,
   479.14
  ]
 },
 {
  "input": "Positive means you're pointing to the right along the number line, and negative means you're pointing to the left.",
  "model": "nmt",
  "translatedText": "正は数直線に沿って右を指していることを意味 し、負は左を指していることを意味します。",
  "time_range": [
   479.14,
   484.24
  ]
 },
 {
  "input": "Two-dimensional quantities also have direction, but for them the options are much wider, they can point anywhere along a whole circle of possibilities.",
  "model": "nmt",
  "translatedText": "2 次元の量にも方向がありますが、2 次元の量の場合、選択肢は はるかに広く、可能性の円全体に沿ってどこを指すこともできます。",
  "time_range": [
   484.24,
   492.78
  ]
 },
 {
  "input": "So the same way that in one dimension we were asking whether a given function is positive or negative on the boundary of a range, which is just two points, for 2d functions we're going to be looking at the boundary of a region, which is a loop, and ask about the direction of the function's output along that boundary.",
  "model": "nmt",
  "translatedText": "したがって、1 次元で特定の関数が範囲の境界 (わずか 2 点) で正であるか負であるかを尋ねるのと同じように 、2 次元関数の場合は領域の境界を調べます。 はループであ り、その境界に沿った関数の出力の方向について尋ねます。",
  "time_range": [
   492.78,
   513.76
  ]
 },
 {
  "input": "For example, we see that along this loop around this zero, the output goes through every possible direction, all the colors of the rainbow, red, yellow, green, blue, back to red, and everything in between along the way.",
  "model": "nmt",
  "translatedText": "たとえば、このゼロを中心としたループに沿って、出力があら ゆる方向、つまり虹のすべての色、赤、黄、緑、青から赤に戻 り、途中でその間のすべての色を通過することがわかります。",
  "time_range": [
   513.76,
   525.82
  ]
 },
 {
  "input": "But along this loop over here, with no zeros inside of it, the output doesn't go through every color, it goes through some of the orangish ones, but never, say, green or blue.",
  "model": "nmt",
  "translatedText": "しかし、このループに沿って、内部にゼロがないので、出力はすべての色を通過するわ けではなく、オレンジ色のいくつかを通過しますが、たとえば緑や青は通過しません。",
  "time_range": [
   525.82,
   535.42
  ]
 },
 {
  "input": "And this is promising, it looks a lot like how things worked in one dimension.",
  "model": "nmt",
  "translatedText": "これは有望であり、ある次元で物事がどのように機能したかによく似ています。",
  "time_range": [
   535.42,
   539.32
  ]
 },
 {
  "input": "Maybe in the same way that if a 1d function takes both possible signs on the boundary of a 1d region, there was a zero somewhere inside, we might hypothesize that if a 2d function hits outputs of all possible directions, all possible colors, along the boundary of a 2d region, then somewhere inside that region it must go to zero.",
  "model": "nmt",
  "translatedText": "おそらく、1 次元関数が 1 次元領域の境界で両方の可能な符号を 取る場合、内部のどこかにゼロがあったのと同じように、2 次元関 数がすべての可能な方向、すべての可能な色の出力を、 2D 領域の 境界にある場合、その領域内のどこかでゼロになる必要があります。",
  "time_range": [
   539.32,
   560.98
  ]
 },
 {
  "input": "So that's our guess, and take a moment to think about if this should be true, and if so why.",
  "model": "nmt",
  "translatedText": "これは私たちの推測であり、これが真実であるべきかどうか、 そうであるならなぜその理由について少し考えてください。",
  "time_range": [
   560.98,
   567.66
  ]
 },
 {
  "input": "If we start thinking about a tiny loop around some input point, we know that since everything is continuous, our function takes it to some tiny loop near the corresponding output.",
  "model": "nmt",
  "translatedText": "ある入力点の周りの小さなループについて考え始めると、すべてが連続しているた め、関数が対応する出力近くの小さなループにそれを取り込むことがわかります。",
  "time_range": [
   567.66,
   576.66
  ]
 },
 {
  "input": "But look, for most tiny loops, the output varies in color.",
  "model": "nmt",
  "translatedText": "ただし、ほとんどの小さなループでは、出力の色が異なります。",
  "time_range": [
   576.66,
   581.14
  ]
 },
 {
  "input": "If you pick any output point other than zero, and draw a sufficiently tight loop near it, the loop's colors are all going to be about the same color as that point.",
  "model": "nmt",
  "translatedText": "ゼロ以外の出力点を選択し、その近くに十分に密なループを描画 すると、ループの色はすべてその点とほぼ同じ色になります。",
  "time_range": [
   581.14,
   589.86
  ]
 },
 {
  "input": "A tight loop over here is all bluish, a tight loop over here is all yellowish, you certainly aren't going to get every color of the rainbow.",
  "model": "nmt",
  "translatedText": "ここのタイトなループはすべて青みがかっており、こちらのタイトなループはす べて黄色がかっていますが、虹のすべての色が得られるわけではありません。",
  "time_range": [
   589.86,
   598.44
  ]
 },
 {
  "input": "The only point where you can tighten loops around it while still getting all the colors is the colorless origin, zero itself.",
  "model": "nmt",
  "translatedText": "すべての色を取得しながらその周りのループを締めることが できる唯一のポイントは、無色の原点であるゼロ自体です。",
  "time_range": [
   598.44,
   607.12
  ]
 },
 {
  "input": "So it is indeed the case that if you have loops going through every color of the rainbow, tightening and tightening, narrowing in on a point, then that point must in fact be a zero.",
  "model": "nmt",
  "translatedText": "したがって、虹のすべての色を通過するループがあり、締め付 けて締め付け、ある点を狭めていく場合、その点は実際にはゼ ロでなければならないということは実際に当てはまります。",
  "time_range": [
   607.12,
   617.36
  ]
 },
 {
  "input": "And so let's set up a 2d equation solver just like our one-dimensional equation solver.",
  "model": "nmt",
  "translatedText": "それでは、1 次元方程式ソルバーと同じように 2 次元方程式ソルバーをセットアップしましょう。",
  "time_range": [
   617.36,
   622.36
  ]
 },
 {
  "input": "When we find a large region whose border goes through every color, split it into two, and then look at the colors on the boundary of each half.",
  "model": "nmt",
  "translatedText": "境界がすべての色を通過する大きな領域を見つけたら、それを 2 つに分割し、それぞれの半分の境界にある色を調べます。",
  "time_range": [
   622.36,
   630.64
  ]
 },
 {
  "input": "In the example shown here, the border on the left half doesn't go through all colors, there are no points that map to the orangeish yellowish directions, for example.",
  "model": "nmt",
  "translatedText": "ここに示す例では、左半分の境界線はすべての色を通過しているわけではなく、たとえ ば、オレンジがかった黄色がかった方向にマッピングされるポイントはありません。",
  "time_range": [
   630.64,
   639.08
  ]
 },
 {
  "input": "So I'll grey out this area as a way of saying we don't want to search it any further.",
  "model": "nmt",
  "translatedText": "したがって、これ以上検索したくないという意味で、この領域をグレー表示にします。",
  "time_range": [
   639.08,
   643.48
  ]
 },
 {
  "input": "The right half does go through all the colors, spends a lot of time in the green direction, then passes through yellow orange red, as well as blue violet pink.",
  "model": "nmt",
  "translatedText": "右半分はすべての色を通過し、緑の方向に多くの時間を費やし 、その後、黄、オレンジ、赤、青、紫、ピンクを通過します。",
  "time_range": [
   643.48,
   651.12
  ]
 },
 {
  "input": "Now remember, what that means is that points of this boundary get mapped to outputs of all possible directions.",
  "model": "nmt",
  "translatedText": "これが意味するのは、この境界の点がすべての可能な方向の 出力にマッピングされるということを思い出してください。",
  "time_range": [
   651.12,
   657.8
  ]
 },
 {
  "input": "So we'll explore it further, subdividing again and checking the boundary for each region.",
  "model": "nmt",
  "translatedText": "そこで、さらに詳しく調べて、再度細分化し、各領域の境界を確認します。",
  "time_range": [
   657.8,
   662.9
  ]
 },
 {
  "input": "The boundary of the top is all green, so we'll stop searching there.",
  "model": "nmt",
  "translatedText": "上部の境界はすべて緑色なので、そこで探索を終了します。",
  "time_range": [
   662.9,
   667.0
  ]
 },
 {
  "input": "But the bottom is colorful enough to deserve a subdivision.",
  "model": "nmt",
  "translatedText": "しかし、底部は細分化に値するほどカラフルです。",
  "time_range": [
   667.0,
   670.5
  ]
 },
 {
  "input": "And just continue like this.",
  "model": "nmt",
  "translatedText": "そしてこのまま続けてください。",
  "time_range": [
   670.5,
   672.42
  ]
 },
 {
  "input": "Check which subregion has a boundary covering all possible colors, meaning points of that boundary get mapped to all possible directions, and keep chopping those regions in half like we did for the one-dimensional case, eventually leading us to a zero over the func- Oh, hang on a second.",
  "model": "nmt",
  "translatedText": "どのサブ領域にすべての可能な色をカバーする境界があるかを確認し ます。 つまり、その境界の点がすべての可能な方向にマッピングさ れ、1 次元の場合と同様にそれらの領域を半分に切り続け、最終 的に関数全体をゼロに導きます。 ああ、ちょっと待ってください。",
  "time_range": [
   672.42,
   689.32
  ]
 },
 {
  "input": "What happened here?",
  "model": "nmt",
  "translatedText": "ここで何が起こったのでしょうか？",
  "time_range": [
   689.32,
   690.32
  ]
 },
 {
  "input": "Neither of those last subdivisions on the bottom right passed through all the colors, so our algorithm stopped because it didn't want to search through either of those, but it also didn't find a zero.",
  "model": "nmt",
  "translatedText": "右下の最後のサブディビジョンはどちらもすべての色を通過し なかったので、アルゴリズムはそれらのいずれも検索したくな かったため停止しましたが、ゼロも見つかりませんでした。",
  "time_range": [
   690.32,
   701.16
  ]
 },
 {
  "input": "Okay, clearly something's wrong here.",
  "model": "nmt",
  "translatedText": "さて、明らかにここで何かが間違っています。",
  "time_range": [
   701.16,
   703.72
  ]
 },
 {
  "input": "And that's okay, being wrong is a regular part of doing math.",
  "model": "nmt",
  "translatedText": "大丈夫、数学をやっていると間違うのはつきものです。",
  "time_range": [
   703.72,
   706.68
  ]
 },
 {
  "input": "If we look back, we had this hypothesis, and it led us to this proposed algorithm, so we were mistaken somewhere.",
  "model": "nmt",
  "translatedText": "振り返ってみると、この仮説があり、それがこの提案されたア ルゴリズムにつながったので、どこかで間違っていました。",
  "time_range": [
   706.68,
   713.68
  ]
 },
 {
  "input": "And being good at math is not about being right the first time, it's about having the resilience to carefully look back and understand the mistakes, and understand how to fix them.",
  "model": "nmt",
  "translatedText": "そして、数学が得意であるということは、最初から正しいと いうことではなく、注意深く振り返って間違いを理解し、 それらを修正する方法を理解する回復力を持つことです。",
  "time_range": [
   713.68,
   722.52
  ]
 },
 {
  "input": "Now the problem here is that we had a region whose border went through every color, but when we split it in the middle, neither subregion's border went through every color, we had no options for where to keep searching next, and that broke the zero finder.",
  "model": "nmt",
  "translatedText": "ここでの問題は、境界線がすべての色を通過する領域があったのですが、それを中央で分 割すると、どちらのサブ領域の境界線もすべての色を通過しなくなり、次にどこで検索を 続けるかについての選択肢がなく、それがゼロを突破してしまうことです。 ファインダ。",
  "time_range": [
   722.52,
   735.28
  ]
 },
 {
  "input": "Now in one dimension, this sort of thing never happened.",
  "model": "nmt",
  "translatedText": "さて、ある次元では、このようなことは決して起こりませんでした。",
  "time_range": [
   735.28,
   738.12
  ]
 },
 {
  "input": "Any time you had an interval whose endpoints have different signs, if you split it up, you know that you're guaranteed to get some subinterval whose endpoints also have different signs.",
  "model": "nmt",
  "translatedText": "端点の符号が異なる区間がある場合、それ を分割すると、端点の符号も異なる部分区 間が確実に得られることがわかります。",
  "time_range": [
   738.12,
   749.2
  ]
 },
 {
  "input": "Or put another way, any time you have two intervals whose endpoints don't change signs, if you combine them, you'll get a bigger interval whose endpoints also don't change sign.",
  "model": "nmt",
  "translatedText": "別の言い方をすると、終点の符号が変わらない 2 つの区間がある場合、それらを結合すると、終点 の符号も変わらないより大きな区間が得られます。",
  "time_range": [
   749.2,
   759.28
  ]
 },
 {
  "input": "But in two dimensions, it's possible to find two regions whose borders don't go through every color, but whose boundaries combine to give a region whose border does go through every color.",
  "model": "nmt",
  "translatedText": "しかし、2 次元では、境界線がすべての色を通過するわ けではなく、境界線が結合してすべての色を通過する境 界線を持つ 2 つの領域を見つけることができます。",
  "time_range": [
   759.28,
   769.94
  ]
 },
 {
  "input": "And in just this way, our proposed zero-finding algorithm broke.",
  "model": "nmt",
  "translatedText": "そしてまさにこのようにして、私たちが提案したゼロ探索アルゴリズムは機能しませんでした。",
  "time_range": [
   769.94,
   773.74
  ]
 },
 {
  "input": "In fact, if you think about it, you can find a big loop whose border goes through every possible color without there being a zero inside of it.",
  "model": "nmt",
  "translatedText": "実際、よく考えてみると、内側にゼロがなく、境界線がすべての 可能な色を通過する大きなループを見つけることができます。",
  "time_range": [
   773.74,
   783.12
  ]
 },
 {
  "input": "Now that's not to say that we were wrong in our claims about tiny loops when we said that a forever narrowing loop going through every color has to be narrowing in on a zero.",
  "model": "nmt",
  "translatedText": "これは、すべての色を通過する永遠に狭くなるループはゼロに近づく必要があると述べた とき、小さなループに関する私たちの主張が間違っていたということではありません。",
  "time_range": [
   783.12,
   793.04
  ]
 },
 {
  "input": "But what made a mess of things for us is that this does-my-border-go-through-every-color-or-not property doesn't combine in a nice, predictable way when you combine regions.",
  "model": "nmt",
  "translatedText": "しかし、私たちにとって問題を引き起こしたのは、領域を結合するときに、この dos-my-border-go-t hrough-every-color-or-not プロパティが、適切かつ予測可能な方法で結合しないことです。",
  "time_range": [
   793.04,
   803.04
  ]
 },
 {
  "input": "But don't worry, it turns out we can modify this slightly to a more sophisticated property that does combine to give us what we want.",
  "model": "nmt",
  "translatedText": "ただし、心配しないでください。 これを少し変更して、必要なものを実現する より洗練されたプロパティを組み合わせることができることがわかりました。",
  "time_range": [
   803.04,
   818.56
  ]
 },
 {
  "input": "The idea is that instead of simply asking whether we can find a color at some point along the loop, let's keep more careful track of how these colors change as we walk around that loop.",
  "model": "nmt",
  "translatedText": "このアイデアは、単にループ沿いのある点で色が見つかるかどうか を尋ねるのではなく、そのループを歩き回るときにこれらの色がど のように変化するかをより注意深く追跡しようというものです。",
  "time_range": [
   818.56,
   828.1
  ]
 },
 {
  "input": "Let me show you what I mean with an example.",
  "model": "nmt",
  "translatedText": "例を挙げて私が何を意味するのかを説明しましょう。",
  "time_range": [
   828.1,
   830.06
  ]
 },
 {
  "input": "I'll keep a little color wheel up here in the corner to help us keep track.",
  "model": "nmt",
  "translatedText": "追跡しやすくするために、ここの隅に小さなカラーホイールを置いておきます。",
  "time_range": [
   830.06,
   834.12
  ]
 },
 {
  "input": "When the colors along a path of inputs move through the rainbow in a specific direction, from red to yellow, yellow to green, green to blue, or blue to red, the output is swinging clockwise.",
  "model": "nmt",
  "translatedText": "入力のパスに沿った色が、赤から黄色、黄から緑、 緑から青、または青から赤という特定の方向に虹を 通って移動すると、出力は時計回りに振れます。",
  "time_range": [
   834.12,
   845.72
  ]
 },
 {
  "input": "But on the other hand, if the colors move the other way through the rainbow, from blue to green, green to yellow, yellow to red, or red to blue, the output is swinging counterclockwise.",
  "model": "nmt",
  "translatedText": "しかしその一方で、色が虹を通って青から緑、緑から黄、黄から赤、ま たは赤から青へ逆方向に移動する場合、出力は反時計回りに振れます。",
  "time_range": [
   845.72,
   857.16
  ]
 },
 {
  "input": "So walking along this short path here, the colors wind a fifth of the way clockwise through the color wheel, and walking along this path here, the colors wind another fifth of the way clockwise through the color wheel.",
  "model": "nmt",
  "translatedText": "ここでこの短いパスに沿って歩くと、色はカラー ホイールを時計回り に 5 分の 1 曲がります。 そして、このパスに沿って歩くと、色 はカラー ホイールを時計回りにさらに 5 分の 1 曲がります。",
  "time_range": [
   857.16,
   870.62
  ]
 },
 {
  "input": "Of course, that means that if you go through both paths, one after the other, the colors wind a total of two-fifths of a full turn clockwise.",
  "model": "nmt",
  "translatedText": "もちろん、これは、両方のパスを順番に通過すると、色が時 計回りに合計 5 分の 2 回転することを意味します。",
  "time_range": [
   870.62,
   879.38
  ]
 },
 {
  "input": "The total amount of winding just adds up, and this is going to be key, this is the kind of straightforward combining that will be useful to us.",
  "model": "nmt",
  "translatedText": "巻き上げの総量は加算されるだけであり、これが重要になるでし ょう。 これは私たちにとって役立つ、簡単な組み合わせです。",
  "time_range": [
   879.38,
   887.14
  ]
 },
 {
  "input": "When I say total amount of winding, I want you to imagine an old fashioned odometer that ticks forward as the arrow spins clockwise, but backwards as the arrow spins counterclockwise.",
  "model": "nmt",
  "translatedText": "総巻き上げ量というと、矢印が時計回りに回転すると前進し、反時計回 りに回転すると後進する昔ながらの走行距離計を想像してください。",
  "time_range": [
   887.14,
   898.7
  ]
 },
 {
  "input": "So counterclockwise winding counts as negative clockwise winding.",
  "model": "nmt",
  "translatedText": "したがって、反時計回りの巻きは負の時計回りの巻きとしてカウントされます。",
  "time_range": [
   898.7,
   903.02
  ]
 },
 {
  "input": "The outputs may turn a lot, but if some of that turning is in the opposite direction, it cancels out.",
  "model": "nmt",
  "translatedText": "出力は大きく回転する可能性がありますが、その回 転の一部が反対方向にある場合は相殺されます。",
  "time_range": [
   903.02,
   908.94
  ]
 },
 {
  "input": "For example, if you move forward along this path, and then move backwards along that same path, the total amount of winding ends up being zero, the backwards movement literally rewinds through the previously seen colors, reversing all the previous winding, and returning the odometer back to where it started.",
  "model": "nmt",
  "translatedText": "たとえば、このパスに沿って前方に移動し、同じパスに沿って後方 に移動すると、巻き上げの総量は最終的にゼロになり、後方への移 動は文字通り前に見た色を巻き戻し、前の巻き上げをすべて反転し 、元の色に戻ります。 オドメーターがスタート地点に戻りました。",
  "time_range": [
   908.94,
   926.3
  ]
 },
 {
  "input": "For our purposes, we'll care most about looking at the winding along loops.",
  "model": "nmt",
  "translatedText": "私たちの目的では、ループに沿った巻き付けを観察することに最も重点を置きます。",
  "time_range": [
   926.3,
   930.48
  ]
 },
 {
  "input": "For example, let's say we walk around this entire loop clockwise.",
  "model": "nmt",
  "translatedText": "たとえば、このループ全体を時計回りに歩くとします。",
  "time_range": [
   930.48,
   934.28
  ]
 },
 {
  "input": "The outputs we come across wind around a total of three full clockwise turns, the colors swung through the rainbow, in order, from red to red again, and then again, and again.",
  "model": "nmt",
  "translatedText": "私たちが目にする出力は時計回りに合計 3 回転し、色は 虹の中を順番に、赤から赤、そしてまた赤へと変化します。",
  "time_range": [
   934.28,
   947.12
  ]
 },
 {
  "input": "In the jargon mathematicians use, we say that along this loop, the total winding number is 3.",
  "model": "nmt",
  "translatedText": "数学者が使う専門用語では、このループに沿っ た巻き数の合計は 3 であると言います。",
  "time_range": [
   947.12,
   954.1
  ]
 },
 {
  "input": "For other loops, it could be any other whole number, maybe a larger one if the output swings around many times as the input walks around a single loop, or it could be a smaller number if the output only swings around once or twice.",
  "model": "nmt",
  "translatedText": "他のループの場合、これは他の整数になる可能性があり、入力が 1 つのループを 周回するときに出力が何度も変動する場合はより大きな値になる可能性があり、出力 が 1 回か 2 回しか変動しない場合はより小さい数になる可能性があります。",
  "time_range": [
   954.1,
   967.06
  ]
 },
 {
  "input": "Or that winding number could even be a negative integer, if the output was swinging counterclockwise as we walk clockwise around the loop.",
  "model": "nmt",
  "translatedText": "あるいは、ループを時計回りに歩くときに出力が反時計回りに 振れる場合、その巻数は負の整数になる可能性もあります。",
  "time_range": [
   967.06,
   975.2
  ]
 },
 {
  "input": "But along any loop, this total amount of winding has to be a whole number.",
  "model": "nmt",
  "translatedText": "ただし、どのループに沿っても、この巻線の合計量は整数でなければなりません。",
  "time_range": [
   975.2,
   979.72
  ]
 },
 {
  "input": "I mean, by the time you get back to where you started, you'll have the same output that you started with.",
  "model": "nmt",
  "translatedText": "つまり、最初の場所に戻るまでに、最初 と同じ出力が得られることになります。",
  "time_range": [
   979.72,
   985.84
  ]
 },
 {
  "input": "Incidentally, if a path actually contains a point where the output is precisely zero, then technically you can't define a winding number along that, since the output has no particular direction.",
  "model": "nmt",
  "translatedText": "ちなみに、実際にパスに出力が正確にゼロになる点が含ま れている場合、出力には特定の方向がないため、技術的に はそれに沿った曲がり数を定義することはできません。",
  "time_range": [
   985.84,
   997.6
  ]
 },
 {
  "input": "This isn't going to be a problem for us, because our whole goal is to find zeros, so if this ever comes up, we just lucked out early.",
  "model": "nmt",
  "translatedText": "私たちの目標はゼロを見つけることなので、これは私たちにとって問題にはなりません。 その ため、もしこのようなことが起こったとしても、私たちは早くに幸運に恵まれただけです。",
  "time_range": [
   997.6,
   1005.2
  ]
 },
 {
  "input": "The main thing to notice about these winding numbers is that they add up nicely when you combine paths into bigger paths.",
  "model": "nmt",
  "translatedText": "これらの曲がりくねった数値について注目すべき主な点は、パスをより 大きなパスに結合すると、それらの数値が適切に加算されることです。",
  "time_range": [
   1005.2,
   1015.04
  ]
 },
 {
  "input": "But what we really want is for the winding numbers along the borders of regions to add up nicely when we combine regions to make bigger regions.",
  "model": "nmt",
  "translatedText": "しかし、私たちが本当に望んでいるのは、リージョンを結合してより大きなリージョンを作成 するときに、リージョンの境界に沿った曲がりくねった数字が適切に合計されることです。",
  "time_range": [
   1015.04,
   1023.12
  ]
 },
 {
  "input": "So do we have that property?",
  "model": "nmt",
  "translatedText": "それで、私たちはその財産を持っていますか？",
  "time_range": [
   1023.12,
   1026.32
  ]
 },
 {
  "input": "Well, take a look.",
  "model": "nmt",
  "translatedText": "まあ、見てください。",
  "time_range": [
   1026.32,
   1029.6
  ]
 },
 {
  "input": "The winding number as we go clockwise around this region on the left is the sum of the winding numbers from these four paths.",
  "model": "nmt",
  "translatedText": "左側のこの領域の周りを時計回りに進むときの巻き数 は、これら 4 つのパスからの巻き数の合計です。",
  "time_range": [
   1029.6,
   1037.92
  ]
 },
 {
  "input": "And the winding as we go clockwise around this region on the right is the sum of the winding numbers from these four paths.",
  "model": "nmt",
  "translatedText": "そして、右側のこの領域の周囲を時計回りに進むときの曲が りは、これら 4 つのパスからの曲がりの数の合計です。",
  "time_range": [
   1037.92,
   1045.48
  ]
 },
 {
  "input": "And when we combine those two regions into a bigger one, most of those paths become part of the clockwise border of the bigger region.",
  "model": "nmt",
  "translatedText": "そして、これら 2 つの領域をより大きな領域に結合すると、それらの パスのほとんどは、より大きな領域の時計回りの境界の一部になります。",
  "time_range": [
   1045.48,
   1053.76
  ]
 },
 {
  "input": "And as for those two paths that don't?",
  "model": "nmt",
  "translatedText": "では、そうでない 2 つのパスについてはどうでしょうか?",
  "time_range": [
   1053.76,
   1056.04
  ]
 },
 {
  "input": "They cancel out perfectly, one of them is just the reverse, the rewinding of the other one like we saw before.",
  "model": "nmt",
  "translatedText": "それらは完全に打ち消し合い、そのうちの 1 つはちょう ど逆で、前に見たようにもう 1 つは巻き戻されます。",
  "time_range": [
   1056.04,
   1062.66
  ]
 },
 {
  "input": "So the winding numbers along borders of regions add up in just the way we want them to.",
  "model": "nmt",
  "translatedText": "したがって、地域の境界に沿った曲がりくねった数字は、私たちが望んでいるとおりに合計されます。",
  "time_range": [
   1062.66,
   1068.84
  ]
 },
 {
  "input": "Also side note, this reasoning about oriented borders adding up nicely like this comes up a lot in mathematics, and it often goes under the name Stokes' theorem.",
  "model": "nmt",
  "translatedText": "また、余談ですが、このように方向性のある境界線がうまく合計されるという推論は 数学でよく出てきて、ストークスの定理という名前で呼ばれることがよくあります。",
  "time_range": [
   1068.84,
   1077.32
  ]
 },
 {
  "input": "Those of you who've studied multivariable calculus might recognize it from that context.",
  "model": "nmt",
  "translatedText": "多変数微積分を勉強したことがある人なら、その文脈からそれを認識できるかもしれません。",
  "time_range": [
   1077.32,
   1082.88
  ]
 },
 {
  "input": "So now, finally, with winding numbers in hand, we can get back to our equation solving goals.",
  "model": "nmt",
  "translatedText": "さて、いよいよ、曲がりくねった数字を手に入れて、方程式を解く目標に戻ることができます。",
  "time_range": [
   1082.88,
   1088.04
  ]
 },
 {
  "input": "The problem with the region we saw earlier is that even though its border passed through all possible colors, the winding number was actually zero.",
  "model": "nmt",
  "translatedText": "先ほど見た領域の問題は、その境界がすべての可能な色を通過して いるにもかかわらず、実際には巻き数が 0 であることです。",
  "time_range": [
   1088.04,
   1096.62
  ]
 },
 {
  "input": "The outputs wound around halfway, through yellow to red, and then started going counterclockwise back the other direction, then continued going through blue and hitting red from the other way, all in such a way that the total winding netted out to be zero.",
  "model": "nmt",
  "translatedText": "出力は、黄色から赤に向かって半分ほど巻き、その後、反時計回りに反 対方向に戻り始め、その後、青を通過し続け、反対方向から赤に到達し ます。 すべて、巻き線の合計がゼロになるような方法で行われました。",
  "time_range": [
   1096.62,
   1112.04
  ]
 },
 {
  "input": "But if you find a loop which not only hits every color, but it has the stronger condition of a non-zero winding number, then if you were to split it in half, you're guaranteed that at least one of those halves has a non-zero winding number as well, since things add up nicely in the way we want them to.",
  "model": "nmt",
  "translatedText": "しかし、すべての色にヒットするだけでなく、巻き数がゼロではないと いうより強力な条件を備えたループを見つけた場合、それを半分に分 割した場合、それらの半分の少なくとも 1 つは確実にゼロ以外の巻 き数も同様です。 これは、物事が希望どおりに合計されるためです。",
  "time_range": [
   1112.04,
   1128.6
  ]
 },
 {
  "input": "So in this way, you can keep going, narrowing in further and further onto one point.",
  "model": "nmt",
  "translatedText": "このようにして、1 点にどんどん絞り込んで進み続けることができます。",
  "time_range": [
   1128.6,
   1134.28
  ]
 },
 {
  "input": "And as you narrow in onto a point, you'll be doing so with tiny loops that have non-zero winding numbers, which implies they go through all possible colors, and therefore, like I said before, the point they're narrowing in on must be a zero.",
  "model": "nmt",
  "translatedText": "そして、点を絞り込むとき、ゼロ以外の巻き数を持つ小さなループを使用して絞り込む ことになります。 これは、ループがすべての可能な色を通過することを意味し、したが って、前に述べたように、絞り込まれている点はon はゼロでなければなりません。",
  "time_range": [
   1134.28,
   1147.68
  ]
 },
 {
  "input": "And that's it!",
  "model": "nmt",
  "translatedText": "以上です！",
  "time_range": [
   1147.68,
   1148.76
  ]
 },
 {
  "input": "We have now created a two-dimensional equation solver, and this time, I promise, there are no bugs.",
  "model": "nmt",
  "translatedText": "これで 2 次元方程式ソルバーが作成されま した。 今回はバグがないことを約束します。",
  "time_range": [
   1148.76,
   1154.76
  ]
 },
 {
  "input": "Winding numbers are precisely the tool we need to make this work.",
  "model": "nmt",
  "translatedText": "巻線番号はまさにこれを機能させるために必要なツールです。",
  "time_range": [
   1154.76,
   1158.2
  ]
 },
 {
  "input": "We can now solve equations that look like where does f of x equal g of x in two dimensions, just by considering how the difference between f and g winds around.",
  "model": "nmt",
  "translatedText": "これで、f と g の差がどのように変化するかを考慮するだけで、2 次元で x の f が x の g に等しいかというような方程式を解くことができます。",
  "time_range": [
   1158.2,
   1167.66
  ]
 },
 {
  "input": "Whenever we have a loop whose winding number isn't zero, we can run this algorithm on it, and we're guaranteed to find a solution somewhere within it.",
  "model": "nmt",
  "translatedText": "巻き数が 0 ではないループがある場合はいつでも、そのループに対してこのアル ゴリズムを実行でき、ループ内のどこかで必ず解が見つかることが保証されます。",
  "time_range": [
   1167.66,
   1175.16
  ]
 },
 {
  "input": "And what's more, just like in one dimension, this algorithm is incredibly efficient.",
  "model": "nmt",
  "translatedText": "さらに、一次元の場合と同様に、このアルゴリズムは信じられないほど効率的です。",
  "time_range": [
   1175.16,
   1180.3
  ]
 },
 {
  "input": "We keep narrowing in on half the size of our region each round, thus quickly narrowing in on the zeros, and all the while, we only have to check the value of the function along points of these loops, rather than checking it on the many points of the interior.",
  "model": "nmt",
  "translatedText": "各ラウンドで領域の半分のサイズに絞り込み続けることで、すぐにゼロに絞り込みま す。 その間、多くのループで関数の値をチェックするのではなく、これらのループの ポイントに沿って関数の値をチェックするだけで済みます。 インテリアのポイント。",
  "time_range": [
   1180.3,
   1195.24
  ]
 },
 {
  "input": "So in some sense, the overall work done is proportional only to the search space's perimeter, not the full area, which is amazing.",
  "model": "nmt",
  "translatedText": "したがって、ある意味、行われる全体的な作業は、検索スペースの全領域では なく、その周囲にのみ比例することになります。 これは驚くべきことです。",
  "time_range": [
   1195.24,
   1204.96
  ]
 },
 {
  "input": "Now once you understand what's going on, it's weirdly mesmerizing to just watch this in action, giving it some function and letting it search for zeros.",
  "model": "nmt",
  "translatedText": "何が起こっているのかを理解したら、これが実際に動作しているのを見るだけ で、これに何らかの機能を与え、ゼロを検索させるのは、奇妙に魅惑的です。",
  "time_range": [
   1204.96,
   1213.8
  ]
 },
 {
  "input": "Like I said before, complex numbers are two-dimensional, so let's apply it to some equation with complex numbers.",
  "model": "nmt",
  "translatedText": "前に述べたように、複素数は 2 次元なので、そ れを複素数を含む方程式に適用してみましょう。",
  "time_range": [
   1213.8,
   1220.34
  ]
 },
 {
  "input": "For example, here's the algorithm finding the zeros of the function x to the fifth minus x minus one over the complex plane.",
  "model": "nmt",
  "translatedText": "たとえば、複素平面上で関数 x の 5 番目から x から 1 を引いた値までのゼロを見つけるアルゴリズムを次に示します。",
  "time_range": [
   1220.34,
   1228.92
  ]
 },
 {
  "input": "It started by considering a very large region around the origin, which ended up having a winding number of 5.",
  "model": "nmt",
  "translatedText": "それは原点の周りの非常に広い領域を検討することか ら始まり、最終的に巻き数は 5 になりました。",
  "time_range": [
   1228.92,
   1235.44
  ]
 },
 {
  "input": "Each time you find a loop with a non-zero winding number, you split it in half, and figure out the winding number of the two smaller loops.",
  "model": "nmt",
  "translatedText": "巻き数が 0 以外のループを見つけるたびに、それを半分 に分割し、2 つの小さいループの巻き数を計算します。",
  "time_range": [
   1235.44,
   1242.88
  ]
 },
 {
  "input": "Either one or both of them is guaranteed to have a non-zero winding number, and when you see this, you know there's a zero somewhere inside that smaller loop, so you keep going in the same way, searching the smaller space.",
  "model": "nmt",
  "translatedText": "それらの一方または両方の巻き数がゼロではないことが保証されており 、これを見ると、その小さなループの内側のどこかにゼロがあることが わかります。 そのため、同じ方法で小さなスペースを検索し続けます。",
  "time_range": [
   1242.88,
   1254.3
  ]
 },
 {
  "input": "We also stop exploring a region if the path we're computing along happens to stumble across a zero, which actually happened once for this example on the right half here.",
  "model": "nmt",
  "translatedText": "また、計算中のパスがたまたまゼロに遭遇した場合にも、領域の探索を 停止します。 これは、この例の右半分で実際に 1 回発生しました。",
  "time_range": [
   1254.3,
   1263.42
  ]
 },
 {
  "input": "Those rare occurrences interfere with our ability to compute winding numbers, but hey, we got a zero.",
  "model": "nmt",
  "translatedText": "このようなまれな出来事は、巻数を計算する能 力を妨げますが、まあ、ゼロが得られました。",
  "time_range": [
   1263.42,
   1269.32
  ]
 },
 {
  "input": "And as for loops whose winding number is zero, you just don't explore those further.",
  "model": "nmt",
  "translatedText": "また、巻き数が 0 のループについては、それ以上探索しません。",
  "time_range": [
   1269.32,
   1273.32
  ]
 },
 {
  "input": "Maybe they have a solution inside, maybe they don't, we have no guarantees.",
  "model": "nmt",
  "translatedText": "おそらく彼らは内部に解決策を持っているかもしれませんが、もしかしたら持っていないかもしれません。 私たちには何の保証もありません。",
  "time_range": [
   1273.32,
   1278.52
  ]
 },
 {
  "input": "And letting our equation solver continue in this same way, it eventually converges to lots of zeros for this polynomial.",
  "model": "nmt",
  "translatedText": "そして、方程式ソルバーを同じ方法で継続させると、 最終的にはこの多項式の多くのゼロに収束します。",
  "time_range": [
   1278.52,
   1286.02
  ]
 },
 {
  "input": "By the way, it is no coincidence that the total winding number in this example happened to be 5.",
  "model": "nmt",
  "translatedText": "ちなみに、この例の総巻き数がたまたま 5 だったのは偶然ではありません。",
  "time_range": [
   1286.02,
   1291.66
  ]
 },
 {
  "input": "With complex numbers, the operation x to the n directly corresponds to walking around the output's origin n times as you walk around the input's origin once.",
  "model": "nmt",
  "translatedText": "複素数の場合、x から n への操作は、入力の原点の周りを 1 回歩く のと同じように、出力の原点の周りを n 回歩くことに直接対応します。",
  "time_range": [
   1291.66,
   1305.0
  ]
 },
 {
  "input": "So with the polynomial, for large enough inputs, every term other than the leading term becomes insignificant in comparison.",
  "model": "nmt",
  "translatedText": "したがって、多項式では、入力が十分に大きい場合、先頭の 項以外のすべての項は比較すると重要ではなくなります。",
  "time_range": [
   1305.0,
   1312.7
  ]
 },
 {
  "input": "So any complex polynomial whose leading term is x to the n has a winding number of n around a large enough loop.",
  "model": "nmt",
  "translatedText": "したがって、主項が x から n までである複素多項式は 、十分に大きなループの周りに n の巻き数を持ちます。",
  "time_range": [
   1312.7,
   1320.7
  ]
 },
 {
  "input": "And in that way, our winding number technology actually guarantees that every complex polynomial has a zero.",
  "model": "nmt",
  "translatedText": "このようにして、当社の巻数技術は実際に、すべ ての複素多項式がゼロを持つことを保証します。",
  "time_range": [
   1320.7,
   1327.62
  ]
 },
 {
  "input": "This is such an important fact that mathematicians call it the fundamental theorem of algebra.",
  "model": "nmt",
  "translatedText": "これは数学者が代数学の基本定理と呼ぶほど重要な事実です。",
  "time_range": [
   1327.62,
   1333.88
  ]
 },
 {
  "input": "Having an algorithm for finding numerical solutions to equations like this is extremely practical, but the fundamental theorem of algebra is a good example of how these winding numbers are also quite useful on a theoretical level, guaranteeing the existence of a solution to a broad class of equations for suitable conditions, which is much more the kind of thing mathematicians like thinking about.",
  "model": "nmt",
  "translatedText": "このような方程式の数値解を見つけるアルゴリズムは非常に実 用的ですが、代数学の基本定理は、これらの巻き数が理論レベ ルでも非常に役立つことを示す良い例であり、広範なクラス の解の存在を保証します。 適切な条件を方程式で導き出すとい うもので、むしろ数学者が考えるのが好きな類のものです。",
  "time_range": [
   1333.88,
   1354.4
  ]
 },
 {
  "input": "I'll show you a couple more amazing applications of this in the context of topology in a follow-up video, which includes correcting a mistake from an old 3blue1brown video.",
  "model": "nmt",
  "translatedText": "フォローアップ ビデオでは、トポロジに関連したこれの驚くべき応用例をいくつか紹介し ます。 これには、古い 3blue1brown ビデオの間違いの修正も含まれます。",
  "time_range": [
   1354.4,
   1364.08
  ]
 },
 {
  "input": "Which one?",
  "model": "nmt",
  "translatedText": "どれ？",
  "time_range": [
   1364.08,
   1365.08
  ]
 },
 {
  "input": "Well, watch all of the videos, everything on this channel, and see if you can spot the error first.",
  "model": "nmt",
  "translatedText": "このチャンネルのすべてのビデオを見て、まず間違 いを見つけられるかどうかを確認してください。",
  "time_range": [
   1365.08,
   1371.64
  ]
 },
 {
  "input": "The primary author of this video is one of the newest 3blue1brown team members, Sridhar Ramesh.",
  "model": "nmt",
  "translatedText": "このビデオの主な作成者は、3blue1brown チームの最 新メンバーの 1 人、Sridhar Ramesh です。",
  "time_range": [
   1371.64,
   1375.96
  ]
 }
]