1
00:00:03,060 --> 00:00:06,140
Ada dua hal di sini, topik utama dan topik meta.

2
00:00:06,640 --> 00:00:09,781
Topik utamanya adalah algoritma yang sangat rapi untuk menyelesaikan 

3
00:00:09,781 --> 00:00:13,652
persamaan dua dimensi, hal-hal yang memiliki dua bilangan real yang tidak diketahui, 

4
00:00:13,652 --> 00:00:16,840
atau juga yang melibatkan satu bilangan kompleks yang tidak diketahui.

5
00:00:17,440 --> 00:00:20,999
Jadi misalnya, jika Anda ingin mencari akar kompleks dari sebuah polinomial, 

6
00:00:20,999 --> 00:00:24,512
atau mungkin beberapa dari angka nol jutaan dolar dari fungsi Riemann zeta, 

7
00:00:24,512 --> 00:00:26,500
algoritma ini akan melakukannya untuk Anda.

8
00:00:26,800 --> 00:00:30,060
Dan metode ini sangat cantik, karena melibatkan banyak warna.

9
00:00:30,540 --> 00:00:33,649
Dan yang lebih penting, ide inti yang mendasarinya berlaku untuk 

10
00:00:33,649 --> 00:00:37,285
semua jenis matematika di luar algoritma untuk menyelesaikan persamaan ini, 

11
00:00:37,285 --> 00:00:40,060
termasuk sedikit topologi, yang akan saya bicarakan nanti.

12
00:00:40,740 --> 00:00:44,531
Tapi apa yang membuat ini bernilai sekitar 20 menit dari waktu Anda adalah bahwa ini 

13
00:00:44,531 --> 00:00:48,144
mengilustrasikan pelajaran yang jauh lebih berguna secara umum dalam matematika, 

14
00:00:48,144 --> 00:00:51,980
yaitu mencoba mendefinisikan konstruksi yang dapat disusun dengan baik satu sama lain.

15
00:00:52,400 --> 00:00:54,480
Anda akan melihat apa yang saya maksud dengan itu seiring berjalannya cerita.

16
00:00:55,060 --> 00:00:58,537
Untuk memotivasi kasus dengan fungsi yang memiliki masukan 2d dan keluaran 2d, 

17
00:00:58,537 --> 00:01:01,398
mari kita mulai dengan lebih sederhana, dengan fungsi yang hanya 

18
00:01:01,398 --> 00:01:03,820
mengambil bilangan real dan mengeluarkan bilangan real.

19
00:01:05,080 --> 00:01:08,274
Jika Anda ingin mengetahui kapan suatu fungsi f dari x sama dengan 

20
00:01:08,274 --> 00:01:11,182
fungsi g lainnya dari x, Anda mungkin menganggap ini sebagai 

21
00:01:11,182 --> 00:01:14,520
pencarian kapan grafik dari fungsi-fungsi tersebut berpotongan, bukan?

22
00:01:15,020 --> 00:01:18,520
Maksud saya, itu memberi Anda masukan di mana kedua fungsi memiliki keluaran yang sama.

23
00:01:18,520 --> 00:01:23,132
Untuk mengambil contoh yang sangat sederhana, bayangkan f dari x adalah x kuadrat, 

24
00:01:23,132 --> 00:01:25,300
dan g dari x adalah fungsi konstanta 2.

25
00:01:25,960 --> 00:01:28,640
Dengan kata lain, Anda ingin mencari akar kuadrat dari 2.

26
00:01:29,460 --> 00:01:33,279
Bahkan jika Anda hampir tidak tahu apa-apa tentang mencari akar kuadrat, 

27
00:01:33,279 --> 00:01:36,523
Anda mungkin bisa melihat bahwa 1 kuadrat lebih kecil dari 2, 

28
00:01:36,523 --> 00:01:39,400
dan 2 kuadrat lebih besar dari 2, jadi Anda sadar, ah, 

29
00:01:39,400 --> 00:01:41,860
akan ada solusi di antara kedua nilai tersebut.

30
00:01:42,580 --> 00:01:44,687
Lalu jika Anda ingin mempersempitnya lebih jauh, 

31
00:01:44,687 --> 00:01:47,140
mungkin Anda mencoba mengkuadratkan titik tengahnya, 1.5.

32
00:01:47,720 --> 00:01:50,740
Ini keluar menjadi 2.25, agak terlalu tinggi, jadi 

33
00:01:50,740 --> 00:01:53,760
Anda sebaiknya fokus pada wilayah antara 1 dan 1.5.

34
00:01:54,760 --> 00:01:57,569
Dan seterusnya, Anda mungkin dapat melihat bagaimana hal ini akan terus berlanjut, 

35
00:01:57,569 --> 00:01:59,532
Anda akan terus menghitung pada titik tengah dan kemudian 

36
00:01:59,532 --> 00:02:00,920
membagi ruang pencarian Anda menjadi dua.

37
00:02:05,100 --> 00:02:08,573
Cara lain untuk memikirkan hal ini, yang akan memudahkan kita ketika kita 

38
00:02:08,573 --> 00:02:12,093
mencapai dimensi yang lebih tinggi, adalah dengan berfokus pada pertanyaan 

39
00:02:12,093 --> 00:02:15,520
ekuivalen mengenai kapan selisih antara kedua fungsi ini sama dengan nol.

40
00:02:16,100 --> 00:02:20,140
Dalam istilah tersebut, kami menemukan wilayah masukan yang 

41
00:02:20,140 --> 00:02:24,180
perbedaannya negatif di satu sisi, dan positif di sisi lain.

42
00:02:24,180 --> 00:02:27,943
Kami membaginya menjadi dua, dan bagian yang kami persempit perhatiannya 

43
00:02:27,943 --> 00:02:31,500
adalah bagian yang titik terluarnya memiliki tanda yang berbeda-beda.

44
00:02:31,500 --> 00:02:33,949
Dengan cara ini, kami dapat terus berjalan selamanya, 

45
00:02:33,949 --> 00:02:37,577
mengambil setiap wilayah dengan tanda-tanda yang berbeda-beda di perbatasannya, 

46
00:02:37,577 --> 00:02:40,435
menemukan wilayah yang lebih kecil di antara bagian-bagiannya, 

47
00:02:40,435 --> 00:02:44,200
mengetahui bahwa pada akhirnya kami harus mempersempit titik yang akan menjadi nol.

48
00:02:45,760 --> 00:02:50,241
Singkatnya, menyelesaikan persamaan selalu bisa dirumuskan sebagai menemukan kapan 

49
00:02:50,241 --> 00:02:54,883
fungsi tertentu sama dengan nol, dan untuk melakukannya, kita memiliki heuristik ini, 

50
00:02:54,883 --> 00:02:57,907
jika f positif di satu titik dan negatif di titik lain, 

51
00:02:57,907 --> 00:03:02,550
Anda dapat mencari di antara di mana itu nol, setidaknya jika semuanya berubah lancar 

52
00:03:02,550 --> 00:03:03,900
tanpa lompatan tiba-tiba.

53
00:03:03,900 --> 00:03:07,373
Hal menakjubkan yang ingin saya tunjukkan kepada Anda adalah Anda dapat 

54
00:03:07,373 --> 00:03:10,509
memperluas pemikiran seperti ini ke dalam persamaan dua dimensi, 

55
00:03:10,509 --> 00:03:14,080
persamaan antara fungsi yang masukan dan keluarannya keduanya dua dimensi.

56
00:03:14,739 --> 00:03:17,938
Misalnya, bilangan kompleks berbentuk 2D, dan alat yang kami 

57
00:03:17,938 --> 00:03:21,400
kembangkan ini sempurna untuk menemukan solusi persamaan kompleks.

58
00:03:22,360 --> 00:03:24,922
Sekarang, karena kita akan banyak membicarakan fungsi-fungsi 2D ini, 

59
00:03:24,922 --> 00:03:27,597
mari kita mengambil langkah singkat dan mempertimbangkan bagaimana kita 

60
00:03:27,597 --> 00:03:28,340
mengilustrasikannya.

61
00:03:29,060 --> 00:03:33,593
Membuat grafik fungsi dengan input 2D dan output 2D memerlukan empat dimensi, 

62
00:03:33,593 --> 00:03:37,546
dan itu tidak akan berfungsi dengan baik di dunia 3D pada layar 2D, 

63
00:03:37,546 --> 00:03:40,220
namun kami masih memiliki beberapa opsi bagus.

64
00:03:40,859 --> 00:03:45,440
Salah satunya adalah dengan melihat ruang masukan dan ruang keluaran secara berdampingan.

65
00:03:45,540 --> 00:03:49,361
Setiap titik di ruang masukan berpindah ke titik tertentu di ruang keluaran, 

66
00:03:49,361 --> 00:03:52,984
dan saya dapat menunjukkan bagaimana pergerakan di sekitar titik masukan 

67
00:03:52,984 --> 00:03:56,260
tersebut berhubungan dengan pergerakan tertentu di ruang keluaran.

68
00:03:56,940 --> 00:03:59,943
Semua fungsi yang kita pertimbangkan akan bersifat kontinu, 

69
00:03:59,943 --> 00:04:03,046
dalam artian perubahan kecil pada masukan hanya sesuai dengan 

70
00:04:03,046 --> 00:04:06,300
perubahan kecil pada keluaran, tidak ada lompatan yang tiba-tiba.

71
00:04:06,940 --> 00:04:11,647
Pilihan lain yang kita miliki adalah membayangkan panah dari asal ruang keluaran ke 

72
00:04:11,647 --> 00:04:16,579
titik keluaran tersebut, dan melampirkan versi miniatur panah tersebut ke titik masukan.

73
00:04:17,360 --> 00:04:19,996
Sekilas hal ini dapat memberi kita gambaran tentang ke mana 

74
00:04:19,996 --> 00:04:22,676
perginya suatu titik masukan tertentu, atau ke mana perginya 

75
00:04:22,676 --> 00:04:25,840
banyak titik masukan yang berbeda dengan menggambar bidang vektor penuh.

76
00:04:27,600 --> 00:04:30,028
Dan sayangnya ketika Anda melakukan ini di banyak titik, 

77
00:04:30,028 --> 00:04:33,180
hal ini bisa menjadi sangat berantakan, jadi di sini izinkan saya membuat 

78
00:04:33,180 --> 00:04:36,460
semua panah berukuran sama, dan ini berarti kita bisa mengetahui arah setiap 

79
00:04:36,460 --> 00:04:37,100
titik keluaran.

80
00:04:37,780 --> 00:04:40,845
Namun mungkin cara tercantik untuk mengilustrasikan fungsi dua dimensi, 

81
00:04:40,845 --> 00:04:43,101
dan yang paling sering kita gunakan dalam video ini, 

82
00:04:43,101 --> 00:04:46,380
adalah dengan mengasosiasikan setiap titik dalam ruang keluaran dengan warna.

83
00:04:47,220 --> 00:04:51,300
Di sini kita menggunakan warna, yaitu warna yang jatuh di sepanjang pelangi atau 

84
00:04:51,300 --> 00:04:54,524
roda warna, untuk menyesuaikan dengan arah menjauhi titik asal, 

85
00:04:54,524 --> 00:04:58,453
dan kita menggunakan kegelapan atau kecerahan untuk menyesuaikan dengan jarak 

86
00:04:58,453 --> 00:04:59,260
dari titik asal.

87
00:04:59,260 --> 00:05:01,913
Misalnya, dengan fokus pada rangkaian keluaran ini, 

88
00:05:01,913 --> 00:05:05,180
semua titik ini berwarna merah, namun titik yang lebih dekat ke 

89
00:05:05,180 --> 00:05:09,620
titik asal sedikit lebih gelap, dan titik yang lebih jauh menjadi sedikit lebih terang.

90
00:05:10,360 --> 00:05:13,676
Dan dengan fokus pada rangkaian keluaran ini, semua titik berwarna hijau, 

91
00:05:13,676 --> 00:05:16,545
dan sekali lagi, lebih dekat ke titik asal berarti lebih gelap, 

92
00:05:16,545 --> 00:05:17,980
lebih jauh berarti lebih terang.

93
00:05:18,780 --> 00:05:21,964
Dan seterusnya, yang kita lakukan di sini hanyalah memberikan 

94
00:05:21,964 --> 00:05:24,840
warna tertentu pada setiap arah, semuanya terus berubah.

95
00:05:25,359 --> 00:05:29,020
Anda mungkin melihat perbedaan kegelapan dan kecerahan di sini cukup halus, 

96
00:05:29,020 --> 00:05:32,392
namun untuk video ini, yang kami pedulikan hanyalah arah keluarannya, 

97
00:05:32,392 --> 00:05:34,560
bukan besarnya, warnanya, bukan kecerahannya.

98
00:05:35,300 --> 00:05:39,281
Satu hal penting tentang kecerahan yang harus Anda perhatikan adalah bahwa di dekat 

99
00:05:39,281 --> 00:05:43,120
titik asal, yang tidak memiliki arah tertentu, semua warna memudar menjadi hitam.

100
00:05:44,440 --> 00:05:49,068
Jadi untuk memikirkan fungsi, setelah kita menentukan warna untuk setiap keluaran, 

101
00:05:49,068 --> 00:05:53,363
kita dapat memvisualisasikan fungsi 2D dengan mewarnai setiap titik di ruang 

102
00:05:53,363 --> 00:05:57,100
masukan berdasarkan warna titik tempatnya berada di ruang keluaran.

103
00:05:57,840 --> 00:06:02,175
Saya suka membayangkan banyak titik berbeda dari ruang masukan yang melompat ke keluaran 

104
00:06:02,175 --> 00:06:06,267
yang sesuai di ruang keluaran, kemudian dicat berdasarkan warna titik di mana titik 

105
00:06:06,267 --> 00:06:10,360
tersebut mendarat, dan kemudian melompat kembali ke tempat asalnya di ruang masukan.

106
00:06:11,640 --> 00:06:13,596
Dengan melakukan hal ini untuk setiap titik di ruang masukan, 

107
00:06:13,596 --> 00:06:15,710
Anda dapat memahaminya hanya dengan melihat ruang masukan tersebut 

108
00:06:15,710 --> 00:06:18,140
untuk mengetahui secara kasar di mana fungsi tersebut mengambil setiap titik.

109
00:06:18,140 --> 00:06:23,267
Misalnya, garis titik merah muda di sebelah kiri ini memberi tahu kita bahwa semua titik 

110
00:06:23,267 --> 00:06:28,280
tersebut dipetakan di suatu tempat dalam arah merah muda, di kiri bawah ruang keluaran.

111
00:06:29,780 --> 00:06:32,218
Juga tiga titik yang berwarna hitam dengan banyak 

112
00:06:32,218 --> 00:06:34,900
warna di sekelilingnya adalah titik yang menuju ke nol.

113
00:06:39,340 --> 00:06:44,317
Baiklah, sama seperti kasus 1D, penyelesaian persamaan fungsi 2D selalu 

114
00:06:44,317 --> 00:06:48,880
dapat diubah dengan menanyakan kapan suatu fungsi sama dengan nol.

115
00:06:49,580 --> 00:06:54,764
Jadi itulah tantangan kita saat ini, membuat algoritme yang 

116
00:06:54,764 --> 00:07:00,900
menemukan titik masukan mana dari fungsi 2D tertentu yang bernilai nol.

117
00:07:00,900 --> 00:07:04,687
Anda mungkin menunjukkan bahwa jika Anda melihat peta warna seperti ini dengan melihat 

118
00:07:04,687 --> 00:07:08,300
titik-titik hitam tersebut, Anda sudah mengetahui di mana angka nol dari fungsinya.

119
00:07:08,620 --> 00:07:11,080
Jadi apakah itu masuk hitungan?

120
00:07:11,080 --> 00:07:13,795
Ingatlah bahwa untuk membuat diagram seperti ini, 

121
00:07:13,795 --> 00:07:17,868
kita telah meminta komputer menghitung fungsi di semua piksel pada bidang, 

122
00:07:17,868 --> 00:07:21,940
namun tujuan kita adalah menemukan algoritma yang lebih efisien yang hanya 

123
00:07:21,940 --> 00:07:25,199
memerlukan komputasi fungsi pada titik sesedikit mungkin. , 

124
00:07:25,199 --> 00:07:27,860
hanya memiliki pandangan terbatas terhadap warna.

125
00:07:29,360 --> 00:07:31,948
Dan juga dari sudut pandang yang lebih teoritis, 

126
00:07:31,948 --> 00:07:35,065
akan lebih baik jika memiliki konstruksi umum yang memberi 

127
00:07:35,065 --> 00:07:39,080
tahu kita kondisi apakah ada angka nol atau tidak di dalam wilayah tertentu.

128
00:07:39,080 --> 00:07:43,525
Ingat, dalam satu dimensi, pemahaman utamanya adalah jika suatu fungsi kontinu bernilai 

129
00:07:43,525 --> 00:07:47,920
positif di satu titik dan negatif di titik lain, maka di antara keduanya pasti ada nol.

130
00:07:48,840 --> 00:07:50,580
Jadi bagaimana kita memperluasnya menjadi dua dimensi?

131
00:07:50,940 --> 00:07:53,580
Kita memerlukan semacam analogi dalam membicarakan tanda.

132
00:07:54,700 --> 00:07:58,140
Salah satu cara untuk memikirkan tentang tanda-tanda adalah petunjuk arah.

133
00:07:58,800 --> 00:08:01,655
Positif berarti Anda menunjuk ke kanan sepanjang garis bilangan, 

134
00:08:01,655 --> 00:08:03,500
dan negatif berarti Anda menunjuk ke kiri.

135
00:08:04,200 --> 00:08:08,637
Besaran dua dimensi juga memiliki arah, tetapi bagi mereka pilihannya jauh lebih luas, 

136
00:08:08,637 --> 00:08:11,800
mereka dapat menunjuk ke mana saja dalam berbagai kemungkinan.

137
00:08:12,530 --> 00:08:17,112
Jadi sama seperti dalam satu dimensi kita menanyakan apakah suatu fungsi tertentu 

138
00:08:17,112 --> 00:08:20,242
bernilai positif atau negatif pada batas suatu rentang, 

139
00:08:20,242 --> 00:08:25,271
yang hanya terdiri dari dua titik, untuk fungsi 2d kita akan melihat batas suatu wilayah, 

140
00:08:25,271 --> 00:08:30,021
yang mana adalah sebuah loop, dan tanyakan tentang arah keluaran fungsi di sepanjang 

141
00:08:30,021 --> 00:08:30,860
batas tersebut.

142
00:08:33,640 --> 00:08:37,187
Misalnya, kita melihat bahwa sepanjang putaran di sekitar angka nol ini, 

143
00:08:37,187 --> 00:08:41,075
keluaran melewati setiap arah yang mungkin, semua warna pelangi, merah, kuning, 

144
00:08:41,075 --> 00:08:45,060
hijau, biru, kembali ke merah, dan segala sesuatu di antaranya di sepanjang jalan.

145
00:08:45,700 --> 00:08:48,759
Namun di sepanjang perulangan ini, tanpa angka nol di dalamnya, 

146
00:08:48,759 --> 00:08:52,345
keluarannya tidak melewati semua warna, ia melewati beberapa warna jingga, 

147
00:08:52,345 --> 00:08:54,640
namun tidak pernah, katakanlah, hijau atau biru.

148
00:08:55,300 --> 00:08:56,772
Dan ini cukup menjanjikan, hal ini mirip dengan 

149
00:08:56,772 --> 00:08:58,460
bagaimana segala sesuatunya bekerja dalam satu dimensi.

150
00:08:59,340 --> 00:09:03,432
Mungkin dengan cara yang sama jika fungsi 1d mengambil kedua tanda yang 

151
00:09:03,432 --> 00:09:07,638
mungkin pada batas wilayah 1d, ada angka nol di suatu tempat di dalamnya, 

152
00:09:07,638 --> 00:09:11,731
kita dapat berhipotesis bahwa jika fungsi 2d menghasilkan keluaran dari 

153
00:09:11,731 --> 00:09:16,335
semua arah yang mungkin, semua kemungkinan warna, di sepanjang batas wilayah 2d, 

154
00:09:16,335 --> 00:09:19,860
maka di suatu tempat di dalam wilayah itu harus menuju ke nol.

155
00:09:20,960 --> 00:09:23,338
Jadi itulah tebakan kami, dan luangkan waktu sejenak untuk 

156
00:09:23,338 --> 00:09:26,120
memikirkan apakah hal ini benar, dan jika demikian, mengapa demikian.

157
00:09:27,420 --> 00:09:30,790
Jika kita mulai memikirkan perulangan kecil di sekitar titik masukan, 

158
00:09:30,790 --> 00:09:33,872
kita tahu bahwa karena semuanya kontinu, fungsi kita membawanya 

159
00:09:33,872 --> 00:09:36,280
ke perulangan kecil di dekat keluaran yang sesuai.

160
00:09:37,140 --> 00:09:40,520
Tapi lihat, untuk sebagian besar loop kecil, warna keluarannya bervariasi.

161
00:09:40,980 --> 00:09:43,777
Jika Anda memilih titik keluaran selain nol, dan menggambar 

162
00:09:43,777 --> 00:09:46,668
lingkaran yang cukup rapat di dekatnya, semua warna lingkaran 

163
00:09:46,668 --> 00:09:49,420
akan memiliki warna yang hampir sama dengan titik tersebut.

164
00:09:49,840 --> 00:09:52,539
Lingkaran ketat di sini semuanya berwarna kebiruan, 

165
00:09:52,539 --> 00:09:56,641
lingkaran ketat di sini semuanya kekuningan, Anda tentu tidak akan mendapatkan 

166
00:09:56,641 --> 00:09:57,680
semua warna pelangi.

167
00:09:58,220 --> 00:10:02,172
Satu-satunya titik di mana Anda dapat mengencangkan loop di sekelilingnya sambil 

168
00:10:02,172 --> 00:10:06,320
tetap mendapatkan semua warna adalah titik asal yang tidak berwarna, nol itu sendiri.

169
00:10:07,100 --> 00:10:11,479
Jadi memang benar bahwa jika Anda memiliki loop yang melewati setiap warna pelangi, 

170
00:10:11,479 --> 00:10:14,659
mengencangkan dan mengencangkan, menyempit pada suatu titik, 

171
00:10:14,659 --> 00:10:16,380
maka titik tersebut pastilah nol.

172
00:10:17,320 --> 00:10:21,860
Jadi mari kita siapkan pemecah persamaan 2d seperti pemecah persamaan satu dimensi.

173
00:10:22,260 --> 00:10:26,192
Saat kita menemukan wilayah luas yang batasnya melewati setiap warna, 

174
00:10:26,192 --> 00:10:29,900
bagilah menjadi dua, lalu lihat warna pada batas setiap bagiannya.

175
00:10:30,540 --> 00:10:35,123
Pada contoh yang ditunjukkan di sini, batas di bagian kiri tidak mencakup semua warna, 

176
00:10:35,123 --> 00:10:38,600
misalnya tidak ada titik yang dipetakan ke arah oranye kekuningan.

177
00:10:39,060 --> 00:10:40,785
Jadi saya akan menghapus area ini dengan warna abu-abu sebagai 

178
00:10:40,785 --> 00:10:42,620
cara untuk mengatakan bahwa kami tidak ingin mencarinya lebih jauh.

179
00:10:43,380 --> 00:10:47,297
Bagian kanan melewati semua warna, menghabiskan banyak waktu ke arah hijau, 

180
00:10:47,297 --> 00:10:50,700
kemudian melewati kuning oranye merah, serta biru ungu merah muda.

181
00:10:51,560 --> 00:10:54,310
Sekarang ingat, artinya titik-titik batas ini 

182
00:10:54,310 --> 00:10:57,360
dipetakan ke keluaran dari semua arah yang mungkin.

183
00:10:57,840 --> 00:11:01,860
Makanya kita telusuri lebih jauh lagi, dipecah lagi dan dicek batas tiap wilayahnya.

184
00:11:02,880 --> 00:11:06,560
Batas atas semuanya hijau, jadi kita berhenti mencari di sana.

185
00:11:06,860 --> 00:11:09,520
Tapi bagian bawahnya cukup berwarna sehingga layak untuk dibagi lagi.

186
00:11:10,340 --> 00:11:12,020
Dan terus seperti ini.

187
00:11:12,360 --> 00:11:16,095
Periksa subwilayah mana yang memiliki batas yang mencakup semua kemungkinan warna, 

188
00:11:16,095 --> 00:11:19,829
yang berarti titik-titik batas tersebut akan dipetakan ke semua arah yang mungkin, 

189
00:11:19,829 --> 00:11:23,610
dan terus potong wilayah tersebut menjadi dua seperti yang kita lakukan untuk kasus 

190
00:11:23,610 --> 00:11:27,480
satu dimensi, yang pada akhirnya membawa kita ke nol pada fungsi- Oh, tunggu sebentar.

191
00:11:28,880 --> 00:11:29,920
Apa yang terjadi disini?

192
00:11:30,380 --> 00:11:33,806
Tak satu pun dari subdivisi terakhir di kanan bawah melewati semua warna, 

193
00:11:33,806 --> 00:11:37,002
sehingga algoritme kami berhenti karena tidak ingin menelusuri salah 

194
00:11:37,002 --> 00:11:39,920
satu dari warna tersebut, namun juga tidak menemukan angka nol.

195
00:11:41,060 --> 00:11:43,300
Oke, jelas ada sesuatu yang salah di sini.

196
00:11:43,540 --> 00:11:46,520
Dan tidak apa-apa, melakukan kesalahan adalah hal yang biasa dalam mengerjakan matematika.

197
00:11:46,520 --> 00:11:49,275
Jika kita melihat ke belakang, kita mempunyai hipotesis ini, 

198
00:11:49,275 --> 00:11:52,980
dan hipotesis ini membawa kita pada algoritma yang diusulkan ini, jadi kita salah.

199
00:11:53,660 --> 00:11:56,755
Dan menjadi ahli dalam matematika bukan berarti menjadi benar pada kali pertama, 

200
00:11:56,755 --> 00:11:59,545
namun tentang memiliki ketahanan untuk melihat ke belakang secara cermat 

201
00:11:59,545 --> 00:12:01,800
dan memahami kesalahan, serta memahami cara memperbaikinya.

202
00:12:02,480 --> 00:12:06,235
Sekarang masalahnya adalah kita mempunyai wilayah yang batasnya melewati setiap warna, 

203
00:12:06,235 --> 00:12:09,300
tapi ketika kita membaginya di tengah, tidak ada batas subwilayah yang 

204
00:12:09,300 --> 00:12:13,142
melewati setiap warna, kita tidak punya pilihan ke mana harus terus mencari selanjutnya, 

205
00:12:13,142 --> 00:12:14,740
dan itu memecahkan angka nol. penemu.

206
00:12:14,740 --> 00:12:17,560
Sekarang dalam satu dimensi, hal seperti ini tidak pernah terjadi.

207
00:12:17,980 --> 00:12:22,431
Setiap kali Anda memiliki interval yang titik akhirnya memiliki tanda berbeda, 

208
00:12:22,431 --> 00:12:26,037
jika Anda membaginya, Anda dijamin mendapatkan subinterval yang 

209
00:12:26,037 --> 00:12:28,460
titik akhirnya juga memiliki tanda berbeda.

210
00:12:29,020 --> 00:12:32,070
Atau dengan kata lain, setiap kali Anda memiliki dua interval yang titik 

211
00:12:32,070 --> 00:12:34,493
akhirnya tidak berubah tanda, jika Anda menggabungkannya, 

212
00:12:34,493 --> 00:12:37,544
Anda akan mendapatkan interval yang lebih besar yang titik akhirnya juga 

213
00:12:37,544 --> 00:12:38,380
tidak berubah tanda.

214
00:12:39,080 --> 00:12:42,601
Namun dalam dua dimensi, kita bisa menemukan dua wilayah yang batasnya 

215
00:12:42,601 --> 00:12:45,974
tidak menembus setiap warna, namun batas-batasnya digabungkan untuk 

216
00:12:45,974 --> 00:12:49,100
menghasilkan suatu wilayah yang batasnya menembus setiap warna.

217
00:12:49,840 --> 00:12:53,500
Dan dengan cara ini, algoritma zero-finding yang kami usulkan gagal.

218
00:12:54,380 --> 00:12:58,271
Faktanya, jika dipikir-pikir, Anda dapat menemukan lingkaran besar yang 

219
00:12:58,271 --> 00:13:02,380
batasnya melewati setiap warna yang mungkin tanpa ada angka nol di dalamnya.

220
00:13:03,080 --> 00:13:07,468
Hal ini tidak berarti bahwa kami salah dalam klaim kami tentang loop kecil ketika kami 

221
00:13:07,468 --> 00:13:11,958
mengatakan bahwa loop yang selalu menyempit pada setiap warna harus menyempit pada angka 

222
00:13:11,958 --> 00:13:12,160
nol.

223
00:13:12,800 --> 00:13:15,079
Namun yang membuat kami kacau adalah properti yang 

224
00:13:15,079 --> 00:13:18,207
melakukan-perbatasan-saya-melintasi-setiap-warna-atau-tidak ini tidak 

225
00:13:18,207 --> 00:13:22,140
digabungkan dengan cara yang bagus dan dapat diprediksi saat Anda menggabungkan wilayah.

226
00:13:23,000 --> 00:13:27,016
Tapi jangan khawatir, ternyata kita bisa memodifikasinya sedikit menjadi properti 

227
00:13:27,016 --> 00:13:30,740
yang lebih canggih yang digabungkan untuk memberikan apa yang kita inginkan.

228
00:13:38,180 --> 00:13:41,310
Idenya adalah daripada sekadar menanyakan apakah kita dapat menemukan warna 

229
00:13:41,310 --> 00:13:44,441
pada titik tertentu di sepanjang putaran, mari kita perhatikan lebih cermat 

230
00:13:44,441 --> 00:13:47,860
bagaimana warna-warna ini berubah saat kita berjalan mengelilingi putaran tersebut.

231
00:13:48,580 --> 00:13:49,960
Izinkan saya menunjukkan kepada Anda apa yang saya maksud dengan sebuah contoh.

232
00:13:50,400 --> 00:13:53,260
Saya akan menyimpan roda warna kecil di pojok sini untuk membantu kita melacaknya.

233
00:13:53,940 --> 00:13:58,843
Ketika warna-warna di sepanjang jalur masukan bergerak melalui pelangi ke arah tertentu, 

234
00:13:58,843 --> 00:14:02,921
dari merah ke kuning, kuning ke hijau, hijau ke biru, atau biru ke merah, 

235
00:14:02,921 --> 00:14:04,960
keluarannya berayun searah jarum jam.

236
00:14:05,700 --> 00:14:09,577
Namun sebaliknya, jika warna bergerak berlawanan arah dalam pelangi, 

237
00:14:09,577 --> 00:14:12,611
dari biru ke hijau, hijau ke kuning, kuning ke merah, 

238
00:14:12,611 --> 00:14:16,320
atau merah ke biru, keluarannya berayun berlawanan arah jarum jam.

239
00:14:17,160 --> 00:14:21,700
Jadi berjalan di sepanjang jalur pendek ini, warna berputar seperlima 

240
00:14:21,700 --> 00:14:27,019
searah jarum jam melalui roda warna, dan berjalan di sepanjang jalur ini di sini, 

241
00:14:27,019 --> 00:14:31,300
warna berputar seperlima lagi searah jarum jam melalui roda warna.

242
00:14:31,300 --> 00:14:35,111
Tentu saja, ini berarti jika Anda melewati kedua jalur tersebut, satu demi satu, 

243
00:14:35,111 --> 00:14:38,640
warnanya akan berputar sebanyak dua perlima putaran penuh searah jarum jam.

244
00:14:39,280 --> 00:14:43,436
Jumlah total penggulungan semakin bertambah, dan ini akan menjadi kuncinya, 

245
00:14:43,436 --> 00:14:47,100
ini adalah jenis penggabungan langsung yang akan berguna bagi kita.

246
00:14:47,100 --> 00:14:50,784
Saat saya menyebutkan jumlah total belitan, saya ingin Anda membayangkan 

247
00:14:50,784 --> 00:14:54,922
sebuah odometer kuno yang berdetak ke depan saat panah berputar searah jarum jam, 

248
00:14:54,922 --> 00:14:57,900
namun mundur saat panah berputar berlawanan arah jarum jam.

249
00:14:58,740 --> 00:15:02,460
Jadi belitan berlawanan arah jarum jam dihitung sebagai belitan negatif searah jarum jam.

250
00:15:03,000 --> 00:15:07,365
Keluarannya mungkin banyak, tetapi jika sebagian dari putaran itu berlawanan arah, 

251
00:15:07,365 --> 00:15:08,260
maka akan hilang.

252
00:15:08,920 --> 00:15:11,502
Misalnya, jika Anda bergerak maju di sepanjang jalur ini, 

253
00:15:11,502 --> 00:15:14,128
dan kemudian bergerak mundur di sepanjang jalur yang sama, 

254
00:15:14,128 --> 00:15:17,244
jumlah total belitan akan menjadi nol, gerakan mundur secara harafiah 

255
00:15:17,244 --> 00:15:21,162
memundurkan warna-warna yang terlihat sebelumnya, membalikkan semua belitan sebelumnya, 

256
00:15:21,162 --> 00:15:25,080
dan mengembalikan warna yang terlihat sebelumnya. odometer kembali ke tempat dimulainya.

257
00:15:26,280 --> 00:15:29,900
Untuk tujuan kita, kita akan sangat memperhatikan lilitan sepanjang loop.

258
00:15:30,440 --> 00:15:34,780
Sebagai contoh, katakanlah kita mengelilingi seluruh putaran ini searah jarum jam.

259
00:15:34,780 --> 00:15:39,989
Keluaran yang kita temui berputar sebanyak tiga kali putaran penuh searah jarum jam, 

260
00:15:39,989 --> 00:15:43,360
warna-warna berayun melalui pelangi, secara berurutan, 

261
00:15:43,360 --> 00:15:46,180
dari merah ke merah lagi, lalu lagi, dan lagi.

262
00:15:46,920 --> 00:15:52,199
Dalam jargon yang digunakan ahli matematika, kita mengatakan bahwa sepanjang loop ini, 

263
00:15:52,199 --> 00:15:54,020
jumlah total belitan adalah 3.

264
00:15:54,020 --> 00:15:56,844
Untuk perulangan yang lain, bisa berupa bilangan bulat lainnya, 

265
00:15:56,844 --> 00:16:00,066
mungkin bilangan yang lebih besar jika keluarannya berputar berkali-kali 

266
00:16:00,066 --> 00:16:02,978
saat masukan berputar dalam satu putaran, atau bisa juga bilangan 

267
00:16:02,978 --> 00:16:05,980
yang lebih kecil jika keluarannya hanya berputar satu atau dua kali.

268
00:16:06,320 --> 00:16:09,492
Atau bilangan belitan itu bahkan bisa berupa bilangan bulat negatif, 

269
00:16:09,492 --> 00:16:13,538
jika keluarannya berayun berlawanan arah jarum jam saat kita berjalan mengelilingi loop 

270
00:16:13,538 --> 00:16:14,320
searah jarum jam.

271
00:16:15,180 --> 00:16:18,860
Namun sepanjang loop mana pun, jumlah total belitan ini harus berupa bilangan bulat.

272
00:16:20,880 --> 00:16:22,860
Maksud saya, saat Anda kembali ke awal, Anda akan 

273
00:16:22,860 --> 00:16:25,000
mendapatkan hasil yang sama seperti saat Anda memulai.

274
00:16:26,180 --> 00:16:30,097
Secara kebetulan, jika suatu jalur benar-benar berisi titik di mana keluarannya 

275
00:16:30,097 --> 00:16:33,916
tepat nol, maka secara teknis Anda tidak dapat menentukan bilangan belitan di 

276
00:16:33,916 --> 00:16:37,540
sepanjang jalur tersebut, karena keluarannya tidak memiliki arah tertentu.

277
00:16:37,540 --> 00:16:41,400
Ini tidak akan menjadi masalah bagi kami, karena seluruh tujuan kami adalah 

278
00:16:41,400 --> 00:16:45,160
menemukan angka nol, jadi jika hal ini terjadi, kami hanya beruntung saja.

279
00:16:45,160 --> 00:16:47,810
Hal utama yang perlu diperhatikan tentang angka-angka berliku ini adalah angka-angka 

280
00:16:47,810 --> 00:16:50,492
tersebut bertambah dengan baik saat Anda menggabungkan jalur menjadi jalur yang lebih 

281
00:16:50,492 --> 00:16:50,680
besar.

282
00:16:54,800 --> 00:16:57,346
Namun yang sebenarnya kita inginkan adalah angka-angka yang berkelok-kelok 

283
00:16:57,346 --> 00:16:59,825
di sepanjang perbatasan suatu wilayah dapat bertambah dengan baik ketika 

284
00:16:59,825 --> 00:17:02,440
kita menggabungkan wilayah-wilayah tersebut menjadi wilayah yang lebih besar.

285
00:17:02,980 --> 00:17:04,520
Jadi, apakah kita memiliki properti itu?

286
00:17:07,760 --> 00:17:09,060
Nah, lihatlah.

287
00:17:09,540 --> 00:17:13,184
Bilangan belitan searah jarum jam mengelilingi wilayah di sebelah 

288
00:17:13,184 --> 00:17:16,940
kiri ini adalah jumlah bilangan belitan dari keempat jalur tersebut.

289
00:17:17,500 --> 00:17:20,998
Dan lilitan yang kita putar searah jarum jam mengelilingi wilayah di sebelah 

290
00:17:20,998 --> 00:17:24,359
kanan ini adalah jumlah dari bilangan lilitan dari keempat jalur tersebut.

291
00:17:25,339 --> 00:17:27,763
Dan ketika kita menggabungkan kedua wilayah tersebut menjadi satu 

292
00:17:27,763 --> 00:17:30,113
wilayah yang lebih besar, sebagian besar jalur tersebut menjadi 

293
00:17:30,113 --> 00:17:32,500
bagian dari perbatasan wilayah yang lebih besar searah jarum jam.

294
00:17:33,260 --> 00:17:35,800
Dan adapun dua jalur yang tidak?

295
00:17:36,020 --> 00:17:39,107
Mereka membatalkan dengan sempurna, salah satunya justru kebalikannya, 

296
00:17:39,107 --> 00:17:41,760
pemutaran ulang yang lain seperti yang kita lihat sebelumnya.

297
00:17:42,560 --> 00:17:45,328
Jadi angka-angka yang berkelok-kelok di sepanjang batas 

298
00:17:45,328 --> 00:17:47,900
wilayah akan bertambah sesuai dengan keinginan kita.

299
00:17:48,640 --> 00:17:52,610
Catatan tambahan, alasan tentang batas berorientasi yang dijumlahkan dengan baik 

300
00:17:52,610 --> 00:17:56,680
seperti ini banyak muncul dalam matematika, dan sering kali disebut teorema Stokes.

301
00:17:57,060 --> 00:17:59,227
Anda yang pernah mempelajari kalkulus multivariabel 

302
00:17:59,227 --> 00:18:01,020
mungkin mengenalinya dari konteks tersebut.

303
00:18:02,360 --> 00:18:05,085
Jadi sekarang, akhirnya, dengan berlikunya angka-angka di tangan, 

304
00:18:05,085 --> 00:18:07,440
kita dapat kembali ke tujuan penyelesaian persamaan kita.

305
00:18:08,000 --> 00:18:11,716
Masalah dengan wilayah yang kita lihat sebelumnya adalah meskipun 

306
00:18:11,716 --> 00:18:15,940
batasnya melewati semua kemungkinan warna, bilangan belitan sebenarnya nol.

307
00:18:16,500 --> 00:18:19,649
Outputnya berputar sekitar setengah, dari kuning ke merah, 

308
00:18:19,649 --> 00:18:23,973
dan kemudian mulai berputar berlawanan arah jarum jam kembali ke arah yang lain, 

309
00:18:23,973 --> 00:18:27,657
kemudian melanjutkan melalui biru dan mencapai merah dari arah lain, 

310
00:18:27,657 --> 00:18:30,860
semuanya sedemikian rupa sehingga total belitan menjadi nol.

311
00:18:31,840 --> 00:18:35,121
Tetapi jika Anda menemukan sebuah loop yang tidak hanya mengenai setiap warna, 

312
00:18:35,121 --> 00:18:38,320
namun juga memiliki kondisi yang lebih kuat dari bilangan lilitan bukan nol, 

313
00:18:38,320 --> 00:18:41,643
maka jika Anda membaginya menjadi dua, Anda dijamin bahwa setidaknya salah satu 

314
00:18:41,643 --> 00:18:45,173
dari bagian tersebut memiliki warna yang sama. bilangan belitan yang bukan nol juga, 

315
00:18:45,173 --> 00:18:48,040
karena segala sesuatunya akan bertambah sesuai dengan keinginan kita.

316
00:18:48,440 --> 00:18:53,500
Jadi dengan cara ini, Anda dapat melanjutkan, semakin mempersempit ke satu titik.

317
00:18:54,050 --> 00:18:57,126
Dan saat Anda mempersempit suatu titik, Anda akan melakukannya dengan 

318
00:18:57,126 --> 00:18:59,324
loop kecil yang memiliki nomor belitan bukan nol, 

319
00:18:59,324 --> 00:19:02,004
yang berarti loop tersebut melewati semua kemungkinan warna, 

320
00:19:02,004 --> 00:19:04,378
dan oleh karena itu, seperti saya katakan sebelumnya, 

321
00:19:04,378 --> 00:19:06,400
titik di mana mereka menyempit pada harus nol.

322
00:19:07,420 --> 00:19:08,360
Dan itu saja!

323
00:19:08,600 --> 00:19:11,642
Kami sekarang telah membuat pemecah persamaan dua dimensi, 

324
00:19:11,642 --> 00:19:13,860
dan kali ini, saya berjanji, tidak ada bug.

325
00:19:14,560 --> 00:19:17,540
Angka berliku adalah alat yang kita perlukan agar ini berhasil.

326
00:19:18,100 --> 00:19:21,021
Sekarang kita dapat menyelesaikan persamaan yang terlihat seperti 

327
00:19:21,021 --> 00:19:23,544
di mana f dari x sama dengan g dari x dalam dua dimensi, 

328
00:19:23,544 --> 00:19:26,820
hanya dengan mempertimbangkan bagaimana perbedaan antara f dan g berputar.

329
00:19:27,600 --> 00:19:30,417
Setiap kali kita mempunyai loop yang nomor lilitannya bukan nol, 

330
00:19:30,417 --> 00:19:32,889
kita dapat menjalankan algoritma ini pada loop tersebut, 

331
00:19:32,889 --> 00:19:35,100
dan dijamin kita akan menemukan solusi di dalamnya.

332
00:19:35,660 --> 00:19:39,840
Terlebih lagi, seperti dalam satu dimensi, algoritma ini sangat efisien.

333
00:19:40,240 --> 00:19:43,933
Kita terus mempersempit setengah ukuran wilayah kita di setiap putaran, 

334
00:19:43,933 --> 00:19:47,268
sehingga dengan cepat mempersempit angka nol, dan sementara itu, 

335
00:19:47,268 --> 00:19:51,424
kita hanya perlu memeriksa nilai fungsi di sepanjang titik-titik perulangan ini, 

336
00:19:51,424 --> 00:19:54,400
daripada memeriksanya di banyak perulangan. poin interior.

337
00:19:55,160 --> 00:19:59,291
Jadi dalam beberapa hal, keseluruhan pekerjaan yang dilakukan hanya sebanding 

338
00:19:59,291 --> 00:20:03,740
dengan keliling ruang pencarian, bukan seluruh luasnya, dan ini sungguh menakjubkan.

339
00:20:04,920 --> 00:20:09,649
Sekarang setelah Anda memahami apa yang terjadi, sungguh menakjubkan melihat ini beraksi, 

340
00:20:09,649 --> 00:20:12,960
memberinya beberapa fungsi dan membiarkannya mencari angka nol.

341
00:20:13,620 --> 00:20:16,914
Seperti saya katakan sebelumnya, bilangan kompleks adalah dua dimensi, 

342
00:20:16,914 --> 00:20:19,560
jadi mari kita terapkan pada persamaan bilangan kompleks.

343
00:20:20,300 --> 00:20:24,169
Misalnya, inilah algoritme yang mencari angka nol dari fungsi x 

344
00:20:24,169 --> 00:20:28,100
hingga seperlima dikurangi x dikurangi satu pada bidang kompleks.

345
00:20:28,900 --> 00:20:32,680
Ini dimulai dengan mempertimbangkan wilayah yang sangat luas di sekitar titik asal, 

346
00:20:32,680 --> 00:20:34,480
yang akhirnya memiliki jumlah lilitan 5.

347
00:20:35,280 --> 00:20:38,104
Setiap kali Anda menemukan loop dengan nomor belitan bukan nol, 

348
00:20:38,104 --> 00:20:41,590
Anda membaginya menjadi dua, dan mencari tahu nomor belitan dari dua loop yang 

349
00:20:41,590 --> 00:20:42,120
lebih kecil.

350
00:20:42,700 --> 00:20:45,839
Salah satu atau kedua-duanya dijamin memiliki nomor belitan bukan nol, 

351
00:20:45,839 --> 00:20:49,464
dan ketika Anda melihat ini, Anda tahu ada nol di suatu tempat di dalam loop yang 

352
00:20:49,464 --> 00:20:53,400
lebih kecil itu, jadi Anda terus melakukan hal yang sama, mencari ruang yang lebih kecil.

353
00:20:54,180 --> 00:20:58,197
Kami juga berhenti menjelajahi suatu wilayah jika jalur yang kami lalui komputasi 

354
00:20:58,197 --> 00:21:02,410
kebetulan menemukan angka nol, yang sebenarnya terjadi sekali untuk contoh di sebelah 

355
00:21:02,410 --> 00:21:02,900
kanan ini.

356
00:21:03,280 --> 00:21:06,624
Kejadian langka itu mengganggu kemampuan kita menghitung bilangan berliku, 

357
00:21:06,624 --> 00:21:08,140
tapi hei, kita mendapat angka nol.

358
00:21:09,220 --> 00:21:12,920
Dan untuk loop yang nomor belitannya nol, Anda tidak perlu menjelajahinya lebih jauh.

359
00:21:12,920 --> 00:21:16,200
Mungkin mereka punya solusi di dalam, mungkin juga tidak, kami tidak punya jaminan.

360
00:21:18,400 --> 00:21:20,980
Dan membiarkan pemecah persamaan kita melanjutkan dengan cara yang sama, 

361
00:21:20,980 --> 00:21:24,020
pada akhirnya persamaan tersebut akan menyatu menjadi banyak nol untuk polinomial ini.

362
00:21:25,840 --> 00:21:28,731
Ngomong-ngomong, bukan suatu kebetulan jika jumlah 

363
00:21:28,731 --> 00:21:31,000
total belitan dalam contoh ini adalah 5.

364
00:21:31,580 --> 00:21:36,787
Dengan bilangan kompleks, operasi x ke n secara langsung berhubungan dengan berjalan 

365
00:21:36,787 --> 00:21:42,240
mengelilingi asal keluaran sebanyak n kali saat Anda mengelilingi asal masukan satu kali.

366
00:21:44,680 --> 00:21:47,848
Jadi dengan polinomial, untuk masukan yang cukup besar, 

367
00:21:47,848 --> 00:21:51,980
setiap suku selain suku utama menjadi tidak signifikan jika dibandingkan.

368
00:21:52,480 --> 00:21:56,101
Jadi setiap polinomial kompleks yang suku utamanya adalah x ke 

369
00:21:56,101 --> 00:21:59,780
n mempunyai bilangan belitan n di sekitar loop yang cukup besar.

370
00:22:00,540 --> 00:22:03,621
Dan dengan cara itu, teknologi bilangan berliku kami 

371
00:22:03,621 --> 00:22:06,820
menjamin bahwa setiap polinomial kompleks memiliki nol.

372
00:22:07,480 --> 00:22:10,042
Fakta ini sangat penting sehingga para ahli matematika 

373
00:22:10,042 --> 00:22:12,000
menyebutnya sebagai teorema dasar aljabar.

374
00:22:13,800 --> 00:22:18,382
Memiliki algoritma untuk menemukan solusi numerik terhadap persamaan seperti ini 

375
00:22:18,382 --> 00:22:23,417
sangatlah praktis, namun teorema dasar aljabar adalah contoh yang baik tentang bagaimana 

376
00:22:23,417 --> 00:22:26,981
bilangan berliku ini juga cukup berguna pada tingkat teoritis, 

377
00:22:26,981 --> 00:22:31,677
menjamin adanya solusi untuk kelas yang luas. persamaan untuk kondisi yang sesuai, 

378
00:22:31,677 --> 00:22:33,940
yang lebih disukai para ahli matematika.

379
00:22:33,940 --> 00:22:38,369
Saya akan menunjukkan kepada Anda beberapa penerapan menakjubkan ini dalam konteks 

380
00:22:38,369 --> 00:22:43,173
topologi dalam video tindak lanjut, termasuk memperbaiki kesalahan dari video 3blue1Brown 

381
00:22:43,173 --> 00:22:43,440
lama.

382
00:22:44,060 --> 00:22:44,440
Yang mana?

383
00:22:44,940 --> 00:22:47,019
Tonton semua videonya, semua yang ada di saluran ini, 

384
00:22:47,019 --> 00:22:49,600
dan lihat apakah Anda dapat menemukan kesalahannya terlebih dahulu.

385
00:22:51,300 --> 00:23:06,967
Penulis utama video ini adalah salah satu anggota tim 3blue1 brown terbaru, 

386
00:23:06,967 --> 00:23:10,060
Sridhar Ramesh.

