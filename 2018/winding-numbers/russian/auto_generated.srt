1
00:00:00,000 --> 00:00:06,720
Здесь есть две вещи: основная тема и метатема.

2
00:00:06,720 --> 00:00:10,652
Основной темой будет этот действительно изящный алгоритм решения двумерных уравнений,

3
00:00:10,652 --> 00:00:14,447
уравнений, в которых есть два неизвестных действительных числа, а также уравнений,

4
00:00:14,447 --> 00:00:17,420
включающих одно неизвестное, которое является комплексным числом.

5
00:00:17,420 --> 00:00:21,784
Так, например, если вы хотите найти комплексные корни многочлена или, может быть,

6
00:00:21,784 --> 00:00:25,243
некоторые из тех нулей на миллион долларов дзета-функции Римана,

7
00:00:25,243 --> 00:00:27,000
этот алгоритм сделает это за вас.

8
00:00:27,000 --> 00:00:30,520
И этот метод очень красивый, так как задействовано много цветов.

9
00:00:30,520 --> 00:00:34,392
И что еще более важно, основная идея применима ко всем видам математики,

10
00:00:34,392 --> 00:00:37,629
выходящим далеко за рамки этого алгоритма решения уравнений,

11
00:00:37,629 --> 00:00:40,600
включая некоторую топологию, о которой я расскажу позже.

12
00:00:40,600 --> 00:00:44,440
Но что действительно делает эти 20 минут вашего времени полезными, так это то,

13
00:00:44,440 --> 00:00:47,550
что они иллюстрируют урок, гораздо более полезный в математике,

14
00:00:47,550 --> 00:00:50,175
который заключается в попытке определить конструкции,

15
00:00:50,175 --> 00:00:52,120
которые хорошо сочетаются друг с другом.

16
00:00:52,120 --> 00:00:55,460
По ходу истории вы поймете, что я имею в виду.

17
00:00:55,460 --> 00:00:59,484
Чтобы мотивировать случай с функциями, которые имеют 2d входные и 2d выходные данные,

18
00:00:59,484 --> 00:01:02,713
давайте начнем с более простого, с функций, которые просто принимают

19
00:01:02,713 --> 00:01:05,100
действительное число и выдают действительное число.

20
00:01:05,100 --> 00:01:09,544
Если вы хотите знать, когда функция f от x равна некоторой другой функции g от x,

21
00:01:09,544 --> 00:01:14,260
вы можете думать об этом как о поиске момента пересечения графиков этих функций, верно?

22
00:01:14,260 --> 00:01:19,340
Я имею в виду, что это дает вам ввод, где обе функции имеют одинаковый вывод.

23
00:01:19,340 --> 00:01:23,551
Если взять очень простой пример, представьте, что f от x — это x в квадрате,

24
00:01:23,551 --> 00:01:25,520
а g от x — это постоянная функция 2.

25
00:01:25,520 --> 00:01:29,620
Другими словами, вы хотите найти квадратный корень из 2.

26
00:01:29,620 --> 00:01:34,174
Даже если вы почти ничего не знаете о поиске квадратных корней, вы, вероятно,

27
00:01:34,174 --> 00:01:39,020
увидите, что 1 в квадрате меньше 2, а 2 в квадрате больше 2, поэтому вы понимаете,

28
00:01:39,020 --> 00:01:42,640
что между этими двумя значениями должно быть какое-то решение.

29
00:01:42,640 --> 00:01:45,282
А затем, если вы хотите еще больше сузить его, возможно,

30
00:01:45,282 --> 00:01:47,740
вы попытаетесь возвести в квадрат среднюю точку, 1.5.

31
00:01:47,740 --> 00:01:51,161
Получается 2.25, немного слишком много, поэтому

32
00:01:51,161 --> 00:01:54,940
вам следует сосредоточиться на области между 1 и 1.5.

33
00:01:54,940 --> 00:01:59,817
И так далее, вы, вероятно, можете представить, как это будет продолжаться:

34
00:01:59,817 --> 00:02:05,540
вы продолжите вычисления в средней точке, а затем сократите пространство поиска пополам.

35
00:02:05,540 --> 00:02:08,452
Другой способ подумать об этом, который облегчит нам задачу,

36
00:02:08,452 --> 00:02:12,320
когда мы перейдем к более высоким измерениям, — это вместо этого сосредоточиться

37
00:02:12,320 --> 00:02:16,380
на эквивалентном вопросе о том, когда разница между этими двумя функциями равна нулю.

38
00:02:16,380 --> 00:02:19,200
Таким образом, мы нашли область входных данных,

39
00:02:19,200 --> 00:02:24,020
где эта разница была отрицательной на одном конце и положительной на другом конце.

40
00:02:24,020 --> 00:02:28,624
Мы разделили его на две части, и та половина, на которой мы сузили свое внимание,

41
00:02:28,624 --> 00:02:31,600
была той, где самые крайние точки имели разные знаки.

42
00:02:31,600 --> 00:02:34,582
Таким образом, мы могли продолжать идти вечно,

43
00:02:34,582 --> 00:02:37,755
беря каждую область с разными знаками на границе,

44
00:02:37,755 --> 00:02:41,119
находя меньшую такую область среди ее половин, зная,

45
00:02:41,119 --> 00:02:46,260
что в конечном итоге нам придется сузиться до точки, которая будет ровно нулевой.

46
00:02:46,260 --> 00:02:50,445
Короче говоря, решение уравнений всегда можно представить как поиск момента,

47
00:02:50,445 --> 00:02:54,413
когда определенная функция равна нулю, и для этого у нас есть эвристика:

48
00:02:54,413 --> 00:02:57,946
если f положительно в одной точке и отрицательно в другой точке,

49
00:02:57,946 --> 00:03:01,533
вы можете найти что-то между ними, где это ноль, по крайней мере,

50
00:03:01,533 --> 00:03:03,980
если все меняется плавно, без резких скачков.

51
00:03:03,980 --> 00:03:07,142
Удивительная вещь, которую я хочу вам показать, — это то,

52
00:03:07,142 --> 00:03:10,741
что вы можете расширить этот тип мышления до двумерных уравнений,

53
00:03:10,741 --> 00:03:14,940
уравнений между функциями, чьи входные и выходные данные являются двумерными.

54
00:03:14,940 --> 00:03:18,061
Например, комплексные числа являются двумерными, и этот инструмент,

55
00:03:18,061 --> 00:03:21,780
который мы разрабатываем, идеально подходит для поиска решений сложных уравнений.

56
00:03:21,780 --> 00:03:25,267
Теперь, поскольку мы будем так много говорить об этих 2D-функциях,

57
00:03:25,267 --> 00:03:29,380
давайте сделаем небольшой шаг в сторону и посмотрим, как мы их проиллюстрируем.

58
00:03:29,380 --> 00:03:34,362
Для построения графика функции с 2D-входом и 2D-выходом потребуется четыре измерения,

59
00:03:34,362 --> 00:03:38,533
и это не будет так хорошо работать в нашем 3D-мире на наших 2D-экранах,

60
00:03:38,533 --> 00:03:41,140
но у нас все еще есть пара хороших вариантов.

61
00:03:41,140 --> 00:03:46,020
Один из них — просто посмотреть одновременно на входное и выходное пространство.

62
00:03:46,020 --> 00:03:49,563
Каждая точка входного пространства перемещается в определенную точку

63
00:03:49,563 --> 00:03:53,208
выходного пространства, и я могу показать, как перемещение вокруг этой

64
00:03:53,208 --> 00:03:57,060
входной точки соответствует определенным движениям в выходном пространстве.

65
00:03:57,060 --> 00:04:00,653
Все рассматриваемые нами функции будут непрерывными в том смысле,

66
00:04:00,653 --> 00:04:03,811
что небольшие изменения входных данных соответствуют лишь

67
00:04:03,811 --> 00:04:07,460
небольшим изменениям выходных данных, резких скачков не происходит.

68
00:04:07,460 --> 00:04:10,640
Другой вариант, который у нас есть, — представить стрелку,

69
00:04:10,640 --> 00:04:14,091
ведущую от начала выходного пространства к этой выходной точке,

70
00:04:14,091 --> 00:04:17,380
и прикрепить миниатюрную версию этой стрелки к входной точке.

71
00:04:17,380 --> 00:04:22,355
Это может дать нам представление о том, куда идет данная входная точка или куда

72
00:04:22,355 --> 00:04:27,580
идет множество различных входных точек, с помощью рисования полного векторного поля.

73
00:04:27,580 --> 00:04:31,324
И, к сожалению, когда вы делаете это во многих точках, это может сильно загромождать,

74
00:04:31,324 --> 00:04:34,764
поэтому позвольте мне сделать все стрелки одинакового размера, и это означает,

75
00:04:34,764 --> 00:04:37,900
что мы можем получить представление о направлении каждой выходной точки.

76
00:04:37,900 --> 00:04:41,493
Но, возможно, самый красивый способ проиллюстрировать двумерные функции,

77
00:04:41,493 --> 00:04:44,200
который мы будем использовать чаще всего в этом видео,

78
00:04:44,200 --> 00:04:47,400
— это связать каждую точку в этом выходном пространстве с цветом.

79
00:04:47,400 --> 00:04:51,442
Здесь мы использовали оттенки, то есть места, где цвет падает по радуге или

80
00:04:51,442 --> 00:04:55,272
цветовому кругу, чтобы соответствовать направлению от начала координат,

81
00:04:55,272 --> 00:05:00,060
и мы используем темноту или яркость, чтобы соответствовать расстоянию от начала координат.

82
00:05:00,060 --> 00:05:05,290
Например, если сосредоточиться на этом массиве выходных данных, все эти точки красные,

83
00:05:05,290 --> 00:05:10,340
но те, что ближе к началу координат, немного темнее, а те, что дальше, немного ярче.

84
00:05:10,340 --> 00:05:14,713
И если сосредоточиться на этом массиве выходных данных, все точки будут зелеными,

85
00:05:14,713 --> 00:05:18,980
и опять же, ближе к началу координат означает темнее, дальше — означает светлее.

86
00:05:18,980 --> 00:05:22,217
И так далее, все, что мы здесь делаем, это присваиваем каждому

87
00:05:22,217 --> 00:05:25,300
направлению определенный цвет, и все это постоянно меняется.

88
00:05:25,300 --> 00:05:29,974
Вы можете заметить, что различия в темноте и яркости здесь довольно незаметны,

89
00:05:29,974 --> 00:05:35,300
но в этом видео нас волнует только направление вывода, а не величина, оттенок или яркость.

90
00:05:35,300 --> 00:05:40,318
В отношении яркости вам следует заметить одну важную вещь: вблизи начала координат,

91
00:05:40,318 --> 00:05:44,440
не имеющего определенного направления, все цвета тускнеют до черного.

92
00:05:44,440 --> 00:05:48,985
Итак, говоря о функциях, теперь, когда мы определились с цветом для каждого выхода,

93
00:05:48,985 --> 00:05:53,639
мы можем визуализировать 2D-функции, раскрашивая каждую точку во входном пространстве

94
00:05:53,639 --> 00:05:57,860
в зависимости от цвета точки, в которой она находится в выходном пространстве.

95
00:05:57,860 --> 00:06:01,221
Мне нравится представлять, как множество разных точек из этого входного

96
00:06:01,221 --> 00:06:05,003
пространства перепрыгивают на соответствующие им выходы в выходном пространстве,

97
00:06:05,003 --> 00:06:08,598
затем окрашиваются в зависимости от цвета точки, в которой они приземляются,

98
00:06:08,598 --> 00:06:11,820
а затем возвращаются туда, откуда они пришли во входном пространстве.

99
00:06:11,820 --> 00:06:13,809
Делая это для каждой точки входного пространства,

100
00:06:13,809 --> 00:06:16,076
вы можете получить представление, просто взглянув на это

101
00:06:16,076 --> 00:06:19,140
входное пространство и примерно определив, где функция занимает каждую точку.

102
00:06:19,140 --> 00:06:22,851
Например, эта полоса розовых точек слева говорит нам,

103
00:06:22,851 --> 00:06:27,044
что все эти точки отображаются где-то в розовом направлении,

104
00:06:27,044 --> 00:06:30,000
в левом нижнем углу выходного пространства.

105
00:06:30,000 --> 00:06:35,884
Кроме того, те три точки, которые являются черными и окружены множеством цветов,

106
00:06:35,884 --> 00:06:37,120
стремятся к нулю.

107
00:06:37,120 --> 00:06:45,436
Хорошо, как и в случае с 1D, решение уравнений 2D-функций всегда можно переформулировать,

108
00:06:45,436 --> 00:06:49,780
спросив, когда определенная функция равна нулю.

109
00:06:49,780 --> 00:06:55,753
Итак, наша задача сейчас — создать алгоритм, который определяет,

110
00:06:55,753 --> 00:07:00,900
какие входные точки данной 2D-функции обращаются в ноль.

111
00:07:00,900 --> 00:07:04,859
Вы можете отметить, что если вы смотрите на подобную карту цветов,

112
00:07:04,859 --> 00:07:08,700
видя эти черные точки, вы уже знаете, где находятся нули функции.

113
00:07:08,700 --> 00:07:11,460
Так это считается?

114
00:07:11,460 --> 00:07:15,655
Имейте в виду, что для создания такой диаграммы мы заставили компьютер

115
00:07:15,655 --> 00:07:19,968
вычислить функцию во всех пикселях плоскости, но наша цель — найти более

116
00:07:19,968 --> 00:07:24,459
эффективный алгоритм, который требует вычисления функции только в как можно

117
00:07:24,459 --> 00:07:29,600
меньшем количестве точек. , так сказать, имея лишь ограниченное представление о цветах.

118
00:07:29,600 --> 00:07:34,254
А также с более теоретической точки зрения было бы неплохо иметь общую конструкцию,

119
00:07:34,254 --> 00:07:38,300
которая сообщала бы нам условия существования нуля внутри данной области.

120
00:07:38,300 --> 00:07:41,877
Помните, что в одном измерении основная идея заключалась в том,

121
00:07:41,877 --> 00:07:46,404
что если непрерывная функция положительна в одной точке и отрицательна в другой,

122
00:07:46,404 --> 00:07:48,920
где-то посередине она должна быть равна нулю.

123
00:07:48,920 --> 00:07:50,960
Так как же нам распространить это на два измерения?

124
00:07:50,960 --> 00:07:55,180
Нам нужен некий аналог разговоров о знаках.

125
00:07:55,180 --> 00:07:59,140
Один из способов подумать о том, что такое знаки, — это направления.

126
00:07:59,140 --> 00:08:02,247
Положительное значение означает, что вы указываете вправо по числовой прямой,

127
00:08:02,247 --> 00:08:04,240
а отрицательное означает, что вы указываете влево.

128
00:08:04,240 --> 00:08:09,005
Двумерные величины тоже имеют направление, но для них варианты гораздо шире,

129
00:08:09,005 --> 00:08:12,780
они могут указывать куда угодно по целому кругу возможностей.

130
00:08:12,780 --> 00:08:17,040
Таким образом, точно так же, как в одном измерении мы спрашивали,

131
00:08:17,040 --> 00:08:22,269
является ли данная функция положительной или отрицательной на границе диапазона,

132
00:08:22,269 --> 00:08:27,240
который составляет всего две точки, для 2d-функций мы собираемся смотреть на

133
00:08:27,240 --> 00:08:32,533
границу области, которая является циклом, и спросите о направлении вывода функции

134
00:08:32,533 --> 00:08:33,760
вдоль этой границы.

135
00:08:33,760 --> 00:08:37,687
Например, мы видим, что в этом цикле вокруг этого нуля выходные данные

136
00:08:37,687 --> 00:08:41,504
проходят через все возможные направления, все цвета радуги: красный,

137
00:08:41,504 --> 00:08:45,820
желтый, зеленый, синий, обратно к красному и все, что между ними на этом пути.

138
00:08:45,820 --> 00:08:51,094
Но в этом цикле, внутри которого нет нулей, выходные данные проходят не через все цвета,

139
00:08:51,094 --> 00:08:55,420
а через некоторые оранжевые, но никогда, скажем, через зеленый или синий.

140
00:08:55,420 --> 00:08:59,320
И это многообещающе, это очень похоже на то, как все работает в одном измерении.

141
00:08:59,320 --> 00:09:04,799
Возможно, точно так же, как если 1d-функция принимает оба возможных знака на границе

142
00:09:04,799 --> 00:09:09,311
1d-области, а где-то внутри находится ноль, мы могли бы предположить,

143
00:09:09,311 --> 00:09:13,566
что если 2d-функция достигает выходов всех возможных направлений,

144
00:09:13,566 --> 00:09:17,176
всех возможных цветов вдоль граница двухмерной области,

145
00:09:17,176 --> 00:09:20,980
то где-то внутри этой области она должна стремиться к нулю.

146
00:09:20,980 --> 00:09:26,135
Итак, это наше предположение, и подумайте, должно ли это быть правдой,

147
00:09:26,135 --> 00:09:27,660
и если да, то почему.

148
00:09:27,660 --> 00:09:30,932
Если мы начнем думать о крошечном цикле вокруг некоторой входной точки,

149
00:09:30,932 --> 00:09:33,841
мы знаем, что, поскольку все непрерывно, наша функция переносит

150
00:09:33,841 --> 00:09:36,660
его в какой-то крошечный цикл рядом с соответствующим выходом.

151
00:09:36,660 --> 00:09:41,140
Но посмотрите: для большинства крошечных циклов выходные данные различаются по цвету.

152
00:09:41,140 --> 00:09:44,134
Если вы выберете любую выходную точку, отличную от нуля,

153
00:09:44,134 --> 00:09:46,603
и нарисуете рядом с ней достаточно узкий цикл,

154
00:09:46,603 --> 00:09:49,860
все цвета цикла будут примерно того же цвета, что и эта точка.

155
00:09:49,860 --> 00:09:55,313
Тугая петля здесь вся голубоватая, а вот здесь узкая петля вся желтоватая,

156
00:09:55,313 --> 00:09:58,440
конечно, вы не получите всех цветов радуги.

157
00:09:58,440 --> 00:10:02,426
Единственная точка, где вы можете затянуть вокруг него петли,

158
00:10:02,426 --> 00:10:07,120
сохранив при этом все цвета, — это бесцветное начало координат, сам ноль.

159
00:10:07,120 --> 00:10:10,278
Так что это действительно тот случай, когда у вас есть петли,

160
00:10:10,278 --> 00:10:13,437
проходящие через все цвета радуги, сжимающиеся и сжимающиеся,

161
00:10:13,437 --> 00:10:17,360
сужающиеся в какой-то точке, тогда эта точка на самом деле должна быть нулем.

162
00:10:17,360 --> 00:10:20,272
Итак, давайте настроим решатель двумерных уравнений,

163
00:10:20,272 --> 00:10:22,360
как наш решатель одномерных уравнений.

164
00:10:22,360 --> 00:10:26,420
Когда мы найдем большую область, граница которой проходит через каждый цвет,

165
00:10:26,420 --> 00:10:30,640
разделим ее на две части, а затем посмотрим на цвета на границе каждой половины.

166
00:10:30,640 --> 00:10:35,055
В показанном здесь примере граница левой половины не проходит через все цвета,

167
00:10:35,055 --> 00:10:39,080
например, нет точек, которые соответствуют оранжево-желтым направлениям.

168
00:10:39,080 --> 00:10:41,884
Поэтому я выделю эту область серым цветом, чтобы сказать,

169
00:10:41,884 --> 00:10:43,480
что мы не хотим ее искать дальше.

170
00:10:43,480 --> 00:10:47,366
Правая половина проходит через все цвета, проводит много времени в зеленом направлении,

171
00:10:47,366 --> 00:10:51,120
затем проходит через желтый, оранжевый, красный, а также синий, фиолетовый и розовый.

172
00:10:51,120 --> 00:10:54,581
Теперь помните, что это означает, что точки этой границы

173
00:10:54,581 --> 00:10:57,800
сопоставляются с выходами всех возможных направлений.

174
00:10:57,800 --> 00:11:02,900
Итак, мы исследуем его дальше, снова разделив и проверив границы для каждого региона.

175
00:11:02,900 --> 00:11:07,000
Граница верха вся зеленая, поэтому на этом поиски остановимся.

176
00:11:07,000 --> 00:11:10,500
Но нижняя часть достаточно красочная, чтобы заслуживать отдельного подразделения.

177
00:11:10,500 --> 00:11:12,420
И просто продолжайте в том же духе.

178
00:11:12,420 --> 00:11:16,631
Проверьте, какая подобласть имеет границу, охватывающую все возможные цвета,

179
00:11:16,631 --> 00:11:20,569
то есть точки этой границы отображаются во всех возможных направлениях,

180
00:11:20,569 --> 00:11:25,327
и продолжайте разрезать эти области пополам, как мы это делали для одномерного случая,

181
00:11:25,327 --> 00:11:29,320
что в конечном итоге приведет нас к нулю по функции. Ой, подожди секунду.

182
00:11:29,320 --> 00:11:30,320
Что здесь случилось?

183
00:11:30,320 --> 00:11:35,237
Ни одно из этих последних подразделений в правом нижнем углу не прошло через все цвета,

184
00:11:35,237 --> 00:11:39,707
поэтому наш алгоритм остановился, потому что не хотел искать ни в одном из них,

185
00:11:39,707 --> 00:11:41,160
но он также не нашел ноль.

186
00:11:41,160 --> 00:11:43,720
Ладно, здесь явно что-то не так.

187
00:11:43,720 --> 00:11:46,680
И это нормально, ошибаться – это обычная часть занятий математикой.

188
00:11:46,680 --> 00:11:49,346
Если оглянуться назад, у нас была эта гипотеза,

189
00:11:49,346 --> 00:11:53,680
и она привела нас к этому предложенному алгоритму, значит, мы где-то ошиблись.

190
00:11:53,680 --> 00:11:57,584
И быть хорошим в математике – это не значит быть правым с первого раза,

191
00:11:57,584 --> 00:12:01,598
а иметь способность внимательно оглянуться назад, понять ошибки и понять,

192
00:12:01,598 --> 00:12:02,520
как их исправить.

193
00:12:02,520 --> 00:12:06,773
Проблема здесь в том, что у нас был регион, граница которого проходила через каждый цвет,

194
00:12:06,773 --> 00:12:10,743
но когда мы разделили его посередине, ни одна граница субрегиона не проходила через

195
00:12:10,743 --> 00:12:14,854
каждый цвет, у нас не было вариантов, где продолжать поиск дальше, и это сломало ноль.

196
00:12:14,854 --> 00:12:15,280
искатель.

197
00:12:15,280 --> 00:12:18,120
В одном измерении ничего подобного никогда не происходило.

198
00:12:18,120 --> 00:12:22,357
Каждый раз, когда у вас есть интервал, конечные точки которого имеют разные знаки,

199
00:12:22,357 --> 00:12:26,698
если вы разделите его, вы знаете, что гарантированно получите некоторый подинтервал,

200
00:12:26,698 --> 00:12:29,200
конечные точки которого также имеют разные знаки.

201
00:12:29,200 --> 00:12:32,477
Или, другими словами, каждый раз, когда у вас есть два интервала,

202
00:12:32,477 --> 00:12:35,555
конечные точки которых не меняют знак, если вы объедините их,

203
00:12:35,555 --> 00:12:39,280
вы получите больший интервал, конечные точки которого также не меняют знак.

204
00:12:39,280 --> 00:12:42,871
Но в двух измерениях можно найти две области, границы которых

205
00:12:42,871 --> 00:12:47,564
не проходят через все цвета, но границы которых в совокупности образуют область,

206
00:12:47,564 --> 00:12:49,940
граница которой проходит через все цвета.

207
00:12:49,940 --> 00:12:53,740
Именно таким образом предложенный нами алгоритм поиска нуля сломался.

208
00:12:53,740 --> 00:12:58,173
Фактически, если вы подумаете об этом, вы можете найти большой цикл,

209
00:12:58,173 --> 00:13:03,120
граница которого проходит через все возможные цвета, но внутри него нет нуля.

210
00:13:03,120 --> 00:13:07,541
Это не означает, что мы были неправы в наших утверждениях о крошечных петлях,

211
00:13:07,541 --> 00:13:11,736
когда говорили, что вечно сужающаяся петля, проходящая через каждый цвет,

212
00:13:11,736 --> 00:13:13,040
должна сужаться к нулю.

213
00:13:13,040 --> 00:13:17,923
Но что нас запутало, так это то, что свойство «проходит ли моя граница через каждый

214
00:13:17,923 --> 00:13:23,040
цвет или нет» не объединяется приятным и предсказуемым образом при объединении регионов.

215
00:13:23,040 --> 00:13:30,587
Но не волнуйтесь, оказывается, мы можем немного изменить это свойство,

216
00:13:30,587 --> 00:13:38,560
сделав его более сложным, которое в совокупности даст нам то, что мы хотим.

217
00:13:38,560 --> 00:13:41,459
Идея состоит в том, что вместо того, чтобы просто спрашивать,

218
00:13:41,459 --> 00:13:45,434
можем ли мы найти цвет в какой-то момент цикла, давайте более внимательно проследим,

219
00:13:45,434 --> 00:13:48,100
как эти цвета меняются по мере нашего обхода этого цикла.

220
00:13:48,100 --> 00:13:50,060
Позвольте мне показать вам, что я имею в виду, на примере.

221
00:13:50,060 --> 00:13:54,120
Я поставлю здесь, в углу, небольшой цветовой круг, чтобы мы могли отслеживать его.

222
00:13:54,120 --> 00:13:58,424
Когда цвета на пути входных данных движутся по радуге в определенном направлении:

223
00:13:58,424 --> 00:14:02,308
от красного к желтому, от желтого к зеленому, от зеленого к синему или от

224
00:14:02,308 --> 00:14:05,720
синего к красному, выходные данные колеблются по часовой стрелке.

225
00:14:05,720 --> 00:14:09,584
Но с другой стороны, если цвета движутся по радуге в обратном направлении:

226
00:14:09,584 --> 00:14:13,398
от синего к зеленому, от зеленого к желтому, от желтого к красному или от

227
00:14:13,398 --> 00:14:17,160
красного к синему, выходной сигнал будет меняться против часовой стрелки.

228
00:14:17,160 --> 00:14:21,603
Итак, идя по этому короткому пути здесь, цвета проходят пятую часть

229
00:14:21,603 --> 00:14:26,046
пути по часовой стрелке цветового круга, а идя по этому пути здесь,

230
00:14:26,046 --> 00:14:30,620
цвета проходят еще одну пятую пути по часовой стрелке цветового круга.

231
00:14:30,620 --> 00:14:34,807
Конечно, это означает, что если вы пройдете по обоим путям, один за другим,

232
00:14:34,807 --> 00:14:39,380
цвета повернутся в общей сложности на две пятых полного оборота по часовой стрелке.

233
00:14:39,380 --> 00:14:43,839
Общее количество намоток просто складывается, и это будет ключевым моментом,

234
00:14:43,839 --> 00:14:47,140
это тот тип простого объединения, который нам пригодится.

235
00:14:47,140 --> 00:14:49,776
Когда я говорю об общем количестве намоток, я хочу,

236
00:14:49,776 --> 00:14:53,629
чтобы вы представили старомодный одометр, который отсчитывает время вперед,

237
00:14:53,629 --> 00:14:56,317
когда стрелка вращается по часовой стрелке, и назад,

238
00:14:56,317 --> 00:14:58,700
когда стрелка вращается против часовой стрелки.

239
00:14:58,700 --> 00:15:00,727
Таким образом, обмотка против часовой стрелки

240
00:15:00,727 --> 00:15:03,020
считается отрицательной обмоткой по часовой стрелке.

241
00:15:03,020 --> 00:15:06,049
Выходы могут сильно поворачиваться, но если часть этого поворота

242
00:15:06,049 --> 00:15:08,940
происходит в противоположном направлении, это сводится на нет.

243
00:15:08,940 --> 00:15:11,805
Например, если вы двигаетесь вперед по этому пути,

244
00:15:11,805 --> 00:15:16,693
а затем двигаетесь назад по тому же пути, общая сумма намоток оказывается равной нулю,

245
00:15:16,693 --> 00:15:20,794
движение назад буквально перематывает назад через ранее увиденные цвета,

246
00:15:20,794 --> 00:15:25,569
обращая все предыдущие намотки на противоположное и возвращая одометр вернулся туда,

247
00:15:25,569 --> 00:15:26,300
где он начал.

248
00:15:26,300 --> 00:15:30,480
Для наших целей нас больше всего будет интересовать намотка по петлям.

249
00:15:30,480 --> 00:15:34,280
Например, предположим, что мы обходим весь этот цикл по часовой стрелке.

250
00:15:34,280 --> 00:15:38,304
Выходные данные, с которыми мы сталкиваемся, совершают в общей

251
00:15:38,304 --> 00:15:41,434
сложности три полных оборота по часовой стрелке,

252
00:15:41,434 --> 00:15:47,120
цвета менялись по радуге по порядку: снова от красного к красному, а затем снова и снова.

253
00:15:47,120 --> 00:15:54,100
На жаргоне математиков мы говорим, что общее число витков на этом контуре равно 3.

254
00:15:54,100 --> 00:15:58,159
Для других циклов это может быть любое другое целое число, возможно, большее,

255
00:15:58,159 --> 00:16:02,427
если выходной сигнал меняется много раз, когда входные данные проходят один цикл,

256
00:16:02,427 --> 00:16:07,060
или это может быть меньшее число, если выходной сигнал меняется только один или два раза.

257
00:16:07,060 --> 00:16:10,118
Или это число витков может быть даже отрицательным целым числом,

258
00:16:10,118 --> 00:16:13,035
если выходной сигнал будет колебаться против часовой стрелки,

259
00:16:13,035 --> 00:16:15,200
когда мы идем по часовой стрелке вокруг цикла.

260
00:16:15,200 --> 00:16:19,720
Но на любом контуре общее количество намоток должно быть целым числом.

261
00:16:19,720 --> 00:16:22,684
Я имею в виду, что к тому времени, когда вы вернетесь к тому,

262
00:16:22,684 --> 00:16:25,840
с чего начали, у вас будет тот же результат, с которого вы начали.

263
00:16:25,840 --> 00:16:28,713
Между прочим, если путь действительно содержит точку,

264
00:16:28,713 --> 00:16:32,757
в которой выходной сигнал равен нулю, то технически вы не можете определить

265
00:16:32,757 --> 00:16:36,961
номер витка вдоль этой точки, поскольку выходной сигнал не имеет определенного

266
00:16:36,961 --> 00:16:37,600
направления.

267
00:16:37,600 --> 00:16:41,454
Для нас это не будет проблемой, потому что вся наша цель — найти нули,

268
00:16:41,454 --> 00:16:45,200
поэтому, если это когда-нибудь произойдет, нам просто повезло раньше.

269
00:16:45,200 --> 00:16:49,773
Главное, что следует отметить в этих извилистых числах, — это то,

270
00:16:49,773 --> 00:16:55,040
что они хорошо складываются, когда вы объединяете пути в более крупные пути.

271
00:16:55,040 --> 00:16:59,080
Но чего мы действительно хотим, так это того, чтобы извилистые числа вдоль границ

272
00:16:59,080 --> 00:17:03,120
регионов хорошо складывались, когда мы объединяем регионы в более крупные регионы.

273
00:17:03,120 --> 00:17:06,320
Так есть ли у нас эта собственность?

274
00:17:06,320 --> 00:17:09,600
Ну, взгляните.

275
00:17:09,600 --> 00:17:14,299
Число витков, когда мы идем по часовой стрелке вокруг этой области слева,

276
00:17:14,299 --> 00:17:17,920
представляет собой сумму чисел витков этих четырех путей.

277
00:17:17,920 --> 00:17:22,086
И виток, когда мы идем по часовой стрелке вокруг этой области справа,

278
00:17:22,086 --> 00:17:25,480
представляет собой сумму чисел витков этих четырех путей.

279
00:17:25,480 --> 00:17:28,906
И когда мы объединяем эти два региона в один более крупный,

280
00:17:28,906 --> 00:17:33,760
большинство этих путей становятся частью границы большего региона по часовой стрелке.

281
00:17:33,760 --> 00:17:36,040
А что касается тех двух путей, которые этого не делают?

282
00:17:36,040 --> 00:17:41,396
Они прекрасно компенсируются, один из них представляет собой обратную перемотку другого,

283
00:17:41,396 --> 00:17:42,660
как мы видели раньше.

284
00:17:42,660 --> 00:17:47,966
Таким образом, извилистые числа вдоль границ регионов складываются именно так,

285
00:17:47,966 --> 00:17:48,840
как мы хотим.

286
00:17:48,840 --> 00:17:53,050
Также отметим, что рассуждения о таком удачном сложении ориентированных

287
00:17:53,050 --> 00:17:57,320
границ часто встречаются в математике и часто называются теоремой Стокса.

288
00:17:57,320 --> 00:18:00,656
Те из вас, кто изучал исчисление с несколькими переменными,

289
00:18:00,656 --> 00:18:02,880
возможно, узнают это по этому контексту.

290
00:18:02,880 --> 00:18:05,533
Итак, теперь, наконец, имея в руках намоточные числа,

291
00:18:05,533 --> 00:18:08,040
мы можем вернуться к нашим целям решения уравнений.

292
00:18:08,040 --> 00:18:11,658
Проблема с областью, которую мы видели ранее, заключается в том, что,

293
00:18:11,658 --> 00:18:14,397
хотя ее граница проходила через все возможные цвета,

294
00:18:14,397 --> 00:18:16,620
число витков на самом деле было равно нулю.

295
00:18:16,620 --> 00:18:20,028
Выходы прошли примерно половину пути, от желтого к красному,

296
00:18:20,028 --> 00:18:23,938
а затем начали двигаться против часовой стрелки в другом направлении,

297
00:18:23,938 --> 00:18:28,352
затем продолжили проходить через синий и попадать на красный с другой стороны,

298
00:18:28,352 --> 00:18:32,040
и все это таким образом, что общая сумма обмотки стала равна нулю.

299
00:18:32,040 --> 00:18:35,886
Но если вы найдете цикл, который не только соответствует каждому цвету,

300
00:18:35,886 --> 00:18:39,358
но и имеет более строгое условие ненулевого числа витков, тогда,

301
00:18:39,358 --> 00:18:42,510
если вы разделите его пополам, вы гарантированно получите,

302
00:18:42,510 --> 00:18:46,196
что хотя бы одна из этих половин имеет также ненулевое число витков,

303
00:18:46,196 --> 00:18:48,600
поскольку все складывается так, как мы хотим.

304
00:18:48,600 --> 00:18:54,280
Таким образом, вы можете продолжать идти, все дальше и дальше сужаяся до одной точки.

305
00:18:54,280 --> 00:18:58,235
И когда вы сужаетесь до точки, вы будете делать это с помощью крошечных петель,

306
00:18:58,235 --> 00:19:00,856
которые имеют ненулевые номера витков, что означает,

307
00:19:00,856 --> 00:19:03,872
что они проходят через все возможные цвета и, следовательно,

308
00:19:03,872 --> 00:19:07,680
как я уже говорил ранее, точку, в которой они сужаются. on должен быть нулем.

309
00:19:07,680 --> 00:19:08,760
Вот и все!

310
00:19:08,760 --> 00:19:12,243
Мы создали программу для решения двумерных уравнений,

311
00:19:12,243 --> 00:19:14,760
и на этот раз, обещаю, ошибок не будет.

312
00:19:14,760 --> 00:19:18,200
Числа намотки — это именно тот инструмент, который нам нужен для этой работы.

313
00:19:18,200 --> 00:19:21,755
Теперь мы можем решать уравнения, которые выглядят так:

314
00:19:21,755 --> 00:19:25,564
где f от x равно g от x в двух измерениях, просто учитывая,

315
00:19:25,564 --> 00:19:27,660
как меняется разница между f и g.

316
00:19:27,660 --> 00:19:30,993
Всякий раз, когда у нас есть цикл, число витков которого не равно нулю,

317
00:19:30,993 --> 00:19:35,160
мы можем запустить на нем этот алгоритм и гарантированно найти решение где-то внутри него.

318
00:19:35,160 --> 00:19:40,300
И более того, как и в одном измерении, этот алгоритм невероятно эффективен.

319
00:19:40,300 --> 00:19:44,761
Мы продолжаем сужать половину размера нашей области каждый раунд,

320
00:19:44,761 --> 00:19:49,764
тем самым быстро сужая нули, и все это время нам нужно проверять значение

321
00:19:49,764 --> 00:19:55,240
функции только в точках этих циклов, а не проверять ее на многих точки интерьера.

322
00:19:55,240 --> 00:20:00,165
Таким образом, в некотором смысле общая проделанная работа пропорциональна

323
00:20:00,165 --> 00:20:04,960
только периметру пространства поиска, а не всей площади, что удивительно.

324
00:20:04,960 --> 00:20:08,964
Теперь, когда вы понимаете, что происходит, становится странно завораживать,

325
00:20:08,964 --> 00:20:13,540
просто наблюдая за этим в действии, придавая ему какую-то функцию и позволяя ему искать

326
00:20:13,540 --> 00:20:13,800
нули.

327
00:20:13,800 --> 00:20:16,507
Как я уже говорил ранее, комплексные числа двумерны,

328
00:20:16,507 --> 00:20:20,340
поэтому давайте применим это к некоторому уравнению с комплексными числами.

329
00:20:20,340 --> 00:20:24,705
Например, вот алгоритм поиска нулей функции x с точностью

330
00:20:24,705 --> 00:20:28,920
до пятой минус x минус единица на комплексной плоскости.

331
00:20:28,920 --> 00:20:32,832
Все началось с рассмотрения очень большой области вокруг начала координат,

332
00:20:32,832 --> 00:20:35,440
число витков которой в конечном итоге составило 5.

333
00:20:35,440 --> 00:20:39,045
Каждый раз, когда вы находите петлю с ненулевым числом витков,

334
00:20:39,045 --> 00:20:42,880
вы делите ее пополам и вычисляете число витков двух меньших петель.

335
00:20:42,880 --> 00:20:46,259
Любой из них или оба гарантированно имеют ненулевое число витков,

336
00:20:46,259 --> 00:20:50,561
и когда вы видите это, вы знаете, что где-то внутри этого меньшего цикла есть ноль,

337
00:20:50,561 --> 00:20:54,300
поэтому вы продолжаете идти тем же путем, обыскивая меньшее пространство.

338
00:20:54,300 --> 00:20:58,347
Мы также прекращаем исследование региона, если путь, по которому мы вычисляем,

339
00:20:58,347 --> 00:21:02,958
случайно натыкается на ноль, что действительно произошло один раз в этом примере в правой

340
00:21:02,958 --> 00:21:03,420
половине.

341
00:21:03,420 --> 00:21:09,320
Эти редкие случаи мешают нам вычислять числа оборотов, но, эй, мы получили ноль.

342
00:21:09,320 --> 00:21:13,320
А что касается петель, число витков которых равно нулю, вы их просто не изучаете дальше.

343
00:21:13,320 --> 00:21:18,520
Может быть, у них есть решение внутри, а может быть, и нет, у нас нет никаких гарантий.

344
00:21:18,520 --> 00:21:22,297
И если позволить нашему решателю уравнений продолжать в том же духе,

345
00:21:22,297 --> 00:21:26,020
он в конечном итоге сходится к множеству нулей для этого многочлена.

346
00:21:26,020 --> 00:21:31,660
Кстати, не случайно общее количество витков в этом примере оказалось равным 5.

347
00:21:31,660 --> 00:21:38,449
Для комплексных чисел операция x по n напрямую соответствует обходу начала координат

348
00:21:38,449 --> 00:21:45,000
выходных данных n раз, когда вы один раз обходите начало координат входных данных.

349
00:21:45,000 --> 00:21:49,460
Таким образом, в случае полинома для достаточно больших входных данных каждый член,

350
00:21:49,460 --> 00:21:52,700
кроме ведущего, становится незначительным по сравнению с ним.

351
00:21:52,700 --> 00:21:57,476
Таким образом, любой комплексный многочлен, главный член которого равен x до n,

352
00:21:57,476 --> 00:22:00,700
имеет число витков n вокруг достаточно большого цикла.

353
00:22:00,700 --> 00:22:04,995
Таким образом, наша технология намоточных чисел фактически гарантирует,

354
00:22:04,995 --> 00:22:07,620
что каждый комплексный многочлен имеет ноль.

355
00:22:07,620 --> 00:22:13,880
Это настолько важный факт, что математики называют его фундаментальной теоремой алгебры.

356
00:22:13,880 --> 00:22:18,763
Наличие алгоритма для поиска численных решений подобных уравнений чрезвычайно практично,

357
00:22:18,763 --> 00:22:22,439
но фундаментальная теорема алгебры является хорошим примером того,

358
00:22:22,439 --> 00:22:26,115
как эти числа витков также весьма полезны на теоретическом уровне,

359
00:22:26,115 --> 00:22:29,626
гарантируя существование решения для широкого класса уравнений.

360
00:22:29,626 --> 00:22:34,400
уравнения для подходящих условий, о которых математикам гораздо больше нравится думать.

361
00:22:34,400 --> 00:22:39,445
Я покажу вам еще пару удивительных применений этого в контексте топологии в следующем

362
00:22:39,445 --> 00:22:44,080
видео, которое включает в себя исправление ошибки из старого видео 3blue1brown.

363
00:22:44,080 --> 00:22:45,080
Который из?

364
00:22:45,080 --> 00:22:48,505
Что ж, посмотрите все видео, все, что есть на этом канале,

365
00:22:48,505 --> 00:22:51,640
и посмотрите, сможете ли вы сначала обнаружить ошибку.

366
00:22:51,640 --> 00:22:53,688
Основным автором этого видео является один из

367
00:22:53,688 --> 00:22:55,960
новых участников команды 3blue1brown Шридхар Рамеш.

