1
00:00:00,000 --> 00:00:06,720
Здесь есть две вещи: основная тема и метатема.

2
00:00:06,720 --> 00:00:10,149
Основной темой будет этот действительно изящный алгоритм решения двумерных

3
00:00:10,149 --> 00:00:13,670
уравнений, уравнений, в которых есть два неизвестных действительных числа, а

4
00:00:13,670 --> 00:00:17,420
также уравнений, включающих одно неизвестное, которое является комплексным числом.

5
00:00:17,420 --> 00:00:21,784
Так, например, если вы хотите найти комплексные корни многочлена или, может быть,

6
00:00:21,784 --> 00:00:26,414
некоторые из тех нулей на миллион долларов дзета-функции Римана, этот алгоритм сделает

7
00:00:26,414 --> 00:00:27,000
это за вас.

8
00:00:27,000 --> 00:00:30,520
И этот метод очень красивый, так как задействовано много цветов.

9
00:00:30,520 --> 00:00:33,756
И что еще более важно, основная идея применима ко всем видам

10
00:00:33,756 --> 00:00:37,045
математики, выходящим далеко за рамки этого алгоритма решения

11
00:00:37,045 --> 00:00:40,600
уравнений, включая некоторую топологию, о которой я расскажу позже.

12
00:00:40,600 --> 00:00:44,440
Но что действительно делает эти 20 минут вашего времени полезными, так это то,

13
00:00:44,440 --> 00:00:48,523
что они иллюстрируют урок, гораздо более полезный в математике, который заключается

14
00:00:48,523 --> 00:00:52,120
в попытке определить конструкции, которые хорошо сочетаются друг с другом.

15
00:00:52,120 --> 00:00:55,460
По ходу истории вы поймете, что я имею в виду.

16
00:00:55,460 --> 00:00:58,688
Чтобы мотивировать случай с функциями, которые имеют 2d входные и 2d

17
00:00:58,688 --> 00:01:01,917
выходные данные, давайте начнем с более простого, с функций, которые

18
00:01:01,917 --> 00:01:05,100
просто принимают действительное число и выдают действительное число.

19
00:01:05,100 --> 00:01:09,707
Если вы хотите знать, когда функция f от x равна некоторой другой функции g от x, вы

20
00:01:09,707 --> 00:01:14,260
можете думать об этом как о поиске момента пересечения графиков этих функций, верно?

21
00:01:14,260 --> 00:01:19,340
Я имею в виду, что это дает вам ввод, где обе функции имеют одинаковый вывод.

22
00:01:19,340 --> 00:01:22,347
Если взять очень простой пример, представьте, что f от

23
00:01:22,347 --> 00:01:25,520
x — это x в квадрате, а g от x — это постоянная функция 2.

24
00:01:25,520 --> 00:01:29,620
Другими словами, вы хотите найти квадратный корень из 2.

25
00:01:29,620 --> 00:01:34,174
Даже если вы почти ничего не знаете о поиске квадратных корней, вы, вероятно,

26
00:01:34,174 --> 00:01:38,377
увидите, что 1 в квадрате меньше 2, а 2 в квадрате больше 2, поэтому вы

27
00:01:38,377 --> 00:01:42,640
понимаете, что между этими двумя значениями должно быть какое-то решение.

28
00:01:42,640 --> 00:01:45,067
А затем, если вы хотите еще больше сузить его, возможно,

29
00:01:45,067 --> 00:01:47,240
вы попытаетесь возвести в квадрат среднюю точку, 1.

30
00:01:47,240 --> 00:01:47,740
5.

31
00:01:47,740 --> 00:01:49,085
Получается 2.

32
00:01:49,085 --> 00:01:54,000
25, немного слишком много, поэтому вам следует сосредоточиться на области между 1 и 1.

33
00:01:54,000 --> 00:01:54,940
5.

34
00:01:54,940 --> 00:02:00,012
И так далее, вы, вероятно, можете представить, как это будет продолжаться: вы

35
00:02:00,012 --> 00:02:05,540
продолжите вычисления в средней точке, а затем сократите пространство поиска пополам.

36
00:02:05,540 --> 00:02:09,312
Другой способ подумать об этом, который облегчит нам задачу, когда мы перейдем

37
00:02:09,312 --> 00:02:13,132
к более высоким измерениям, — это вместо этого сосредоточиться на эквивалентном

38
00:02:13,132 --> 00:02:16,380
вопросе о том, когда разница между этими двумя функциями равна нулю.

39
00:02:16,380 --> 00:02:20,141
Таким образом, мы нашли область входных данных, где эта разница

40
00:02:20,141 --> 00:02:24,020
была отрицательной на одном конце и положительной на другом конце.

41
00:02:24,020 --> 00:02:27,781
Мы разделили его на две части, и та половина, на которой мы сузили

42
00:02:27,781 --> 00:02:31,600
свое внимание, была той, где самые крайние точки имели разные знаки.

43
00:02:31,600 --> 00:02:36,486
Таким образом, мы могли продолжать идти вечно, беря каждую область с разными

44
00:02:36,486 --> 00:02:41,373
знаками на границе, находя меньшую такую область среди ее половин, зная, что

45
00:02:41,373 --> 00:02:46,260
в конечном итоге нам придется сузиться до точки, которая будет ровно нулевой.

46
00:02:46,260 --> 00:02:50,771
Короче говоря, решение уравнений всегда можно представить как поиск момента, когда

47
00:02:50,771 --> 00:02:55,500
определенная функция равна нулю, и для этого у нас есть эвристика: если f положительно

48
00:02:55,500 --> 00:02:59,848
в одной точке и отрицательно в другой точке, вы можете найти что-то между ними,

49
00:02:59,848 --> 00:03:03,980
где это ноль, по крайней мере, если все меняется плавно, без резких скачков.

50
00:03:03,980 --> 00:03:07,524
Удивительная вещь, которую я хочу вам показать, — это то, что вы

51
00:03:07,524 --> 00:03:11,286
можете расширить этот тип мышления до двумерных уравнений, уравнений

52
00:03:11,286 --> 00:03:14,940
между функциями, чьи входные и выходные данные являются двумерными.

53
00:03:14,940 --> 00:03:18,428
Например, комплексные числа являются двумерными, и этот инструмент, который

54
00:03:18,428 --> 00:03:21,780
мы разрабатываем, идеально подходит для поиска решений сложных уравнений.

55
00:03:21,780 --> 00:03:25,684
Теперь, поскольку мы будем так много говорить об этих 2D-функциях, давайте

56
00:03:25,684 --> 00:03:29,380
сделаем небольшой шаг в сторону и посмотрим, как мы их проиллюстрируем.

57
00:03:29,380 --> 00:03:33,319
Для построения графика функции с 2D-входом и 2D-выходом потребуется

58
00:03:33,319 --> 00:03:37,316
четыре измерения, и это не будет так хорошо работать в нашем 3D-мире

59
00:03:37,316 --> 00:03:41,140
на наших 2D-экранах, но у нас все еще есть пара хороших вариантов.

60
00:03:41,140 --> 00:03:46,020
Один из них — просто посмотреть одновременно на входное и выходное пространство.

61
00:03:46,020 --> 00:03:49,563
Каждая точка входного пространства перемещается в определенную точку

62
00:03:49,563 --> 00:03:53,208
выходного пространства, и я могу показать, как перемещение вокруг этой

63
00:03:53,208 --> 00:03:57,060
входной точки соответствует определенным движениям в выходном пространстве.

64
00:03:57,060 --> 00:04:00,653
Все рассматриваемые нами функции будут непрерывными в том смысле,

65
00:04:00,653 --> 00:04:03,811
что небольшие изменения входных данных соответствуют лишь

66
00:04:03,811 --> 00:04:07,460
небольшим изменениям выходных данных, резких скачков не происходит.

67
00:04:07,460 --> 00:04:10,640
Другой вариант, который у нас есть, — представить стрелку,

68
00:04:10,640 --> 00:04:14,091
ведущую от начала выходного пространства к этой выходной точке,

69
00:04:14,091 --> 00:04:17,380
и прикрепить миниатюрную версию этой стрелки к входной точке.

70
00:04:17,380 --> 00:04:22,355
Это может дать нам представление о том, куда идет данная входная точка или куда

71
00:04:22,355 --> 00:04:27,580
идет множество различных входных точек, с помощью рисования полного векторного поля.

72
00:04:27,580 --> 00:04:30,715
И, к сожалению, когда вы делаете это во многих точках, это может сильно

73
00:04:30,715 --> 00:04:34,155
загромождать, поэтому позвольте мне сделать все стрелки одинакового размера, и

74
00:04:34,155 --> 00:04:37,900
это означает, что мы можем получить представление о направлении каждой выходной точки.

75
00:04:37,900 --> 00:04:41,050
Но, возможно, самый красивый способ проиллюстрировать двумерные

76
00:04:41,050 --> 00:04:44,200
функции, который мы будем использовать чаще всего в этом видео,

77
00:04:44,200 --> 00:04:47,400
— это связать каждую точку в этом выходном пространстве с цветом.

78
00:04:47,400 --> 00:04:51,442
Здесь мы использовали оттенки, то есть места, где цвет падает по радуге или

79
00:04:51,442 --> 00:04:55,538
цветовому кругу, чтобы соответствовать направлению от начала координат, и мы

80
00:04:55,538 --> 00:05:00,060
используем темноту или яркость, чтобы соответствовать расстоянию от начала координат.

81
00:05:00,060 --> 00:05:05,290
Например, если сосредоточиться на этом массиве выходных данных, все эти точки красные,

82
00:05:05,290 --> 00:05:10,340
но те, что ближе к началу координат, немного темнее, а те, что дальше, немного ярче.

83
00:05:10,340 --> 00:05:14,713
И если сосредоточиться на этом массиве выходных данных, все точки будут зелеными,

84
00:05:14,713 --> 00:05:18,980
и опять же, ближе к началу координат означает темнее, дальше — означает светлее.

85
00:05:18,980 --> 00:05:22,217
И так далее, все, что мы здесь делаем, это присваиваем каждому

86
00:05:22,217 --> 00:05:25,300
направлению определенный цвет, и все это постоянно меняется.

87
00:05:25,300 --> 00:05:30,270
Вы можете заметить, что различия в темноте и яркости здесь довольно незаметны, но в

88
00:05:30,270 --> 00:05:35,300
этом видео нас волнует только направление вывода, а не величина, оттенок или яркость.

89
00:05:35,300 --> 00:05:39,660
В отношении яркости вам следует заметить одну важную вещь: вблизи начала

90
00:05:39,660 --> 00:05:44,440
координат, не имеющего определенного направления, все цвета тускнеют до черного.

91
00:05:44,440 --> 00:05:48,985
Итак, говоря о функциях, теперь, когда мы определились с цветом для каждого выхода,

92
00:05:48,985 --> 00:05:53,639
мы можем визуализировать 2D-функции, раскрашивая каждую точку во входном пространстве

93
00:05:53,639 --> 00:05:57,860
в зависимости от цвета точки, в которой она находится в выходном пространстве.

94
00:05:57,860 --> 00:06:01,221
Мне нравится представлять, как множество разных точек из этого входного

95
00:06:01,221 --> 00:06:04,349
пространства перепрыгивают на соответствующие им выходы в выходном

96
00:06:04,349 --> 00:06:07,758
пространстве, затем окрашиваются в зависимости от цвета точки, в которой

97
00:06:07,758 --> 00:06:11,820
они приземляются, а затем возвращаются туда, откуда они пришли во входном пространстве.

98
00:06:11,820 --> 00:06:14,206
Делая это для каждой точки входного пространства, вы можете

99
00:06:14,206 --> 00:06:16,395
получить представление, просто взглянув на это входное

100
00:06:16,395 --> 00:06:19,140
пространство и примерно определив, где функция занимает каждую точку.

101
00:06:19,140 --> 00:06:24,982
Например, эта полоса розовых точек слева говорит нам, что все эти точки отображаются

102
00:06:24,982 --> 00:06:30,000
где-то в розовом направлении, в левом нижнем углу выходного пространства.

103
00:06:30,000 --> 00:06:33,705
Кроме того, те три точки, которые являются черными

104
00:06:33,705 --> 00:06:37,120
и окружены множеством цветов, стремятся к нулю.

105
00:06:37,120 --> 00:06:43,126
Хорошо, как и в случае с 1D, решение уравнений 2D-функций всегда

106
00:06:43,126 --> 00:06:49,780
можно переформулировать, спросив, когда определенная функция равна нулю.

107
00:06:49,780 --> 00:06:55,753
Итак, наша задача сейчас — создать алгоритм, который определяет,

108
00:06:55,753 --> 00:07:00,900
какие входные точки данной 2D-функции обращаются в ноль.

109
00:07:00,900 --> 00:07:04,859
Вы можете отметить, что если вы смотрите на подобную карту цветов,

110
00:07:04,859 --> 00:07:08,700
видя эти черные точки, вы уже знаете, где находятся нули функции.

111
00:07:08,700 --> 00:07:11,460
Так это считается?

112
00:07:11,460 --> 00:07:15,655
Имейте в виду, что для создания такой диаграммы мы заставили компьютер

113
00:07:15,655 --> 00:07:19,968
вычислить функцию во всех пикселях плоскости, но наша цель — найти более

114
00:07:19,968 --> 00:07:24,459
эффективный алгоритм, который требует вычисления функции только в как можно

115
00:07:24,459 --> 00:07:29,600
меньшем количестве точек. , так сказать, имея лишь ограниченное представление о цветах.

116
00:07:29,600 --> 00:07:34,254
А также с более теоретической точки зрения было бы неплохо иметь общую конструкцию,

117
00:07:34,254 --> 00:07:38,300
которая сообщала бы нам условия существования нуля внутри данной области.

118
00:07:38,300 --> 00:07:41,877
Помните, что в одном измерении основная идея заключалась в том,

119
00:07:41,877 --> 00:07:45,119
что если непрерывная функция положительна в одной точке и

120
00:07:45,119 --> 00:07:48,920
отрицательна в другой, где-то посередине она должна быть равна нулю.

121
00:07:48,920 --> 00:07:50,960
Так как же нам распространить это на два измерения?

122
00:07:50,960 --> 00:07:55,180
Нам нужен некий аналог разговоров о знаках.

123
00:07:55,180 --> 00:07:59,140
Один из способов подумать о том, что такое знаки, — это направления.

124
00:07:59,140 --> 00:08:01,570
Положительное значение означает, что вы указываете вправо по

125
00:08:01,570 --> 00:08:04,240
числовой прямой, а отрицательное означает, что вы указываете влево.

126
00:08:04,240 --> 00:08:08,633
Двумерные величины тоже имеют направление, но для них варианты гораздо

127
00:08:08,633 --> 00:08:12,780
шире, они могут указывать куда угодно по целому кругу возможностей.

128
00:08:12,780 --> 00:08:17,815
Таким образом, точно так же, как в одном измерении мы спрашивали, является ли

129
00:08:17,815 --> 00:08:22,785
данная функция положительной или отрицательной на границе диапазона, который

130
00:08:22,785 --> 00:08:27,756
составляет всего две точки, для 2d-функций мы собираемся смотреть на границу

131
00:08:27,756 --> 00:08:32,920
области, которая является циклом, и спросите о направлении вывода функции вдоль

132
00:08:32,920 --> 00:08:33,760
этой границы.

133
00:08:33,760 --> 00:08:37,687
Например, мы видим, что в этом цикле вокруг этого нуля выходные данные

134
00:08:37,687 --> 00:08:41,504
проходят через все возможные направления, все цвета радуги: красный,

135
00:08:41,504 --> 00:08:45,820
желтый, зеленый, синий, обратно к красному и все, что между ними на этом пути.

136
00:08:45,820 --> 00:08:50,679
Но в этом цикле, внутри которого нет нулей, выходные данные проходят не через все

137
00:08:50,679 --> 00:08:55,420
цвета, а через некоторые оранжевые, но никогда, скажем, через зеленый или синий.

138
00:08:55,420 --> 00:08:59,320
И это многообещающе, это очень похоже на то, как все работает в одном измерении.

139
00:08:59,320 --> 00:09:04,799
Возможно, точно так же, как если 1d-функция принимает оба возможных знака на границе

140
00:09:04,799 --> 00:09:09,892
1d-области, а где-то внутри находится ноль, мы могли бы предположить, что если

141
00:09:09,892 --> 00:09:15,371
2d-функция достигает выходов всех возможных направлений, всех возможных цветов вдоль

142
00:09:15,371 --> 00:09:20,980
граница двухмерной области, то где-то внутри этой области она должна стремиться к нулю.

143
00:09:20,980 --> 00:09:24,610
Итак, это наше предположение, и подумайте, должно

144
00:09:24,610 --> 00:09:27,660
ли это быть правдой, и если да, то почему.

145
00:09:27,660 --> 00:09:30,614
Если мы начнем думать о крошечном цикле вокруг некоторой входной

146
00:09:30,614 --> 00:09:33,387
точки, мы знаем, что, поскольку все непрерывно, наша функция

147
00:09:33,387 --> 00:09:36,660
переносит его в какой-то крошечный цикл рядом с соответствующим выходом.

148
00:09:36,660 --> 00:09:41,140
Но посмотрите: для большинства крошечных циклов выходные данные различаются по цвету.

149
00:09:41,140 --> 00:09:45,394
Если вы выберете любую выходную точку, отличную от нуля, и нарисуете рядом с ней

150
00:09:45,394 --> 00:09:49,860
достаточно узкий цикл, все цвета цикла будут примерно того же цвета, что и эта точка.

151
00:09:49,860 --> 00:09:54,150
Тугая петля здесь вся голубоватая, а вот здесь узкая петля

152
00:09:54,150 --> 00:09:58,440
вся желтоватая, конечно, вы не получите всех цветов радуги.

153
00:09:58,440 --> 00:10:03,005
Единственная точка, где вы можете затянуть вокруг него петли, сохранив

154
00:10:03,005 --> 00:10:07,120
при этом все цвета, — это бесцветное начало координат, сам ноль.

155
00:10:07,120 --> 00:10:10,278
Так что это действительно тот случай, когда у вас есть петли,

156
00:10:10,278 --> 00:10:13,437
проходящие через все цвета радуги, сжимающиеся и сжимающиеся,

157
00:10:13,437 --> 00:10:17,360
сужающиеся в какой-то точке, тогда эта точка на самом деле должна быть нулем.

158
00:10:17,360 --> 00:10:20,272
Итак, давайте настроим решатель двумерных уравнений,

159
00:10:20,272 --> 00:10:22,360
как наш решатель одномерных уравнений.

160
00:10:22,360 --> 00:10:26,420
Когда мы найдем большую область, граница которой проходит через каждый цвет,

161
00:10:26,420 --> 00:10:30,640
разделим ее на две части, а затем посмотрим на цвета на границе каждой половины.

162
00:10:30,640 --> 00:10:34,664
В показанном здесь примере граница левой половины не проходит через все

163
00:10:34,664 --> 00:10:39,080
цвета, например, нет точек, которые соответствуют оранжево-желтым направлениям.

164
00:10:39,080 --> 00:10:41,449
Поэтому я выделю эту область серым цветом, чтобы

165
00:10:41,449 --> 00:10:43,480
сказать, что мы не хотим ее искать дальше.

166
00:10:43,480 --> 00:10:47,366
Правая половина проходит через все цвета, проводит много времени в зеленом направлении,

167
00:10:47,366 --> 00:10:51,120
затем проходит через желтый, оранжевый, красный, а также синий, фиолетовый и розовый.

168
00:10:51,120 --> 00:10:54,581
Теперь помните, что это означает, что точки этой границы

169
00:10:54,581 --> 00:10:57,800
сопоставляются с выходами всех возможных направлений.

170
00:10:57,800 --> 00:11:02,900
Итак, мы исследуем его дальше, снова разделив и проверив границы для каждого региона.

171
00:11:02,900 --> 00:11:07,000
Граница верха вся зеленая, поэтому на этом поиски остановимся.

172
00:11:07,000 --> 00:11:10,500
Но нижняя часть достаточно красочная, чтобы заслуживать отдельного подразделения.

173
00:11:10,500 --> 00:11:12,420
И просто продолжайте в том же духе.

174
00:11:12,420 --> 00:11:16,631
Проверьте, какая подобласть имеет границу, охватывающую все возможные цвета,

175
00:11:16,631 --> 00:11:20,678
то есть точки этой границы отображаются во всех возможных направлениях, и

176
00:11:20,678 --> 00:11:24,889
продолжайте разрезать эти области пополам, как мы это делали для одномерного

177
00:11:24,889 --> 00:11:29,320
случая, что в конечном итоге приведет нас к нулю по функции. Ой, подожди секунду.

178
00:11:29,320 --> 00:11:30,320
Что здесь случилось?

179
00:11:30,320 --> 00:11:33,896
Ни одно из этих последних подразделений в правом нижнем углу не

180
00:11:33,896 --> 00:11:37,528
прошло через все цвета, поэтому наш алгоритм остановился, потому

181
00:11:37,528 --> 00:11:41,160
что не хотел искать ни в одном из них, но он также не нашел ноль.

182
00:11:41,160 --> 00:11:43,720
Ладно, здесь явно что-то не так.

183
00:11:43,720 --> 00:11:46,680
И это нормально, ошибаться – это обычная часть занятий математикой.

184
00:11:46,680 --> 00:11:50,124
Если оглянуться назад, у нас была эта гипотеза, и она привела

185
00:11:50,124 --> 00:11:53,680
нас к этому предложенному алгоритму, значит, мы где-то ошиблись.

186
00:11:53,680 --> 00:11:58,018
И быть хорошим в математике – это не значит быть правым с первого раза, а иметь

187
00:11:58,018 --> 00:12:02,520
способность внимательно оглянуться назад, понять ошибки и понять, как их исправить.

188
00:12:02,520 --> 00:12:06,773
Проблема здесь в том, что у нас был регион, граница которого проходила через каждый цвет,

189
00:12:06,773 --> 00:12:10,743
но когда мы разделили его посередине, ни одна граница субрегиона не проходила через

190
00:12:10,743 --> 00:12:14,854
каждый цвет, у нас не было вариантов, где продолжать поиск дальше, и это сломало ноль.

191
00:12:14,854 --> 00:12:15,280
искатель.

192
00:12:15,280 --> 00:12:18,120
В одном измерении ничего подобного никогда не происходило.

193
00:12:18,120 --> 00:12:21,643
Каждый раз, когда у вас есть интервал, конечные точки которого имеют

194
00:12:21,643 --> 00:12:25,523
разные знаки, если вы разделите его, вы знаете, что гарантированно получите

195
00:12:25,523 --> 00:12:29,200
некоторый подинтервал, конечные точки которого также имеют разные знаки.

196
00:12:29,200 --> 00:12:32,477
Или, другими словами, каждый раз, когда у вас есть два интервала,

197
00:12:32,477 --> 00:12:35,704
конечные точки которых не меняют знак, если вы объедините их, вы

198
00:12:35,704 --> 00:12:39,280
получите больший интервал, конечные точки которого также не меняют знак.

199
00:12:39,280 --> 00:12:42,871
Но в двух измерениях можно найти две области, границы которых

200
00:12:42,871 --> 00:12:46,521
не проходят через все цвета, но границы которых в совокупности

201
00:12:46,521 --> 00:12:49,940
образуют область, граница которой проходит через все цвета.

202
00:12:49,940 --> 00:12:53,740
Именно таким образом предложенный нами алгоритм поиска нуля сломался.

203
00:12:53,740 --> 00:12:58,173
Фактически, если вы подумаете об этом, вы можете найти большой цикл,

204
00:12:58,173 --> 00:13:03,120
граница которого проходит через все возможные цвета, но внутри него нет нуля.

205
00:13:03,120 --> 00:13:07,881
Это не означает, что мы были неправы в наших утверждениях о крошечных петлях, когда

206
00:13:07,881 --> 00:13:12,756
говорили, что вечно сужающаяся петля, проходящая через каждый цвет, должна сужаться к

207
00:13:12,756 --> 00:13:13,040
нулю.

208
00:13:13,040 --> 00:13:17,923
Но что нас запутало, так это то, что свойство «проходит ли моя граница через каждый

209
00:13:17,923 --> 00:13:23,040
цвет или нет» не объединяется приятным и предсказуемым образом при объединении регионов.

210
00:13:23,040 --> 00:13:30,587
Но не волнуйтесь, оказывается, мы можем немного изменить это свойство,

211
00:13:30,587 --> 00:13:38,560
сделав его более сложным, которое в совокупности даст нам то, что мы хотим.

212
00:13:38,560 --> 00:13:41,740
Идея состоит в том, что вместо того, чтобы просто спрашивать, можем

213
00:13:41,740 --> 00:13:44,920
ли мы найти цвет в какой-то момент цикла, давайте более внимательно

214
00:13:44,920 --> 00:13:48,100
проследим, как эти цвета меняются по мере нашего обхода этого цикла.

215
00:13:48,100 --> 00:13:50,060
Позвольте мне показать вам, что я имею в виду, на примере.

216
00:13:50,060 --> 00:13:54,120
Я поставлю здесь, в углу, небольшой цветовой круг, чтобы мы могли отслеживать его.

217
00:13:54,120 --> 00:13:57,741
Когда цвета на пути входных данных движутся по радуге в определенном

218
00:13:57,741 --> 00:14:01,573
направлении: от красного к желтому, от желтого к зеленому, от зеленого к

219
00:14:01,573 --> 00:14:05,720
синему или от синего к красному, выходные данные колеблются по часовой стрелке.

220
00:14:05,720 --> 00:14:09,584
Но с другой стороны, если цвета движутся по радуге в обратном направлении:

221
00:14:09,584 --> 00:14:13,398
от синего к зеленому, от зеленого к желтому, от желтого к красному или от

222
00:14:13,398 --> 00:14:17,160
красного к синему, выходной сигнал будет меняться против часовой стрелки.

223
00:14:17,160 --> 00:14:21,603
Итак, идя по этому короткому пути здесь, цвета проходят пятую часть

224
00:14:21,603 --> 00:14:26,046
пути по часовой стрелке цветового круга, а идя по этому пути здесь,

225
00:14:26,046 --> 00:14:30,620
цвета проходят еще одну пятую пути по часовой стрелке цветового круга.

226
00:14:30,620 --> 00:14:34,807
Конечно, это означает, что если вы пройдете по обоим путям, один за другим,

227
00:14:34,807 --> 00:14:39,380
цвета повернутся в общей сложности на две пятых полного оборота по часовой стрелке.

228
00:14:39,380 --> 00:14:43,260
Общее количество намоток просто складывается, и это будет ключевым

229
00:14:43,260 --> 00:14:47,140
моментом, это тот тип простого объединения, который нам пригодится.

230
00:14:47,140 --> 00:14:50,841
Когда я говорю об общем количестве намоток, я хочу, чтобы вы представили

231
00:14:50,841 --> 00:14:54,846
старомодный одометр, который отсчитывает время вперед, когда стрелка вращается

232
00:14:54,846 --> 00:14:58,700
по часовой стрелке, и назад, когда стрелка вращается против часовой стрелки.

233
00:14:58,700 --> 00:15:00,727
Таким образом, обмотка против часовой стрелки

234
00:15:00,727 --> 00:15:03,020
считается отрицательной обмоткой по часовой стрелке.

235
00:15:03,020 --> 00:15:06,049
Выходы могут сильно поворачиваться, но если часть этого поворота

236
00:15:06,049 --> 00:15:08,940
происходит в противоположном направлении, это сводится на нет.

237
00:15:08,940 --> 00:15:13,209
Например, если вы двигаетесь вперед по этому пути, а затем двигаетесь назад

238
00:15:13,209 --> 00:15:17,535
по тому же пути, общая сумма намоток оказывается равной нулю, движение назад

239
00:15:17,535 --> 00:15:22,086
буквально перематывает назад через ранее увиденные цвета, обращая все предыдущие

240
00:15:22,086 --> 00:15:26,300
намотки на противоположное и возвращая одометр вернулся туда, где он начал.

241
00:15:26,300 --> 00:15:30,480
Для наших целей нас больше всего будет интересовать намотка по петлям.

242
00:15:30,480 --> 00:15:34,280
Например, предположим, что мы обходим весь этот цикл по часовой стрелке.

243
00:15:34,280 --> 00:15:38,304
Выходные данные, с которыми мы сталкиваемся, совершают в общей

244
00:15:38,304 --> 00:15:42,584
сложности три полных оборота по часовой стрелке, цвета менялись по

245
00:15:42,584 --> 00:15:47,120
радуге по порядку: снова от красного к красному, а затем снова и снова.

246
00:15:47,120 --> 00:15:54,100
На жаргоне математиков мы говорим, что общее число витков на этом контуре равно 3.

247
00:15:54,100 --> 00:15:58,420
Для других циклов это может быть любое другое целое число, возможно, большее, если

248
00:15:58,420 --> 00:16:02,635
выходной сигнал меняется много раз, когда входные данные проходят один цикл, или

249
00:16:02,635 --> 00:16:07,060
это может быть меньшее число, если выходной сигнал меняется только один или два раза.

250
00:16:07,060 --> 00:16:11,106
Или это число витков может быть даже отрицательным целым числом, если выходной сигнал

251
00:16:11,106 --> 00:16:15,200
будет колебаться против часовой стрелки, когда мы идем по часовой стрелке вокруг цикла.

252
00:16:15,200 --> 00:16:19,720
Но на любом контуре общее количество намоток должно быть целым числом.

253
00:16:19,720 --> 00:16:22,780
Я имею в виду, что к тому времени, когда вы вернетесь к тому, с

254
00:16:22,780 --> 00:16:25,840
чего начали, у вас будет тот же результат, с которого вы начали.

255
00:16:25,840 --> 00:16:29,724
Между прочим, если путь действительно содержит точку, в которой выходной

256
00:16:29,724 --> 00:16:33,715
сигнал равен нулю, то технически вы не можете определить номер витка вдоль

257
00:16:33,715 --> 00:16:37,600
этой точки, поскольку выходной сигнал не имеет определенного направления.

258
00:16:37,600 --> 00:16:41,454
Для нас это не будет проблемой, потому что вся наша цель — найти нули,

259
00:16:41,454 --> 00:16:45,200
поэтому, если это когда-нибудь произойдет, нам просто повезло раньше.

260
00:16:45,200 --> 00:16:50,050
Главное, что следует отметить в этих извилистых числах, — это то, что

261
00:16:50,050 --> 00:16:55,040
они хорошо складываются, когда вы объединяете пути в более крупные пути.

262
00:16:55,040 --> 00:16:59,080
Но чего мы действительно хотим, так это того, чтобы извилистые числа вдоль границ

263
00:16:59,080 --> 00:17:03,120
регионов хорошо складывались, когда мы объединяем регионы в более крупные регионы.

264
00:17:03,120 --> 00:17:06,320
Так есть ли у нас эта собственность?

265
00:17:06,320 --> 00:17:09,600
Ну, взгляните.

266
00:17:09,600 --> 00:17:13,855
Число витков, когда мы идем по часовой стрелке вокруг этой области

267
00:17:13,855 --> 00:17:17,920
слева, представляет собой сумму чисел витков этих четырех путей.

268
00:17:17,920 --> 00:17:21,610
И виток, когда мы идем по часовой стрелке вокруг этой области

269
00:17:21,610 --> 00:17:25,480
справа, представляет собой сумму чисел витков этих четырех путей.

270
00:17:25,480 --> 00:17:29,591
И когда мы объединяем эти два региона в один более крупный, большинство

271
00:17:29,591 --> 00:17:33,760
этих путей становятся частью границы большего региона по часовой стрелке.

272
00:17:33,760 --> 00:17:36,040
А что касается тех двух путей, которые этого не делают?

273
00:17:36,040 --> 00:17:39,350
Они прекрасно компенсируются, один из них представляет

274
00:17:39,350 --> 00:17:42,660
собой обратную перемотку другого, как мы видели раньше.

275
00:17:42,660 --> 00:17:46,287
Таким образом, извилистые числа вдоль границ регионов

276
00:17:46,287 --> 00:17:48,840
складываются именно так, как мы хотим.

277
00:17:48,840 --> 00:17:53,050
Также отметим, что рассуждения о таком удачном сложении ориентированных

278
00:17:53,050 --> 00:17:57,320
границ часто встречаются в математике и часто называются теоремой Стокса.

279
00:17:57,320 --> 00:17:59,933
Те из вас, кто изучал исчисление с несколькими

280
00:17:59,933 --> 00:18:02,880
переменными, возможно, узнают это по этому контексту.

281
00:18:02,880 --> 00:18:05,533
Итак, теперь, наконец, имея в руках намоточные числа,

282
00:18:05,533 --> 00:18:08,040
мы можем вернуться к нашим целям решения уравнений.

283
00:18:08,040 --> 00:18:12,485
Проблема с областью, которую мы видели ранее, заключается в том, что, хотя ее граница

284
00:18:12,485 --> 00:18:16,620
проходила через все возможные цвета, число витков на самом деле было равно нулю.

285
00:18:16,620 --> 00:18:20,475
Выходы прошли примерно половину пути, от желтого к красному, а затем

286
00:18:20,475 --> 00:18:24,274
начали двигаться против часовой стрелки в другом направлении, затем

287
00:18:24,274 --> 00:18:28,352
продолжили проходить через синий и попадать на красный с другой стороны,

288
00:18:28,352 --> 00:18:32,040
и все это таким образом, что общая сумма обмотки стала равна нулю.

289
00:18:32,040 --> 00:18:36,153
Но если вы найдете цикл, который не только соответствует каждому цвету, но и

290
00:18:36,153 --> 00:18:40,320
имеет более строгое условие ненулевого числа витков, тогда, если вы разделите

291
00:18:40,320 --> 00:18:44,273
его пополам, вы гарантированно получите, что хотя бы одна из этих половин

292
00:18:44,273 --> 00:18:48,600
имеет также ненулевое число витков, поскольку все складывается так, как мы хотим.

293
00:18:48,600 --> 00:18:54,280
Таким образом, вы можете продолжать идти, все дальше и дальше сужаяся до одной точки.

294
00:18:54,280 --> 00:18:57,345
И когда вы сужаетесь до точки, вы будете делать это с помощью

295
00:18:57,345 --> 00:19:00,856
крошечных петель, которые имеют ненулевые номера витков, что означает,

296
00:19:00,856 --> 00:19:04,169
что они проходят через все возможные цвета и, следовательно, как я

297
00:19:04,169 --> 00:19:07,680
уже говорил ранее, точку, в которой они сужаются. on должен быть нулем.

298
00:19:07,680 --> 00:19:08,760
Вот и все!

299
00:19:08,760 --> 00:19:12,243
Мы создали программу для решения двумерных уравнений,

300
00:19:12,243 --> 00:19:14,760
и на этот раз, обещаю, ошибок не будет.

301
00:19:14,760 --> 00:19:18,200
Числа намотки — это именно тот инструмент, который нам нужен для этой работы.

302
00:19:18,200 --> 00:19:22,834
Теперь мы можем решать уравнения, которые выглядят так: где f от x равно

303
00:19:22,834 --> 00:19:27,660
g от x в двух измерениях, просто учитывая, как меняется разница между f и g.

304
00:19:27,660 --> 00:19:31,410
Всякий раз, когда у нас есть цикл, число витков которого не равно нулю, мы можем

305
00:19:31,410 --> 00:19:35,160
запустить на нем этот алгоритм и гарантированно найти решение где-то внутри него.

306
00:19:35,160 --> 00:19:40,300
И более того, как и в одном измерении, этот алгоритм невероятно эффективен.

307
00:19:40,300 --> 00:19:45,032
Мы продолжаем сужать половину размера нашей области каждый раунд, тем

308
00:19:45,032 --> 00:19:49,764
самым быстро сужая нули, и все это время нам нужно проверять значение

309
00:19:49,764 --> 00:19:55,240
функции только в точках этих циклов, а не проверять ее на многих точки интерьера.

310
00:19:55,240 --> 00:20:00,165
Таким образом, в некотором смысле общая проделанная работа пропорциональна

311
00:20:00,165 --> 00:20:04,960
только периметру пространства поиска, а не всей площади, что удивительно.

312
00:20:04,960 --> 00:20:09,328
Теперь, когда вы понимаете, что происходит, становится странно завораживать, просто

313
00:20:09,328 --> 00:20:13,800
наблюдая за этим в действии, придавая ему какую-то функцию и позволяя ему искать нули.

314
00:20:13,800 --> 00:20:16,916
Как я уже говорил ранее, комплексные числа двумерны, поэтому

315
00:20:16,916 --> 00:20:20,340
давайте применим это к некоторому уравнению с комплексными числами.

316
00:20:20,340 --> 00:20:24,705
Например, вот алгоритм поиска нулей функции x с точностью

317
00:20:24,705 --> 00:20:28,920
до пятой минус x минус единица на комплексной плоскости.

318
00:20:28,920 --> 00:20:32,258
Все началось с рассмотрения очень большой области вокруг начала

319
00:20:32,258 --> 00:20:35,440
координат, число витков которой в конечном итоге составило 5.

320
00:20:35,440 --> 00:20:39,217
Каждый раз, когда вы находите петлю с ненулевым числом витков, вы

321
00:20:39,217 --> 00:20:42,880
делите ее пополам и вычисляете число витков двух меньших петель.

322
00:20:42,880 --> 00:20:46,669
Любой из них или оба гарантированно имеют ненулевое число витков, и когда

323
00:20:46,669 --> 00:20:50,561
вы видите это, вы знаете, что где-то внутри этого меньшего цикла есть ноль,

324
00:20:50,561 --> 00:20:54,300
поэтому вы продолжаете идти тем же путем, обыскивая меньшее пространство.

325
00:20:54,300 --> 00:20:58,808
Мы также прекращаем исследование региона, если путь, по которому мы вычисляем, случайно

326
00:20:58,808 --> 00:21:03,420
натыкается на ноль, что действительно произошло один раз в этом примере в правой половине.

327
00:21:03,420 --> 00:21:09,320
Эти редкие случаи мешают нам вычислять числа оборотов, но, эй, мы получили ноль.

328
00:21:09,320 --> 00:21:13,320
А что касается петель, число витков которых равно нулю, вы их просто не изучаете дальше.

329
00:21:13,320 --> 00:21:18,520
Может быть, у них есть решение внутри, а может быть, и нет, у нас нет никаких гарантий.

330
00:21:18,520 --> 00:21:22,297
И если позволить нашему решателю уравнений продолжать в том же духе,

331
00:21:22,297 --> 00:21:26,020
он в конечном итоге сходится к множеству нулей для этого многочлена.

332
00:21:26,020 --> 00:21:31,660
Кстати, не случайно общее количество витков в этом примере оказалось равным 5.

333
00:21:31,660 --> 00:21:38,449
Для комплексных чисел операция x по n напрямую соответствует обходу начала координат

334
00:21:38,449 --> 00:21:45,000
выходных данных n раз, когда вы один раз обходите начало координат входных данных.

335
00:21:45,000 --> 00:21:48,770
Таким образом, в случае полинома для достаточно больших входных данных

336
00:21:48,770 --> 00:21:52,700
каждый член, кроме ведущего, становится незначительным по сравнению с ним.

337
00:21:52,700 --> 00:21:56,640
Таким образом, любой комплексный многочлен, главный член которого

338
00:21:56,640 --> 00:22:00,700
равен x до n, имеет число витков n вокруг достаточно большого цикла.

339
00:22:00,700 --> 00:22:04,219
Таким образом, наша технология намоточных чисел фактически

340
00:22:04,219 --> 00:22:07,620
гарантирует, что каждый комплексный многочлен имеет ноль.

341
00:22:07,620 --> 00:22:13,880
Это настолько важный факт, что математики называют его фундаментальной теоремой алгебры.

342
00:22:13,880 --> 00:22:18,159
Наличие алгоритма для поиска численных решений подобных уравнений чрезвычайно

343
00:22:18,159 --> 00:22:22,109
практично, но фундаментальная теорема алгебры является хорошим примером

344
00:22:22,109 --> 00:22:26,115
того, как эти числа витков также весьма полезны на теоретическом уровне,

345
00:22:26,115 --> 00:22:30,175
гарантируя существование решения для широкого класса уравнений. уравнения

346
00:22:30,175 --> 00:22:34,400
для подходящих условий, о которых математикам гораздо больше нравится думать.

347
00:22:34,400 --> 00:22:39,445
Я покажу вам еще пару удивительных применений этого в контексте топологии в следующем

348
00:22:39,445 --> 00:22:44,080
видео, которое включает в себя исправление ошибки из старого видео 3blue1brown.

349
00:22:44,080 --> 00:22:45,080
Который из?

350
00:22:45,080 --> 00:22:48,505
Что ж, посмотрите все видео, все, что есть на этом канале,

351
00:22:48,505 --> 00:22:51,640
и посмотрите, сможете ли вы сначала обнаружить ошибку.

352
00:22:51,640 --> 00:22:53,688
Основным автором этого видео является один из

353
00:22:53,688 --> 00:22:55,960
новых участников команды 3blue1brown Шридхар Рамеш.

