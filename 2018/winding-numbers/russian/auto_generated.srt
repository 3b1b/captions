1
00:00:03,060 --> 00:00:06,140
Здесь есть две вещи: основная тема и метатема.

2
00:00:06,640 --> 00:00:10,388
Основной темой будет этот действительно изящный алгоритм решения двумерных уравнений, 

3
00:00:10,388 --> 00:00:14,006
уравнений, в которых есть два неизвестных действительных числа, а также уравнений, 

4
00:00:14,006 --> 00:00:16,840
включающих одно неизвестное, которое является комплексным числом.

5
00:00:17,440 --> 00:00:21,567
Так, например, если вы хотите найти комплексные корни многочлена или, может быть, 

6
00:00:21,567 --> 00:00:24,839
некоторые из тех нулей на миллион долларов дзета-функции Римана, 

7
00:00:24,839 --> 00:00:26,500
этот алгоритм сделает это за вас.

8
00:00:26,800 --> 00:00:30,060
И этот метод очень красивый, так как задействовано много цветов.

9
00:00:30,540 --> 00:00:34,197
И что еще более важно, основная идея применима ко всем видам математики, 

10
00:00:34,197 --> 00:00:37,254
выходящим далеко за рамки этого алгоритма решения уравнений, 

11
00:00:37,254 --> 00:00:40,060
включая некоторую топологию, о которой я расскажу позже.

12
00:00:40,740 --> 00:00:44,486
Но что действительно делает эти 20 минут вашего времени полезными, так это то, 

13
00:00:44,486 --> 00:00:47,521
что они иллюстрируют урок, гораздо более полезный в математике, 

14
00:00:47,521 --> 00:00:50,082
который заключается в попытке определить конструкции, 

15
00:00:50,082 --> 00:00:51,980
которые хорошо сочетаются друг с другом.

16
00:00:52,400 --> 00:00:54,480
По ходу истории вы поймете, что я имею в виду.

17
00:00:55,060 --> 00:00:58,717
Чтобы мотивировать случай с функциями, которые имеют 2d входные и 2d выходные данные, 

18
00:00:58,717 --> 00:01:01,651
давайте начнем с более простого, с функций, которые просто принимают 

19
00:01:01,651 --> 00:01:03,820
действительное число и выдают действительное число.

20
00:01:05,080 --> 00:01:09,660
Если вы хотите знать, когда функция f от x равна некоторой другой функции g от x, 

21
00:01:09,660 --> 00:01:14,520
вы можете думать об этом как о поиске момента пересечения графиков этих функций, верно?

22
00:01:15,020 --> 00:01:18,520
Я имею в виду, что это дает вам ввод, где обе функции имеют одинаковый вывод.

23
00:01:18,520 --> 00:01:23,140
Если взять очень простой пример, представьте, что f от x — это x в квадрате, 

24
00:01:23,140 --> 00:01:25,300
а g от x — это постоянная функция 2.

25
00:01:25,960 --> 00:01:28,640
Другими словами, вы хотите найти квадратный корень из 2.

26
00:01:29,460 --> 00:01:33,797
Даже если вы почти ничего не знаете о поиске квадратных корней, вы, вероятно, 

27
00:01:33,797 --> 00:01:38,412
увидите, что 1 в квадрате меньше 2, а 2 в квадрате больше 2, поэтому вы понимаете, 

28
00:01:38,412 --> 00:01:41,860
что между этими двумя значениями должно быть какое-то решение.

29
00:01:42,580 --> 00:01:44,942
А затем, если вы хотите еще больше сузить его, возможно, 

30
00:01:44,942 --> 00:01:47,140
вы попытаетесь возвести в квадрат среднюю точку, 1.5.

31
00:01:47,720 --> 00:01:50,590
Получается 2.25, немного слишком много, поэтому 

32
00:01:50,590 --> 00:01:53,760
вам следует сосредоточиться на области между 1 и 1.5.

33
00:01:54,760 --> 00:01:57,594
И так далее, вы, вероятно, можете представить, как это будет продолжаться: 

34
00:01:57,594 --> 00:02:00,920
вы продолжите вычисления в средней точке, а затем сократите пространство поиска пополам.

35
00:02:05,100 --> 00:02:07,900
Другой способ подумать об этом, который облегчит нам задачу, 

36
00:02:07,900 --> 00:02:11,618
когда мы перейдем к более высоким измерениям, — это вместо этого сосредоточиться 

37
00:02:11,618 --> 00:02:15,520
на эквивалентном вопросе о том, когда разница между этими двумя функциями равна нулю.

38
00:02:16,100 --> 00:02:19,083
Таким образом, мы нашли область входных данных, 

39
00:02:19,083 --> 00:02:24,180
где эта разница была отрицательной на одном конце и положительной на другом конце.

40
00:02:24,180 --> 00:02:28,626
Мы разделили его на две части, и та половина, на которой мы сузили свое внимание, 

41
00:02:28,626 --> 00:02:31,500
была той, где самые крайние точки имели разные знаки.

42
00:02:31,500 --> 00:02:34,083
Таким образом, мы могли продолжать идти вечно, 

43
00:02:34,083 --> 00:02:36,832
беря каждую область с разными знаками на границе, 

44
00:02:36,832 --> 00:02:39,746
находя меньшую такую область среди ее половин, зная, 

45
00:02:39,746 --> 00:02:44,200
что в конечном итоге нам придется сузиться до точки, которая будет ровно нулевой.

46
00:02:45,760 --> 00:02:50,044
Короче говоря, решение уравнений всегда можно представить как поиск момента, 

47
00:02:50,044 --> 00:02:54,106
когда определенная функция равна нулю, и для этого у нас есть эвристика: 

48
00:02:54,106 --> 00:02:57,723
если f положительно в одной точке и отрицательно в другой точке, 

49
00:02:57,723 --> 00:03:01,396
вы можете найти что-то между ними, где это ноль, по крайней мере, 

50
00:03:01,396 --> 00:03:03,900
если все меняется плавно, без резких скачков.

51
00:03:03,900 --> 00:03:06,837
Удивительная вещь, которую я хочу вам показать, — это то, 

52
00:03:06,837 --> 00:03:10,180
что вы можете расширить этот тип мышления до двумерных уравнений, 

53
00:03:10,180 --> 00:03:14,080
уравнений между функциями, чьи входные и выходные данные являются двумерными.

54
00:03:14,739 --> 00:03:17,779
Например, комплексные числа являются двумерными, и этот инструмент, 

55
00:03:17,779 --> 00:03:21,400
который мы разрабатываем, идеально подходит для поиска решений сложных уравнений.

56
00:03:22,360 --> 00:03:25,104
Теперь, поскольку мы будем так много говорить об этих 2D-функциях, 

57
00:03:25,104 --> 00:03:28,340
давайте сделаем небольшой шаг в сторону и посмотрим, как мы их проиллюстрируем.

58
00:03:29,060 --> 00:03:33,787
Для построения графика функции с 2D-входом и 2D-выходом потребуется четыре измерения, 

59
00:03:33,787 --> 00:03:37,746
и это не будет так хорошо работать в нашем 3D-мире на наших 2D-экранах, 

60
00:03:37,746 --> 00:03:40,220
но у нас все еще есть пара хороших вариантов.

61
00:03:40,859 --> 00:03:45,440
Один из них — просто посмотреть одновременно на входное и выходное пространство.

62
00:03:45,540 --> 00:03:48,980
Каждая точка входного пространства перемещается в определенную точку 

63
00:03:48,980 --> 00:03:52,520
выходного пространства, и я могу показать, как перемещение вокруг этой 

64
00:03:52,520 --> 00:03:56,260
входной точки соответствует определенным движениям в выходном пространстве.

65
00:03:56,940 --> 00:04:00,174
Все рассматриваемые нами функции будут непрерывными в том смысле, 

66
00:04:00,174 --> 00:04:03,016
что небольшие изменения входных данных соответствуют лишь 

67
00:04:03,016 --> 00:04:06,300
небольшим изменениям выходных данных, резких скачков не происходит.

68
00:04:06,940 --> 00:04:10,031
Другой вариант, который у нас есть, — представить стрелку, 

69
00:04:10,031 --> 00:04:13,384
ведущую от начала выходного пространства к этой выходной точке, 

70
00:04:13,384 --> 00:04:16,579
и прикрепить миниатюрную версию этой стрелки к входной точке.

71
00:04:17,360 --> 00:04:21,496
Это может дать нам представление о том, куда идет данная входная точка или куда 

72
00:04:21,496 --> 00:04:25,840
идет множество различных входных точек, с помощью рисования полного векторного поля.

73
00:04:27,600 --> 00:04:31,047
И, к сожалению, когда вы делаете это во многих точках, это может сильно загромождать, 

74
00:04:31,047 --> 00:04:34,213
поэтому позвольте мне сделать все стрелки одинакового размера, и это означает, 

75
00:04:34,213 --> 00:04:37,100
что мы можем получить представление о направлении каждой выходной точки.

76
00:04:37,780 --> 00:04:41,032
Но, возможно, самый красивый способ проиллюстрировать двумерные функции, 

77
00:04:41,032 --> 00:04:43,483
который мы будем использовать чаще всего в этом видео, 

78
00:04:43,483 --> 00:04:46,380
— это связать каждую точку в этом выходном пространстве с цветом.

79
00:04:47,220 --> 00:04:51,064
Здесь мы использовали оттенки, то есть места, где цвет падает по радуге или 

80
00:04:51,064 --> 00:04:54,707
цветовому кругу, чтобы соответствовать направлению от начала координат, 

81
00:04:54,707 --> 00:04:59,260
и мы используем темноту или яркость, чтобы соответствовать расстоянию от начала координат.

82
00:04:59,260 --> 00:05:04,530
Например, если сосредоточиться на этом массиве выходных данных, все эти точки красные, 

83
00:05:04,530 --> 00:05:09,620
но те, что ближе к началу координат, немного темнее, а те, что дальше, немного ярче.

84
00:05:10,360 --> 00:05:14,217
И если сосредоточиться на этом массиве выходных данных, все точки будут зелеными, 

85
00:05:14,217 --> 00:05:17,980
и опять же, ближе к началу координат означает темнее, дальше — означает светлее.

86
00:05:18,780 --> 00:05:21,883
И так далее, все, что мы здесь делаем, это присваиваем каждому 

87
00:05:21,883 --> 00:05:24,840
направлению определенный цвет, и все это постоянно меняется.

88
00:05:25,359 --> 00:05:29,660
Вы можете заметить, что различия в темноте и яркости здесь довольно незаметны, 

89
00:05:29,660 --> 00:05:34,560
но в этом видео нас волнует только направление вывода, а не величина, оттенок или яркость.

90
00:05:35,300 --> 00:05:39,593
В отношении яркости вам следует заметить одну важную вещь: вблизи начала координат, 

91
00:05:39,593 --> 00:05:43,120
не имеющего определенного направления, все цвета тускнеют до черного.

92
00:05:44,440 --> 00:05:48,728
Итак, говоря о функциях, теперь, когда мы определились с цветом для каждого выхода, 

93
00:05:48,728 --> 00:05:53,118
мы можем визуализировать 2D-функции, раскрашивая каждую точку во входном пространстве 

94
00:05:53,118 --> 00:05:57,100
в зависимости от цвета точки, в которой она находится в выходном пространстве.

95
00:05:57,840 --> 00:06:00,854
Мне нравится представлять, как множество разных точек из этого входного 

96
00:06:00,854 --> 00:06:04,246
пространства перепрыгивают на соответствующие им выходы в выходном пространстве, 

97
00:06:04,246 --> 00:06:07,470
затем окрашиваются в зависимости от цвета точки, в которой они приземляются, 

98
00:06:07,470 --> 00:06:10,360
а затем возвращаются туда, откуда они пришли во входном пространстве.

99
00:06:11,640 --> 00:06:13,406
Делая это для каждой точки входного пространства, 

100
00:06:13,406 --> 00:06:15,419
вы можете получить представление, просто взглянув на это 

101
00:06:15,419 --> 00:06:18,140
входное пространство и примерно определив, где функция занимает каждую точку.

102
00:06:18,140 --> 00:06:21,605
Например, эта полоса розовых точек слева говорит нам, 

103
00:06:21,605 --> 00:06:25,520
что все эти точки отображаются где-то в розовом направлении, 

104
00:06:25,520 --> 00:06:28,280
в левом нижнем углу выходного пространства.

105
00:06:29,780 --> 00:06:34,011
Кроме того, те три точки, которые являются черными и окружены множеством цветов, 

106
00:06:34,011 --> 00:06:34,900
стремятся к нулю.

107
00:06:39,340 --> 00:06:45,607
Хорошо, как и в случае с 1D, решение уравнений 2D-функций всегда можно переформулировать, 

108
00:06:45,607 --> 00:06:48,880
спросив, когда определенная функция равна нулю.

109
00:06:49,580 --> 00:06:55,660
Итак, наша задача сейчас — создать алгоритм, который определяет, 

110
00:06:55,660 --> 00:07:00,900
какие входные точки данной 2D-функции обращаются в ноль.

111
00:07:00,900 --> 00:07:04,656
Вы можете отметить, что если вы смотрите на подобную карту цветов, 

112
00:07:04,656 --> 00:07:08,300
видя эти черные точки, вы уже знаете, где находятся нули функции.

113
00:07:08,620 --> 00:07:11,080
Так это считается?

114
00:07:11,080 --> 00:07:14,960
Имейте в виду, что для создания такой диаграммы мы заставили компьютер 

115
00:07:14,960 --> 00:07:18,950
вычислить функцию во всех пикселях плоскости, но наша цель — найти более 

116
00:07:18,950 --> 00:07:23,104
эффективный алгоритм, который требует вычисления функции только в как можно 

117
00:07:23,104 --> 00:07:27,860
меньшем количестве точек. , так сказать, имея лишь ограниченное представление о цветах.

118
00:07:29,360 --> 00:07:34,560
А также с более теоретической точки зрения было бы неплохо иметь общую конструкцию, 

119
00:07:34,560 --> 00:07:39,080
которая сообщала бы нам условия существования нуля внутри данной области.

120
00:07:39,080 --> 00:07:42,057
Помните, что в одном измерении основная идея заключалась в том, 

121
00:07:42,057 --> 00:07:45,826
что если непрерывная функция положительна в одной точке и отрицательна в другой, 

122
00:07:45,826 --> 00:07:47,920
где-то посередине она должна быть равна нулю.

123
00:07:48,840 --> 00:07:50,580
Так как же нам распространить это на два измерения?

124
00:07:50,940 --> 00:07:53,580
Нам нужен некий аналог разговоров о знаках.

125
00:07:54,700 --> 00:07:58,140
Один из способов подумать о том, что такое знаки, — это направления.

126
00:07:58,800 --> 00:08:01,664
Положительное значение означает, что вы указываете вправо по числовой прямой, 

127
00:08:01,664 --> 00:08:03,500
а отрицательное означает, что вы указываете влево.

128
00:08:04,200 --> 00:08:08,440
Двумерные величины тоже имеют направление, но для них варианты гораздо шире, 

129
00:08:08,440 --> 00:08:11,800
они могут указывать куда угодно по целому кругу возможностей.

130
00:08:12,530 --> 00:08:16,252
Таким образом, точно так же, как в одном измерении мы спрашивали, 

131
00:08:16,252 --> 00:08:20,820
является ли данная функция положительной или отрицательной на границе диапазона, 

132
00:08:20,820 --> 00:08:25,163
который составляет всего две точки, для 2d-функций мы собираемся смотреть на 

133
00:08:25,163 --> 00:08:29,788
границу области, которая является циклом, и спросите о направлении вывода функции 

134
00:08:29,788 --> 00:08:30,860
вдоль этой границы.

135
00:08:33,640 --> 00:08:37,359
Например, мы видим, что в этом цикле вокруг этого нуля выходные данные 

136
00:08:37,359 --> 00:08:40,973
проходят через все возможные направления, все цвета радуги: красный, 

137
00:08:40,973 --> 00:08:45,060
желтый, зеленый, синий, обратно к красному и все, что между ними на этом пути.

138
00:08:45,700 --> 00:08:50,611
Но в этом цикле, внутри которого нет нулей, выходные данные проходят не через все цвета, 

139
00:08:50,611 --> 00:08:54,640
а через некоторые оранжевые, но никогда, скажем, через зеленый или синий.

140
00:08:55,300 --> 00:08:58,460
И это многообещающе, это очень похоже на то, как все работает в одном измерении.

141
00:08:59,340 --> 00:09:04,531
Возможно, точно так же, как если 1d-функция принимает оба возможных знака на границе 

142
00:09:04,531 --> 00:09:08,806
1d-области, а где-то внутри находится ноль, мы могли бы предположить, 

143
00:09:08,806 --> 00:09:12,836
что если 2d-функция достигает выходов всех возможных направлений, 

144
00:09:12,836 --> 00:09:16,256
всех возможных цветов вдоль граница двухмерной области, 

145
00:09:16,256 --> 00:09:19,860
то где-то внутри этой области она должна стремиться к нулю.

146
00:09:20,960 --> 00:09:24,942
Итак, это наше предположение, и подумайте, должно ли это быть правдой, 

147
00:09:24,942 --> 00:09:26,120
и если да, то почему.

148
00:09:27,420 --> 00:09:30,641
Если мы начнем думать о крошечном цикле вокруг некоторой входной точки, 

149
00:09:30,641 --> 00:09:33,505
мы знаем, что, поскольку все непрерывно, наша функция переносит 

150
00:09:33,505 --> 00:09:36,280
его в какой-то крошечный цикл рядом с соответствующим выходом.

151
00:09:37,140 --> 00:09:40,520
Но посмотрите: для большинства крошечных циклов выходные данные различаются по цвету.

152
00:09:40,980 --> 00:09:43,878
Если вы выберете любую выходную точку, отличную от нуля, 

153
00:09:43,878 --> 00:09:46,267
и нарисуете рядом с ней достаточно узкий цикл, 

154
00:09:46,267 --> 00:09:49,420
все цвета цикла будут примерно того же цвета, что и эта точка.

155
00:09:49,840 --> 00:09:54,823
Тугая петля здесь вся голубоватая, а вот здесь узкая петля вся желтоватая, 

156
00:09:54,823 --> 00:09:57,680
конечно, вы не получите всех цветов радуги.

157
00:09:58,220 --> 00:10:01,940
Единственная точка, где вы можете затянуть вокруг него петли, 

158
00:10:01,940 --> 00:10:06,320
сохранив при этом все цвета, — это бесцветное начало координат, сам ноль.

159
00:10:07,100 --> 00:10:09,962
Так что это действительно тот случай, когда у вас есть петли, 

160
00:10:09,962 --> 00:10:12,824
проходящие через все цвета радуги, сжимающиеся и сжимающиеся, 

161
00:10:12,824 --> 00:10:16,380
сужающиеся в какой-то точке, тогда эта точка на самом деле должна быть нулем.

162
00:10:17,320 --> 00:10:19,964
Итак, давайте настроим решатель двумерных уравнений, 

163
00:10:19,964 --> 00:10:21,860
как наш решатель одномерных уравнений.

164
00:10:22,260 --> 00:10:26,007
Когда мы найдем большую область, граница которой проходит через каждый цвет, 

165
00:10:26,007 --> 00:10:29,900
разделим ее на две части, а затем посмотрим на цвета на границе каждой половины.

166
00:10:30,540 --> 00:10:34,756
В показанном здесь примере граница левой половины не проходит через все цвета, 

167
00:10:34,756 --> 00:10:38,600
например, нет точек, которые соответствуют оранжево-желтым направлениям.

168
00:10:39,060 --> 00:10:41,329
Поэтому я выделю эту область серым цветом, чтобы сказать, 

169
00:10:41,329 --> 00:10:42,620
что мы не хотим ее искать дальше.

170
00:10:43,380 --> 00:10:47,103
Правая половина проходит через все цвета, проводит много времени в зеленом направлении, 

171
00:10:47,103 --> 00:10:50,700
затем проходит через желтый, оранжевый, красный, а также синий, фиолетовый и розовый.

172
00:10:51,560 --> 00:10:54,565
Теперь помните, что это означает, что точки этой границы 

173
00:10:54,565 --> 00:10:57,360
сопоставляются с выходами всех возможных направлений.

174
00:10:57,840 --> 00:11:01,860
Итак, мы исследуем его дальше, снова разделив и проверив границы для каждого региона.

175
00:11:02,880 --> 00:11:06,560
Граница верха вся зеленая, поэтому на этом поиски остановимся.

176
00:11:06,860 --> 00:11:09,520
Но нижняя часть достаточно красочная, чтобы заслуживать отдельного подразделения.

177
00:11:10,340 --> 00:11:12,020
И просто продолжайте в том же духе.

178
00:11:12,360 --> 00:11:16,127
Проверьте, какая подобласть имеет границу, охватывающую все возможные цвета, 

179
00:11:16,127 --> 00:11:19,650
то есть точки этой границы отображаются во всех возможных направлениях, 

180
00:11:19,650 --> 00:11:23,907
и продолжайте разрезать эти области пополам, как мы это делали для одномерного случая, 

181
00:11:23,907 --> 00:11:27,480
что в конечном итоге приведет нас к нулю по функции. Ой, подожди секунду.

182
00:11:28,880 --> 00:11:29,920
Что здесь случилось?

183
00:11:30,380 --> 00:11:34,707
Ни одно из этих последних подразделений в правом нижнем углу не прошло через все цвета, 

184
00:11:34,707 --> 00:11:38,641
поэтому наш алгоритм остановился, потому что не хотел искать ни в одном из них, 

185
00:11:38,641 --> 00:11:39,920
но он также не нашел ноль.

186
00:11:41,060 --> 00:11:43,300
Ладно, здесь явно что-то не так.

187
00:11:43,540 --> 00:11:46,520
И это нормально, ошибаться – это обычная часть занятий математикой.

188
00:11:46,520 --> 00:11:48,980
Если оглянуться назад, у нас была эта гипотеза, 

189
00:11:48,980 --> 00:11:52,980
и она привела нас к этому предложенному алгоритму, значит, мы где-то ошиблись.

190
00:11:53,660 --> 00:11:57,255
И быть хорошим в математике – это не значит быть правым с первого раза, 

191
00:11:57,255 --> 00:12:00,951
а иметь способность внимательно оглянуться назад, понять ошибки и понять, 

192
00:12:00,951 --> 00:12:01,800
как их исправить.

193
00:12:02,480 --> 00:12:06,566
Проблема здесь в том, что у нас был регион, граница которого проходила через каждый цвет, 

194
00:12:06,566 --> 00:12:10,380
но когда мы разделили его посередине, ни одна граница субрегиона не проходила через 

195
00:12:10,380 --> 00:12:14,331
каждый цвет, у нас не было вариантов, где продолжать поиск дальше, и это сломало ноль. 

196
00:12:14,331 --> 00:12:14,740
искатель.

197
00:12:14,740 --> 00:12:17,560
В одном измерении ничего подобного никогда не происходило.

198
00:12:17,980 --> 00:12:21,988
Каждый раз, когда у вас есть интервал, конечные точки которого имеют разные знаки, 

199
00:12:21,988 --> 00:12:26,093
если вы разделите его, вы знаете, что гарантированно получите некоторый подинтервал, 

200
00:12:26,093 --> 00:12:28,460
конечные точки которого также имеют разные знаки.

201
00:12:29,020 --> 00:12:32,063
Или, другими словами, каждый раз, когда у вас есть два интервала, 

202
00:12:32,063 --> 00:12:34,921
конечные точки которых не меняют знак, если вы объедините их, 

203
00:12:34,921 --> 00:12:38,380
вы получите больший интервал, конечные точки которого также не меняют знак.

204
00:12:39,080 --> 00:12:42,456
Но в двух измерениях можно найти две области, границы которых 

205
00:12:42,456 --> 00:12:46,867
не проходят через все цвета, но границы которых в совокупности образуют область, 

206
00:12:46,867 --> 00:12:49,100
граница которой проходит через все цвета.

207
00:12:49,840 --> 00:12:53,500
Именно таким образом предложенный нами алгоритм поиска нуля сломался.

208
00:12:54,380 --> 00:12:58,160
Фактически, если вы подумаете об этом, вы можете найти большой цикл, 

209
00:12:58,160 --> 00:13:02,380
граница которого проходит через все возможные цвета, но внутри него нет нуля.

210
00:13:03,080 --> 00:13:07,127
Это не означает, что мы были неправы в наших утверждениях о крошечных петлях, 

211
00:13:07,127 --> 00:13:10,966
когда говорили, что вечно сужающаяся петля, проходящая через каждый цвет, 

212
00:13:10,966 --> 00:13:12,160
должна сужаться к нулю.

213
00:13:12,800 --> 00:13:17,361
Но что нас запутало, так это то, что свойство «проходит ли моя граница через каждый 

214
00:13:17,361 --> 00:13:22,140
цвет или нет» не объединяется приятным и предсказуемым образом при объединении регионов.

215
00:13:23,000 --> 00:13:26,763
Но не волнуйтесь, оказывается, мы можем немного изменить это свойство, 

216
00:13:26,763 --> 00:13:30,740
сделав его более сложным, которое в совокупности даст нам то, что мы хотим.

217
00:13:38,180 --> 00:13:41,121
Идея состоит в том, что вместо того, чтобы просто спрашивать, 

218
00:13:41,121 --> 00:13:45,155
можем ли мы найти цвет в какой-то момент цикла, давайте более внимательно проследим, 

219
00:13:45,155 --> 00:13:47,860
как эти цвета меняются по мере нашего обхода этого цикла.

220
00:13:48,580 --> 00:13:49,960
Позвольте мне показать вам, что я имею в виду, на примере.

221
00:13:50,400 --> 00:13:53,260
Я поставлю здесь, в углу, небольшой цветовой круг, чтобы мы могли отслеживать его.

222
00:13:53,940 --> 00:13:58,028
Когда цвета на пути входных данных движутся по радуге в определенном направлении: 

223
00:13:58,028 --> 00:14:01,718
от красного к желтому, от желтого к зеленому, от зеленого к синему или от 

224
00:14:01,718 --> 00:14:04,960
синего к красному, выходные данные колеблются по часовой стрелке.

225
00:14:05,700 --> 00:14:09,287
Но с другой стороны, если цвета движутся по радуге в обратном направлении: 

226
00:14:09,287 --> 00:14:12,827
от синего к зеленому, от зеленого к желтому, от желтого к красному или от 

227
00:14:12,827 --> 00:14:16,320
красного к синему, выходной сигнал будет меняться против часовой стрелки.

228
00:14:17,160 --> 00:14:21,827
Итак, идя по этому короткому пути здесь, цвета проходят пятую часть 

229
00:14:21,827 --> 00:14:26,495
пути по часовой стрелке цветового круга, а идя по этому пути здесь, 

230
00:14:26,495 --> 00:14:31,300
цвета проходят еще одну пятую пути по часовой стрелке цветового круга.

231
00:14:31,300 --> 00:14:34,808
Конечно, это означает, что если вы пройдете по обоим путям, один за другим, 

232
00:14:34,808 --> 00:14:38,640
цвета повернутся в общей сложности на две пятых полного оборота по часовой стрелке.

233
00:14:39,280 --> 00:14:43,773
Общее количество намоток просто складывается, и это будет ключевым моментом, 

234
00:14:43,773 --> 00:14:47,100
это тот тип простого объединения, который нам пригодится.

235
00:14:47,100 --> 00:14:49,563
Когда я говорю об общем количестве намоток, я хочу, 

236
00:14:49,563 --> 00:14:53,163
чтобы вы представили старомодный одометр, который отсчитывает время вперед, 

237
00:14:53,163 --> 00:14:55,673
когда стрелка вращается по часовой стрелке, и назад, 

238
00:14:55,673 --> 00:14:57,900
когда стрелка вращается против часовой стрелки.

239
00:14:58,740 --> 00:15:00,486
Таким образом, обмотка против часовой стрелки 

240
00:15:00,486 --> 00:15:02,460
считается отрицательной обмоткой по часовой стрелке.

241
00:15:03,000 --> 00:15:05,692
Выходы могут сильно поворачиваться, но если часть этого поворота 

242
00:15:05,692 --> 00:15:08,260
происходит в противоположном направлении, это сводится на нет.

243
00:15:08,920 --> 00:15:11,587
Например, если вы двигаетесь вперед по этому пути, 

244
00:15:11,587 --> 00:15:16,137
а затем двигаетесь назад по тому же пути, общая сумма намоток оказывается равной нулю, 

245
00:15:16,137 --> 00:15:19,954
движение назад буквально перематывает назад через ранее увиденные цвета, 

246
00:15:19,954 --> 00:15:24,400
обращая все предыдущие намотки на противоположное и возвращая одометр вернулся туда, 

247
00:15:24,400 --> 00:15:25,080
где он начал.

248
00:15:26,280 --> 00:15:29,900
Для наших целей нас больше всего будет интересовать намотка по петлям.

249
00:15:30,440 --> 00:15:34,780
Например, предположим, что мы обходим весь этот цикл по часовой стрелке.

250
00:15:34,780 --> 00:15:38,353
Выходные данные, с которыми мы сталкиваемся, совершают в общей 

251
00:15:38,353 --> 00:15:41,132
сложности три полных оборота по часовой стрелке, 

252
00:15:41,132 --> 00:15:46,180
цвета менялись по радуге по порядку: снова от красного к красному, а затем снова и снова.

253
00:15:46,920 --> 00:15:54,020
На жаргоне математиков мы говорим, что общее число витков на этом контуре равно 3.

254
00:15:54,020 --> 00:15:57,766
Для других циклов это может быть любое другое целое число, возможно, большее, 

255
00:15:57,766 --> 00:16:01,705
если выходной сигнал меняется много раз, когда входные данные проходят один цикл, 

256
00:16:01,705 --> 00:16:05,980
или это может быть меньшее число, если выходной сигнал меняется только один или два раза.

257
00:16:06,320 --> 00:16:09,325
Или это число витков может быть даже отрицательным целым числом, 

258
00:16:09,325 --> 00:16:12,192
если выходной сигнал будет колебаться против часовой стрелки, 

259
00:16:12,192 --> 00:16:14,320
когда мы идем по часовой стрелке вокруг цикла.

260
00:16:15,180 --> 00:16:18,860
Но на любом контуре общее количество намоток должно быть целым числом.

261
00:16:20,880 --> 00:16:22,875
Я имею в виду, что к тому времени, когда вы вернетесь к тому, 

262
00:16:22,875 --> 00:16:25,000
с чего начали, у вас будет тот же результат, с которого вы начали.

263
00:16:26,180 --> 00:16:28,955
Между прочим, если путь действительно содержит точку, 

264
00:16:28,955 --> 00:16:32,862
в которой выходной сигнал равен нулю, то технически вы не можете определить 

265
00:16:32,862 --> 00:16:36,923
номер витка вдоль этой точки, поскольку выходной сигнал не имеет определенного 

266
00:16:36,923 --> 00:16:37,540
направления.

267
00:16:37,540 --> 00:16:41,404
Для нас это не будет проблемой, потому что вся наша цель — найти нули, 

268
00:16:41,404 --> 00:16:45,160
поэтому, если это когда-нибудь произойдет, нам просто повезло раньше.

269
00:16:45,160 --> 00:16:47,725
Главное, что следует отметить в этих извилистых числах, — это то, 

270
00:16:47,725 --> 00:16:50,680
что они хорошо складываются, когда вы объединяете пути в более крупные пути.

271
00:16:54,800 --> 00:16:58,620
Но чего мы действительно хотим, так это того, чтобы извилистые числа вдоль границ 

272
00:16:58,620 --> 00:17:02,440
регионов хорошо складывались, когда мы объединяем регионы в более крупные регионы.

273
00:17:02,980 --> 00:17:04,520
Так есть ли у нас эта собственность?

274
00:17:07,760 --> 00:17:09,060
Ну, взгляните.

275
00:17:09,540 --> 00:17:13,720
Число витков, когда мы идем по часовой стрелке вокруг этой области слева, 

276
00:17:13,720 --> 00:17:16,940
представляет собой сумму чисел витков этих четырех путей.

277
00:17:17,500 --> 00:17:21,281
И виток, когда мы идем по часовой стрелке вокруг этой области справа, 

278
00:17:21,281 --> 00:17:24,359
представляет собой сумму чисел витков этих четырех путей.

279
00:17:25,339 --> 00:17:28,302
И когда мы объединяем эти два региона в один более крупный, 

280
00:17:28,302 --> 00:17:32,500
большинство этих путей становятся частью границы большего региона по часовой стрелке.

281
00:17:33,260 --> 00:17:35,800
А что касается тех двух путей, которые этого не делают?

282
00:17:36,020 --> 00:17:40,664
Они прекрасно компенсируются, один из них представляет собой обратную перемотку другого, 

283
00:17:40,664 --> 00:17:41,760
как мы видели раньше.

284
00:17:42,560 --> 00:17:47,145
Таким образом, извилистые числа вдоль границ регионов складываются именно так, 

285
00:17:47,145 --> 00:17:47,900
как мы хотим.

286
00:17:48,640 --> 00:17:52,632
Также отметим, что рассуждения о таком удачном сложении ориентированных 

287
00:17:52,632 --> 00:17:56,680
границ часто встречаются в математике и часто называются теоремой Стокса.

288
00:17:57,060 --> 00:17:59,436
Те из вас, кто изучал исчисление с несколькими переменными, 

289
00:17:59,436 --> 00:18:01,020
возможно, узнают это по этому контексту.

290
00:18:02,360 --> 00:18:04,972
Итак, теперь, наконец, имея в руках намоточные числа, 

291
00:18:04,972 --> 00:18:07,440
мы можем вернуться к нашим целям решения уравнений.

292
00:18:08,000 --> 00:18:11,348
Проблема с областью, которую мы видели ранее, заключается в том, что, 

293
00:18:11,348 --> 00:18:13,883
хотя ее граница проходила через все возможные цвета, 

294
00:18:13,883 --> 00:18:15,940
число витков на самом деле было равно нулю.

295
00:18:16,500 --> 00:18:19,673
Выходы прошли примерно половину пути, от желтого к красному, 

296
00:18:19,673 --> 00:18:23,315
а затем начали двигаться против часовой стрелки в другом направлении, 

297
00:18:23,315 --> 00:18:27,426
затем продолжили проходить через синий и попадать на красный с другой стороны, 

298
00:18:27,426 --> 00:18:30,860
и все это таким образом, что общая сумма обмотки стала равна нулю.

299
00:18:31,840 --> 00:18:35,602
Но если вы найдете цикл, который не только соответствует каждому цвету, 

300
00:18:35,602 --> 00:18:38,999
но и имеет более строгое условие ненулевого числа витков, тогда, 

301
00:18:38,999 --> 00:18:42,082
если вы разделите его пополам, вы гарантированно получите, 

302
00:18:42,082 --> 00:18:45,688
что хотя бы одна из этих половин имеет также ненулевое число витков, 

303
00:18:45,688 --> 00:18:48,040
поскольку все складывается так, как мы хотим.

304
00:18:48,440 --> 00:18:53,500
Таким образом, вы можете продолжать идти, все дальше и дальше сужаяся до одной точки.

305
00:18:54,050 --> 00:18:57,695
И когда вы сужаетесь до точки, вы будете делать это с помощью крошечных петель, 

306
00:18:57,695 --> 00:19:00,111
которые имеют ненулевые номера витков, что означает, 

307
00:19:00,111 --> 00:19:02,890
что они проходят через все возможные цвета и, следовательно, 

308
00:19:02,890 --> 00:19:06,400
как я уже говорил ранее, точку, в которой они сужаются. on должен быть нулем.

309
00:19:07,420 --> 00:19:08,360
Вот и все!

310
00:19:08,600 --> 00:19:11,654
Мы создали программу для решения двумерных уравнений, 

311
00:19:11,654 --> 00:19:13,860
и на этот раз, обещаю, ошибок не будет.

312
00:19:14,560 --> 00:19:17,540
Числа намотки — это именно тот инструмент, который нам нужен для этой работы.

313
00:19:18,100 --> 00:19:21,377
Теперь мы можем решать уравнения, которые выглядят так: 

314
00:19:21,377 --> 00:19:24,888
где f от x равно g от x в двух измерениях, просто учитывая, 

315
00:19:24,888 --> 00:19:26,820
как меняется разница между f и g.

316
00:19:27,600 --> 00:19:30,933
Всякий раз, когда у нас есть цикл, число витков которого не равно нулю, 

317
00:19:30,933 --> 00:19:35,100
мы можем запустить на нем этот алгоритм и гарантированно найти решение где-то внутри него.

318
00:19:35,660 --> 00:19:39,840
И более того, как и в одном измерении, этот алгоритм невероятно эффективен.

319
00:19:40,240 --> 00:19:44,468
Мы продолжаем сужать половину размера нашей области каждый раунд, 

320
00:19:44,468 --> 00:19:49,210
тем самым быстро сужая нули, и все это время нам нужно проверять значение 

321
00:19:49,210 --> 00:19:54,400
функции только в точках этих циклов, а не проверять ее на многих точки интерьера.

322
00:19:55,160 --> 00:19:59,507
Таким образом, в некотором смысле общая проделанная работа пропорциональна 

323
00:19:59,507 --> 00:20:03,740
только периметру пространства поиска, а не всей площади, что удивительно.

324
00:20:04,920 --> 00:20:08,561
Теперь, когда вы понимаете, что происходит, становится странно завораживать, 

325
00:20:08,561 --> 00:20:12,723
просто наблюдая за этим в действии, придавая ему какую-то функцию и позволяя ему искать 

326
00:20:12,723 --> 00:20:12,960
нули.

327
00:20:13,620 --> 00:20:16,079
Как я уже говорил ранее, комплексные числа двумерны, 

328
00:20:16,079 --> 00:20:19,560
поэтому давайте применим это к некоторому уравнению с комплексными числами.

329
00:20:20,300 --> 00:20:24,268
Например, вот алгоритм поиска нулей функции x с точностью 

330
00:20:24,268 --> 00:20:28,100
до пятой минус x минус единица на комплексной плоскости.

331
00:20:28,900 --> 00:20:32,248
Все началось с рассмотрения очень большой области вокруг начала координат, 

332
00:20:32,248 --> 00:20:34,480
число витков которой в конечном итоге составило 5.

333
00:20:35,280 --> 00:20:38,594
Каждый раз, когда вы находите петлю с ненулевым числом витков, 

334
00:20:38,594 --> 00:20:42,120
вы делите ее пополам и вычисляете число витков двух меньших петель.

335
00:20:42,700 --> 00:20:45,866
Любой из них или оба гарантированно имеют ненулевое число витков, 

336
00:20:45,866 --> 00:20:49,897
и когда вы видите это, вы знаете, что где-то внутри этого меньшего цикла есть ноль, 

337
00:20:49,897 --> 00:20:53,400
поэтому вы продолжаете идти тем же путем, обыскивая меньшее пространство.

338
00:20:54,180 --> 00:20:58,050
Мы также прекращаем исследование региона, если путь, по которому мы вычисляем, 

339
00:20:58,050 --> 00:21:02,459
случайно натыкается на ноль, что действительно произошло один раз в этом примере в правой 

340
00:21:02,459 --> 00:21:02,900
половине.

341
00:21:03,280 --> 00:21:08,140
Эти редкие случаи мешают нам вычислять числа оборотов, но, эй, мы получили ноль.

342
00:21:09,220 --> 00:21:12,920
А что касается петель, число витков которых равно нулю, вы их просто не изучаете дальше.

343
00:21:12,920 --> 00:21:16,200
Может быть, у них есть решение внутри, а может быть, и нет, у нас нет никаких гарантий.

344
00:21:18,400 --> 00:21:21,230
И если позволить нашему решателю уравнений продолжать в том же духе, 

345
00:21:21,230 --> 00:21:24,020
он в конечном итоге сходится к множеству нулей для этого многочлена.

346
00:21:25,840 --> 00:21:31,000
Кстати, не случайно общее количество витков в этом примере оказалось равным 5.

347
00:21:31,580 --> 00:21:37,005
Для комплексных чисел операция x по n напрямую соответствует обходу начала координат 

348
00:21:37,005 --> 00:21:42,240
выходных данных n раз, когда вы один раз обходите начало координат входных данных.

349
00:21:44,680 --> 00:21:48,908
Таким образом, в случае полинома для достаточно больших входных данных каждый член, 

350
00:21:48,908 --> 00:21:51,980
кроме ведущего, становится незначительным по сравнению с ним.

351
00:21:52,480 --> 00:21:56,838
Таким образом, любой комплексный многочлен, главный член которого равен x до n, 

352
00:21:56,838 --> 00:21:59,780
имеет число витков n вокруг достаточно большого цикла.

353
00:22:00,540 --> 00:22:04,437
Таким образом, наша технология намоточных чисел фактически гарантирует, 

354
00:22:04,437 --> 00:22:06,820
что каждый комплексный многочлен имеет ноль.

355
00:22:07,480 --> 00:22:12,000
Это настолько важный факт, что математики называют его фундаментальной теоремой алгебры.

356
00:22:13,800 --> 00:22:18,592
Наличие алгоритма для поиска численных решений подобных уравнений чрезвычайно практично, 

357
00:22:18,592 --> 00:22:22,200
но фундаментальная теорема алгебры является хорошим примером того, 

358
00:22:22,200 --> 00:22:25,808
как эти числа витков также весьма полезны на теоретическом уровне, 

359
00:22:25,808 --> 00:22:29,255
гарантируя существование решения для широкого класса уравнений. 

360
00:22:29,255 --> 00:22:33,940
уравнения для подходящих условий, о которых математикам гораздо больше нравится думать.

361
00:22:33,940 --> 00:22:38,891
Я покажу вам еще пару удивительных применений этого в контексте топологии в следующем 

362
00:22:38,891 --> 00:22:43,440
видео, которое включает в себя исправление ошибки из старого видео 3blue1brown.

363
00:22:44,060 --> 00:22:44,440
Который из?

364
00:22:44,940 --> 00:22:47,373
Что ж, посмотрите все видео, все, что есть на этом канале, 

365
00:22:47,373 --> 00:22:49,600
и посмотрите, сможете ли вы сначала обнаружить ошибку.

366
00:22:51,300 --> 00:23:00,196
Основным автором этого видео является один из 

367
00:23:00,196 --> 00:23:10,060
новых участников команды 3blue1brown Шридхар Рамеш.

