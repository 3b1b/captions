1
00:00:00,000 --> 00:00:06,720
Здесь есть две вещи: основная тема и метатема.

2
00:00:06,720 --> 00:00:10,440
Основной темой будет этот действительно изящный алгоритм решения двумерных уравнений,

3
00:00:10,440 --> 00:00:14,900
уравнений, в которых есть два неизвестных действительных числа, а

4
00:00:14,900 --> 00:00:17,420
также уравнений, включающих одно неизвестное, которое является комплексным числом.

5
00:00:17,420 --> 00:00:21,840
Так, например, если вы хотите найти комплексные корни многочлена

6
00:00:21,840 --> 00:00:25,960
или, может быть, некоторые из тех нулей на миллион

7
00:00:25,960 --> 00:00:26,960
долларов дзета-функции Римана, этот алгоритм сделает это за вас.

8
00:00:27,000 --> 00:00:30,520
И этот метод очень красивый, так как задействовано много цветов.

9
00:00:30,520 --> 00:00:34,960
И что еще более важно, основная идея применима ко всем

10
00:00:34,960 --> 00:00:39,600
видам математики, выходящим далеко за рамки этого алгоритма решения

11
00:00:39,600 --> 00:00:40,600
уравнений, включая некоторую топологию, о которой я расскажу позже.

12
00:00:40,600 --> 00:00:44,880
Но что действительно делает эти 20 минут вашего времени полезными, так это

13
00:00:44,880 --> 00:00:50,000
то, что они иллюстрируют урок, гораздо более полезный в математике, который

14
00:00:50,000 --> 00:00:52,120
заключается в попытке определить конструкции, которые хорошо сочетаются друг с другом.

15
00:00:52,120 --> 00:00:55,460
По ходу истории вы поймете, что я имею в виду.

16
00:00:55,460 --> 00:00:59,460
Чтобы мотивировать случай с функциями, которые имеют 2d входные и 2d выходные данные, давайте начнем

17
00:00:59,460 --> 00:01:05,100
с более простого, с функций, которые просто принимают действительное число и выдают действительное число.

18
00:01:05,100 --> 00:01:10,060
Если вы хотите знать, когда функция f от x равна некоторой другой функции g от

19
00:01:10,060 --> 00:01:14,260
x, вы можете думать об этом как о поиске момента пересечения графиков этих функций, верно?

20
00:01:14,260 --> 00:01:19,340
Я имею в виду, что это дает вам ввод, где обе функции имеют одинаковый вывод.

21
00:01:19,340 --> 00:01:24,520
Если взять очень простой пример, представьте, что f от x — это

22
00:01:24,520 --> 00:01:25,520
x в квадрате, а g от x — это постоянная функция 2.

23
00:01:25,520 --> 00:01:29,620
Другими словами, вы хотите найти квадратный корень из 2.

24
00:01:29,620 --> 00:01:33,620
Даже если вы почти ничего не знаете о поиске квадратных корней, вы, вероятно,

25
00:01:33,620 --> 00:01:39,260
увидите, что 1 в квадрате меньше 2, а 2 в квадрате больше 2,

26
00:01:39,260 --> 00:01:42,640
поэтому вы понимаете, что между этими двумя значениями должно быть какое-то решение.

27
00:01:42,640 --> 00:01:46,740
А затем, если вы хотите еще больше сузить его, возможно, вы попытаетесь

28
00:01:46,740 --> 00:01:47,740
возвести в квадрат среднюю точку, 1. 5.

29
00:01:47,740 --> 00:01:53,060
Получается 2. 25, немного слишком много, поэтому вам следует сосредоточиться на

30
00:01:53,060 --> 00:01:54,940
области между 1 и 1. 5.

31
00:01:54,940 --> 00:01:58,560
И так далее, вы, вероятно, можете представить, как это будет продолжаться: вы

32
00:01:58,560 --> 00:02:05,540
продолжите вычисления в средней точке, а затем сократите пространство поиска пополам.

33
00:02:05,540 --> 00:02:08,340
Другой способ подумать об этом, который облегчит нам задачу, когда мы перейдем

34
00:02:08,340 --> 00:02:13,560
к более высоким измерениям, — это вместо этого сосредоточиться на эквивалентном

35
00:02:13,560 --> 00:02:16,300
вопросе о том, когда разница между этими двумя функциями равна нулю.

36
00:02:16,380 --> 00:02:20,700
Таким образом, мы нашли область входных данных, где эта разница

37
00:02:20,700 --> 00:02:24,020
была отрицательной на одном конце и положительной на другом конце.

38
00:02:24,020 --> 00:02:28,660
Мы разделили его на две части, и та половина, на которой мы

39
00:02:28,660 --> 00:02:31,600
сузили свое внимание, была той, где самые крайние точки имели разные знаки.

40
00:02:31,600 --> 00:02:36,020
Таким образом, мы могли продолжать идти вечно, беря каждую область с разными

41
00:02:36,020 --> 00:02:41,320
знаками на границе, находя меньшую такую область среди ее половин, зная, что

42
00:02:41,320 --> 00:02:46,260
в конечном итоге нам придется сузиться до точки, которая будет ровно нулевой.

43
00:02:46,260 --> 00:02:50,480
Короче говоря, решение уравнений всегда можно представить как поиск момента, когда определенная функция

44
00:02:50,480 --> 00:02:55,780
равна нулю, и для этого у нас есть эвристика: если f положительно в

45
00:02:55,780 --> 00:03:00,420
одной точке и отрицательно в другой точке, вы можете найти что-то между ними,

46
00:03:00,420 --> 00:03:03,980
где это ноль, по крайней мере, если все меняется плавно, без резких скачков.

47
00:03:03,980 --> 00:03:08,060
Удивительная вещь, которую я хочу вам показать, — это то,

48
00:03:08,060 --> 00:03:13,220
что вы можете расширить этот тип мышления до двумерных уравнений,

49
00:03:13,220 --> 00:03:14,940
уравнений между функциями, чьи входные и выходные данные являются двумерными.

50
00:03:14,940 --> 00:03:19,540
Например, комплексные числа являются двумерными, и этот инструмент, который

51
00:03:19,540 --> 00:03:21,780
мы разрабатываем, идеально подходит для поиска решений сложных уравнений.

52
00:03:21,780 --> 00:03:25,700
Теперь, поскольку мы будем так много говорить об этих 2D-функциях, давайте

53
00:03:25,700 --> 00:03:29,380
сделаем небольшой шаг в сторону и посмотрим, как мы их проиллюстрируем.

54
00:03:29,380 --> 00:03:34,700
Для построения графика функции с 2D-входом и 2D-выходом потребуется четыре измерения,

55
00:03:34,700 --> 00:03:39,220
и это не будет так хорошо работать в нашем 3D-мире на

56
00:03:39,220 --> 00:03:41,140
наших 2D-экранах, но у нас все еще есть пара хороших вариантов.

57
00:03:41,140 --> 00:03:46,020
Один из них — просто посмотреть одновременно на входное и выходное пространство.

58
00:03:46,020 --> 00:03:51,540
Каждая точка входного пространства перемещается в определенную точку выходного пространства, и я могу

59
00:03:51,540 --> 00:03:57,060
показать, как перемещение вокруг этой входной точки соответствует определенным движениям в выходном пространстве.

60
00:03:57,060 --> 00:04:01,460
Все рассматриваемые нами функции будут непрерывными в том

61
00:04:01,460 --> 00:04:05,820
смысле, что небольшие изменения входных данных соответствуют лишь

62
00:04:05,820 --> 00:04:07,460
небольшим изменениям выходных данных, резких скачков не происходит.

63
00:04:07,460 --> 00:04:12,020
Другой вариант, который у нас есть, — представить стрелку, ведущую от начала выходного пространства

64
00:04:12,020 --> 00:04:17,380
к этой выходной точке, и прикрепить миниатюрную версию этой стрелки к входной точке.

65
00:04:17,380 --> 00:04:22,340
Это может дать нам представление о том, куда идет данная входная точка или

66
00:04:22,340 --> 00:04:27,580
куда идет множество различных входных точек, с помощью рисования полного векторного поля.

67
00:04:27,580 --> 00:04:30,740
И, к сожалению, когда вы делаете это во многих точках, это может

68
00:04:30,740 --> 00:04:34,340
сильно загромождать, поэтому позвольте мне сделать все стрелки одинакового размера, и это

69
00:04:34,340 --> 00:04:37,900
означает, что мы можем получить представление о направлении каждой выходной точки.

70
00:04:37,900 --> 00:04:41,660
Но, возможно, самый красивый способ проиллюстрировать двумерные функции, который мы будем использовать чаще всего

71
00:04:41,660 --> 00:04:47,400
в этом видео, — это связать каждую точку в этом выходном пространстве с цветом.

72
00:04:47,400 --> 00:04:52,180
Здесь мы использовали оттенки, то есть места, где цвет падает по

73
00:04:52,180 --> 00:04:57,020
радуге или цветовому кругу, чтобы соответствовать направлению от начала координат, и

74
00:04:57,020 --> 00:05:00,060
мы используем темноту или яркость, чтобы соответствовать расстоянию от начала координат.

75
00:05:00,060 --> 00:05:05,720
Например, если сосредоточиться на этом массиве выходных данных, все эти точки красные, но те,

76
00:05:05,720 --> 00:05:10,340
что ближе к началу координат, немного темнее, а те, что дальше, немного ярче.

77
00:05:10,340 --> 00:05:15,360
И если сосредоточиться на этом массиве выходных данных, все точки будут зелеными, и

78
00:05:15,360 --> 00:05:18,980
опять же, ближе к началу координат означает темнее, дальше — означает светлее.

79
00:05:18,980 --> 00:05:24,300
И так далее, все, что мы здесь делаем, это присваиваем

80
00:05:24,300 --> 00:05:25,300
каждому направлению определенный цвет, и все это постоянно меняется.

81
00:05:25,300 --> 00:05:29,100
Вы можете заметить, что различия в темноте и яркости

82
00:05:29,140 --> 00:05:33,940
здесь довольно незаметны, но в этом видео нас волнует

83
00:05:33,940 --> 00:05:35,300
только направление вывода, а не величина, оттенок или яркость.

84
00:05:35,300 --> 00:05:39,160
В отношении яркости вам следует заметить одну важную вещь: вблизи начала

85
00:05:39,160 --> 00:05:44,440
координат, не имеющего определенного направления, все цвета тускнеют до черного.

86
00:05:44,440 --> 00:05:48,820
Итак, говоря о функциях, теперь, когда мы определились с цветом для каждого

87
00:05:48,820 --> 00:05:54,020
выхода, мы можем визуализировать 2D-функции, раскрашивая каждую точку во входном пространстве в

88
00:05:54,020 --> 00:05:57,860
зависимости от цвета точки, в которой она находится в выходном пространстве.

89
00:05:57,860 --> 00:06:02,340
Мне нравится представлять, как множество разных точек из этого входного пространства перепрыгивают на соответствующие

90
00:06:02,340 --> 00:06:06,340
им выходы в выходном пространстве, затем окрашиваются в зависимости от цвета точки, в

91
00:06:06,340 --> 00:06:11,820
которой они приземляются, а затем возвращаются туда, откуда они пришли во входном пространстве.

92
00:06:11,820 --> 00:06:15,700
Делая это для каждой точки входного пространства, вы можете получить представление, просто взглянув

93
00:06:15,700 --> 00:06:19,140
на это входное пространство и примерно определив, где функция занимает каждую точку.

94
00:06:19,140 --> 00:06:23,880
Например, эта полоса розовых точек слева говорит нам, что все эти точки

95
00:06:23,920 --> 00:06:30,000
отображаются где-то в розовом направлении, в левом нижнем углу выходного пространства.

96
00:06:30,000 --> 00:06:34,120
Кроме того, те три точки, которые являются черными

97
00:06:34,120 --> 00:06:37,120
и окружены множеством цветов, стремятся к нулю.

98
00:06:37,120 --> 00:06:46,120
Хорошо, как и в случае с 1D, решение уравнений 2D-функций

99
00:06:46,120 --> 00:06:49,780
всегда можно переформулировать, спросив, когда определенная функция равна нулю.

100
00:06:49,780 --> 00:06:54,820
Итак, наша задача сейчас — создать алгоритм, который определяет,

101
00:06:54,820 --> 00:07:00,900
какие входные точки данной 2D-функции обращаются в ноль.

102
00:07:00,900 --> 00:07:04,560
Вы можете отметить, что если вы смотрите на подобную карту цветов,

103
00:07:04,560 --> 00:07:08,700
видя эти черные точки, вы уже знаете, где находятся нули функции.

104
00:07:08,700 --> 00:07:11,460
Так это считается?

105
00:07:11,460 --> 00:07:15,100
Имейте в виду, что для создания такой диаграммы мы заставили компьютер вычислить

106
00:07:15,100 --> 00:07:21,020
функцию во всех пикселях плоскости, но наша цель — найти более

107
00:07:21,020 --> 00:07:25,380
эффективный алгоритм, который требует вычисления функции только в как можно меньшем

108
00:07:25,380 --> 00:07:29,600
количестве точек. , так сказать, имея лишь ограниченное представление о цветах.

109
00:07:29,600 --> 00:07:33,940
А также с более теоретической точки зрения было бы неплохо иметь общую

110
00:07:33,940 --> 00:07:38,300
конструкцию, которая сообщала бы нам условия существования нуля внутри данной области.

111
00:07:38,300 --> 00:07:43,700
Помните, что в одном измерении основная идея заключалась в том, что если непрерывная функция положительна

112
00:07:43,700 --> 00:07:48,920
в одной точке и отрицательна в другой, где-то посередине она должна быть равна нулю.

113
00:07:48,920 --> 00:07:50,960
Так как же нам распространить это на два измерения?

114
00:07:50,960 --> 00:07:55,180
Нам нужен некий аналог разговоров о знаках.

115
00:07:55,180 --> 00:07:59,140
Один из способов подумать о том, что такое знаки, — это направления.

116
00:07:59,140 --> 00:08:02,620
Положительное значение означает, что вы указываете вправо по числовой

117
00:08:02,620 --> 00:08:04,240
прямой, а отрицательное означает, что вы указываете влево.

118
00:08:04,240 --> 00:08:08,800
Двумерные величины тоже имеют направление, но для них варианты гораздо

119
00:08:08,800 --> 00:08:12,780
шире, они могут указывать куда угодно по целому кругу возможностей.

120
00:08:12,780 --> 00:08:16,860
Таким образом, точно так же, как в одном измерении мы спрашивали, является

121
00:08:16,860 --> 00:08:22,860
ли данная функция положительной или отрицательной на границе диапазона, который составляет

122
00:08:22,860 --> 00:08:28,200
всего две точки, для 2d-функций мы собираемся смотреть на границу области, которая

123
00:08:28,200 --> 00:08:33,760
является циклом, и спросите о направлении вывода функции вдоль этой границы.

124
00:08:33,760 --> 00:08:39,220
Например, мы видим, что в этом цикле вокруг этого нуля выходные данные

125
00:08:39,220 --> 00:08:43,460
проходят через все возможные направления, все цвета радуги: красный, желтый, зеленый, синий,

126
00:08:43,460 --> 00:08:45,820
обратно к красному и все, что между ними на этом пути.

127
00:08:45,820 --> 00:08:50,640
Но в этом цикле, внутри которого нет нулей, выходные данные проходят не через

128
00:08:50,640 --> 00:08:55,420
все цвета, а через некоторые оранжевые, но никогда, скажем, через зеленый или синий.

129
00:08:55,420 --> 00:08:59,320
И это многообещающе, это очень похоже на то, как все работает в одном измерении.

130
00:08:59,320 --> 00:09:03,540
Возможно, точно так же, как если 1d-функция принимает оба возможных знака на

131
00:09:03,540 --> 00:09:09,700
границе 1d-области, а где-то внутри находится ноль, мы могли бы предположить, что

132
00:09:09,700 --> 00:09:15,140
если 2d-функция достигает выходов всех возможных направлений, всех возможных цветов вдоль граница

133
00:09:15,140 --> 00:09:20,980
двухмерной области, то где-то внутри этой области она должна стремиться к нулю.

134
00:09:20,980 --> 00:09:25,100
Итак, это наше предположение, и подумайте, должно ли

135
00:09:25,100 --> 00:09:27,660
это быть правдой, и если да, то почему.

136
00:09:27,660 --> 00:09:32,020
Если мы начнем думать о крошечном цикле вокруг некоторой входной точки, мы знаем, что, поскольку

137
00:09:32,020 --> 00:09:36,660
все непрерывно, наша функция переносит его в какой-то крошечный цикл рядом с соответствующим выходом.

138
00:09:36,660 --> 00:09:41,140
Но посмотрите: для большинства крошечных циклов выходные данные различаются по цвету.

139
00:09:41,140 --> 00:09:46,300
Если вы выберете любую выходную точку, отличную от нуля, и нарисуете рядом с ней достаточно

140
00:09:46,300 --> 00:09:49,860
узкий цикл, все цвета цикла будут примерно того же цвета, что и эта точка.

141
00:09:49,860 --> 00:09:55,980
Тугая петля здесь вся голубоватая, а вот здесь узкая петля

142
00:09:55,980 --> 00:09:58,440
вся желтоватая, конечно, вы не получите всех цветов радуги.

143
00:09:58,440 --> 00:10:03,580
Единственная точка, где вы можете затянуть вокруг него петли, сохранив при

144
00:10:03,580 --> 00:10:07,120
этом все цвета, — это бесцветное начало координат, сам ноль.

145
00:10:07,120 --> 00:10:11,680
Так что это действительно тот случай, когда у вас есть петли,

146
00:10:11,680 --> 00:10:15,960
проходящие через все цвета радуги, сжимающиеся и сжимающиеся, сужающиеся в какой-то

147
00:10:15,960 --> 00:10:17,360
точке, тогда эта точка на самом деле должна быть нулем.

148
00:10:17,360 --> 00:10:22,360
Итак, давайте настроим решатель двумерных уравнений, как наш решатель одномерных уравнений.

149
00:10:22,360 --> 00:10:27,200
Когда мы найдем большую область, граница которой проходит через каждый цвет, разделим ее

150
00:10:27,200 --> 00:10:30,640
на две части, а затем посмотрим на цвета на границе каждой половины.

151
00:10:30,640 --> 00:10:34,920
В показанном здесь примере граница левой половины не проходит через

152
00:10:34,920 --> 00:10:39,080
все цвета, например, нет точек, которые соответствуют оранжево-желтым направлениям.

153
00:10:39,080 --> 00:10:43,480
Поэтому я выделю эту область серым цветом, чтобы сказать, что мы не хотим ее искать дальше.

154
00:10:43,480 --> 00:10:47,840
Правая половина проходит через все цвета, проводит много времени в зеленом направлении,

155
00:10:47,840 --> 00:10:51,120
затем проходит через желтый, оранжевый, красный, а также синий, фиолетовый и розовый.

156
00:10:51,120 --> 00:10:56,060
Теперь помните, что это означает, что точки этой

157
00:10:56,060 --> 00:10:57,800
границы сопоставляются с выходами всех возможных направлений.

158
00:10:57,800 --> 00:11:02,900
Итак, мы исследуем его дальше, снова разделив и проверив границы для каждого региона.

159
00:11:02,900 --> 00:11:07,000
Граница верха вся зеленая, поэтому на этом поиски остановимся.

160
00:11:07,000 --> 00:11:10,500
Но нижняя часть достаточно красочная, чтобы заслуживать отдельного подразделения.

161
00:11:10,500 --> 00:11:12,420
И просто продолжайте в том же духе.

162
00:11:12,420 --> 00:11:16,860
Проверьте, какая подобласть имеет границу, охватывающую все возможные цвета, то есть точки

163
00:11:16,860 --> 00:11:21,280
этой границы отображаются во всех возможных направлениях, и продолжайте разрезать эти

164
00:11:21,280 --> 00:11:25,400
области пополам, как мы это делали для одномерного случая, что в

165
00:11:25,400 --> 00:11:29,320
конечном итоге приведет нас к нулю по функции. Ой, подожди секунду.

166
00:11:29,320 --> 00:11:30,320
Что здесь случилось?

167
00:11:30,320 --> 00:11:34,520
Ни одно из этих последних подразделений в правом нижнем углу не прошло

168
00:11:34,520 --> 00:11:38,160
через все цвета, поэтому наш алгоритм остановился, потому что не хотел искать

169
00:11:38,160 --> 00:11:41,160
ни в одном из них, но он также не нашел ноль.

170
00:11:41,160 --> 00:11:43,720
Ладно, здесь явно что-то не так.

171
00:11:43,720 --> 00:11:46,680
И это нормально, ошибаться – это обычная часть занятий математикой.

172
00:11:46,680 --> 00:11:51,400
Если оглянуться назад, у нас была эта гипотеза, и она

173
00:11:51,400 --> 00:11:53,680
привела нас к этому предложенному алгоритму, значит, мы где-то ошиблись.

174
00:11:53,680 --> 00:11:56,860
И быть хорошим в математике – это не значит

175
00:11:56,860 --> 00:12:00,920
быть правым с первого раза, а иметь способность внимательно

176
00:12:00,920 --> 00:12:02,520
оглянуться назад, понять ошибки и понять, как их исправить.

177
00:12:02,520 --> 00:12:06,760
Проблема здесь в том, что у нас был регион, граница которого проходила через каждый цвет,

178
00:12:06,760 --> 00:12:11,260
но когда мы разделили его посередине, ни одна граница субрегиона не проходила через каждый цвет,

179
00:12:11,260 --> 00:12:14,880
у нас не было вариантов, где продолжать поиск дальше, и это сломало ноль. искатель.

180
00:12:15,280 --> 00:12:18,120
В одном измерении ничего подобного никогда не происходило.

181
00:12:18,120 --> 00:12:22,960
Каждый раз, когда у вас есть интервал, конечные точки которого имеют

182
00:12:22,960 --> 00:12:28,200
разные знаки, если вы разделите его, вы знаете, что гарантированно

183
00:12:28,200 --> 00:12:29,200
получите некоторый подинтервал, конечные точки которого также имеют разные знаки.

184
00:12:29,200 --> 00:12:34,120
Или, другими словами, каждый раз, когда у вас есть два интервала,

185
00:12:34,120 --> 00:12:38,280
конечные точки которых не меняют знак, если вы объедините их, вы

186
00:12:38,280 --> 00:12:39,280
получите больший интервал, конечные точки которого также не меняют знак.

187
00:12:39,280 --> 00:12:43,140
Но в двух измерениях можно найти две области, границы которых

188
00:12:43,140 --> 00:12:48,040
не проходят через все цвета, но границы которых в

189
00:12:48,040 --> 00:12:49,940
совокупности образуют область, граница которой проходит через все цвета.

190
00:12:49,940 --> 00:12:53,740
Именно таким образом предложенный нами алгоритм поиска нуля сломался.

191
00:12:53,740 --> 00:12:58,680
Фактически, если вы подумаете об этом, вы можете найти большой цикл, граница

192
00:12:58,680 --> 00:13:03,120
которого проходит через все возможные цвета, но внутри него нет нуля.

193
00:13:03,120 --> 00:13:07,100
Это не означает, что мы были неправы в наших утверждениях о крошечных петлях, когда

194
00:13:07,100 --> 00:13:13,040
говорили, что вечно сужающаяся петля, проходящая через каждый цвет, должна сужаться к нулю.

195
00:13:13,040 --> 00:13:17,120
Но что нас запутало, так это то, что свойство «проходит ли моя граница через

196
00:13:17,120 --> 00:13:23,040
каждый цвет или нет» не объединяется приятным и предсказуемым образом при объединении регионов.

197
00:13:23,040 --> 00:13:28,100
Но не волнуйтесь, оказывается, мы можем немного изменить это свойство, сделав его

198
00:13:28,100 --> 00:13:38,560
более сложным, которое в совокупности даст нам то, что мы хотим.

199
00:13:38,560 --> 00:13:42,540
Идея состоит в том, что вместо того, чтобы просто спрашивать, можем

200
00:13:42,540 --> 00:13:47,100
ли мы найти цвет в какой-то момент цикла, давайте более внимательно

201
00:13:47,100 --> 00:13:48,100
проследим, как эти цвета меняются по мере нашего обхода этого цикла.

202
00:13:48,100 --> 00:13:50,060
Позвольте мне показать вам, что я имею в виду, на примере.

203
00:13:50,060 --> 00:13:54,120
Я поставлю здесь, в углу, небольшой цветовой круг, чтобы мы могли отслеживать его.

204
00:13:54,120 --> 00:13:58,540
Когда цвета на пути входных данных движутся по радуге в определенном направлении:

205
00:13:58,540 --> 00:14:04,380
от красного к желтому, от желтого к зеленому, от зеленого к синему

206
00:14:04,380 --> 00:14:05,720
или от синего к красному, выходные данные колеблются по часовой стрелке.

207
00:14:05,720 --> 00:14:09,980
Но с другой стороны, если цвета движутся по радуге в обратном направлении: от синего к зеленому, от зеленого

208
00:14:09,980 --> 00:14:17,160
к желтому, от желтого к красному или от красного к синему, выходной сигнал будет меняться против часовой стрелки.

209
00:14:17,160 --> 00:14:22,940
Итак, идя по этому короткому пути здесь, цвета проходят пятую часть пути

210
00:14:22,940 --> 00:14:28,340
по часовой стрелке цветового круга, а идя по этому пути здесь,

211
00:14:28,340 --> 00:14:30,620
цвета проходят еще одну пятую пути по часовой стрелке цветового круга.

212
00:14:30,620 --> 00:14:35,400
Конечно, это означает, что если вы пройдете по обоим путям, один за другим,

213
00:14:35,400 --> 00:14:39,380
цвета повернутся в общей сложности на две пятых полного оборота по часовой стрелке.

214
00:14:39,380 --> 00:14:43,740
Общее количество намоток просто складывается, и это будет ключевым

215
00:14:43,740 --> 00:14:47,140
моментом, это тот тип простого объединения, который нам пригодится.

216
00:14:47,140 --> 00:14:51,980
Когда я говорю об общем количестве намоток, я хочу, чтобы вы представили старомодный одометр, который отсчитывает

217
00:14:51,980 --> 00:14:58,700
время вперед, когда стрелка вращается по часовой стрелке, и назад, когда стрелка вращается против часовой стрелки.

218
00:14:58,700 --> 00:15:03,020
Таким образом, обмотка против часовой стрелки считается отрицательной обмоткой по часовой стрелке.

219
00:15:03,020 --> 00:15:07,460
Выходы могут сильно поворачиваться, но если часть этого поворота

220
00:15:07,460 --> 00:15:08,940
происходит в противоположном направлении, это сводится на нет.

221
00:15:08,940 --> 00:15:13,220
Например, если вы двигаетесь вперед по этому пути, а затем двигаетесь назад

222
00:15:13,220 --> 00:15:18,100
по тому же пути, общая сумма намоток оказывается равной нулю, движение

223
00:15:18,100 --> 00:15:23,440
назад буквально перематывает назад через ранее увиденные цвета, обращая все предыдущие

224
00:15:23,440 --> 00:15:26,300
намотки на противоположное и возвращая одометр вернулся туда, где он начал.

225
00:15:26,300 --> 00:15:30,480
Для наших целей нас больше всего будет интересовать намотка по петлям.

226
00:15:30,480 --> 00:15:34,280
Например, предположим, что мы обходим весь этот цикл по часовой стрелке.

227
00:15:34,280 --> 00:15:39,680
Выходные данные, с которыми мы сталкиваемся, совершают в общей сложности три полных оборота по часовой стрелке,

228
00:15:39,680 --> 00:15:47,120
цвета менялись по радуге по порядку: снова от красного к красному, а затем снова и снова.

229
00:15:47,120 --> 00:15:52,260
На жаргоне математиков мы говорим, что общее

230
00:15:52,260 --> 00:15:54,100
число витков на этом контуре равно 3.

231
00:15:54,100 --> 00:15:58,440
Для других циклов это может быть любое другое целое число, возможно, большее, если

232
00:15:58,440 --> 00:16:03,680
выходной сигнал меняется много раз, когда входные данные проходят один цикл, или это

233
00:16:03,720 --> 00:16:07,060
может быть меньшее число, если выходной сигнал меняется только один или два раза.

234
00:16:07,060 --> 00:16:12,260
Или это число витков может быть даже отрицательным целым числом, если выходной сигнал

235
00:16:12,260 --> 00:16:15,200
будет колебаться против часовой стрелки, когда мы идем по часовой стрелке вокруг цикла.

236
00:16:15,200 --> 00:16:19,720
Но на любом контуре общее количество намоток должно быть целым числом.

237
00:16:19,720 --> 00:16:23,980
Я имею в виду, что к тому времени, когда вы вернетесь к тому,

238
00:16:23,980 --> 00:16:25,840
с чего начали, у вас будет тот же результат, с которого вы начали.

239
00:16:25,840 --> 00:16:31,520
Между прочим, если путь действительно содержит точку, в которой выходной сигнал

240
00:16:31,560 --> 00:16:35,640
равен нулю, то технически вы не можете определить номер витка

241
00:16:35,640 --> 00:16:37,600
вдоль этой точки, поскольку выходной сигнал не имеет определенного направления.

242
00:16:37,600 --> 00:16:41,740
Для нас это не будет проблемой, потому что вся наша цель —

243
00:16:41,740 --> 00:16:45,200
найти нули, поэтому, если это когда-нибудь произойдет, нам просто повезло раньше.

244
00:16:45,200 --> 00:16:48,720
Главное, что следует отметить в этих извилистых числах, — это то, что

245
00:16:48,720 --> 00:16:55,040
они хорошо складываются, когда вы объединяете пути в более крупные пути.

246
00:16:55,040 --> 00:16:59,440
Но чего мы действительно хотим, так это того, чтобы извилистые числа вдоль

247
00:16:59,440 --> 00:17:03,120
границ регионов хорошо складывались, когда мы объединяем регионы в более крупные регионы.

248
00:17:03,120 --> 00:17:06,320
Так есть ли у нас эта собственность?

249
00:17:06,320 --> 00:17:09,600
Ну, взгляните.

250
00:17:09,600 --> 00:17:14,760
Число витков, когда мы идем по часовой стрелке вокруг этой

251
00:17:14,760 --> 00:17:17,920
области слева, представляет собой сумму чисел витков этих четырех путей.

252
00:17:17,920 --> 00:17:21,960
И виток, когда мы идем по часовой стрелке вокруг этой

253
00:17:21,960 --> 00:17:25,480
области справа, представляет собой сумму чисел витков этих четырех путей.

254
00:17:25,480 --> 00:17:29,840
И когда мы объединяем эти два региона в один более крупный,

255
00:17:29,840 --> 00:17:33,760
большинство этих путей становятся частью границы большего региона по часовой стрелке.

256
00:17:33,760 --> 00:17:36,040
А что касается тех двух путей, которые этого не делают?

257
00:17:36,040 --> 00:17:40,520
Они прекрасно компенсируются, один из них представляет собой

258
00:17:40,520 --> 00:17:42,660
обратную перемотку другого, как мы видели раньше.

259
00:17:42,660 --> 00:17:48,840
Таким образом, извилистые числа вдоль границ регионов складываются именно так, как мы хотим.

260
00:17:48,840 --> 00:17:53,560
Также отметим, что рассуждения о таком удачном сложении ориентированных границ

261
00:17:53,560 --> 00:17:57,320
часто встречаются в математике и часто называются теоремой Стокса.

262
00:17:57,320 --> 00:18:02,880
Те из вас, кто изучал исчисление с несколькими переменными, возможно, узнают это по этому контексту.

263
00:18:02,880 --> 00:18:08,040
Итак, теперь, наконец, имея в руках намоточные числа, мы можем вернуться к нашим целям решения уравнений.

264
00:18:08,040 --> 00:18:12,400
Проблема с областью, которую мы видели ранее, заключается в том, что, хотя ее граница

265
00:18:12,400 --> 00:18:16,620
проходила через все возможные цвета, число витков на самом деле было равно нулю.

266
00:18:16,620 --> 00:18:22,360
Выходы прошли примерно половину пути, от желтого к красному, а затем начали двигаться против часовой

267
00:18:22,360 --> 00:18:26,000
стрелки в другом направлении, затем продолжили проходить через синий и попадать на красный с

268
00:18:26,000 --> 00:18:32,040
другой стороны, и все это таким образом, что общая сумма обмотки стала равна нулю.

269
00:18:32,040 --> 00:18:36,000
Но если вы найдете цикл, который не только соответствует каждому цвету, но

270
00:18:36,000 --> 00:18:41,200
и имеет более строгое условие ненулевого числа витков, тогда, если вы разделите

271
00:18:41,200 --> 00:18:46,400
его пополам, вы гарантированно получите, что хотя бы одна из этих половин

272
00:18:46,400 --> 00:18:48,600
имеет также ненулевое число витков, поскольку все складывается так, как мы хотим.

273
00:18:48,600 --> 00:18:54,280
Таким образом, вы можете продолжать идти, все дальше и дальше сужаяся до одной точки.

274
00:18:54,280 --> 00:18:58,440
И когда вы сужаетесь до точки, вы будете делать это с помощью крошечных петель, которые

275
00:18:58,440 --> 00:19:02,840
имеют ненулевые номера витков, что означает, что они проходят через все возможные цвета и, следовательно,

276
00:19:02,840 --> 00:19:07,680
как я уже говорил ранее, точку, в которой они сужаются. on должен быть нулем.

277
00:19:07,680 --> 00:19:08,760
Вот и все!

278
00:19:08,760 --> 00:19:13,280
Мы создали программу для решения двумерных уравнений, и

279
00:19:13,280 --> 00:19:14,760
на этот раз, обещаю, ошибок не будет.

280
00:19:14,760 --> 00:19:18,200
Числа намотки — это именно тот инструмент, который нам нужен для этой работы.

281
00:19:18,200 --> 00:19:23,040
Теперь мы можем решать уравнения, которые выглядят так: где f от x равно g

282
00:19:23,040 --> 00:19:27,660
от x в двух измерениях, просто учитывая, как меняется разница между f и g.

283
00:19:27,660 --> 00:19:31,800
Всякий раз, когда у нас есть цикл, число витков которого не равно нулю, мы

284
00:19:31,800 --> 00:19:35,160
можем запустить на нем этот алгоритм и гарантированно найти решение где-то внутри него.

285
00:19:35,160 --> 00:19:40,300
И более того, как и в одном измерении, этот алгоритм невероятно эффективен.

286
00:19:40,300 --> 00:19:44,880
Мы продолжаем сужать половину размера нашей области каждый раунд, тем самым быстро

287
00:19:44,880 --> 00:19:49,840
сужая нули, и все это время нам нужно проверять значение функции только

288
00:19:49,840 --> 00:19:55,240
в точках этих циклов, а не проверять ее на многих точки интерьера.

289
00:19:55,240 --> 00:20:00,400
Таким образом, в некотором смысле общая проделанная работа пропорциональна только

290
00:20:00,400 --> 00:20:04,960
периметру пространства поиска, а не всей площади, что удивительно.

291
00:20:04,960 --> 00:20:09,360
Теперь, когда вы понимаете, что происходит, становится странно завораживать, просто наблюдая за

292
00:20:09,360 --> 00:20:13,800
этим в действии, придавая ему какую-то функцию и позволяя ему искать нули.

293
00:20:13,800 --> 00:20:18,600
Как я уже говорил ранее, комплексные числа двумерны, поэтому

294
00:20:18,600 --> 00:20:20,340
давайте применим это к некоторому уравнению с комплексными числами.

295
00:20:20,340 --> 00:20:25,240
Например, вот алгоритм поиска нулей функции x с точностью

296
00:20:25,240 --> 00:20:28,920
до пятой минус x минус единица на комплексной плоскости.

297
00:20:28,920 --> 00:20:33,160
Все началось с рассмотрения очень большой области вокруг начала

298
00:20:33,160 --> 00:20:35,440
координат, число витков которой в конечном итоге составило 5.

299
00:20:35,440 --> 00:20:39,640
Каждый раз, когда вы находите петлю с ненулевым числом витков, вы

300
00:20:39,640 --> 00:20:42,840
делите ее пополам и вычисляете число витков двух меньших петель.

301
00:20:42,880 --> 00:20:46,880
Любой из них или оба гарантированно имеют ненулевое число витков, и когда

302
00:20:46,880 --> 00:20:51,440
вы видите это, вы знаете, что где-то внутри этого меньшего цикла есть

303
00:20:51,440 --> 00:20:54,300
ноль, поэтому вы продолжаете идти тем же путем, обыскивая меньшее пространство.

304
00:20:54,300 --> 00:20:58,920
Мы также прекращаем исследование региона, если путь, по которому мы вычисляем, случайно натыкается

305
00:20:58,920 --> 00:21:03,420
на ноль, что действительно произошло один раз в этом примере в правой половине.

306
00:21:03,420 --> 00:21:07,600
Эти редкие случаи мешают нам вычислять числа

307
00:21:07,600 --> 00:21:09,320
оборотов, но, эй, мы получили ноль.

308
00:21:09,320 --> 00:21:13,320
А что касается петель, число витков которых равно нулю, вы их просто не изучаете дальше.

309
00:21:13,320 --> 00:21:18,520
Может быть, у них есть решение внутри, а может быть, и нет, у нас нет никаких гарантий.

310
00:21:18,520 --> 00:21:22,240
И если позволить нашему решателю уравнений продолжать в том же духе,

311
00:21:22,240 --> 00:21:26,020
он в конечном итоге сходится к множеству нулей для этого многочлена.

312
00:21:26,020 --> 00:21:30,400
Кстати, не случайно общее количество витков

313
00:21:30,400 --> 00:21:31,660
в этом примере оказалось равным 5.

314
00:21:31,660 --> 00:21:37,280
Для комплексных чисел операция x по n напрямую соответствует обходу начала координат выходных

315
00:21:37,280 --> 00:21:45,000
данных n раз, когда вы один раз обходите начало координат входных данных.

316
00:21:45,000 --> 00:21:50,500
Таким образом, в случае полинома для достаточно больших входных данных

317
00:21:50,500 --> 00:21:52,700
каждый член, кроме ведущего, становится незначительным по сравнению с ним.

318
00:21:52,700 --> 00:21:58,780
Таким образом, любой комплексный многочлен, главный член которого равен x

319
00:21:58,780 --> 00:22:00,700
до n, имеет число витков n вокруг достаточно большого цикла.

320
00:22:00,700 --> 00:22:06,240
Таким образом, наша технология намоточных чисел фактически

321
00:22:06,240 --> 00:22:07,620
гарантирует, что каждый комплексный многочлен имеет ноль.

322
00:22:07,620 --> 00:22:13,880
Это настолько важный факт, что математики называют его фундаментальной теоремой алгебры.

323
00:22:13,880 --> 00:22:18,040
Наличие алгоритма для поиска численных решений подобных уравнений чрезвычайно практично,

324
00:22:18,040 --> 00:22:22,420
но фундаментальная теорема алгебры является хорошим примером того, как

325
00:22:22,420 --> 00:22:27,780
эти числа витков также весьма полезны на теоретическом уровне,

326
00:22:27,780 --> 00:22:32,280
гарантируя существование решения для широкого класса уравнений. уравнения для

327
00:22:32,280 --> 00:22:34,060
подходящих условий, о которых математикам гораздо больше нравится думать.

328
00:22:34,400 --> 00:22:39,360
Я покажу вам еще пару удивительных применений этого в контексте топологии в

329
00:22:39,360 --> 00:22:44,080
следующем видео, которое включает в себя исправление ошибки из старого видео 3blue1brown.

330
00:22:44,080 --> 00:22:45,080
Который из?

331
00:22:45,080 --> 00:22:48,740
Что ж, посмотрите все видео, все, что есть на этом

332
00:22:48,740 --> 00:22:51,640
канале, и посмотрите, сможете ли вы сначала обнаружить ошибку.

333
00:22:51,640 --> 00:22:55,960
Основным автором этого видео является один из

334
00:22:55,960 --> 00:22:56,460
новых участников команды 3blue1brown Шридхар Рамеш.

