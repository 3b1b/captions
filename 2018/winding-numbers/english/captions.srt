1
00:00:03,060 --> 00:00:06,140
There's two things here, the main topic and the meta topic.

2
00:00:06,640 --> 00:00:10,056
The main topic is going to be this really neat algorithm for solving 

3
00:00:10,056 --> 00:00:13,522
two-dimensional equations, things that have two unknown real numbers, 

4
00:00:13,522 --> 00:00:16,840
or also those involving a single unknown which is a complex number.

5
00:00:17,440 --> 00:00:21,073
So for example, if you wanted to find the complex roots of a polynomial, 

6
00:00:21,073 --> 00:00:24,757
or maybe some of those million dollar zeros of the Riemann zeta function, 

7
00:00:24,757 --> 00:00:26,500
this algorithm would do it for you.

8
00:00:26,800 --> 00:00:30,060
And this method is super pretty, since a lot of colors are involved.

9
00:00:30,540 --> 00:00:33,679
And more importantly, the core underlying idea applies to all 

10
00:00:33,679 --> 00:00:36,920
sorts of math well beyond this algorithm for solving equations, 

11
00:00:36,920 --> 00:00:40,060
including a bit of topology, which I'll talk about afterwards.

12
00:00:40,740 --> 00:00:44,558
But what really makes this worth 20 minutes or so of your time is that 

13
00:00:44,558 --> 00:00:48,215
it illustrates a lesson much more generally useful throughout math, 

14
00:00:48,215 --> 00:00:51,980
which is try to define constructs that compose nicely with each other.

15
00:00:52,400 --> 00:00:54,480
You'll see what I mean by that as the story progresses.

16
00:00:55,060 --> 00:00:58,770
To motivate the case with functions that have 2D inputs and 2D outputs, 

17
00:00:58,770 --> 00:01:03,098
let's start off simpler with functions that just take in a real number and spit out 

18
00:01:03,098 --> 00:01:03,820
a real number.

19
00:01:05,080 --> 00:01:09,385
If you want to know when a function f of x equals some other function g of x, 

20
00:01:09,385 --> 00:01:14,188
you might think of this as searching for when the graphs of those functions intersect, 

21
00:01:14,188 --> 00:01:14,520
right?

22
00:01:15,020 --> 00:01:18,520
I mean that gives you an input where both functions have the same output.

23
00:01:18,520 --> 00:01:22,671
To take a very simple example, imagine f of x is x squared, 

24
00:01:22,671 --> 00:01:25,300
and g of x is the constant function 2.

25
00:01:25,960 --> 00:01:28,640
In other words, you want to find the square root of 2.

26
00:01:29,460 --> 00:01:32,752
Even if you know almost nothing about finding square roots, 

27
00:01:32,752 --> 00:01:37,360
you can probably see that 1 squared is less than 2, and 2 squared is bigger than 2, 

28
00:01:37,360 --> 00:01:41,860
so you realize, ah, there's going to be some solution in between those two values.

29
00:01:42,580 --> 00:01:44,955
And then if you wanted to narrow it down further, 

30
00:01:44,955 --> 00:01:47,140
maybe you try squaring the halfway point, 1.5.

31
00:01:47,720 --> 00:01:50,707
This comes out to be 2.25, a little too high, 

32
00:01:50,707 --> 00:01:53,760
so you'd focus on the region between 1 and 1.5.

33
00:01:54,760 --> 00:01:57,356
And so on, you can probably see how this would keep going, 

34
00:01:57,356 --> 00:02:00,920
you'd keep computing at the midpoint and then chopping your search space in half.

35
00:02:05,100 --> 00:02:08,605
Another way to think about this, which is going to make it easier for us 

36
00:02:08,605 --> 00:02:12,206
once we get up to higher dimensions, is to instead focus on the equivalent 

37
00:02:12,206 --> 00:02:15,520
question for when the difference between these two functions is zero.

38
00:02:16,100 --> 00:02:19,892
In those terms, we found a region of inputs where that difference 

39
00:02:19,892 --> 00:02:23,340
was negative on one end, and it was positive on another end.

40
00:02:23,840 --> 00:02:27,075
And then we split it into two, and the half that we narrowed our 

41
00:02:27,075 --> 00:02:30,560
attention to was the one where the outermost points had varying signs.

42
00:02:31,360 --> 00:02:34,000
And like this, we were able to keep going forever, 

43
00:02:34,000 --> 00:02:36,744
taking each region with varying signs on the border, 

44
00:02:36,744 --> 00:02:39,229
finding a smaller such region among its halves, 

45
00:02:39,229 --> 00:02:43,526
knowing that ultimately we have to be narrowing in on a point which is going to be 

46
00:02:43,526 --> 00:02:44,200
exactly zero.

47
00:02:45,760 --> 00:02:49,869
In short, solving equations can always be framed as finding when a certain 

48
00:02:49,869 --> 00:02:53,540
function is equal to zero, and to do that, we have this heuristic, 

49
00:02:53,540 --> 00:02:56,883
if f is positive at one point and negative at another point, 

50
00:02:56,883 --> 00:02:59,677
you can find someplace in between where it's zero, 

51
00:02:59,677 --> 00:03:03,020
at least if everything changes smoothly with no sudden jumps.

52
00:03:03,880 --> 00:03:07,210
Now the amazing thing I want to show you is that you can extend 

53
00:03:07,210 --> 00:03:10,020
this kind of thinking into two-dimensional equations, 

54
00:03:10,020 --> 00:03:14,080
equations between functions whose inputs and outputs are both two-dimensional.

55
00:03:14,739 --> 00:03:17,851
For example, complex numbers are 2D, and this tool we're 

56
00:03:17,851 --> 00:03:21,400
developing is perfect for finding solutions to complex equations.

57
00:03:22,360 --> 00:03:25,437
Now since we're going to be talking about these 2D functions so much, 

58
00:03:25,437 --> 00:03:28,340
let's take a brief side step and consider how we illustrate these.

59
00:03:29,060 --> 00:03:33,810
Graphing a function with a 2D input and a 2D output would require four dimensions, 

60
00:03:33,810 --> 00:03:37,930
and that's not going to work so well in our 3D world on our 2D screens, 

61
00:03:37,930 --> 00:03:40,220
but we still have a couple good options.

62
00:03:40,859 --> 00:03:45,440
One is to just look at both the input space and the output space side by side.

63
00:03:45,540 --> 00:03:50,193
Each point in the input space moves to a particular point in the output space, 

64
00:03:50,193 --> 00:03:53,845
and I can show how moving around that input point corresponds 

65
00:03:53,845 --> 00:03:56,260
to certain movements in the output space.

66
00:03:56,940 --> 00:03:59,636
All of the functions we consider will be continuous, 

67
00:03:59,636 --> 00:04:02,535
in the sense that small little changes to the input only 

68
00:04:02,535 --> 00:04:06,300
correspond to small little changes in the output, there's no sudden jumps.

69
00:04:06,940 --> 00:04:11,760
Another option we have is to imagine the arrow from the origin of the output space to 

70
00:04:11,760 --> 00:04:16,579
that output point, and to attach a miniature version of that arrow to the input point.

71
00:04:17,360 --> 00:04:21,657
This can give us a sense, at a glance, for where a given input point goes, 

72
00:04:21,657 --> 00:04:25,840
or where many different input points go by drawing the full vector field.

73
00:04:27,600 --> 00:04:31,250
And unfortunately when you do this at a lot of points it can get pretty cluttered, 

74
00:04:31,250 --> 00:04:33,581
so here let me make all of the arrows the same size, 

75
00:04:33,581 --> 00:04:37,100
and what this means is we can get a sense of the direction of each output point.

76
00:04:37,780 --> 00:04:41,249
But perhaps the prettiest way to illustrate two-dimensional functions, 

77
00:04:41,249 --> 00:04:45,451
and the one we'll be using most this video, is to associate each point in that output 

78
00:04:45,451 --> 00:04:46,380
space with a color.

79
00:04:47,220 --> 00:04:51,842
Here we've used hues, that is where the color falls along a rainbow or a color wheel, 

80
00:04:51,842 --> 00:04:54,691
to correspond to the direction away from the origin, 

81
00:04:54,691 --> 00:04:59,260
and we're using darkness or brightness to correspond to the distance from the origin.

82
00:04:59,260 --> 00:05:02,228
For example, focusing just on this array of outputs, 

83
00:05:02,228 --> 00:05:06,932
all of these points are red, but the ones closer to the origin are a little darker, 

84
00:05:06,932 --> 00:05:09,620
and the ones farther away are a little brighter.

85
00:05:10,360 --> 00:05:14,170
And focusing just on this array of outputs, all of the points are green, 

86
00:05:14,170 --> 00:05:17,980
and again, closer to the origin means darker, farther away means lighter.

87
00:05:18,780 --> 00:05:23,367
And so on, all we're doing here is assigning a specific color to each direction, 

88
00:05:23,367 --> 00:05:24,840
all changing continuously.

89
00:05:25,359 --> 00:05:29,142
You might notice the darkness and brightness differences here are pretty subtle, 

90
00:05:29,142 --> 00:05:32,271
but for this video, all we care about is the direction of outputs, 

91
00:05:32,271 --> 00:05:34,560
not the magnitudes, the hues, not the brightness.

92
00:05:35,300 --> 00:05:39,650
The one important thing about brightness for you to notice is that near the origin, 

93
00:05:39,650 --> 00:05:43,120
which has no particular direction, all of the colors fade to black.

94
00:05:44,440 --> 00:05:49,208
So for thinking about functions, now that we've decided on a color for each output, 

95
00:05:49,208 --> 00:05:53,296
we can visualize 2D functions by coloring each point in the input space 

96
00:05:53,296 --> 00:05:57,100
based on the color of the point where it lands in the output space.

97
00:05:57,840 --> 00:06:01,854
I like to imagine many different points from that input space hopping over to their 

98
00:06:01,854 --> 00:06:05,963
corresponding outputs in the output space, then getting painted based on the color of 

99
00:06:05,963 --> 00:06:10,073
the point where they land, and then hopping back to where they came from in the input 

100
00:06:10,073 --> 00:06:10,360
space.

101
00:06:11,640 --> 00:06:13,750
Doing this for every point in the input space, 

102
00:06:13,750 --> 00:06:17,072
you can get a sense just by looking at that input space for roughly where 

103
00:06:17,072 --> 00:06:18,420
the function takes each point.

104
00:06:19,120 --> 00:06:23,758
For example, this stripe of pink points on the left tells us that all of those 

105
00:06:23,758 --> 00:06:28,280
points get mapped in the pink direction, that lower left of the output space.

106
00:06:29,780 --> 00:06:32,314
Also those three points which are black with lots 

107
00:06:32,314 --> 00:06:34,900
of colors around them are the ones that go to zero.

108
00:06:39,340 --> 00:06:43,943
Alright, so just like the 1D case, solving equations of 2D functions 

109
00:06:43,943 --> 00:06:48,880
can always be reframed by asking when a certain function is equal to zero.

110
00:06:49,580 --> 00:06:53,351
So that's our challenge right now, create an algorithm that 

111
00:06:53,351 --> 00:06:57,060
finds which input points of a given 2D function go to zero.

112
00:07:00,860 --> 00:07:04,507
Now you might point out that if you're looking at a color map like this by 

113
00:07:04,507 --> 00:07:08,300
seeing those black dots, you already know where the zeros of the function are.

114
00:07:08,620 --> 00:07:10,000
So does that count?

115
00:07:10,920 --> 00:07:13,870
Well keep in mind that to create a diagram like this, 

116
00:07:13,870 --> 00:07:18,187
we've had the computer compute the function at all of the pixels on the plane, 

117
00:07:18,187 --> 00:07:22,559
but our goal is to find a more efficient algorithm that only requires computing 

118
00:07:22,559 --> 00:07:27,204
the function at as few points as possible, only having a limited view of the colors, 

119
00:07:27,204 --> 00:07:27,860
so to speak.

120
00:07:29,360 --> 00:07:33,548
And also from a more theoretical standpoint, it'd be nice to have a general construct 

121
00:07:33,548 --> 00:07:37,640
that tells us the conditions for whether or not a zero exists inside a given region.

122
00:07:39,000 --> 00:07:43,357
Now remember, in one dimension the main insight was that if a continuous function is 

123
00:07:43,357 --> 00:07:47,920
positive at one point and negative at another, then somewhere in between it must be zero.

124
00:07:48,840 --> 00:07:50,580
So how do we extend that into two dimensions?

125
00:07:50,940 --> 00:07:53,580
We need some sort of analog of talking about signs.

126
00:07:54,700 --> 00:07:58,140
One way to think about what signs even are is directions.

127
00:07:58,800 --> 00:08:01,562
Positive means you're pointing to the right along the number line, 

128
00:08:01,562 --> 00:08:03,500
and negative means you're pointing to the left.

129
00:08:04,200 --> 00:08:08,679
Two dimensional quantities also have direction, but for them the options are much wider, 

130
00:08:08,679 --> 00:08:11,800
they can point anywhere along a whole circle of possibilities.

131
00:08:12,530 --> 00:08:17,026
So the same way that in one dimension we were asking whether a given function 

132
00:08:17,026 --> 00:08:21,522
is positive or negative on the boundary of a range, which is just two points, 

133
00:08:21,522 --> 00:08:25,672
for 2D functions we're going to be looking at the boundary of a region, 

134
00:08:25,672 --> 00:08:30,860
which is a loop, and ask about the direction of the function's output along that boundary.

135
00:08:33,640 --> 00:08:36,716
For example, we see that along this loop around this zero, 

136
00:08:36,716 --> 00:08:40,940
the output goes through every possible direction, all the colors of the rainbow, 

137
00:08:40,940 --> 00:08:45,060
red, yellow, green, blue, back to red, and everything in between along the way.

138
00:08:45,700 --> 00:08:48,714
But along this loop over here, with no zeros inside of it, 

139
00:08:48,714 --> 00:08:53,107
the output doesn't go through every color, it goes through some of the orangish ones, 

140
00:08:53,107 --> 00:08:54,640
but never, say, green or blue.

141
00:08:55,300 --> 00:08:58,460
And this is promising, it looks a lot like how things worked in one dimension.

142
00:08:59,340 --> 00:09:04,687
Maybe in the same way that if a 1D function takes both possible signs on the boundary 

143
00:09:04,687 --> 00:09:07,858
of a 1D region, there was a zero somewhere inside, 

144
00:09:07,858 --> 00:09:13,082
we might hypothesize that if a 2D function hits outputs of all possible directions, 

145
00:09:13,082 --> 00:09:16,564
all possible colors, along the boundary of a 2D region, 

146
00:09:16,564 --> 00:09:19,860
then somewhere inside that region it must go to zero.

147
00:09:20,960 --> 00:09:25,287
So that's our guess, and take a moment to think about if this should be true, 

148
00:09:25,287 --> 00:09:26,120
and if so, why?

149
00:09:27,420 --> 00:09:30,587
If we start thinking about a tiny loop around some input point, 

150
00:09:30,587 --> 00:09:35,042
we know that since everything is continuous, our function takes it to some tiny loop near 

151
00:09:35,042 --> 00:09:36,280
the corresponding output.

152
00:09:37,140 --> 00:09:40,520
But look, for most tiny loops, the output varies in color.

153
00:09:40,980 --> 00:09:45,640
If you pick any output point other than zero, and draw a sufficiently tight loop near it, 

154
00:09:45,640 --> 00:09:49,420
the loop's colors are all going to be about the same color as that point.

155
00:09:49,840 --> 00:09:54,263
A tight loop over here is all bluish, a tight loop over here is all yellowish, 

156
00:09:54,263 --> 00:09:57,680
you certainly aren't going to get every color of the rainbow.

157
00:09:58,220 --> 00:10:02,043
The only point where you can tighten loops around it while 

158
00:10:02,043 --> 00:10:06,320
still getting all the colors is the colorless origin, zero itself.

159
00:10:07,100 --> 00:10:11,714
So it is indeed the case that if you have loops going through every color of the rainbow, 

160
00:10:11,714 --> 00:10:14,380
tightening and tightening, narrowing in on a point, 

161
00:10:14,380 --> 00:10:16,380
then that point must in fact be a zero.

162
00:10:17,320 --> 00:10:21,860
And so, let's set up a 2D equation solver just like our one-dimensional equation solver.

163
00:10:22,260 --> 00:10:25,839
When we find a large region whose border goes through every color, 

164
00:10:25,839 --> 00:10:29,900
split it into two, and then look at the colors on the boundary of each half.

165
00:10:30,540 --> 00:10:34,740
In the example shown here, the border on the left half doesn't go through all colors, 

166
00:10:34,740 --> 00:10:38,600
there are no points that map to the orangish-yellowish directions, for example.

167
00:10:39,060 --> 00:10:42,620
So I'll grey out this area as a way of saying we don't want to search it any further.

168
00:10:43,380 --> 00:10:45,543
The right half does go through all the colors, 

169
00:10:45,543 --> 00:10:49,410
spends a lot of time in the green direction, then passes through yellow-orange-red, 

170
00:10:49,410 --> 00:10:50,700
as well as blue-violet-pink.

171
00:10:51,560 --> 00:10:54,329
Now remember, what that means is that points of this 

172
00:10:54,329 --> 00:10:57,360
boundary get mapped to outputs of all possible directions.

173
00:10:57,840 --> 00:11:01,860
So we'll explore it further, subdividing again and checking the boundary for each region.

174
00:11:02,880 --> 00:11:06,560
The boundary of the top is all green, so we'll stop searching there.

175
00:11:06,860 --> 00:11:09,520
But the bottom is colorful enough to deserve a subdivision.

176
00:11:10,340 --> 00:11:12,020
And just continue like this.

177
00:11:12,360 --> 00:11:15,853
Check which subregion has a boundary covering all possible colors, 

178
00:11:15,853 --> 00:11:19,555
meaning points of that boundary get mapped to all possible directions, 

179
00:11:19,555 --> 00:11:23,830
and keep chopping those regions in half like we did for the one-dimensional case, 

180
00:11:23,830 --> 00:11:27,480
eventually leading us to a zero over the func- Well, hang on a second.

181
00:11:28,880 --> 00:11:29,920
What happened here?

182
00:11:30,380 --> 00:11:34,482
Neither of those last subdivisions on the bottom right passed through all the colors, 

183
00:11:34,482 --> 00:11:38,441
so our algorithm stopped because it didn't want to search through either of those, 

184
00:11:38,441 --> 00:11:39,920
but it also didn't find a zero.

185
00:11:41,060 --> 00:11:43,300
Okay, clearly something's wrong here.

186
00:11:43,540 --> 00:11:46,520
And that's okay, being wrong is a regular part of doing math.

187
00:11:46,520 --> 00:11:51,264
If we look back, we had this hypothesis, and it led us to this proposed algorithm, 

188
00:11:51,264 --> 00:11:52,980
so we were mistaken somewhere.

189
00:11:53,660 --> 00:11:56,524
And being good at math isn't about being right the first time, 

190
00:11:56,524 --> 00:12:00,390
it's about having the resilience to carefully look back and understand the mistakes, 

191
00:12:00,390 --> 00:12:01,800
and understand how to fix them.

192
00:12:02,480 --> 00:12:06,502
Now the problem here is that we had a region whose border went through every color, 

193
00:12:06,502 --> 00:12:10,765
but when we split it in the middle, neither subregion's border went through every color, 

194
00:12:10,765 --> 00:12:14,740
we had no options for where to keep searching next, and that broke the zero finder.

195
00:12:14,740 --> 00:12:17,560
Now in one dimension, this sort of thing never happened.

196
00:12:17,980 --> 00:12:21,775
Any time you had an interval whose endpoints have different signs, 

197
00:12:21,775 --> 00:12:25,117
if you split it up, you know that you're guaranteed to get 

198
00:12:25,117 --> 00:12:28,460
some subinterval whose endpoints also have different signs.

199
00:12:29,020 --> 00:12:33,700
Or, put another way, any time you have two intervals whose endpoints don't change signs, 

200
00:12:33,700 --> 00:12:38,380
if you combine them, you'll get a bigger interval whose endpoints also don't change sign.

201
00:12:39,080 --> 00:12:42,437
But in two dimensions, it's possible to find two regions whose 

202
00:12:42,437 --> 00:12:45,582
borders don't go through every color, but whose boundaries 

203
00:12:45,582 --> 00:12:49,100
combine to give a region whose border does go through every color.

204
00:12:49,840 --> 00:12:53,500
And in just this way, our proposed zero-finding algorithm broke.

205
00:12:54,380 --> 00:12:58,240
In fact, if you think about it, you can find a big loop whose border 

206
00:12:58,240 --> 00:13:02,380
goes through every possible color without there being a zero inside of it.

207
00:13:03,080 --> 00:13:07,515
Now that's not to say that we were wrong in our claims about tiny loops when we said 

208
00:13:07,515 --> 00:13:12,160
that a forever narrowing loop going through every color has to be narrowing in on a zero.

209
00:13:12,800 --> 00:13:15,553
But what made a mess of things for us is that this 

210
00:13:15,553 --> 00:13:19,926
does-my-border-go-through-every-color-or-not property doesn't combine in a nice, 

211
00:13:19,926 --> 00:13:22,140
predictable way when you combine regions.

212
00:13:23,000 --> 00:13:26,957
But don't worry, it turns out we can modify this slightly to a more 

213
00:13:26,957 --> 00:13:30,740
sophisticated property that does combine to give us what we want.

214
00:13:38,180 --> 00:13:41,424
The idea is that instead of simply asking whether we can find 

215
00:13:41,424 --> 00:13:44,668
a color at some point along the loop, let's keep more careful 

216
00:13:44,668 --> 00:13:47,860
track of how these colors change as we walk around that loop.

217
00:13:48,580 --> 00:13:49,960
Let me show you what I mean with an example.

218
00:13:50,400 --> 00:13:53,260
I'll keep a little color wheel up here in the corner to help us keep track.

219
00:13:53,940 --> 00:13:59,102
When the colors along a path of inputs move through the rainbow in a specific direction, 

220
00:13:59,102 --> 00:14:03,046
from red to yellow, yellow to green, green to blue, or blue to red, 

221
00:14:03,046 --> 00:14:04,960
the output is swinging clockwise.

222
00:14:05,700 --> 00:14:10,120
But on the other hand, if the colors move the other way through the rainbow, 

223
00:14:10,120 --> 00:14:14,023
from blue to green, green to yellow, yellow to red, or red to blue, 

224
00:14:14,023 --> 00:14:16,320
the output is swinging counterclockwise.

225
00:14:17,160 --> 00:14:20,449
So walking along this short path here, the colors wind 

226
00:14:20,449 --> 00:14:23,620
a fifth of the way clockwise through the color wheel.

227
00:14:24,260 --> 00:14:27,058
And walking along this path here, the colors wind 

228
00:14:27,058 --> 00:14:30,360
another fifth of the way clockwise through the color wheel.

229
00:14:31,160 --> 00:14:35,367
And of course that means that if you go through both paths, one after the other, 

230
00:14:35,367 --> 00:14:38,640
the colors wind a total of two-fifths of a full turn clockwise.

231
00:14:39,280 --> 00:14:42,765
The total amount of winding just adds up, and this is going to be key, 

232
00:14:42,765 --> 00:14:46,300
this is the kind of straightforward combining that will be useful to us.

233
00:14:46,980 --> 00:14:50,600
Now when I say total amount of winding, I want you to imagine 

234
00:14:50,600 --> 00:14:54,980
an old-fashioned odometer that ticks forward as the arrow spins clockwise, 

235
00:14:54,980 --> 00:14:57,900
but backwards as the arrow spins counterclockwise.

236
00:14:58,740 --> 00:15:02,460
So counterclockwise winding counts as negative clockwise winding.

237
00:15:03,000 --> 00:15:07,478
The outputs may turn a lot, but if some of that turning is in the opposite direction, 

238
00:15:07,478 --> 00:15:08,260
it cancels out.

239
00:15:08,920 --> 00:15:11,486
For example, if you move forward along this path, 

240
00:15:11,486 --> 00:15:15,284
and then move backwards along that same path, the total amount of winding 

241
00:15:15,284 --> 00:15:16,260
ends up being zero.

242
00:15:16,260 --> 00:15:20,376
The backwards movement literally rewinds through the previously seen colors, 

243
00:15:20,376 --> 00:15:25,080
reversing all the previous winding, and returning the odometer back to where it started.

244
00:15:26,280 --> 00:15:29,900
For our purposes, we'll care most about looking at the winding along loops.

245
00:15:30,440 --> 00:15:33,680
For example, let's say we walk around this entire loop clockwise.

246
00:15:34,240 --> 00:15:38,920
The outputs that we come across wind around a total of three full clockwise turns.

247
00:15:39,360 --> 00:15:43,027
The colors swung through the rainbow, ROYGBIV, in order, 

248
00:15:43,027 --> 00:15:46,180
from red to red again, and then again, and again.

249
00:15:46,920 --> 00:15:50,687
In the jargon mathematicians use, we say that along this loop, 

250
00:15:50,687 --> 00:15:52,720
the total winding number is three.

251
00:15:53,820 --> 00:15:56,952
Now for other loops, it could be any other whole number, 

252
00:15:56,952 --> 00:16:00,854
maybe a larger one if the output swings around many times as the input 

253
00:16:00,854 --> 00:16:04,921
walks around a single loop, or it could be a smaller number if the output 

254
00:16:04,921 --> 00:16:08,933
only swings around once or twice, or that winding number could even be a 

255
00:16:08,933 --> 00:16:12,891
negative integer if the output was swinging counterclockwise as we walk 

256
00:16:12,891 --> 00:16:14,320
clockwise around the loop.

257
00:16:15,180 --> 00:16:18,860
But along any loop, this total amount of winding has to be a whole number.

258
00:16:20,880 --> 00:16:23,038
I mean, by the time you get back to where you started, 

259
00:16:23,038 --> 00:16:25,000
you'll have the same output that you started with.

260
00:16:26,180 --> 00:16:30,825
Incidentally, if a path actually contains a point where the output is precisely zero, 

261
00:16:30,825 --> 00:16:34,229
then technically you can't define a winding number along that, 

262
00:16:34,229 --> 00:16:36,660
since the output has no particular direction.

263
00:16:37,400 --> 00:16:41,568
Now this isn't going to be a problem for us, because our whole goal is to find zeros, 

264
00:16:41,568 --> 00:16:44,040
so if this ever comes up, we just lucked out early.

265
00:16:44,980 --> 00:16:47,765
Alright, so the main thing to notice about these winding numbers 

266
00:16:47,765 --> 00:16:50,680
is that they add up nicely when you combine paths into bigger paths.

267
00:16:54,800 --> 00:16:58,620
But what we really want is for the winding numbers along the borders of 

268
00:16:58,620 --> 00:17:02,440
regions to add up nicely when we combine regions to make bigger regions.

269
00:17:02,980 --> 00:17:04,520
So do we have that property?

270
00:17:07,760 --> 00:17:09,060
Well, take a look.

271
00:17:09,540 --> 00:17:14,480
The winding number as we go clockwise around this region on the left is the sum of 

272
00:17:14,480 --> 00:17:19,539
the winding numbers from these four paths, and the winding as we go clockwise around 

273
00:17:19,539 --> 00:17:24,359
this region on the right is the sum of the winding numbers from these four paths.

274
00:17:25,339 --> 00:17:28,385
And when we combine those two regions into a bigger one, 

275
00:17:28,385 --> 00:17:32,500
most of those paths become part of the clockwise border of the bigger region.

276
00:17:33,260 --> 00:17:35,160
And as for those two paths that don't?

277
00:17:35,680 --> 00:17:37,100
Well, they cancel out perfectly.

278
00:17:37,520 --> 00:17:41,760
One of them is just the reverse, the rewinding of the other one, like we saw before.

279
00:17:42,560 --> 00:17:47,900
So the winding numbers along borders of regions add up in just the way we want them to.

280
00:17:48,640 --> 00:17:52,684
Also side note, this reasoning about oriented borders adding up nicely like this 

281
00:17:52,684 --> 00:17:56,680
comes up a lot in mathematics, and it often goes under the name Stokes' theorem.

282
00:17:57,060 --> 00:18:01,020
Those of you who've studied multivariable calculus might recognize it from that context.

283
00:18:02,360 --> 00:18:04,927
So now, finally, with winding numbers in hand, 

284
00:18:04,927 --> 00:18:07,440
we can get back to our equation solving goals.

285
00:18:08,000 --> 00:18:11,997
The problem with the region we saw earlier is that even though its border 

286
00:18:11,997 --> 00:18:15,940
passed through all possible colors, the winding number was actually zero.

287
00:18:16,500 --> 00:18:19,697
The outputs wound around halfway, through yellow to red, 

288
00:18:19,697 --> 00:18:23,399
and then started going counterclockwise back the other direction, 

289
00:18:23,399 --> 00:18:27,326
then continued going through blue and hitting red from the other way, 

290
00:18:27,326 --> 00:18:30,860
all in such a way that the total winding netted out to be zero.

291
00:18:31,840 --> 00:18:34,864
But if you find a loop which not only hits every color, 

292
00:18:34,864 --> 00:18:38,158
but has the stronger condition of a non-zero winding number, 

293
00:18:38,158 --> 00:18:42,154
then if you were to split it in half, you're guaranteed that at least one 

294
00:18:42,154 --> 00:18:45,123
of those halves has a non-zero winding number as well, 

295
00:18:45,123 --> 00:18:48,040
since things add up nicely in the way we want them to.

296
00:18:48,440 --> 00:18:53,500
So in this way, you can keep going, narrowing in further and further onto one point.

297
00:18:54,050 --> 00:18:58,149
And as you narrow in onto a point, you'll be doing so with tiny loops that have 

298
00:18:58,149 --> 00:19:02,095
non-zero winding numbers, which implies they go through all possible colors, 

299
00:19:02,095 --> 00:19:06,400
and therefore, like I said before, the point they're narrowing in on must be a zero.

300
00:19:07,420 --> 00:19:08,360
And that's it!

301
00:19:08,600 --> 00:19:11,522
We have now created a two-dimensional equation solver, 

302
00:19:11,522 --> 00:19:13,860
and this time, I promise, there are no bugs.

303
00:19:14,560 --> 00:19:17,540
Winding numbers are precisely the tool we need to make this work.

304
00:19:18,100 --> 00:19:22,487
We can now solve equations that look like where does f of x equal g of x in two 

305
00:19:22,487 --> 00:19:26,820
dimensions just by considering how the difference between f and g winds around.

306
00:19:27,600 --> 00:19:30,469
Whenever we have a loop whose winding number isn't zero, 

307
00:19:30,469 --> 00:19:34,093
we can run this algorithm on it and we're guaranteed to find a solution 

308
00:19:34,093 --> 00:19:35,100
somewhere within it.

309
00:19:35,660 --> 00:19:39,840
And what's more, just like in one dimension, this algorithm is incredibly efficient.

310
00:19:40,240 --> 00:19:43,738
We keep narrowing in on half the size of our region each round, 

311
00:19:43,738 --> 00:19:46,964
thus quickly narrowing in on the zeros, and all the while, 

312
00:19:46,964 --> 00:19:51,174
we only have to check the value of the function along points of these loops, 

313
00:19:51,174 --> 00:19:54,400
rather than checking it on the many points of the interior.

314
00:19:55,160 --> 00:19:59,384
So in some sense, the overall work done is proportional only to 

315
00:19:59,384 --> 00:20:03,740
the search space's perimeter, not the full area, which is amazing.

316
00:20:04,920 --> 00:20:08,834
Now once you understand what's going on, it's weirdly mesmerizing to just 

317
00:20:08,834 --> 00:20:12,960
watch this in action, giving it some function and letting it search for zeros.

318
00:20:13,620 --> 00:20:16,616
Like I said before, complex numbers are two-dimensional, 

319
00:20:16,616 --> 00:20:19,560
so let's apply it to some equation with complex numbers.

320
00:20:20,300 --> 00:20:24,011
For example, here's the algorithm finding the zeros of the 

321
00:20:24,011 --> 00:20:28,100
function x to the fifth minus x minus one over the complex plane.

322
00:20:28,900 --> 00:20:32,138
It started by considering a very large region around the origin, 

323
00:20:32,138 --> 00:20:34,480
which ended up having a winding number of five.

324
00:20:35,280 --> 00:20:38,154
Each time you find a loop with a non-zero winding number, 

325
00:20:38,154 --> 00:20:42,120
you split it in half and figure out the winding number of the two smaller loops.

326
00:20:42,700 --> 00:20:46,363
Either one or both of them is guaranteed to have a non-zero winding number, 

327
00:20:46,363 --> 00:20:50,363
and when you see this, you know there's a zero somewhere inside that smaller loop, 

328
00:20:50,363 --> 00:20:53,400
so you keep going in the same way, searching the smaller space.

329
00:20:54,180 --> 00:20:58,565
We also stop exploring a region if the path we're computing along happens to stumble 

330
00:20:58,565 --> 00:21:02,900
across a zero, which actually happened once for this example on the right half here.

331
00:21:03,280 --> 00:21:07,033
Those rare occurrences interfere with our ability to compute winding numbers, 

332
00:21:07,033 --> 00:21:08,140
but hey, we got a zero.

333
00:21:09,220 --> 00:21:12,920
And as for loops whose winding number is zero, you just don't explore those further.

334
00:21:12,920 --> 00:21:16,200
Maybe they have a solution inside, maybe they don't, we have no guarantees.

335
00:21:18,400 --> 00:21:21,139
And letting our equation solver continue in the same way, 

336
00:21:21,139 --> 00:21:24,020
it eventually converges to lots of zeros for this polynomial.

337
00:21:25,840 --> 00:21:28,341
By the way, it is no coincidence that the total 

338
00:21:28,341 --> 00:21:31,000
winding number in this example happened to be five.

339
00:21:31,580 --> 00:21:36,943
With complex numbers, the operation x to the n directly corresponds to walking 

340
00:21:36,943 --> 00:21:42,240
around the output's origin n times as you walk around the input's origin once.

341
00:21:44,680 --> 00:21:47,564
So with the polynomial, for large enough inputs, 

342
00:21:47,564 --> 00:21:51,980
every term other than the leading term becomes insignificant in comparison.

343
00:21:52,480 --> 00:21:56,195
So any complex polynomial whose leading term is x to the 

344
00:21:56,195 --> 00:21:59,780
n has a winding number of n around a large enough loop.

345
00:22:00,540 --> 00:22:03,796
And in that way, our winding number technology actually 

346
00:22:03,796 --> 00:22:06,820
guarantees that every complex polynomial has a zero.

347
00:22:07,480 --> 00:22:09,932
This is such an important fact that mathematicians 

348
00:22:09,932 --> 00:22:12,000
call it the fundamental theorem of algebra.

349
00:22:13,800 --> 00:22:17,737
Having an algorithm for finding numerical solutions to equations like this is 

350
00:22:17,737 --> 00:22:21,674
extremely practical, but the fundamental theorem of algebra is a good example 

351
00:22:21,674 --> 00:22:25,460
of how these winding numbers are also quite useful on a theoretical level, 

352
00:22:25,460 --> 00:22:29,245
guaranteeing the existence of a solution to a broad class of equations for 

353
00:22:29,245 --> 00:22:33,182
suitable conditions, which is much more the kind of thing mathematicians like 

354
00:22:33,182 --> 00:22:33,940
thinking about.

355
00:22:33,940 --> 00:22:38,745
I'll show you a couple more amazing applications of this in the context of topology in 

356
00:22:38,745 --> 00:22:43,440
a follow-up video, which includes correcting a mistake from an old 3blue1brown video.

357
00:22:44,060 --> 00:22:44,440
Which one?

358
00:22:44,940 --> 00:22:47,717
Well, watch all of the videos, everything on this channel, 

359
00:22:47,717 --> 00:22:49,600
and see if you can spot the error first.

360
00:22:51,300 --> 00:22:55,864
The primary author of this video is one of the newest 3blue1brown team members, 

361
00:22:55,864 --> 00:22:56,720
Sridhar Ramesh.

362
00:23:03,940 --> 00:23:10,060
Thank you for watching.

