1
00:00:03,060 --> 00:00:06,140
There's two things here, the main topic and the meta topic.

2
00:00:06,640 --> 00:00:09,960
The main topic is going to be this really neat algorithm for solving two-dimensional

3
00:00:09,960 --> 00:00:14,940
equations, things that have two unknown real numbers, or also those involving a single

4
00:00:14,940 --> 00:00:16,840
unknown which is a complex number.

5
00:00:17,440 --> 00:00:21,880
So for example, if you wanted to find the complex roots of a polynomial, or maybe some

6
00:00:21,880 --> 00:00:26,060
of those million dollar zeros of the Riemann zeta function, this algorithm would do it

7
00:00:26,060 --> 00:00:26,500
for you.

8
00:00:26,800 --> 00:00:30,060
And this method is super pretty, since a lot of colors are involved.

9
00:00:30,540 --> 00:00:34,960
And more importantly, the core underlying idea applies to all sorts of math well beyond

10
00:00:34,960 --> 00:00:39,540
this algorithm for solving equations, including a bit of topology, which I'll talk about

11
00:00:39,540 --> 00:00:40,060
afterwards.

12
00:00:40,740 --> 00:00:44,840
But what really makes this worth 20 minutes or so of your time is that it illustrates

13
00:00:44,840 --> 00:00:50,080
a lesson much more generally useful throughout math, which is try to define constructs that

14
00:00:50,080 --> 00:00:51,980
compose nicely with each other.

15
00:00:52,400 --> 00:00:54,480
You'll see what I mean by that as the story progresses.

16
00:00:55,060 --> 00:00:59,680
To motivate the case with functions that have 2D inputs and 2D outputs, let's start off

17
00:00:59,680 --> 00:01:03,820
simpler with functions that just take in a real number and spit out a real number.

18
00:01:05,080 --> 00:01:10,120
If you want to know when a function f of x equals some other function g of x, you might

19
00:01:10,120 --> 00:01:14,520
think of this as searching for when the graphs of those functions intersect, right?

20
00:01:15,020 --> 00:01:18,520
I mean that gives you an input where both functions have the same output.

21
00:01:18,520 --> 00:01:24,520
To take a very simple example, imagine f of x is x squared, and g of x is the constant

22
00:01:24,520 --> 00:01:25,300
function 2.

23
00:01:25,960 --> 00:01:28,640
In other words, you want to find the square root of 2.

24
00:01:29,460 --> 00:01:33,700
Even if you know almost nothing about finding square roots, you can probably see that 1

25
00:01:33,700 --> 00:01:39,340
squared is less than 2, and 2 squared is bigger than 2, so you realize, ah, there's going

26
00:01:39,340 --> 00:01:41,860
to be some solution in between those two values.

27
00:01:42,580 --> 00:01:46,340
And then if you wanted to narrow it down further, maybe you try squaring the halfway point,

28
00:01:46,520 --> 00:01:47,140
1.5.

29
00:01:47,720 --> 00:01:52,940
This comes out to be 2.25, a little too high, so you'd focus on the region between 1 and

30
00:01:52,940 --> 00:01:53,760
1.5.

31
00:01:54,760 --> 00:01:58,660
And so on, you can probably see how this would keep going, you'd keep computing at the

32
00:01:58,660 --> 00:02:00,920
midpoint and then chopping your search space in half.

33
00:02:05,100 --> 00:02:08,380
Another way to think about this, which is going to make it easier for us once we get

34
00:02:08,380 --> 00:02:13,560
up to higher dimensions, is to instead focus on the equivalent question for when the difference

35
00:02:13,560 --> 00:02:15,520
between these two functions is zero.

36
00:02:16,100 --> 00:02:20,760
In those terms, we found a region of inputs where that difference was negative on one

37
00:02:20,760 --> 00:02:23,340
end, and it was positive on another end.

38
00:02:23,840 --> 00:02:27,780
And then we split it into two, and the half that we narrowed our attention to was the

39
00:02:27,780 --> 00:02:30,560
one where the outermost points had varying signs.

40
00:02:31,360 --> 00:02:35,820
And like this, we were able to keep going forever, taking each region with varying signs

41
00:02:35,820 --> 00:02:40,600
on the border, finding a smaller such region among its halves, knowing that ultimately

42
00:02:40,600 --> 00:02:44,200
we have to be narrowing in on a point which is going to be exactly zero.

43
00:02:45,760 --> 00:02:50,280
In short, solving equations can always be framed as finding when a certain function

44
00:02:50,280 --> 00:02:55,700
is equal to zero, and to do that, we have this heuristic, if f is positive at one point

45
00:02:55,700 --> 00:03:00,480
and negative at another point, you can find someplace in between where it's zero, at

46
00:03:00,480 --> 00:03:03,020
least if everything changes smoothly with no sudden jumps.

47
00:03:03,880 --> 00:03:07,740
Now the amazing thing I want to show you is that you can extend this kind of thinking

48
00:03:07,740 --> 00:03:12,620
into two-dimensional equations, equations between functions whose inputs and outputs

49
00:03:12,620 --> 00:03:14,080
are both two-dimensional.

50
00:03:14,740 --> 00:03:19,580
For example, complex numbers are 2D, and this tool we're developing is perfect for finding

51
00:03:19,580 --> 00:03:21,400
solutions to complex equations.

52
00:03:22,360 --> 00:03:25,760
Now since we're going to be talking about these 2D functions so much, let's take a

53
00:03:25,760 --> 00:03:28,340
brief side step and consider how we illustrate these.

54
00:03:29,060 --> 00:03:34,360
Graphing a function with a 2D input and a 2D output would require four dimensions, and

55
00:03:34,360 --> 00:03:39,260
that's not going to work so well in our 3D world on our 2D screens, but we still have

56
00:03:39,260 --> 00:03:40,220
a couple good options.

57
00:03:40,860 --> 00:03:45,440
One is to just look at both the input space and the output space side by side.

58
00:03:45,540 --> 00:03:51,460
Each point in the input space moves to a particular point in the output space, and I can show

59
00:03:51,460 --> 00:03:56,260
how moving around that input point corresponds to certain movements in the output space.

60
00:03:56,940 --> 00:04:01,520
All of the functions we consider will be continuous, in the sense that small little changes to

61
00:04:01,520 --> 00:04:05,900
the input only correspond to small little changes in the output, there's no sudden

62
00:04:05,900 --> 00:04:06,300
jumps.

63
00:04:06,940 --> 00:04:12,080
Another option we have is to imagine the arrow from the origin of the output space to that

64
00:04:12,080 --> 00:04:16,580
output point, and to attach a miniature version of that arrow to the input point.

65
00:04:17,360 --> 00:04:22,440
This can give us a sense, at a glance, for where a given input point goes, or where many

66
00:04:22,440 --> 00:04:25,840
different input points go by drawing the full vector field.

67
00:04:27,600 --> 00:04:30,660
And unfortunately when you do this at a lot of points it can get pretty cluttered, so

68
00:04:30,660 --> 00:04:34,520
here let me make all of the arrows the same size, and what this means is we can get a

69
00:04:34,520 --> 00:04:37,100
sense of the direction of each output point.

70
00:04:37,780 --> 00:04:41,640
But perhaps the prettiest way to illustrate two-dimensional functions, and the one we'll

71
00:04:41,640 --> 00:04:46,380
be using most this video, is to associate each point in that output space with a color.

72
00:04:47,220 --> 00:04:51,740
Here we've used hues, that is where the color falls along a rainbow or a color wheel,

73
00:04:52,160 --> 00:04:56,760
to correspond to the direction away from the origin, and we're using darkness or brightness

74
00:04:56,760 --> 00:04:59,260
to correspond to the distance from the origin.

75
00:04:59,260 --> 00:05:05,540
For example, focusing just on this array of outputs, all of these points are red, but

76
00:05:05,540 --> 00:05:09,280
the ones closer to the origin are a little darker, and the ones farther away are a little

77
00:05:09,280 --> 00:05:09,620
brighter.

78
00:05:10,360 --> 00:05:15,400
And focusing just on this array of outputs, all of the points are green, and again, closer

79
00:05:15,400 --> 00:05:17,980
to the origin means darker, farther away means lighter.

80
00:05:18,780 --> 00:05:24,160
And so on, all we're doing here is assigning a specific color to each direction, all changing

81
00:05:24,160 --> 00:05:24,840
continuously.

82
00:05:25,360 --> 00:05:29,140
You might notice the darkness and brightness differences here are pretty subtle, but for

83
00:05:29,140 --> 00:05:33,820
this video, all we care about is the direction of outputs, not the magnitudes, the hues,

84
00:05:34,000 --> 00:05:34,560
not the brightness.

85
00:05:35,300 --> 00:05:39,220
The one important thing about brightness for you to notice is that near the origin, which

86
00:05:39,220 --> 00:05:43,120
has no particular direction, all of the colors fade to black.

87
00:05:44,440 --> 00:05:48,340
So for thinking about functions, now that we've decided on a color for each output,

88
00:05:48,780 --> 00:05:54,180
we can visualize 2D functions by coloring each point in the input space based on the

89
00:05:54,180 --> 00:05:57,100
color of the point where it lands in the output space.

90
00:05:57,840 --> 00:06:02,300
I like to imagine many different points from that input space hopping over to their corresponding

91
00:06:02,300 --> 00:06:06,440
outputs in the output space, then getting painted based on the color of the point where

92
00:06:06,440 --> 00:06:10,360
they land, and then hopping back to where they came from in the input space.

93
00:06:11,640 --> 00:06:15,780
Doing this for every point in the input space, you can get a sense just by looking at that

94
00:06:15,780 --> 00:06:18,420
input space for roughly where the function takes each point.

95
00:06:19,120 --> 00:06:23,700
For example, this stripe of pink points on the left tells us that all of those points

96
00:06:23,700 --> 00:06:28,280
get mapped in the pink direction, that lower left of the output space.

97
00:06:29,780 --> 00:06:34,160
Also those three points which are black with lots of colors around them are the ones that

98
00:06:34,160 --> 00:06:34,900
go to zero.

99
00:06:39,340 --> 00:06:45,940
Alright, so just like the 1D case, solving equations of 2D functions can always be reframed

100
00:06:45,940 --> 00:06:48,880
by asking when a certain function is equal to zero.

101
00:06:49,580 --> 00:06:54,700
So that's our challenge right now, create an algorithm that finds which input points

102
00:06:54,700 --> 00:06:57,060
of a given 2D function go to zero.

103
00:07:00,860 --> 00:07:04,600
Now you might point out that if you're looking at a color map like this by seeing those black

104
00:07:04,600 --> 00:07:08,300
dots, you already know where the zeros of the function are.

105
00:07:08,620 --> 00:07:10,000
So does that count?

106
00:07:10,920 --> 00:07:15,000
Well keep in mind that to create a diagram like this, we've had the computer compute

107
00:07:15,000 --> 00:07:20,080
the function at all of the pixels on the plane, but our goal is to find a more efficient

108
00:07:20,080 --> 00:07:25,160
algorithm that only requires computing the function at as few points as possible, only

109
00:07:25,160 --> 00:07:27,860
having a limited view of the colors, so to speak.

110
00:07:29,360 --> 00:07:33,700
And also from a more theoretical standpoint, it'd be nice to have a general construct

111
00:07:33,700 --> 00:07:37,640
that tells us the conditions for whether or not a zero exists inside a given region.

112
00:07:39,000 --> 00:07:43,680
Now remember, in one dimension the main insight was that if a continuous function is positive

113
00:07:43,680 --> 00:07:47,920
at one point and negative at another, then somewhere in between it must be zero.

114
00:07:48,840 --> 00:07:50,580
So how do we extend that into two dimensions?

115
00:07:50,940 --> 00:07:53,580
We need some sort of analog of talking about signs.

116
00:07:54,700 --> 00:07:58,140
One way to think about what signs even are is directions.

117
00:07:58,800 --> 00:08:02,560
Positive means you're pointing to the right along the number line, and negative means

118
00:08:02,560 --> 00:08:03,500
you're pointing to the left.

119
00:08:04,200 --> 00:08:08,860
Two dimensional quantities also have direction, but for them the options are much wider, they

120
00:08:08,860 --> 00:08:11,800
can point anywhere along a whole circle of possibilities.

121
00:08:12,530 --> 00:08:16,820
So the same way that in one dimension we were asking whether a given function is positive

122
00:08:16,820 --> 00:08:22,860
or negative on the boundary of a range, which is just two points, for 2D functions we're

123
00:08:22,860 --> 00:08:28,000
going to be looking at the boundary of a region, which is a loop, and ask about the direction

124
00:08:28,000 --> 00:08:30,860
of the function's output along that boundary.

125
00:08:33,640 --> 00:08:39,240
For example, we see that along this loop around this zero, the output goes through every possible

126
00:08:39,240 --> 00:08:43,540
direction, all the colors of the rainbow, red, yellow, green, blue, back to red, and

127
00:08:43,540 --> 00:08:45,060
everything in between along the way.

128
00:08:45,700 --> 00:08:50,640
But along this loop over here, with no zeros inside of it, the output doesn't go through

129
00:08:50,640 --> 00:08:54,640
every color, it goes through some of the orangish ones, but never, say, green or blue.

130
00:08:55,300 --> 00:08:58,460
And this is promising, it looks a lot like how things worked in one dimension.

131
00:08:59,340 --> 00:09:03,520
Maybe in the same way that if a 1D function takes both possible signs on the boundary

132
00:09:03,520 --> 00:09:09,300
of a 1D region, there was a zero somewhere inside, we might hypothesize that if a 2D

133
00:09:09,300 --> 00:09:15,180
function hits outputs of all possible directions, all possible colors, along the boundary of

134
00:09:15,180 --> 00:09:19,860
a 2D region, then somewhere inside that region it must go to zero.

135
00:09:20,960 --> 00:09:25,140
So that's our guess, and take a moment to think about if this should be true, and if

136
00:09:25,140 --> 00:09:26,120
so, why?

137
00:09:27,420 --> 00:09:32,020
If we start thinking about a tiny loop around some input point, we know that since everything

138
00:09:32,020 --> 00:09:36,280
is continuous, our function takes it to some tiny loop near the corresponding output.

139
00:09:37,140 --> 00:09:40,520
But look, for most tiny loops, the output varies in color.

140
00:09:40,980 --> 00:09:45,780
If you pick any output point other than zero, and draw a sufficiently tight loop near it,

141
00:09:46,220 --> 00:09:49,420
the loop's colors are all going to be about the same color as that point.

142
00:09:49,840 --> 00:09:55,920
A tight loop over here is all bluish, a tight loop over here is all yellowish, you certainly

143
00:09:55,920 --> 00:09:57,680
aren't going to get every color of the rainbow.

144
00:09:58,220 --> 00:10:03,200
The only point where you can tighten loops around it while still getting all the colors

145
00:10:03,200 --> 00:10:06,320
is the colorless origin, zero itself.

146
00:10:07,100 --> 00:10:11,060
So it is indeed the case that if you have loops going through every color of the rainbow,

147
00:10:11,480 --> 00:10:16,140
tightening and tightening, narrowing in on a point, then that point must in fact be a

148
00:10:16,140 --> 00:10:16,380
zero.

149
00:10:17,320 --> 00:10:21,860
And so, let's set up a 2D equation solver just like our one-dimensional equation solver.

150
00:10:22,260 --> 00:10:27,220
When we find a large region whose border goes through every color, split it into two, and

151
00:10:27,220 --> 00:10:29,900
then look at the colors on the boundary of each half.

152
00:10:30,540 --> 00:10:34,560
In the example shown here, the border on the left half doesn't go through all colors,

153
00:10:34,860 --> 00:10:38,600
there are no points that map to the orangish-yellowish directions, for example.

154
00:10:39,060 --> 00:10:42,620
So I'll grey out this area as a way of saying we don't want to search it any further.

155
00:10:43,380 --> 00:10:47,640
The right half does go through all the colors, spends a lot of time in the green direction,

156
00:10:47,860 --> 00:10:50,700
then passes through yellow-orange-red, as well as blue-violet-pink.

157
00:10:51,560 --> 00:10:56,080
Now remember, what that means is that points of this boundary get mapped to outputs of

158
00:10:56,080 --> 00:10:57,360
all possible directions.

159
00:10:57,840 --> 00:11:01,860
So we'll explore it further, subdividing again and checking the boundary for each region.

160
00:11:02,880 --> 00:11:06,560
The boundary of the top is all green, so we'll stop searching there.

161
00:11:06,860 --> 00:11:09,520
But the bottom is colorful enough to deserve a subdivision.

162
00:11:10,340 --> 00:11:12,020
And just continue like this.

163
00:11:12,360 --> 00:11:16,920
Check which subregion has a boundary covering all possible colors, meaning points of that

164
00:11:16,920 --> 00:11:21,340
boundary get mapped to all possible directions, and keep chopping those regions in half like

165
00:11:21,340 --> 00:11:25,360
we did for the one-dimensional case, eventually leading us to a zero over the func-

166
00:11:25,360 --> 00:11:27,480
Well, hang on a second.

167
00:11:28,880 --> 00:11:29,920
What happened here?

168
00:11:30,380 --> 00:11:34,060
Neither of those last subdivisions on the bottom right passed through all the colors,

169
00:11:34,600 --> 00:11:38,180
so our algorithm stopped because it didn't want to search through either of those, but

170
00:11:38,180 --> 00:11:39,920
it also didn't find a zero.

171
00:11:41,060 --> 00:11:43,300
Okay, clearly something's wrong here.

172
00:11:43,540 --> 00:11:46,520
And that's okay, being wrong is a regular part of doing math.

173
00:11:46,520 --> 00:11:50,720
If we look back, we had this hypothesis, and it led us to this proposed algorithm,

174
00:11:51,200 --> 00:11:52,980
so we were mistaken somewhere.

175
00:11:53,660 --> 00:11:56,860
And being good at math isn't about being right the first time, it's about having

176
00:11:56,860 --> 00:12:00,960
the resilience to carefully look back and understand the mistakes, and understand how

177
00:12:00,960 --> 00:12:01,800
to fix them.

178
00:12:02,480 --> 00:12:06,800
Now the problem here is that we had a region whose border went through every color, but

179
00:12:06,800 --> 00:12:11,360
when we split it in the middle, neither subregion's border went through every color, we had no

180
00:12:11,360 --> 00:12:14,740
options for where to keep searching next, and that broke the zero finder.

181
00:12:14,740 --> 00:12:17,560
Now in one dimension, this sort of thing never happened.

182
00:12:17,980 --> 00:12:22,600
Any time you had an interval whose endpoints have different signs, if you split it up,

183
00:12:22,900 --> 00:12:27,940
you know that you're guaranteed to get some subinterval whose endpoints also have different

184
00:12:27,940 --> 00:12:28,460
signs.

185
00:12:29,020 --> 00:12:33,580
Or, put another way, any time you have two intervals whose endpoints don't change signs,

186
00:12:34,040 --> 00:12:38,020
if you combine them, you'll get a bigger interval whose endpoints also don't change

187
00:12:38,020 --> 00:12:38,380
sign.

188
00:12:39,080 --> 00:12:43,220
But in two dimensions, it's possible to find two regions whose borders don't go

189
00:12:43,220 --> 00:12:47,980
through every color, but whose boundaries combine to give a region whose border does

190
00:12:47,980 --> 00:12:49,100
go through every color.

191
00:12:49,840 --> 00:12:53,500
And in just this way, our proposed zero-finding algorithm broke.

192
00:12:54,380 --> 00:12:58,740
In fact, if you think about it, you can find a big loop whose border goes through every

193
00:12:58,740 --> 00:13:02,380
possible color without there being a zero inside of it.

194
00:13:03,080 --> 00:13:07,160
Now that's not to say that we were wrong in our claims about tiny loops when we said

195
00:13:07,160 --> 00:13:12,160
that a forever narrowing loop going through every color has to be narrowing in on a zero.

196
00:13:12,800 --> 00:13:17,120
But what made a mess of things for us is that this does-my-border-go-through-every-color-or-not

197
00:13:17,120 --> 00:13:22,140
property doesn't combine in a nice, predictable way when you combine regions.

198
00:13:23,000 --> 00:13:27,700
But don't worry, it turns out we can modify this slightly to a more sophisticated property

199
00:13:27,700 --> 00:13:30,740
that does combine to give us what we want.

200
00:13:38,180 --> 00:13:42,560
The idea is that instead of simply asking whether we can find a color at some point

201
00:13:42,560 --> 00:13:47,180
along the loop, let's keep more careful track of how these colors change as we walk

202
00:13:47,180 --> 00:13:47,860
around that loop.

203
00:13:48,580 --> 00:13:49,960
Let me show you what I mean with an example.

204
00:13:50,400 --> 00:13:53,260
I'll keep a little color wheel up here in the corner to help us keep track.

205
00:13:53,940 --> 00:13:58,220
When the colors along a path of inputs move through the rainbow in a specific direction,

206
00:13:58,220 --> 00:14:04,260
from red to yellow, yellow to green, green to blue, or blue to red, the output is swinging

207
00:14:04,260 --> 00:14:04,960
clockwise.

208
00:14:05,700 --> 00:14:10,080
But on the other hand, if the colors move the other way through the rainbow, from blue

209
00:14:10,080 --> 00:14:16,320
to green, green to yellow, yellow to red, or red to blue, the output is swinging counterclockwise.

210
00:14:17,160 --> 00:14:23,040
So walking along this short path here, the colors wind a fifth of the way clockwise through

211
00:14:23,040 --> 00:14:23,620
the color wheel.

212
00:14:24,260 --> 00:14:29,700
And walking along this path here, the colors wind another fifth of the way clockwise through

213
00:14:29,700 --> 00:14:30,360
the color wheel.

214
00:14:31,160 --> 00:14:35,460
And of course that means that if you go through both paths, one after the other, the colors

215
00:14:35,460 --> 00:14:38,640
wind a total of two-fifths of a full turn clockwise.

216
00:14:39,280 --> 00:14:43,780
The total amount of winding just adds up, and this is going to be key, this is the kind

217
00:14:43,780 --> 00:14:46,300
of straightforward combining that will be useful to us.

218
00:14:46,980 --> 00:14:51,520
Now when I say total amount of winding, I want you to imagine an old-fashioned odometer

219
00:14:51,520 --> 00:14:57,900
that ticks forward as the arrow spins clockwise, but backwards as the arrow spins counterclockwise.

220
00:14:58,740 --> 00:15:02,460
So counterclockwise winding counts as negative clockwise winding.

221
00:15:03,000 --> 00:15:07,000
The outputs may turn a lot, but if some of that turning is in the opposite direction,

222
00:15:07,280 --> 00:15:08,260
it cancels out.

223
00:15:08,920 --> 00:15:13,300
For example, if you move forward along this path, and then move backwards along that same

224
00:15:13,300 --> 00:15:16,260
path, the total amount of winding ends up being zero.

225
00:15:16,260 --> 00:15:21,860
The backwards movement literally rewinds through the previously seen colors, reversing all

226
00:15:21,860 --> 00:15:25,080
the previous winding, and returning the odometer back to where it started.

227
00:15:26,280 --> 00:15:29,900
For our purposes, we'll care most about looking at the winding along loops.

228
00:15:30,440 --> 00:15:33,680
For example, let's say we walk around this entire loop clockwise.

229
00:15:34,240 --> 00:15:38,920
The outputs that we come across wind around a total of three full clockwise turns.

230
00:15:39,360 --> 00:15:44,340
The colors swung through the rainbow, ROYGBIV, in order, from red to red again, and then

231
00:15:44,340 --> 00:15:46,180
again, and again.

232
00:15:46,920 --> 00:15:51,920
In the jargon mathematicians use, we say that along this loop, the total winding number

233
00:15:51,920 --> 00:15:52,720
is three.

234
00:15:53,820 --> 00:15:58,140
Now for other loops, it could be any other whole number, maybe a larger one if the output

235
00:15:58,140 --> 00:16:03,080
swings around many times as the input walks around a single loop, or it could be a smaller

236
00:16:03,080 --> 00:16:08,200
number if the output only swings around once or twice, or that winding number could even

237
00:16:08,200 --> 00:16:13,900
be a negative integer if the output was swinging counterclockwise as we walk clockwise around

238
00:16:13,900 --> 00:16:14,320
the loop.

239
00:16:15,180 --> 00:16:18,860
But along any loop, this total amount of winding has to be a whole number.

240
00:16:20,880 --> 00:16:23,880
I mean, by the time you get back to where you started, you'll have the same output

241
00:16:23,880 --> 00:16:25,000
that you started with.

242
00:16:26,180 --> 00:16:30,880
Incidentally, if a path actually contains a point where the output is precisely zero,

243
00:16:31,520 --> 00:16:35,740
then technically you can't define a winding number along that, since the output has no

244
00:16:35,740 --> 00:16:36,660
particular direction.

245
00:16:37,400 --> 00:16:41,080
Now this isn't going to be a problem for us, because our whole goal is to find zeros,

246
00:16:41,080 --> 00:16:44,040
so if this ever comes up, we just lucked out early.

247
00:16:44,980 --> 00:16:48,140
Alright, so the main thing to notice about these winding numbers is that they add up

248
00:16:48,140 --> 00:16:50,680
nicely when you combine paths into bigger paths.

249
00:16:54,800 --> 00:16:59,540
But what we really want is for the winding numbers along the borders of regions to add

250
00:16:59,540 --> 00:17:02,440
up nicely when we combine regions to make bigger regions.

251
00:17:02,980 --> 00:17:04,520
So do we have that property?

252
00:17:07,760 --> 00:17:09,060
Well, take a look.

253
00:17:09,540 --> 00:17:14,900
The winding number as we go clockwise around this region on the left is the sum of the

254
00:17:14,900 --> 00:17:19,860
winding numbers from these four paths, and the winding as we go clockwise around this

255
00:17:19,860 --> 00:17:24,360
region on the right is the sum of the winding numbers from these four paths.

256
00:17:25,340 --> 00:17:29,840
And when we combine those two regions into a bigger one, most of those paths become part

257
00:17:29,840 --> 00:17:32,500
of the clockwise border of the bigger region.

258
00:17:33,260 --> 00:17:35,160
And as for those two paths that don't?

259
00:17:35,680 --> 00:17:37,100
Well, they cancel out perfectly.

260
00:17:37,520 --> 00:17:41,760
One of them is just the reverse, the rewinding of the other one, like we saw before.

261
00:17:42,560 --> 00:17:47,900
So the winding numbers along borders of regions add up in just the way we want them to.

262
00:17:48,640 --> 00:17:53,520
Also side note, this reasoning about oriented borders adding up nicely like this comes up

263
00:17:53,520 --> 00:17:56,680
a lot in mathematics, and it often goes under the name Stokes' theorem.

264
00:17:57,060 --> 00:18:01,020
Those of you who've studied multivariable calculus might recognize it from that context.

265
00:18:02,360 --> 00:18:07,440
So now, finally, with winding numbers in hand, we can get back to our equation solving goals.

266
00:18:08,000 --> 00:18:12,460
The problem with the region we saw earlier is that even though its border passed through

267
00:18:12,460 --> 00:18:15,940
all possible colors, the winding number was actually zero.

268
00:18:16,500 --> 00:18:22,200
The outputs wound around halfway, through yellow to red, and then started going counterclockwise

269
00:18:22,200 --> 00:18:26,240
back the other direction, then continued going through blue and hitting red from the other

270
00:18:26,240 --> 00:18:30,860
way, all in such a way that the total winding netted out to be zero.

271
00:18:31,840 --> 00:18:35,960
But if you find a loop which not only hits every color, but has the stronger condition

272
00:18:35,960 --> 00:18:41,100
of a non-zero winding number, then if you were to split it in half, you're guaranteed

273
00:18:41,100 --> 00:18:46,500
that at least one of those halves has a non-zero winding number as well, since things add up

274
00:18:46,500 --> 00:18:48,040
nicely in the way we want them to.

275
00:18:48,440 --> 00:18:53,500
So in this way, you can keep going, narrowing in further and further onto one point.

276
00:18:54,050 --> 00:18:58,460
And as you narrow in onto a point, you'll be doing so with tiny loops that have non-zero

277
00:18:58,460 --> 00:19:02,940
winding numbers, which implies they go through all possible colors, and therefore, like I

278
00:19:02,940 --> 00:19:06,400
said before, the point they're narrowing in on must be a zero.

279
00:19:07,420 --> 00:19:08,360
And that's it!

280
00:19:08,600 --> 00:19:13,300
We have now created a two-dimensional equation solver, and this time, I promise, there are

281
00:19:13,300 --> 00:19:13,860
no bugs.

282
00:19:14,560 --> 00:19:17,540
Winding numbers are precisely the tool we need to make this work.

283
00:19:18,100 --> 00:19:22,560
We can now solve equations that look like where does f of x equal g of x in two dimensions

284
00:19:22,560 --> 00:19:26,820
just by considering how the difference between f and g winds around.

285
00:19:27,600 --> 00:19:31,840
Whenever we have a loop whose winding number isn't zero, we can run this algorithm on

286
00:19:31,840 --> 00:19:35,100
it and we're guaranteed to find a solution somewhere within it.

287
00:19:35,660 --> 00:19:39,840
And what's more, just like in one dimension, this algorithm is incredibly efficient.

288
00:19:40,240 --> 00:19:44,840
We keep narrowing in on half the size of our region each round, thus quickly narrowing

289
00:19:44,840 --> 00:19:49,880
in on the zeros, and all the while, we only have to check the value of the function along

290
00:19:49,880 --> 00:19:54,400
points of these loops, rather than checking it on the many points of the interior.

291
00:19:55,160 --> 00:20:00,160
So in some sense, the overall work done is proportional only to the search space's

292
00:20:00,160 --> 00:20:03,740
perimeter, not the full area, which is amazing.

293
00:20:04,920 --> 00:20:09,440
Now once you understand what's going on, it's weirdly mesmerizing to just watch this

294
00:20:09,440 --> 00:20:12,960
in action, giving it some function and letting it search for zeros.

295
00:20:13,620 --> 00:20:18,680
Like I said before, complex numbers are two-dimensional, so let's apply it to some equation with

296
00:20:18,680 --> 00:20:19,560
complex numbers.

297
00:20:20,300 --> 00:20:25,260
For example, here's the algorithm finding the zeros of the function x to the fifth minus

298
00:20:25,260 --> 00:20:28,100
x minus one over the complex plane.

299
00:20:28,900 --> 00:20:33,340
It started by considering a very large region around the origin, which ended up having a

300
00:20:33,340 --> 00:20:34,480
winding number of five.

301
00:20:35,280 --> 00:20:39,880
Each time you find a loop with a non-zero winding number, you split it in half and figure

302
00:20:39,880 --> 00:20:42,120
out the winding number of the two smaller loops.

303
00:20:42,700 --> 00:20:46,960
Either one or both of them is guaranteed to have a non-zero winding number, and when you

304
00:20:46,960 --> 00:20:51,480
see this, you know there's a zero somewhere inside that smaller loop, so you keep going

305
00:20:51,480 --> 00:20:53,400
in the same way, searching the smaller space.

306
00:20:54,180 --> 00:20:58,980
We also stop exploring a region if the path we're computing along happens to stumble

307
00:20:58,980 --> 00:21:02,900
across a zero, which actually happened once for this example on the right half here.

308
00:21:03,280 --> 00:21:07,380
Those rare occurrences interfere with our ability to compute winding numbers, but hey,

309
00:21:07,600 --> 00:21:08,140
we got a zero.

310
00:21:09,220 --> 00:21:12,920
And as for loops whose winding number is zero, you just don't explore those further.

311
00:21:12,920 --> 00:21:16,200
Maybe they have a solution inside, maybe they don't, we have no guarantees.

312
00:21:18,400 --> 00:21:22,620
And letting our equation solver continue in the same way, it eventually converges to lots

313
00:21:22,620 --> 00:21:24,020
of zeros for this polynomial.

314
00:21:25,840 --> 00:21:30,380
By the way, it is no coincidence that the total winding number in this example happened

315
00:21:30,380 --> 00:21:31,000
to be five.

316
00:21:31,580 --> 00:21:37,340
With complex numbers, the operation x to the n directly corresponds to walking around the

317
00:21:37,340 --> 00:21:42,240
output's origin n times as you walk around the input's origin once.

318
00:21:44,680 --> 00:21:50,440
So with the polynomial, for large enough inputs, every term other than the leading term becomes

319
00:21:50,440 --> 00:21:51,980
insignificant in comparison.

320
00:21:52,480 --> 00:21:58,760
So any complex polynomial whose leading term is x to the n has a winding number of n around

321
00:21:58,760 --> 00:21:59,780
a large enough loop.

322
00:22:00,540 --> 00:22:06,060
And in that way, our winding number technology actually guarantees that every complex polynomial

323
00:22:06,060 --> 00:22:06,820
has a zero.

324
00:22:07,480 --> 00:22:12,000
This is such an important fact that mathematicians call it the fundamental theorem of algebra.

325
00:22:13,800 --> 00:22:17,960
Having an algorithm for finding numerical solutions to equations like this is extremely

326
00:22:17,960 --> 00:22:22,160
practical, but the fundamental theorem of algebra is a good example of how these winding

327
00:22:22,160 --> 00:22:27,780
numbers are also quite useful on a theoretical level, guaranteeing the existence of a solution

328
00:22:27,780 --> 00:22:32,340
to a broad class of equations for suitable conditions, which is much more the kind of

329
00:22:32,340 --> 00:22:33,940
thing mathematicians like thinking about.

330
00:22:33,940 --> 00:22:39,400
I'll show you a couple more amazing applications of this in the context of topology in a follow-up

331
00:22:39,400 --> 00:22:43,440
video, which includes correcting a mistake from an old 3blue1brown video.

332
00:22:44,060 --> 00:22:44,440
Which one?

333
00:22:44,940 --> 00:22:48,840
Well, watch all of the videos, everything on this channel, and see if you can spot the

334
00:22:48,840 --> 00:22:49,600
error first.

335
00:22:51,300 --> 00:22:55,840
The primary author of this video is one of the newest 3blue1brown team members, Sridhar

336
00:22:56,280 --> 00:22:56,720
Ramesh.

337
00:23:03,940 --> 00:23:10,060
Thank you for watching.

