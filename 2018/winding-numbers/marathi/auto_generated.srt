1
00:00:03,060 --> 00:00:06,140
येथे दोन गोष्टी आहेत, मुख्य विषय आणि मेटा विषय.

2
00:00:06,640 --> 00:00:11,653
मुख्य विषय द्विमितीय समीकरणे, दोन अज्ञात वास्तविक संख्या असलेल्या गोष्टी किंवा एक जटिल 

3
00:00:11,653 --> 00:00:16,840
संख्या असलेल्या एकल अज्ञात असलेल्या गोष्टी सोडवण्यासाठी हे खरोखर व्यवस्थित अल्गोरिदम असेल.

4
00:00:17,440 --> 00:00:20,495
उदाहरणार्थ, जर तुम्हाला बहुपदीची जटिल मुळे शोधायची असतील, 

5
00:00:20,495 --> 00:00:24,603
किंवा कदाचित रीमन झेटा फंक्शनच्या दशलक्ष डॉलर्सपैकी काही शून्य शोधायचे असतील, 

6
00:00:24,603 --> 00:00:26,500
तर हे अल्गोरिदम तुमच्यासाठी ते करेल.

7
00:00:26,800 --> 00:00:30,060
आणि ही पद्धत खूप सुंदर आहे, कारण बरेच रंग गुंतलेले आहेत.

8
00:00:30,540 --> 00:00:33,538
आणि सर्वात महत्त्वाचे म्हणजे, मूळ अंतर्निहित कल्पना ही समीकरणे 

9
00:00:33,538 --> 00:00:37,013
सोडवण्यासाठी या अल्गोरिदमच्या पलीकडे सर्व प्रकारच्या गणितांना लागू होते, 

10
00:00:37,013 --> 00:00:40,060
ज्यामध्ये थोडीशी टोपोलॉजी समाविष्ट आहे, ज्याबद्दल मी नंतर बोलेन.

11
00:00:40,740 --> 00:00:44,582
पण याला तुमचा 20 मिनिटे किंवा त्याहून अधिक वेळ खरोखरच उपयुक्त ठरतो 

12
00:00:44,582 --> 00:00:48,137
तो म्हणजे हा धडा संपूर्ण गणितात अधिक सामान्यपणे उपयुक्त ठरतो, 

13
00:00:48,137 --> 00:00:51,980
जो एकमेकांशी छान रचना करणाऱ्या रचना परिभाषित करण्याचा प्रयत्न करतो.

14
00:00:52,400 --> 00:00:54,480
कथा जसजशी पुढे जाईल तसतसे मला त्यात काय म्हणायचे आहे ते तुम्हाला दिसेल.

15
00:00:55,060 --> 00:00:58,783
2d इनपुट आणि 2d आउटपुट असलेल्या फंक्शन्ससह केस प्रवृत्त करण्यासाठी, 

16
00:00:58,783 --> 00:01:03,108
चला सोप्या पद्धतीने सुरुवात करूया, ज्या फंक्शन्स रिअल नंबर घेतात आणि रिअल नंबर 

17
00:01:03,108 --> 00:01:03,820
बाहेर टाकतात.

18
00:01:05,080 --> 00:01:09,720
जर तुम्हाला हे जाणून घ्यायचे असेल की x चे फंक्शन f हे x च्या इतर फंक्शन g च्या बरोबरीचे 

19
00:01:09,720 --> 00:01:14,203
असते, तर तुम्ही हे त्या फंक्शन्सचे आलेख कधी एकमेकांना छेदतात हे शोधत आहात असे वाटेल, 

20
00:01:14,203 --> 00:01:14,520
बरोबर?

21
00:01:15,020 --> 00:01:18,520
म्हणजे, ते तुम्हाला एक इनपुट देते जेथे दोन्ही फंक्शन्सचे आउटपुट समान असते.

22
00:01:18,520 --> 00:01:21,910
अगदी साधे उदाहरण घ्यायचे असेल तर कल्पना करा की x 

23
00:01:21,910 --> 00:01:25,300
चा f x चा वर्ग आहे आणि x चा g हे स्थिर फलन 2 आहे.

24
00:01:25,960 --> 00:01:28,640
दुसऱ्या शब्दांत, तुम्हाला २ चे वर्गमूळ शोधायचे आहे.

25
00:01:29,460 --> 00:01:33,097
जरी तुम्हाला वर्गमूळ शोधण्याबद्दल जवळजवळ काहीही माहित नसले तरीही, 

26
00:01:33,097 --> 00:01:38,002
तुम्ही कदाचित पाहू शकता की 1 स्क्वेअर 2 पेक्षा कमी आहे आणि 2 स्क्वेअर 2 पेक्षा मोठा आहे, 

27
00:01:38,002 --> 00:01:41,860
त्यामुळे तुम्हाला समजेल, अहो, त्या दोन मूल्यांमध्ये काहीतरी उपाय असेल.

28
00:01:42,580 --> 00:01:44,713
आणि मग तुम्हाला ते आणखी कमी करायचे असल्यास, कदाचित 

29
00:01:44,713 --> 00:01:47,140
तुम्ही अर्ध्या बिंदूचे वर्गीकरण करण्याचा प्रयत्न करा, 1.५.

30
00:01:47,720 --> 00:01:50,710
हे 2 असल्याचे बाहेर येते.25, थोडे जास्त, त्यामुळे 

31
00:01:50,710 --> 00:01:53,760
तुम्ही 1 आणि 1 मधील प्रदेशावर लक्ष केंद्रित कराल.५.

32
00:01:54,760 --> 00:01:57,353
आणि असेच, तुम्ही कदाचित हे कसे चालू राहील ते पाहू शकता, 

33
00:01:57,353 --> 00:02:00,920
तुम्ही मध्यबिंदूवर संगणन करत राहाल आणि नंतर तुमची शोध जागा अर्धी कापून टाकाल.

34
00:02:05,100 --> 00:02:10,339
यावर विचार करण्याचा आणखी एक मार्ग, जो एकदा उच्च परिमाणांवर पोहोचल्यानंतर आपल्यासाठी सोपे 

35
00:02:10,339 --> 00:02:15,520
करेल, त्याऐवजी या दोन कार्यांमधील फरक शून्य असताना समतुल्य प्रश्नावर लक्ष केंद्रित करणे.

36
00:02:16,100 --> 00:02:20,074
त्या अटींमध्ये, आम्हाला इनपुटचा एक प्रदेश सापडला जिथे तो फरक 

37
00:02:20,074 --> 00:02:24,180
एका टोकाला नकारात्मक होता आणि तो दुसऱ्या टोकाला सकारात्मक होता.

38
00:02:24,180 --> 00:02:27,869
आम्ही त्याचे दोन भाग केले आणि अर्ध्या भागाकडे आमचे लक्ष वेधले 

39
00:02:27,869 --> 00:02:31,500
ते एक होते जेथे सर्वात बाहेरील बिंदूंमध्ये भिन्न चिन्हे होती.

40
00:02:31,500 --> 00:02:35,675
याप्रमाणे, आम्ही कायमचे चालू ठेवू शकलो, सीमेवर वेगवेगळ्या चिन्हे असलेला 

41
00:02:35,675 --> 00:02:40,082
प्रत्येक प्रदेश घेऊन, त्याच्या अर्ध्या भागांमध्ये एक लहान असा प्रदेश शोधून, 

42
00:02:40,082 --> 00:02:44,200
शेवटी आपल्याला एका बिंदूवर संकुचित व्हायचे आहे जे अचूक शून्य होणार आहे.

43
00:02:45,760 --> 00:02:50,415
थोडक्यात, समीकरण सोडवणे हे नेहमी एखादे विशिष्ट कार्य शून्य असते तेव्हा शोधून 

44
00:02:50,415 --> 00:02:54,225
काढले जाऊ शकते आणि तसे करण्यासाठी, आमच्याकडे हे हिरिस्टिक आहे, 

45
00:02:54,225 --> 00:02:57,671
जर f एका बिंदूवर सकारात्मक आणि दुसर्‍या बिंदूवर ऋण असेल, 

46
00:02:57,671 --> 00:03:00,816
तर आपण त्या दरम्यान कुठेतरी शोधू शकता ते शून्य आहे, 

47
00:03:00,816 --> 00:03:03,900
कमीतकमी अचानक उडी न घेता सर्वकाही सहजतेने बदलले तर.

48
00:03:03,900 --> 00:03:07,212
मी तुम्हाला दाखवू इच्छित असलेली आश्चर्यकारक गोष्ट म्हणजे तुम्ही अशा 

49
00:03:07,212 --> 00:03:09,550
प्रकारच्या विचारसरणीला द्विमितीय समीकरणांमध्ये, 

50
00:03:09,550 --> 00:03:13,008
फंक्शन्समधील समीकरणांमध्ये विस्तारित करू शकता ज्यांचे इनपुट आणि आउटपुट 

51
00:03:13,008 --> 00:03:14,080
दोन्ही द्विमितीय आहेत.

52
00:03:14,739 --> 00:03:17,920
उदाहरणार्थ, जटिल संख्या 2D आहेत आणि आम्ही विकसित करत 

53
00:03:17,920 --> 00:03:21,400
असलेले हे साधन जटिल समीकरणांवर उपाय शोधण्यासाठी योग्य आहे.

54
00:03:22,360 --> 00:03:25,422
आता, आपण या 2D फंक्शन्सबद्दल खूप बोलणार आहोत, चला एक संक्षिप्त 

55
00:03:25,422 --> 00:03:28,340
बाजूची पायरी घेऊ आणि आपण हे कसे स्पष्ट करू याचा विचार करूया.

56
00:03:29,060 --> 00:03:32,873
2D इनपुट आणि 2D आउटपुटसह फंक्शनचा आलेख तयार करण्यासाठी चार आयामांची 

57
00:03:32,873 --> 00:03:37,584
आवश्यकता असेल आणि ते आमच्या 2D स्क्रीनवर आमच्या 3D जगात इतके चांगले काम करणार नाही, 

58
00:03:37,584 --> 00:03:40,220
परंतु आमच्याकडे अजूनही काही चांगले पर्याय आहेत.

59
00:03:40,859 --> 00:03:45,440
एक म्हणजे फक्त इनपुट स्पेस आणि आउटपुट स्पेस दोन्ही शेजारी शेजारी पाहणे.

60
00:03:45,540 --> 00:03:51,021
इनपुट स्पेसमधील प्रत्येक बिंदू आऊटपुट स्पेसमधील एका विशिष्ट बिंदूकडे सरकतो आणि त्या इनपुट 

61
00:03:51,021 --> 00:03:56,260
बिंदूभोवती फिरणे आउटपुट स्पेसमधील विशिष्ट हालचालींशी कसे संबंधित आहे हे मी दाखवू शकतो.

62
00:03:56,940 --> 00:03:59,815
आम्ही विचारात घेतलेली सर्व फंक्शन्स सतत असतील, 

63
00:03:59,815 --> 00:04:05,321
या अर्थाने की इनपुटमधील छोटे छोटे बदल केवळ आउटपुटमधील छोट्या छोट्या बदलांशी संबंधित आहेत, 

64
00:04:05,321 --> 00:04:06,300
अचानक उडी नाहीत.

65
00:04:06,940 --> 00:04:11,451
आमच्याकडे दुसरा पर्याय आहे की आउटपुट स्पेसच्या उत्पत्तीपासून त्या आउटपुट 

66
00:04:11,451 --> 00:04:16,579
बिंदूपर्यंत बाणाची कल्पना करणे आणि त्या बाणाची सूक्ष्म आवृत्ती इनपुट बिंदूशी जोडणे.

67
00:04:17,360 --> 00:04:21,541
हे आपल्याला एका दृष्टीक्षेपात, दिलेला इनपुट पॉइंट कोठे जातो किंवा पूर्ण 

68
00:04:21,541 --> 00:04:25,840
वेक्टर फील्ड काढून अनेक भिन्न इनपुट पॉइंट कोठे जातात याची कल्पना देऊ शकते.

69
00:04:27,600 --> 00:04:31,651
आणि दुर्दैवाने जेव्हा तुम्ही हे बर्‍याच बिंदूंवर करता तेव्हा ते खूपच गोंधळात पडू शकते, 

70
00:04:31,651 --> 00:04:34,864
म्हणून मी येथे सर्व बाण समान आकाराचे बनवतो, आणि याचा अर्थ काय आहे की 

71
00:04:34,864 --> 00:04:37,100
प्रत्येक आउटपुट बिंदूची दिशा आपल्याला समजू शकते.

72
00:04:37,780 --> 00:04:42,002
परंतु द्विमितीय फंक्शन्स स्पष्ट करण्याचा कदाचित सर्वात सुंदर मार्ग आणि हा व्हिडिओ 

73
00:04:42,002 --> 00:04:46,380
आम्ही सर्वात जास्त वापरणार आहोत, त्या आउटपुट स्पेसमधील प्रत्येक बिंदूला रंगाने जोडणे.

74
00:04:47,220 --> 00:04:52,692
येथे आम्ही रंगछटांचा वापर केला आहे, जिथे रंग इंद्रधनुष्य किंवा कलर व्हीलच्या बाजूने पडतो, 

75
00:04:52,692 --> 00:04:56,888
मूळपासून दूर असलेल्या दिशेशी जुळण्यासाठी, आणि आम्ही मूळपासून अंतराशी 

76
00:04:56,888 --> 00:04:59,260
जुळण्यासाठी अंधार किंवा चमक वापरत आहोत.

77
00:04:59,260 --> 00:05:04,752
उदाहरणार्थ, आउटपुटच्या या अॅरेवर लक्ष केंद्रित करताना, हे सर्व बिंदू लाल आहेत, 

78
00:05:04,752 --> 00:05:09,620
परंतु मूळच्या जवळ असलेले थोडे गडद आहेत आणि दूर असलेले थोडेसे उजळ आहेत.

79
00:05:10,360 --> 00:05:15,282
आणि आउटपुटच्या या अॅरेवर फोकस केल्यास, सर्व बिंदू हिरवे आहेत आणि पुन्हा, 

80
00:05:15,282 --> 00:05:17,980
मूळच्या जवळ म्हणजे गडद, दूर म्हणजे फिकट.

81
00:05:18,780 --> 00:05:23,514
आणि असेच, आम्ही येथे करत आहोत प्रत्येक दिशेला एक विशिष्ट रंग नियुक्त करणे, 

82
00:05:23,514 --> 00:05:24,840
हे सर्व सतत बदलत आहे.

83
00:05:25,359 --> 00:05:29,395
तुमच्या लक्षात येईल की येथे अंधार आणि ब्राइटनेसमधील फरक खूपच सूक्ष्म आहेत, 

84
00:05:29,395 --> 00:05:33,645
परंतु या व्हिडिओसाठी, आम्हाला फक्त आउटपुटची दिशा आहे, मोठेपणा, रंगछटांची नाही, 

85
00:05:33,645 --> 00:05:34,560
ब्राइटनेसची नाही.

86
00:05:35,300 --> 00:05:39,944
तुमच्या लक्षात येण्याजोगी ब्राइटनेसची एक महत्त्वाची गोष्ट म्हणजे उगमस्थानाजवळ, 

87
00:05:39,944 --> 00:05:43,120
ज्याला कोणतीही विशिष्ट दिशा नाही, सर्व रंग काळे होतात.

88
00:05:44,440 --> 00:05:49,104
म्हणून फंक्शन्सबद्दल विचार करण्यासाठी, आता आम्ही प्रत्येक आउटपुटसाठी रंग ठरवले आहे, 

89
00:05:49,104 --> 00:05:53,435
आम्ही आउटपुट स्पेसमध्ये ज्या बिंदूवर उतरतो त्या बिंदूच्या रंगावर आधारित इनपुट 

90
00:05:53,435 --> 00:05:57,100
स्पेसमधील प्रत्येक बिंदूला रंग देऊन 2D फंक्शन्सची कल्पना करू शकतो.

91
00:05:57,840 --> 00:06:02,196
मला त्या इनपुट स्पेसमधून अनेक भिन्न बिंदू आउटपुट स्पेसमध्ये त्यांच्या संबंधित आउटपुटवर 

92
00:06:02,196 --> 00:06:06,353
फिरतात, नंतर ते जिथे उतरतात त्या बिंदूच्या रंगाच्या आधारे पेंट केले जातात आणि नंतर 

93
00:06:06,353 --> 00:06:10,360
इनपुट स्पेसमध्ये ते जिथून आले होते त्या ठिकाणी परत येण्याची कल्पना करायला आवडते.

94
00:06:11,640 --> 00:06:14,167
इनपुट स्पेसमधील प्रत्येक बिंदूसाठी असे केल्याने, 

95
00:06:14,167 --> 00:06:18,140
फंक्शन प्रत्येक बिंदू कुठे घेते त्या इनपुट स्पेसकडे पाहून तुम्हाला समजू शकेल.

96
00:06:18,140 --> 00:06:23,074
उदाहरणार्थ, डावीकडील गुलाबी बिंदूंची ही पट्टी आपल्याला सांगते की ते सर्व 

97
00:06:23,074 --> 00:06:28,280
बिंदू कुठेतरी गुलाबी दिशेने, आउटपुट स्पेसच्या खालच्या डावीकडे मॅप केले जातात.

98
00:06:29,780 --> 00:06:34,900
तसेच ते तीन बिंदू जे काळे आहेत त्यांच्या सभोवताली अनेक रंग आहेत ते शून्यावर जातात.

99
00:06:39,340 --> 00:06:44,110
ठीक आहे, 1D केस प्रमाणेच, 2D फंक्शन्सची समीकरणे सोडवणे नेहमी एखादे 

100
00:06:44,110 --> 00:06:48,880
विशिष्ट फंक्शन शून्य असते तेव्हा विचारून पुन्हा तयार केले जाऊ शकते.

101
00:06:49,580 --> 00:06:54,978
त्यामुळे आत्ताच आमचे आव्हान आहे, एक अल्गोरिदम तयार करा ज्याने 

102
00:06:54,978 --> 00:07:00,900
दिलेल्या 2D फंक्शनचे कोणते इनपुट पॉइंट शून्यावर जातात हे शोधून काढा.

103
00:07:00,900 --> 00:07:04,600
ते काळे ठिपके पाहून तुम्ही असा कलर मॅप पाहत असाल तर 

104
00:07:04,600 --> 00:07:08,300
फंक्शनचे शून्य कुठे आहेत हे तुम्हाला आधीच माहीत आहे.

105
00:07:08,620 --> 00:07:11,080
तर ते मोजते का?

106
00:07:11,080 --> 00:07:15,072
लक्षात ठेवा की यासारखे आकृती तयार करण्यासाठी, आमच्याकडे कॉम्प्युटरने 

107
00:07:15,072 --> 00:07:17,907
विमानातील सर्व पिक्सेलवर फंक्शनची गणना केली आहे, 

108
00:07:17,907 --> 00:07:22,189
परंतु आमचे ध्येय अधिक कार्यक्षम अल्गोरिदम शोधणे आहे ज्यासाठी शक्य तितक्या 

109
00:07:22,189 --> 00:07:26,760
कमी बिंदूंवर फंक्शनची गणना करणे आवश्यक आहे. , फक्त रंगांचे मर्यादित दृश्य आहे, 

110
00:07:26,760 --> 00:07:27,860
म्हणून बोलायचे आहे.

111
00:07:29,360 --> 00:07:34,431
आणि अधिक सैद्धांतिक दृष्टिकोनातून, दिलेल्या प्रदेशात शून्य अस्तित्त्वात 

112
00:07:34,431 --> 00:07:39,080
आहे की नाही याची परिस्थिती सांगणारी सामान्य रचना असणे चांगले होईल.

113
00:07:39,080 --> 00:07:43,446
लक्षात ठेवा, एका परिमाणात मुख्य अंतर्दृष्टी अशी होती की जर सतत कार्य एका बिंदूवर 

114
00:07:43,446 --> 00:07:47,920
सकारात्मक असेल आणि दुसर्‍या ठिकाणी नकारात्मक असेल तर, ते कुठेतरी शून्य असले पाहिजे.

115
00:07:48,840 --> 00:07:50,580
मग आपण ते दोन आयामांमध्ये कसे वाढवायचे?

116
00:07:50,940 --> 00:07:53,580
आम्हाला चिन्हांबद्दल बोलण्यासाठी काही प्रकारचे अॅनालॉग हवे आहेत.

117
00:07:54,700 --> 00:07:58,140
चिन्हे काय आहेत याचा विचार करण्याचा एक मार्ग म्हणजे दिशानिर्देश.

118
00:07:58,800 --> 00:08:01,150
सकारात्मक म्हणजे तुम्ही संख्या रेषेसह उजवीकडे निर्देशित करत 

119
00:08:01,150 --> 00:08:03,500
आहात आणि नकारात्मक म्हणजे तुम्ही डावीकडे निर्देशित करत आहात.

120
00:08:04,200 --> 00:08:08,664
द्विमितीय परिमाणांना देखील दिशा असते, परंतु त्यांच्यासाठी पर्याय अधिक विस्तृत आहेत, 

121
00:08:08,664 --> 00:08:11,800
ते शक्यतांच्या संपूर्ण वर्तुळात कुठेही निर्देशित करू शकतात.

122
00:08:12,530 --> 00:08:18,105
तर त्याच प्रकारे आम्ही एका परिमाणात विचारत होतो की दिलेले फंक्शन एका श्रेणीच्या 

123
00:08:18,105 --> 00:08:23,193
सीमारेषेवर सकारात्मक किंवा नकारात्मक आहे की नाही, जे फक्त दोन बिंदू आहे, 

124
00:08:23,193 --> 00:08:27,514
2d फंक्शन्ससाठी आम्ही प्रदेशाची सीमा पाहणार आहोत, जे लूप आहे, 

125
00:08:27,514 --> 00:08:30,860
आणि त्या सीमेवर फंक्शनच्या आउटपुटची दिशा विचारा.

126
00:08:33,640 --> 00:08:37,732
उदाहरणार्थ, आपण पाहतो की या शून्याभोवती असलेल्या या लूपमध्ये, 

127
00:08:37,732 --> 00:08:43,145
आउटपुट प्रत्येक संभाव्य दिशेने, इंद्रधनुष्याचे सर्व रंग, लाल, पिवळा, हिरवा, निळा, 

128
00:08:43,145 --> 00:08:45,060
परत लाल, आणि वाटेत सर्व काही.

129
00:08:45,700 --> 00:08:50,455
पण इथे या लूपमध्ये, आत शून्य नसल्यामुळे, आऊटपुट प्रत्येक रंगातून जात नाही, 

130
00:08:50,455 --> 00:08:54,640
ते काही केशरी रंगांमधून जाते, परंतु, म्हणा, हिरवा किंवा निळा नाही.

131
00:08:55,300 --> 00:08:58,460
आणि हे आशादायक आहे, गोष्टी एका परिमाणात कसे कार्य करतात असे दिसते.

132
00:08:59,340 --> 00:09:05,330
कदाचित त्याच प्रकारे 1d फंक्शनने 1d प्रदेशाच्या सीमेवर दोन्ही संभाव्य चिन्हे घेतल्यास, 

133
00:09:05,330 --> 00:09:10,357
आत कुठेतरी एक शून्य असेल, तर आपण असे गृहित धरू शकतो की जर 2d फंक्शन सर्व 

134
00:09:10,357 --> 00:09:15,659
संभाव्य दिशांच्या, सर्व संभाव्य रंगांच्या आउटपुटवर आदळते. 2d प्रदेशाची सीमा, 

135
00:09:15,659 --> 00:09:19,860
नंतर त्या प्रदेशाच्या आत कुठेतरी ती शून्यावर जाणे आवश्यक आहे.

136
00:09:20,960 --> 00:09:23,565
तर हा आमचा अंदाज आहे, आणि हे खरे असले पाहिजे का आणि 

137
00:09:23,565 --> 00:09:26,120
तसे असल्यास का याचा विचार करण्यासाठी थोडा वेळ घ्या.

138
00:09:27,420 --> 00:09:30,257
जर आपण काही इनपुट पॉईंटभोवती लहान लूपचा विचार करू लागलो, 

139
00:09:30,257 --> 00:09:32,945
तर आपल्याला माहित आहे की सर्व काही सतत चालू असल्याने, 

140
00:09:32,945 --> 00:09:36,280
आपले फंक्शन त्यास संबंधित आउटपुटजवळील काही लहान लूपमध्ये घेऊन जाते.

141
00:09:37,140 --> 00:09:40,520
पण पहा, बहुतेक लहान लूपसाठी, आउटपुट रंगात बदलते.

142
00:09:40,980 --> 00:09:45,257
जर तुम्ही शून्याव्यतिरिक्त कोणताही आउटपुट पॉइंट निवडला आणि त्याच्या जवळ एक 

143
00:09:45,257 --> 00:09:49,420
पुरेसा घट्ट लूप काढला, तर लूपचे रंग सर्व त्या बिंदूच्या रंगासारखेच असतील.

144
00:09:49,840 --> 00:09:54,110
येथे एक घट्ट लूप सर्व निळसर आहे, येथे एक घट्ट लूप सर्व पिवळसर आहे, 

145
00:09:54,110 --> 00:09:57,680
तुम्हाला नक्कीच इंद्रधनुष्याचा प्रत्येक रंग मिळणार नाही.

146
00:09:58,220 --> 00:10:02,122
सर्व रंग मिळत असतानाही तुम्ही त्याच्याभोवती लूप घट्ट 

147
00:10:02,122 --> 00:10:06,320
करू शकता असा एकमेव मुद्दा म्हणजे रंगहीन मूळ, शून्य स्वतः.

148
00:10:07,100 --> 00:10:11,163
तर हे खरंच आहे की जर तुमच्याकडे इंद्रधनुष्याच्या प्रत्येक रंगातून लूप जात असतील, 

149
00:10:11,163 --> 00:10:14,524
घट्ट होत असतील, घट्ट होत असतील, एखाद्या बिंदूवर संकुचित होत असतील, 

150
00:10:14,524 --> 00:10:16,380
तर तो बिंदू खरं तर शून्य असला पाहिजे.

151
00:10:17,320 --> 00:10:21,860
आणि म्हणून आपल्या एक-आयामी समीकरण सॉल्व्हरप्रमाणेच 2d समीकरण सॉल्व्हर सेट करूया.

152
00:10:22,260 --> 00:10:25,953
जेव्हा आपल्याला एक मोठा प्रदेश सापडतो ज्याची सीमा प्रत्येक रंगातून जाते, 

153
00:10:25,953 --> 00:10:29,900
तेव्हा त्याचे दोन भाग करा आणि नंतर प्रत्येक अर्ध्या भागाच्या सीमेवरील रंग पहा.

154
00:10:30,540 --> 00:10:35,083
येथे दर्शविलेल्या उदाहरणामध्ये, डाव्या अर्ध्या भागाची सीमा सर्व रंगांमधून जात नाही, 

155
00:10:35,083 --> 00:10:38,600
उदाहरणार्थ, केशरी पिवळ्या दिशांना मॅप करणारे कोणतेही बिंदू नाहीत.

156
00:10:39,060 --> 00:10:41,072
म्हणून आम्ही यापुढे शोधू इच्छित नाही असे सांगण्याचा 

157
00:10:41,072 --> 00:10:42,620
एक मार्ग म्हणून मी हे क्षेत्र धूसर करेन.

158
00:10:43,380 --> 00:10:47,208
उजवा अर्धा भाग सर्व रंगांमधून जातो, हिरव्या दिशेने बराच वेळ घालवतो, 

159
00:10:47,208 --> 00:10:50,700
नंतर पिवळ्या नारंगी लाल, तसेच निळ्या जांभळ्या गुलाबीमधून जातो.

160
00:10:51,560 --> 00:10:54,536
आता लक्षात ठेवा, याचा अर्थ असा आहे की या सीमारेषेचे बिंदू 

161
00:10:54,536 --> 00:10:57,360
सर्व संभाव्य दिशानिर्देशांच्या आउटपुटवर मॅप केले जातात.

162
00:10:57,840 --> 00:11:00,137
म्हणून आम्ही ते आणखी एक्सप्लोर करू, पुन्हा उपविभाजन 

163
00:11:00,137 --> 00:11:01,860
करून आणि प्रत्येक प्रदेशाची सीमा तपासू.

164
00:11:02,880 --> 00:11:06,560
शीर्षाची सीमा सर्व हिरवी आहे, म्हणून आम्ही तेथे शोधणे थांबवू.

165
00:11:06,860 --> 00:11:09,520
पण तळाचा भाग उपविभागास पात्र होण्याइतका रंगीबेरंगी आहे.

166
00:11:10,340 --> 00:11:12,020
आणि असेच चालू ठेवा.

167
00:11:12,360 --> 00:11:15,931
कोणत्या उपप्रदेशाला सर्व संभाव्य रंगांची सीमा आहे ते तपासा, 

168
00:11:15,931 --> 00:11:20,991
म्हणजे त्या सीमारेषेचे बिंदू सर्व संभाव्य दिशांना मॅप केले जातात आणि त्या प्रदेशांना 

169
00:11:20,991 --> 00:11:26,289
आम्ही एक-आयामी केससाठी केले तसे अर्धे कापत राहा, शेवटी आम्हाला कार्याच्या शून्यावर नेले. 

170
00:11:26,289 --> 00:11:27,480
अरे, एक सेकंद थांबा.

171
00:11:28,880 --> 00:11:29,920
येथे काय घडले?

172
00:11:30,380 --> 00:11:34,505
तळाशी उजवीकडे असलेल्या या शेवटच्या उपविभागांपैकी एकही सर्व रंगांमधून गेला नाही, 

173
00:11:34,505 --> 00:11:38,063
म्हणून आमचे अल्गोरिदम थांबले कारण ते यापैकी एकही शोधू इच्छित नव्हते, 

174
00:11:38,063 --> 00:11:39,920
परंतु त्यास शून्य देखील सापडले नाही.

175
00:11:41,060 --> 00:11:43,300
ठीक आहे, स्पष्टपणे येथे काहीतरी चुकीचे आहे.

176
00:11:43,540 --> 00:11:46,520
आणि ते ठीक आहे, चुकीचे असणे हा गणिताचा नियमित भाग आहे.

177
00:11:46,520 --> 00:11:49,726
जर आपण मागे वळून पाहिलं तर, आमच्याकडे ही गृहितक होती आणि ती आम्हाला 

178
00:11:49,726 --> 00:11:52,980
या प्रस्तावित अल्गोरिदमकडे घेऊन गेली, त्यामुळे आमची कुठेतरी चूक झाली.

179
00:11:53,660 --> 00:11:56,418
आणि गणितात चांगले असणे म्हणजे प्रथमच बरोबर असण्याबद्दल नाही, 

180
00:11:56,418 --> 00:12:00,443
ते काळजीपूर्वक मागे वळून पाहण्याची आणि चुका समजून घेण्याची आणि त्या कशा दुरुस्त करायच्या 

181
00:12:00,443 --> 00:12:01,800
हे समजून घेण्याची लवचिकता आहे.

182
00:12:02,480 --> 00:12:06,536
आता इथे अडचण अशी आहे की आमच्याकडे एक प्रदेश होता ज्याची सीमा प्रत्येक रंगातून गेली होती, 

183
00:12:06,536 --> 00:12:10,546
परंतु जेव्हा आम्ही ती मध्यभागी विभाजित केली तेव्हा कोणत्याही उपक्षेत्राची सीमा प्रत्येक 

184
00:12:10,546 --> 00:12:14,466
रंगातून जात नव्हती, आमच्याकडे पुढे कुठे शोधायचे याचे पर्याय नव्हते आणि त्यामुळे शून्य 

185
00:12:14,466 --> 00:12:14,740
तोडले.

186
00:12:14,740 --> 00:12:17,560
शोधक आता एका परिमाणात, अशा प्रकारची गोष्ट कधीच घडली नाही.

187
00:12:17,980 --> 00:12:21,921
कोणत्याही वेळी तुमच्याकडे मध्यांतर असेल ज्यांच्या शेवटच्या बिंदूंना भिन्न चिन्हे असतील, 

188
00:12:21,921 --> 00:12:25,324
तुम्ही ते विभाजित केल्यास, तुम्हाला माहित आहे की तुम्हाला काही उप-अंतरबिंदू 

189
00:12:25,324 --> 00:12:28,460
मिळण्याची हमी आहे ज्यांच्या शेवटच्या बिंदूंना देखील भिन्न चिन्हे आहेत.

190
00:12:29,020 --> 00:12:32,226
किंवा दुसर्‍या मार्गाने सांगा, कोणत्याही वेळी तुमच्याकडे दोन अंतराल असतील 

191
00:12:32,226 --> 00:12:35,520
ज्यांचे शेवटचे बिंदू चिन्हे बदलत नाहीत, जर तुम्ही ते एकत्र केले तर तुम्हाला 

192
00:12:35,520 --> 00:12:38,380
एक मोठा मध्यांतर मिळेल ज्याचे शेवटचे बिंदू देखील चिन्ह बदलत नाहीत.

193
00:12:39,080 --> 00:12:43,997
परंतु दोन मितींमध्ये, दोन प्रदेश शोधणे शक्य आहे ज्यांच्या सीमा प्रत्येक रंगातून 

194
00:12:43,997 --> 00:12:49,100
जात नाहीत, परंतु ज्यांच्या सीमा प्रत्येक रंगातून जात नसलेल्या प्रदेशाला मिळू शकतात.

195
00:12:49,840 --> 00:12:53,500
आणि अशा प्रकारे, आमचे प्रस्तावित शून्य-शोध अल्गोरिदम तोडले.

196
00:12:54,380 --> 00:12:58,495
खरं तर, जर तुम्ही त्याबद्दल विचार केला तर, तुम्हाला एक मोठा लूप सापडेल 

197
00:12:58,495 --> 00:13:02,380
ज्याची सीमा त्याच्या आत शून्य न होता प्रत्येक संभाव्य रंगातून जाते.

198
00:13:03,080 --> 00:13:06,221
आता याचा अर्थ असा नाही की लहान लूपबद्दलच्या आमच्या दाव्यांमध्ये 

199
00:13:06,221 --> 00:13:09,264
आम्ही चुकीचे होतो जेव्हा आम्ही असे म्हटले की प्रत्येक रंगातून 

200
00:13:09,264 --> 00:13:12,160
जाणारा कायमचा संकुचित लूप शून्यावर संकुचित करणे आवश्यक आहे.

201
00:13:12,800 --> 00:13:15,883
पण आमच्यासाठी गोंधळाची गोष्ट अशी आहे की हे-माझ्या-सीमेवर-प्रत्येक-रं

202
00:13:15,883 --> 00:13:19,918
ग-किंवा-नसते-प्रत्येक-रंगाने-किंवा-नसून-जाते-जेव्हा तुम्ही प्रदेश एकत्र करता तेव्हा छान, 

203
00:13:19,918 --> 00:13:22,140
अंदाज लावता येण्याजोग्या पद्धतीने एकत्र होत नाही.

204
00:13:23,000 --> 00:13:26,740
परंतु काळजी करू नका, असे दिसून आले की आम्ही हे थोडेसे सुधारित करून अधिक 

205
00:13:26,740 --> 00:13:30,740
अत्याधुनिक मालमत्तेमध्ये बदलू शकतो जे आम्हाला हवे ते देण्यासाठी एकत्रित करते.

206
00:13:38,180 --> 00:13:43,076
कल्पना अशी आहे की आपल्याला लूपच्या बाजूने कधीतरी रंग सापडतो की नाही हे विचारण्याऐवजी, 

207
00:13:43,076 --> 00:13:47,860
आपण त्या लूपभोवती फिरत असताना हे रंग कसे बदलतात याचा अधिक काळजीपूर्वक मागोवा ठेवूया.

208
00:13:48,580 --> 00:13:49,960
मला काय म्हणायचे आहे ते मी उदाहरणासह दाखवतो.

209
00:13:50,400 --> 00:13:53,260
आम्हाला ट्रॅक ठेवण्यात मदत करण्यासाठी मी येथे कोपऱ्यात थोडे कलर व्हील ठेवीन.

210
00:13:53,940 --> 00:13:58,628
जेव्हा इनपुटच्या मार्गावरील रंग इंद्रधनुष्यातून विशिष्ट दिशेने लाल ते पिवळे, 

211
00:13:58,628 --> 00:14:02,220
पिवळे ते हिरवे, हिरवे ते निळे किंवा निळे ते लाल अशा दिशेने 

212
00:14:02,220 --> 00:14:04,960
जातात तेव्हा आउटपुट घड्याळाच्या दिशेने फिरते.

213
00:14:05,700 --> 00:14:10,398
पण दुसरीकडे, जर रंग इंद्रधनुष्यातून दुसऱ्या मार्गाने, निळ्या ते हिरव्या, 

214
00:14:10,398 --> 00:14:13,616
हिरव्या ते पिवळे, पिवळे ते लाल किंवा लाल ते निळे, 

215
00:14:13,616 --> 00:14:16,320
तर आउटपुट घड्याळाच्या उलट दिशेने फिरत आहे.

216
00:14:17,160 --> 00:14:22,087
त्यामुळे येथे या छोट्या वाटेवरून चालताना, रंग घड्याळाच्या काट्याच्या 

217
00:14:22,087 --> 00:14:26,800
पाचव्या दिशेने कलर व्हीलमधून वारे वाहतात आणि या वाटेवरून चालताना, 

218
00:14:26,800 --> 00:14:31,300
रंग घड्याळाच्या दिशेने आणखी एक पाचवा वारा कलर व्हीलमधून वळवतात.

219
00:14:31,300 --> 00:14:34,922
अर्थात, याचा अर्थ असा की जर तुम्ही दोन्ही मार्गांवरून एकामागून एक जात असाल, 

220
00:14:34,922 --> 00:14:38,640
तर रंग घड्याळाच्या काट्याच्या दिशेने पूर्ण वळणाच्या दोन-पंचमांश भागावर फिरतात.

221
00:14:39,280 --> 00:14:43,552
वळणाची एकूण रक्कम फक्त जोडते, आणि हे महत्त्वाचे ठरणार आहे, 

222
00:14:43,552 --> 00:14:47,100
हे असे सरळ संयोजन आहे जे आपल्यासाठी उपयुक्त ठरेल.

223
00:14:47,100 --> 00:14:50,542
जेव्हा मी वळणाचे एकूण प्रमाण सांगतो, तेव्हा मला तुम्ही जुन्या पद्धतीच्या 

224
00:14:50,542 --> 00:14:54,079
ओडोमीटरची कल्पना करावी असे वाटते जे बाण घड्याळाच्या काट्याच्या दिशेने फिरत 

225
00:14:54,079 --> 00:14:57,900
असताना पुढे टिकून राहते, परंतु बाण घड्याळाच्या उलट दिशेने फिरतो तेव्हा मागे जातो.

226
00:14:58,740 --> 00:15:00,618
त्यामुळे घड्याळाच्या उलट दिशेने वळण घड्याळाच्या उलट 

227
00:15:00,618 --> 00:15:02,460
दिशेने वळण घड्याळाच्या दिशेने वळण म्हणून गणले जाते.

228
00:15:03,000 --> 00:15:08,260
आउटपुट खूप वळू शकतात, परंतु त्यातील काही वळण विरुद्ध दिशेने असल्यास ते रद्द होते.

229
00:15:08,920 --> 00:15:14,116
उदाहरणार्थ, जर तुम्ही या वाटेने पुढे गेलात, आणि नंतर त्याच वाटेने मागे सरकत असाल, 

230
00:15:14,116 --> 00:15:19,503
तर वळणाचे एकूण प्रमाण शून्य होते, मागची हालचाल अक्षरशः पूर्वी पाहिलेल्या रंगांद्वारे 

231
00:15:19,503 --> 00:15:25,080
रिवाइंड होते, मागील सर्व वळण उलटून जाते आणि परत येते. ओडोमीटर जिथून सुरू झाला तिकडे परत.

232
00:15:26,280 --> 00:15:29,900
आमच्या हेतूंसाठी, आम्ही लूपच्या बाजूने वळण पाहण्याकडे सर्वात जास्त काळजी घेऊ.

233
00:15:30,440 --> 00:15:34,780
उदाहरणार्थ, आपण या संपूर्ण लूपभोवती घड्याळाच्या दिशेने फिरतो असे समजा.

234
00:15:34,780 --> 00:15:40,365
एकूण तीन पूर्ण घड्याळाच्या दिशेने वळणाच्या आसपास वाऱ्यावर येणारे आऊटपुट, 

235
00:15:40,365 --> 00:15:46,180
रंग इंद्रधनुष्यातून, क्रमाने, लाल ते पुन्हा लाल, आणि नंतर पुन्हा आणि पुन्हा.

236
00:15:46,920 --> 00:15:54,020
गणितज्ञ वापरत असलेल्या शब्दजालांमध्ये, आम्ही म्हणतो की या लूपसह, एकूण वळण संख्या 3 आहे.

237
00:15:54,020 --> 00:15:56,897
इतर लूपसाठी, ती इतर कोणतीही पूर्ण संख्या असू शकते, 

238
00:15:56,897 --> 00:16:00,789
इनपुट एकाच लूपभोवती फिरत असताना आउटपुट अनेक वेळा फिरत असल्यास कदाचित 

239
00:16:00,789 --> 00:16:04,795
मोठी संख्या असू शकते, किंवा आउटपुट फक्त एक किंवा दोनदा फिरत असल्यास ही 

240
00:16:04,795 --> 00:16:05,980
संख्या लहान असू शकते.

241
00:16:06,320 --> 00:16:09,164
किंवा ती वळण संख्या ऋण पूर्णांक देखील असू शकते, 

242
00:16:09,164 --> 00:16:14,320
जर आउटपुट घड्याळाच्या उलट दिशेने फिरत असताना आपण लूपभोवती घड्याळाच्या दिशेने फिरत असतो.

243
00:16:15,180 --> 00:16:18,860
परंतु कोणत्याही लूपमध्ये, वळणाची ही एकूण रक्कम पूर्ण संख्या असावी.

244
00:16:20,880 --> 00:16:22,904
म्हणजे, तुम्ही जिथे सुरुवात केली होती तिथे परत येईपर्यंत 

245
00:16:22,904 --> 00:16:25,000
तुमच्याकडे तेच आउटपुट असेल ज्याने तुम्ही सुरुवात केली होती.

246
00:16:26,180 --> 00:16:30,651
योगायोगाने, जर एखाद्या पाथमध्ये आउटपुट तंतोतंत शून्य असेल असा बिंदू असेल, 

247
00:16:30,651 --> 00:16:35,122
तर तांत्रिकदृष्ट्या तुम्ही त्या बाजूने वळण क्रमांक परिभाषित करू शकत नाही, 

248
00:16:35,122 --> 00:16:37,540
कारण आउटपुटला कोणतीही विशिष्ट दिशा नसते.

249
00:16:37,540 --> 00:16:41,911
हे आमच्यासाठी समस्या होणार नाही, कारण आमचे संपूर्ण ध्येय शून्य शोधणे आहे, 

250
00:16:41,911 --> 00:16:45,160
म्हणून जर हे कधी समोर आले तर आम्ही नशीब लवकर बाहेर पडू.

251
00:16:45,160 --> 00:16:48,030
या वळण संख्यांबद्दल लक्षात येण्यासारखी मुख्य गोष्ट म्हणजे जेव्हा 

252
00:16:48,030 --> 00:16:50,680
तुम्ही मोठ्या पाथांमध्ये पथ एकत्र करता तेव्हा ते छान जोडतात.

253
00:16:54,800 --> 00:16:58,401
परंतु जेव्हा आपण क्षेत्र एकत्र करून मोठे प्रदेश बनवतो तेव्हा प्रदेशांच्या 

254
00:16:58,401 --> 00:17:02,440
सीमारेषेवरील वळण संख्या चांगल्या प्रकारे जोडल्या जाव्यात हे आपल्याला खरोखर हवे आहे.

255
00:17:02,980 --> 00:17:04,520
मग ती मालमत्ता आपल्याकडे आहे का?

256
00:17:07,760 --> 00:17:09,060
बरं, एक नजर टाका.

257
00:17:09,540 --> 00:17:13,406
डावीकडील या प्रदेशाभोवती घड्याळाच्या दिशेने जाताना वळणाची 

258
00:17:13,406 --> 00:17:16,940
संख्या ही या चार मार्गांवरील वळण संख्यांची बेरीज आहे.

259
00:17:17,500 --> 00:17:21,050
आणि उजवीकडील या प्रदेशाभोवती आपण घड्याळाच्या दिशेने जाताना 

260
00:17:21,050 --> 00:17:24,359
वळण घेतो तो या चार मार्गांवरील वळण संख्यांची बेरीज आहे.

261
00:17:25,339 --> 00:17:28,357
आणि जेव्हा आपण त्या दोन प्रदेशांना एका मोठ्या प्रदेशात एकत्र करतो, 

262
00:17:28,357 --> 00:17:32,049
तेव्हा त्यातील बहुतेक मार्ग मोठ्या प्रदेशाच्या घड्याळाच्या दिशेने असलेल्या सीमेचा 

263
00:17:32,049 --> 00:17:32,500
भाग बनतात.

264
00:17:33,260 --> 00:17:35,800
आणि नाही त्या दोन मार्गांसाठी म्हणून?

265
00:17:36,020 --> 00:17:39,041
ते पूर्णपणे रद्द करतात, त्यापैकी एक फक्त उलट आहे, 

266
00:17:39,041 --> 00:17:41,760
दुसऱ्याचे रिवाइंडिंग जसे आपण आधी पाहिले होते.

267
00:17:42,560 --> 00:17:47,900
म्हणून प्रदेशांच्या सीमारेषेवरील वळण संख्या आपल्याला पाहिजे त्या प्रकारे जोडतात.

268
00:17:48,640 --> 00:17:52,509
हे देखील लक्षात ठेवा की, अशा प्रकारे जोडलेल्या ओरिएंटेड सीमांबद्दलचे हे तर्क 

269
00:17:52,509 --> 00:17:56,680
गणितामध्ये बरेच काही आढळतात आणि ते बर्‍याचदा स्टोक्सच्या प्रमेयाच्या नावाखाली जाते.

270
00:17:57,060 --> 00:17:58,923
तुमच्यापैकी ज्यांनी मल्टीव्हेरिएबल कॅल्क्युलसचा 

271
00:17:58,923 --> 00:18:01,020
अभ्यास केला आहे ते कदाचित त्या संदर्भावरून ओळखू शकतील.

272
00:18:02,360 --> 00:18:04,926
तर आता, शेवटी, हातात संख्या वळवून, आम्ही आमच्या 

273
00:18:04,926 --> 00:18:07,440
समीकरण सोडवण्याच्या उद्दिष्टांकडे परत येऊ शकतो.

274
00:18:08,000 --> 00:18:12,029
आपण आधी पाहिलेल्या प्रदेशाची समस्या अशी आहे की जरी त्याची सीमा सर्व 

275
00:18:12,029 --> 00:18:15,940
संभाव्य रंगांमधून गेली असली तरी वळण संख्या प्रत्यक्षात शून्य होती.

276
00:18:16,500 --> 00:18:20,983
आऊटपुट अर्ध्या वाटेने, पिवळ्या ते लाल रंगाच्या दिशेने घसरले आणि नंतर 

277
00:18:20,983 --> 00:18:24,167
घड्याळाच्या उलट दिशेने दुसऱ्या दिशेने जाऊ लागले, 

278
00:18:24,167 --> 00:18:28,260
नंतर निळ्यातून जाणे आणि दुसऱ्या मार्गाने लाल मारणे सुरू ठेवले, 

279
00:18:28,260 --> 00:18:30,860
सर्व अशा प्रकारे की एकूण वळण शून्य झाले.

280
00:18:31,840 --> 00:18:35,217
परंतु जर तुम्हाला असा लूप सापडला जो केवळ प्रत्येक रंगालाच मारत नाही, 

281
00:18:35,217 --> 00:18:38,006
तर त्यात शून्य नसलेल्या वळण क्रमांकाची मजबूत स्थिती आहे, 

282
00:18:38,006 --> 00:18:40,600
तर तुम्ही जर ते अर्ध्या भागामध्ये विभाजित केले असेल, 

283
00:18:40,600 --> 00:18:43,635
तर तुम्हाला खात्री आहे की त्या अर्ध्यापैकी किमान एक भाग असेल. 

284
00:18:43,635 --> 00:18:48,040
नॉन-झिरो वाइंडिंग नंबर देखील, कारण गोष्टी आपल्याला पाहिजे त्या मार्गाने छान जोडल्या जातात.

285
00:18:48,440 --> 00:18:53,500
अशाप्रकारे, तुम्ही पुढे जात राहू शकता, एका बिंदूवर आणखी आणि पुढे जाऊ शकता.

286
00:18:54,050 --> 00:18:57,937
आणि जसे तुम्ही एका बिंदूवर संकुचित कराल, तेव्हा तुम्ही असे लहान लूपसह कराल ज्यामध्ये 

287
00:18:57,937 --> 00:19:01,963
शून्य नसलेल्या वळण संख्या आहेत, ज्याचा अर्थ असा होतो की ते सर्व संभाव्य रंगांमधून जातात 

288
00:19:01,963 --> 00:19:05,256
आणि म्हणून मी आधी म्हटल्याप्रमाणे, ते ज्या बिंदूमध्ये संकुचित होत आहेत. 

289
00:19:05,256 --> 00:19:06,400
वर शून्य असणे आवश्यक आहे.

290
00:19:07,420 --> 00:19:08,360
आणि तेच!

291
00:19:08,600 --> 00:19:11,484
आम्ही आता द्विमितीय समीकरण सॉल्व्हर तयार केले आहे, 

292
00:19:11,484 --> 00:19:13,860
आणि यावेळी, मी वचन देतो, कोणतेही बग नाहीत.

293
00:19:14,560 --> 00:19:17,540
हे काम करण्यासाठी आपल्याला आवश्यक असलेले साधन म्हणजे वाइंडिंग नंबर्स.

294
00:19:18,100 --> 00:19:22,124
आता आपण f आणि g वाऱ्यांमधला फरक कसा आहे याचा विचार करून दोन 

295
00:19:22,124 --> 00:19:26,820
परिमाणांमध्ये x च्या x समान g कुठे आहे असे दिसणारी समीकरणे सोडवू शकतो.

296
00:19:27,600 --> 00:19:30,690
जेव्हाही आमच्याकडे असा लूप असेल ज्याचा वाइंडिंग क्रमांक शून्य नसेल, 

297
00:19:30,690 --> 00:19:34,236
तेव्हा आम्ही त्यावर हा अल्गोरिदम चालवू शकतो, आणि आम्ही त्यामध्ये कुठेतरी उपाय 

298
00:19:34,236 --> 00:19:35,100
शोधण्याची हमी देतो.

299
00:19:35,660 --> 00:19:39,840
आणि आणखी काय, एका परिमाणाप्रमाणे, हे अल्गोरिदम आश्चर्यकारकपणे कार्यक्षम आहे.

300
00:19:40,240 --> 00:19:44,740
आम्ही प्रत्येक फेरीत आमच्या क्षेत्राच्या अर्ध्या आकारात संकुचित करत राहतो, 

301
00:19:44,740 --> 00:19:48,400
अशा प्रकारे त्वरीत शून्यांवर संकुचित होतो, आणि या सर्व वेळी, 

302
00:19:48,400 --> 00:19:53,740
आम्हाला फक्त या लूपच्या बिंदूंसह फंक्शनचे मूल्य तपासावे लागते, ते अनेकांवर तपासण्याऐवजी. 

303
00:19:53,740 --> 00:19:54,400
आतील बिंदू.

304
00:19:55,160 --> 00:20:00,948
त्यामुळे काही अर्थाने, केलेले एकूण कार्य केवळ शोध जागेच्या परिमितीच्या प्रमाणात आहे, 

305
00:20:00,948 --> 00:20:03,740
पूर्ण क्षेत्रफळ नाही, जे आश्चर्यकारक आहे.

306
00:20:04,920 --> 00:20:08,244
आता काय चालले आहे हे समजल्यानंतर, हे फक्त कृतीत पाहणे, 

307
00:20:08,244 --> 00:20:12,960
त्यास काही कार्य देणे आणि शून्य शोधू देणे हे विचित्रपणे मंत्रमुग्ध करणारे आहे.

308
00:20:13,620 --> 00:20:16,428
मी आधी म्हटल्याप्रमाणे, जटिल संख्या द्विमितीय आहेत, 

309
00:20:16,428 --> 00:20:19,560
म्हणून चला ते जटिल संख्यांच्या काही समीकरणांवर लागू करूया.

310
00:20:20,300 --> 00:20:24,121
उदाहरणार्थ, कॉम्प्लेक्स प्लेनवर x ते पाचव्या वजा 

311
00:20:24,121 --> 00:20:28,100
x वजा एक फंक्शनचे शून्य शोधणारे अल्गोरिदम येथे आहे.

312
00:20:28,900 --> 00:20:33,026
हे उत्पत्तीच्या आजूबाजूच्या खूप मोठ्या प्रदेशाचा विचार करून सुरू झाले, 

313
00:20:33,026 --> 00:20:34,480
ज्याची वळण संख्या 5 होती.

314
00:20:35,280 --> 00:20:38,652
प्रत्येक वेळी तुम्हाला शून्य नसलेल्या वळण क्रमांकासह लूप सापडेल तेव्हा 

315
00:20:38,652 --> 00:20:42,120
तुम्ही ते अर्ध्यामध्ये विभाजित कराल आणि दोन लहान वळणांची वळण संख्या काढा.

316
00:20:42,700 --> 00:20:46,219
त्यापैकी एक किंवा दोन्हीपैकी एक शून्य नसलेला वळण क्रमांक असण्याची हमी आहे, 

317
00:20:46,219 --> 00:20:49,880
आणि जेव्हा तुम्ही हे पाहता तेव्हा तुम्हाला कळते की त्या लहान लूपमध्ये कुठेतरी 

318
00:20:49,880 --> 00:20:53,400
एक शून्य आहे, म्हणून तुम्ही लहान जागेचा शोध घेत त्याच प्रकारे पुढे जात रहा.

319
00:20:54,180 --> 00:20:58,540
आम्ही ज्या मार्गावर मोजणी करत आहोत तो शून्यात अडखळला तर आम्ही एखाद्या प्रदेशाचे अन्वेषण 

320
00:20:58,540 --> 00:21:02,900
करणे देखील थांबवतो, जे येथे उजव्या अर्ध्या भागावर या उदाहरणासाठी प्रत्यक्षात एकदाच घडले.

321
00:21:03,280 --> 00:21:06,784
त्या दुर्मिळ घटनांमुळे वळण संख्या मोजण्याच्या आमच्या क्षमतेत व्यत्यय येतो, 

322
00:21:06,784 --> 00:21:08,140
पण अहो, आम्हाला शून्य मिळाले.

323
00:21:09,220 --> 00:21:12,920
आणि ज्या वळणांची संख्या शून्य आहे अशा लूपसाठी, तुम्ही त्या पुढे शोधू नका.

324
00:21:12,920 --> 00:21:16,200
कदाचित त्यांच्याकडे आतून उपाय असेल, कदाचित ते नसेल, आम्हाला कोणतीही हमी नाही.

325
00:21:18,400 --> 00:21:21,070
आणि आपले समीकरण सोडवणारे असेच चालू ठेवल्यास, ते 

326
00:21:21,070 --> 00:21:24,020
शेवटी या बहुपदीसाठी अनेक शून्यांमध्ये रूपांतरित होते.

327
00:21:25,840 --> 00:21:31,000
तसे, या उदाहरणातील एकूण वळण संख्या 5 आहे हा योगायोग नाही.

328
00:21:31,580 --> 00:21:37,194
कॉम्प्लेक्स नंबर्ससह, x ते n हे ऑपरेशन थेट आउटपुटच्या उत्पत्तीच्या n वेळाभोवती 

329
00:21:37,194 --> 00:21:42,240
फिरण्याशी संबंधित आहे जेव्हा तुम्ही इनपुटच्या उत्पत्तीभोवती एकदा फिरता.

330
00:21:44,680 --> 00:21:48,262
त्यामुळे बहुपदासह, पुरेशा मोठ्या इनपुटसाठी, अग्रगण्य 

331
00:21:48,262 --> 00:21:51,980
पदाव्यतिरिक्त इतर प्रत्येक संज्ञा तुलनेत क्षुल्लक ठरते.

332
00:21:52,480 --> 00:21:55,965
म्हणून कोणत्याही जटिल बहुपदी ज्याचे अग्रस्थान x ते n 

333
00:21:55,965 --> 00:21:59,780
आहे त्यामध्ये n ची वळण संख्या पुरेशी मोठ्या लूपभोवती असते.

334
00:22:00,540 --> 00:22:03,916
आणि अशा प्रकारे, आमचे वळण क्रमांक तंत्रज्ञान प्रत्यक्षात 

335
00:22:03,916 --> 00:22:06,820
हमी देते की प्रत्येक जटिल बहुपदीमध्ये शून्य असते.

336
00:22:07,480 --> 00:22:12,000
हे इतके महत्त्वाचे सत्य आहे की गणितज्ञ याला बीजगणिताचे मूलभूत प्रमेय म्हणतात.

337
00:22:13,800 --> 00:22:19,113
यासारख्या समीकरणांची संख्यात्मक निराकरणे शोधण्यासाठी अल्गोरिदम असणे अत्यंत व्यावहारिक 

338
00:22:19,113 --> 00:22:23,993
आहे, परंतु बीजगणिताचे मूलभूत प्रमेय हे वळण संख्या सैद्धांतिक स्तरावर देखील कसे 

339
00:22:23,993 --> 00:22:29,183
उपयुक्त आहेत याचे एक चांगले उदाहरण आहे, जे मोठ्या वर्गाच्या समाधानाच्या अस्तित्वाची 

340
00:22:29,183 --> 00:22:33,940
हमी देते. योग्य परिस्थितीसाठी समीकरणे, ज्याचा विचार गणितज्ञांना करायला आवडतो.

341
00:22:33,940 --> 00:22:38,549
मी तुम्हाला फॉलो-अप व्हिडिओमध्ये टोपोलॉजीच्या संदर्भात याचे आणखी काही आश्चर्यकारक 

342
00:22:38,549 --> 00:22:43,440
ऍप्लिकेशन्स दाखवतो, ज्यामध्ये जुन्या 3ब्लू1ब्राउन व्हिडिओमधून चूक सुधारणे समाविष्ट आहे.

343
00:22:44,060 --> 00:22:44,440
कोणता?

344
00:22:44,940 --> 00:22:49,600
बरं, या चॅनेलवरील सर्व व्हिडिओ, सर्व काही पहा आणि प्रथम त्रुटी शोधू शकता का ते पहा.

345
00:22:51,300 --> 00:23:10,060
या व्हिडिओचे प्राथमिक लेखक नवीन 3ब्लू1ब्राउन टीम सदस्यांपैकी एक आहेत, श्रीधर रमेश.

