1
00:00:00,000 --> 00:00:06,720
Há duas coisas aqui, o tópico principal e o metatópico.

2
00:00:06,720 --> 00:00:10,440
O tópico principal será esse algoritmo realmente bacana para resolver equações

3
00:00:10,440 --> 00:00:14,900
bidimensionais, coisas que possuem duas incógnitas reais, ou também aquelas

4
00:00:14,900 --> 00:00:17,420
que envolvem uma única incógnita que é um número complexo.

5
00:00:17,420 --> 00:00:21,840
Por exemplo, se você quisesse encontrar as raízes complexas de um

6
00:00:21,840 --> 00:00:25,960
polinômio, ou talvez alguns daqueles zeros de milhões de dólares da

7
00:00:25,960 --> 00:00:26,960
função zeta de Riemann, este algoritmo faria isso por você.

8
00:00:27,000 --> 00:00:30,520
E esse método é super bonito, já que envolve muitas cores.

9
00:00:30,520 --> 00:00:34,960
E o mais importante, a ideia central subjacente se aplica a todos

10
00:00:34,960 --> 00:00:39,600
os tipos de matemática, muito além deste algoritmo para resolver equações,

11
00:00:39,600 --> 00:00:40,600
incluindo um pouco de topologia, sobre a qual falarei mais tarde.

12
00:00:40,600 --> 00:00:44,880
Mas o que realmente faz com que isso valha cerca de 20 minutos

13
00:00:44,880 --> 00:00:50,000
do seu tempo é que ele ilustra uma lição muito mais útil em

14
00:00:50,000 --> 00:00:52,120
matemática, que é tentar definir construções que se combinem bem entre si.

15
00:00:52,120 --> 00:00:55,460
Você verá o que quero dizer com isso à medida que a história avança.

16
00:00:55,460 --> 00:00:59,460
Para motivar o caso com funções que possuem entradas 2d e saídas 2d, vamos começar de

17
00:00:59,460 --> 00:01:05,100
forma mais simples, com funções que apenas pegam um número real e cospem um número real.

18
00:01:05,100 --> 00:01:10,060
Se você quiser saber quando uma função f de x é igual a alguma outra função g de

19
00:01:10,060 --> 00:01:14,260
x, você pode pensar nisso como uma busca por quando os gráficos dessas funções se cruzam, certo?

20
00:01:14,260 --> 00:01:19,340
Quero dizer, isso fornece uma entrada onde ambas as funções têm a mesma saída.

21
00:01:19,340 --> 00:01:24,520
Para dar um exemplo muito simples, imagine que f de x é

22
00:01:24,520 --> 00:01:25,520
x ao quadrado e g de x é a função constante 2.

23
00:01:25,520 --> 00:01:29,620
Em outras palavras, você deseja encontrar a raiz quadrada de 2.

24
00:01:29,620 --> 00:01:33,620
Mesmo que você não saiba quase nada sobre como encontrar raízes quadradas, provavelmente poderá

25
00:01:33,620 --> 00:01:39,260
ver que 1 ao quadrado é menor que 2 e 2 ao quadrado é

26
00:01:39,260 --> 00:01:42,640
maior que 2, então você percebe, ah, haverá alguma solução entre esses dois valores.

27
00:01:42,640 --> 00:01:46,740
E então, se você quiser restringir ainda mais, talvez você tente elevar

28
00:01:46,740 --> 00:01:47,740
ao quadrado o ponto intermediário, 1. 5.

29
00:01:47,740 --> 00:01:53,060
Isso resulta em 2. 25, um pouco alto demais, então você focaria na

30
00:01:53,060 --> 00:01:54,940
região entre 1 e 1. 5.

31
00:01:54,940 --> 00:01:58,560
E assim por diante, você provavelmente pode ver como isso continuaria, você continuaria

32
00:01:58,560 --> 00:02:05,540
computando no ponto médio e depois cortaria seu espaço de busca pela metade.

33
00:02:05,540 --> 00:02:08,340
Outra maneira de pensar sobre isto, que nos tornará mais fácil

34
00:02:08,340 --> 00:02:13,560
quando chegarmos a dimensões superiores, é concentrar-nos na questão equivalente

35
00:02:13,560 --> 00:02:16,300
para quando a diferença entre estas duas funções é zero.

36
00:02:16,380 --> 00:02:20,700
Nesses termos, encontramos uma região de insumos onde essa diferença

37
00:02:20,700 --> 00:02:24,020
era negativa em uma ponta e positiva na outra.

38
00:02:24,020 --> 00:02:28,660
Nós o dividimos em dois, e a metade para a qual concentramos nossa

39
00:02:28,660 --> 00:02:31,600
atenção foi aquela em que os pontos mais externos apresentavam sinais variados.

40
00:02:31,600 --> 00:02:36,020
Assim, conseguimos continuar indefinidamente, pegando cada região com sinais variados na fronteira,

41
00:02:36,020 --> 00:02:41,320
encontrando uma região menor entre suas metades, sabendo que em última análise

42
00:02:41,320 --> 00:02:46,260
teremos que nos estreitar em um ponto que será exatamente zero.

43
00:02:46,260 --> 00:02:50,480
Resumindo, resolver equações sempre pode ser enquadrado como encontrar quando uma determinada função é

44
00:02:50,480 --> 00:02:55,780
igual a zero, e para fazer isso, temos esta heurística, se f for

45
00:02:55,780 --> 00:03:00,420
positivo em um ponto e negativo em outro ponto, você pode encontrar algum lugar

46
00:03:00,420 --> 00:03:03,980
entre onde é zero, pelo menos se tudo mudar suavemente, sem saltos repentinos.

47
00:03:03,980 --> 00:03:08,060
A coisa incrível que quero mostrar é que você

48
00:03:08,060 --> 00:03:13,220
pode estender esse tipo de pensamento para equações bidimensionais,

49
00:03:13,220 --> 00:03:14,940
equações entre funções cujas entradas e saídas são bidimensionais.

50
00:03:14,940 --> 00:03:19,540
Por exemplo, os números complexos são 2D e esta ferramenta que

51
00:03:19,540 --> 00:03:21,780
estamos desenvolvendo é perfeita para encontrar soluções para equações complexas.

52
00:03:21,780 --> 00:03:25,700
Agora, já que falaremos tanto sobre essas funções 2D, vamos

53
00:03:25,700 --> 00:03:29,380
dar um breve passo lateral e considerar como as ilustramos.

54
00:03:29,380 --> 00:03:34,700
Representar graficamente uma função com entrada e saída 2D exigiria quatro

55
00:03:34,700 --> 00:03:39,220
dimensões, e isso não funcionará tão bem em nosso mundo 3D

56
00:03:39,220 --> 00:03:41,140
em nossas telas 2D, mas ainda temos algumas boas opções.

57
00:03:41,140 --> 00:03:46,020
Uma é apenas observar o espaço de entrada e o espaço de saída lado a lado.

58
00:03:46,020 --> 00:03:51,540
Cada ponto no espaço de entrada se move para um ponto específico no espaço de saída, e posso

59
00:03:51,540 --> 00:03:57,060
mostrar como o movimento em torno desse ponto de entrada corresponde a certos movimentos no espaço de saída.

60
00:03:57,060 --> 00:04:01,460
Todas as funções que consideramos serão contínuas, no sentido

61
00:04:01,460 --> 00:04:05,820
de que pequenas alterações na entrada correspondem apenas a

62
00:04:05,820 --> 00:04:07,460
pequenas alterações na saída, não há saltos repentinos.

63
00:04:07,460 --> 00:04:12,020
Outra opção que temos é imaginar a seta desde a origem do espaço de saída até

64
00:04:12,020 --> 00:04:17,380
esse ponto de saída e anexar uma versão em miniatura dessa seta ao ponto de entrada.

65
00:04:17,380 --> 00:04:22,340
Isso pode nos dar uma ideia rápida de para onde vai um determinado ponto de

66
00:04:22,340 --> 00:04:27,580
entrada ou para onde vão muitos pontos de entrada diferentes, desenhando o campo vetorial completo.

67
00:04:27,580 --> 00:04:30,740
E, infelizmente, quando você faz isso em muitos pontos, pode ficar bastante confuso, então

68
00:04:30,740 --> 00:04:34,340
deixe-me fazer todas as setas do mesmo tamanho, e o que isso significa

69
00:04:34,340 --> 00:04:37,900
é que podemos ter uma noção da direção de cada ponto de saída.

70
00:04:37,900 --> 00:04:41,660
Mas talvez a maneira mais bonita de ilustrar funções bidimensionais, e a que mais

71
00:04:41,660 --> 00:04:47,400
usaremos neste vídeo, seja associar cada ponto nesse espaço de saída a uma cor.

72
00:04:47,400 --> 00:04:52,180
Aqui usamos matizes, é onde a cor cai ao longo de um

73
00:04:52,180 --> 00:04:57,020
arco-íris ou roda de cores, para corresponder à direção oposta à origem,

74
00:04:57,020 --> 00:05:00,060
e estamos usando escuridão ou brilho para corresponder à distância da origem.

75
00:05:00,060 --> 00:05:05,720
Por exemplo, focando neste conjunto de resultados, todos estes pontos são vermelhos, mas os mais próximos

76
00:05:05,720 --> 00:05:10,340
da origem são um pouco mais escuros e os mais distantes são um pouco mais brilhantes.

77
00:05:10,340 --> 00:05:15,360
E focando neste conjunto de resultados, todos os pontos são verdes e, novamente,

78
00:05:15,360 --> 00:05:18,980
mais perto da origem significa mais escuro, mais longe significa mais claro.

79
00:05:18,980 --> 00:05:24,300
E assim por diante, tudo o que estamos fazendo aqui é

80
00:05:24,300 --> 00:05:25,300
atribuir uma cor específica para cada direção, tudo mudando continuamente.

81
00:05:25,300 --> 00:05:29,100
Você pode notar que as diferenças de escuridão e brilho aqui são

82
00:05:29,140 --> 00:05:33,940
bastante sutis, mas para este vídeo, tudo o que nos importa é

83
00:05:33,940 --> 00:05:35,300
a direção das saídas, não as magnitudes, os matizes, não o brilho.

84
00:05:35,300 --> 00:05:39,160
A única coisa importante que você deve notar sobre o brilho é que perto

85
00:05:39,160 --> 00:05:44,440
da origem, que não tem uma direção específica, todas as cores ficam pretas.

86
00:05:44,440 --> 00:05:48,820
Então, para pensar em funções, agora que decidimos uma cor para cada saída,

87
00:05:48,820 --> 00:05:54,020
podemos visualizar funções 2D colorindo cada ponto no espaço de entrada com

88
00:05:54,020 --> 00:05:57,860
base na cor do ponto onde ele pousa no espaço de saída.

89
00:05:57,860 --> 00:06:02,340
Gosto de imaginar muitos pontos diferentes desse espaço de entrada saltando para suas saídas correspondentes

90
00:06:02,340 --> 00:06:06,340
no espaço de saída, depois sendo pintados com base na cor do ponto onde

91
00:06:06,340 --> 00:06:11,820
pousaram e depois voltando para o local de onde vieram no espaço de entrada.

92
00:06:11,820 --> 00:06:15,700
Fazendo isso para cada ponto no espaço de entrada, você pode ter uma ideia apenas

93
00:06:15,700 --> 00:06:19,140
olhando para esse espaço de entrada para saber aproximadamente onde a função leva cada ponto.

94
00:06:19,140 --> 00:06:23,880
Por exemplo, esta faixa de pontos rosa à esquerda nos diz que todos esses pontos são

95
00:06:23,920 --> 00:06:30,000
mapeados em algum lugar na direção rosa, na parte inferior esquerda do espaço de saída.

96
00:06:30,000 --> 00:06:34,120
Além disso, aqueles três pontos pretos com muitas cores

97
00:06:34,120 --> 00:06:37,120
ao redor são os que vão para zero.

98
00:06:37,120 --> 00:06:46,120
Tudo bem, assim como no caso 1D, a resolução de equações de funções 2D

99
00:06:46,120 --> 00:06:49,780
sempre pode ser reformulada perguntando quando uma determinada função é igual a zero.

100
00:06:49,780 --> 00:06:54,820
Então esse é o nosso desafio agora, criar um algoritmo que descubra

101
00:06:54,820 --> 00:07:00,900
quais pontos de entrada de uma determinada função 2D vão para zero.

102
00:07:00,900 --> 00:07:04,560
Você pode apontar que se estiver olhando para um mapa de cores como este

103
00:07:04,560 --> 00:07:08,700
vendo aqueles pontos pretos, você já sabe onde estão os zeros da função.

104
00:07:08,700 --> 00:07:11,460
Então isso conta?

105
00:07:11,460 --> 00:07:15,100
Tenha em mente que para criar um diagrama como este, fizemos com que o

106
00:07:15,100 --> 00:07:21,020
computador calculasse a função em todos os pixels do plano, mas nosso objetivo é

107
00:07:21,020 --> 00:07:25,380
encontrar um algoritmo mais eficiente que exija apenas calcular a função no menor número

108
00:07:25,380 --> 00:07:29,600
possível de pontos. , tendo apenas uma visão limitada das cores, por assim dizer.

109
00:07:29,600 --> 00:07:33,940
E também de um ponto de vista mais teórico, seria bom ter uma construção geral que

110
00:07:33,940 --> 00:07:38,300
nos informasse as condições para a existência ou não de zero dentro de uma determinada região.

111
00:07:38,300 --> 00:07:43,700
Lembre-se, em uma dimensão o principal insight foi que se uma função contínua é positiva

112
00:07:43,700 --> 00:07:48,920
em um ponto e negativa em outro, em algum ponto intermediário ela deve ser zero.

113
00:07:48,920 --> 00:07:50,960
Então, como estendemos isso para duas dimensões?

114
00:07:50,960 --> 00:07:55,180
Precisamos de algum tipo de analogia para falar sobre signos.

115
00:07:55,180 --> 00:07:59,140
Uma maneira de pensar sobre o que são os sinais são as direções.

116
00:07:59,140 --> 00:08:02,620
Positivo significa que você está apontando para a direita ao longo da

117
00:08:02,620 --> 00:08:04,240
reta numérica e negativo significa que você está apontando para a esquerda.

118
00:08:04,240 --> 00:08:08,800
As quantidades bidimensionais também têm direção, mas para elas as opções são muito mais

119
00:08:08,800 --> 00:08:12,780
amplas, podem apontar para qualquer lugar ao longo de todo um círculo de possibilidades.

120
00:08:12,780 --> 00:08:16,860
Então, da mesma forma que em uma dimensão estávamos perguntando se uma determinada função

121
00:08:16,860 --> 00:08:22,860
é positiva ou negativa no limite de um intervalo, que é apenas dois pontos,

122
00:08:22,860 --> 00:08:28,200
para funções 2d estaremos olhando para o limite de uma região, que é um

123
00:08:28,200 --> 00:08:33,760
loop e pergunte sobre a direção da saída da função ao longo desse limite.

124
00:08:33,760 --> 00:08:39,220
Por exemplo, vemos que ao longo deste loop em torno deste zero, a saída

125
00:08:39,220 --> 00:08:43,460
passa por todas as direções possíveis, todas as cores do arco-íris, vermelho, amarelo,

126
00:08:43,460 --> 00:08:45,820
verde, azul, de volta ao vermelho e tudo mais ao longo do caminho.

127
00:08:45,820 --> 00:08:50,640
Mas ao longo deste loop aqui, sem zeros dentro dele, a saída não passa por

128
00:08:50,640 --> 00:08:55,420
todas as cores, passa por algumas das cores alaranjadas, mas nunca, digamos, verde ou azul.

129
00:08:55,420 --> 00:08:59,320
E isso é promissor, parece muito com o modo como as coisas funcionavam em uma dimensão.

130
00:08:59,320 --> 00:09:03,540
Talvez da mesma forma que se uma função 1d recebe ambos os sinais possíveis no limite de

131
00:09:03,540 --> 00:09:09,700
uma região 1d, havia um zero em algum lugar dentro, poderíamos levantar a hipótese de que se

132
00:09:09,700 --> 00:09:15,140
uma função 2d atingir saídas de todas as direções possíveis, todas as cores possíveis, ao longo do

133
00:09:15,140 --> 00:09:20,980
limite de uma região 2d, então em algum lugar dentro dessa região ele deve ir para zero.

134
00:09:20,980 --> 00:09:25,100
Então esse é o nosso palpite, e pare um momento para pensar

135
00:09:25,100 --> 00:09:27,660
se isso deveria ser verdade e, em caso afirmativo, por quê.

136
00:09:27,660 --> 00:09:32,020
Se começarmos a pensar em um pequeno loop em torno de algum ponto de entrada, sabemos que,

137
00:09:32,020 --> 00:09:36,660
como tudo é contínuo, nossa função o leva a um pequeno loop próximo à saída correspondente.

138
00:09:36,660 --> 00:09:41,140
Mas veja, para a maioria dos loops minúsculos, a saída varia em cor.

139
00:09:41,140 --> 00:09:46,300
Se você escolher qualquer ponto de saída diferente de zero e desenhar um loop suficientemente

140
00:09:46,300 --> 00:09:49,860
estreito próximo a ele, as cores do loop serão todas da mesma cor desse ponto.

141
00:09:49,860 --> 00:09:55,980
Um laço apertado aqui é todo azulado, um laço apertado aqui é

142
00:09:55,980 --> 00:09:58,440
todo amarelado, você certamente não vai conseguir todas as cores do arco-íris.

143
00:09:58,440 --> 00:10:03,580
O único ponto onde você pode apertar os laços ao redor dele e

144
00:10:03,580 --> 00:10:07,120
ainda obter todas as cores é a origem incolor, o próprio zero.

145
00:10:07,120 --> 00:10:11,680
Portanto, é verdade que se você tiver laços passando por todas

146
00:10:11,680 --> 00:10:15,960
as cores do arco-íris, apertando e apertando, estreitando-se em um

147
00:10:15,960 --> 00:10:17,360
ponto, então esse ponto deve ser de fato um zero.

148
00:10:17,360 --> 00:10:22,360
E então vamos configurar um solucionador de equações 2D exatamente como nosso solucionador de equações unidimensionais.

149
00:10:22,360 --> 00:10:27,200
Quando encontrarmos uma região grande cuja borda passa por todas as cores,

150
00:10:27,200 --> 00:10:30,640
divida-a em duas e observe as cores na fronteira de cada metade.

151
00:10:30,640 --> 00:10:34,920
No exemplo mostrado aqui, a borda da metade esquerda não passa por

152
00:10:34,920 --> 00:10:39,080
todas as cores, não há pontos mapeados nas direções laranja-amarelado, por exemplo.

153
00:10:39,080 --> 00:10:43,480
Portanto, deixarei esta área em cinza como forma de dizer que não queremos pesquisar mais.

154
00:10:43,480 --> 00:10:47,840
A metade direita passa por todas as cores, passa muito tempo na direção

155
00:10:47,840 --> 00:10:51,120
verde, depois passa pelo amarelo laranja vermelho e também pelo azul violeta rosa.

156
00:10:51,120 --> 00:10:56,060
Agora lembre-se, o que isso significa é que os pontos desta

157
00:10:56,060 --> 00:10:57,800
fronteira são mapeados para saídas de todas as direções possíveis.

158
00:10:57,800 --> 00:11:02,900
Então vamos explorar mais, subdividindo novamente e verificando o limite de cada região.

159
00:11:02,900 --> 00:11:07,000
O limite do topo é todo verde, então vamos parar de procurar aí.

160
00:11:07,000 --> 00:11:10,500
Mas o fundo é colorido o suficiente para merecer uma subdivisão.

161
00:11:10,500 --> 00:11:12,420
E continue assim.

162
00:11:12,420 --> 00:11:16,860
Verifique qual sub-região tem um limite que cobre todas as cores possíveis, o

163
00:11:16,860 --> 00:11:21,280
que significa que os pontos desse limite são mapeados em todas as direções

164
00:11:21,280 --> 00:11:25,400
possíveis, e continue cortando essas regiões pela metade, como fizemos no caso unidimensional,

165
00:11:25,400 --> 00:11:29,320
eventualmente nos levando a um zero sobre a função. Ah, espere um segundo.

166
00:11:29,320 --> 00:11:30,320
O que aconteceu aqui?

167
00:11:30,320 --> 00:11:34,520
Nenhuma das últimas subdivisões no canto inferior direito passou por

168
00:11:34,520 --> 00:11:38,160
todas as cores, então nosso algoritmo parou porque não

169
00:11:38,160 --> 00:11:41,160
queria pesquisar nenhuma delas, mas também não encontrou zero.

170
00:11:41,160 --> 00:11:43,720
Ok, claramente algo está errado aqui.

171
00:11:43,720 --> 00:11:46,680
E tudo bem, estar errado é uma parte normal da matemática.

172
00:11:46,680 --> 00:11:51,400
Se olharmos para trás, tínhamos essa hipótese, e ela nos levou

173
00:11:51,400 --> 00:11:53,680
a esse algoritmo proposto, então nos enganamos em algum lugar.

174
00:11:53,680 --> 00:11:56,860
E ser bom em matemática não é acertar na primeira

175
00:11:56,860 --> 00:12:00,920
vez, é ter resiliência para olhar para trás com

176
00:12:00,920 --> 00:12:02,520
cuidado e entender os erros, e entender como corrigi-los.

177
00:12:02,520 --> 00:12:06,760
Agora, o problema aqui é que tínhamos uma região cuja fronteira passava por todas as

178
00:12:06,760 --> 00:12:11,260
cores, mas quando dividimos ao meio, nenhuma das fronteiras da sub-região passava por todas as

179
00:12:11,260 --> 00:12:14,880
cores, não tínhamos opções de onde continuar pesquisando e isso quebrou o zero localizador.

180
00:12:15,280 --> 00:12:18,120
Agora, em uma dimensão, esse tipo de coisa nunca aconteceu.

181
00:12:18,120 --> 00:12:22,960
Sempre que você tiver um intervalo cujos pontos finais

182
00:12:22,960 --> 00:12:28,200
têm sinais diferentes, se você dividi-lo, saberá que obterá

183
00:12:28,200 --> 00:12:29,200
algum subintervalo cujos pontos finais também terão sinais diferentes.

184
00:12:29,200 --> 00:12:34,120
Ou dito de outra forma, sempre que você tiver dois intervalos

185
00:12:34,120 --> 00:12:38,280
cujas extremidades não mudam de sinal, se você combiná-los, obterá

186
00:12:38,280 --> 00:12:39,280
um intervalo maior cujas extremidades também não mudam de sinal.

187
00:12:39,280 --> 00:12:43,140
Mas em duas dimensões, é possível encontrar duas regiões cujas fronteiras

188
00:12:43,140 --> 00:12:48,040
não passam por todas as cores, mas cujos limites se combinam

189
00:12:48,040 --> 00:12:49,940
para dar uma região cuja fronteira passa por todas as cores.

190
00:12:49,940 --> 00:12:53,740
E foi exatamente dessa maneira que nosso algoritmo proposto para encontrar o zero quebrou.

191
00:12:53,740 --> 00:12:58,680
Na verdade, se você pensar bem, poderá encontrar um grande loop cuja borda

192
00:12:58,680 --> 00:13:03,120
passa por todas as cores possíveis sem que haja um zero dentro dele.

193
00:13:03,120 --> 00:13:07,100
Agora, isso não quer dizer que estávamos errados em nossas afirmações sobre loops minúsculos quando dissemos que um

194
00:13:07,100 --> 00:13:13,040
loop que se estreita continuamente passando por todas as cores tem que se estreitar em um zero.

195
00:13:13,040 --> 00:13:17,120
Mas o que complicou tudo para nós é que essa propriedade do tipo &quot;minha fronteira passa por

196
00:13:17,120 --> 00:13:23,040
todas as cores ou não&quot; não se combina de maneira agradável e previsível quando você combina regiões.

197
00:13:23,040 --> 00:13:28,100
Mas não se preocupe, podemos modificar isso um pouco para uma propriedade

198
00:13:28,100 --> 00:13:38,560
mais sofisticada que se combine para nos dar o que queremos.

199
00:13:38,560 --> 00:13:42,540
A ideia é que, em vez de simplesmente perguntar se podemos encontrar

200
00:13:42,540 --> 00:13:47,100
uma cor em algum ponto do loop, vamos acompanhar com mais

201
00:13:47,100 --> 00:13:48,100
cuidado como essas cores mudam à medida que percorremos esse loop.

202
00:13:48,100 --> 00:13:50,060
Deixe-me mostrar o que quero dizer com um exemplo.

203
00:13:50,060 --> 00:13:54,120
Vou manter uma pequena roda de cores aqui no canto para nos ajudar a acompanhar.

204
00:13:54,120 --> 00:13:58,540
Quando as cores ao longo de um caminho de entradas se movem através do arco-íris em

205
00:13:58,540 --> 00:14:04,380
uma direção específica, do vermelho para o amarelo, do amarelo para o verde, do verde

206
00:14:04,380 --> 00:14:05,720
para o azul ou do azul para o vermelho, a saída oscila no sentido horário.

207
00:14:05,720 --> 00:14:09,980
Mas, por outro lado, se as cores se movem no sentido inverso no arco-íris, do azul para o verde, do verde

208
00:14:09,980 --> 00:14:17,160
para o amarelo, do amarelo para o vermelho ou do vermelho para o azul, a saída oscila no sentido anti-horário.

209
00:14:17,160 --> 00:14:22,940
Então, caminhando por esse caminho curto aqui, as cores serpenteiam um quinto do caminho

210
00:14:22,940 --> 00:14:28,340
no sentido horário na roda de cores, e andando por esse caminho aqui, as

211
00:14:28,340 --> 00:14:30,620
cores serpenteiam outro quinto do caminho no sentido horário na roda de cores.

212
00:14:30,620 --> 00:14:35,400
Claro, isso significa que se você seguir os dois caminhos, um após o outro,

213
00:14:35,400 --> 00:14:39,380
as cores girarão um total de dois quintos de volta completa no sentido horário.

214
00:14:39,380 --> 00:14:43,740
A quantidade total de enrolamento simplesmente aumenta, e isso será fundamental, esse

215
00:14:43,740 --> 00:14:47,140
é o tipo de combinação direta que será útil para nós.

216
00:14:47,140 --> 00:14:51,980
Quando digo quantidade total de enrolamento, quero que você imagine um hodômetro antigo que avança enquanto

217
00:14:51,980 --> 00:14:58,700
a seta gira no sentido horário, mas para trás enquanto a seta gira no sentido anti-horário.

218
00:14:58,700 --> 00:15:03,020
Portanto, o enrolamento no sentido anti-horário conta como enrolamento negativo no sentido horário.

219
00:15:03,020 --> 00:15:07,460
As saídas podem girar muito, mas se parte dessa

220
00:15:07,460 --> 00:15:08,940
rotação for na direção oposta, ela será cancelada.

221
00:15:08,940 --> 00:15:13,220
Por exemplo, se você avançar nesse caminho e depois retroceder nesse mesmo

222
00:15:13,220 --> 00:15:18,100
caminho, a quantidade total de enrolamento acaba sendo zero, o movimento

223
00:15:18,100 --> 00:15:23,440
para trás literalmente retrocede pelas cores vistas anteriormente, invertendo todo o

224
00:15:23,440 --> 00:15:26,300
enrolamento anterior e retornando o hodômetro de volta para onde começou.

225
00:15:26,300 --> 00:15:30,480
Para nossos propósitos, nos preocuparemos mais em observar o enrolamento ao longo dos loops.

226
00:15:30,480 --> 00:15:34,280
Por exemplo, digamos que percorremos todo esse loop no sentido horário.

227
00:15:34,280 --> 00:15:39,680
As saídas que encontramos giram em torno de um total de três voltas completas no sentido horário,

228
00:15:39,680 --> 00:15:47,120
as cores oscilavam no arco-íris, em ordem, de vermelho para vermelho novamente, e novamente, e novamente.

229
00:15:47,120 --> 00:15:52,260
No jargão usado pelos matemáticos, dizemos que ao longo

230
00:15:52,260 --> 00:15:54,100
deste loop, o número total do enrolamento é 3.

231
00:15:54,100 --> 00:15:58,440
Para outros loops, pode ser qualquer outro número inteiro, talvez um número maior se

232
00:15:58,440 --> 00:16:03,680
a saída oscilar muitas vezes enquanto a entrada percorre um único loop, ou pode

233
00:16:03,720 --> 00:16:07,060
ser um número menor se a saída oscilar apenas uma ou duas vezes.

234
00:16:07,060 --> 00:16:12,260
Ou esse número do enrolamento poderia até ser um número inteiro negativo, se a saída

235
00:16:12,260 --> 00:16:15,200
estivesse oscilando no sentido anti-horário enquanto caminhamos no sentido horário ao redor do loop.

236
00:16:15,200 --> 00:16:19,720
Mas ao longo de qualquer loop, esta quantidade total de enrolamento tem que ser um número inteiro.

237
00:16:19,720 --> 00:16:23,980
Quero dizer, quando você voltar ao ponto de partida,

238
00:16:23,980 --> 00:16:25,840
terá o mesmo resultado com o qual começou.

239
00:16:25,840 --> 00:16:31,520
Aliás, se um caminho realmente contém um ponto onde a saída é

240
00:16:31,560 --> 00:16:35,640
precisamente zero, então tecnicamente você não pode definir um número sinuoso ao

241
00:16:35,640 --> 00:16:37,600
longo dele, já que a saída não tem uma direção específica.

242
00:16:37,600 --> 00:16:41,740
Isso não será um problema para nós, porque todo o nosso objetivo

243
00:16:41,740 --> 00:16:45,200
é encontrar zeros, então, se isso acontecer, tivemos sorte mais cedo.

244
00:16:45,200 --> 00:16:48,720
A principal coisa a notar sobre esses números sinuosos é que

245
00:16:48,720 --> 00:16:55,040
eles somam muito bem quando você combina caminhos em caminhos maiores.

246
00:16:55,040 --> 00:16:59,440
Mas o que realmente queremos é que os números sinuosos ao longo das

247
00:16:59,440 --> 00:17:03,120
fronteiras das regiões aumentem bem quando combinamos regiões para formar regiões maiores.

248
00:17:03,120 --> 00:17:06,320
Então, temos essa propriedade?

249
00:17:06,320 --> 00:17:09,600
Bem, dê uma olhada.

250
00:17:09,600 --> 00:17:14,760
O número do enrolamento, à medida que avançamos no sentido horário em torno desta

251
00:17:14,760 --> 00:17:17,920
região à esquerda, é a soma dos números do enrolamento destes quatro caminhos.

252
00:17:17,920 --> 00:17:21,960
E o enrolamento, à medida que avançamos no sentido horário em torno desta

253
00:17:21,960 --> 00:17:25,480
região à direita, é a soma dos números sinuosos destes quatro caminhos.

254
00:17:25,480 --> 00:17:29,840
E quando combinamos essas duas regiões numa região maior, a maioria desses

255
00:17:29,840 --> 00:17:33,760
caminhos tornam-se parte da fronteira no sentido horário da região maior.

256
00:17:33,760 --> 00:17:36,040
E quanto a esses dois caminhos que não funcionam?

257
00:17:36,040 --> 00:17:40,520
Eles se cancelam perfeitamente, um deles é justamente o

258
00:17:40,520 --> 00:17:42,660
inverso, o retrocesso do outro como vimos antes.

259
00:17:42,660 --> 00:17:48,840
Portanto, os números sinuosos ao longo das fronteiras das regiões somam-se exatamente da maneira que desejamos.

260
00:17:48,840 --> 00:17:53,560
Além disso, observe que esse raciocínio sobre fronteiras orientadas que se somam bem

261
00:17:53,560 --> 00:17:57,320
assim aparece muito na matemática e geralmente é chamado de teorema de Stokes.

262
00:17:57,320 --> 00:18:02,880
Aqueles de vocês que estudaram cálculo multivariável podem reconhecê-lo nesse contexto.

263
00:18:02,880 --> 00:18:08,040
Então agora, finalmente, com os números sinuosos em mãos, podemos voltar aos nossos objetivos de resolução de equações.

264
00:18:08,040 --> 00:18:12,400
O problema com a região que vimos anteriormente é que, embora a sua fronteira

265
00:18:12,400 --> 00:18:16,620
passasse por todas as cores possíveis, o número do enrolamento era, na verdade, zero.

266
00:18:16,620 --> 00:18:22,360
As saídas giraram na metade do caminho, do amarelo para o vermelho, e então começaram

267
00:18:22,360 --> 00:18:26,000
a voltar no sentido anti-horário na outra direção, depois continuaram passando pelo azul e atingindo

268
00:18:26,000 --> 00:18:32,040
o vermelho do outro lado, tudo de tal forma que o enrolamento total foi zero.

269
00:18:32,040 --> 00:18:36,000
Mas se você encontrar um loop que não apenas atinge todas as cores, mas também tem a

270
00:18:36,000 --> 00:18:41,200
condição mais forte de um número de enrolamento diferente de zero, então, se você o dividir

271
00:18:41,200 --> 00:18:46,400
ao meio, terá a garantia de que pelo menos uma dessas metades terá um número de

272
00:18:46,400 --> 00:18:48,600
enrolamento diferente de zero também, já que as coisas se somam bem da maneira que queremos.

273
00:18:48,600 --> 00:18:54,280
Dessa forma, você pode continuar, estreitando-se cada vez mais em um ponto.

274
00:18:54,280 --> 00:18:58,440
E à medida que você se estreita em um ponto, você o fará com pequenos loops que têm

275
00:18:58,440 --> 00:19:02,840
números de enrolamento diferentes de zero, o que implica que eles passam por todas as cores possíveis e,

276
00:19:02,840 --> 00:19:07,680
portanto, como eu disse antes, o ponto em que eles estão se estreitando on deve ser zero.

277
00:19:07,680 --> 00:19:08,760
E é isso!

278
00:19:08,760 --> 00:19:13,280
Agora criamos um solucionador de equações bidimensional

279
00:19:13,280 --> 00:19:14,760
e, desta vez, prometo, não há bugs.

280
00:19:14,760 --> 00:19:18,200
Os números sinuosos são precisamente a ferramenta de que precisamos para fazer isso funcionar.

281
00:19:18,200 --> 00:19:23,040
Agora podemos resolver equações que se parecem com onde f de x é igual a g

282
00:19:23,040 --> 00:19:27,660
de x em duas dimensões, apenas considerando como a diferença entre f e g gira.

283
00:19:27,660 --> 00:19:31,800
Sempre que tivermos um loop cujo número de enrolamento não é zero, podemos executar

284
00:19:31,800 --> 00:19:35,160
esse algoritmo nele e com certeza encontraremos uma solução em algum lugar dentro dele.

285
00:19:35,160 --> 00:19:40,300
E mais, assim como em uma dimensão, esse algoritmo é incrivelmente eficiente.

286
00:19:40,300 --> 00:19:44,880
Continuamos diminuindo a metade do tamanho da nossa região a cada rodada, estreitando rapidamente

287
00:19:44,880 --> 00:19:49,840
os zeros e, ao mesmo tempo, só precisamos verificar o valor da função ao

288
00:19:49,840 --> 00:19:55,240
longo dos pontos desses loops, em vez de verificá-lo nos muitos pontos do interior.

289
00:19:55,240 --> 00:20:00,400
Então, de certa forma, o trabalho geral realizado é proporcional apenas ao perímetro

290
00:20:00,400 --> 00:20:04,960
do espaço de busca, e não à área total, o que é incrível.

291
00:20:04,960 --> 00:20:09,360
Agora, uma vez que você entende o que está acontecendo, é estranhamente fascinante

292
00:20:09,360 --> 00:20:13,800
apenas observar isso em ação, dando-lhe alguma função e deixando-o procurar por zeros.

293
00:20:13,800 --> 00:20:18,600
Como eu disse antes, os números complexos são bidimensionais,

294
00:20:18,600 --> 00:20:20,340
então vamos aplicá-los a alguma equação com números complexos.

295
00:20:20,340 --> 00:20:25,240
Por exemplo, aqui está o algoritmo que encontra os zeros da função

296
00:20:25,240 --> 00:20:28,920
x elevado ao quinto menos x menos um no plano complexo.

297
00:20:28,920 --> 00:20:33,160
Começou por considerar uma região muito grande em torno da

298
00:20:33,160 --> 00:20:35,440
origem, que acabou tendo um número sinuoso de 5.

299
00:20:35,440 --> 00:20:39,640
Cada vez que você encontra um loop com um número de enrolamento diferente de zero,

300
00:20:39,640 --> 00:20:42,840
você o divide ao meio e descobre o número de enrolamento dos dois loops menores.

301
00:20:42,880 --> 00:20:46,880
É garantido que um ou ambos tenham um número de enrolamento diferente de zero

302
00:20:46,880 --> 00:20:51,440
e, quando você vê isso, sabe que há um zero em algum lugar dentro

303
00:20:51,440 --> 00:20:54,300
desse loop menor, então continue seguindo o mesmo caminho, pesquisando o espaço menor.

304
00:20:54,300 --> 00:20:58,920
Também paramos de explorar uma região se o caminho que estamos calculando tropeçar em um

305
00:20:58,920 --> 00:21:03,420
zero, o que na verdade aconteceu uma vez neste exemplo na metade direita aqui.

306
00:21:03,420 --> 00:21:07,600
Essas ocorrências raras interferem em nossa capacidade de

307
00:21:07,600 --> 00:21:09,320
calcular números sinuosos, mas ei, obtivemos zero.

308
00:21:09,320 --> 00:21:13,320
E quanto aos loops cujo número de enrolamento é zero, você simplesmente não os explora mais.

309
00:21:13,320 --> 00:21:18,520
Talvez eles tenham uma solução interna, talvez não, não temos garantias.

310
00:21:18,520 --> 00:21:22,240
E deixando o nosso solucionador de equações continuar da mesma

311
00:21:22,240 --> 00:21:26,020
maneira, eventualmente converge para muitos zeros para este polinómio.

312
00:21:26,020 --> 00:21:30,400
A propósito, não é coincidência que o número

313
00:21:30,400 --> 00:21:31,660
total de enrolamentos neste exemplo tenha sido 5.

314
00:21:31,660 --> 00:21:37,280
Com números complexos, a operação x elevado a n corresponde diretamente a percorrer a

315
00:21:37,280 --> 00:21:45,000
origem da saída n vezes enquanto você percorre a origem da entrada uma vez.

316
00:21:45,000 --> 00:21:50,500
Assim, com o polinômio, para entradas grandes o suficiente, todos

317
00:21:50,500 --> 00:21:52,700
os termos, exceto o termo principal, tornam-se insignificantes em comparação.

318
00:21:52,700 --> 00:21:58,780
Portanto, qualquer polinômio complexo cujo termo inicial seja x elevado a n tem

319
00:21:58,780 --> 00:22:00,700
um número sinuoso de n em torno de um loop suficientemente grande.

320
00:22:00,700 --> 00:22:06,240
E dessa forma, a nossa tecnologia de números sinuosos

321
00:22:06,240 --> 00:22:07,620
garante que cada polinómio complexo tenha um zero.

322
00:22:07,620 --> 00:22:13,880
Este é um fato tão importante que os matemáticos o chamam de teorema fundamental da álgebra.

323
00:22:13,880 --> 00:22:18,040
Ter um algoritmo para encontrar soluções numéricas para equações como essa é extremamente prático,

324
00:22:18,040 --> 00:22:22,420
mas o teorema fundamental da álgebra é um bom exemplo de como esses

325
00:22:22,420 --> 00:22:27,780
números sinuosos também são bastante úteis no nível teórico, garantindo a existência de

326
00:22:27,780 --> 00:22:32,280
uma solução para uma ampla classe de equações para condições adequadas, que é

327
00:22:32,280 --> 00:22:34,060
muito mais o tipo de coisa em que os matemáticos gostam de pensar.

328
00:22:34,400 --> 00:22:39,360
Mostrarei mais algumas aplicações incríveis disso no contexto da topologia em um vídeo de

329
00:22:39,360 --> 00:22:44,080
acompanhamento, que inclui a correção de um erro de um vídeo antigo do 3blue1brown.

330
00:22:44,080 --> 00:22:45,080
Qual deles?

331
00:22:45,080 --> 00:22:48,740
Bem, assista a todos os vídeos, tudo neste canal,

332
00:22:48,740 --> 00:22:51,640
e veja se consegue detectar o erro primeiro.

333
00:22:51,640 --> 00:22:55,960
O autor principal deste vídeo é um dos

334
00:22:55,960 --> 00:22:56,460
mais novos membros da equipe 3blue1brown, Sridhar Ramesh.

