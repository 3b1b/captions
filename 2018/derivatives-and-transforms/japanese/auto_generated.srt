1
00:00:00,000 --> 00:00:03,956
これから数か月は、たくさんの大変な作業、いくつかのきちん

2
00:00:03,956 --> 00:00:07,913
とした例、いくつかのあ まりきちんとしていない例、物理学

3
00:00:07,913 --> 00:00:11,305
との美しいつながり、それほど美しくはない数式の

4
00:00:11,305 --> 00:00:15,262
暗記の山、行き詰まったりバタンキューしたりする瞬間がたく

5
00:00:15,262 --> 00:00:19,219
さんあるでしょう。壁 に頭を打ち付けたり、いくつかの素敵

6
00:00:19,219 --> 00:00:22,469
な「なるほど」の瞬間も散りばめられており、す

7
00:00:22,469 --> 00:00:26,426
べてを乗り越えるのに役立つ本当に美しいグラフィックの直感

8
00:00:26,426 --> 00:00:27,840
がいくつかあります。

9
00:00:27,840 --> 00:00:30,332
しかし、これからあなたが受けるコースが、私の最初の微

10
00:00:30,332 --> 00:00:32,057
積分入門のようなものである場合、ま

11
00:00:32,057 --> 00:00:34,549
たはそれ以来数年間に私が受講した最初のコースのいずれ

12
00:00:34,549 --> 00:00:37,041
かである場合、あなたには見られない トピックが 1

13
00:00:37,041 --> 00:00:39,533
つありますが、これはあなたの学習を大幅に加速すると私

14
00:00:39,533 --> 00:00:40,300
は信じています。

15
00:00:40,300 --> 00:00:42,690
ご存知のとおり、最初の 1 年間の視覚的

16
00:00:42,690 --> 00:00:45,080
直観のほとんどはグラフに基づいています。

17
00:00:45,080 --> 00:00:47,700
微分値はグラフの傾きであり、積分値

18
00:00:47,700 --> 00:00:50,320
はそのグラフの下の特定の領域です。

19
00:00:50,320 --> 00:00:55,950
しかし、入力と出力が単なる数値である関数を超えて微積分を一般

20
00:00:55,950 --> 00:01:01,580
化すると、分析している関数をグラフ化できるとは限りません。

21
00:01:01,580 --> 00:01:05,072
したがって、導関数などの基本的なアイデアに対するすべ

22
00:01:05,072 --> 00:01:08,564
ての直観があ まりにも厳密にグラフに根ざしている場合

23
00:01:08,564 --> 00:01:12,056
、多変数微積分や複雑な解析 などの、引用と引用のない

24
00:01:12,056 --> 00:01:14,876
高度なトピックとの間に非常に高く、ほとん

25
00:01:14,876 --> 00:01:18,234
ど不必要な概念的ハードルが生じる可能性があります。

26
00:01:18,234 --> 00:01:19,040
微分幾何学。

27
00:01:19,040 --> 00:01:22,783
私が皆さんと共有したいのは、微分積分について考える方法です

28
00:01:22,783 --> 00:01:26,526
。これを、微分積分が登場するより一般的なコンテキストのいく

29
00:01:26,526 --> 00:01:30,020
つかに、よりシームレスに一般化する変換ビューと呼びます。

30
00:01:30,020 --> 00:01:32,810
次に、この代替ビューを使用して、分数の繰

31
00:01:32,810 --> 00:01:35,600
り返しに関する楽しいパズルを分析します。

32
00:01:35,600 --> 00:01:37,923
ただし、最初に、標準のビジュアルとは何かについて、全

33
00:01:37,923 --> 00:01:40,160
員が同じ認識を持っていることを確認したいと思います。

34
00:01:40,160 --> 00:01:43,948
単純に実数を入力と出力として受け取る関数のグラフを作

35
00:01:43,948 --> 00:01:47,737
成する場合、微 積分のコースで最初に学ぶことの 1

36
00:01:47,737 --> 00:01:51,525
つは、導関数によってこのグラ フの傾きが得られるとい

37
00:01:51,525 --> 00:01:54,877
うことです。これが意味するところは、関数の導

38
00:01:54,877 --> 00:01:58,665
関数は、すべての入力 x に対してその傾きを返す新し

39
00:01:58,665 --> 00:01:59,540
い関数です。

40
00:01:59,540 --> 00:02:02,519
ここで、この導関数を勾配のアイデアとして導関

41
00:02:02,519 --> 00:02:05,240
数の定義として考えないことをお勧めします。

42
00:02:05,240 --> 00:02:08,150
むしろ、入力の周りの小さな微調整に対して関数がどの程度敏感で

43
00:02:08,150 --> 00:02:11,060
あるかについての、より根本的なものであると考えてください。

44
00:02:11,060 --> 00:02:14,393
そして、傾きは、関数のこの特定の見方にのみ関連する感

45
00:02:14,393 --> 00:02:17,480
度について考えるための 1 つの方法にすぎません。

46
00:02:17,480 --> 00:02:19,878
さらに詳しく知りたい場合は、別のビデオではなく、この

47
00:02:19,878 --> 00:02:22,100
トピックに関する完全なシリーズをご用意しています。

48
00:02:22,100 --> 00:02:25,785
ここで、導関数の代替ビジュアルの背後にある基本的な考

49
00:02:25,785 --> 00:02:29,471
え方は、この関数を数直線上のすべての入力点を別の数直

50
00:02:29,471 --> 00:02:33,020
線上の対応する出力にマッピングすると考えることです。

51
00:02:33,020 --> 00:02:36,095
このコンテキストでは、導関数によって得られるの

52
00:02:36,095 --> 00:02:39,170
は、入力空間がさまざまな 領域でどの程度引き伸

53
00:02:39,170 --> 00:02:42,380
ばされたり押しつぶされたりするかを示す尺度です。

54
00:02:42,380 --> 00:02:46,012
つまり、特定の入力の周囲をズームインし、その周囲に

55
00:02:46,012 --> 00:02:49,644
等間隔に配置された 点をいくつか確認すると、その入

56
00:02:49,644 --> 00:02:52,405
力の関数の導関数によって、マッピング

57
00:02:52,405 --> 00:02:56,037
後にそれらの点がどのように広がるか、または縮小する

58
00:02:56,037 --> 00:02:57,200
かがわかります。

59
00:02:57,200 --> 00:02:59,840
ここで、具体的な例を見てみましょう。

60
00:02:59,840 --> 00:03:03,136
関数 x2 を例に挙げると、1 から 1、2

61
00:03:03,136 --> 00:03:06,720
から 4、3 から 9 などにマッピングされます。

62
00:03:06,720 --> 00:03:09,840
また、その間のすべてのポイントにど

63
00:03:09,840 --> 00:03:12,960
のように作用するかも確認できます。

64
00:03:12,960 --> 00:03:16,970
入力 1 の周りの小さな点のクラスターを拡大して、そ

65
00:03:16,970 --> 00:03:20,981
れらが関連する出力の周りでど こに到達するかを確認す

66
00:03:20,981 --> 00:03:25,300
ると、それらが引き伸ばされる傾向があることがわかります。

67
00:03:25,300 --> 00:03:29,700
実際には、おおよそ 2 倍に引き伸ばされたように見えます。

68
00:03:29,700 --> 00:03:33,375
ズームインすると、このローカルな動作が

69
00:03:33,375 --> 00:03:36,500
2 倍になっているように見えます。

70
00:03:36,500 --> 00:03:39,077
これは、入力 x が 1 に等しい場合の

71
00:03:39,077 --> 00:03:41,900
x2 の導関数が 2 になることを意味します。

72
00:03:41,900 --> 00:03:46,480
それは、変革の文脈においてその事実がどのように見えるかです。

73
00:03:46,480 --> 00:03:49,725
入力 3 の周囲の点の近傍を見ると、

74
00:03:49,725 --> 00:03:52,800
それらは 6 倍に引き伸ばされます。

75
00:03:52,800 --> 00:03:56,556
これは、入力 3 でのこの関数の導関数が

76
00:03:56,556 --> 00:03:59,240
6 に等しいことを意味します。

77
00:03:59,240 --> 00:04:03,011
入力の 1/4 付近では、小さな領域が

78
00:04:03,011 --> 00:04:07,160
1/2 に縮小される傾 向があり、導関数が

79
00:04:07,160 --> 00:04:11,120
1 より小さくなるのはこのようになります。

80
00:04:11,120 --> 00:04:13,300
入力 0 は興味深いものです。

81
00:04:13,300 --> 00:04:16,065
10 倍に拡大すると、継続的に伸びたり押し

82
00:04:16,065 --> 00:04:18,580
つぶされたりしているようには見えません。

83
00:04:18,580 --> 00:04:20,980
まず、すべての出力が最終的に物事

84
00:04:20,980 --> 00:04:23,380
の正しいプラス面に反映されます。

85
00:04:23,380 --> 00:04:27,086
100 倍、または 1000 倍とどんどんズー

86
00:04:27,086 --> 00:04:31,114
ムインしていくと、0 の 周囲の小さな点の近傍が

87
00:04:31,114 --> 00:04:34,660
0 自体に折りたたまれているように見えます。

88
00:04:34,660 --> 00:04:40,500
導関数が 0 になると次のようになります。

89
00:04:40,500 --> 00:04:43,273
ローカルの動作は、整数直線に 0

90
00:04:43,273 --> 00:04:45,720
を乗算するように見えてきます。

91
00:04:45,720 --> 00:04:48,666
特定のズーム レベルですべてをある点まで完全に折りたたむ

92
00:04:48,666 --> 00:04:51,613
必要はありません。代わりに、 ズームインをどんどん近づけ

93
00:04:51,613 --> 00:04:54,560
ていくと、どのような動作が制限されるかが問題になります。

94
00:04:54,560 --> 00:05:01,120
ここでネガティブなインプットに注目することも有益です。

95
00:05:01,120 --> 00:05:03,798
すべての正の入力値が入る場所と衝突するため、

96
00:05:03,798 --> 00:05:05,990
物事は少し窮屈に感じられ 始めます。

97
00:05:05,990 --> 00:05:09,400
これは、関数を変換として考えることの欠点の 1 つです。

98
00:05:09,400 --> 00:05:11,616
しかし、導関数の場合、私たちが実際に気にす

99
00:05:11,616 --> 00:05:13,832
るのはとにかくローカル な動作、つまり特定

100
00:05:13,832 --> 00:05:16,260
の入力の周囲の狭い範囲で何が起こるかだけです。

101
00:05:16,260 --> 00:05:20,495
ここで、たとえばマイナス 2 付近の小さな入力が引き伸

102
00:05:20,495 --> 00:05:24,580
ばされるだけでなく、反転されることに注目してください。

103
00:05:24,580 --> 00:05:28,552
具体的には、ズームインすると、そのような近傍に対するアクシ

104
00:05:28,552 --> 00:05:32,260
ョンは、ますますマイナス 4 を乗算するように見えます。

105
00:05:32,260 --> 00:05:36,140
関数の導関数が負になる場合は次のようになります。

106
00:05:36,140 --> 00:05:40,280
これで要点は理解できたと思いますが、これが問

107
00:05:40,280 --> 00:05:44,240
題解決にどのように役立つかを見てみましょう。

108
00:05:44,240 --> 00:05:47,062
最近、私の友人が、無限分数 1 プラス 1 割る 1

109
00:05:47,062 --> 00:05:49,466
プラス 1 割る 1 プ ラス 1 割る 1

110
00:05:49,466 --> 00:05:51,765
についてのとても楽しい質問をしてくれました。

111
00:05:51,765 --> 00:05:54,692
オンラインで数 学のビデオを見ているのは明らかなので、お

112
00:05:54,692 --> 00:05:56,782
そらくこれを以前に見たことがあるかもし

113
00:05:56,782 --> 00:05:59,709
れませんが、私の友人の質問は、実際には、ここで見ているデ

114
00:05:59,709 --> 00:06:02,635
リバティブの見方に関連 する、あなたがこれまで考えたこと

115
00:06:02,635 --> 00:06:05,040
もなかったかもしれないことに切り込んでいます。

116
00:06:05,040 --> 00:06:08,855
このような式を評価する一般的な方法は、それを

117
00:06:08,855 --> 00:06:12,173
x と等しく設 定し、その中に完全な分数

118
00:06:12,173 --> 00:06:15,160
のコピーがあることに気づくことです。

119
00:06:15,160 --> 00:06:17,170
したがって、そのコピーを別の x

120
00:06:17,170 --> 00:06:19,300
に置き換えて、x を求めるだけです。

121
00:06:19,300 --> 00:06:23,252
つまり、関数 1 プラス 1 を x

122
00:06:23,252 --> 00:06:27,620
で 割った不動点を見つけることが必要です。

123
00:06:27,620 --> 00:06:30,769
しかし、問題はここにあります。x には実際には

124
00:06:30,769 --> 00:06:33,131
2 つの解があり、1 プ ラス 1

125
00:06:33,131 --> 00:06:35,887
をその数値で割ると同じ結果が得られる 2

126
00:06:35,887 --> 00:06:37,200
つの特別な数値です。

127
00:06:37,200 --> 00:06:39,735
1 つは黄金比、ファイ、約 1 です。

128
00:06:39,735 --> 00:06:42,670
618、もう 1 つはマイナスの 0 です。

129
00:06:42,670 --> 00:06:44,938
618、これ はたまたま負の 1

130
00:06:44,938 --> 00:06:46,940
をファイで割った値になります。

131
00:06:46,940 --> 00:06:50,397
私はこのもう 1 つの番号をファイの弟と呼びたいと思います

132
00:06:50,397 --> 00:06:53,740
。ファイが持つほぼすべての特性がこの番号にもあるからです。

133
00:06:53,740 --> 00:06:57,440
そして、これは、私たちが見た無限の分数がどういうわけ

134
00:06:57,440 --> 00:07:00,001
かファイの弟であるマイ ナスの 0

135
00:07:00,001 --> 00:07:04,128
にも等しいと言うのは妥当なのかという疑問を引き起こします。

136
00:07:04,128 --> 00:07:04,840
618?

137
00:07:04,840 --> 00:07:07,266
おそらく最初は、明らかにそうではありません

138
00:07:07,266 --> 00:07:09,693
が、左側にあるものは すべて正であるのに、

139
00:07:09,693 --> 00:07:12,120
どうして負の数に等しくなるのでしょうか?

140
00:07:12,120 --> 00:07:15,050
まず、このような表現が実際に何を意味

141
00:07:15,050 --> 00:07:17,980
するのかを明確にする必要があります。

142
00:07:17,980 --> 00:07:21,180
これについて考える方法の 1 つは、これが唯一の方法で

143
00:07:21,180 --> 00:07:24,025
はありませんが、ここでは選択の自由が あります。

144
00:07:24,025 --> 00:07:27,225
まず、1 などの定数から始めて、関数 1 プラス 1

145
00:07:27,225 --> 00:07:30,425
を x で割った関数を繰り 返し適用し、次に何を尋ねる

146
00:07:30,425 --> 00:07:33,625
かを考えることです。このアプローチは今後も継続していき

147
00:07:33,625 --> 00:07:34,100
ますか？

148
00:07:34,100 --> 00:07:37,888
つまり、確かに象徴的に、得られるものは無限の分数にますます

149
00:07:37,888 --> 00:07:41,677
似てきます。そのため、数値を等しくしたい場合は、この一連の

150
00:07:41,677 --> 00:07:45,340
数値がどのように近づくかを尋ねる必要があるかもしれません。

151
00:07:45,340 --> 00:07:47,889
そして、それがあなたの見方であるなら、負の数

152
00:07:47,889 --> 00:07:50,438
から始めるかもしれないの で、式全体が負の値

153
00:07:50,438 --> 00:07:53,220
になることはそれほどおかしなことではありません。

154
00:07:53,220 --> 00:07:56,242
結局のところ、負の 1 をファイで割った値から始めて、

155
00:07:56,242 --> 00:07:58,929
この関数 (1 プラス 1 を x に加える)

156
00:07:58,929 --> 00:08:01,952
を適用すると、負の 1 をファイで割った同じ数値が返さ

157
00:08:01,952 --> 00:08:02,400
れます。

158
00:08:02,400 --> 00:08:05,100
したがって、何度適用しても、こ

159
00:08:05,100 --> 00:08:07,980
の値は固定されたままになります。

160
00:08:07,980 --> 00:08:10,922
しかしそれでも、おそらくファイをこのペアのお気

161
00:08:10,922 --> 00:08:13,620
に入りの兄弟とみなすべき理由が1つあります。

162
00:08:13,620 --> 00:08:17,319
これを試してみてください。何らかの計算機を起動して

163
00:08:17,319 --> 00:08:20,870
、任意の乱数から始 めて、この関数に代入します。

164
00:08:20,870 --> 00:08:24,421
1 プラス 1 を x で割って、その数 値を

165
00:08:24,421 --> 00:08:28,860
1 プラス 1 に x を掛けて代入します。、何度も何度も。

166
00:08:28,860 --> 00:08:33,289
どのような定数から始めても、最終的には 1 になります。

167
00:08:33,289 --> 00:08:34,080
618.

168
00:08:34,080 --> 00:08:38,854
負の数から始めたとしても、それがファイの弟に非常に近い値

169
00:08:38,854 --> 00:08:43,300
であっても、最終的にはその値を避けてファイに戻ります。

170
00:08:43,300 --> 00:08:52,840
それで、ここで何が起こっているのでしょうか？

171
00:08:52,840 --> 00:08:54,790
なぜこれらの固定点の 1 つが他の固

172
00:08:54,790 --> 00:08:56,740
定点よりも優先されるのでしょうか?

173
00:08:56,740 --> 00:08:59,462
おそらく、導関数の変換的理解がこの設定を理解するのにどの

174
00:08:59,462 --> 00:09:02,184
ように役立つかはすで にお分かりいただけたかと思いますが

175
00:09:02,184 --> 00:09:04,322
、対照的な点を持たせるために、このような問

176
00:09:04,322 --> 00:09:07,045
題がグラフを使用してどのように教えられることが多いかを示

177
00:09:07,045 --> 00:09:07,920
したいと思います。

178
00:09:07,920 --> 00:09:11,721
この関数にランダムな入力を接続すると、y

179
00:09:11,721 --> 00:09:14,980
値によって対応する出力がわかります。

180
00:09:14,980 --> 00:09:19,833
その出力を関数に戻すには、まず y が x に等し

181
00:09:19,833 --> 00:09:23,006
い行に達するまで水平に移動します。

182
00:09:23,006 --> 00:09:25,993
そうすると、x の値が前の y

183
00:09:25,993 --> 00:09:28,980
の値に対応する位置が得られます。

184
00:09:28,980 --> 00:09:32,023
そこで、そこから垂直方向に移動して、この新しい

185
00:09:32,023 --> 00:09:34,940
x 値がどのよう な出力になるかを確認します。

186
00:09:34,940 --> 00:09:37,223
それから繰り返し、y が x に等

187
00:09:37,223 --> 00:09:39,379
しい線まで水平方向に移動して、x

188
00:09:39,379 --> 00:09:42,676
値が先ほど取得した出力と同じで ある点を見つけます。

189
00:09:42,676 --> 00:09:45,340
次に、垂直に移動して機能を再度適用します。

190
00:09:45,340 --> 00:09:48,537
個人的には、関数を繰り返し適用する

191
00:09:48,537 --> 00:09:51,380
という考え方は厄介だと思います。

192
00:09:51,380 --> 00:09:54,188
つまり、それは理にかなっていますが、線を引く方法を

193
00:09:54,188 --> 00:09:56,780
思い出すには、立ち止まって考える必要があります。

194
00:09:56,780 --> 00:09:59,673
そして、必要に応じて、どのような条件によってこ

195
00:09:59,673 --> 00:10:02,566
のクモの巣のプロセスが 固定点に狭まり、固定点

196
00:10:02,566 --> 00:10:05,460
から遠ざかっていくのかを考えることができます。

197
00:10:05,460 --> 00:10:07,402
実際、さあ、今すぐ立ち止まって、練

198
00:10:07,402 --> 00:10:09,460
習としてじっくり考えてみてください。

199
00:10:09,460 --> 00:10:12,380
それは斜面と関係があります。

200
00:10:12,380 --> 00:10:14,888
または、より満足のいく理解が得られると思われ

201
00:10:14,888 --> 00:10:17,397
る演習をスキップしたい 場合は、この関数が変

202
00:10:17,397 --> 00:10:20,020
換としてどのように機能するかを考えてください。

203
00:10:20,020 --> 00:10:22,721
そこで、ここでは、さまざまなサンプリング

204
00:10:22,721 --> 00:10:25,423
された入力ポイントが どこに行くのかを示

205
00:10:25,423 --> 00:10:28,260
すために、矢印の束を描くことから始めます。

206
00:10:28,260 --> 00:10:30,060
余談ですが、これはきちんとした出現パ

207
00:10:30,060 --> 00:10:31,860
ターンを示していると思いませんか?

208
00:10:31,860 --> 00:10:33,840
これは期待していませんでしたが、アニメーション

209
00:10:33,840 --> 00:10:35,820
中にポップアップするのを見るのはクールでした。

210
00:10:35,820 --> 00:10:38,757
1 を x で割ったアクションにより、この素晴らしい創発的

211
00:10:38,757 --> 00:10:41,500
な円が得られます。その後、物事を 1 つずらすだけです。

212
00:10:41,500 --> 00:10:43,938
とにかく、この文脈で、x に対して 1

213
00:10:43,938 --> 00:10:46,498
プラス 1 などの関数 を繰り返し適用する

214
00:10:46,498 --> 00:10:49,180
ことが何を意味するのかを考えてほしいのです。

215
00:10:49,180 --> 00:10:54,054
すべての入力を出力にマッピングさせた後、そ

216
00:10:54,054 --> 00:10:58,708
れらを新しい入力とみなして、同じプロセス

217
00:10:58,708 --> 00:11:03,140
を何度も繰り返し適用することができます。

218
00:11:03,140 --> 00:11:05,990
サンプル ポイントを表すいくつかのドットを使用し

219
00:11:05,990 --> 00:11:08,840
てこれをアニメーション化すると、これらのドット

220
00:11:08,840 --> 00:11:11,690
がすべて 1 程度に固まるまで、それほど多くの反

221
00:11:11,690 --> 00:11:14,660
復を必要としないことに注目してください。618.

222
00:11:14,660 --> 00:11:17,832
ここで、1 を知っていることを思い出してください。

223
00:11:17,832 --> 00:11:19,990
618 とその弟分、マイナス 0。

224
00:11:19,990 --> 00:11:23,417
618 以降、この プロセスの各反復中、所定の位置に固

225
00:11:23,417 --> 00:11:24,940
定されたままになります。

226
00:11:24,940 --> 00:11:28,500
しかし、ファイの周囲を拡大してみましょう。

227
00:11:28,500 --> 00:11:32,925
マップ中に、その領域内の点はファイの周りで収縮します。

228
00:11:32,925 --> 00:11:37,678
これは、x に対する関数 1 プラス 1 が、この入力で

229
00:11:37,678 --> 00:11:41,940
1 より小さい大きさの導関数を持つことを意味します。

230
00:11:41,940 --> 00:11:45,681
実際、この導関数はマイナス 0 付近になることがわかります。

231
00:11:45,681 --> 00:11:46,180
38.

232
00:11:46,180 --> 00:11:49,150
これが意味するのは、アプリケーションを繰り返すた

233
00:11:49,150 --> 00:11:52,121
びに、ファイに向かう重力の ように、この数値の周

234
00:11:52,121 --> 00:11:55,340
囲の近傍がどんどん小さくなってしまうということです。

235
00:11:55,340 --> 00:11:58,293
それで今、ファイの弟の近所で何が起

236
00:11:58,293 --> 00:12:01,420
こっていると思うかを教えてください。

237
00:12:01,420 --> 00:12:05,631
そこでは導関数の大きさが 1 より大きいため

238
00:12:05,631 --> 00:12:09,660
、固定点に近い点は固定点から遠ざけられます。

239
00:12:09,660 --> 00:12:12,186
計算してみると、反復ごとに 2 倍以上

240
00:12:12,186 --> 00:12:14,460
引き伸ばされていることがわかります。

241
00:12:14,460 --> 00:12:19,126
ここでは導関数が負であるため、それらも反転します

242
00:12:19,126 --> 00:12:23,420
が、安定性のための重要な事実は大きさだけです。

243
00:12:23,420 --> 00:12:26,977
数学者はこの右側の値を安定した不動点、

244
00:12:26,977 --> 00:12:30,180
左側の値を不安定な不動点と呼びます。

245
00:12:30,180 --> 00:12:32,777
すべてを少しだけ混乱させたときに、そこから

246
00:12:32,777 --> 00:12:35,375
離れるのではなく、最初 の場所に戻る傾向が

247
00:12:35,375 --> 00:12:38,220
ある場合、すべては安定していると見なされます。

248
00:12:38,220 --> 00:12:41,644
つまり、私たちが見ているのは、固定点の安定性はそ

249
00:12:41,644 --> 00:12:45,069
の導関数の大きさが 1 より大きいか小さいかによ

250
00:12:45,069 --> 00:12:48,220
って決まるという、非常に有益な小さな事実です。

251
00:12:48,220 --> 00:12:50,966
これは、計算機で Enter キーを何度も押す

252
00:12:50,966 --> 00:12:53,713
だけの数値遊びでファイが 常に登場するのに、フ

253
00:12:53,713 --> 00:12:56,580
ァイの弟は決して登場しない理由を説明しています。

254
00:12:56,580 --> 00:13:00,155
ファイの弟を無限分数の有効な値と

255
00:13:00,155 --> 00:13:03,520
みなすかどうかはあなた次第です。

256
00:13:03,520 --> 00:13:07,310
これまで示したすべてのことから、この式が限界プロセスを表

257
00:13:07,310 --> 00:13:11,100
すものと考えると、ファイの弟以外の考えられるすべてのシー

258
00:13:11,100 --> 00:13:14,891
ド値がファイに収束する系列を与えるため、それらを互いに同

259
00:13:14,891 --> 00:13:18,420
等の立場に置くのは愚かに感じられることがわかります。。

260
00:13:18,420 --> 00:13:21,212
しかし、おそらくあなたはそれを限界とは考えておらず

261
00:13:21,212 --> 00:13:24,004
、おそらくあなた が行っている数学の種類は、これを

262
00:13:24,004 --> 00:13:26,014
単に複数の値を持つ多項式の解のよう

263
00:13:26,014 --> 00:13:28,806
な純粋な代数オブジェクトとして扱うのに適しているの

264
00:13:28,806 --> 00:13:29,700
かもしれません。

265
00:13:29,700 --> 00:13:31,485
とにかく、それは重要ではありません。

266
00:13:31,485 --> 00:13:33,965
そして、ここで私が言いたいのは、この密度の変化とし

267
00:13:33,965 --> 00:13:36,445
て導関数を観察 することの方が、全体としてグラフィ

268
00:13:36,445 --> 00:13:38,925
カルな直観よりも何らかの形で優れているということで

269
00:13:38,925 --> 00:13:39,620
はありません。

270
00:13:39,620 --> 00:13:42,672
実際、この方法で関数全体を描くのは、グラフに比べ

271
00:13:42,672 --> 00:13:45,480
てやや不格好で非現実的になる可能性があります。

272
00:13:45,480 --> 00:13:48,653
私が言いたいのは、これは微積分の入門コースのほとんどでもっ

273
00:13:48,653 --> 00:13:50,841
と言及される価値があるという ことです。

274
00:13:50,841 --> 00:13:54,015
なぜなら、微積分についての学生の理解をもう少し柔軟にするの

275
00:13:54,015 --> 00:13:55,000
に役立つからです。

276
00:13:55,000 --> 00:13:58,548
先ほども述べたように、新しいトピックを学ぶときにこの視

277
00:13:58,548 --> 00:14:02,097
点を持ち歩くことをお勧めする本当の理由は、単一変数微積

278
00:14:02,097 --> 00:14:05,520
分の理解に役立つというよりも、その後のことのためです。

