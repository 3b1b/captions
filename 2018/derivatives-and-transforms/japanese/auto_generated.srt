1
00:00:07,739 --> 00:00:10,511
これから数か月は、たくさんの大変な作業、いくつかのきちん

2
00:00:10,511 --> 00:00:13,283
とした例、いくつかのあ まりきちんとしていない例、物理学

3
00:00:13,283 --> 00:00:15,658
との美しいつながり、それほど美しくはない数式の 

4
00:00:15,658 --> 00:00:18,430
暗記の山、行き詰まったりバタンキューしたりする瞬間がたく

5
00:00:18,430 --> 00:00:21,201
さんあるでしょう。壁 に頭を打ち付けたり、いくつかの素敵

6
00:00:21,201 --> 00:00:23,478
な「なるほど」の瞬間も散りばめられており、す 

7
00:00:23,478 --> 00:00:26,250
べてを乗り越えるのに役立つ本当に美しいグラフィックの直感

8
00:00:26,250 --> 00:00:27,240
がいくつかあります。

9
00:00:27,630 --> 00:00:29,984
しかし、これからあなたが受けるコースが、私の最初の微

10
00:00:29,984 --> 00:00:31,613
積分入門のようなものである場合、ま 

11
00:00:31,613 --> 00:00:33,967
たはそれ以来数年間に私が受講した最初のコースのいずれ

12
00:00:33,967 --> 00:00:36,321
かである場合、あなたには見られない トピックが 1 

13
00:00:36,321 --> 00:00:38,675
つありますが、これはあなたの学習を大幅に加速すると私

14
00:00:38,675 --> 00:00:39,400
は信じています。

15
00:00:40,280 --> 00:00:42,450
ご存知のとおり、最初の 1 年間の視覚的

16
00:00:42,450 --> 00:00:44,620
直観のほとんどはグラフに基づいています。

17
00:00:45,080 --> 00:00:47,370
微分値はグラフの傾きであり、積分値

18
00:00:47,370 --> 00:00:49,660
はそのグラフの下の特定の領域です。

19
00:00:50,200 --> 00:00:54,110
しかし、入力と出力が単なる数値である関数を超えて微積分を一般

20
00:00:54,110 --> 00:00:58,020
 化すると、分析している関数をグラフ化できるとは限りません。

21
00:01:00,680 --> 00:01:04,060
したがって、導関数などの基本的なアイデアに対するすべ

22
00:01:04,060 --> 00:01:07,440
ての直観があ まりにも厳密にグラフに根ざしている場合

23
00:01:07,440 --> 00:01:10,820
、多変数微積分や複雑な解析 などの、引用と引用のない

24
00:01:10,820 --> 00:01:13,550
高度なトピックとの間に非常に高く、ほとん 

25
00:01:13,550 --> 00:01:16,800
ど不必要な概念的ハードルが生じる可能性があります。

26
00:01:16,800 --> 00:01:17,580
微分幾何学。

27
00:01:18,840 --> 00:01:22,521
私が皆さんと共有したいのは、微分積分について考える方法です 

28
00:01:22,521 --> 00:01:26,203
。これを、微分積分が登場するより一般的なコンテキストのいく 

29
00:01:26,203 --> 00:01:29,640
つかに、よりシームレスに一般化する変換ビューと呼びます。

30
00:01:29,880 --> 00:01:32,370
次に、この代替ビューを使用して、分数の繰

31
00:01:32,370 --> 00:01:34,860
り返しに関する楽しいパズルを分析します。

32
00:01:35,460 --> 00:01:37,599
ただし、最初に、標準のビジュアルとは何かについて、全 

33
00:01:37,599 --> 00:01:39,660
員が同じ認識を持っていることを確認したいと思います。

34
00:01:40,060 --> 00:01:43,613
単純に実数を入力と出力として受け取る関数のグラフを作

35
00:01:43,613 --> 00:01:47,167
成する場合、微 積分のコースで最初に学ぶことの 1 

36
00:01:47,167 --> 00:01:50,721
つは、導関数によってこのグラ フの傾きが得られるとい

37
00:01:50,721 --> 00:01:53,865
うことです。これが意味するところは、関数の導 

38
00:01:53,865 --> 00:01:57,419
関数は、すべての入力 x に対してその傾きを返す新し

39
00:01:57,419 --> 00:01:58,240
い関数です。

40
00:01:59,520 --> 00:02:02,091
ここで、この導関数を勾配のアイデアとして導関 

41
00:02:02,091 --> 00:02:04,440
数の定義として考えないことをお勧めします。

42
00:02:05,000 --> 00:02:07,710
むしろ、入力の周りの小さな微調整に対して関数がどの程度敏感で

43
00:02:07,710 --> 00:02:10,419
 あるかについての、より根本的なものであると考えてください。

44
00:02:11,020 --> 00:02:14,073
そして、傾きは、関数のこの特定の見方にのみ関連する感 

45
00:02:14,073 --> 00:02:16,900
度について考えるための 1 つの方法にすぎません。

46
00:02:17,340 --> 00:02:19,821
さらに詳しく知りたい場合は、別のビデオではなく、この 

47
00:02:19,821 --> 00:02:22,120
トピックに関する完全なシリーズをご用意しています。

48
00:02:22,600 --> 00:02:26,049
ここで、導関数の代替ビジュアルの背後にある基本的な考 

49
00:02:26,049 --> 00:02:29,498
え方は、この関数を数直線上のすべての入力点を別の数直 

50
00:02:29,498 --> 00:02:32,820
線上の対応する出力にマッピングすると考えることです。

51
00:02:33,400 --> 00:02:35,640
このコンテキストでは、導関数によって得られるの

52
00:02:35,640 --> 00:02:37,881
は、入力空間がさまざまな 領域でどの程度引き伸

53
00:02:37,881 --> 00:02:40,220
ばされたり押しつぶされたりするかを示す尺度です。

54
00:02:41,859 --> 00:02:45,472
つまり、特定の入力の周囲をズームインし、その周囲に

55
00:02:45,472 --> 00:02:49,085
等間隔に配置された 点をいくつか確認すると、その入

56
00:02:49,085 --> 00:02:51,831
力の関数の導関数によって、マッピング 

57
00:02:51,831 --> 00:02:55,443
後にそれらの点がどのように広がるか、または縮小する

58
00:02:55,443 --> 00:02:56,600
かがわかります。

59
00:02:57,940 --> 00:02:59,400
ここで、具体的な例を見てみましょう。

60
00:02:59,740 --> 00:03:02,701
関数 x2 を例に挙げると、1 から 1、2 

61
00:03:02,701 --> 00:03:05,920
から 4、3 から 9 などにマッピングされます。

62
00:03:06,480 --> 00:03:09,870
また、その間のすべてのポイントにど

63
00:03:09,870 --> 00:03:13,260
のように作用するかも確認できます。

64
00:03:13,260 --> 00:03:16,477
入力 1 の周りの小さな点のクラスターを拡大して、そ

65
00:03:16,477 --> 00:03:19,695
れらが関連する出力の周りでど こに到達するかを確認す

66
00:03:19,695 --> 00:03:23,160
ると、それらが引き伸ばされる傾向があることがわかります。

67
00:03:23,160 --> 00:03:27,820
実際には、おおよそ 2 倍に引き伸ばされたように見えます。

68
00:03:27,820 --> 00:03:31,701
ズームインすると、このローカルな動作が 

69
00:03:31,701 --> 00:03:35,000
2 倍になっているように見えます。

70
00:03:35,000 --> 00:03:38,255
これは、入力 x が 1 に等しい場合の 

71
00:03:38,255 --> 00:03:41,820
x2 の導関数が 2 になることを意味します。

72
00:03:42,340 --> 00:03:45,400
それは、変革の文脈においてその事実がどのように見えるかです。

73
00:03:46,460 --> 00:03:49,387
入力 3 の周囲の点の近傍を見ると、 

74
00:03:49,387 --> 00:03:52,160
それらは 6 倍に引き伸ばされます。

75
00:03:52,740 --> 00:03:55,481
これは、入力 3 でのこの関数の導関数が 

76
00:03:55,481 --> 00:03:57,440
6 に等しいことを意味します。

77
00:03:58,980 --> 00:04:01,957
入力の 1/4 付近では、小さな領域が 

78
00:04:01,957 --> 00:04:05,233
1/2 に縮小される傾 向があり、導関数が 

79
00:04:05,233 --> 00:04:08,360
1 より小さくなるのはこのようになります。

80
00:04:10,720 --> 00:04:12,600
入力 0 は興味深いものです。

81
00:04:13,120 --> 00:04:15,655
10 倍に拡大すると、継続的に伸びたり押し 

82
00:04:15,655 --> 00:04:17,959
つぶされたりしているようには見えません。

83
00:04:18,380 --> 00:04:19,870
まず、すべての出力が最終的に物事

84
00:04:19,870 --> 00:04:21,360
の正しいプラス面に反映されます。

85
00:04:21,360 --> 00:04:27,694
100 倍、または 1000 倍とどんどんズー

86
00:04:27,694 --> 00:04:34,580
ムインしていくと、0 の 周囲の小さな点の近傍が 

87
00:04:34,580 --> 00:04:40,640
0 自体に折りたたまれているように見えます。

88
00:04:40,640 --> 00:04:43,300
導関数が 0 になると次のようになります。

89
00:04:43,300 --> 00:04:45,286
ローカルの動作は、整数直線に 0 

90
00:04:45,286 --> 00:04:47,040
を乗算するように見えてきます。

91
00:04:47,040 --> 00:04:49,986
特定のズーム レベルですべてをある点まで完全に折りたたむ

92
00:04:49,986 --> 00:04:52,933
必要はありません。代わりに、 ズームインをどんどん近づけ

93
00:04:52,933 --> 00:04:55,880
ていくと、どのような動作が制限されるかが問題になります。

94
00:04:55,880 --> 00:04:58,960
ここでネガティブなインプットに注目することも有益です。

95
00:05:00,700 --> 00:05:03,314
すべての正の入力値が入る場所と衝突するため、

96
00:05:03,314 --> 00:05:05,452
物事は少し窮屈に感じられ 始めます。

97
00:05:05,452 --> 00:05:08,780
これは、関数を変換として考えることの欠点の 1 つです。

98
00:05:09,400 --> 00:05:11,293
しかし、導関数の場合、私たちが実際に気にす

99
00:05:11,293 --> 00:05:13,186
るのはとにかくローカル な動作、つまり特定

100
00:05:13,186 --> 00:05:15,260
の入力の周囲の狭い範囲で何が起こるかだけです。

101
00:05:15,260 --> 00:05:19,760
ここで、たとえばマイナス 2 付近の小さな入力が引き伸 

102
00:05:19,760 --> 00:05:24,100
ばされるだけでなく、反転されることに注目してください。

103
00:05:24,680 --> 00:05:28,373
具体的には、ズームインすると、そのような近傍に対するアクシ 

104
00:05:28,373 --> 00:05:31,820
ョンは、ますますマイナス 4 を乗算するように見えます。

105
00:05:32,320 --> 00:05:38,900
関数の導関数が負になる場合は次のようになります。

106
00:05:38,900 --> 00:05:41,332
これで要点は理解できたと思いますが、これが問 

107
00:05:41,332 --> 00:05:43,660
題解決にどのように役立つかを見てみましょう。

108
00:05:44,260 --> 00:05:46,968
最近、私の友人が、無限分数 1 プラス 1 割る 1 

109
00:05:46,968 --> 00:05:49,275
プラス 1 割る 1 プ ラス 1 割る 1 

110
00:05:49,275 --> 00:05:51,481
についてのとても楽しい質問をしてくれました。

111
00:05:51,481 --> 00:05:54,290
オンラインで数 学のビデオを見ているのは明らかなので、お

112
00:05:54,290 --> 00:05:56,296
そらくこれを以前に見たことがあるかもし 

113
00:05:56,296 --> 00:05:59,104
れませんが、私の友人の質問は、実際には、ここで見ているデ

114
00:05:59,104 --> 00:06:01,913
リバティブの見方に関連 する、あなたがこれまで考えたこと

115
00:06:01,913 --> 00:06:04,220
もなかったかもしれないことに切り込んでいます。

116
00:06:05,020 --> 00:06:08,270
このような式を評価する一般的な方法は、それを 

117
00:06:08,270 --> 00:06:11,096
x と等しく設 定し、その中に完全な分数

118
00:06:11,096 --> 00:06:13,640
のコピーがあることに気づくことです。

119
00:06:14,700 --> 00:06:16,681
したがって、そのコピーを別の x 

120
00:06:16,681 --> 00:06:18,780
に置き換えて、x を求めるだけです。

121
00:06:19,440 --> 00:06:21,881
つまり、関数 1 プラス 1 を x 

122
00:06:21,881 --> 00:06:24,580
で 割った不動点を見つけることが必要です。

123
00:06:27,160 --> 00:06:30,191
しかし、問題はここにあります。x には実際には 

124
00:06:30,191 --> 00:06:32,464
2 つの解があり、1 プ ラス 1 

125
00:06:32,464 --> 00:06:35,116
をその数値で割ると同じ結果が得られる 2 

126
00:06:35,116 --> 00:06:36,380
つの特別な数値です。

127
00:06:36,940 --> 00:06:39,438
1 つは黄金比、ファイ、約 1 です。

128
00:06:39,438 --> 00:06:42,331
618、もう 1 つはマイナスの 0 です。

129
00:06:42,331 --> 00:06:44,567
618、これ はたまたま負の 1 

130
00:06:44,567 --> 00:06:46,540
をファイで割った値になります。

131
00:06:46,960 --> 00:06:49,980
私はこのもう 1 つの番号をファイの弟と呼びたいと思います 

132
00:06:49,980 --> 00:06:52,900
。ファイが持つほぼすべての特性がこの番号にもあるからです。

133
00:06:53,560 --> 00:06:56,906
そして、これは、私たちが見た無限の分数がどういうわけ

134
00:06:56,906 --> 00:06:59,223
かファイの弟であるマイ ナスの 0 

135
00:06:59,223 --> 00:07:02,956
にも等しいと言うのは妥当なのかという疑問を引き起こします。

136
00:07:02,956 --> 00:07:03,600
618? 

137
00:07:04,520 --> 00:07:06,766
おそらく最初は、明らかにそうではありません

138
00:07:06,766 --> 00:07:09,013
が、左側にあるものは すべて正であるのに、

139
00:07:09,013 --> 00:07:11,260
どうして負の数に等しくなるのでしょうか? 

140
00:07:12,500 --> 00:07:14,800
まず、このような表現が実際に何を意味

141
00:07:14,800 --> 00:07:17,100
するのかを明確にする必要があります。

142
00:07:17,780 --> 00:07:20,853
これについて考える方法の 1 つは、これが唯一の方法で

143
00:07:20,853 --> 00:07:23,584
はありませんが、ここでは選択の自由が あります。

144
00:07:23,584 --> 00:07:26,658
まず、1 などの定数から始めて、関数 1 プラス 1 

145
00:07:26,658 --> 00:07:29,731
を x で割った関数を繰り 返し適用し、次に何を尋ねる

146
00:07:29,731 --> 00:07:32,804
かを考えることです。このアプローチは今後も継続していき

147
00:07:32,804 --> 00:07:33,260
ますか？

148
00:07:36,040 --> 00:07:38,527
つまり、確かに象徴的に、得られるものは無限の分数にますます 

149
00:07:38,527 --> 00:07:41,015
似てきます。そのため、数値を等しくしたい場合は、この一連の 

150
00:07:41,015 --> 00:07:43,420
数値がどのように近づくかを尋ねる必要があるかもしれません。

151
00:07:45,120 --> 00:07:47,119
そして、それがあなたの見方であるなら、負の数

152
00:07:47,119 --> 00:07:49,118
から始めるかもしれないの で、式全体が負の値

153
00:07:49,118 --> 00:07:51,300
になることはそれほどおかしなことではありません。

154
00:07:52,740 --> 00:07:55,795
結局のところ、負の 1 をファイで割った値から始めて、

155
00:07:55,795 --> 00:07:58,511
この関数 (1 プラス 1 を x に加える) 

156
00:07:58,511 --> 00:08:01,567
を適用すると、負の 1 をファイで割った同じ数値が返さ

157
00:08:01,567 --> 00:08:02,020
れます。

158
00:08:02,200 --> 00:08:03,574
したがって、何度適用しても、こ

159
00:08:03,574 --> 00:08:05,040
の値は固定されたままになります。

160
00:08:05,040 --> 00:08:09,412
しかしそれでも、おそらくファイをこのペアのお気 

161
00:08:09,412 --> 00:08:13,420
に入りの兄弟とみなすべき理由が1つあります。

162
00:08:14,020 --> 00:08:17,422
これを試してみてください。何らかの計算機を起動して

163
00:08:17,422 --> 00:08:20,689
、任意の乱数から始 めて、この関数に代入します。

164
00:08:20,689 --> 00:08:23,956
1 プラス 1 を x で割って、その数 値を 

165
00:08:23,956 --> 00:08:28,040
1 プラス 1 に x を掛けて代入します。、何度も何度も。

166
00:08:28,480 --> 00:08:32,450
どのような定数から始めても、最終的には 1 になります。

167
00:08:32,450 --> 00:08:33,159
618. 

168
00:08:33,799 --> 00:08:38,771
負の数から始めたとしても、それがファイの弟に非常に近い値 

169
00:08:38,771 --> 00:08:43,400
であっても、最終的にはその値を避けてファイに戻ります。

170
00:08:50,819 --> 00:08:52,460
それで、ここで何が起こっているのでしょうか？

171
00:08:52,800 --> 00:08:54,359
なぜこれらの固定点の 1 つが他の固

172
00:08:54,359 --> 00:08:55,920
定点よりも優先されるのでしょうか? 

173
00:08:56,720 --> 00:08:59,242
おそらく、導関数の変換的理解がこの設定を理解するのにどの

174
00:08:59,242 --> 00:09:01,764
ように役立つかはすで にお分かりいただけたかと思いますが

175
00:09:01,764 --> 00:09:03,746
、対照的な点を持たせるために、このような問 

176
00:09:03,746 --> 00:09:06,269
題がグラフを使用してどのように教えられることが多いかを示

177
00:09:06,269 --> 00:09:07,080
したいと思います。

178
00:09:07,920 --> 00:09:11,980
この関数にランダムな入力を接続すると、y 

179
00:09:11,980 --> 00:09:15,460
値によって対応する出力がわかります。

180
00:09:15,460 --> 00:09:19,890
その出力を関数に戻すには、まず y が x に等し 

181
00:09:19,890 --> 00:09:22,787
い行に達するまで水平に移動します。

182
00:09:22,787 --> 00:09:25,513
そうすると、x の値が前の y 

183
00:09:25,513 --> 00:09:28,240
の値に対応する位置が得られます。

184
00:09:28,920 --> 00:09:32,101
そこで、そこから垂直方向に移動して、この新しい 

185
00:09:32,101 --> 00:09:35,150
x 値がどのよう な出力になるかを確認します。

186
00:09:35,150 --> 00:09:37,536
それから繰り返し、y が x に等 

187
00:09:37,536 --> 00:09:39,789
しい線まで水平方向に移動して、x 

188
00:09:39,789 --> 00:09:43,236
値が先ほど取得した出力と同じで ある点を見つけます。

189
00:09:43,236 --> 00:09:46,020
次に、垂直に移動して機能を再度適用します。

190
00:09:46,020 --> 00:09:48,540
個人的には、関数を繰り返し適用する 

191
00:09:48,540 --> 00:09:50,780
という考え方は厄介だと思います。

192
00:09:51,300 --> 00:09:54,024
つまり、それは理にかなっていますが、線を引く方法を 

193
00:09:54,024 --> 00:09:56,540
思い出すには、立ち止まって考える必要があります。

194
00:09:57,120 --> 00:09:59,840
そして、必要に応じて、どのような条件によってこ

195
00:09:59,840 --> 00:10:02,560
のクモの巣のプロセスが 固定点に狭まり、固定点

196
00:10:02,560 --> 00:10:05,280
から遠ざかっていくのかを考えることができます。

197
00:10:05,860 --> 00:10:07,336
実際、さあ、今すぐ立ち止まって、練

198
00:10:07,336 --> 00:10:08,900
習としてじっくり考えてみてください。

199
00:10:09,240 --> 00:10:10,460
それは斜面と関係があります。

200
00:10:12,020 --> 00:10:15,526
または、より満足のいく理解が得られると思われ

201
00:10:15,526 --> 00:10:19,033
る演習をスキップしたい 場合は、この関数が変

202
00:10:19,033 --> 00:10:22,700
換としてどのように機能するかを考えてください。

203
00:10:22,700 --> 00:10:24,352
そこで、ここでは、さまざまなサンプリング

204
00:10:24,352 --> 00:10:26,004
された入力ポイントが どこに行くのかを示

205
00:10:26,004 --> 00:10:27,740
すために、矢印の束を描くことから始めます。

206
00:10:28,320 --> 00:10:29,880
余談ですが、これはきちんとした出現パ

207
00:10:29,880 --> 00:10:31,440
ターンを示していると思いませんか? 

208
00:10:31,820 --> 00:10:33,780
これは期待していませんでしたが、アニメーション

209
00:10:33,780 --> 00:10:35,740
中にポップアップするのを見るのはクールでした。

210
00:10:35,740 --> 00:10:38,605
1 を x で割ったアクションにより、この素晴らしい創発的 

211
00:10:38,605 --> 00:10:41,280
な円が得られます。その後、物事を 1 つずらすだけです。

212
00:10:42,040 --> 00:10:44,160
とにかく、この文脈で、x に対して 1 

213
00:10:44,160 --> 00:10:46,387
プラス 1 などの関数 を繰り返し適用する

214
00:10:46,387 --> 00:10:48,720
ことが何を意味するのかを考えてほしいのです。

215
00:10:50,240 --> 00:10:54,179
すべての入力を出力にマッピングさせた後、そ 

216
00:10:54,179 --> 00:10:57,939
れらを新しい入力とみなして、同じプロセス 

217
00:10:57,939 --> 00:11:01,520
を何度も繰り返し適用することができます。

218
00:11:02,580 --> 00:11:04,910
サンプル ポイントを表すいくつかのドットを使用し

219
00:11:04,910 --> 00:11:07,241
てこれをアニメーション化すると、これらのドット 

220
00:11:07,241 --> 00:11:09,572
がすべて 1 程度に固まるまで、それほど多くの反

221
00:11:09,572 --> 00:11:12,000
復を必要としないことに注目してください。618. 

222
00:11:14,620 --> 00:11:17,471
ここで、1 を知っていることを思い出してください。

223
00:11:17,471 --> 00:11:19,411
618 とその弟分、マイナス 0。

224
00:11:19,411 --> 00:11:22,491
618 以降、この プロセスの各反復中、所定の位置に固

225
00:11:22,491 --> 00:11:23,860
定されたままになります。

226
00:11:24,860 --> 00:11:27,480
しかし、ファイの周囲を拡大してみましょう。

227
00:11:27,480 --> 00:11:31,971
マップ中に、その領域内の点はファイの周りで収縮します。

228
00:11:31,971 --> 00:11:36,795
これは、x に対する関数 1 プラス 1 が、この入力で 

229
00:11:36,795 --> 00:11:41,120
1 より小さい大きさの導関数を持つことを意味します。

230
00:11:41,880 --> 00:11:44,809
実際、この導関数はマイナス 0 付近になることがわかります。

231
00:11:44,809 --> 00:11:45,200
38. 

232
00:11:46,120 --> 00:11:48,805
これが意味するのは、アプリケーションを繰り返すた

233
00:11:48,805 --> 00:11:51,490
びに、ファイに向かう重力の ように、この数値の周

234
00:11:51,490 --> 00:11:54,400
囲の近傍がどんどん小さくなってしまうということです。

235
00:11:54,959 --> 00:11:56,737
それで今、ファイの弟の近所で何が起

236
00:11:56,737 --> 00:11:58,620
こっていると思うかを教えてください。

237
00:12:01,320 --> 00:12:05,204
そこでは導関数の大きさが 1 より大きいため 

238
00:12:05,204 --> 00:12:08,920
、固定点に近い点は固定点から遠ざけられます。

239
00:12:09,520 --> 00:12:11,772
計算してみると、反復ごとに 2 倍以上 

240
00:12:11,772 --> 00:12:13,800
引き伸ばされていることがわかります。

241
00:12:14,420 --> 00:12:17,763
ここでは導関数が負であるため、それらも反転します 

242
00:12:17,763 --> 00:12:20,840
が、安定性のための重要な事実は大きさだけです。

243
00:12:23,440 --> 00:12:26,555
数学者はこの右側の値を安定した不動点、 

244
00:12:26,555 --> 00:12:29,360
左側の値を不安定な不動点と呼びます。

245
00:12:30,000 --> 00:12:32,293
すべてを少しだけ混乱させたときに、そこから

246
00:12:32,293 --> 00:12:34,587
離れるのではなく、最初 の場所に戻る傾向が

247
00:12:34,587 --> 00:12:37,100
ある場合、すべては安定していると見なされます。

248
00:12:38,180 --> 00:12:41,303
つまり、私たちが見ているのは、固定点の安定性はそ 

249
00:12:41,303 --> 00:12:44,426
の導関数の大きさが 1 より大きいか小さいかによ 

250
00:12:44,426 --> 00:12:47,300
って決まるという、非常に有益な小さな事実です。

251
00:12:47,300 --> 00:12:50,401
これは、計算機で Enter キーを何度も押す

252
00:12:50,401 --> 00:12:53,503
だけの数値遊びでファイが 常に登場するのに、フ

253
00:12:53,503 --> 00:12:56,740
ァイの弟は決して登場しない理由を説明しています。

254
00:12:56,740 --> 00:12:59,903
ファイの弟を無限分数の有効な値と 

255
00:12:59,903 --> 00:13:02,880
みなすかどうかはあなた次第です。

256
00:13:03,260 --> 00:13:06,943
これまで示したすべてのことから、この式が限界プロセスを表 

257
00:13:06,943 --> 00:13:10,627
すものと考えると、ファイの弟以外の考えられるすべてのシー 

258
00:13:10,627 --> 00:13:14,310
ド値がファイに収束する系列を与えるため、それらを互いに同 

259
00:13:14,310 --> 00:13:17,740
等の立場に置くのは愚かに感じられることがわかります。。

260
00:13:18,260 --> 00:13:20,972
しかし、おそらくあなたはそれを限界とは考えておらず

261
00:13:20,972 --> 00:13:23,685
、おそらくあなた が行っている数学の種類は、これを

262
00:13:23,685 --> 00:13:25,639
単に複数の値を持つ多項式の解のよう 

263
00:13:25,639 --> 00:13:28,351
な純粋な代数オブジェクトとして扱うのに適しているの

264
00:13:28,351 --> 00:13:29,220
かもしれません。

265
00:13:30,340 --> 00:13:31,859
とにかく、それは重要ではありません。

266
00:13:31,859 --> 00:13:33,969
そして、ここで私が言いたいのは、この密度の変化とし

267
00:13:33,969 --> 00:13:36,079
て導関数を観察 することの方が、全体としてグラフィ

268
00:13:36,079 --> 00:13:38,189
カルな直観よりも何らかの形で優れているということで

269
00:13:38,189 --> 00:13:38,780
はありません。

270
00:13:39,600 --> 00:13:42,287
実際、この方法で関数全体を描くのは、グラフに比べ 

271
00:13:42,287 --> 00:13:44,760
てやや不格好で非現実的になる可能性があります。

272
00:13:45,339 --> 00:13:48,206
私が言いたいのは、これは微積分の入門コースのほとんどでもっ

273
00:13:48,206 --> 00:13:50,183
と言及される価値があるという ことです。

274
00:13:50,183 --> 00:13:53,050
なぜなら、微積分についての学生の理解をもう少し柔軟にするの

275
00:13:53,050 --> 00:13:53,940
に役立つからです。

276
00:13:54,900 --> 00:13:58,307
先ほども述べたように、新しいトピックを学ぶときにこの視 

277
00:13:58,307 --> 00:14:01,714
点を持ち歩くことをお勧めする本当の理由は、単一変数微積 

278
00:14:01,714 --> 00:14:05,000
分の理解に役立つというよりも、その後のことのためです。

