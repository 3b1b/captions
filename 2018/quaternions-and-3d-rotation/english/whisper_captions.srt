1
00:00:02,960 --> 00:00:07,160
In a moment, I'll point you to a separate website hosting a short sequence of what we're

2
00:00:07,160 --> 00:00:08,640
calling explorable videos.

3
00:00:09,220 --> 00:00:13,280
It was done in collaboration with Ben Eater, who some of you may know as that guy who runs

4
00:00:13,280 --> 00:00:14,960
the excellent computer engineering channel.

5
00:00:15,480 --> 00:00:18,800
And if you don't know who he is, viewers of this channel would certainly enjoy the

6
00:00:18,800 --> 00:00:20,820
content of his, so do check it out.

7
00:00:21,300 --> 00:00:25,040
This collaboration was something a little different though, for both of us, and all

8
00:00:25,040 --> 00:00:29,380
of the web development that made these explorable videos possible is completely thanks to Ben.

9
00:00:29,860 --> 00:00:33,700
I don't want to say too much about it here, it's really something you have to experience

10
00:00:33,700 --> 00:00:37,440
for yourself, certainly one of the coolest projects I've had the pleasure of working

11
00:00:37,440 --> 00:00:37,880
on.

12
00:00:38,300 --> 00:00:42,440
Before that though, if you can contain your excitement, I want to use this video as a

13
00:00:42,440 --> 00:00:45,460
chance to tee things up with a little bit of surrounding context.

14
00:00:46,900 --> 00:00:51,820
So to set the stage, last video I described quaternions, a certain 4-dimensional number

15
00:00:51,820 --> 00:00:56,720
system that the 19th century versions of Wolverine and the old man from Home Alone called evil

16
00:00:56,720 --> 00:00:58,780
for how convoluted it seemed at the time.

17
00:00:59,060 --> 00:01:03,640
And perhaps you too are wondering why on earth anyone would bother with such an alien-seeming

18
00:01:03,640 --> 00:01:04,320
number system.

19
00:01:05,200 --> 00:01:10,180
One of the big reasons, especially for programmers, is that they give a really nice way for describing

20
00:01:10,180 --> 00:01:15,220
3D orientation, which is not susceptible to the bugs and edge cases of other methods.

21
00:01:15,820 --> 00:01:19,360
I mean they're interesting mathematically for a lot of reasons, but this application

22
00:01:19,360 --> 00:01:23,900
for computer graphics and robotics and virtual reality and anything involving 3D orientation

23
00:01:23,900 --> 00:01:26,400
is probably the biggest use case for quaternions.

24
00:01:26,400 --> 00:01:31,800
To take one example, a friend of mine who used to work at Apple, Andy Matuszczak, delighted

25
00:01:31,800 --> 00:01:35,960
in telling me about shipping code to hundreds of millions of devices that uses quaternions

26
00:01:35,960 --> 00:01:39,040
to track the phone's model for how it's oriented in space.

27
00:01:39,660 --> 00:01:43,520
That's right, your phone almost certainly has software running somewhere inside of it

28
00:01:43,520 --> 00:01:45,240
that relies on quaternions.

29
00:01:46,340 --> 00:01:50,720
The thing is, there are other ways to think about computing rotations, many of which are

30
00:01:50,720 --> 00:01:52,920
way simpler to think about than quaternions.

31
00:01:53,250 --> 00:01:58,720
For example, any of you familiar with linear algebra will know that 3x3 matrices can really

32
00:01:58,720 --> 00:02:00,780
nicely describe 3D transformations.

33
00:02:01,340 --> 00:02:05,780
And a common way that many programmers think about constructing a rotation matrix for a

34
00:02:05,780 --> 00:02:11,020
desired orientation is to imagine rotating an object around three easy-to-think-about

35
00:02:11,020 --> 00:02:15,740
axes, where the relevant angles for these rotations are commonly called Euler angles.

36
00:02:16,580 --> 00:02:21,100
And this mostly works, but one big problem is that it's vulnerable to something called

37
00:02:21,100 --> 00:02:25,640
gimbal lock, where when two of your axes of rotation get lined up, you lose a degree

38
00:02:25,640 --> 00:02:26,100
of freedom.

39
00:02:26,700 --> 00:02:31,500
And it can also cause difficulties and ambiguities when trying to interpolate between two separate

40
00:02:32,100 --> 00:02:32,340
orientations.

41
00:02:32,940 --> 00:02:36,540
If you're curious for more of the details, there are many great sources online for learning

42
00:02:36,540 --> 00:02:40,060
about Euler angles and gimbal lock, and I've left links in the description to a few of

43
00:02:40,060 --> 00:02:40,320
them.

44
00:02:41,040 --> 00:02:45,300
Not only do quaternions avoid issues like gimbal lock, they give a really seamless way

45
00:02:45,300 --> 00:02:50,400
to interpolate between two three-dimensional orientations, one which lacks the ambiguities

46
00:02:50,400 --> 00:02:54,760
of Euler angles, and which avoids the issues of numerical precision and normalization that

47
00:02:54,760 --> 00:02:57,740
arise in trying to interpolate between two rotation matrices.

48
00:02:58,780 --> 00:03:03,280
To warm up to the idea of how multiplication in some higher-dimensional number system might

49
00:03:03,280 --> 00:03:07,780
be used to compute rotations, take a moment to remember how it is that complex numbers

50
00:03:07,780 --> 00:03:10,860
give a slick method for computing 2D rotations.

51
00:03:11,540 --> 00:03:16,340
Specifically, let's say you have some point in two-dimensional space, like 4, 1, and you

52
00:03:16,340 --> 00:03:20,640
want to know the new coordinates you'd get if you rotate this point 30 degrees around

53
00:03:20,640 --> 00:03:21,320
the origin.

54
00:03:22,240 --> 00:03:24,620
Complex numbers give a sort of snazzy way to do this.

55
00:03:25,080 --> 00:03:30,280
You take the complex number that's 30 degrees off the horizontal with magnitude 1, cos 30

56
00:03:30,280 --> 00:03:35,820
degrees plus sin 30 degrees times i, and then you just multiply this by your point, represented

57
00:03:35,820 --> 00:03:36,920
as a complex number.

58
00:03:37,500 --> 00:03:41,720
The only rule you need to know to carry out this computation is that i2 equals negative

59
00:03:41,720 --> 00:03:42,120
1.

60
00:03:42,120 --> 00:03:46,840
Then in what might feel like a bit of black magic to those first learning it, carrying

61
00:03:46,840 --> 00:03:51,600
out this product from that one simple rule gives the coordinates of a new point, the

62
00:03:51,600 --> 00:03:53,840
point rotated 30 degrees from the original.

63
00:03:55,340 --> 00:04:00,080
Using quaternions to describe 3D rotations is similar, though the look and feel is slightly

64
00:04:00,080 --> 00:04:00,500
different.

65
00:04:01,100 --> 00:04:03,980
Let's say you want to rotate some angle about some axis.

66
00:04:04,700 --> 00:04:09,540
You first define that axis with a unit vector, which we'll write as having i, j, and k

67
00:04:09,540 --> 00:04:14,260
components, normalized so that the sum of the squares of those components is 1.

68
00:04:15,160 --> 00:04:19,940
Similar to the case of complex numbers, you use the angle to construct a quaternion by

69
00:04:19,940 --> 00:04:25,740
taking cosine of that angle as the real part, plus sin of that angle times an imaginary

70
00:04:25,740 --> 00:04:30,640
part, except this time the imaginary part has three components, the coordinates of our

71
00:04:30,640 --> 00:04:31,600
axis of rotation.

72
00:04:32,520 --> 00:04:37,260
Well, actually you take half of the angle, which might feel totally arbitrary, but hopefully

73
00:04:37,260 --> 00:04:39,720
that makes sense by the end of this whole experience.

74
00:04:40,540 --> 00:04:44,400
Let's say you have some 3D point, which we'll write with i, j, and k components,

75
00:04:44,920 --> 00:04:49,440
and you want to know the coordinates you'd get when you rotate this point by your specified

76
00:04:49,440 --> 00:04:51,540
angle around your specified axis.

77
00:04:52,360 --> 00:04:57,340
What you do is not just a single quaternion product, but a sort of quaternion sandwich,

78
00:04:57,700 --> 00:05:01,940
where you multiply by q from the left and the inverse of q from the right.

79
00:05:02,640 --> 00:05:07,200
If you know the rules for how i, j, and k multiply amongst themselves, you can carry

80
00:05:07,200 --> 00:05:11,580
out these two products by expanding everything out, or more realistically by having a computer

81
00:05:11,580 --> 00:05:12,560
do it for you.

82
00:05:13,100 --> 00:05:18,220
And in what might feel like a bit of black magic, this big computation will return for

83
00:05:18,220 --> 00:05:20,400
you the rotated version of the point.

84
00:05:21,160 --> 00:05:25,280
Our goal is to break this down and visualize what's happening with each of these two

85
00:05:25,280 --> 00:05:25,760
products.

86
00:05:26,340 --> 00:05:30,100
I'll review the method for thinking about quaternion multiplication described last video,

87
00:05:30,500 --> 00:05:34,800
and explain why half the angle is used, and why you would multiply from the right by the

88
00:05:34,800 --> 00:05:35,160
inverse.

89
00:05:35,940 --> 00:05:41,000
On the screen now and at the top of the description you'll find a link to eater.net slash quaternions,

90
00:05:41,300 --> 00:05:45,400
which is where Ben set up the explorable video tutorial, where I explain what's going on

91
00:05:45,400 --> 00:05:46,840
with this rotation computation.

92
00:05:47,640 --> 00:05:49,000
It's just really cool.

93
00:05:49,220 --> 00:05:50,340
Eater did something awesome here.

94
00:05:50,540 --> 00:05:54,020
So at the very least just take a couple minutes to go look at it, but I'd love it if you

95
00:05:54,020 --> 00:05:55,080
went through the full experience.

