1
00:00:02,959 --> 00:00:05,824
In a moment, I'll point you to a separate website hosting 

2
00:00:05,824 --> 00:00:08,640
a short sequence of what we're calling explorable videos.

3
00:00:09,220 --> 00:00:12,004
It was done in collaboration with Ben Eater, who some of you may 

4
00:00:12,004 --> 00:00:14,960
know as that guy who runs the excellent computer engineering channel.

5
00:00:15,480 --> 00:00:18,059
And if you don't know who he is, viewers of this channel 

6
00:00:18,059 --> 00:00:20,820
would certainly enjoy the content of his, so do check it out.

7
00:00:21,300 --> 00:00:24,749
This collaboration was something a little different though, for both of us, 

8
00:00:24,749 --> 00:00:28,744
and all of the web development that made these explorable videos possible is completely 

9
00:00:28,744 --> 00:00:29,380
thanks to Ben.

10
00:00:29,860 --> 00:00:33,892
I don't want to say too much about it here, it's really something you have to experience 

11
00:00:33,892 --> 00:00:37,880
for yourself, certainly one of the coolest projects I've had the pleasure of working on.

12
00:00:38,300 --> 00:00:40,955
Before that though, if you can contain your excitement, 

13
00:00:40,955 --> 00:00:44,511
I want to use this video as a chance to tee things up with a little bit of 

14
00:00:44,511 --> 00:00:45,460
surrounding context.

15
00:00:46,900 --> 00:00:49,923
So to set the stage, last video I described quaternions, 

16
00:00:49,923 --> 00:00:53,741
a certain 4-dimensional number system that the 19th century versions of 

17
00:00:53,741 --> 00:00:57,613
Wolverine and the old man from Home Alone called evil for how convoluted 

18
00:00:57,613 --> 00:00:58,780
it seemed at the time.

19
00:00:59,060 --> 00:01:01,690
And perhaps you too are wondering why on earth anyone 

20
00:01:01,690 --> 00:01:04,319
would bother with such an alien-seeming number system.

21
00:01:05,200 --> 00:01:07,971
One of the big reasons, especially for programmers, 

22
00:01:07,971 --> 00:01:11,542
is that they give a really nice way for describing 3D orientation, 

23
00:01:11,542 --> 00:01:15,220
which is not susceptible to the bugs and edge cases of other methods.

24
00:01:15,820 --> 00:01:18,802
I mean they're interesting mathematically for a lot of reasons, 

25
00:01:18,802 --> 00:01:22,345
but this application for computer graphics and robotics and virtual reality 

26
00:01:22,345 --> 00:01:26,400
and anything involving 3D orientation is probably the biggest use case for quaternions.

27
00:01:26,400 --> 00:01:30,700
To take one example, a friend of mine who used to work at Apple, Andy Matuszczak, 

28
00:01:30,700 --> 00:01:34,844
delighted in telling me about shipping code to hundreds of millions of devices 

29
00:01:34,844 --> 00:01:39,040
that uses quaternions to track the phone's model for how it's oriented in space.

30
00:01:39,660 --> 00:01:42,375
That's right, your phone almost certainly has software 

31
00:01:42,375 --> 00:01:45,240
running somewhere inside of it that relies on quaternions.

32
00:01:46,340 --> 00:01:49,852
The thing is, there are other ways to think about computing rotations, 

33
00:01:49,852 --> 00:01:52,920
many of which are way simpler to think about than quaternions.

34
00:01:53,250 --> 00:01:56,985
For example, any of you familiar with linear algebra will know 

35
00:01:56,985 --> 00:02:00,780
that 3x3 matrices can really nicely describe 3D transformations.

36
00:02:01,340 --> 00:02:06,121
And a common way that many programmers think about constructing a rotation matrix for 

37
00:02:06,121 --> 00:02:11,014
a desired orientation is to imagine rotating an object around three easy-to-think-about 

38
00:02:11,014 --> 00:02:15,740
axes, where the relevant angles for these rotations are commonly called Euler angles.

39
00:02:16,580 --> 00:02:19,493
And this mostly works, but one big problem is that it's 

40
00:02:19,493 --> 00:02:22,718
vulnerable to something called gimbal lock, where when two of 

41
00:02:22,718 --> 00:02:26,100
your axes of rotation get lined up, you lose a degree of freedom.

42
00:02:26,700 --> 00:02:29,519
And it can also cause difficulties and ambiguities when 

43
00:02:29,519 --> 00:02:32,340
trying to interpolate between two separate orientations.

44
00:02:32,940 --> 00:02:35,266
If you're curious for more of the details, there are many 

45
00:02:35,266 --> 00:02:38,073
great sources online for learning about Euler angles and gimbal lock, 

46
00:02:38,073 --> 00:02:40,320
and I've left links in the description to a few of them.

47
00:02:41,040 --> 00:02:43,823
Not only do quaternions avoid issues like gimbal lock, 

48
00:02:43,823 --> 00:02:47,720
they give a really seamless way to interpolate between two three-dimensional 

49
00:02:47,720 --> 00:02:50,908
orientations, one which lacks the ambiguities of Euler angles, 

50
00:02:50,908 --> 00:02:55,108
and which avoids the issues of numerical precision and normalization that arise in 

51
00:02:55,108 --> 00:02:57,740
trying to interpolate between two rotation matrices.

52
00:02:58,780 --> 00:03:02,628
To warm up to the idea of how multiplication in some higher-dimensional 

53
00:03:02,628 --> 00:03:05,301
number system might be used to compute rotations, 

54
00:03:05,301 --> 00:03:09,416
take a moment to remember how it is that complex numbers give a slick method 

55
00:03:09,416 --> 00:03:10,860
for computing 2D rotations.

56
00:03:11,540 --> 00:03:15,220
Specifically, let's say you have some point in two-dimensional space, 

57
00:03:15,220 --> 00:03:18,480
like 4, 1, and you want to know the new coordinates you'd get 

58
00:03:18,480 --> 00:03:21,320
if you rotate this point 30 degrees around the origin.

59
00:03:22,240 --> 00:03:24,620
Complex numbers give a sort of snazzy way to do this.

60
00:03:25,080 --> 00:03:29,850
You take the complex number that's 30 degrees off the horizontal with magnitude 1, 

61
00:03:29,850 --> 00:03:33,931
cos 30 degrees plus sin 30 degrees times i, and then you just multiply 

62
00:03:33,931 --> 00:03:36,920
this by your point, represented as a complex number.

63
00:03:37,500 --> 00:03:42,120
The only rule you need to know to carry out this computation is that i2 equals negative 1.

64
00:03:42,120 --> 00:03:46,371
Then in what might feel like a bit of black magic to those first learning it, 

65
00:03:46,371 --> 00:03:51,277
carrying out this product from that one simple rule gives the coordinates of a new point, 

66
00:03:51,277 --> 00:03:53,840
the point rotated 30 degrees from the original.

67
00:03:55,340 --> 00:03:58,122
Using quaternions to describe 3D rotations is similar, 

68
00:03:58,122 --> 00:04:00,500
though the look and feel is slightly different.

69
00:04:01,100 --> 00:04:03,980
Let's say you want to rotate some angle about some axis.

70
00:04:04,700 --> 00:04:09,364
You first define that axis with a unit vector, which we'll write as having i, j, 

71
00:04:09,364 --> 00:04:14,260
and k components, normalized so that the sum of the squares of those components is 1.

72
00:04:15,160 --> 00:04:19,343
Similar to the case of complex numbers, you use the angle to construct 

73
00:04:19,343 --> 00:04:22,996
a quaternion by taking cosine of that angle as the real part, 

74
00:04:22,996 --> 00:04:25,825
plus sin of that angle times an imaginary part, 

75
00:04:25,825 --> 00:04:29,243
except this time the imaginary part has three components, 

76
00:04:29,243 --> 00:04:31,600
the coordinates of our axis of rotation.

77
00:04:32,520 --> 00:04:36,415
Well, actually you take half of the angle, which might feel totally arbitrary, 

78
00:04:36,415 --> 00:04:39,720
but hopefully that makes sense by the end of this whole experience.

79
00:04:40,540 --> 00:04:43,904
Let's say you have some 3D point, which we'll write with i, j, 

80
00:04:43,904 --> 00:04:47,641
and k components, and you want to know the coordinates you'd get when 

81
00:04:47,641 --> 00:04:51,540
you rotate this point by your specified angle around your specified axis.

82
00:04:52,360 --> 00:04:57,563
What you do is not just a single quaternion product, but a sort of quaternion sandwich, 

83
00:04:57,563 --> 00:05:01,940
where you multiply by q from the left and the inverse of q from the right.

84
00:05:02,640 --> 00:05:06,270
If you know the rules for how i, j, and k multiply amongst themselves, 

85
00:05:06,270 --> 00:05:09,645
you can carry out these two products by expanding everything out, 

86
00:05:09,645 --> 00:05:12,560
or more realistically by having a computer do it for you.

87
00:05:13,100 --> 00:05:16,043
And in what might feel like a bit of black magic, 

88
00:05:16,043 --> 00:05:20,400
this big computation will return for you the rotated version of the point.

89
00:05:21,160 --> 00:05:23,704
Our goal is to break this down and visualize what's 

90
00:05:23,704 --> 00:05:25,760
happening with each of these two products.

91
00:05:26,340 --> 00:05:30,584
I'll review the method for thinking about quaternion multiplication described last video, 

92
00:05:30,584 --> 00:05:33,320
and explain why half the angle is used, and why you would 

93
00:05:33,320 --> 00:05:35,160
multiply from the right by the inverse.

94
00:05:35,940 --> 00:05:39,557
On the screen now and at the top of the description you'll find a link to 

95
00:05:39,557 --> 00:05:43,760
eater.net slash quaternions, which is where Ben set up the explorable video tutorial, 

96
00:05:43,760 --> 00:05:46,840
where I explain what's going on with this rotation computation.

97
00:05:47,640 --> 00:05:49,000
It's just really cool.

98
00:05:49,220 --> 00:05:50,340
Eater did something awesome here.

99
00:05:50,540 --> 00:05:52,736
So at the very least just take a couple minutes to go look at it, 

100
00:05:52,736 --> 00:05:54,600
but I'd love it if you went through the full experience.

