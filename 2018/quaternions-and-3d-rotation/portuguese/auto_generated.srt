1
00:00:00,000 --> 00:00:04,441
Em um momento, vou indicar um site separado que hospeda

2
00:00:04,441 --> 00:00:09,200
uma pequena sequência do que chamamos de vídeos exploráveis.

3
00:00:09,200 --> 00:00:12,420
Foi feito em colaboração com Ben Eater, que alguns de vocês devem conhecer

4
00:00:12,420 --> 00:00:15,640
como aquele cara que dirige um excelente canal de engenharia da computação.

5
00:00:15,640 --> 00:00:18,550
E se você não sabe quem ele é, os telespectadores deste canal

6
00:00:18,550 --> 00:00:21,460
certamente iriam gostar do conteúdo dele, então dê uma olhada.

7
00:00:21,460 --> 00:00:24,642
Essa colaboração foi algo um pouco diferente para nós dois,

8
00:00:24,642 --> 00:00:28,673
e todo o desenvolvimento web que tornou possível esses vídeos exploráveis é

9
00:00:28,673 --> 00:00:30,000
totalmente graças ao Ben.

10
00:00:30,000 --> 00:00:34,179
Não quero falar muito sobre isso aqui, é realmente algo que você tem que vivenciar

11
00:00:34,179 --> 00:00:38,560
por si mesmo, certamente um dos projetos mais legais em que tive o prazer de trabalhar.

12
00:00:38,560 --> 00:00:41,931
Antes disso, porém, se você puder conter seu entusiasmo,

13
00:00:41,931 --> 00:00:46,960
quero usar este vídeo como uma chance de apresentar um pouco do contexto circundante.

14
00:00:46,960 --> 00:00:50,799
Então, para preparar o cenário, no último vídeo descrevi os quaternions,

15
00:00:50,799 --> 00:00:54,744
um certo sistema numérico quadridimensional que as versões do século 19 de

16
00:00:54,744 --> 00:00:59,320
Wolverine e o velho de Home Alone chamavam de mal por quão complicado parecia na época.

17
00:00:59,320 --> 00:01:02,355
E talvez você também esteja se perguntando por que alguém se

18
00:01:02,355 --> 00:01:05,540
preocuparia com um sistema numérico de aparência tão alienígena.

19
00:01:05,540 --> 00:01:08,553
Um dos grandes motivos, especialmente para os programadores,

20
00:01:08,553 --> 00:01:12,109
é que eles fornecem uma maneira muito boa de descrever a orientação 3D,

21
00:01:12,109 --> 00:01:15,320
que não é suscetível aos bugs e casos extremos de outros métodos.

22
00:01:15,320 --> 00:01:18,910
Quero dizer, eles são matematicamente interessantes por vários motivos,

23
00:01:18,910 --> 00:01:21,604
mas esta aplicação para computação gráfica, robótica,

24
00:01:21,604 --> 00:01:25,544
realidade virtual e qualquer coisa que envolva orientação 3D é provavelmente o

25
00:01:25,544 --> 00:01:27,240
maior caso de uso para quatérnios.

26
00:01:27,240 --> 00:01:30,828
Para dar um exemplo, um amigo meu que trabalhava na Apple, Andy Matuszczak,

27
00:01:30,828 --> 00:01:34,888
adorou me contar sobre o código de envio para centenas de milhões de dispositivos que

28
00:01:34,888 --> 00:01:38,949
usa quaternions para rastrear o modelo do telefone e saber como ele está orientado no

29
00:01:38,949 --> 00:01:39,280
espaço.

30
00:01:39,280 --> 00:01:42,764
É isso mesmo, é quase certo que seu telefone tenha um software

31
00:01:42,764 --> 00:01:46,360
em execução em algum lugar dentro dele que depende de quatérnios.

32
00:01:46,360 --> 00:01:50,141
A questão é que existem outras maneiras de pensar sobre o cálculo de rotações,

33
00:01:50,141 --> 00:01:53,540
muitas das quais são muito mais simples de pensar do que os quatérnios.

34
00:01:53,540 --> 00:01:57,411
Por exemplo, qualquer um de vocês familiarizado com álgebra linear

35
00:01:57,411 --> 00:02:01,340
saberá que matrizes 3x3 podem descrever muito bem transformações 3D.

36
00:02:01,340 --> 00:02:05,101
E uma maneira comum que muitos programadores usam para construir uma

37
00:02:05,101 --> 00:02:08,972
matriz de rotação para uma orientação desejada é imaginar a rotação de

38
00:02:08,972 --> 00:02:11,753
um objeto em torno de três eixos fáceis de pensar,

39
00:02:11,753 --> 00:02:16,660
onde os ângulos relevantes para essas rotações são comumente chamados de ângulos de Euler.

40
00:02:16,660 --> 00:02:19,840
E isso funciona principalmente, mas um grande problema é que ele é

41
00:02:19,840 --> 00:02:23,020
vulnerável a algo chamado bloqueio do gimbal, onde quando dois dos

42
00:02:23,020 --> 00:02:26,580
seus eixos de rotação são alinhados, você perde um certo grau de liberdade.

43
00:02:26,580 --> 00:02:29,891
E também pode causar dificuldades e ambiguidades ao

44
00:02:29,891 --> 00:02:33,140
tentar interpolar entre duas orientações distintas.

45
00:02:33,140 --> 00:02:35,125
Se você estiver curioso para saber mais detalhes,

46
00:02:35,125 --> 00:02:37,665
existem muitas fontes excelentes on-line para aprender sobre os

47
00:02:37,665 --> 00:02:41,120
ângulos de Euler e o bloqueio do gimbal, e deixei links na descrição para alguns deles.

48
00:02:41,120 --> 00:02:44,518
Os quatérnios não apenas evitam problemas como o bloqueio do cardan,

49
00:02:44,518 --> 00:02:48,015
mas também fornecem uma maneira realmente perfeita de interpolar entre

50
00:02:48,015 --> 00:02:51,610
duas orientações tridimensionais, uma que não possui as ambigüidades dos

51
00:02:51,610 --> 00:02:55,452
ângulos de Euler e que evita os problemas de precisão numérica e normalização

52
00:02:55,452 --> 00:02:58,900
que surgem na tentativa de interpolar. entre duas matrizes de rotação.

53
00:02:58,900 --> 00:03:03,008
Para entender a ideia de como a multiplicação em algum sistema numérico de dimensão

54
00:03:03,008 --> 00:03:05,355
superior pode ser usada para calcular rotações,

55
00:03:05,355 --> 00:03:09,121
reserve um momento para lembrar como os números complexos fornecem um método

56
00:03:09,121 --> 00:03:10,980
inteligente para calcular rotações 2D.

57
00:03:10,980 --> 00:03:14,882
Especificamente, digamos que você tenha algum ponto no espaço

58
00:03:14,882 --> 00:03:18,597
bidimensional como 4,1 e queira saber as novas coordenadas

59
00:03:18,597 --> 00:03:22,500
que obteria se girasse esse ponto 30 graus em torno da origem.

60
00:03:22,500 --> 00:03:25,120
Os números complexos oferecem uma maneira elegante de fazer isso.

61
00:03:25,120 --> 00:03:30,117
Você pega o número complexo que está a 30 graus da horizontal com magnitude 1,

62
00:03:30,117 --> 00:03:35,179
cos 30 graus mais sen 30 graus vezes i, e então multiplica isso pelo seu ponto,

63
00:03:35,179 --> 00:03:37,520
representado como um número complexo.

64
00:03:37,520 --> 00:03:40,493
A única regra que você precisa saber para realizar

65
00:03:40,493 --> 00:03:43,000
este cálculo é que i2 é igual a 1 negativo.

66
00:03:43,000 --> 00:03:47,226
Então, no que pode parecer um pouco de magia negra para aqueles que a aprendem

67
00:03:47,226 --> 00:03:51,400
pela primeira vez, realizar este produto a partir daquela regra simples dá as

68
00:03:51,400 --> 00:03:55,520
coordenadas de um novo ponto, o ponto girado 30 graus em relação ao original.

69
00:03:55,520 --> 00:03:58,757
Usar quatérnios para descrever rotações 3D é semelhante,

70
00:03:58,757 --> 00:04:01,200
embora a aparência seja um pouco diferente.

71
00:04:01,200 --> 00:04:04,720
Digamos que você queira girar algum ângulo em torno de algum eixo.

72
00:04:04,720 --> 00:04:08,009
Primeiro você define esse eixo com um vetor unitário,

73
00:04:08,009 --> 00:04:11,054
que escreveremos como tendo componentes i, j e k,

74
00:04:11,054 --> 00:04:15,440
normalizados de modo que a soma dos quadrados desses componentes seja 1.

75
00:04:15,440 --> 00:04:19,678
Semelhante ao caso dos números complexos, você usa o ângulo para construir

76
00:04:19,678 --> 00:04:23,296
um quaternion tomando o cosseno desse ângulo como a parte real,

77
00:04:23,296 --> 00:04:26,235
mais o sen desse ângulo vezes uma parte imaginária,

78
00:04:26,235 --> 00:04:29,739
exceto que desta vez a parte imaginária tem três componentes,

79
00:04:29,739 --> 00:04:32,000
as coordenadas de nosso eixo de rotação.

80
00:04:32,000 --> 00:04:36,509
Bem, na verdade você pega metade do ângulo, o que pode parecer totalmente arbitrário,

81
00:04:36,509 --> 00:04:39,760
mas espero que faça sentido no final de toda essa experiência.

82
00:04:39,760 --> 00:04:44,560
Digamos que você tenha algum ponto 3D, que escreveremos com componentes i,

83
00:04:44,560 --> 00:04:48,784
j, k, e você deseja saber as coordenadas que obterá ao girar esse

84
00:04:48,784 --> 00:04:52,560
ponto no ângulo especificado em torno do eixo especificado.

85
00:04:52,560 --> 00:04:56,167
O que você faz não é apenas um único produto de quatérnios,

86
00:04:56,167 --> 00:05:01,276
mas uma espécie de sanduíche de quatérnios, onde você multiplica por q da esquerda e

87
00:05:01,276 --> 00:05:02,840
o inverso de q da direita.

88
00:05:02,840 --> 00:05:06,480
Se você conhece as regras de como i, j e k se multiplicam entre si,

89
00:05:06,480 --> 00:05:09,638
você pode realizar esses dois produtos expandindo tudo ou,

90
00:05:09,638 --> 00:05:13,440
mais realisticamente, fazendo com que um computador faça isso por você.

91
00:05:13,440 --> 00:05:16,713
E no que pode parecer um pouco de magia negra,

92
00:05:16,713 --> 00:05:21,240
esse grande cálculo retornará para você a versão girada do ponto.

93
00:05:21,240 --> 00:05:23,680
Nosso objetivo é analisar isso e visualizar o que

94
00:05:23,680 --> 00:05:26,120
está acontecendo com cada um desses dois produtos.

95
00:05:26,120 --> 00:05:29,114
Vou revisar o método para pensar sobre a multiplicação de

96
00:05:29,114 --> 00:05:32,314
quatérnios descrito no último vídeo e explicar por que metade

97
00:05:32,314 --> 00:05:35,980
do ângulo é usado e por que você multiplicaria da direita pelo inverso.

98
00:05:35,980 --> 00:05:39,644
Na tela agora, e no topo da descrição, você encontrará um link para comedor.

99
00:05:39,644 --> 00:05:44,047
net slash quaternions, que é onde Ben configurou o vídeo tutorial explorável,

100
00:05:44,047 --> 00:05:47,660
onde explico o que está acontecendo com esse cálculo de rotação.

101
00:05:47,660 --> 00:05:49,240
É muito legal.

102
00:05:49,240 --> 00:05:50,500
Eater fez algo incrível aqui.

103
00:05:50,500 --> 00:05:52,276
Então, pelo menos, reserve alguns minutos para dar uma olhada,

104
00:05:52,276 --> 00:05:53,940
mas eu adoraria se você passasse pela experiência completa.

