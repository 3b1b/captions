1
00:00:00,000 --> 00:00:09,200
잠시 후 탐색 가능한 비디오라고 부르는 짧은 시퀀스를 호스팅하는 별도의 웹사이트를 안내해 드리겠습니다.

2
00:00:09,200 --> 00:00:15,640
여러분 중 일부는 뛰어난 컴퓨터 엔지니어링 채널을 운영하는 사람으로 알고 계시는 Ben Eater와의 공동 작업으로 이루어졌습니다.

3
00:00:15,640 --> 00:00:21,460
그가 누구인지 모른다면 이 채널의 시청자는 확실히 그의 콘텐츠를 좋아할 것이므로 꼭 확인해 보세요.

4
00:00:21,460 --> 00:00:30,000
하지만 이 협업은 우리 둘 모두에게 조금 다른 일이었습니다. 이러한 탐색 가능한 비디오를 가능하게 한 모든 웹 개발은 전적으로 Ben 덕분입니다.

5
00:00:30,000 --> 00:00:34,280
여기서는 그것에 대해 너무 많이 말하고 싶지 않습니다. 이것은 실제로 여러분이 직접

6
00:00:34,280 --> 00:00:38,560
경험해야 하는 것이며 확실히 제가 즐겁게 작업했던 가장 멋진 프로젝트 중 하나입니다.

7
00:00:38,560 --> 00:00:46,960
하지만 그 전에 흥분을 억제할 수 있다면 이 영상을 주변 맥락을 조금 더 알아보는 기회로 삼고 싶습니다.

8
00:00:46,960 --> 00:00:53,192
그래서 무대를 설정하기 위해 지난 비디오에서 저는 쿼터니언을 설명했습니다. 이는 19세기 버전의 울버린과

9
00:00:53,192 --> 00:00:59,320
나홀로 집에의 노인이 그 당시 얼마나 복잡해 보였기 때문에 악이라고 불렀던 특정 4차원 숫자 체계입니다.

10
00:00:59,320 --> 00:01:05,540
그리고 아마도 당신도 도대체 왜 누군가가 외계인처럼 보이는 숫자 체계를 가지고 귀찮게 하는지 궁금해할 것입니다.

11
00:01:05,540 --> 00:01:15,320
특히 프로그래머의 경우 가장 큰 이유 중 하나는 다른 방법의 버그와 극단적인 경우에 영향을 받지 않는 3D 방향을 설명하는 정말 좋은 방법을 제공한다는 것입니다.

12
00:01:15,320 --> 00:01:21,222
내 말은, 수학적으로는 여러 가지 이유로 흥미롭지만 컴퓨터 그래픽, 로봇 공학, 가상 현실

13
00:01:21,222 --> 00:01:27,240
및 3D 방향과 관련된 모든 응용 프로그램은 아마도 쿼터니언의 가장 큰 사용 사례일 것입니다.

14
00:01:27,240 --> 00:01:33,030
한 가지 예를 들자면, Apple에서 일했던 내 친구인 Andy Matuszczak은 쿼터니언을 사용하여 휴대폰

15
00:01:33,030 --> 00:01:39,280
모델이 공간에서 어떻게 방향을 잡는지 추적하는 수억 대의 장치에 코드를 제공하는 방법에 대해 이야기해 주면서 기뻐했습니다.

16
00:01:39,280 --> 00:01:46,360
그렇습니다. 귀하의 휴대폰에는 쿼터니언에 의존하는 소프트웨어가 내부 어딘가에서 실행되고 있는 것이 거의 확실합니다.

17
00:01:46,360 --> 00:01:53,540
문제는 회전 계산에 대해 생각하는 다른 방법이 있다는 것입니다. 그 중 다수는 쿼터니언보다 생각하기 훨씬 더 간단합니다.

18
00:01:53,540 --> 00:02:01,340
예를 들어, 선형 대수학에 익숙한 사람이라면 3x3 행렬이 3D 변환을 정말 훌륭하게 설명할 수 있다는 것을 알 것입니다.

19
00:02:01,340 --> 00:02:09,000
그리고 많은 프로그래머가 원하는 방향에 대한 회전 행렬을 구성하는 것에 대해 생각하는 일반적인 방법은 생각하기 쉬운 세 개의

20
00:02:09,000 --> 00:02:16,660
축을 중심으로 개체를 회전하는 것을 상상하는 것입니다. 여기서 이러한 회전과 관련된 각도를 일반적으로 오일러 각도라고 합니다.

21
00:02:16,660 --> 00:02:26,580
이것은 대부분 작동하지만 한 가지 큰 문제는 짐벌 잠금이라는 것에 취약하다는 것입니다. 두 개의 회전 축이 정렬되면 자유도를 잃게 됩니다.

22
00:02:26,580 --> 00:02:33,140
또한 두 개의 서로 다른 방향 사이를 보간하려고 할 때 어려움과 모호함을 유발할 수도 있습니다.

23
00:02:33,140 --> 00:02:41,120
더 자세한 내용이 궁금하다면 오일러 각도와 짐벌 잠금에 대해 알아볼 수 있는 훌륭한 온라인 소스가 많이 있으며 설명에 그 중 몇 가지 링크를 남겨 두었습니다.

24
00:02:41,120 --> 00:02:50,077
쿼터니언은 짐벌 잠금과 같은 문제를 방지할 뿐만 아니라 오일러 각도의 모호성이 결여된 두 3차원 방향 사이를 보간하는

25
00:02:50,077 --> 00:02:58,900
매우 원활한 방법을 제공하고 보간하려고 할 때 발생하는 수치 정밀도 및 정규화 문제를 피합니다. 두 회전 행렬 사이.

26
00:02:58,900 --> 00:03:04,712
고차원 숫자 시스템의 곱셈이 회전을 계산하는 데 어떻게 사용될 수 있는지에 대한 아이디어를

27
00:03:04,712 --> 00:03:10,980
준비하려면 잠시 시간을 내어 복소수가 2D 회전 계산에 매끄러운 방법을 제공하는 방법을 기억하세요.

28
00:03:10,980 --> 00:03:22,500
구체적으로 4,1과 같은 2차원 공간에 어떤 점이 있고 이 점을 원점을 기준으로 30도 회전하면 얻을 수 있는 새로운 좌표를 알고 싶다고 가정해 보겠습니다.

29
00:03:22,500 --> 00:03:25,120
복소수는 이를 수행하는 일종의 멋진 방법을 제공합니다.

30
00:03:25,120 --> 00:03:37,520
수평에서 30도 떨어진 크기 1의 복소수(cos 30도 + sin 30도 x i)를 취한 다음 여기에 점을 곱하여 복소수로 표시됩니다.

31
00:03:37,520 --> 00:03:43,000
이 계산을 수행하기 위해 알아야 할 유일한 규칙은 i2가 -1과 같다는 것입니다.

32
00:03:43,000 --> 00:03:49,074
그런 다음 처음 배우는 사람들에게는 약간의 흑마법처럼 느껴질 수 있지만, 하나의 간단한

33
00:03:49,074 --> 00:03:55,520
규칙에 따라 이 제품을 수행하면 원래 지점에서 30도 회전된 새로운 지점의 좌표가 제공됩니다.

34
00:03:55,520 --> 00:04:01,200
쿼터니언을 사용하여 3D 회전을 설명하는 것은 비슷하지만 모양과 느낌은 약간 다릅니다.

35
00:04:01,200 --> 00:04:04,720
어떤 축을 기준으로 어떤 각도를 회전시키고 싶다고 가정해 보겠습니다.

36
00:04:04,720 --> 00:04:15,440
먼저 i, j, k 구성 요소를 갖는 것으로 작성하고 해당 구성 요소의 제곱의 합이 1이 되도록 정규화한 단위 벡터를 사용하여 해당 축을 정의합니다.

37
00:04:15,440 --> 00:04:26,234
복소수의 경우와 유사하게, 각도를 사용하여 해당 각도의 코사인을 실수 부분으로 취하고 해당 각도의 사인에 허수 부분을 곱한 값을 더해 쿼터니언을 구성합니다.

38
00:04:26,234 --> 00:04:32,000
단, 이번에는 허수 부분에 세 개의 구성 요소, 즉 좌표가 있습니다. 우리의 회전축.

39
00:04:32,000 --> 00:04:39,760
글쎄, 실제로는 각도의 절반을 취합니다. 이는 완전히 임의적이라고 느낄 수 있지만 전체 경험이 끝날 때쯤에는 그것이 의미가 있기를 바랍니다.

40
00:04:39,760 --> 00:04:46,299
i, j, k 구성 요소로 작성할 일부 3D 점이 있고 지정된 축을 중심으로 지정된

41
00:04:46,299 --> 00:04:52,560
각도만큼 이 점을 회전할 때 얻을 수 있는 좌표를 알고 싶다고 가정해 보겠습니다.

42
00:04:52,560 --> 00:05:02,840
당신이 하는 일은 단지 단일 쿼터니언 곱이 아니라 일종의 쿼터니언 샌드위치입니다. 여기서 왼쪽에서 q를 곱하고 오른쪽에서 q의 역수를 곱합니다.

43
00:05:02,840 --> 00:05:13,440
i, j, k가 어떻게 곱하는지에 대한 규칙을 알고 있다면 모든 것을 확장하여 이 두 제품을 수행하거나 컴퓨터를 사용하여 더 현실적으로 수행할 수 있습니다.

44
00:05:13,440 --> 00:05:21,240
그리고 약간의 흑마법처럼 느껴질 수도 있는 이 큰 계산은 점의 회전된 버전을 반환합니다.

45
00:05:21,240 --> 00:05:26,120
우리의 목표는 이를 분석하고 이 두 제품 각각에 무슨 일이 일어나고 있는지 시각화하는 것입니다.

46
00:05:26,120 --> 00:05:35,980
지난 영상에서 설명한 쿼터니언 곱셈을 생각하는 방법을 복습하고 각도의 절반이 사용되는 이유와 오른쪽에서 역수를 곱하는 이유를 설명하겠습니다.

47
00:05:35,980 --> 00:05:39,644
이제 화면과 설명 상단에서 Eater 링크를 찾을 수 있습니다.

48
00:05:39,644 --> 00:05:47,660
넷 슬래시 쿼터니언은 Ben이 탐색 가능한 비디오 튜토리얼을 설정한 곳이며, 여기서 회전 계산에 무슨 일이 일어나는지 설명합니다.

49
00:05:47,660 --> 00:05:49,240
정말 멋지네요.

50
00:05:49,240 --> 00:05:50,500
Eater가 여기서 멋진 일을 해냈습니다.

51
00:05:50,500 --> 00:05:53,940
그러니 최소한 몇 분만 시간을 내어 가서 살펴보시기 바랍니다. 전체 경험을 해보셨다면 좋겠습니다.

