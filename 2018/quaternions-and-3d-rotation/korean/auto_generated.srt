1
00:00:02,959 --> 00:00:05,949
잠시 후 탐색 가능한 비디오라고 부르는 짧은 시퀀스를 

2
00:00:05,949 --> 00:00:08,640
호스팅하는 별도의 웹사이트를 안내해 드리겠습니다.

3
00:00:09,220 --> 00:00:11,107
여러분 중 일부는 뛰어난 컴퓨터 엔지니어링 

4
00:00:11,107 --> 00:00:13,072
채널을 운영하는 사람으로 알고 계시는 Ben 

5
00:00:13,072 --> 00:00:14,960
Eater와의 공동 작업으로 이루어졌습니다.

6
00:00:15,480 --> 00:00:18,198
그가 누구인지 모른다면 이 채널의 시청자는 확실히 

7
00:00:18,198 --> 00:00:20,820
그의 콘텐츠를 좋아할 것이므로 꼭 확인해 보세요.

8
00:00:21,300 --> 00:00:23,893
하지만 이 협업은 우리 둘 모두에게 조금 다른 

9
00:00:23,893 --> 00:00:26,786
일이었습니다. 이러한 탐색 가능한 비디오를 가능하게 

10
00:00:26,786 --> 00:00:29,380
한 모든 웹 개발은 전적으로 Ben 덕분입니다.

11
00:00:29,860 --> 00:00:32,419
여기서는 그것에 대해 너무 많이 말하고 싶지 않습니다.

12
00:00:32,419 --> 00:00:34,296
 이것은 실제로 여러분이 직접 경험해야 

13
00:00:34,296 --> 00:00:36,258
하는 것이며 확실히 제가 즐겁게 작업했던 

14
00:00:36,258 --> 00:00:37,880
가장 멋진 프로젝트 중 하나입니다.

15
00:00:38,300 --> 00:00:41,879
하지만 그 전에 흥분을 억제할 수 있다면 이 영상을 

16
00:00:41,879 --> 00:00:45,460
주변 맥락을 조금 더 알아보는 기회로 삼고 싶습니다.

17
00:00:46,900 --> 00:00:49,743
그래서 무대를 설정하기 위해 지난 비디오에서 저는 

18
00:00:49,743 --> 00:00:52,383
쿼터니언을 설명했습니다. 이는 19세기 버전의 

19
00:00:52,383 --> 00:00:55,429
울버린과 나홀로 집에의 노인이 그 당시 얼마나 복잡해 

20
00:00:55,429 --> 00:00:58,170
보였기 때문에 악이라고 불렀던 특정 4차원 숫자 

21
00:00:58,170 --> 00:00:58,780
체계입니다.

22
00:00:59,060 --> 00:01:00,587
그리고 아마도 당신도 도대체 왜 

23
00:01:00,587 --> 00:01:02,114
누군가가 외계인처럼 보이는 숫자 

24
00:01:02,114 --> 00:01:04,319
체계를 가지고 귀찮게 하는지 궁금해할 것입니다.

25
00:01:05,200 --> 00:01:08,540
특히 프로그래머의 경우 가장 큰 이유 중 하나는 다른 

26
00:01:08,540 --> 00:01:11,880
방법의 버그와 극단적인 경우에 영향을 받지 않는 3D 

27
00:01:11,880 --> 00:01:15,220
방향을 설명하는 정말 좋은 방법을 제공한다는 것입니다.

28
00:01:15,820 --> 00:01:18,182
내 말은, 수학적으로는 여러 가지 이유로 

29
00:01:18,182 --> 00:01:20,442
흥미롭지만 컴퓨터 그래픽, 로봇 공학, 

30
00:01:20,442 --> 00:01:23,010
가상 현실 및 3D 방향과 관련된 모든 응용 

31
00:01:23,010 --> 00:01:25,475
프로그램은 아마도 쿼터니언의 가장 큰 사용 

32
00:01:25,475 --> 00:01:26,400
사례일 것입니다.

33
00:01:26,400 --> 00:01:28,812
한 가지 예를 들자면, Apple에서 일했던 

34
00:01:28,812 --> 00:01:31,031
내 친구인 Andy Matuszczak은 

35
00:01:31,031 --> 00:01:33,347
쿼터니언을 사용하여 휴대폰 모델이 공간에서 

36
00:01:33,347 --> 00:01:35,952
어떻게 방향을 잡는지 추적하는 수억 대의 장치에 

37
00:01:35,952 --> 00:01:38,364
코드를 제공하는 방법에 대해 이야기해 주면서 

38
00:01:38,364 --> 00:01:39,040
기뻐했습니다.

39
00:01:39,660 --> 00:01:41,665
그렇습니다. 귀하의 휴대폰에는 쿼터니언에 

40
00:01:41,665 --> 00:01:43,496
의존하는 소프트웨어가 내부 어딘가에서 

41
00:01:43,496 --> 00:01:45,240
실행되고 있는 것이 거의 확실합니다.

42
00:01:46,340 --> 00:01:48,500
문제는 회전 계산에 대해 생각하는 다른 

43
00:01:48,500 --> 00:01:50,661
방법이 있다는 것입니다. 그 중 다수는 

44
00:01:50,661 --> 00:01:52,920
쿼터니언보다 생각하기 훨씬 더 간단합니다.

45
00:01:53,250 --> 00:01:55,353
예를 들어, 선형 대수학에 익숙한 

46
00:01:55,353 --> 00:01:57,679
사람이라면 3x3 행렬이 3D 변환을 

47
00:01:57,679 --> 00:02:00,780
정말 훌륭하게 설명할 수 있다는 것을 알 것입니다.

48
00:02:01,340 --> 00:02:04,220
그리고 많은 프로그래머가 원하는 방향에 대한 회전 

49
00:02:04,220 --> 00:02:07,202
행렬을 구성하는 것에 대해 생각하는 일반적인 방법은 

50
00:02:07,202 --> 00:02:10,288
생각하기 쉬운 세 개의 축을 중심으로 개체를 회전하는 

51
00:02:10,288 --> 00:02:12,962
것을 상상하는 것입니다. 여기서 이러한 회전과 

52
00:02:12,962 --> 00:02:15,740
관련된 각도를 일반적으로 오일러 각도라고 합니다.

53
00:02:16,580 --> 00:02:19,670
이것은 대부분 작동하지만 한 가지 큰 문제는 

54
00:02:19,670 --> 00:02:22,638
짐벌 잠금이라는 것에 취약하다는 것입니다. 

55
00:02:22,638 --> 00:02:26,100
두 개의 회전 축이 정렬되면 자유도를 잃게 됩니다.

56
00:02:26,700 --> 00:02:29,573
또한 두 개의 서로 다른 방향 사이를 보간하려고 

57
00:02:29,573 --> 00:02:32,340
할 때 어려움과 모호함을 유발할 수도 있습니다.

58
00:02:32,940 --> 00:02:35,204
더 자세한 내용이 궁금하다면 오일러 각도와 짐벌 

59
00:02:35,204 --> 00:02:37,552
잠금에 대해 알아볼 수 있는 훌륭한 온라인 소스가 

60
00:02:37,552 --> 00:02:39,816
많이 있으며 설명에 그 중 몇 가지 링크를 남겨 

61
00:02:39,816 --> 00:02:40,320
두었습니다.

62
00:02:41,040 --> 00:02:44,481
쿼터니언은 짐벌 잠금과 같은 문제를 방지할 뿐만 

63
00:02:44,481 --> 00:02:47,923
아니라 오일러 각도의 모호성이 결여된 두 3차원 

64
00:02:47,923 --> 00:02:51,493
방향 사이를 보간하는 매우 원활한 방법을 제공하고 

65
00:02:51,493 --> 00:02:54,552
보간하려고 할 때 발생하는 수치 정밀도 및 

66
00:02:54,552 --> 00:02:57,740
정규화 문제를 피합니다. 두 회전 행렬 사이.

67
00:02:58,780 --> 00:03:01,629
고차원 숫자 시스템의 곱셈이 회전을 계산하는 

68
00:03:01,629 --> 00:03:04,592
데 어떻게 사용될 수 있는지에 대한 아이디어를 

69
00:03:04,592 --> 00:03:07,669
준비하려면 잠시 시간을 내어 복소수가 2D 회전 

70
00:03:07,669 --> 00:03:10,860
계산에 매끄러운 방법을 제공하는 방법을 기억하세요.

71
00:03:11,540 --> 00:03:14,687
구체적으로 4,1과 같은 2차원 공간에 어떤 점이 

72
00:03:14,687 --> 00:03:17,947
있고 이 점을 원점을 기준으로 30도 회전하면 얻을 

73
00:03:17,947 --> 00:03:21,320
수 있는 새로운 좌표를 알고 싶다고 가정해 보겠습니다.

74
00:03:22,240 --> 00:03:24,620
복소수는 이를 수행하는 일종의 멋진 방법을 제공합니다.

75
00:03:25,080 --> 00:03:29,342
수평에서 30도 떨어진 크기 1의 복소수(cos 

76
00:03:29,342 --> 00:03:33,446
30도 + sin 30도 x i)를 취한 다음 

77
00:03:33,446 --> 00:03:36,920
여기에 점을 곱하여 복소수로 표시됩니다.

78
00:03:37,500 --> 00:03:39,553
이 계산을 수행하기 위해 알아야 할 

79
00:03:39,553 --> 00:03:42,120
유일한 규칙은 i2가 -1과 같다는 것입니다.

80
00:03:42,120 --> 00:03:44,904
그런 다음 처음 배우는 사람들에게는 약간의 

81
00:03:44,904 --> 00:03:46,877
흑마법처럼 느껴질 수 있지만, 

82
00:03:46,877 --> 00:03:49,894
하나의 간단한 규칙에 따라 이 제품을 수행하면 

83
00:03:49,894 --> 00:03:52,679
원래 지점에서 30도 회전된 새로운 지점의 

84
00:03:52,679 --> 00:03:53,840
좌표가 제공됩니다.

85
00:03:55,340 --> 00:03:57,812
쿼터니언을 사용하여 3D 회전을 설명하는 

86
00:03:57,812 --> 00:04:00,500
것은 비슷하지만 모양과 느낌은 약간 다릅니다.

87
00:04:01,100 --> 00:04:02,464
어떤 축을 기준으로 어떤 각도를 

88
00:04:02,464 --> 00:04:03,980
회전시키고 싶다고 가정해 보겠습니다.

89
00:04:04,700 --> 00:04:07,579
먼저 i, j, k 구성 요소를 갖는 것으로 

90
00:04:07,579 --> 00:04:10,459
작성하고 해당 구성 요소의 제곱의 합이 1이 

91
00:04:10,459 --> 00:04:13,568
되도록 정규화한 단위 벡터를 사용하여 해당 축을 

92
00:04:13,568 --> 00:04:14,260
정의합니다.

93
00:04:15,160 --> 00:04:18,448
복소수의 경우와 유사하게, 각도를 사용하여 해당 

94
00:04:18,448 --> 00:04:21,857
각도의 코사인을 실수 부분으로 취하고 해당 각도의 

95
00:04:21,857 --> 00:04:25,024
사인에 허수 부분을 곱한 값을 더해 쿼터니언을 

96
00:04:25,024 --> 00:04:28,312
구성합니다. 단, 이번에는 허수 부분에 세 개의 

97
00:04:28,312 --> 00:04:31,600
구성 요소, 즉 좌표가 있습니다. 우리의 회전축.

98
00:04:32,520 --> 00:04:34,643
글쎄, 실제로는 각도의 절반을 취합니다. 

99
00:04:34,643 --> 00:04:37,043
이는 완전히 임의적이라고 느낄 수 있지만 전체 

100
00:04:37,043 --> 00:04:39,720
경험이 끝날 때쯤에는 그것이 의미가 있기를 바랍니다.

101
00:04:40,540 --> 00:04:43,170
i, j, k 구성 요소로 작성할 일부 

102
00:04:43,170 --> 00:04:45,681
3D 점이 있고 지정된 축을 중심으로 

103
00:04:45,681 --> 00:04:48,431
지정된 각도만큼 이 점을 회전할 때 얻을 

104
00:04:48,431 --> 00:04:51,540
수 있는 좌표를 알고 싶다고 가정해 보겠습니다.

105
00:04:52,360 --> 00:04:55,234
당신이 하는 일은 단지 단일 쿼터니언 곱이 

106
00:04:55,234 --> 00:04:57,868
아니라 일종의 쿼터니언 샌드위치입니다. 

107
00:04:57,868 --> 00:05:00,862
여기서 왼쪽에서 q를 곱하고 오른쪽에서 q의 

108
00:05:00,862 --> 00:05:01,940
역수를 곱합니다.

109
00:05:02,640 --> 00:05:05,946
i, j, k가 어떻게 곱하는지에 대한 규칙을 알고 

110
00:05:05,946 --> 00:05:09,253
있다면 모든 것을 확장하여 이 두 제품을 수행하거나 

111
00:05:09,253 --> 00:05:12,560
컴퓨터를 사용하여 더 현실적으로 수행할 수 있습니다.

112
00:05:13,100 --> 00:05:16,675
그리고 약간의 흑마법처럼 느껴질 수도 있는 

113
00:05:16,675 --> 00:05:20,400
이 큰 계산은 점의 회전된 버전을 반환합니다.

114
00:05:21,160 --> 00:05:23,503
우리의 목표는 이를 분석하고 이 두 제품 각각에 

115
00:05:23,503 --> 00:05:25,760
무슨 일이 일어나고 있는지 시각화하는 것입니다.

116
00:05:26,340 --> 00:05:29,280
지난 영상에서 설명한 쿼터니언 곱셈을 생각하는 

117
00:05:29,280 --> 00:05:32,220
방법을 복습하고 각도의 절반이 사용되는 이유와 

118
00:05:32,220 --> 00:05:35,160
오른쪽에서 역수를 곱하는 이유를 설명하겠습니다.

119
00:05:35,940 --> 00:05:37,980
이제 화면과 설명 상단에서 Eater 

120
00:05:37,980 --> 00:05:39,340
링크를 찾을 수 있습니다.

121
00:05:39,340 --> 00:05:41,840
넷 슬래시 쿼터니언은 Ben이 탐색 가능한 

122
00:05:41,840 --> 00:05:43,819
비디오 튜토리얼을 설정한 곳이며, 

123
00:05:43,819 --> 00:05:46,840
여기서 회전 계산에 무슨 일이 일어나는지 설명합니다.

124
00:05:47,640 --> 00:05:49,000
정말 멋지네요.

125
00:05:49,220 --> 00:05:50,340
Eater가 여기서 멋진 일을 해냈습니다.

126
00:05:50,540 --> 00:05:52,720
그러니 최소한 몇 분만 시간을 내어 가서 살펴보시기 

127
00:05:52,720 --> 00:05:54,600
바랍니다. 전체 경험을 해보셨다면 좋겠습니다.

