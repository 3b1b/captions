1
00:00:00,000 --> 00:00:07,260
잠시 후 탐색 가능한 비디오라고 부르는 짧은

2
00:00:07,260 --> 00:00:09,200
시퀀스를 호스팅하는 별도의 웹사이트를 안내해 드리겠습니다.

3
00:00:09,200 --> 00:00:13,240
여러분 중 일부는 뛰어난 컴퓨터 엔지니어링 채널을 운영하는

4
00:00:13,240 --> 00:00:15,640
사람으로 알고 계시는 Ben Eater와의 공동 작업으로 이루어졌습니다.

5
00:00:15,640 --> 00:00:18,680
그가 누구인지 모른다면 이 채널의 시청자는 확실히

6
00:00:18,680 --> 00:00:21,460
그의 콘텐츠를 좋아할 것이므로 꼭 확인해 보세요.

7
00:00:21,460 --> 00:00:24,940
하지만 이 협업은 우리 둘 모두에게 조금 다른 일이었습니다. 이러한 탐색

8
00:00:24,940 --> 00:00:29,760
가능한 비디오를 가능하게 한 모든 웹 개발은 전적으로 Ben 덕분입니다.

9
00:00:30,000 --> 00:00:33,720
여기서는 그것에 대해 너무 많이 말하고 싶지 않습니다.

10
00:00:33,720 --> 00:00:37,460
이것은 실제로 여러분이 직접 경험해야 하는 것이며 확실히

11
00:00:37,460 --> 00:00:38,560
제가 즐겁게 작업했던 가장 멋진 프로젝트 중 하나입니다.

12
00:00:38,560 --> 00:00:42,280
하지만 그 전에 흥분을 억제할 수 있다면 이 영상을

13
00:00:42,280 --> 00:00:46,960
주변 맥락을 조금 더 알아보는 기회로 삼고 싶습니다.

14
00:00:46,960 --> 00:00:51,760
그래서 무대를 설정하기 위해 지난 비디오에서 저는 쿼터니언을 설명했습니다. 이는

15
00:00:51,760 --> 00:00:56,660
19세기 버전의 울버린과 나홀로 집에의 노인이 그 당시 얼마나

16
00:00:56,660 --> 00:00:59,280
복잡해 보였기 때문에 악이라고 불렀던 특정 4차원 숫자 체계입니다.

17
00:00:59,320 --> 00:01:03,600
그리고 아마도 당신도 도대체 왜 누군가가 외계인처럼 보이는

18
00:01:03,600 --> 00:01:05,540
숫자 체계를 가지고 귀찮게 하는지 궁금해할 것입니다.

19
00:01:05,540 --> 00:01:10,200
특히 프로그래머의 경우 가장 큰 이유 중 하나는 다른 방법의 버그와 극단적인

20
00:01:10,200 --> 00:01:15,320
경우에 영향을 받지 않는 3D 방향을 설명하는 정말 좋은 방법을 제공한다는 것입니다.

21
00:01:15,320 --> 00:01:19,420
내 말은, 수학적으로는 여러 가지 이유로 흥미롭지만 컴퓨터 그래픽,

22
00:01:19,420 --> 00:01:24,040
로봇 공학, 가상 현실 및 3D 방향과 관련된 모든

23
00:01:24,040 --> 00:01:27,240
응용 프로그램은 아마도 쿼터니언의 가장 큰 사용 사례일 것입니다.

24
00:01:27,240 --> 00:01:31,880
한 가지 예를 들자면, Apple에서 일했던 내 친구인 Andy Matuszczak은

25
00:01:31,880 --> 00:01:36,080
쿼터니언을 사용하여 휴대폰 모델이 공간에서 어떻게 방향을 잡는지 추적하는 수억

26
00:01:36,080 --> 00:01:39,280
대의 장치에 코드를 제공하는 방법에 대해 이야기해 주면서 기뻐했습니다.

27
00:01:39,280 --> 00:01:43,720
그렇습니다. 귀하의 휴대폰에는 쿼터니언에 의존하는 소프트웨어가 내부

28
00:01:43,720 --> 00:01:46,360
어딘가에서 실행되고 있는 것이 거의 확실합니다.

29
00:01:46,360 --> 00:01:50,560
문제는 회전 계산에 대해 생각하는 다른 방법이 있다는 것입니다.

30
00:01:50,560 --> 00:01:53,540
그 중 다수는 쿼터니언보다 생각하기 훨씬 더 간단합니다.

31
00:01:53,540 --> 00:01:58,660
예를 들어, 선형 대수학에 익숙한 사람이라면 3x3 행렬이 3D

32
00:01:58,660 --> 00:02:01,340
변환을 정말 훌륭하게 설명할 수 있다는 것을 알 것입니다.

33
00:02:01,340 --> 00:02:05,660
그리고 많은 프로그래머가 원하는 방향에 대한 회전 행렬을 구성하는 것에 대해 생각하는

34
00:02:05,660 --> 00:02:11,300
일반적인 방법은 생각하기 쉬운 세 개의 축을 중심으로 개체를 회전하는 것을

35
00:02:11,300 --> 00:02:16,660
상상하는 것입니다. 여기서 이러한 회전과 관련된 각도를 일반적으로 오일러 각도라고 합니다.

36
00:02:16,660 --> 00:02:21,140
이것은 대부분 작동하지만 한 가지 큰 문제는

37
00:02:21,140 --> 00:02:25,580
짐벌 잠금이라는 것에 취약하다는 것입니다. 두 개의

38
00:02:25,580 --> 00:02:26,580
회전 축이 정렬되면 자유도를 잃게 됩니다.

39
00:02:26,580 --> 00:02:32,140
또한 두 개의 서로 다른 방향 사이를 보간하려고

40
00:02:32,140 --> 00:02:33,140
할 때 어려움과 모호함을 유발할 수도 있습니다.

41
00:02:33,140 --> 00:02:36,480
더 자세한 내용이 궁금하다면 오일러 각도와 짐벌 잠금에 대해

42
00:02:36,480 --> 00:02:39,940
알아볼 수 있는 훌륭한 온라인 소스가 많이 있으며

43
00:02:39,940 --> 00:02:41,120
설명에 그 중 몇 가지 링크를 남겨 두었습니다.

44
00:02:41,120 --> 00:02:45,180
쿼터니언은 짐벌 잠금과 같은 문제를 방지할 뿐만 아니라 오일러

45
00:02:45,180 --> 00:02:51,100
각도의 모호성이 결여된 두 3차원 방향 사이를 보간하는 매우

46
00:02:51,140 --> 00:02:55,580
원활한 방법을 제공하고 보간하려고 할 때 발생하는 수치 정밀도

47
00:02:55,580 --> 00:02:58,900
및 정규화 문제를 피합니다. 두 회전 행렬 사이.

48
00:02:58,900 --> 00:03:03,220
고차원 숫자 시스템의 곱셈이 회전을 계산하는 데 어떻게 사용될

49
00:03:03,220 --> 00:03:08,060
수 있는지에 대한 아이디어를 준비하려면 잠시 시간을 내어 복소수가

50
00:03:08,060 --> 00:03:10,980
2D 회전 계산에 매끄러운 방법을 제공하는 방법을 기억하세요.

51
00:03:10,980 --> 00:03:16,420
구체적으로 4,1과 같은 2차원 공간에 어떤 점이 있고

52
00:03:16,420 --> 00:03:20,900
이 점을 원점을 기준으로 30도 회전하면 얻을 수

53
00:03:20,900 --> 00:03:22,500
있는 새로운 좌표를 알고 싶다고 가정해 보겠습니다.

54
00:03:22,500 --> 00:03:25,120
복소수는 이를 수행하는 일종의 멋진 방법을 제공합니다.

55
00:03:25,120 --> 00:03:30,300
수평에서 30도 떨어진 크기 1의 복소수(cos 30도

56
00:03:30,300 --> 00:03:35,880
+ sin 30도 x i)를 취한

57
00:03:35,880 --> 00:03:37,520
다음 여기에 점을 곱하여 복소수로 표시됩니다.

58
00:03:37,520 --> 00:03:42,000
이 계산을 수행하기 위해 알아야 할

59
00:03:42,000 --> 00:03:43,000
유일한 규칙은 i2가 -1과 같다는 것입니다.

60
00:03:43,000 --> 00:03:46,880
그런 다음 처음 배우는 사람들에게는 약간의 흑마법처럼 느껴질 수

61
00:03:46,880 --> 00:03:51,800
있지만, 하나의 간단한 규칙에 따라 이 제품을 수행하면

62
00:03:51,800 --> 00:03:55,520
원래 지점에서 30도 회전된 새로운 지점의 좌표가 제공됩니다.

63
00:03:55,520 --> 00:04:00,200
쿼터니언을 사용하여 3D 회전을 설명하는 것은

64
00:04:00,200 --> 00:04:01,200
비슷하지만 모양과 느낌은 약간 다릅니다.

65
00:04:01,200 --> 00:04:04,720
어떤 축을 기준으로 어떤 각도를 회전시키고 싶다고 가정해 보겠습니다.

66
00:04:04,720 --> 00:04:09,440
먼저 i, j, k 구성 요소를 갖는 것으로 작성하고 해당 구성 요소의

67
00:04:09,440 --> 00:04:15,440
제곱의 합이 1이 되도록 정규화한 단위 벡터를 사용하여 해당 축을 정의합니다.

68
00:04:15,440 --> 00:04:19,860
복소수의 경우와 유사하게, 각도를 사용하여 해당 각도의 코사인을 실수

69
00:04:19,860 --> 00:04:25,720
부분으로 취하고 해당 각도의 사인에 허수 부분을 곱한

70
00:04:25,720 --> 00:04:30,600
값을 더해 쿼터니언을 구성합니다. 단, 이번에는 허수 부분에 세

71
00:04:30,600 --> 00:04:32,000
개의 구성 요소, 즉 좌표가 있습니다. 우리의 회전축.

72
00:04:32,000 --> 00:04:37,400
글쎄, 실제로는 각도의 절반을 취합니다. 이는 완전히 임의적이라고 느낄 수

73
00:04:37,400 --> 00:04:39,760
있지만 전체 경험이 끝날 때쯤에는 그것이 의미가 있기를 바랍니다.

74
00:04:39,760 --> 00:04:45,080
i, j, k 구성 요소로 작성할 일부 3D 점이

75
00:04:45,080 --> 00:04:49,400
있고 지정된 축을 중심으로 지정된 각도만큼 이 점을 회전할

76
00:04:49,400 --> 00:04:52,560
때 얻을 수 있는 좌표를 알고 싶다고 가정해 보겠습니다.

77
00:04:52,560 --> 00:04:57,760
당신이 하는 일은 단지 단일 쿼터니언 곱이 아니라 일종의 쿼터니언

78
00:04:57,760 --> 00:05:02,840
샌드위치입니다. 여기서 왼쪽에서 q를 곱하고 오른쪽에서 q의 역수를 곱합니다.

79
00:05:02,840 --> 00:05:07,160
i, j, k가 어떻게 곱하는지에 대한 규칙을 알고

80
00:05:07,160 --> 00:05:11,560
있다면 모든 것을 확장하여 이 두 제품을 수행하거나

81
00:05:11,560 --> 00:05:13,440
컴퓨터를 사용하여 더 현실적으로 수행할 수 있습니다.

82
00:05:13,440 --> 00:05:18,120
그리고 약간의 흑마법처럼 느껴질 수도 있는 이

83
00:05:18,120 --> 00:05:21,240
큰 계산은 점의 회전된 버전을 반환합니다.

84
00:05:21,240 --> 00:05:25,120
우리의 목표는 이를 분석하고 이 두 제품

85
00:05:25,120 --> 00:05:26,120
각각에 무슨 일이 일어나고 있는지 시각화하는 것입니다.

86
00:05:26,120 --> 00:05:30,680
지난 영상에서 설명한 쿼터니언 곱셈을 생각하는

87
00:05:30,680 --> 00:05:34,840
방법을 복습하고 각도의 절반이 사용되는 이유와

88
00:05:34,840 --> 00:05:35,980
오른쪽에서 역수를 곱하는 이유를 설명하겠습니다.

89
00:05:35,980 --> 00:05:39,780
이제 화면과 설명 상단에서 Eater 링크를 찾을 수 있습니다. 넷

90
00:05:39,780 --> 00:05:44,180
슬래시 쿼터니언은 Ben이 탐색 가능한 비디오 튜토리얼을 설정한

91
00:05:44,180 --> 00:05:47,660
곳이며, 여기서 회전 계산에 무슨 일이 일어나는지 설명합니다.

92
00:05:47,660 --> 00:05:49,240
정말 멋지네요.

93
00:05:49,240 --> 00:05:50,500
Eater가 여기서 멋진 일을 해냈습니다.

94
00:05:50,500 --> 00:05:53,940
그러니 최소한 몇 분만 시간을 내어 가서

95
00:05:53,940 --> 00:05:55,300
살펴보시기 바랍니다. 전체 경험을 해보셨다면 좋겠습니다.

