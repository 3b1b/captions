[
 {
  "input": "In a moment, I'll point you to a separate website hosting a short sequence of what we're calling explorable videos.",
  "translatedText": "잠시 후 탐색 가능한 비디오라고 부르는 짧은 시퀀스를 호스팅하는 별도의 웹사이트를 안내해 드리겠습니다.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 2.96,
  "end": 8.64
 },
 {
  "input": "It was done in collaboration with Ben Eater, who some of you may know as that guy who runs the excellent computer engineering channel.",
  "translatedText": "여러분 중 일부는 뛰어난 컴퓨터 엔지니어링 채널을 운영하는 사람으로 알고 계시는 Ben Eater와의 공동 작업으로 이루어졌습니다.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 9.22,
  "end": 14.96
 },
 {
  "input": "And if you don't know who he is, viewers of this channel would certainly enjoy the content of his, so do check it out.",
  "translatedText": "그가 누구인지 모른다면 이 채널의 시청자는 확실히 그의 콘텐츠를 좋아할 것이므로 꼭 확인해 보세요.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 15.48,
  "end": 20.82
 },
 {
  "input": "This collaboration was something a little different though, for both of us, and all of the web development that made these explorable videos possible is completely thanks to Ben.",
  "translatedText": "하지만 이 협업은 우리 둘 모두에게 조금 다른 일이었습니다. 이러한 탐색 가능한 비디오를 가능하게 한 모든 웹 개발은 전적으로 Ben 덕분입니다.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 21.3,
  "end": 29.38
 },
 {
  "input": "I don't want to say too much about it here, it's really something you have to experience for yourself, certainly one of the coolest projects I've had the pleasure of working on.",
  "translatedText": "여기서는 그것에 대해 너무 많이 말하고 싶지 않습니다. 이것은 실제로 여러분이 직접 경험해야 하는 것이며 확실히 제가 즐겁게 작업했던 가장 멋진 프로젝트 중 하나입니다.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 29.86,
  "end": 37.88
 },
 {
  "input": "Before that though, if you can contain your excitement, I want to use this video as a chance to tee things up with a little bit of surrounding context.",
  "translatedText": "하지만 그 전에 흥분을 억제할 수 있다면 이 영상을 주변 맥락을 조금 더 알아보는 기회로 삼고 싶습니다.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 38.3,
  "end": 45.46
 },
 {
  "input": "So to set the stage, last video I described quaternions, a certain 4-dimensional number system that the 19th century versions of Wolverine and the old man from Home Alone called evil for how convoluted it seemed at the time.",
  "translatedText": "그래서 무대를 설정하기 위해 지난 비디오에서 저는 쿼터니언을 설명했습니다. 이는 19세기 버전의 울버린과 나홀로 집에의 노인이 그 당시 얼마나 복잡해 보였기 때문에 악이라고 불렀던 특정 4차원 숫자 체계입니다.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 46.9,
  "end": 58.78
 },
 {
  "input": "And perhaps you too are wondering why on earth anyone would bother with such an alien-seeming number system.",
  "translatedText": "그리고 아마도 당신도 도대체 왜 누군가가 외계인처럼 보이는 숫자 체계를 가지고 귀찮게 하는지 궁금해할 것입니다.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 59.06,
  "end": 64.32
 },
 {
  "input": "One of the big reasons, especially for programmers, is that they give a really nice way for describing 3D orientation, which is not susceptible to the bugs and edge cases of other methods.",
  "translatedText": "특히 프로그래머의 경우 가장 큰 이유 중 하나는 다른 방법의 버그와 극단적인 경우에 영향을 받지 않는 3D 방향을 설명하는 정말 좋은 방법을 제공한다는 것입니다.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 65.2,
  "end": 75.22
 },
 {
  "input": "I mean, they're interesting mathematically for a lot of reasons, but this application for computer graphics and robotics and virtual reality and anything involving 3D orientation is probably the biggest use case for quaternions.",
  "translatedText": "내 말은, 수학적으로는 여러 가지 이유로 흥미롭지만 컴퓨터 그래픽, 로봇 공학, 가상 현실 및 3D 방향과 관련된 모든 응용 프로그램은 아마도 쿼터니언의 가장 큰 사용 사례일 것입니다.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 75.82,
  "end": 86.4
 },
 {
  "input": "To take one example, a friend of mine who used to work at Apple, Andy Matuszczak, delighted in telling me about shipping code to hundreds of millions of devices that uses quaternions to track the phone's model for how it's oriented in space.",
  "translatedText": "한 가지 예를 들자면, Apple에서 일했던 내 친구인 Andy Matuszczak은 쿼터니언을 사용하여 휴대폰 모델이 공간에서 어떻게 방향을 잡는지 추적하는 수억 대의 장치에 코드를 제공하는 방법에 대해 이야기해 주면서 기뻐했습니다.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 86.4,
  "end": 99.04
 },
 {
  "input": "That's right, your phone almost certainly has software running somewhere inside of it that relies on quaternions.",
  "translatedText": "그렇습니다. 귀하의 휴대폰에는 쿼터니언에 의존하는 소프트웨어가 내부 어딘가에서 실행되고 있는 것이 거의 확실합니다.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 99.66,
  "end": 105.24
 },
 {
  "input": "The thing is, there are other ways to think about computing rotations, many of which are way simpler to think about than quaternions.",
  "translatedText": "문제는 회전 계산에 대해 생각하는 다른 방법이 있다는 것입니다. 그 중 다수는 쿼터니언보다 생각하기 훨씬 더 간단합니다.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 106.34,
  "end": 112.92
 },
 {
  "input": "For example, any of you familiar with linear algebra will know that 3x3 matrices can really nicely describe 3D transformations.",
  "translatedText": "예를 들어, 선형 대수학에 익숙한 사람이라면 3x3 행렬이 3D 변환을 정말 훌륭하게 설명할 수 있다는 것을 알 것입니다.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 113.25,
  "end": 120.78
 },
 {
  "input": "And a common way that many programmers think about constructing a rotation matrix for a desired orientation is to imagine rotating an object around three easy-to-think-about axes, where the relevant angles for these rotations are commonly called Euler angles.",
  "translatedText": "그리고 많은 프로그래머가 원하는 방향에 대한 회전 행렬을 구성하는 것에 대해 생각하는 일반적인 방법은 생각하기 쉬운 세 개의 축을 중심으로 개체를 회전하는 것을 상상하는 것입니다. 여기서 이러한 회전과 관련된 각도를 일반적으로 오일러 각도라고 합니다.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 121.34,
  "end": 135.74
 },
 {
  "input": "And this mostly works, but one big problem is that it's vulnerable to something called gimbal lock, where when two of your axes of rotation get lined up, you lose a degree of freedom.",
  "translatedText": "이것은 대부분 작동하지만 한 가지 큰 문제는 짐벌 잠금이라는 것에 취약하다는 것입니다. 두 개의 회전 축이 정렬되면 자유도를 잃게 됩니다.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 136.58,
  "end": 146.1
 },
 {
  "input": "And it can also cause difficulties and ambiguities when trying to interpolate between two separate orientations.",
  "translatedText": "또한 두 개의 서로 다른 방향 사이를 보간하려고 할 때 어려움과 모호함을 유발할 수도 있습니다.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 146.7,
  "end": 152.34
 },
 {
  "input": "If you're curious for more of the details, there are many great sources online for learning about Euler angles and gimbal lock, and I've left links in the description to a few of them.",
  "translatedText": "더 자세한 내용이 궁금하다면 오일러 각도와 짐벌 잠금에 대해 알아볼 수 있는 훌륭한 온라인 소스가 많이 있으며 설명에 그 중 몇 가지 링크를 남겨 두었습니다.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 152.94,
  "end": 160.32
 },
 {
  "input": "Not only do quaternions avoid issues like gimbal lock, they give a really seamless way to interpolate between two 3-dimensional orientations, one which lacks the ambiguities of Euler angles, and which avoids the issues of numerical precision and normalization that arise in trying to interpolate between two rotation matrices.",
  "translatedText": "쿼터니언은 짐벌 잠금과 같은 문제를 방지할 뿐만 아니라 오일러 각도의 모호성이 결여된 두 3차원 방향 사이를 보간하는 매우 원활한 방법을 제공하고 보간하려고 할 때 발생하는 수치 정밀도 및 정규화 문제를 피합니다. 두 회전 행렬 사이.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 161.04,
  "end": 177.74
 },
 {
  "input": "To warm up to the idea of how multiplication in some higher-dimensional number system might be used to compute rotations, take a moment to remember how it is that complex numbers give a slick method for computing 2D rotations.",
  "translatedText": "고차원 숫자 시스템의 곱셈이 회전을 계산하는 데 어떻게 사용될 수 있는지에 대한 아이디어를 준비하려면 잠시 시간을 내어 복소수가 2D 회전 계산에 매끄러운 방법을 제공하는 방법을 기억하세요.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 178.78,
  "end": 190.86
 },
 {
  "input": "Specifically, let's say you have some point in 2-dimensional space like 4,1, and you want to know the new coordinates you'd get if you rotate this point 30 degrees around the origin.",
  "translatedText": "구체적으로 4,1과 같은 2차원 공간에 어떤 점이 있고 이 점을 원점을 기준으로 30도 회전하면 얻을 수 있는 새로운 좌표를 알고 싶다고 가정해 보겠습니다.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 191.54,
  "end": 201.32
 },
 {
  "input": "Complex numbers give a sort of snazzy way to do this.",
  "translatedText": "복소수는 이를 수행하는 일종의 멋진 방법을 제공합니다.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 202.24,
  "end": 204.62
 },
 {
  "input": "You take the complex number that's 30 degrees off the horizontal with magnitude 1, cos 30 degrees plus sin 30 degrees times i, and then you multiply this by your point, represented as a complex number.",
  "translatedText": "수평에서 30도 떨어진 크기 1의 복소수(cos 30도 + sin 30도 x i)를 취한 다음 여기에 점을 곱하여 복소수로 표시됩니다.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 205.08,
  "end": 216.92
 },
 {
  "input": "The only rule you need to know to carry out this computation is that i2 equals negative 1.",
  "translatedText": "이 계산을 수행하기 위해 알아야 할 유일한 규칙은 i2가 -1과 같다는 것입니다.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 217.5,
  "end": 222.12
 },
 {
  "input": "Then in what might feel like a bit of black magic to those first learning it, carrying out this product from that one simple rule gives the coordinates of a new point, the point rotated 30 degrees from the original.",
  "translatedText": "그런 다음 처음 배우는 사람들에게는 약간의 흑마법처럼 느껴질 수 있지만, 하나의 간단한 규칙에 따라 이 제품을 수행하면 원래 지점에서 30도 회전된 새로운 지점의 좌표가 제공됩니다.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 222.12,
  "end": 233.84
 },
 {
  "input": "Using quaternions to describe 3D rotations is similar, though the look and feel is slightly different.",
  "translatedText": "쿼터니언을 사용하여 3D 회전을 설명하는 것은 비슷하지만 모양과 느낌은 약간 다릅니다.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 235.34,
  "end": 240.5
 },
 {
  "input": "Let's say you want to rotate some angle about some axis.",
  "translatedText": "어떤 축을 기준으로 어떤 각도를 회전시키고 싶다고 가정해 보겠습니다.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 241.1,
  "end": 243.98
 },
 {
  "input": "You first define that axis with a unit vector, which we'll write as having i, j, and k components, normalized so that the sum of the squares of those components is 1.",
  "translatedText": "먼저 i, j, k 구성 요소를 갖는 것으로 작성하고 해당 구성 요소의 제곱의 합이 1이 되도록 정규화한 단위 벡터를 사용하여 해당 축을 정의합니다.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 244.7,
  "end": 254.26
 },
 {
  "input": "Similar to the case of complex numbers, you use the angle to construct a quaternion by taking cosine of that angle as the real part, plus sin of that angle times an imaginary part, except this time the imaginary part has three components, the coordinates of our axis of rotation.",
  "translatedText": "복소수의 경우와 유사하게, 각도를 사용하여 해당 각도의 코사인을 실수 부분으로 취하고 해당 각도의 사인에 허수 부분을 곱한 값을 더해 쿼터니언을 구성합니다. 단, 이번에는 허수 부분에 세 개의 구성 요소, 즉 좌표가 있습니다. 우리의 회전축.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 255.16,
  "end": 271.6
 },
 {
  "input": "Well, actually you take half of the angle, which might feel totally arbitrary, but hopefully that makes sense by the end of this whole experience.",
  "translatedText": "글쎄, 실제로는 각도의 절반을 취합니다. 이는 완전히 임의적이라고 느낄 수 있지만 전체 경험이 끝날 때쯤에는 그것이 의미가 있기를 바랍니다.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 272.52,
  "end": 279.72
 },
 {
  "input": "Let's say you have some 3D point, which we'll write with i, j, k components, and you want to know the coordinates you'd get when you rotate this point by your specified angle around your specified axis.",
  "translatedText": "i, j, k 구성 요소로 작성할 일부 3D 점이 있고 지정된 축을 중심으로 지정된 각도만큼 이 점을 회전할 때 얻을 수 있는 좌표를 알고 싶다고 가정해 보겠습니다.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 280.54,
  "end": 291.54
 },
 {
  "input": "What you do is not just a single quaternion product, but a sort of quaternion sandwich, where you multiply by q from the left and the inverse of q from the right.",
  "translatedText": "당신이 하는 일은 단지 단일 쿼터니언 곱이 아니라 일종의 쿼터니언 샌드위치입니다. 여기서 왼쪽에서 q를 곱하고 오른쪽에서 q의 역수를 곱합니다.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 292.36,
  "end": 301.94
 },
 {
  "input": "If you know the rules for how i, j, and k multiply amongst themselves, you can carry out these two products by expanding everything out, or more realistically by having a computer do it for you.",
  "translatedText": "i, j, k가 어떻게 곱하는지에 대한 규칙을 알고 있다면 모든 것을 확장하여 이 두 제품을 수행하거나 컴퓨터를 사용하여 더 현실적으로 수행할 수 있습니다.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 302.64,
  "end": 312.56
 },
 {
  "input": "And in what might feel like a bit of black magic, this big computation will return for you the rotated version of the point.",
  "translatedText": "그리고 약간의 흑마법처럼 느껴질 수도 있는 이 큰 계산은 점의 회전된 버전을 반환합니다.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 313.1,
  "end": 320.4
 },
 {
  "input": "Our goal is to break this down and visualize what's happening with each of these two products.",
  "translatedText": "우리의 목표는 이를 분석하고 이 두 제품 각각에 무슨 일이 일어나고 있는지 시각화하는 것입니다.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 321.16,
  "end": 325.76
 },
 {
  "input": "I'll review the method for thinking about quaternion multiplication described last video, and explain why half the angle is used, and why you would multiply from the right by the inverse.",
  "translatedText": "지난 영상에서 설명한 쿼터니언 곱셈을 생각하는 방법을 복습하고 각도의 절반이 사용되는 이유와 오른쪽에서 역수를 곱하는 이유를 설명하겠습니다.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 326.34,
  "end": 335.16
 },
 {
  "input": "On the screen now, and at the top of the description, you'll find a link to eater.",
  "translatedText": "이제 화면과 설명 상단에서 Eater 링크를 찾을 수 있습니다.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 335.94,
  "end": 339.34
 },
 {
  "input": "net slash quaternions, which is where Ben set up the explorable video tutorial, where I explain what's going on with this rotation computation.",
  "translatedText": "넷 슬래시 쿼터니언은 Ben이 탐색 가능한 비디오 튜토리얼을 설정한 곳이며, 여기서 회전 계산에 무슨 일이 일어나는지 설명합니다.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 339.34,
  "end": 346.84
 },
 {
  "input": "It's just really cool.",
  "translatedText": "정말 멋지네요.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 347.64,
  "end": 349.0
 },
 {
  "input": "Eater did something awesome here.",
  "translatedText": "Eater가 여기서 멋진 일을 해냈습니다.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 349.22,
  "end": 350.34
 },
 {
  "input": "So at the very least, just take a couple minutes to go look at it, but I'd love it if you went through the full experience.",
  "translatedText": "그러니 최소한 몇 분만 시간을 내어 가서 살펴보시기 바랍니다. 전체 경험을 해보셨다면 좋겠습니다.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 350.54,
  "end": 354.6
 }
]