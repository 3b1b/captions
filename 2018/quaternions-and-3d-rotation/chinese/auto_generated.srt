1
00:00:02,959 --> 00:00:05,949
稍后，我将向您指出一个单独的网站，其中 

2
00:00:05,949 --> 00:00:08,640
托管着我们称之为探索视频的简短序列。

3
00:00:09,220 --> 00:00:12,209
这是与 Ben Eater 合作完成的，你们中的 

4
00:00:12,209 --> 00:00:14,960
一些人可能知道他是优秀计算机工程频道的运营者。

5
00:00:15,480 --> 00:00:18,298
如果你不知道他是谁，这个频道的观众肯 

6
00:00:18,298 --> 00:00:20,820
定会喜欢他的内容，所以一定要看看。

7
00:00:21,300 --> 00:00:25,419
不过，对于我们俩来说，这次合作有点不同，而使这些探 

8
00:00:25,419 --> 00:00:29,380
索视频成为可能的所有网络开发都完全归功于 Ben。

9
00:00:29,860 --> 00:00:32,649
我不想在这里说太多，这确实是你 

10
00:00:32,649 --> 00:00:37,880
必须亲自体验的事情，当然这是我 有幸参与过的最酷的项目之一。

11
00:00:38,300 --> 00:00:41,945
不过在此之前，如果您能抑制住自己的兴奋之情，我想利用这 

12
00:00:41,945 --> 00:00:45,460
段视频作为一个机会，通过一些周围的背景来介绍一下事情。

13
00:00:46,900 --> 00:00:50,996
因此，为了做好准备，我在上一个视频中描述了四元数，这是一种 

14
00:00:50,996 --> 00:00:54,956
特定的 4 维数字系统，19 世纪版本的金刚狼和《小鬼当 

15
00:00:54,956 --> 00:00:58,780
家》中的老人称其为“邪恶”，因为它在当时看起来非常复杂。

16
00:00:59,060 --> 00:01:01,774
也许你也想知道为什么有人会为这 

17
00:01:01,774 --> 00:01:04,319
种看似外星人的数字系统而烦恼。

18
00:01:05,200 --> 00:01:08,540
其中一个重要原因（尤其是对于程序员而言）是，它

19
00:01:08,540 --> 00:01:11,008
们提供了一种非常好的描 述 3D 

20
00:01:11,008 --> 00:01:15,220
方向的方法，该方法不易受到其他方法的错误和边缘情况的影响。

21
00:01:15,820 --> 00:01:19,447
我的意思是，出于多种原因，它们在数学上很有趣， 

22
00:01:19,447 --> 00:01:23,074
但计算机图形学、机器人技术、虚拟现实以及任何涉 

23
00:01:23,074 --> 00:01:26,400
及 3D 方向的应用可能是四元数的最大用例。

24
00:01:26,400 --> 00:01:30,046
举个例子，我的一位曾经在苹果公司工作的朋友安迪·马图斯扎克 

25
00:01:30,046 --> 00:01:32,355
(And y Matuszczak) 

26
00:01:32,355 --> 00:01:34,907
很高兴地告诉我，如何将代码发送到数亿台设 

27
00:01:34,907 --> 00:01:38,067
备，这些设备使用四元数来跟踪手机的模型，以了解其在空

28
00:01:38,067 --> 00:01:39,040
间中的定向方式。

29
00:01:39,660 --> 00:01:45,240
没错，您的手机几乎肯定在其内部 某处运行着依赖四元数的软件。

30
00:01:46,340 --> 00:01:49,812
问题是，还有其他方法可以考虑计算旋转 

31
00:01:49,812 --> 00:01:52,920
，其中许多方法比四元数更容易考虑。

32
00:01:53,250 --> 00:01:56,725
例如，任何熟悉线性代数的人都会知道 

33
00:01:56,725 --> 00:02:00,780
3 x3 矩阵可以很好地描述 3D 变换。

34
00:02:01,340 --> 00:02:06,217
许多程序员考虑构建所需方向的旋转矩阵的常 

35
00:02:06,217 --> 00:02:11,094
见方法是想象围绕三个易于思考的轴旋转对象 

36
00:02:11,094 --> 00:02:15,740
，其中这些旋转的相关角度通常称为欧拉角。

37
00:02:16,580 --> 00:02:19,810
这基本上是有效的，但一个大问题是它很 

38
00:02:19,810 --> 00:02:23,040
容易受到万向节锁的影响，当你的两个旋 

39
00:02:23,040 --> 00:02:26,100
转轴对齐时，你就会失去一定的自由度。

40
00:02:26,700 --> 00:02:29,610
当尝试在两个不同的方向之间进行 

41
00:02:29,610 --> 00:02:32,340
插值时，它还会导致困难和歧义。

42
00:02:32,940 --> 00:02:35,529
如果您对更多细节感到好奇，网上有很多很 

43
00:02:35,529 --> 00:02:37,989
棒的资源可用于了解欧拉角和万向节锁， 

44
00:02:37,989 --> 00:02:40,320
我在描述中留下了其中一些资源的链接。

45
00:02:41,040 --> 00:02:45,258
四元数不仅避免了万向节锁定等问题，而且提供了一 

46
00:02:45,258 --> 00:02:49,477
种在两个 3 维方向之间进行真正无缝插值的方法 

47
00:02:49,477 --> 00:02:53,696
，该方法没有欧拉角的模糊性，并且避免了尝试插值 

48
00:02:53,696 --> 00:02:57,740
时出现的数值精度和归一化问题两个旋转矩阵之间。

49
00:02:58,780 --> 00:03:03,018
为了热身于如何使用某些高维数字系统中的 

50
00:03:03,018 --> 00:03:07,045
乘法来计算旋转的想法，请花点时间记住 

51
00:03:07,045 --> 00:03:10,860
复数如何提供计算二维旋转的灵活方法。

52
00:03:11,540 --> 00:03:15,615
具体来说，假设您在 2 维空间中有某个点 ，例如 

53
00:03:15,615 --> 00:03:19,690
4,1，并且您想知道如果将该点 绕原点旋转 30 

54
00:03:19,690 --> 00:03:21,320
度，会得到新的坐标。

55
00:03:22,240 --> 00:03:24,620
复数提供了一种时髦的方法来做到这一点。

56
00:03:25,080 --> 00:03:29,206
取与水平方向成 30 度、幅度为 1 的复数 

57
00:03:29,206 --> 00:03:33,152
、cos 30 度加上 sin 30 度乘 

58
00:03:33,152 --> 00:03:36,920
以 i，然后将其乘以您的点（表示为复数）。

59
00:03:37,500 --> 00:03:42,120
执行此计算时您需要知道的唯一 规则是 i2 等于负 1。

60
00:03:42,120 --> 00:03:46,081
然后，对于那些第一次学习它的人来说，这可能感觉 

61
00:03:46,081 --> 00:03:50,043
有点黑魔法，根据一个简单的规则执行此乘积，给出 

62
00:03:50,043 --> 00:03:53,840
一个新点的坐标，该点从原始点旋转了 30 度。

63
00:03:55,340 --> 00:04:00,500
使用四元数描述 3D 旋转是相 似的，但外观和感觉略有不同。

64
00:04:01,100 --> 00:04:03,980
假设您想绕某个轴旋转某个角度。

65
00:04:04,700 --> 00:04:09,302
首先使用单位向量定义该轴，我们将其写为具有 i、j 

66
00:04:09,302 --> 00:04:14,260
和 k 分量，并进行归一化，以便这些分量的平方和为 1。

67
00:04:15,160 --> 00:04:19,475
与复数的情况类似，您可以使用该角度来构造 

68
00:04:19,475 --> 00:04:25,024
四元数，方法是将该角度的余弦作为实部， 加上该角度的 

69
00:04:25,024 --> 00:04:30,367
sin 乘以虚部，只不过 这次虚部具有三个分量，即我

70
00:04:30,367 --> 00:04:31,600
们的旋转轴。

71
00:04:32,520 --> 00:04:36,196
好吧，实际上你采取了一半的角度，这可能感觉完全 

72
00:04:36,196 --> 00:04:39,720
是任意的，但希望在整个体验结束时这是有意义的。

73
00:04:40,540 --> 00:04:44,326
假设您有一些 3D 点，我们将用 i、j 

74
00:04:44,326 --> 00:04:48,113
、k 分量编写该点，并且您想知道当您围绕 

75
00:04:48,113 --> 00:04:51,540
指定轴将该点旋转指定角度时获得的坐标。

76
00:04:52,360 --> 00:04:57,243
您所做的不仅仅是单个四元数乘积，而是一种四元数三明 

77
00:04:57,243 --> 00:05:01,940
治，其中您从左侧乘以 q，从右侧乘以 q 的倒数。

78
00:05:02,640 --> 00:05:06,049
如果您知道 i、j 和 k 之间相乘的规则 

79
00:05:06,049 --> 00:05:09,460
，则可以通过展开所有内容来执行这两个乘积， 

80
00:05:09,460 --> 00:05:12,560
或者更实际地通过让计算机为您执行此操作。

81
00:05:13,100 --> 00:05:20,400
这个大计算将为您返回点的旋转 版本，这可能感觉有点黑魔法。

82
00:05:21,160 --> 00:05:25,760
我们的目标是分解并可视化 这两种产品所发生的情况。

83
00:05:26,340 --> 00:05:29,335
我将回顾上一个视频中描述的思考四元 

84
00:05:29,335 --> 00:05:32,330
数乘法的方法，并解释为什么使用一半 

85
00:05:32,330 --> 00:05:35,160
角度，以及为什么要从右侧乘以倒数。

86
00:05:35,940 --> 00:05:38,243
现在在屏幕上的描述顶部，您会找到一个指向 

87
00:05:38,243 --> 00:05:39,340
eater 的链接。

88
00:05:39,340 --> 00:05:43,416
n et 斜线四元数，Ben 在其中设置了可探索 

89
00:05:43,416 --> 00:05:46,840
的视频教程，我在其中解释了旋转计算的情况。

90
00:05:47,640 --> 00:05:49,000
这真的很酷。

91
00:05:49,220 --> 00:05:50,340
Eater在这里做了一些很棒的事情。

92
00:05:50,540 --> 00:05:52,624
因此，至少，只需花几分钟时间看看，但 

93
00:05:52,624 --> 00:05:54,600
如果您能完整体验一下，我会很高兴的。

