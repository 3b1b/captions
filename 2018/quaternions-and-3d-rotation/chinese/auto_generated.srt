1
00:00:00,000 --> 00:00:04,842
稍后，我将向您指出一个单独的网站，其中

2
00:00:04,842 --> 00:00:09,200
托管着我们称之为探索视频的简短序列。

3
00:00:09,200 --> 00:00:12,554
这是与 Ben Eater 合作完成的，你们中的

4
00:00:12,554 --> 00:00:15,640
一些人可能知道他是优秀计算机工程频道的运营者。

5
00:00:15,640 --> 00:00:18,711
如果你不知道他是谁，这个频道的观众肯

6
00:00:18,711 --> 00:00:21,460
定会喜欢他的内容，所以一定要看看。

7
00:00:21,460 --> 00:00:25,813
不过，对于我们俩来说，这次合作有点不同，而使这些探

8
00:00:25,813 --> 00:00:30,000
索视频成为可能的所有网络开发都完全归功于 Ben。

9
00:00:30,000 --> 00:00:32,977
我不想在这里说太多，这确实是你

10
00:00:32,977 --> 00:00:38,560
必须亲自体验的事情，当然这是我 有幸参与过的最酷的项目之一。

11
00:00:38,560 --> 00:00:42,836
不过在此之前，如果您能抑制住自己的兴奋之情，我想利用这

12
00:00:42,836 --> 00:00:46,960
段视频作为一个机会，通过一些周围的背景来介绍一下事情。

13
00:00:46,960 --> 00:00:51,222
因此，为了做好准备，我在上一个视频中描述了四元数，这是一种

14
00:00:51,222 --> 00:00:55,342
特定的 4 维数字系统，19 世纪版本的金刚狼和《小鬼当

15
00:00:55,342 --> 00:00:59,320
家》中的老人称其为“邪恶”，因为它在当时看起来非常复杂。

16
00:00:59,320 --> 00:01:02,530
也许你也想知道为什么有人会为这

17
00:01:02,530 --> 00:01:05,540
种看似外星人的数字系统而烦恼。

18
00:01:05,540 --> 00:01:08,800
其中一个重要原因（尤其是对于程序员而言）是，它

19
00:01:08,800 --> 00:01:11,209
们提供了一种非常好的描 述 3D

20
00:01:11,209 --> 00:01:15,320
方向的方法，该方法不易受到其他方法的错误和边缘情况的影响。

21
00:01:15,320 --> 00:01:19,406
我的意思是，出于多种原因，它们在数学上很有趣，

22
00:01:19,406 --> 00:01:23,493
但计算机图形学、机器人技术、虚拟现实以及任何涉

23
00:01:23,493 --> 00:01:27,240
及 3D 方向的应用可能是四元数的最大用例。

24
00:01:27,240 --> 00:01:30,713
举个例子，我的一位曾经在苹果公司工作的朋友安迪·马图斯扎克

25
00:01:30,713 --> 00:01:32,912
(And y Matuszczak)

26
00:01:32,912 --> 00:01:35,343
很高兴地告诉我，如何将代码发送到数亿台设

27
00:01:35,343 --> 00:01:38,353
备，这些设备使用四元数来跟踪手机的模型，以了解其在空

28
00:01:38,353 --> 00:01:39,280
间中的定向方式。

29
00:01:39,280 --> 00:01:46,360
没错，您的手机几乎肯定在其内部 某处运行着依赖四元数的软件。

30
00:01:46,360 --> 00:01:50,149
问题是，还有其他方法可以考虑计算旋转

31
00:01:50,149 --> 00:01:53,540
，其中许多方法比四元数更容易考虑。

32
00:01:53,540 --> 00:01:57,140
例如，任何熟悉线性代数的人都会知道

33
00:01:57,140 --> 00:02:01,340
3 x3 矩阵可以很好地描述 3D 变换。

34
00:02:01,340 --> 00:02:06,529
许多程序员考虑构建所需方向的旋转矩阵的常

35
00:02:06,529 --> 00:02:11,718
见方法是想象围绕三个易于思考的轴旋转对象

36
00:02:11,718 --> 00:02:16,660
，其中这些旋转的相关角度通常称为欧拉角。

37
00:02:16,660 --> 00:02:20,025
这基本上是有效的，但一个大问题是它很

38
00:02:20,025 --> 00:02:23,391
容易受到万向节锁的影响，当你的两个旋

39
00:02:23,391 --> 00:02:26,580
转轴对齐时，你就会失去一定的自由度。

40
00:02:26,580 --> 00:02:29,965
当尝试在两个不同的方向之间进行

41
00:02:29,965 --> 00:02:33,140
插值时，它还会导致困难和歧义。

42
00:02:33,140 --> 00:02:35,940
如果您对更多细节感到好奇，网上有很多很

43
00:02:35,940 --> 00:02:38,600
棒的资源可用于了解欧拉角和万向节锁，

44
00:02:38,600 --> 00:02:41,120
我在描述中留下了其中一些资源的链接。

45
00:02:41,120 --> 00:02:45,611
四元数不仅避免了万向节锁定等问题，而且提供了一

46
00:02:45,611 --> 00:02:50,103
种在两个 3 维方向之间进行真正无缝插值的方法

47
00:02:50,103 --> 00:02:54,595
，该方法没有欧拉角的模糊性，并且避免了尝试插值

48
00:02:54,595 --> 00:02:58,900
时出现的数值精度和归一化问题两个旋转矩阵之间。

49
00:02:58,900 --> 00:03:03,138
为了热身于如何使用某些高维数字系统中的

50
00:03:03,138 --> 00:03:07,165
乘法来计算旋转的想法，请花点时间记住

51
00:03:07,165 --> 00:03:10,980
复数如何提供计算二维旋转的灵活方法。

52
00:03:10,980 --> 00:03:15,780
具体来说，假设您在 2 维空间中有某个点 ，例如

53
00:03:15,780 --> 00:03:20,580
4,1，并且您想知道如果将该点 绕原点旋转 30

54
00:03:20,580 --> 00:03:22,500
度，会得到新的坐标。

55
00:03:22,500 --> 00:03:25,120
复数提供了一种时髦的方法来做到这一点。

56
00:03:25,120 --> 00:03:29,441
取与水平方向成 30 度、幅度为 1 的复数

57
00:03:29,441 --> 00:03:33,574
、cos 30 度加上 sin 30 度乘

58
00:03:33,574 --> 00:03:37,520
以 i，然后将其乘以您的点（表示为复数）。

59
00:03:37,520 --> 00:03:43,000
执行此计算时您需要知道的唯一 规则是 i2 等于负 1。

60
00:03:43,000 --> 00:03:47,232
然后，对于那些第一次学习它的人来说，这可能感觉

61
00:03:47,232 --> 00:03:51,464
有点黑魔法，根据一个简单的规则执行此乘积，给出

62
00:03:51,464 --> 00:03:55,520
一个新点的坐标，该点从原始点旋转了 30 度。

63
00:03:55,520 --> 00:04:01,200
使用四元数描述 3D 旋转是相 似的，但外观和感觉略有不同。

64
00:04:01,200 --> 00:04:04,720
假设您想绕某个轴旋转某个角度。

65
00:04:04,720 --> 00:04:09,881
首先使用单位向量定义该轴，我们将其写为具有 i、j

66
00:04:09,881 --> 00:04:15,440
和 k 分量，并进行归一化，以便这些分量的平方和为 1。

67
00:04:15,440 --> 00:04:19,787
与复数的情况类似，您可以使用该角度来构造

68
00:04:19,787 --> 00:04:25,376
四元数，方法是将该角度的余弦作为实部， 加上该角度的

69
00:04:25,376 --> 00:04:30,758
sin 乘以虚部，只不过 这次虚部具有三个分量，即我

70
00:04:30,758 --> 00:04:32,000
们的旋转轴。

71
00:04:32,000 --> 00:04:35,962
好吧，实际上你采取了一半的角度，这可能感觉完全

72
00:04:35,962 --> 00:04:39,760
是任意的，但希望在整个体验结束时这是有意义的。

73
00:04:39,760 --> 00:04:44,166
假设您有一些 3D 点，我们将用 i、j

74
00:04:44,166 --> 00:04:48,573
、k 分量编写该点，并且您想知道当您围绕

75
00:04:48,573 --> 00:04:52,560
指定轴将该点旋转指定角度时获得的坐标。

76
00:04:52,560 --> 00:04:57,800
您所做的不仅仅是单个四元数乘积，而是一种四元数三明

77
00:04:57,800 --> 00:05:02,840
治，其中您从左侧乘以 q，从右侧乘以 q 的倒数。

78
00:05:02,840 --> 00:05:06,483
如果您知道 i、j 和 k 之间相乘的规则

79
00:05:06,483 --> 00:05:10,127
，则可以通过展开所有内容来执行这两个乘积，

80
00:05:10,127 --> 00:05:13,440
或者更实际地通过让计算机为您执行此操作。

81
00:05:13,440 --> 00:05:21,240
这个大计算将为您返回点的旋转 版本，这可能感觉有点黑魔法。

82
00:05:21,240 --> 00:05:26,120
我们的目标是分解并可视化 这两种产品所发生的情况。

83
00:05:26,120 --> 00:05:29,468
我将回顾上一个视频中描述的思考四元

84
00:05:29,468 --> 00:05:32,817
数乘法的方法，并解释为什么使用一半

85
00:05:32,817 --> 00:05:35,980
角度，以及为什么要从右侧乘以倒数。

86
00:05:35,980 --> 00:05:38,462
现在在屏幕上的描述顶部，您会找到一个指向

87
00:05:38,462 --> 00:05:39,644
eater 的链接。

88
00:05:39,644 --> 00:05:44,000
n et 斜线四元数，Ben 在其中设置了可探索

89
00:05:44,000 --> 00:05:47,660
的视频教程，我在其中解释了旋转计算的情况。

90
00:05:47,660 --> 00:05:49,240
这真的很酷。

91
00:05:49,240 --> 00:05:50,500
Eater在这里做了一些很棒的事情。

92
00:05:50,500 --> 00:05:52,266
因此，至少，只需花几分钟时间看看，但

93
00:05:52,266 --> 00:05:53,940
如果您能完整体验一下，我会很高兴的。

