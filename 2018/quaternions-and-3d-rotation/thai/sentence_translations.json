[
 {
  "input": "In a moment, I'll point you to a separate website hosting a short sequence of what we're calling explorable videos. ",
  "translatedText": "",
  "model": "nmt",
  "time_range": [
   2.9599999999999973,
   8.64
  ]
 },
 {
  "input": "It was done in collaboration with Ben Eater, who some of you may know as that guy who runs the excellent computer engineering channel. ",
  "translatedText": "",
  "model": "nmt",
  "time_range": [
   9.22,
   14.96
  ]
 },
 {
  "input": "And if you don't know who he is, viewers of this channel would certainly enjoy the content of his, so do check it out. ",
  "translatedText": "",
  "model": "nmt",
  "time_range": [
   15.48,
   20.82
  ]
 },
 {
  "input": "This collaboration was something a little different though, for both of us, and all of the web development that made these explorable videos possible is completely thanks to Ben. ",
  "translatedText": "",
  "model": "nmt",
  "time_range": [
   21.3,
   29.38
  ]
 },
 {
  "input": "I don't want to say too much about it here, it's really something you have to experience for yourself, certainly one of the coolest projects I've had the pleasure of working on. ",
  "translatedText": "",
  "model": "nmt",
  "time_range": [
   29.86,
   37.88
  ]
 },
 {
  "input": "Before that though, if you can contain your excitement, I want to use this video as a chance to tee things up with a little bit of surrounding context. ",
  "translatedText": "",
  "model": "nmt",
  "time_range": [
   38.3,
   45.46
  ]
 },
 {
  "input": "So to set the stage, last video I described quaternions, a certain 4-dimensional number system that the 19th century versions of Wolverine and the old man from Home Alone called evil for how convoluted it seemed at the time. ",
  "translatedText": "",
  "model": "nmt",
  "time_range": [
   46.9,
   58.78
  ]
 },
 {
  "input": "And perhaps you too are wondering why on earth anyone would bother with such an alien-seeming number system. ",
  "translatedText": "",
  "model": "nmt",
  "time_range": [
   59.06,
   64.32
  ]
 },
 {
  "input": "One of the big reasons, especially for programmers, is that they give a really nice way for describing 3D orientation, which is not susceptible to the bugs and edge cases of other methods. ",
  "translatedText": "",
  "model": "nmt",
  "time_range": [
   65.2,
   75.22
  ]
 },
 {
  "input": "I mean, they're interesting mathematically for a lot of reasons, but this application for computer graphics and robotics and virtual reality and anything involving 3D orientation is probably the biggest use case for quaternions. ",
  "translatedText": "",
  "model": "nmt",
  "time_range": [
   75.82,
   86.4
  ]
 },
 {
  "input": "To take one example, a friend of mine who used to work at Apple, Andy Matuszczak, delighted in telling me about shipping code to hundreds of millions of devices that uses quaternions to track the phone's model for how it's oriented in space. ",
  "translatedText": "",
  "model": "nmt",
  "time_range": [
   86.4,
   99.04
  ]
 },
 {
  "input": "That's right, your phone almost certainly has software running somewhere inside of it that relies on quaternions. ",
  "translatedText": "",
  "model": "nmt",
  "time_range": [
   99.66,
   105.24
  ]
 },
 {
  "input": "The thing is, there are other ways to think about computing rotations, many of which are way simpler to think about than quaternions. ",
  "translatedText": "",
  "model": "nmt",
  "time_range": [
   106.34,
   112.92
  ]
 },
 {
  "input": "For example, any of you familiar with linear algebra will know that 3x3 matrices can really nicely describe 3D transformations. ",
  "translatedText": "",
  "model": "nmt",
  "time_range": [
   113.25,
   120.78
  ]
 },
 {
  "input": "And a common way that many programmers think about constructing a rotation matrix for a desired orientation is to imagine rotating an object around three easy-to-think-about axes, where the relevant angles for these rotations are commonly called Euler angles. ",
  "translatedText": "",
  "model": "nmt",
  "time_range": [
   121.34,
   135.74
  ]
 },
 {
  "input": "And this mostly works, but one big problem is that it's vulnerable to something called gimbal lock, where when two of your axes of rotation get lined up, you lose a degree of freedom. ",
  "translatedText": "",
  "model": "nmt",
  "time_range": [
   136.58,
   146.1
  ]
 },
 {
  "input": "And it can also cause difficulties and ambiguities when trying to interpolate between two separate orientations. ",
  "translatedText": "",
  "model": "nmt",
  "time_range": [
   146.7,
   152.34
  ]
 },
 {
  "input": "If you're curious for more of the details, there are many great sources online for learning about Euler angles and gimbal lock, and I've left links in the description to a few of them. ",
  "translatedText": "",
  "model": "nmt",
  "time_range": [
   152.94,
   160.32
  ]
 },
 {
  "input": "Not only do quaternions avoid issues like gimbal lock, they give a really seamless way to interpolate between two 3-dimensional orientations, one which lacks the ambiguities of Euler angles, and which avoids the issues of numerical precision and normalization that arise in trying to interpolate between two rotation matrices. ",
  "translatedText": "",
  "model": "nmt",
  "time_range": [
   161.04,
   177.74
  ]
 },
 {
  "input": "To warm up to the idea of how multiplication in some higher-dimensional number system might be used to compute rotations, take a moment to remember how it is that complex numbers give a slick method for computing 2D rotations. ",
  "translatedText": "",
  "model": "nmt",
  "time_range": [
   178.78,
   190.86
  ]
 },
 {
  "input": "Specifically, let's say you have some point in 2-dimensional space like 4,1, and you want to know the new coordinates you'd get if you rotate this point 30 degrees around the origin. ",
  "translatedText": "",
  "model": "nmt",
  "time_range": [
   191.54,
   201.32
  ]
 },
 {
  "input": "Complex numbers give a sort of snazzy way to do this. ",
  "translatedText": "",
  "model": "nmt",
  "time_range": [
   202.24,
   204.62
  ]
 },
 {
  "input": "You take the complex number that's 30 degrees off the horizontal with magnitude 1, cos 30 degrees plus sin 30 degrees times i, and then you multiply this by your point, represented as a complex number. ",
  "translatedText": "",
  "model": "nmt",
  "time_range": [
   205.08,
   216.92
  ]
 },
 {
  "input": "The only rule you need to know to carry out this computation is that i2 equals negative 1. ",
  "translatedText": "",
  "model": "nmt",
  "time_range": [
   217.5,
   222.12
  ]
 },
 {
  "input": "Then in what might feel like a bit of black magic to those first learning it, carrying out this product from that one simple rule gives the coordinates of a new point, the point rotated 30 degrees from the original. ",
  "translatedText": "",
  "model": "nmt",
  "time_range": [
   222.12,
   233.84
  ]
 },
 {
  "input": "Using quaternions to describe 3D rotations is similar, though the look and feel is slightly different. ",
  "translatedText": "",
  "model": "nmt",
  "time_range": [
   235.34,
   240.5
  ]
 },
 {
  "input": "Let's say you want to rotate some angle about some axis. ",
  "translatedText": "",
  "model": "nmt",
  "time_range": [
   241.1,
   243.98
  ]
 },
 {
  "input": "You first define that axis with a unit vector, which we'll write as having i, j, and k components, normalized so that the sum of the squares of those components is 1. ",
  "translatedText": "",
  "model": "nmt",
  "time_range": [
   244.7,
   254.26
  ]
 },
 {
  "input": "Similar to the case of complex numbers, you use the angle to construct a quaternion by taking cosine of that angle as the real part, plus sin of that angle times an imaginary part, except this time the imaginary part has three components, the coordinates of our axis of rotation. ",
  "translatedText": "",
  "model": "nmt",
  "time_range": [
   255.16,
   271.6
  ]
 },
 {
  "input": "Well, actually you take half of the angle, which might feel totally arbitrary, but hopefully that makes sense by the end of this whole experience. ",
  "translatedText": "",
  "model": "nmt",
  "time_range": [
   272.52,
   279.72
  ]
 },
 {
  "input": "Let's say you have some 3D point, which we'll write with i, j, k components, and you want to know the coordinates you'd get when you rotate this point by your specified angle around your specified axis. ",
  "translatedText": "",
  "model": "nmt",
  "time_range": [
   280.54,
   291.54
  ]
 },
 {
  "input": "What you do is not just a single quaternion product, but a sort of quaternion sandwich, where you multiply by q from the left and the inverse of q from the right. ",
  "translatedText": "",
  "model": "nmt",
  "time_range": [
   292.36,
   301.94
  ]
 },
 {
  "input": "If you know the rules for how i, j, and k multiply amongst themselves, you can carry out these two products by expanding everything out, or more realistically by having a computer do it for you. ",
  "translatedText": "",
  "model": "nmt",
  "time_range": [
   302.64,
   312.56
  ]
 },
 {
  "input": "And in what might feel like a bit of black magic, this big computation will return for you the rotated version of the point. ",
  "translatedText": "",
  "model": "nmt",
  "time_range": [
   313.1,
   320.4
  ]
 },
 {
  "input": "Our goal is to break this down and visualize what's happening with each of these two products. ",
  "translatedText": "",
  "model": "nmt",
  "time_range": [
   321.16,
   325.76
  ]
 },
 {
  "input": "I'll review the method for thinking about quaternion multiplication described last video, and explain why half the angle is used, and why you would multiply from the right by the inverse. ",
  "translatedText": "",
  "model": "nmt",
  "time_range": [
   326.34,
   335.16
  ]
 },
 {
  "input": "On the screen now, and at the top of the description, you'll find a link to eater.net slash quaternions, which is where Ben set up the explorable video tutorial, where I explain what's going on with this rotation computation. ",
  "translatedText": "",
  "model": "nmt",
  "time_range": [
   335.94,
   346.84
  ]
 },
 {
  "input": "It's just really cool. ",
  "translatedText": "",
  "model": "nmt",
  "time_range": [
   347.64000000000004,
   349.0
  ]
 },
 {
  "input": "Eater did something awesome here. ",
  "translatedText": "",
  "model": "nmt",
  "time_range": [
   349.22,
   350.34
  ]
 },
 {
  "input": "So at the very least, just take a couple minutes to go look at it, but I'd love it if you went through the full experience. ",
  "translatedText": "",
  "model": "nmt",
  "time_range": [
   350.54,
   354.6
  ]
 }
]