1
00:00:00,000 --> 00:00:04,690
すぐに、探索可能なビデオと呼ばれるものの短いシーケ

2
00:00:04,690 --> 00:00:09,200
ンスをホストする別の Web サイトを紹介します。

3
00:00:09,200 --> 00:00:12,535
これは、優れたコンピューター エンジニアリング チャンネ

4
00:00:12,535 --> 00:00:15,640
ルを運営するベン イーターとの共同作業で行われました。

5
00:00:15,640 --> 00:00:17,580
彼が誰であるかを知らなくても、このチャンネル

6
00:00:17,580 --> 00:00:19,520
の視聴者は間違いなく彼 のコンテンツを楽しむ

7
00:00:19,520 --> 00:00:21,460
ことができるので、ぜひチェックしてください。

8
00:00:21,460 --> 00:00:24,232
ただし、このコラボレーションは私たち二人にとって少

9
00:00:24,232 --> 00:00:27,005
し違ったものでした。 これら の探索可能なビデオを

10
00:00:27,005 --> 00:00:30,000
可能にしたウェブ開発はすべて、完全にベンのおかげです。

11
00:00:30,000 --> 00:00:32,922
ここではそれについてあまり言いたくありませんが、これは

12
00:00:32,922 --> 00:00:35,845
実際に自分で体験する必要があり、間違いなく私が喜んで取

13
00:00:35,845 --> 00:00:38,560
り組んできた最もクールなプロジェクトの 1 つです。

14
00:00:38,560 --> 00:00:42,915
その前に、興奮を抑えられるのであれば、このビデオを周囲

15
00:00:42,915 --> 00:00:46,960
の状況を少し理解する機会として使用したいと思います。

16
00:00:46,960 --> 00:00:49,995
それで、準備を整えるために、前回のビデオでクォータニオン

17
00:00:49,995 --> 00:00:52,597
について説明しました。 クォータニオンは、19

18
00:00:52,597 --> 00:00:55,308
世紀版のウルヴァリンやホーム アローンの老人が当

19
00:00:55,308 --> 00:00:58,344
時あまりに複雑に見えたため悪と呼ばれていた、特定の 4

20
00:00:58,344 --> 00:00:59,320
次元の数体系です。

21
00:00:59,320 --> 00:01:01,334
そして、おそらくあなたも、いったいなぜ誰もがそ

22
00:01:01,334 --> 00:01:03,349
のようなエイリアンのよう に見える番号体系にわ

23
00:01:03,349 --> 00:01:05,540
ざわざこだわるのか疑問に思っているかもしれません。

24
00:01:05,540 --> 00:01:08,014
特にプログラマにとっての大きな理由の 1

25
00:01:08,014 --> 00:01:10,488
つは、他のメソッドのバグやエッジ ケース

26
00:01:10,488 --> 00:01:13,670
の影響を受けにくい 3D 方向を記述するための非常に優

27
00:01:13,670 --> 00:01:15,320
れた方法を提供することです。

28
00:01:15,320 --> 00:01:18,219
つまり、それらは多くの理由で数学的に興味深いものですが

29
00:01:18,219 --> 00:01:21,118
、コンピューター グ ラフィックス、ロボット工学、仮想

30
00:01:21,118 --> 00:01:23,374
現実、および 3D 方向に関連するものに

31
00:01:23,374 --> 00:01:26,273
対するこのアプリケーションは、おそらくクォータニオンの

32
00:01:26,273 --> 00:01:27,240
最大の使用例です。

33
00:01:27,240 --> 00:01:29,019
一例を挙げると、以前 Apple

34
00:01:29,019 --> 00:01:31,951
で働いていた私の友人、Andy Matus zczak

35
00:01:31,951 --> 00:01:34,882
は、空間内での携帯電話の向きを追跡するためにクォータニオ

36
00:01:34,882 --> 00:01:37,814
ンを使用 するコードを数億台のデバイスに出荷することにつ

37
00:01:37,814 --> 00:01:39,280
いて喜んで話してくれました。

38
00:01:39,280 --> 00:01:42,942
そうです、あなたの携帯電話の内部のどこかで、四元数に依存す

39
00:01:42,942 --> 00:01:46,360
るソフトウェアが実行されているのはほぼ間違いありません。

40
00:01:46,360 --> 00:01:48,715
問題は、回転の計算については他にも考え方が

41
00:01:48,715 --> 00:01:51,071
あり、その多くはクォー タニオンよりもはる

42
00:01:51,071 --> 00:01:53,540
かに簡単に考えることができるということです。

43
00:01:53,540 --> 00:01:57,510
たとえば、線形代数に詳しい人なら、3x3 行列が 3D

44
00:01:57,510 --> 00:02:01,340
変換を非常にうまく記述できることを知っているでしょう。

45
00:02:01,340 --> 00:02:05,136
そして、多くのプログラマーが目的の向きの回転行列を構築す

46
00:02:05,136 --> 00:02:08,254
る際に考える一般的 な方法は、考えやすい 3

47
00:02:08,254 --> 00:02:11,643
つの軸の周りでオブジェクトを回転させることを想像

48
00:02:11,643 --> 00:02:15,439
することです。 これらの回転に関連する角度は一般にオイラ

49
00:02:15,439 --> 00:02:16,660
ー角と呼ばれます。

50
00:02:16,660 --> 00:02:18,949
これはほとんど機能しますが、大きな問題の

51
00:02:18,949 --> 00:02:21,347
1 つは、ジンバル ロックと呼ばれるものに対

52
00:02:21,347 --> 00:02:23,309
して脆弱であることです。 ジンバル

53
00:02:23,309 --> 00:02:26,580
ロックとは、2 つの回転軸が並ぶと自由度が失われることです。

54
00:02:26,580 --> 00:02:29,929
また、2 つの異なる方向の間を補間しようとする

55
00:02:29,929 --> 00:02:33,140
ときに、困難や曖昧さが生じる可能性もあります。

56
00:02:33,140 --> 00:02:35,830
さらに詳しく知りたい場合は、オイラー角とジンバル ロック

57
00:02:35,830 --> 00:02:38,521
について学ぶための優れた情報源がオンラインにたくさんあり

58
00:02:38,521 --> 00:02:41,120
ます。 そのうちのいくつかへのリンクを説明に残しました。

59
00:02:41,120 --> 00:02:44,595
クォータニオンはジンバル ロックのような問題を回避す

60
00:02:44,595 --> 00:02:48,071
るだけでなく、 2 つの 3 次元方向の間で補間する

61
00:02:48,071 --> 00:02:50,611
非常にシームレスな方法を提供 します。

62
00:02:50,611 --> 00:02:54,622
これにより、オイラー角の曖昧さがなくなり、補間時に発生す

63
00:02:54,622 --> 00:02:57,295
る数値精度と正規化の問題が回避されます。

64
00:02:57,295 --> 00:02:58,900
2 つの回転行列の間。

65
00:02:58,900 --> 00:03:01,858
回転を計算するために高次元の数体系の乗算がどのよ

66
00:03:01,858 --> 00:03:05,556
うに使用されるか というアイデアを理解するために、複素数が

67
00:03:05,556 --> 00:03:08,514
2D 回転を計算するた めの巧妙な方法をどのよう

68
00:03:08,514 --> 00:03:10,980
に提供するのかを少し思い出してください。

69
00:03:10,980 --> 00:03:14,929
具体的には、4,1 のような 2 次元空間に点

70
00:03:14,929 --> 00:03:18,879
があり、この点を原点の周りに 30 度回転した

71
00:03:18,879 --> 00:03:22,500
場合に得られる新しい座標を知りたいとします。

72
00:03:22,500 --> 00:03:23,772
複素数を使用すると、これを行うため

73
00:03:23,772 --> 00:03:25,120
の一種の気の利いた方法が得られます。

74
00:03:25,120 --> 00:03:29,406
水平から 30 度離れたマグニチュード 1 の複素数、

75
00:03:29,406 --> 00:03:33,539
cos 30 度 + sin 30 度 x i を取

76
00:03:33,539 --> 00:03:37,520
得し、これに複素数として表されるポイントを掛けます。

77
00:03:37,520 --> 00:03:40,361
この計算を実行するために知っておく必要がある唯一のルー

78
00:03:40,361 --> 00:03:43,000
ルは、i2 がマイナス 1 に等しいということです。

79
00:03:43,000 --> 00:03:46,130
次に、初めて学習する人にとってはちょっとした黒魔術のよ

80
00:03:46,130 --> 00:03:48,448
うに感じるかもし れませんが、その 1

81
00:03:48,448 --> 00:03:51,346
つの単純なルールに基づいてこの積を実行すると、新

82
00:03:51,346 --> 00:03:54,592
しい点の座標が得られます。 その点は、元の点から 30

83
00:03:54,592 --> 00:03:55,520
度回転しました。

84
00:03:55,520 --> 00:03:58,473
クォータニオンを使用して 3D 回転を記述すること

85
00:03:58,473 --> 00:04:01,200
は似ていますが、見た目と操作性は若干異なります。

86
00:04:01,200 --> 00:04:04,720
ある軸を中心にある角度を回転させたいとします。

87
00:04:04,720 --> 00:04:07,400
まず、単位ベクトルを使用してその軸を定義します。

88
00:04:07,400 --> 00:04:10,191
単位ベクトルは、i、j、k のコンポーネントを

89
00:04:10,191 --> 00:04:12,871
持ち、これらのコンポーネントの二乗の合計が 1

90
00:04:12,871 --> 00:04:15,440
になるように正規化されたものとして記述します。

91
00:04:15,440 --> 00:04:19,655
複素数の場合と同様に、角度を使用して、その角度の余弦を

92
00:04:19,655 --> 00:04:23,720
実数部とし、その角度の正弦と虚数部を掛けたものを取得

93
00:04:23,720 --> 00:04:27,634
して四元数を構築します。 ただし、今回の虚数部には

94
00:04:27,634 --> 00:04:32,000
3 つの成分、つまり次の座標があります。 私たちの回転軸。

95
00:04:32,000 --> 00:04:34,551
そうですね、実際には角度の半分を取るので、完全に

96
00:04:34,551 --> 00:04:37,102
任意に感じるかもしれませ んが、この体験全体が終

97
00:04:37,102 --> 00:04:39,760
わる頃にはそれが意味をなすことができれば幸いです。

98
00:04:39,760 --> 00:04:44,026
i、j、k コンポーネントで記述する 3D 点があ

99
00:04:44,026 --> 00:04:48,457
るとします。 この点を指定した軸の周りに指定した角度

100
00:04:48,457 --> 00:04:52,560
だけ回転したときに得られる座標を知りたいとします。

101
00:04:52,560 --> 00:04:55,881
ここで行うことは、単一の四元数積ではなく、

102
00:04:55,881 --> 00:04:59,202
一種の四元数サンドイッ チであり、左から

103
00:04:59,202 --> 00:05:02,840
q を乗算し、右から q の逆数を乗算します。

104
00:05:02,840 --> 00:05:05,438
i、j、k がどのように乗算されるかについての規則

105
00:05:05,438 --> 00:05:08,036
を知っている場合は 、すべてを拡張することによって

106
00:05:08,036 --> 00:05:10,010
、またはより現実的にはコンピューター

107
00:05:10,010 --> 00:05:12,296
にそれを実行させることによって、これら 2

108
00:05:12,296 --> 00:05:13,440
つの積を実行できます。

109
00:05:13,440 --> 00:05:15,997
そして、ちょっとした黒魔術のように感じる

110
00:05:15,997 --> 00:05:18,554
かもしれませんが、こ の大規模な計算によ

111
00:05:18,554 --> 00:05:21,240
り、ポイントの回転バージョンが返されます。

112
00:05:21,240 --> 00:05:23,726
私たちの目標は、これを分析し、これら 2 つの製品の

113
00:05:23,726 --> 00:05:26,120
それぞれで何が起こっているのかを視覚化することです。

114
00:05:26,120 --> 00:05:29,455
前回のビデオで説明したクォータニオンの乗算の

115
00:05:29,455 --> 00:05:32,790
考え方を復習し、なぜ半分の角度を使用するのか

116
00:05:32,790 --> 00:05:35,980
、なぜ右から逆数を乗算するのかを説明します。

117
00:05:35,980 --> 00:05:39,644
現在、画面の説明の上部に、eater へのリンクがあります。

118
00:05:39,644 --> 00:05:41,394
ne t スラッシュ クォータニオン。

119
00:05:41,394 --> 00:05:43,882
Ben が探索可能なビデオ チュートリアルをセット

120
00:05:43,882 --> 00:05:46,554
アップした場所です。 そこで私は、この回転計算で何が起こっ

121
00:05:46,554 --> 00:05:47,660
ているのかを説明します。

122
00:05:47,660 --> 00:05:49,240
本当にクールです。

123
00:05:49,240 --> 00:05:50,500
イーターはここで素晴らしいことをしました。

124
00:05:50,500 --> 00:05:52,535
したがって、少なくとも数分だけ見ていただければ幸 いです。

125
00:05:52,535 --> 00:05:53,940
すべてを体験していただければ幸いです。

