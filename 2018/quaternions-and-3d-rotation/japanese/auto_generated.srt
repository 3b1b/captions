1
00:00:02,959 --> 00:00:05,855
すぐに、探索可能なビデオと呼ばれるものの短いシーケ 

2
00:00:05,855 --> 00:00:08,640
ンスをホストする別の Web サイトを紹介します。

3
00:00:09,220 --> 00:00:12,192
これは、優れたコンピューター エンジニアリング チャンネ 

4
00:00:12,192 --> 00:00:14,960
ルを運営するベン イーターとの共同作業で行われました。

5
00:00:15,480 --> 00:00:17,260
彼が誰であるかを知らなくても、このチャンネル

6
00:00:17,260 --> 00:00:19,040
の視聴者は間違いなく彼 のコンテンツを楽しむ

7
00:00:19,040 --> 00:00:20,820
ことができるので、ぜひチェックしてください。

8
00:00:21,300 --> 00:00:23,923
ただし、このコラボレーションは私たち二人にとって少

9
00:00:23,923 --> 00:00:26,546
し違ったものでした。 これら の探索可能なビデオを

10
00:00:26,546 --> 00:00:29,380
可能にしたウェブ開発はすべて、完全にベンのおかげです。

11
00:00:29,860 --> 00:00:32,598
ここではそれについてあまり言いたくありませんが、これは 

12
00:00:32,598 --> 00:00:35,337
実際に自分で体験する必要があり、間違いなく私が喜んで取 

13
00:00:35,337 --> 00:00:37,880
り組んできた最もクールなプロジェクトの 1 つです。

14
00:00:38,300 --> 00:00:42,012
その前に、興奮を抑えられるのであれば、このビデオを周囲 

15
00:00:42,012 --> 00:00:45,460
の状況を少し理解する機会として使用したいと思います。

16
00:00:46,900 --> 00:00:49,817
それで、準備を整えるために、前回のビデオでクォータニオン

17
00:00:49,817 --> 00:00:52,318
について説明しました。 クォータニオンは、19 

18
00:00:52,318 --> 00:00:54,924
世紀版のウルヴァリンやホーム アローンの老人が当 

19
00:00:54,924 --> 00:00:57,842
時あまりに複雑に見えたため悪と呼ばれていた、特定の 4 

20
00:00:57,842 --> 00:00:58,780
次元の数体系です。

21
00:00:59,060 --> 00:01:00,763
そして、おそらくあなたも、いったいなぜ誰もがそ

22
00:01:00,763 --> 00:01:02,467
のようなエイリアンのよう に見える番号体系にわ

23
00:01:02,467 --> 00:01:04,319
ざわざこだわるのか疑問に思っているかもしれません。

24
00:01:05,200 --> 00:01:07,735
特にプログラマにとっての大きな理由の 1 

25
00:01:07,735 --> 00:01:10,270
つは、他のメソッドのバグやエッジ ケース 

26
00:01:10,270 --> 00:01:13,529
の影響を受けにくい 3D 方向を記述するための非常に優

27
00:01:13,529 --> 00:01:15,220
れた方法を提供することです。

28
00:01:15,820 --> 00:01:18,393
つまり、それらは多くの理由で数学的に興味深いものですが

29
00:01:18,393 --> 00:01:20,967
、コンピューター グ ラフィックス、ロボット工学、仮想

30
00:01:20,967 --> 00:01:22,968
現実、および 3D 方向に関連するものに 

31
00:01:22,968 --> 00:01:25,542
対するこのアプリケーションは、おそらくクォータニオンの

32
00:01:25,542 --> 00:01:26,400
最大の使用例です。

33
00:01:26,400 --> 00:01:28,268
一例を挙げると、以前 Apple 

34
00:01:28,268 --> 00:01:31,346
で働いていた私の友人、Andy Matus zczak 

35
00:01:31,346 --> 00:01:34,423
は、空間内での携帯電話の向きを追跡するためにクォータニオ

36
00:01:34,423 --> 00:01:37,501
ンを使用 するコードを数億台のデバイスに出荷することにつ

37
00:01:37,501 --> 00:01:39,040
いて喜んで話してくれました。

38
00:01:39,660 --> 00:01:42,546
そうです、あなたの携帯電話の内部のどこかで、四元数に依存す 

39
00:01:42,546 --> 00:01:45,240
るソフトウェアが実行されているのはほぼ間違いありません。

40
00:01:46,340 --> 00:01:48,499
問題は、回転の計算については他にも考え方が

41
00:01:48,499 --> 00:01:50,658
あり、その多くはクォー タニオンよりもはる

42
00:01:50,658 --> 00:01:52,920
かに簡単に考えることができるということです。

43
00:01:53,250 --> 00:01:57,083
たとえば、線形代数に詳しい人なら、3x3 行列が 3D 

44
00:01:57,083 --> 00:02:00,780
変換を非常にうまく記述できることを知っているでしょう。

45
00:02:01,340 --> 00:02:04,908
そして、多くのプログラマーが目的の向きの回転行列を構築す

46
00:02:04,908 --> 00:02:07,839
る際に考える一般的 な方法は、考えやすい 3 

47
00:02:07,839 --> 00:02:11,024
つの軸の周りでオブジェクトを回転させることを想像 

48
00:02:11,024 --> 00:02:14,593
することです。 これらの回転に関連する角度は一般にオイラ

49
00:02:14,593 --> 00:02:15,740
ー角と呼ばれます。

50
00:02:16,580 --> 00:02:18,776
これはほとんど機能しますが、大きな問題の 

51
00:02:18,776 --> 00:02:21,078
1 つは、ジンバル ロックと呼ばれるものに対

52
00:02:21,078 --> 00:02:22,961
して脆弱であることです。 ジンバル 

53
00:02:22,961 --> 00:02:26,100
ロックとは、2 つの回転軸が並ぶと自由度が失われることです。

54
00:02:26,700 --> 00:02:29,579
また、2 つの異なる方向の間を補間しようとする 

55
00:02:29,579 --> 00:02:32,340
ときに、困難や曖昧さが生じる可能性もあります。

56
00:02:32,940 --> 00:02:35,428
さらに詳しく知りたい場合は、オイラー角とジンバル ロック 

57
00:02:35,428 --> 00:02:37,917
について学ぶための優れた情報源がオンラインにたくさんあり 

58
00:02:37,917 --> 00:02:40,320
ます。 そのうちのいくつかへのリンクを説明に残しました。

59
00:02:41,040 --> 00:02:44,304
クォータニオンはジンバル ロックのような問題を回避す

60
00:02:44,304 --> 00:02:47,569
るだけでなく、 2 つの 3 次元方向の間で補間する

61
00:02:47,569 --> 00:02:49,955
非常にシームレスな方法を提供 します。

62
00:02:49,955 --> 00:02:53,721
 これにより、オイラー角の曖昧さがなくなり、補間時に発生す 

63
00:02:53,721 --> 00:02:56,233
る数値精度と正規化の問題が回避されます。

64
00:02:56,233 --> 00:02:57,740
 2 つの回転行列の間。

65
00:02:58,780 --> 00:03:01,738
回転を計算するために高次元の数体系の乗算がどのよ

66
00:03:01,738 --> 00:03:05,436
うに使用されるか というアイデアを理解するために、複素数が 

67
00:03:05,436 --> 00:03:08,394
2D 回転を計算するた めの巧妙な方法をどのよう

68
00:03:08,394 --> 00:03:10,860
に提供するのかを少し思い出してください。

69
00:03:11,540 --> 00:03:14,893
具体的には、4,1 のような 2 次元空間に点 

70
00:03:14,893 --> 00:03:18,246
があり、この点を原点の周りに 30 度回転した 

71
00:03:18,246 --> 00:03:21,320
場合に得られる新しい座標を知りたいとします。

72
00:03:22,240 --> 00:03:23,396
複素数を使用すると、これを行うため

73
00:03:23,396 --> 00:03:24,620
の一種の気の利いた方法が得られます。

74
00:03:25,080 --> 00:03:29,172
水平から 30 度離れたマグニチュード 1 の複素数、 

75
00:03:29,172 --> 00:03:33,119
cos 30 度 + sin 30 度 x i を取 

76
00:03:33,119 --> 00:03:36,920
得し、これに複素数として表されるポイントを掛けます。

77
00:03:37,500 --> 00:03:39,895
この計算を実行するために知っておく必要がある唯一のルー 

78
00:03:39,895 --> 00:03:42,120
ルは、i2 がマイナス 1 に等しいということです。

79
00:03:42,120 --> 00:03:45,050
次に、初めて学習する人にとってはちょっとした黒魔術のよ

80
00:03:45,050 --> 00:03:47,220
うに感じるかもし れませんが、その 1 

81
00:03:47,220 --> 00:03:49,933
つの単純なルールに基づいてこの積を実行すると、新 

82
00:03:49,933 --> 00:03:52,971
しい点の座標が得られます。 その点は、元の点から 30 

83
00:03:52,971 --> 00:03:53,840
度回転しました。

84
00:03:55,340 --> 00:03:58,023
クォータニオンを使用して 3D 回転を記述すること 

85
00:03:58,023 --> 00:04:00,500
は似ていますが、見た目と操作性は若干異なります。

86
00:04:01,100 --> 00:04:03,980
ある軸を中心にある角度を回転させたいとします。

87
00:04:04,700 --> 00:04:07,089
まず、単位ベクトルを使用してその軸を定義します。

88
00:04:07,089 --> 00:04:09,579
 単位ベクトルは、i、j、k のコンポーネントを 

89
00:04:09,579 --> 00:04:11,969
持ち、これらのコンポーネントの二乗の合計が 1 

90
00:04:11,969 --> 00:04:14,260
になるように正規化されたものとして記述します。

91
00:04:15,160 --> 00:04:19,344
複素数の場合と同様に、角度を使用して、その角度の余弦を 

92
00:04:19,344 --> 00:04:23,380
実数部とし、その角度の正弦と虚数部を掛けたものを取得 

93
00:04:23,380 --> 00:04:27,265
して四元数を構築します。 ただし、今回の虚数部には 

94
00:04:27,265 --> 00:04:31,600
3 つの成分、つまり次の座標があります。 私たちの回転軸。

95
00:04:32,520 --> 00:04:34,887
そうですね、実際には角度の半分を取るので、完全に

96
00:04:34,887 --> 00:04:37,254
任意に感じるかもしれませ んが、この体験全体が終

97
00:04:37,254 --> 00:04:39,720
わる頃にはそれが意味をなすことができれば幸いです。

98
00:04:40,540 --> 00:04:44,206
i、j、k コンポーネントで記述する 3D 点があ 

99
00:04:44,206 --> 00:04:48,014
るとします。 この点を指定した軸の周りに指定した角度 

100
00:04:48,014 --> 00:04:51,540
だけ回転したときに得られる座標を知りたいとします。

101
00:04:52,360 --> 00:04:55,455
ここで行うことは、単一の四元数積ではなく、

102
00:04:55,455 --> 00:04:58,550
一種の四元数サンドイッ チであり、左から 

103
00:04:58,550 --> 00:05:01,940
q を乗算し、右から q の逆数を乗算します。

104
00:05:02,640 --> 00:05:05,071
i、j、k がどのように乗算されるかについての規則

105
00:05:05,071 --> 00:05:07,502
を知っている場合は 、すべてを拡張することによって

106
00:05:07,502 --> 00:05:09,350
、またはより現実的にはコンピューター 

107
00:05:09,350 --> 00:05:11,490
にそれを実行させることによって、これら 2 

108
00:05:11,490 --> 00:05:12,560
つの積を実行できます。

109
00:05:13,100 --> 00:05:15,493
そして、ちょっとした黒魔術のように感じる

110
00:05:15,493 --> 00:05:17,886
かもしれませんが、こ の大規模な計算によ

111
00:05:17,886 --> 00:05:20,400
り、ポイントの回転バージョンが返されます。

112
00:05:21,160 --> 00:05:23,503
私たちの目標は、これを分析し、これら 2 つの製品の 

113
00:05:23,503 --> 00:05:25,760
それぞれで何が起こっているのかを視覚化することです。

114
00:05:26,340 --> 00:05:29,323
前回のビデオで説明したクォータニオンの乗算の 

115
00:05:29,323 --> 00:05:32,306
考え方を復習し、なぜ半分の角度を使用するのか 

116
00:05:32,306 --> 00:05:35,160
、なぜ右から逆数を乗算するのかを説明します。

117
00:05:35,940 --> 00:05:39,340
現在、画面の説明の上部に、eater へのリンクがあります。

118
00:05:39,340 --> 00:05:40,977
ne t スラッシュ クォータニオン。

119
00:05:40,977 --> 00:05:43,305
 Ben が探索可能なビデオ チュートリアルをセット 

120
00:05:43,305 --> 00:05:45,805
アップした場所です。 そこで私は、この回転計算で何が起こっ

121
00:05:45,805 --> 00:05:46,840
ているのかを説明します。

122
00:05:47,640 --> 00:05:49,000
本当にクールです。

123
00:05:49,220 --> 00:05:50,340
イーターはここで素晴らしいことをしました。

124
00:05:50,540 --> 00:05:52,942
したがって、少なくとも数分だけ見ていただければ幸 いです。

125
00:05:52,942 --> 00:05:54,600
 すべてを体験していただければ幸いです。

