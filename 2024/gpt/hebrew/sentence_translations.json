[
 {
  "input": "The initials GPT stand for Generative Pretrained Transformer.",
  "translatedText": "ראשי התיבות GPT מייצגים באנגלית טרנספורמר מאומן מראש בעל יכולת יצירה.",
  "model": "google_nmt",
  "n_reviews": 2,
  "start": 0,
  "end": 4.56
 },
 {
  "input": "So that first word is straightforward enough, these are bots that generate new text.",
  "translatedText": "\"בעל יכולת יצירה\" מסביר שאלו הם בוטים שמייצרים טקסט חדש.",
  "model": "google_nmt",
  "n_reviews": 2,
  "start": 5.22,
  "end": 9.02
 },
 {
  "input": "Pretrained refers to how the model went through a process of learning from a massive amount of data, and the prefix insinuates that there's more room to fine-tune it on specific tasks with additional training.",
  "translatedText": "\"מאומן מראש\" מתייחס לאופן שבו המודל עבר תהליך של למידה מכמות עצומה של נתונים, ומרמז שיש עוד מקום לכוונן אותו במשימות ספציפיות עם הכשרה נוספת.",
  "model": "google_nmt",
  "n_reviews": 2,
  "start": 9.8,
  "end": 20.04
 },
 {
  "input": "But the last word, that's the real key piece.",
  "translatedText": "אבל טרנספורמר היא מילת המפתח האמיתית.",
  "model": "google_nmt",
  "n_reviews": 2,
  "start": 20.72,
  "end": 22.9
 },
 {
  "input": "A transformer is a specific kind of neural network, a machine learning model, and it's the core invention underlying the current boom in AI.",
  "translatedText": "טרנספורמר הוא סוג מסוים של רשת עצבית, מודל למידת מכונה, וזו ההמצאה המרכזית העומדת בבסיס הבום הנוכחי ב-AI.",
  "model": "google_nmt",
  "n_reviews": 2,
  "start": 23.38,
  "end": 31
 },
 {
  "input": "What I want to do with this video and the following chapters is go through a visually-driven explanation for what actually happens inside a transformer.",
  "translatedText": "מה שאני רוצה לעשות עם הסרטון הזה והפרקים הבאים הוא לעבור על הסבר ויזואלי למה שקורה בפועל בתוך טרנספורמר.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 31.74,
  "end": 39.12
 },
 {
  "input": "We're going to follow the data that flows through it and go step by step.",
  "translatedText": "אנחנו הולכים לעקוב צעד צעד אחר הנתונים שעוברים בו.",
  "model": "google_nmt",
  "n_reviews": 2,
  "start": 39.7,
  "end": 42.82
 },
 {
  "input": "There are many different kinds of models that you can build using transformers.",
  "translatedText": "ישנם סוגים רבים ושונים של מודלים שניתן לבנות באמצעות טרנספורמרים.",
  "model": "google_nmt",
  "n_reviews": 2,
  "start": 43.44,
  "end": 47.38
 },
 {
  "input": "Some models take in audio and produce a transcript.",
  "translatedText": "מודלים מסוימים קולטים אודיו ומפיקים תמליל.",
  "model": "google_nmt",
  "n_reviews": 2,
  "start": 47.8,
  "end": 50.8
 },
 {
  "input": "This sentence comes from a model going the other way around, producing synthetic speech just from text.",
  "translatedText": "המשפט הזה מגיע ממודל שפועל הפוך, ומייצר דיבור סינתטי רק מטקסט.",
  "model": "google_nmt",
  "n_reviews": 2,
  "start": 51.34,
  "end": 56.22
 },
 {
  "input": "All those tools that took the world by storm in 2022 like Dolly and Midjourney that take in a text description and produce an image are based on transformers.",
  "translatedText": "כל הכלים האלה שכבשו את העולם בסערה בשנת 2022 כמו Dolly ו-Midjourney שמקבלים תיאור בטקסט ומייצרים תמונה מבוססים על טרנספורמרים.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 56.66,
  "end": 65.52
 },
 {
  "input": "Even if I can't quite get it to understand what a pie creature is supposed to be, I'm still blown away that this kind of thing is even remotely possible.",
  "translatedText": "גם אם אני לא ממש מצליח לגרום לו להבין מה אמור להיות חייית פאי, אני עדיין המום מכך שדבר כזה אפשרי אפילו קצת.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 66,
  "end": 73.1
 },
 {
  "input": "And the original transformer introduced in 2017 by Google was invented for the specific use case of translating text from one language into another.",
  "translatedText": "והטרנספורמר המקורי שהוצג ב-2017 על ידי גוגל הומצא לשימוש הספציפי של תרגום טקסט משפה אחת לשפה אחרת.",
  "model": "google_nmt",
  "n_reviews": 2,
  "start": 73.9,
  "end": 82.1
 },
 {
  "input": "But the variant that you and I will focus on, which is the type that underlies tools like ChatGPT, will be a model that's trained to take in a piece of text, maybe even with some surrounding images or sound accompanying it, and produce a prediction for what comes next in the passage.",
  "translatedText": "אבל הגרסה שבה אתם ואני נתמקד, שהוא הסוג שעומד בבסיס כלים כמו ChatGPT, יהיה מודל שמאומן לקלוט קטע טקסט, אולי אפילו עם כמה תמונות מסביב או קול שמלווים אותו, ולחזות מה יבוא אחר כך.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 82.66,
  "end": 98.26
 },
 {
  "input": "That prediction takes the form of a probability distribution over many different chunks of text that might follow.",
  "translatedText": "התחזית הזו היא בצורה של התפלגות הסתברותית על פני חלקי טקסט רבים ושונים שעשויים להופיע.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 98.6,
  "end": 103.8
 },
 {
  "input": "At first glance, you might think that predicting the next word feels like a very different goal from generating new text.",
  "translatedText": "במבט ראשון, אולי תחשבו שחיזוי המילה הבאה נראה כמו מטרה שונה מאוד מיצירת טקסט חדש.",
  "model": "google_nmt",
  "n_reviews": 2,
  "start": 105.04,
  "end": 109.94
 },
 {
  "input": "But once you have a prediction model like this, a simple thing you generate a longer piece of text is to give it an initial snippet to work with, have it take a random sample from the distribution it just generated, append that sample to the text, and then run the whole process again to make a new prediction based on all the new text, including what it just added.",
  "translatedText": "אבל ברגע שיש לכם מודל חיזוי כזה, דבר פשוט שאתם יכולים לנסות זה לגרום לו לייצר קטע טקסט ארוך יותר. זאת על ידי  בקשה ממנו לקחת דגימה אקראית מההתפלגות שיצר לגבי קטע הטקסט הראשוני ולצרף אותה לטקסט. לאחר מכן להפעיל שוב את כל התהליך כדי לבצע חיזוי חדש המבוסס על הטקסט שכולל את מה שהוסיף.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 110.18,
  "end": 129.54
 },
 {
  "input": "I don't know about you, but it really doesn't feel like this should actually work.",
  "translatedText": "אני לא יודע מה איתכם, אבל זה ממש לא מרגיש שזה אמור לעבוד.",
  "model": "google_nmt",
  "n_reviews": 2,
  "start": 130.1,
  "end": 133
 },
 {
  "input": "In this animation, for example, I'm running GPT-2 on my laptop and having it repeatedly predict and sample the next chunk of text to generate a story based on the seed text.",
  "translatedText": "באנימציה הזו, למשל, אני מריץ את GPT-2 במחשב הנייד שלי וגורם לו לנבא שוב ושוב את קטע הטקסט הבא כדי ליצור סיפור המבוסס על טקסט המקור.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 133.42,
  "end": 142.42
 },
 {
  "input": "The story just doesn't really make that much sense.",
  "translatedText": "הסיפור פשוט לא ממש הגיוני.",
  "model": "google_nmt",
  "n_reviews": 2,
  "start": 142.42,
  "end": 146.12
 },
 {
  "input": "But if I swap it out for API calls to GPT-3 instead, which is the same basic model, just much bigger, suddenly almost magically we do get a sensible story, one that even seems to infer that a pi creature would live in a land of math and computation.",
  "translatedText": "אבל אם אני מחליף ל-GPT-3, שבאופן בסיסי הוא אותו מודל, רק הרבה יותר גדול, פתאום כמעט באופן קסום אנחנו מקבלים סיפור הגיוני, כזה שאפילו נראה שמשתמע ממנו שיצור פאי חי וקיים בארץ המתמטיקה והחישובים.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 146.5,
  "end": 160.88
 },
 {
  "input": "This process here of repeated prediction and sampling is essentially what's happening when you interact with ChatGPT or any of these other large language models and you see them producing one word at a time.",
  "translatedText": "התהליך כאן של חיזוי ודגימה חוזרים ונשנים הוא בעצם מה שקורה כשאתם מקיימים אינטראקציה עם ChatGPT או עם כל אחד ממודלי השפה הגדולים האלה ושאתם רואים אותם מפיקים מילה אחת בכל פעם.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 161.58,
  "end": 171.88
 },
 {
  "input": "In fact, one feature that I would very much enjoy is the ability to see the underlying distribution for each new word that it chooses.",
  "translatedText": "למעשה, תכונה אחת שהייתי מאוד נהנה ממנה היא היכולת לראות את ההתפלגות הבסיסית לכל מילה חדשה שהיא בוחרת.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 172.48,
  "end": 179.22
 },
 {
  "input": "Let's kick things off with a very high level preview of how data flows through a transformer.",
  "translatedText": "בואו נתחיל עם תצוגה מקדימה ברמה גבוהה מאוד של האופן שבו הנתונים זורמים דרך טרנספורמר.",
  "model": "google_nmt",
  "n_reviews": 2,
  "start": 183.82,
  "end": 188.18
 },
 {
  "input": "We will spend much more time motivating and interpreting and expanding on the details of each step, but in broad strokes, when one of these chatbots generates a given word, here's what's going on under the hood.",
  "translatedText": "נקדיש בהמשך הרבה יותר זמן לפרש ולהרחיב את הפרטים של כל שלב, אבל באופן כללי, כאשר אחד מהצ'אטבוטים הללו מייצר מילה נתונה, הנה מה שקורה בקרביים של המודל.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 188.64,
  "end": 198.66
 },
 {
  "input": "First, the input is broken up into a bunch of little pieces.",
  "translatedText": "ראשית, הקלט מפורק לחתיכות קטנות.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 199.08,
  "end": 202.04
 },
 {
  "input": "These pieces are called tokens, and in the case of text these tend to be words or little pieces of words or other common character combinations.",
  "translatedText": "חלקים אלה נקראים טוקנים, ובמקרה של טקסט הם מילים או חלקי מילים או צירופי תווים נפוצים אחרים.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 202.62,
  "end": 209.82
 },
 {
  "input": "If images or sound are involved, then tokens could be little patches of that image or little chunks of that sound.",
  "translatedText": "אם מדובר בתמונה או בצליל, אז טוקנים יכולים להיות חלקים קטנים של התמונה או של הצליל.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 210.74,
  "end": 217.08
 },
 {
  "input": "Each one of these tokens is then associated with a vector, meaning some list of numbers, which is meant to somehow encode the meaning of that piece.",
  "translatedText": "כל אחד מהטוקנים הללו משויך אז לווקטור, כלומר רשימה כלשהי של מספרים, שנועדה לקודד איכשהו את המשמעות של אותו חלק.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 217.58,
  "end": 225.36
 },
 {
  "input": "If you think of these vectors as giving coordinates in some very high dimensional space, words with similar meanings tend to land on vectors that are close to each other in that space.",
  "translatedText": "אם אתם חושבים על הוקטורים האלה כקואורדינטות במרחב עם מימד מאוד גבוה, מילים בעלות משמעויות דומות נוטות להיות משוייכות לוקטורים שקרובים זה לזה במרחב הזה.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 225.88,
  "end": 234.68
 },
 {
  "input": "This sequence of vectors then passes through an operation that's known as an attention block, and this allows the vectors to talk to each other and pass information back and forth to update their values.",
  "translatedText": "רצף זה של וקטורים עובר לאחר מכן דרך פעולה המכונה בלוק מיקוד (attention block) שמאפשר לוקטורים להעביר מידע ביניהם כדי לעדכן את הערכים שלהם.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 235.28,
  "end": 244.5
 },
 {
  "input": "For example, the meaning of the word model in the phrase a machine learning model is different from its meaning in the phrase a fashion model.",
  "translatedText": "לדוגמה, המשמעות של המילה מודל בביטוי מודל למידת מכונה שונה ממשמעותה בביטוי מודל אופנה.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 244.88,
  "end": 251.8
 },
 {
  "input": "The attention block is what's responsible for figuring out which words in context are relevant to updating the meanings of which other words, and how exactly those meanings should be updated.",
  "translatedText": "בלוק המיקוד הוא האחראי לגלות אילו מילים בהקשר רלוונטיות לעדכון המשמעויות של אילו מילים אחרות, וכיצד בדיוק יש לעדכן את המשמעויות הללו.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 252.26,
  "end": 261.96
 },
 {
  "input": "And again, whenever I use the word meaning, this is somehow entirely encoded in the entries of those vectors.",
  "translatedText": "ושוב, בכל פעם שאני משתמש במילה משמעות, היא איכשהו מקודדת באופן מלא בערכים של אותם וקטורים.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 262.5,
  "end": 268.04
 },
 {
  "input": "After that, these vectors pass through a different kind of operation, and depending on the source that you're reading this will be referred to as a multi-layer perceptron or maybe a feed-forward layer.",
  "translatedText": "לאחר מכן, הוקטורים הללו עוברים סוג אחר של פעולה, ובהתאם למקור שאתם קוראים היא תיקרא פרספטרון רב שכבתי או אולי שכבת זרימה קדימה (feed-forward).",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 269.18,
  "end": 278.2
 },
 {
  "input": "And here the vectors don't talk to each other, they all go through the same operation in parallel.",
  "translatedText": "וכאן הוקטורים לא מתקשרים ביניהם, כולם עוברים את אותה פעולה במקביל.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 278.58,
  "end": 282.66
 },
 {
  "input": "And while this block is a little bit harder to interpret, later on we'll talk about how the step is a little bit like asking a long list of questions about each vector, and then updating them based on the answers to those questions.",
  "translatedText": "ולמרות שהבלוק הזה קצת יותר קשה לפרוש, בהמשך נדבר על איך שלב זה הוא קצת כמו לשאול רשימה ארוכה של שאלות על כל וקטור, ואז לעדכן אותן על סמך התשובות לשאלות האלה.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 283.06,
  "end": 294
 },
 {
  "input": "All of the operations in both of these blocks look like a giant pile of matrix multiplications, and our primary job is going to be to understand how to read the underlying matrices.",
  "translatedText": "כל הפעולות בשני הבלוקים הללו נראות כמו ערימה ענקית של כפל מטריצות, והתפקיד העיקרי שלנו הולך להיות איך להבין ולקרוא את המטריצות הבסיסיות.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 294.9,
  "end": 305.32
 },
 {
  "input": "I'm glossing over some details about some normalization steps that happen in between, but this is after all a high-level preview.",
  "translatedText": "אני פוסח כמה פרטים לגבי כמה שלבי נורמליזציה שקורים ביניהם, אבל אחרי הכל זו הצגה מקדימה כללית.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 306.98,
  "end": 312.98
 },
 {
  "input": "After that, the process essentially repeats, you go back and forth between attention blocks and multi-layer perceptron blocks, until at the very end the hope is that all of the essential meaning of the passage has somehow been baked into the very last vector in the sequence.",
  "translatedText": "לאחר מכן, התהליך בעצם חוזר על עצמו, אתם עוברים הלוך ושוב בין בלוקי מיקוד ובין בלוקים של פרספטונים רב-שכבתיים, עד שבסופו של דבר התקווה היא שכל המשמעות המהותית של הקטע נמצאת איכשהו בתוך הווקטור האחרון ברצף.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 313.68,
  "end": 328.5
 },
 {
  "input": "We then perform a certain operation on that last vector that produces a probability distribution over all possible tokens, all possible little chunks of text that might come next.",
  "translatedText": "לאחר מכן אנחנו מבצעים פעולה מסויימת על אותו וקטור אחרון שמייצרת התפלגות הסתברותית לכל הטוקנים האפשריים, כל חלקי הטקסט הקטנים שעשויים לבוא אחר כך.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 328.92,
  "end": 338.42
 },
 {
  "input": "And like I said, once you have a tool that predicts what comes next given a snippet of text, you can feed it a little bit of seed text and have it repeatedly play this game of predicting what comes next, sampling from the distribution, appending it, and then repeating over and over.",
  "translatedText": "וכמו שאמרתי, ברגע שיש לכם כלי שמנבא את מה שבא לאחר קטע טקסט נתון, אתם יכולים להזין אותו בקטע טקסט ראשוני ולגרום לו לנבא שוב ושוב מה יבוא אחר כך: דגימה מההתפלגות, הוספתו לטקסט, וחוזר חלילה.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 338.98,
  "end": 353.08
 },
 {
  "input": "Some of you in the know may remember how long before ChatGPT came into the scene, this is what early demos of GPT-3 looked like, you would have it autocomplete stories and essays based on an initial snippet.",
  "translatedText": "כמה מכם אולי זוכרים שכמה זמן לפני ש-ChatGPT נכנס לתמונה, כך נראו הדגמות מוקדמות של GPT-3. גרמתם לו להשלים סיפורים ומאמרים על סמך קטע ראשוני.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 353.64,
  "end": 364.64
 },
 {
  "input": "To make a tool like this into a chatbot, the easiest starting point is to have a little bit of text that establishes the setting of a user interacting with a helpful AI assistant, what you would call the system prompt, and then you would use the user's initial question or prompt as the first bit of dialogue, and then you have it start predicting what such a helpful AI assistant would say in response.",
  "translatedText": "כדי להפוך כלי כזה לצ'אטבוט, נקודת ההתחלה הקלה ביותר היא לקבל מעט טקסט שיקבע את ההגדרה של משתמש המקיים אינטראקציה עם הכלי, מה שנקרא הנחיית המערכת, ואז תשתמשו בשאלה או ההנחיה הראשונית של המשתמש בתור החלק הראשון בדיאלוג, ואז אתם צריכים להתחיל לחזות מה כלי בינה מלאכותית יעיל יענה בתגובה.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 365.58,
  "end": 386.94
 },
 {
  "input": "There is more to say about an added step of training that's required to make this work well, but at a high level this is the idea.",
  "translatedText": "יש עוד מה לומר על שלב נוסף של האימון שנדרש כדי לגרום לזה לעבוד היטב, אבל זה הרעיון באופן כללי.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 387.72,
  "end": 393.94
 },
 {
  "input": "In this chapter, you and I are going to expand on the details of what happens at the very beginning of the network, at the very end of the network, and I also want to spend a lot of time reviewing some important bits of background knowledge, things that would have been second nature to any machine learning engineer by the time transformers came around.",
  "translatedText": "בפרק זה, אתם ואני הולכים להרחיב את הפרטים של מה שקורה ממש בתחילת הרשת, ממש בסוף הרשת, ואני גם רוצה להקדיש זמן רב לסקור כמה פיסות ידע רקע חשובות, דברים שהיו טבע שני לכל מהנדס למידת מכונה עד שהגיעו טרנספורמרים.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 395.72,
  "end": 412.6
 },
 {
  "input": "If you're comfortable with that background knowledge and a little impatient, you could feel free to skip to the next chapter, which is going to focus on the attention blocks, generally considered the heart of the transformer.",
  "translatedText": "אם אתם מרגישים נוח עם ידע הרקע הזה, אתם יכולים להרגיש חופשי לדלג לפרק הבא, שעומד להתמקד בבלוקי מיקוד, הנחשבים בדרך כלל ללב של הטרנספורמר.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 413.06,
  "end": 422.78
 },
 {
  "input": "After that I want to talk more about these multi-layer perceptron blocks, how training works, and a number of other details that will have been skipped up to that point.",
  "translatedText": "לאחר מכן אני רוצה לדבר יותר על בלוקי הפרספטרון הרב-שכבתיים הללו, כיצד האימון עובד, ועוד מספר פרטים שדילגתי עליהם עד לנקודה זו.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 423.36,
  "end": 431.68
 },
 {
  "input": "For broader context, these videos are additions to a mini-series about deep learning, and it's okay if you haven't watched the previous ones, I think you can do it out of order, but before diving into transformers specifically, I do think it's worth making sure that we're on the same page about the basic premise and structure of deep learning.",
  "translatedText": "בהקשר רחב יותר, הסרטונים האלה הם תוספות למיני-סדרה על למידה עמוקה, וזה בסדר אם לא צפיתם בקודמים, אבל לפני שאני צולל לעומק לטרנספורמרים, אני כן חושב שכדאי לוודא שיש לנו הבנה משותפת לגבי הנחות היסוד והמבנה של למידה עמוקה.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 432.18,
  "end": 448.52
 },
 {
  "input": "At the risk of stating the obvious, this is one approach to machine learning, which describes any model where you're using data to somehow determine how a model behaves.",
  "translatedText": "בסיכון של הצהרת הברור מאליו, זוהי גישה אחת ללמידת מכונה, שמתארת מודל כלשהו שבו אתם משתמש בנתונים כדי לקבוע איכשהו כיצד המודל מתנהג.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 449.02,
  "end": 458.3
 },
 {
  "input": "What I mean by that is, let's say you want a function that takes in an image and it produces a label describing it, or our example of predicting the next word given a passage of text, or any other task that seems to require some element of intuition and pattern recognition.",
  "translatedText": "מה שאני מתכוון בזה הוא, נניח שאתם רוצים פונקציה שמקבלת תמונה ושמייצרת תווית המתארת אותה, או הדוגמה שלנו לחיזוי המילה הבאה בהינתן קטע טקסט, או כל משימה אחרת שנראה שדורשת אלמנט כלשהו של אינטואיציה וזיהוי דפוסים.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 459.14,
  "end": 472.78
 },
 {
  "input": "We almost take this for granted these days, but the idea with machine learning is that rather than trying to explicitly define a procedure for how to do that task in code, which is what people would have done in the earliest days of AI, instead you set up a very flexible structure with tunable parameters, like a bunch of knobs and dials, and then somehow you use many examples of what the output should look like for a given input to tweak and tune the values of those parameters to mimic this behavior.",
  "translatedText": "אנחנו כמעט לוקחים את זה כמובן מאליו בימינו, אבל הרעיון עם למידת מכונה הוא שבמקום לנסות להגדיר במפורש נוהל כיצד לבצע את המשימה הזו בקוד, כמו בימים הראשונים של AI, אתם מגדירים מבנה מאוד גמיש עם פרמטרים ניתנים לשינוי, כמו אוסף של כפתורים וחוגות, ואז איכשהו אתם משתמשים בדוגמאות רבות של איך הפלט צריך להיראות עבור קלט נתון כדי לכוונן את הערכים של הפרמטרים האלה כדי לחקות את ההתנהגות הזו.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 473.2,
  "end": 499.7
 },
 {
  "input": "For example, maybe the simplest form of machine learning is linear regression, where your inputs and outputs are each single numbers, something like the square footage of a house and its price, and what you want is to find a line of best fit through this data, you know, to predict future house prices.",
  "translatedText": "לדוגמה, אולי הצורה הפשוטה ביותר של למידת מכונה היא רגרסיה ליניארית, כאשר כל אחד הקלטים והפלטים הם מספרים בודדים, משהו כמו השטח של בית והמחיר שלו, ומה שאתם רוצים זה למצוא את הקו המתאים ביותר שעובר בנתונים אלו, כדי לחזות מחירי דירות.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 499.7,
  "end": 516.8
 },
 {
  "input": "That line is described by two continuous parameters, say the slope and the y-intercept, and the goal of linear regression is to determine those parameters to closely match the data.",
  "translatedText": "הקו הזה מתואר על ידי שני פרמטרים רציפים, למשל השיפוע והעתקת ה-y, והמטרה של רגרסיה ליניארית היא לקבוע את הפרמטרים האלה כך שיתאימו היטב לנתונים.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 517.44,
  "end": 528.16
 },
 {
  "input": "Needless to say, deep learning models get much more complicated.",
  "translatedText": "מיותר לציין שמודלים של למידה עמוקה הרבה יותר מסובכים.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 528.88,
  "end": 532.1
 },
 {
  "input": "GPT-3, for example, has not two, but 175 billion parameters.",
  "translatedText": "ל-GPT-3, למשל, אין שניים אלא 175 מיליארד פרמטרים.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 532.62,
  "end": 537.66
 },
 {
  "input": "But here's the thing, it's not a given that you can create some giant model with a huge number of parameters without it either grossly overfitting the training data or being completely intractable to train.",
  "translatedText": "אבל זה העניין, זה לא מובן מאליו שאתם יכולים ליצור מודל ענק עם מספר עצום של פרמטרים מבלי שהוא יתאים יותר מדי את נתוני האימון או יהיה בלתי ניתן לאימון.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 538.12,
  "end": 549.56
 },
 {
  "input": "Deep learning describes a class of models that in the last couple decades have proven to scale remarkably well.",
  "translatedText": "למידה עמוקה מתארת סוג של מודלים שבעשורים האחרונים הוכיחו כי הם ניתנים להרחבה בצורה יוצאת דופן.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 550.26,
  "end": 556.18
 },
 {
  "input": "What unifies them is the same training algorithm, called backpropagation, and the context I want you to have as we go in is that in order for this training algorithm to work well at scale, these models have to follow a certain specific format.",
  "translatedText": "מה שמאחד אותם הוא אותו אלגוריתם אימון, הנקרא פעפוע לאחור (backpropagation), וההקשר שאני רוצה שיהיה לכם כשנעמיק בו הוא שכדי שאלגוריתם האימון הזה יעבוד טוב בכל קנה מידה, המודלים האלה צריכים לפעול לפי פורמט מסוים.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 556.48,
  "end": 571.28
 },
 {
  "input": "If you know this format going in, it helps to explain many of the choices for how a transformer processes language, which otherwise run the risk of feeling arbitrary.",
  "translatedText": "אם אתם מכירים את הפורמט הזה, זה עוזר להסביר רבות מהאפשרויות לאופן שבו טרנספורמר מעבד שפה. אחרת מסתכנים בתחושה של שרירותיות.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 571.8,
  "end": 580.4
 },
 {
  "input": "First, whatever model you're making, the input has to be formatted as an array of real numbers.",
  "translatedText": "ראשית, בכל מודל שאתם בונים, הקלט צריך להיות בפורמט של מערך של מספרים ממשיים.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 581.44,
  "end": 586.74
 },
 {
  "input": "This could mean a list of numbers, it could be a two-dimensional array, or very often you deal with higher dimensional arrays, where the general term used is tensor.",
  "translatedText": "הוא יכול להיות רשימה של מספרים, מערך דו מימדי, או לעתים קרובות מאוד אתם עוסקים במערכים בדרגה גבוהה יותר, כאשר המונח הכללי שבשימוש הוא טנזור.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 586.74,
  "end": 596
 },
 {
  "input": "You often think of that input data as being progressively transformed into many distinct layers, where again, each layer is always structured as some kind of array of real numbers, until you get to a final layer which you consider the output.",
  "translatedText": "לעתים קרובות אתם חושבים על נתוני הקלט האלה ככאלה שהופכים בהדרגה לשכבות שונות, כאשר שוב, כל שכבה בנויה תמיד כאיזשהו מערך של מספרים ממשיים, עד שאתם מגיעים לשכבה הסופית שנחשבת כפלט.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 596.56,
  "end": 608.68
 },
 {
  "input": "For example, the final layer in our text processing model is a list of numbers representing the probability distribution for all possible next tokens.",
  "translatedText": "לדוגמה, השכבה האחרונה במודל עיבוד הטקסט שלנו היא רשימה של מספרים המייצגים את התפלגות ההסתברות עבור כל הטוקנים הבאים האפשריים.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 609.28,
  "end": 617.06
 },
 {
  "input": "In deep learning, these model parameters are almost always referred to as weights, and this is because a key feature of these models is that the only way these parameters interact with the data being processed is through weighted sums.",
  "translatedText": "בלמידה עמוקה, כמעט תמיד מתייחסים לפרמטרי מודל האלו כאל משקלים, וזאת משום שמאפיין מרכזי של מודלים אלה הוא שהדרך היחידה שבה הפרמטרים מתקשרים עם הנתונים המעובדים היא באמצעות סכומים משוקללים.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 617.82,
  "end": 629.9
 },
 {
  "input": "You also sprinkle some non-linear functions throughout, but they won't depend on parameters.",
  "translatedText": "יהיו גם כמה פונקציות לא ליניאריות לאורך הדרך, אבל הן לא יהיו תלויות בפרמטרים.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 630.34,
  "end": 634.36
 },
 {
  "input": "Typically though, instead of seeing the weighted sums all naked and written out explicitly like this, you'll instead find them packaged together as various components in a matrix vector product.",
  "translatedText": "עם זאת, בדרך כלל, במקום לראות את הסכומים המשוקללים כולם חשופים וכתובים בצורה מפורשת כך, תמצאו אותם ארוזים יחד כרכיבים שונים במכפלת וקטור ומטריצה.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 635.2,
  "end": 645.62
 },
 {
  "input": "It amounts to saying the same thing, if you think back to how matrix vector multiplication works, each component in the output looks like a weighted sum.",
  "translatedText": "זה מסתכם באמירת אותו הדבר, אם אתם חושבים כיצד פועל כפל וקטור ומטריצה, כל רכיב בפלט נראה כמו סכום משוקלל.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 646.74,
  "end": 654.24
 },
 {
  "input": "It's just often conceptually cleaner for you and me to think about matrices that are filled with tunable parameters that transform vectors that are drawn from the data being processed.",
  "translatedText": "פשוט, לעתים קרובות יותר נקי מבחינה רעיונית עבורכם ולי לחשוב על מטריצות שמלאות בפרמטרים שניתנים לשינוי ושממירות וקטורים שנוצרו מהנתונים המעובדים.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 654.78,
  "end": 665.42
 },
 {
  "input": "For example, those 175 billion weights in GPT-3 are organized into just under 28,000 distinct matrices.",
  "translatedText": "לדוגמה, אותם 175 מיליארד משקלים ב-GPT-3 מאורגנים בקצת פחות מ-28,000 מטריצות נפרדות.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 666.34,
  "end": 674.16
 },
 {
  "input": "Those matrices in turn fall into eight different categories, and what you and I are going to do is step through each one of those categories to understand what that type does.",
  "translatedText": "המטריצות האלה מתחלקות לשמונה קטגוריות שונות, ומה שאתם ואני הולכים לעשות זה לעבור על כל אחת מהקטגוריות האלה כדי להבין מה כל אחת מהן עושה.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 674.66,
  "end": 682.7
 },
 {
  "input": "As we go through, I think it's kind of fun to reference the specific numbers from GPT-3 to count up exactly where those 175 billion come from.",
  "translatedText": "בזמן שאנחנו עוברים, אני חושב שזה די מהנה להתייחס למספרים הספציפיים מ-GPT-3 כדי לספור בדיוק מאיפה מגיעים ה-175 מיליארד האלה.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 683.16,
  "end": 691.36
 },
 {
  "input": "Even if nowadays there are bigger and better models, this one has a certain charm as the large-language model to really capture the world's attention outside of ML communities.",
  "translatedText": "גם אם בימינו יש מודלים גדולים וטובים יותר, ל-GPT-3 יש קסם מסוים בתור מודל השפה הגדול (ML) שבאמת לכד את תשומת הלב של העולם מחוץ לקהילות ML.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 691.88,
  "end": 700.74
 },
 {
  "input": "Also, practically speaking, companies tend to keep much tighter lips around the specific numbers for more modern networks.",
  "translatedText": "כמו כן, באופן מעשי, חברות נוטות לשמור הרבה יותר על סודיות סביב המספרים הספציפיים עבור רשתות מודרניות יותר.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 701.44,
  "end": 706.74
 },
 {
  "input": "I just want to set the scene going in, that as you peek under the hood to see what happens inside a tool like ChatGPT, almost all of the actual computation looks like matrix vector multiplication.",
  "translatedText": "אני רק רוצה להגדיר את הזירה, שכאשר אתם מציצים בקרביים של המודל כדי לראות מה קורה בתוך כלי כמו ChatGPT, כמעט כל החישוב בפועל נראה כמו כפל וקטור ומטריצה.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 707.36,
  "end": 717.44
 },
 {
  "input": "There's a little bit of a risk getting lost in the sea of billions of numbers, but you should draw a very sharp distinction in your mind between the weights of the model, which I'll always color in blue or red, and the data being processed, which I'll always color in gray.",
  "translatedText": "יש סיכון קטן ללכת לאיבוד בים של מיליארדי המספרים, אבל כדאי שתעשו הבחנה חדה מאוד בין משקלי המודל, שאותם תמיד אצבע בכחול או אדום, לבין הנתונים המעובדים, שאותם תמיד אצבע באפור.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 717.9,
  "end": 731.84
 },
 {
  "input": "The weights are the actual brains, they are the things learned during training, and they determine how it behaves.",
  "translatedText": "המשקלים הם המוח האמיתי, הם הדברים שנלמדו במהלך האימון, והם קובעים כיצד המודל מתנהג.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 732.18,
  "end": 737.92
 },
 {
  "input": "The data being processed simply encodes whatever specific input is fed into the model for a given run, like an example snippet of text.",
  "translatedText": "הנתונים המעובדים פשוט מקודדים כל קלט ספציפי שמוזן למודל עבור הפעלה נתונה, כמו קטע טקסט לדוגמה.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 738.28,
  "end": 746.5
 },
 {
  "input": "With all of that as foundation, let's dig into the first step of this text processing example, which is to break up the input into little chunks and turn those chunks into vectors.",
  "translatedText": "עם כל זה כבסיס, בואו נעמיק בשלב הראשון של דוגמה זו של עיבוד טקסט, שהוא לפרק את הקלט לנתחים קטנים ולהפוך את הנתחים הללו לוקטורים.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 747.48,
  "end": 756.42
 },
 {
  "input": "I mentioned how those chunks are called tokens, which might be pieces of words or punctuation, but every now and then in this chapter and especially in the next one, I'd like to just pretend that it's broken more cleanly into words.",
  "translatedText": "הזכרתי איך הנתחים האלה נקראים טוקנים, שיכולים להיות פיסות מילים או סימני פיסוק, אבל מדי פעם בפרק הזה ובמיוחד בפרק הבא, הייתי רוצה פשוט להעמיד פנים שהוא מפורק למילים.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 757.02,
  "end": 768.08
 },
 {
  "input": "Because we humans think in words, this will just make it much easier to reference little examples and clarify each step.",
  "translatedText": "מכיוון שאנחנו בני האדם חושבים במילים, זה פשוט יקל על התייחסות לדוגמאות קטנות ולהבהרת כל שלב.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 768.6,
  "end": 774.08
 },
 {
  "input": "The model has a predefined vocabulary, some list of all possible words, say 50,000 of them, and the first matrix that we'll encounter, known as the embedding matrix, has a single column for each one of these words.",
  "translatedText": "למודל יש אוצר מילים מוגדר מראש, רשימה כלשהי של כל המילים האפשריות, נניח 50,000 מהן, והמטריצה הראשונה שנתקל בה, המכונה מטריצת שיכון (embedding), כוללת עמודה אחת לכל אחת מהמילים הללו.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 775.26,
  "end": 787.8
 },
 {
  "input": "These columns are what determines what vector each word turns into in that first step.",
  "translatedText": "העמודות הללו הן שקובעות לאיזה וקטור הופכת כל מילה בשלב הראשון.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 788.94,
  "end": 793.76
 },
 {
  "input": "We label it We, and like all the matrices we see, its values begin random, but they're going to be learned based on data.",
  "translatedText": "אנחנו מתייגים אותה ב-We, וכמו כל המטריצות שאנחנו רואים, הערכים שלה מתחילים באקראי, אבל הם נלמדים על סמך נתונים.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 795.1,
  "end": 802.36
 },
 {
  "input": "Turning words into vectors was common practice in machine learning long before transformers, but it's a little weird if you've never seen it before, and it sets the foundation for everything that follows, so let's take a moment to get familiar with it.",
  "translatedText": "הפיכת מילים לוקטורים הייתה נוהג נפוץ בלמידת מכונה הרבה לפני הטרנספורמרים, אבל זה קצת מוזר אם מעולם לא ראיתם את התהליך קודם, וזה קובע את הבסיס לכל מה שבא אחר כך, אז בואו ניקח רגע להכיר אותו.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 803.62,
  "end": 815.76
 },
 {
  "input": "We often call this embedding a word, which invites you to think of these vectors very geometrically as points in some high dimensional space.",
  "translatedText": "לעתים קרובות אנו קוראים לזה שיכון של מילה, שמזמין אתכם לחשוב על הווקטורים הללו בצורה מאוד גיאומטרית כנקודות במרחב בעל ממדים גבוהים.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 816.04,
  "end": 823.62
 },
 {
  "input": "Visualizing a list of three numbers as coordinates for points in 3D space would be no problem, but word embeddings tend to be much much higher dimensional.",
  "translatedText": "הצגת רשימה של שלושה מספרים כקואורדינטות עבור נקודות במרחב תלת-ממד לא תהיה בעיה, אבל שיכוני מילים נוטים להיות בממדים הרבה יותר גבוהים.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 824.18,
  "end": 831.78
 },
 {
  "input": "In GPT-3 they have 12,288 dimensions, and as you'll see, it matters to work in a space that has a lot of distinct directions.",
  "translatedText": "ב-GPT-3 יש להם 12,288 ממדים, וכפי שתראו, חשוב לעבוד במרחב שיש לו הרבה כיוונים שונים.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 832.28,
  "end": 840.44
 },
 {
  "input": "In the same way that you could take a two-dimensional slice through a 3D space and project all the points onto that slice, for the sake of animating word embeddings that a simple model is giving me, I'm going to do an analogous thing by choosing a three-dimensional slice through this very high dimensional space, and projecting the word vectors down onto that and displaying the results.",
  "translatedText": "באותו אופן שבו אתם יכולים לקחת פרוסה דו מימדית במרחב תלת מימדי ולהטיל עליה את כל הנקודות, למען אנימציה של שיכון מילים שמודל פשוט מאפשר לי, אני הולך לעשות דבר מקביל על ידי בחירת פרוסה תלת מימדית דרך המרחב הגבוה מאוד הזה, הטלה של וקטורי המילים עליה והצגת התוצאות.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 841.18,
  "end": 860.48
 },
 {
  "input": "The big idea here is that as a model tweaks and tunes its weights to determine how exactly words get embedded as vectors during training, it tends to settle on a set of embeddings where directions in the space have a kind of semantic meaning.",
  "translatedText": "הרעיון המרכזי כאן הוא שכשמודל מכוונן את המשקלים שלו במהלך האימון  כדי לקבוע איך בדיוק מילים משוכנות כווקטורים, הוא נוטה להסתפק בסט של שיכונים שבהם לכיוונים במרחב יש סוג של משמעות סמנטית.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 861.28,
  "end": 874.44
 },
 {
  "input": "For the simple word-to-vector model I'm running here, if I run a search for all the words whose embeddings are closest to that of tower, you'll notice how they all seem to give very similar tower-ish vibes.",
  "translatedText": "עבור המודל הפשוט של מילה-לוקטור שאני מריץ כאן, אם אפעיל חיפוש אחר כל המילים שהשיכונים שלהן הכי קרובים לזה של מגדל, תבחינו איך כולן נותנות תחושה דומה מאד למגדל.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 874.98,
  "end": 885.9
 },
 {
  "input": "And if you want to pull up some Python and play along at home, this is the specific model that I'm using to make the animations.",
  "translatedText": "ואם אתם רוצים לשחק קצת עם פייתון בבית, זה המודל הספציפי שבו אני משתמש כדי ליצור את האנימציות.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 886.34,
  "end": 891.38
 },
 {
  "input": "It's not a transformer, but it's enough to illustrate the idea that directions in the space can carry semantic meaning.",
  "translatedText": "זה לא טרנספורמר, אבל זה מספיק כדי להמחיש את הרעיון שכיוונים במרחב יכולים לשאת משמעות סמנטית.",
  "model": "google_nmt",
  "n_reviews": 2,
  "start": 891.62,
  "end": 897.6
 },
 {
  "input": "A very classic example of this is how if you take the difference between the vectors for woman and man, something you would visualize as a little vector connecting the tip of one to the tip of the other, it's very similar to the difference between king and queen.",
  "translatedText": "דוגמה מאוד קלאסית לכך היא שאם אתם לוקחים את ההבדל בין הווקטורים של אישה וגבר, משהו שהייתם מדמיינים כווקטור קטן המחבר את קצה האחד לקצהו של השני, זה דומה מאוד להבדל בין מלך למַלכָּה.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 898.3,
  "end": 913.2
 },
 {
  "input": "So let's say you didn't know the word for a female monarch, you could find it by taking king, adding this woman-man direction, and searching for the embeddings closest to that point.",
  "translatedText": "אז נניח שלא ידעתם את המילה למלך נשית, תוכלו למצוא אותה על ידי הוספת הכיוון הזה של אישה-גבר למלך וחיפוש אחר השיכונים הקרובים ביותר לאותה נקודה.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 915.08,
  "end": 925.46
 },
 {
  "input": "At least, kind of.",
  "translatedText": "לפחות, סוג של.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 927,
  "end": 928.2
 },
 {
  "input": "Despite this being a classic example for the model I'm playing with, the true embedding of queen is actually a little farther off than this would suggest, presumably because the way queen is used in training data is not merely a feminine version of king.",
  "translatedText": "למרות שזו דוגמה קלאסית למודל שאיתו אני משחק, השיכון האמיתי של מלכה הוא למעשה קצת יותר רחוק ממה שזה מרמז, ככל הנראה משום שהדרך שבה משתמשים במלכה בנתוני אימון אינה רק גרסה נשית של מלך.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 928.48,
  "end": 940.78
 },
 {
  "input": "When I played around, family relations seemed to illustrate the idea much better.",
  "translatedText": "כששיחקתי, נראה היה שיחסי המשפחה המחישו את הרעיון הרבה יותר טוב.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 941.62,
  "end": 945.26
 },
 {
  "input": "The point is, it looks like during training the model found it advantageous to choose embeddings such that one direction in this space encodes gender information.",
  "translatedText": "הנקודה היא, שנראה שבמהלך האימון המודל מצא יתרון לבחור בשיכונים כך שכיוון אחד במרחב הזה מקודד מידע מגדרי.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 946.34,
  "end": 954.9
 },
 {
  "input": "Another example is that if you take the embedding of Italy, and you subtract the embedding of Germany, and add that to the embedding of Hitler, you get something very close to the embedding of Mussolini.",
  "translatedText": "דוגמה נוספת היא שאם לוקחים את השיכון של איטליה, ומפחיתים את השיכון של גרמניה, ומוסיפים את זה לשיכון של היטלר, מקבלים משהו מאוד קרוב לשיכון של מוסוליני.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 956.8,
  "end": 968.09
 },
 {
  "input": "It's as if the model learned to associate some directions with Italian-ness, and others with WWII axis leaders.",
  "translatedText": "זה כאילו המודל למד לקשר כיוונים מסוימים עם סגנון איטלקי ואחרים למנהיגי ציר מלחמת העולם השנייה.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 968.57,
  "end": 975.67
 },
 {
  "input": "Maybe my favorite example in this vein is how in some models, if you take the difference between Germany and Japan, and add it to sushi, you end up very close to bratwurst.",
  "translatedText": "אולי הדוגמה האהובה עליי ברוח זו היא איך במודלים מסוימים, אם לוקחים את ההבדל בין גרמניה ליפן ומוסיפים אותו לסושי, מתקרבים מאוד ל-bratwurst (סוג של נקניקיה גרמנית).",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 976.47,
  "end": 986.23
 },
 {
  "input": "Also in playing this game of finding nearest neighbors, I was pleased to see how close cat was to both beast and monster.",
  "translatedText": "גם במשחק הזה של מציאת השכנים הקרובים ביותר, שמחתי לראות עד כמה המילה חתול קרובה גם לחיה וגם למפלצת.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 987.35,
  "end": 993.85
 },
 {
  "input": "One bit of mathematical intuition that's helpful to have in mind, especially for the next chapter, is how the dot product of two vectors can be thought of as a way to measure how well they align.",
  "translatedText": "אינטואיציה מתמטית שמועיל לזכור, במיוחד עבור הפרק הבא, היא כיצד ניתן לחשוב על המכפלה הסקלרית של שני וקטורים כדרך למדוד את מידת התאמתם.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 994.69,
  "end": 1003.85
 },
 {
  "input": "Computationally, dot products involve multiplying all the corresponding components and then adding the results, which is good, since so much of our computation has to look like weighted sums.",
  "translatedText": "מבחינה חישובית, מכפלה סקלרית כוללת הכפלה של כל הרכיבים התואמים ואז חיבור התוצאות, וזה טוב, מכיוון שהרבה מהחישובים שלנו צריכים להיראות כמו סכומים משוקללים.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 1004.87,
  "end": 1014.33
 },
 {
  "input": "Geometrically, the dot product is positive when vectors point in similar directions, it's zero if they're perpendicular, and it's negative whenever they point in opposite directions.",
  "translatedText": "מבחינה גיאומטרית, מכפלה סקלרית חיובית כאשר וקטורים מצביעים לכיוונים דומים, היא אפס אם הם מאונכים, והיא שלילית כאשר הם מצביעים בכיוונים מנוגדים.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 1015.19,
  "end": 1025.61
 },
 {
  "input": "For example, let's say you were playing with this model, and you hypothesize that the embedding of cats minus cat might represent a sort of plurality direction in this space.",
  "translatedText": "לדוגמה, נניח ששיחקתם עם המודל הזה, ואתם משערים ששיכון חתולים מינוס חתול עשוי לייצג סוג של כיוון של ריבוי במרחב הזה.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 1026.55,
  "end": 1037.01
 },
 {
  "input": "To test this, I'm going to take this vector and compute its dot product against the embeddings of certain singular nouns, and compare it to the dot products with the corresponding plural nouns.",
  "translatedText": "כדי לבדוק זאת, אני הולך לקחת את הווקטור הזה ולחשב את המכפלה הסקלרית שלו מול השיכונים של שמות עצם מסוימים ביחיד, ולהשוות למכפלה הסקלרית עם שמות העצם בריבוי.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 1037.43,
  "end": 1047.05
 },
 {
  "input": "If you play around with this, you'll notice that the plural ones do indeed seem to consistently give higher values than the singular ones, indicating that they align more with this direction.",
  "translatedText": "אם תשחקו עם זה, תשימו לב שאלו בריבוי נותנים באופן עקבי ערכים גבוהים יותר מאלה שביחיד, מה שמצביע על כך שהם מתישרים יותר עם הכיוון הזה.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 1047.27,
  "end": 1056.07
 },
 {
  "input": "It's also fun how if you take this dot product with the embeddings of the words one, two, tree, and so on, they give increasing values, so it's as if we can quantitatively measure how plural the model finds a given word.",
  "translatedText": "זה גם מהנה איך אם לוקחים את המכפלה הסקלרית הזאת עם השיכונים של המילים אחת, שתיים שלוש וכו', הם נותנים ערכים הולכים וגדלים, כאילו שנוכל למדוד כמותית את מידת הריבוי שהמודל מוצא למילה נתונה.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 1057.07,
  "end": 1069.03
 },
 {
  "input": "Again, the specifics for how words get embedded is learned using data.",
  "translatedText": "שוב, האופן שבו מילים משוכנות נלמד באמצעות נתונים.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 1070.25,
  "end": 1073.57
 },
 {
  "input": "This embedding matrix, whose columns tell us what happens to each word, is the first pile of weights in our model.",
  "translatedText": "מטריצת השיכון הזו, שהעמודות שלה מספרות לנו מה קורה לכל מילה, היא אוסף המשקלים הראשון במודל שלנו.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 1074.05,
  "end": 1079.55
 },
 {
  "input": "Using the GPT-3 numbers, the vocabulary size specifically is 50,257, and again, technically this consists not of words per se, but of tokens.",
  "translatedText": "באמצעות מספרי GPT-3, גודל אוצר המילים הוא 50,257, ושוב, טכנית זה לא מורכב ממילים כשלעצמן, אלא מטוקנים.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 1080.03,
  "end": 1089.77
 },
 {
  "input": "The embedding dimension is 12,288, and multiplying those tells us this consists of about 617 million weights.",
  "translatedText": "מימד השיכון הוא 12,288, וכפל שלהם אומר לנו שהוא מורכב מכ-617 מיליון משקלים.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 1090.63,
  "end": 1097.79
 },
 {
  "input": "Let's go ahead and add this to a running tally, remembering that by the end we should count up to 175 billion.",
  "translatedText": "בואו נמשיך ונוסיף את זה לסיכום שוטף, ונזכור שעד הסוף אנחנו צריכים לספור עד 175 מיליארד.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 1098.25,
  "end": 1103.81
 },
 {
  "input": "In the case of transformers, you really want to think of the vectors in this embedding space as not merely representing individual words.",
  "translatedText": "במקרה של טרנספורמרים, אתם באמת רוצים לחשוב שהווקטורים במרחב השיכון הזה אינם מייצגים רק מילים בודדות.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 1105.43,
  "end": 1112.13
 },
 {
  "input": "For one thing, they also encode information about the position of that word, which we'll talk about later, but more importantly, you should think of them as having the capacity to soak in context.",
  "translatedText": "דבר אחד, הם גם מקודדים מידע על המיקום של המילה הזו, שעליו נדבר בהמשך, אבל חשוב מכך, כדאי לחשוב עליהם כבעלי יכולת להספג בהקשר.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 1112.55,
  "end": 1122.77
 },
 {
  "input": "A vector that started its life as the embedding of the word king, for example, might progressively get tugged and pulled by various blocks in this network, so that by the end it points in a much more specific and nuanced direction that somehow encodes that it was a king who lived in Scotland, and who had achieved his post after murdering the previous king, and who's being described in Shakespearean language.",
  "translatedText": "וקטור שהתחיל את חייו כשיכון המילה מלך, למשל, עשוי להשתנות בהדרגה על ידי בלוקים שונים ברשת הזו, כך שבסופו הוא מצביע לכיוון הרבה יותר ספציפי שמקודד איכשהו שזה היה מלך שחי בסקוטלנד, ושהשיג את תפקידו לאחר שרצח את המלך הקודם, ושמתואר בשפה שייקספירית.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 1123.35,
  "end": 1144.73
 },
 {
  "input": "Think about your own understanding of a given word.",
  "translatedText": "חשבו על ההבנה שלכם של מילה נתונה.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 1145.21,
  "end": 1147.79
 },
 {
  "input": "The meaning of that word is clearly informed by the surroundings, and sometimes this includes context from a long distance away, so in putting together a model that has the ability to predict what word comes next, the goal is to somehow empower it to incorporate context efficiently.",
  "translatedText": "המשמעות של המילה הזו ניתנת בבירור על ידי הסביבה, ולפעמים זה כולל הקשר ממרחק רב, אז בבניית מודל שיש לו את היכולת לחזות איזו מילה מגיעה לאחר מכן, המטרה היא איכשהו לאפשר לו לשלב הקשר ביעילות.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 1148.25,
  "end": 1163.39
 },
 {
  "input": "To be clear, in that very first step, when you create the array of vectors based on the input text, each one of those is simply plucked out of the embedding matrix, so initially each one can only encode the meaning of a single word without any input from its surroundings.",
  "translatedText": "שיהיה ברור, בשלב הראשון הזה, כשאתם יוצרים את מערך הוקטורים על סמך טקסט הקלט, כל אחד מהם פשוט נלקח ממטריצת השיכון, כך שבהתחלה כל אחד יכול רק לקודד את המשמעות של מילה אחת בלי כל קלט מסביבתו.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 1164.05,
  "end": 1176.77
 },
 {
  "input": "But you should think of the primary goal of this network that it flows through as being to enable each one of those vectors to soak up a meaning that's much more rich and specific than what mere individual words could represent.",
  "translatedText": "אבל כדאי לחשוב על המטרה העיקרית של הרשת הזו שדרכה הם עוברים שהיא לאפשר לכל אחד מאותם וקטורים לספוג משמעות הרבה יותר עשירה וספציפית ממה שמילים בודדות יכולות לייצג.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 1177.71,
  "end": 1188.97
 },
 {
  "input": "The network can only process a fixed number of vectors at a time, known as its context size.",
  "translatedText": "הרשת יכולה לעבד רק מספר קבוע של וקטורים בכל פעם, המכונה גודל ההקשר שלה.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 1189.51,
  "end": 1194.17
 },
 {
  "input": "For GPT-3 it was trained with a context size of 2048, so the data flowing through the network always looks like this array of 2048 columns, each of which has 12,000 dimensions.",
  "translatedText": "עבור GPT-3 הוא הוכשר עם גודל הקשר של 2048, כך שהנתונים הזורמים ברשת נראים תמיד כמו מערך זה של 2048 עמודות, שלכל אחת מהן יש 12,000 ממדים.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 1194.51,
  "end": 1205.01
 },
 {
  "input": "This context size limits how much text the transformer can incorporate when it's making a prediction of the next word.",
  "translatedText": "גודל ההקשר הזה מגביל את כמות הטקסט שהטרנספורמר יכול לשלב כשהוא מבצע חיזוי של המילה הבאה.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 1205.59,
  "end": 1211.83
 },
 {
  "input": "This is why long conversations with certain chatbots, like the early versions of ChatGPT, often gave the feeling of the bot kind of losing the thread of conversation as you continued too long.",
  "translatedText": "זו הסיבה ששיחות ארוכות עם צ'אטבוטים מסוימים, כמו הגרסאות המוקדמות של ChatGPT, נתנו לעתים קרובות את התחושה שהבוט מאבד את חוט השיחה ככל שהמשכתם זמן רב מדי.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 1212.37,
  "end": 1222.05
 },
 {
  "input": "We'll go into the details of attention in due time, but skipping ahead I want to talk for a minute about what happens at the very end.",
  "translatedText": "אנחנו ניכנס לפרטי המיקוד (attention) בבוא העת, אבל בדלוג קדימה אני רוצה לדבר רגע על מה שקורה ממש בסוף.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 1223.03,
  "end": 1228.81
 },
 {
  "input": "Remember, the desired output is a probability distribution over all tokens that might come next.",
  "translatedText": "זכרו, הפלט הרצוי הוא התפלגות הסתברותית על כל הטוקנים  שעשויים להגיע בהמשך.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 1229.45,
  "end": 1234.87
 },
 {
  "input": "For example, if the very last word is Professor, and the context includes words like Harry Potter, and immediately preceding we see least favorite teacher, and also if you give me some leeway by letting me pretend that tokens simply look like full words, then a well-trained network that had built up knowledge of Harry Potter would presumably assign a high number to the word Snape.",
  "translatedText": "לדוגמה, אם המילה האחרונה היא פרופסור, וההקשר כולל מילים כמו הארי פוטר, ומיד לפני כן אנחנו רואים את המורה הפחות אהוב, וגם אם אתם נותנים לי קצת מרחב פעולה כדי להעמיד פנים שטוקנים הם פשוט מילים שלמות, אז יש להניח שרשת מאומנת היטב שבנתה ידע על הארי פוטר תקצה מספר גבוה למילה סנייפ.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 1235.17,
  "end": 1255.83
 },
 {
  "input": "This involves two different steps.",
  "translatedText": "זה כרוך בשני שלבים שונים.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 1256.51,
  "end": 1257.97
 },
 {
  "input": "The first one is to use another matrix that maps the very last vector in that context to a list of 50,000 values, one for each token in the vocabulary.",
  "translatedText": "הראשון הוא להשתמש במטריצה נוספת שממפה את הווקטור האחרון בהקשר הזה לרשימה של 50,000 ערכים, אחד לכל טוקן באוצר המילים.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 1258.31,
  "end": 1267.61
 },
 {
  "input": "Then there's a function that normalizes this into a probability distribution, it's called Softmax and we'll talk more about it in just a second, but before that it might seem a little bit weird to only use this last embedding to make a prediction, when after all in that last step there are thousands of other vectors in the layer just sitting there with their own context-rich meanings.",
  "translatedText": "אז יש פונקציה שמנרמלת את הערכים האלו להתפלגות הסתברותית שנקראת סופטמקס ושנדבר עליה בעוד רגע, אבל לפני כן אולי נראה קצת מוזר להשתמש רק בשיכון האחרון כדי לבצע חיזוי, כאשר אחרי הכל בשלב האחרון יש אלפי וקטורים אחרים בשכבה שפשוט יושבים שם עם משמעויות עשירות משלהם.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 1268.17,
  "end": 1288.29
 },
 {
  "input": "This has to do with the fact that in the training process it turns out to be much more efficient if you use each one of those vectors in the final layer to simultaneously make a prediction for what would come immediately after it.",
  "translatedText": "זה קשור לעובדה שבתהליך האימון מתברר שהרבה יותר יעיל אם תשתמשו בכל אחד מאותם וקטורים בשכבה הסופית כדי לבצע בו זמנית חיזוי למה שיבוא מיד אחר כך.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 1288.93,
  "end": 1300.27
 },
 {
  "input": "There's a lot more to be said about training later on, but I just want to call that out right now.",
  "translatedText": "יש עוד הרבה מה לומר על אימונים בהמשך, אבל אני רק רוצה לומר זאת עכשיו.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 1300.97,
  "end": 1305.09
 },
 {
  "input": "This matrix is called the Unembedding matrix and we give it the label Wu.",
  "translatedText": "מטריצה זו נקראת מטריצת ביטול-שיכון (Unembedding) ואנחנו נותנים לה את התווית Wu.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 1305.73,
  "end": 1309.69
 },
 {
  "input": "Again, like all the weight matrices we see, its entries begin at random, but they are learned during the training process.",
  "translatedText": "שוב, כמו כל מטריצות המשקל שאנחנו רואים, הערכים שלה מתחילים באקראי, אבל הם נלמדים במהלך תהליך האימון.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 1310.21,
  "end": 1315.91
 },
 {
  "input": "Keeping score on our total parameter count, this Unembedding matrix has one row for each word in the vocabulary, and each row has the same number of elements as the embedding dimension.",
  "translatedText": "לגבי ספירת הפרמטרים הכוללת שלנו, למטריצת ביטול-השיכון הזו יש שורה אחת לכל מילה באוצר המילים, ולכל שורה יש אותו מספר אלמנטים כמו ממד השיכון.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 1316.47,
  "end": 1325.65
 },
 {
  "input": "It's very similar to the embedding matrix, just with the order swapped, so it adds another 617 million parameters to the network, meaning our count so far is a little over a billion, a small but not wholly insignificant fraction of the 175 billion we'll end up with in total.",
  "translatedText": "זה מאוד דומה למטריצת השיכון, רק עם החלפה של הסדר, אז זה מוסיף עוד 617 מיליון פרמטרים לרשת, כלומר הספירה שלנו עד כה היא קצת יותר ממיליארד, חלק קטן אך לא זניח לגמרי מ-175 המיליארד שנגיע אליהם בסוף.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 1326.41,
  "end": 1341.79
 },
 {
  "input": "As the last mini-lesson for this chapter, I want to talk more about this softmax function, since it makes another appearance for us once we dive into the attention blocks.",
  "translatedText": "בתור המיני-שיעור האחרון לפרק זה, אני רוצה לדבר יותר על פונקציית הסופטמקס, מכיוון שהיא מופיעה שוב ושוב כשצוללים לתוך בלוקי השיכון.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 1342.55,
  "end": 1350.61
 },
 {
  "input": "The idea is that if you want a sequence of numbers to act as a probability distribution, say a distribution over all possible next words, then each value has to be between 0 and 1, and you also need all of them to add up to 1.",
  "translatedText": "הרעיון הוא שאם אתם רוצים שרצף של מספרים יפעל כהתפלגות הסתברותית, נניח התפלגות לגבי כל המילים הבאות האפשריות, אז כל ערך צריך להיות בין 0 ל-1, ואתם גם צריכים שכולם יסתכמו ל-1 .",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 1351.43,
  "end": 1364.59
 },
 {
  "input": "However, if you're playing the learning game where everything you do looks like matrix-vector multiplication, the outputs you get by default don't abide by this at all.",
  "translatedText": "עם זאת, אם אתם משחקים במשחק הלמידה שבו כל מה שאתם עושים נראה כמו כפל מטריצה-וקטור, הפלטים שתקבלו ברוב רובם של המקרים לא עומדים בזה.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 1365.25,
  "end": 1374.81
 },
 {
  "input": "The values are often negative, or much bigger than 1, and they almost certainly don't add up to 1.",
  "translatedText": "הערכים הם לרוב שליליים, או הרבה יותר גדולים מ-1, והם כמעט בוודאות לא מסתכמים ב-1.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 1375.33,
  "end": 1379.87
 },
 {
  "input": "Softmax is the standard way to turn an arbitrary list of numbers into a valid distribution in such a way that the largest values end up closest to 1, and the smaller values end up very close to 0.",
  "translatedText": "סופטמקס היא הדרך הסטנדרטית להפוך רשימה שרירותית של מספרים להתפלגות חוקית באופן שהערכים הגדולים יהיו הקרובים ביותר ל-1, והערכים הקטנים יהיו קרובים מאוד ל-0.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 1380.51,
  "end": 1391.29
 },
 {
  "input": "That's all you really need to know.",
  "translatedText": "זה באמת כל מה שאתם צריכים לדעת.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 1391.83,
  "end": 1393.07
 },
 {
  "input": "But if you're curious, the way it works is to first raise e to the power of each of the numbers, which means you now have a list of positive values, and then you can take the sum of all those positive values and divide each term by that sum, which normalizes it into a list that adds up to 1.",
  "translatedText": "אבל אם אתם סקרנים, הדרך שבה זה עובד היא קודם כל להעלות את e לחזקה של כל אחד מהמספרים, מה שאומר שיש לכם עכשיו רשימה של ערכים חיוביים, ואז אתם יכולים לקחת את הסכום של כל הערכים החיוביים האלה ולחלק כל מספר בסכום הזה, מה שמנרמל אותם לרשימה שמצטברת ל-1.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 1393.09,
  "end": 1409.47
 },
 {
  "input": "You'll notice that if one of the numbers in the input is meaningfully bigger than the rest, then in the output the corresponding term dominates the distribution, so if you were sampling from it you'd almost certainly just be picking the maximizing input.",
  "translatedText": "תוכלו לשים לב שאם אחד המספרים בקלט גדול משמעותית מהשאר, אז בפלט הערך המתאים שולט בהתפלגות, כך שאם הייתם דוגמים ממנה כמעט בטוח שהייתם בוחרים רק את הקלט המקסימלי.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 1410.17,
  "end": 1422.47
 },
 {
  "input": "But it's softer than just picking the max in the sense that when other values are similarly large, they also get meaningful weight in the distribution, and everything changes continuously as you continuously vary the inputs.",
  "translatedText": "אבל זה לא כמו לבחור את המקסימום מכיוון שכאשר ערכים אחרים גדולים באופן דומה, הם גם מקבלים משקל משמעותי בהתפלגות, והכל משתנה ללא הרף כאשר אתם משנים ברציפות את הקלטים.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 1422.99,
  "end": 1434.65
 },
 {
  "input": "In some situations, like when ChatGPT is using this distribution to create a next word, there's room for a little bit of extra fun by adding a little extra spice into this function, with a constant T thrown into the denominator of those exponents.",
  "translatedText": "במצבים מסוימים, כמו כאשר ChatGPT משתמשת בהתפלגות הזו כדי ליצור את המילה הבאה, יש מקום למעט הנאה נוספת על ידי הוספת מעט תבלין לפונקציה הזו, עם הקבוע T שנוסף למכנה של אותם מעריכים.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 1435.13,
  "end": 1448.91
 },
 {
  "input": "We call it the temperature, since it vaguely resembles the role of temperature in certain thermodynamics equations, and the effect is that when T is larger, you give more weight to the lower values, meaning the distribution is a little bit more uniform, and if T is smaller, then the bigger values will dominate more aggressively, where in the extreme, setting T equal to zero means all of the weight goes to maximum value.",
  "translatedText": "אנו קוראים לו טמפרטורה, מכיוון שבמעועם התפקיד שלו דומה לתפקיד הטמפרטורה במשוואות תרמודינמיות מסוימות, וההשפעה היא שכאשר T גדול יותר, אתם נותנים יותר משקל לערכים הנמוכים, כלומר ההתפלגות היא קצת יותר אחידה, ואם T קטן יותר, אז הערכים הגדולים ישלטו בצורה אגרסיבית יותר, כאשר בקיצוניות, T שווה לאפס פירושו שכל המשקל עובר לערך המקסימלי.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 1449.55,
  "end": 1472.79
 },
 {
  "input": "For example, I'll have GPT-3 generate a story with the seed text \"once upon a time there was a\", but I'll use different temperatures in each case.",
  "translatedText": "לדוגמה, אני אגרום ל-GPT-3 ליצור סיפור עם טקסט התחלתי \"היו היה\", אבל אני אשתמש בטמפרטורות שונות בכל מקרה.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 1473.47,
  "end": 1482.95
 },
 {
  "input": "Temperature zero means that it always goes with the most predictable word, and what you get ends up being a trite derivative of Goldilocks.",
  "translatedText": "טמפרטורה אפס פירושה הבחירה תמיד תהיה במילה הכי צפויה, ומה שתקבלו בסופו של דבר הוא נגזרת משעממת של זהבה ושלושת הדובים.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 1483.63,
  "end": 1492.37
 },
 {
  "input": "A higher temperature gives it a chance to choose less likely words, but it comes with a risk.",
  "translatedText": "טמפרטורה גבוהה יותר נותנת הזדמנות לבחור מילים פחות סבירות, אבל זה כרוך בסיכון.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 1493.01,
  "end": 1497.91
 },
 {
  "input": "In this case, the story starts out more originally, about a young web artist from South Korea, but it quickly degenerates into nonsense.",
  "translatedText": "במקרה הזה, התחלת הסיפור יותר מקורית, על אמן אינטרנט צעיר מדרום קוריאה, אבל הוא מידרדר במהירות לשטויות.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 1498.23,
  "end": 1506.01
 },
 {
  "input": "Technically speaking, the API doesn't actually let you pick a temperature bigger than 2.",
  "translatedText": "מבחינה טכנית, לא מאפשרים לכם לבחור טמפרטורה גדולה מ-2.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 1506.95,
  "end": 1510.83
 },
 {
  "input": "There's no mathematical reason for this, it's just an arbitrary constraint imposed to keep their tool from being seen generating things that are too nonsensical.",
  "translatedText": "אין לכך סיבה מתמטית, זהו רק אילוץ שרירותי שהוטל כדי למנוע מהכלי שלהם לייצר דברים שטותיים מדי.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 1511.17,
  "end": 1519.35
 },
 {
  "input": "So if you're curious, the way this animation is actually working is I'm taking the 20 most probable next tokens that GPT-3 generates, which seems to be the maximum they'll give me, and then I tweak the probabilities based on an exponent of one 5th.",
  "translatedText": "אז אם אתם סקרנים, הדרך שבה האנימציה הזו עובדת היא שאני לוקח את 20 הטוקנים הבאים הסבירים ביותר ש-GPT-3 מייצר, וזה נראה כמקסימום שהם יתנו לי, ואז אני משנה את ההסתברויות על סמך על אקפוננט של חמישית.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 1519.87,
  "end": 1532.97
 },
 {
  "input": "As another bit of jargon, in the same way that you might call the components of the output of this function probabilities, people often refer to the inputs as logits, or some people say logits, some people say logits, I'm gonna say logits.",
  "translatedText": "בתור עוד קצת ז'רגון, באותו אופן שבו אתם יכולים לקרוא לרכיבי הפלט של הפונקציה הזו הסתברויות, אנשים מתייחסים לעתים קרובות לכניסות כלוג'יטים, או שיש אנשים שאומרים לוגיטים, אני הולך לומר לוג'יטים. .",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 1533.13,
  "end": 1546.15
 },
 {
  "input": "So for instance, when you feed in some text, you have all these word embeddings flow through the network, and you do this final multiplication with the unembedding matrix, machine learning people would refer to the components in that raw, unnormalized output as the logits for the next word prediction.",
  "translatedText": "אז למשל, כשאתם מזינים טקסט כלשהו, כל שיכוני המילים האלו זורמים דרך הרשת, ואתם עושים את הכפל הסופי עם המטריצה של ביטול-השיכון, אנשי למידת מכונה יתייחסו לרכיבים בפלט הגולמי והלא מנורמל בתור הלוג'יטים לחיזוי המילה הבאה.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 1546.53,
  "end": 1561.39
 },
 {
  "input": "A lot of the goal with this chapter was to lay the foundations for understanding the attention mechanism, Karate Kid wax-on-wax-off style.",
  "translatedText": "חלק גדול מהמטרה של הפרק הזה הייתה להניח את היסודות להבנת מנגנון המיקוד (attention), בסגנון wax-on-wax-off בסרט קראטה קיד.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 1563.33,
  "end": 1570.37
 },
 {
  "input": "You see, if you have a strong intuition for word embeddings, for softmax, for how dot products measure similarity, and also the underlying premise that most of the calculations have to look like matrix multiplication with matrices full of tunable parameters, then understanding the attention mechanism, this cornerstone piece in the whole modern boom in AI, should be relatively smooth.",
  "translatedText": "אתם מבינים, אם יש לכם אינטואיציה חזקה לשיכון מילים, לסופטמקס, לאופן שבו מכפלות סקאלריות מודדות דמיון, וגם את הנחת היסוד שרוב החישובים צריכים להיראות כמו כפל מטריצה עם מטריצות שהפרמטרים בהן ניתנים לכוונון, אז להבין את מנגנון המיקוד, שהוא אבן הפינה לכל הבום המודרני ב-AI, צריך להיות חלק יחסית.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 1570.85,
  "end": 1592.21
 },
 {
  "input": "For that, come join me in the next chapter.",
  "translatedText": "בשביל זה, הצטרפו אליי בפרק הבא.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 1592.65,
  "end": 1594.51
 },
 {
  "input": "As I'm publishing this, a draft of that next chapter is available for review by Patreon supporters.",
  "translatedText": "בזמן שאני מפרסם את זה, טיוטה של הפרק הבא זמינה לסקירה של תומכי Patreon.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 1596.39,
  "end": 1601.21
 },
 {
  "input": "A final version should be up in public in a week or two, it usually depends on how much I end up changing based on that review.",
  "translatedText": "גרסה סופית אמורה לעלות לציבור בעוד שבוע או שבועיים, זה בדרך כלל תלוי בסופו של דבר כמה אשנה בהתבסס על הביקורות האלו.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 1601.77,
  "end": 1607.37
 },
 {
  "input": "In the meantime, if you want to dive into attention, and if you want to help the channel out a little bit, it's there waiting.",
  "translatedText": "בינתיים, אם אתם רוצה לצלול למנגנון המיקוד, ואם אתם רוצים לעזור לערוץ קצת, הוא שם ומחכה.",
  "model": "google_nmt",
  "n_reviews": 1,
  "start": 1607.81,
  "end": 1612.41
 }
]
