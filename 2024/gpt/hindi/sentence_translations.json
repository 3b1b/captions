[
 {
  "translatedText": "प्रारंभिक GPT का मतलब जेनरेटिव प्रीट्रेन्ड ट्रांसफार्मर है।",
  "input": "The initials GPT stand for Generative Pretrained Transformer.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 0.0,
  "end": 4.56
 },
 {
  "translatedText": "इसलिए पहला शब्द काफी सीधा है, ये बॉट हैं जो नया टेक्स्ट उत्पन्न करते हैं।",
  "input": "So that first word is straightforward enough, these are bots that generate new text.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 5.22,
  "end": 9.02
 },
 {
  "translatedText": "पूर्व-प्रशिक्षित से तात्पर्य यह है कि मॉडल भारी मात्रा में डेटा से सीखने की प्रक्रिया से कैसे गुजरा, और उपसर्ग संकेत देता है कि अतिरिक्त प्रशिक्षण के साथ विशिष्ट कार्यों पर इसे ठीक करने के लिए अधिक जगह है।",
  "input": "Pretrained refers to how the model went through a process of learning from a massive amount of data, and the prefix insinuates that there's more room to fine-tune it on specific tasks with additional training.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 9.8,
  "end": 20.04
 },
 {
  "translatedText": "लेकिन आखिरी शब्द, यही असली कुंजी है।",
  "input": "But the last word, that's the real key piece.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 20.72,
  "end": 22.9
 },
 {
  "translatedText": "ट्रांसफार्मर एक विशिष्ट प्रकार का तंत्रिका नेटवर्क, एक मशीन लर्निंग मॉडल है, और यह एआई में मौजूदा उछाल का मुख्य आविष्कार है।",
  "input": "A transformer is a specific kind of neural network, a machine learning model, and it's the core invention underlying the current boom in AI.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 23.38,
  "end": 31.0
 },
 {
  "translatedText": "इस वीडियो और आगामी अध्यायों के माध्यम से मैं एक दृश्य-आधारित व्याख्या करना चाहता हूँ कि ट्रांसफार्मर के अंदर वास्तव में क्या होता है।",
  "input": "What I want to do with this video and the following chapters is go through a visually-driven explanation for what actually happens inside a transformer.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 31.74,
  "end": 39.12
 },
 {
  "translatedText": "हम इसके माध्यम से प्रवाहित होने वाले डेटा का अनुसरण करेंगे और चरण दर चरण आगे बढ़ेंगे।",
  "input": "We're going to follow the data that flows through it and go step by step.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 39.7,
  "end": 42.82
 },
 {
  "translatedText": "ट्रांसफार्मरों का उपयोग करके आप कई प्रकार के मॉडल बना सकते हैं।",
  "input": "There are many different kinds of models that you can build using transformers.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 43.44,
  "end": 47.38
 },
 {
  "translatedText": "कुछ मॉडल ऑडियो लेते हैं और एक प्रतिलेख तैयार करते हैं।",
  "input": "Some models take in audio and produce a transcript.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 47.8,
  "end": 50.8
 },
 {
  "translatedText": "यह वाक्य एक मॉडल से आता है जो दूसरी तरफ जाता है, केवल पाठ से सिंथेटिक भाषण उत्पन्न करता है।",
  "input": "This sentence comes from a model going the other way around, producing synthetic speech just from text.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 51.34,
  "end": 56.22
 },
 {
  "translatedText": "डॉली और मिडजर्नी जैसे वे सभी उपकरण जिन्होंने 2022 में दुनिया में तूफान ला दिया, जो एक पाठ विवरण लेते हैं और एक छवि बनाते हैं, ट्रांसफार्मर पर आधारित हैं।",
  "input": "All those tools that took the world by storm in 2022 like Dolly and Midjourney that take in a text description and produce an image are based on transformers.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 56.66,
  "end": 65.52
 },
 {
  "translatedText": "भले ही मैं यह समझ नहीं पा रहा हूं कि एक पाई प्राणी क्या माना जाता है, फिर भी मैं इस बात से हैरान हूं कि इस तरह की चीज दूर से भी संभव है।",
  "input": "Even if I can't quite get it to understand what a pie creature is supposed to be, I'm still blown away that this kind of thing is even remotely possible.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 66.0,
  "end": 73.1
 },
 {
  "translatedText": "और Google द्वारा 2017 में पेश किए गए मूल ट्रांसफार्मर का आविष्कार एक भाषा से दूसरी भाषा में पाठ का अनुवाद करने के विशिष्ट उपयोग के मामले के लिए किया गया था।",
  "input": "And the original transformer introduced in 2017 by Google was invented for the specific use case of translating text from one language into another.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 73.9,
  "end": 82.1
 },
 {
  "translatedText": "लेकिन जिस वैरिएंट पर आप और मैं ध्यान केंद्रित करेंगे, जो कि चैटजीपीटी जैसे टूल का आधार है, वह एक ऐसा मॉडल होगा जिसे पाठ के एक टुकड़े को लेने के लिए प्रशिक्षित किया जाता है, शायद इसके साथ कुछ आसपास की छवियां या ध्वनि भी हो, और एक भविष्यवाणी उत्पन्न करता है परिच्छेद में आगे क्या आता है इसके लिए।",
  "input": "But the variant that you and I will focus on, which is the type that underlies tools like ChatGPT, will be a model that's trained to take in a piece of text, maybe even with some surrounding images or sound accompanying it, and produce a prediction for what comes next in the passage.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 82.66,
  "end": 98.26
 },
 {
  "translatedText": "वह भविष्यवाणी पाठ के कई अलग-अलग हिस्सों पर संभाव्यता वितरण का रूप लेती है जो अनुसरण कर सकती है।",
  "input": "That prediction takes the form of a probability distribution over many different chunks of text that might follow.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 98.6,
  "end": 103.8
 },
 {
  "translatedText": "पहली नज़र में, आपको लग सकता है कि अगले शब्द की भविष्यवाणी करना, नया टेक्स्ट तैयार करने से बहुत अलग लक्ष्य है।",
  "input": "At first glance, you might think that predicting the next word feels like a very different goal from generating new text.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 105.04,
  "end": 109.94
 },
 {
  "translatedText": "लेकिन एक बार जब आपके पास इस तरह का एक भविष्यवाणी मॉडल होता है, तो एक साधारण चीज़ जो आप पाठ का एक लंबा टुकड़ा तैयार करते हैं, वह है इसे काम करने के लिए एक प्रारंभिक स्निपेट देना, इसे अभी उत्पन्न वितरण से एक यादृच्छिक नमूना लेना, उस नमूने को पाठ में जोड़ना , और फिर सभी नए पाठ के आधार पर एक नई भविष्यवाणी करने के लिए पूरी प्रक्रिया को फिर से चलाएं, जिसमें अभी जोड़ा गया पाठ भी शामिल है।",
  "input": "But once you have a prediction model like this, a simple thing you generate a longer piece of text is to give it an initial snippet to work with, have it take a random sample from the distribution it just generated, append that sample to the text, and then run the whole process again to make a new prediction based on all the new text, including what it just added.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 110.18,
  "end": 129.54
 },
 {
  "translatedText": "मैं आपके बारे में नहीं जानता, लेकिन वास्तव में ऐसा नहीं लगता कि इसे वास्तव में काम करना चाहिए।",
  "input": "I don't know about you, but it really doesn't feel like this should actually work.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 130.1,
  "end": 133.0
 },
 {
  "translatedText": "इस एनीमेशन में, उदाहरण के लिए, मैं अपने लैपटॉप पर जीपीटी-2 चला रहा हूं और बीज पाठ के आधार पर एक कहानी तैयार करने के लिए पाठ के अगले हिस्से की बार-बार भविष्यवाणी और नमूना ले रहा हूं।",
  "input": "In this animation, for example, I'm running GPT-2 on my laptop and having it repeatedly predict and sample the next chunk of text to generate a story based on the seed text.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 133.42,
  "end": 142.42
 },
 {
  "translatedText": "कहानी वास्तव में उतनी अर्थपूर्ण नहीं है।",
  "input": "The story just doesn't really make that much sense.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 142.42,
  "end": 146.12
 },
 {
  "translatedText": "लेकिन अगर मैं इसे एपीआई कॉल के लिए जीपीटी-3 में बदल दूं, जो कि एक ही मूल मॉडल है, बस बहुत बड़ा है, तो अचानक लगभग जादुई रूप से हमें एक समझदार कहानी मिलती है, जो यह भी अनुमान लगाती है कि एक पीआई प्राणी एक में रहता होगा गणित और संगणना की भूमि.",
  "input": "But if I swap it out for API calls to GPT-3 instead, which is the same basic model, just much bigger, suddenly almost magically we do get a sensible story, one that even seems to infer that a pi creature would live in a land of math and computation.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 146.5,
  "end": 160.88
 },
 {
  "translatedText": "बार-बार भविष्यवाणी और नमूने लेने की यह प्रक्रिया अनिवार्य रूप से तब होती है जब आप चैटजीपीटी या इनमें से किसी अन्य बड़े भाषा मॉडल के साथ बातचीत करते हैं और आप उन्हें एक समय में एक शब्द उत्पन्न करते हुए देखते हैं।",
  "input": "This process here of repeated prediction and sampling is essentially what's happening when you interact with ChatGPT or any of these other large language models and you see them producing one word at a time.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 161.58,
  "end": 171.88
 },
 {
  "translatedText": "वास्तव में, एक विशेषता जो मुझे बहुत पसंद आएगी, वह है प्रत्येक नए शब्द के लिए अंतर्निहित वितरण को देखने की क्षमता।",
  "input": "In fact, one feature that I would very much enjoy is the ability to see the underlying distribution for each new word that it chooses.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 172.48,
  "end": 179.22
 },
 {
  "translatedText": "आइये, एक ट्रांसफार्मर के माध्यम से डेटा प्रवाह के उच्च स्तरीय पूर्वावलोकन के साथ इसकी शुरुआत करें।",
  "input": "Let's kick things off with a very high level preview of how data flows through a transformer.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 183.82,
  "end": 188.18
 },
 {
  "translatedText": "हम प्रत्येक चरण के विवरण को प्रेरित करने, व्याख्या करने और विस्तार देने में अधिक समय व्यतीत करेंगे, लेकिन मोटे तौर पर, जब इनमें से कोई चैटबॉट कोई शब्द उत्पन्न करता है, तो उसके पीछे क्या चल रहा होता है, यह बताया गया है।",
  "input": "We will spend much more time motivating and interpreting and expanding on the details of each step, but in broad strokes, when one of these chatbots generates a given word, here's what's going on under the hood.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 188.64,
  "end": 198.66
 },
 {
  "translatedText": "सबसे पहले, इनपुट को छोटे टुकड़ों के समूह में तोड़ दिया जाता है।",
  "input": "First, the input is broken up into a bunch of little pieces.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 199.08,
  "end": 202.04
 },
 {
  "translatedText": "इन टुकड़ों को टोकन कहा जाता है, और पाठ के मामले में ये शब्द या शब्दों के छोटे टुकड़े या अन्य सामान्य वर्ण संयोजन होते हैं।",
  "input": "These pieces are called tokens, and in the case of text these tend to be words or little pieces of words or other common character combinations.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 202.62,
  "end": 209.82
 },
 {
  "translatedText": "यदि छवियाँ या ध्वनि शामिल है, तो टोकन उस छवि के छोटे टुकड़े या उस ध्वनि के छोटे टुकड़े हो सकते हैं।",
  "input": "If images or sound are involved, then tokens could be little patches of that image or little chunks of that sound.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 210.74,
  "end": 217.08
 },
 {
  "translatedText": "इनमें से प्रत्येक टोकन फिर एक वेक्टर से जुड़ा होता है, जिसका अर्थ है संख्याओं की कुछ सूची, जिसका उद्देश्य किसी तरह उस टुकड़े के अर्थ को एन्कोड करना है।",
  "input": "Each one of these tokens is then associated with a vector, meaning some list of numbers, which is meant to somehow encode the meaning of that piece.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 217.58,
  "end": 225.36
 },
 {
  "translatedText": "यदि आप इन सदिशों को किसी बहुत उच्च आयामी स्थान में निर्देशांक देने वाले के रूप में सोचते हैं, तो समान अर्थ वाले शब्द प्रायः उन सदिशों पर आते हैं जो उस स्थान में एक दूसरे के करीब होते हैं।",
  "input": "If you think of these vectors as giving coordinates in some very high dimensional space, words with similar meanings tend to land on vectors that are close to each other in that space.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 225.88,
  "end": 234.68
 },
 {
  "translatedText": "इसके बाद सदिशों का यह क्रम एक ऑपरेशन से गुजरता है जिसे अटेंशन ब्लॉक के रूप में जाना जाता है, और यह सदिशों को एक दूसरे से बात करने और अपने मूल्यों को अद्यतन करने के लिए सूचनाओं को आगे-पीछे भेजने की अनुमति देता है।",
  "input": "This sequence of vectors then passes through an operation that's known as an attention block, and this allows the vectors to talk to each other and pass information back and forth to update their values.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 235.28,
  "end": 244.5
 },
 {
  "translatedText": "उदाहरण के लिए, मशीन लर्निंग मॉडल वाक्यांश में मॉडल शब्द का अर्थ फैशन मॉडल वाक्यांश में इसके अर्थ से भिन्न है।",
  "input": "For example, the meaning of the word model in the phrase a machine learning model is different from its meaning in the phrase a fashion model.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 244.88,
  "end": 251.8
 },
 {
  "translatedText": "ध्यान ब्लॉक वह है जो यह पता लगाने के लिए जिम्मेदार है कि संदर्भ में कौन से शब्द किन अन्य शब्दों के अर्थों को अद्यतन करने के लिए प्रासंगिक हैं, और वास्तव में उन अर्थों को कैसे अद्यतन किया जाना चाहिए।",
  "input": "The attention block is what's responsible for figuring out which words in context are relevant to updating the meanings of which other words, and how exactly those meanings should be updated.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 252.26,
  "end": 261.96
 },
 {
  "translatedText": "और फिर, जब भी मैं अर्थ शब्द का उपयोग करता हूं, यह किसी तरह उन वैक्टरों की प्रविष्टियों में पूरी तरह से एन्कोड किया गया है।",
  "input": "And again, whenever I use the word meaning, this is somehow entirely encoded in the entries of those vectors.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 262.5,
  "end": 268.04
 },
 {
  "translatedText": "इसके बाद, ये वेक्टर एक अलग तरह के ऑपरेशन से गुजरते हैं, और जिस स्रोत को आप पढ़ रहे हैं उसके आधार पर इसे मल्टी-लेयर परसेप्ट्रॉन या शायद फीड-फॉरवर्ड लेयर के रूप में संदर्भित किया जाएगा।",
  "input": "After that, these vectors pass through a different kind of operation, and depending on the source that you're reading this will be referred to as a multi-layer perceptron or maybe a feed-forward layer.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 269.18,
  "end": 278.2
 },
 {
  "translatedText": "और यहां वेक्टर एक-दूसरे से बात नहीं करते हैं, वे सभी समानांतर में एक ही ऑपरेशन से गुजरते हैं।",
  "input": "And here the vectors don't talk to each other, they all go through the same operation in parallel.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 278.58,
  "end": 282.66
 },
 {
  "translatedText": "और यद्यपि इस ब्लॉक को समझना थोड़ा कठिन है, बाद में हम इस बारे में बात करेंगे कि यह चरण प्रत्येक वेक्टर के बारे में प्रश्नों की एक लंबी सूची पूछने और फिर उन प्रश्नों के उत्तरों के आधार पर उन्हें अपडेट करने जैसा है।",
  "input": "And while this block is a little bit harder to interpret, later on we'll talk about how the step is a little bit like asking a long list of questions about each vector, and then updating them based on the answers to those questions.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 283.06,
  "end": 294.0
 },
 {
  "translatedText": "इन दोनों ब्लॉकों में सभी ऑपरेशन मैट्रिक्स गुणन के विशाल ढेर की तरह दिखते हैं, और हमारा प्राथमिक काम यह समझना होगा कि अंतर्निहित मैट्रिसेस को कैसे पढ़ा जाए।",
  "input": "All of the operations in both of these blocks look like a giant pile of matrix multiplications, and our primary job is going to be to understand how to read the underlying matrices.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 294.9,
  "end": 305.32
 },
 {
  "translatedText": "मैं बीच में होने वाले कुछ सामान्यीकरण चरणों के बारे में कुछ विवरण नहीं दे रहा हूँ, लेकिन यह आखिरकार एक उच्च-स्तरीय पूर्वावलोकन है।",
  "input": "I'm glossing over some details about some normalization steps that happen in between, but this is after all a high-level preview.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 306.98,
  "end": 312.98
 },
 {
  "translatedText": "उसके बाद, प्रक्रिया अनिवार्य रूप से दोहराई जाती है, आप ध्यान ब्लॉकों और मल्टी-लेयर परसेप्ट्रॉन ब्लॉकों के बीच आगे और पीछे जाते हैं, जब तक कि अंत में आशा न हो कि मार्ग के सभी आवश्यक अर्थ किसी तरह से अंतिम वेक्टर में बेक हो गए हैं क्रम।",
  "input": "After that, the process essentially repeats, you go back and forth between attention blocks and multi-layer perceptron blocks, until at the very end the hope is that all of the essential meaning of the passage has somehow been baked into the very last vector in the sequence.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 313.68,
  "end": 328.5
 },
 {
  "translatedText": "फिर हम उस अंतिम वेक्टर पर एक निश्चित ऑपरेशन करते हैं जो सभी संभावित टोकन, पाठ के सभी संभावित छोटे हिस्सों पर एक संभाव्यता वितरण उत्पन्न करता है जो आगे आ सकता है।",
  "input": "We then perform a certain operation on that last vector that produces a probability distribution over all possible tokens, all possible little chunks of text that might come next.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 328.92,
  "end": 338.42
 },
 {
  "translatedText": "और जैसा कि मैंने कहा, एक बार आपके पास ऐसा उपकरण हो जो पाठ के एक टुकड़े के आधार पर यह पूर्वानुमान लगा दे कि आगे क्या आने वाला है, तो आप इसमें थोड़ा सा बीज पाठ डाल सकते हैं और इसे बार-बार यह पूर्वानुमान लगाने का खेल खेलने दे सकते हैं कि आगे क्या आने वाला है, वितरण से नमूना ले सकते हैं, उसे जोड़ सकते हैं, और फिर बार-बार दोहरा सकते हैं।",
  "input": "And like I said, once you have a tool that predicts what comes next given a snippet of text, you can feed it a little bit of seed text and have it repeatedly play this game of predicting what comes next, sampling from the distribution, appending it, and then repeating over and over.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 338.98,
  "end": 353.08
 },
 {
  "translatedText": "आप में से कुछ लोगों को याद होगा कि चैटजीपीटी के दृश्य में आने से कितने समय पहले, जीपीटी-3 के शुरुआती डेमो इस तरह दिखते थे, आपके पास प्रारंभिक स्निपेट के आधार पर स्वत: पूर्ण कहानियां और निबंध होंगे।",
  "input": "Some of you in the know may remember how long before ChatGPT came into the scene, this is what early demos of GPT-3 looked like, you would have it autocomplete stories and essays based on an initial snippet.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 353.64,
  "end": 364.64
 },
 {
  "translatedText": "इस तरह के एक टूल को चैटबॉट में बनाने के लिए, सबसे आसान शुरुआती बिंदु थोड़ा सा टेक्स्ट होना है जो एक सहायक एआई सहायक के साथ उपयोगकर्ता के इंटरैक्ट करने की सेटिंग स्थापित करता है, जिसे आप सिस्टम प्रॉम्प्ट कहेंगे, और फिर आप इसका उपयोग करेंगे। संवाद के पहले अंश के रूप में उपयोगकर्ता का प्रारंभिक प्रश्न या संकेत, और फिर आपके पास यह भविष्यवाणी करना शुरू हो जाता है कि ऐसा सहायक एआई सहायक जवाब में क्या कहेगा।",
  "input": "To make a tool like this into a chatbot, the easiest starting point is to have a little bit of text that establishes the setting of a user interacting with a helpful AI assistant, what you would call the system prompt, and then you would use the user's initial question or prompt as the first bit of dialogue, and then you have it start predicting what such a helpful AI assistant would say in response.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 365.58,
  "end": 386.94
 },
 {
  "translatedText": "इस कार्य को अच्छी तरह से करने के लिए आवश्यक प्रशिक्षण के चरण के बारे में कहने के लिए और भी बहुत कुछ है, लेकिन उच्च स्तर पर यही विचार है।",
  "input": "There is more to say about an step of training that's required to make this work well, but at a high level this is the idea.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 387.72,
  "end": 393.94
 },
 {
  "translatedText": "इस अध्याय में, आप और मैं नेटवर्क की शुरुआत में, नेटवर्क के अंत में क्या होता है, इसके विवरण पर विस्तार करने जा रहे हैं, और मैं पृष्ठभूमि ज्ञान के कुछ महत्वपूर्ण हिस्सों की समीक्षा करने में भी काफी समय बिताना चाहता हूं। , ट्रांसफार्मर आने के समय तक ऐसी चीजें जो किसी भी मशीन लर्निंग इंजीनियर के लिए दूसरी प्रकृति रही होंगी।",
  "input": "In this chapter, you and I are going to expand on the details of what happens at the very beginning of the network, at the very end of the network, and I also want to spend a lot of time reviewing some important bits of background knowledge, things that would have been second nature to any machine learning engineer by the time transformers came around.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 395.72,
  "end": 412.6
 },
 {
  "translatedText": "यदि आप उस पृष्ठभूमि ज्ञान के साथ सहज हैं और थोड़े अधीर हैं, तो आप बेझिझक अगले अध्याय पर जा सकते हैं, जो ध्यान ब्लॉकों पर ध्यान केंद्रित करने वाला है, जिसे आम तौर पर ट्रांसफार्मर का दिल माना जाता है।",
  "input": "If you're comfortable with that background knowledge and a little impatient, you could feel free to skip to the next chapter, which is going to focus on the attention blocks, generally considered the heart of the transformer.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 413.06,
  "end": 422.78
 },
 {
  "translatedText": "उसके बाद मैं इन मल्टी-लेयर परसेप्ट्रॉन ब्लॉकों के बारे में और अधिक बात करना चाहता हूं, प्रशिक्षण कैसे काम करता है, और कई अन्य विवरण जो उस बिंदु तक छोड़ दिए गए होंगे।",
  "input": "After that I want to talk more about these multi-layer perceptron blocks, how training works, and a number of other details that will have been skipped up to that point.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 423.36,
  "end": 431.68
 },
 {
  "translatedText": "व्यापक संदर्भ के लिए, ये वीडियो गहन शिक्षा के बारे में एक लघु-श्रृंखला के अतिरिक्त हैं, और यह ठीक है यदि आपने पिछले वाले नहीं देखे हैं, मुझे लगता है कि आप इसे क्रम से कर सकते हैं, लेकिन विशेष रूप से ट्रांसफार्मर में गोता लगाने से पहले, मुझे लगता है यह सुनिश्चित करना ज़रूरी है कि गहन शिक्षण के मूल आधार और संरचना के बारे में हम एक ही पृष्ठ पर हों।",
  "input": "For broader context, these videos are additions to a mini-series about deep learning, and it's okay if you haven't watched the previous ones, I think you can do it out of order, but before diving into transformers specifically, I do think it's worth making sure that we're on the same page about the basic premise and structure of deep learning.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 432.18,
  "end": 448.52
 },
 {
  "translatedText": "स्पष्ट बताने के जोखिम पर, यह मशीन लर्निंग का एक दृष्टिकोण है, जो किसी भी मॉडल का वर्णन करता है जहां आप डेटा का उपयोग किसी तरह यह निर्धारित करने के लिए कर रहे हैं कि मॉडल कैसे व्यवहार करता है।",
  "input": "At the risk of stating the obvious, this is one approach to machine learning, which describes any model where you're using data to somehow determine how a model behaves.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 449.02,
  "end": 458.3
 },
 {
  "translatedText": "मेरे कहने का मतलब यह है कि, मान लें कि आप एक ऐसा फ़ंक्शन चाहते हैं जो एक छवि लेता है और यह उसका वर्णन करने वाला एक लेबल तैयार करता है, या पाठ के एक अंश को देखते हुए अगले शब्द की भविष्यवाणी करने का हमारा उदाहरण, या कोई अन्य कार्य जिसमें कुछ तत्व की आवश्यकता होती है अंतर्ज्ञान और पैटर्न पहचान की।",
  "input": "What I mean by that is, let's say you want a function that takes in an image and it produces a label describing it, or our example of predicting the next word given a passage of text, or any other task that seems to require some element of intuition and pattern recognition.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 459.14,
  "end": 472.78
 },
 {
  "translatedText": "इन दिनों हम इसे लगभग मान लेते हैं, लेकिन मशीन लर्निंग के साथ विचार यह है कि कोड में उस कार्य को करने के लिए एक प्रक्रिया को स्पष्ट रूप से परिभाषित करने की कोशिश करने के बजाय, जो कि लोगों ने एआई के शुरुआती दिनों में किया होगा, इसके बजाय आप ट्यून करने योग्य मापदंडों के साथ एक बहुत ही लचीली संरचना स्थापित करें, जैसे कि नॉब और डायल का एक समूह, और फिर किसी तरह आप इस व्यवहार की नकल करने के लिए उन मापदंडों के मूल्यों को ट्विक और ट्यून करने के लिए किसी दिए गए इनपुट के लिए आउटपुट कैसा दिखना चाहिए, इसके कई उदाहरणों का उपयोग करते हैं।",
  "input": "We almost take this for granted these days, but the idea with machine learning is that rather than trying to explicitly define a procedure for how to do that task in code, which is what people would have done in the earliest days of AI, instead you set up a very flexible structure with tunable parameters, like a bunch of knobs and dials, and then somehow you use many examples of what the output should look like for a given input to tweak and tune the values of those parameters to mimic this behavior.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 473.2,
  "end": 499.7
 },
 {
  "translatedText": "उदाहरण के लिए, शायद मशीन लर्निंग का सबसे सरल रूप रैखिक प्रतिगमन है, जहां आपके इनपुट और आउटपुट प्रत्येक एकल संख्याएं हैं, एक घर के वर्ग फुटेज और इसकी कीमत की तरह कुछ, और आप जो चाहते हैं वह इसके माध्यम से सबसे उपयुक्त लाइन ढूंढना है डेटा, आप जानते हैं, भविष्य में घर की कीमतों की भविष्यवाणी करने के लिए।",
  "input": "For example, maybe the simplest form of machine learning is linear regression, where your inputs and outputs are each single numbers, something like the square footage of a house and its price, and what you want is to find a line of best fit through this data, you know, to predict future house prices.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 499.7,
  "end": 516.8
 },
 {
  "translatedText": "उस रेखा को दो निरंतर मापदंडों द्वारा वर्णित किया गया है, ढलान और वाई-अवरोधन कहें, और रैखिक प्रतिगमन का लक्ष्य डेटा से निकटता से मेल खाने के लिए उन मापदंडों को निर्धारित करना है।",
  "input": "That line is described by two continuous parameters, say the slope and the y-intercept, and the goal of linear regression is to determine those parameters to closely match the data.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 517.44,
  "end": 528.16
 },
 {
  "translatedText": "कहने की जरूरत नहीं है, गहन शिक्षण मॉडल बहुत अधिक जटिल हो जाते हैं।",
  "input": "Needless to say, deep learning models get much more complicated.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 528.88,
  "end": 532.1
 },
 {
  "translatedText": "उदाहरण के लिए, GPT-3 में दो नहीं, बल्कि 175 बिलियन पैरामीटर हैं।",
  "input": "GPT-3, for example, has not two, but 175 billion parameters.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 532.62,
  "end": 537.66
 },
 {
  "translatedText": "लेकिन यहाँ एक बात है, यह दी गई बात नहीं है कि आप बड़ी संख्या में मापदंडों के साथ कुछ विशाल मॉडल बना सकते हैं, बिना प्रशिक्षण डेटा को पूरी तरह से ओवरफिट किए या प्रशिक्षित करने के लिए पूरी तरह से कठिन।",
  "input": "But here's the thing, it's not a given that you can create some giant model with a huge number of parameters without it either grossly overfitting the training data or being completely intractable to train.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 538.12,
  "end": 549.56
 },
 {
  "translatedText": "डीप लर्निंग मॉडलों के एक वर्ग का वर्णन करता है जो पिछले कुछ दशकों में उल्लेखनीय रूप से बड़े पैमाने पर साबित हुआ है।",
  "input": "Deep learning describes a class of models that in the last couple decades have proven to scale remarkably well.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 550.26,
  "end": 556.18
 },
 {
  "translatedText": "जो चीज़ उन्हें एकीकृत करती है वह वही प्रशिक्षण एल्गोरिदम है, जिसे बैकप्रॉपैगेशन कहा जाता है, और जिस संदर्भ में हम आपको बताना चाहते हैं वह यह है कि इस प्रशिक्षण एल्गोरिदम को बड़े पैमाने पर अच्छी तरह से काम करने के लिए, इन मॉडलों को एक निश्चित विशिष्ट प्रारूप का पालन करना होगा।",
  "input": "What unifies them is the same training algorithm, called backpropagation, and the context I want you to have as we go in is that in order for this training algorithm to work well at scale, these models have to follow a certain specific format.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 556.48,
  "end": 571.28
 },
 {
  "translatedText": "यदि आप इस प्रारूप को जानते हैं, तो यह कई विकल्पों को समझाने में मदद करता है कि ट्रांसफार्मर भाषा को कैसे संसाधित करता है, जो अन्यथा मनमाना महसूस करने का जोखिम रखता है।",
  "input": "If you know this format going in, it helps to explain many of the choices for how a transformer processes language, which otherwise run the risk of feeling arbitrary.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 571.8,
  "end": 580.4
 },
 {
  "translatedText": "सबसे पहले, आप जो भी मॉडल बना रहे हों, इनपुट को वास्तविक संख्याओं की एक सारणी के रूप में स्वरूपित किया जाना चाहिए।",
  "input": "First, whatever model you're making, the input has to be formatted as an array of real numbers.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 581.44,
  "end": 586.74
 },
 {
  "translatedText": "इसका मतलब संख्याओं की एक सूची हो सकता है, यह एक द्वि-आयामी सरणी हो सकती है, या अक्सर आप उच्च आयामी सरणी से निपटते हैं, जहां इस्तेमाल किया जाने वाला सामान्य शब्द टेंसर होता है।",
  "input": "This could mean a list of numbers, it could be a two-dimensional array, or very often you deal with higher dimensional arrays, where the general term used is tensor.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 586.74,
  "end": 596.0
 },
 {
  "translatedText": "आप अक्सर उस इनपुट डेटा के बारे में सोचते हैं जो उत्तरोत्तर कई अलग-अलग परतों में परिवर्तित हो रहा है, जहां फिर से, प्रत्येक परत हमेशा वास्तविक संख्याओं की किसी प्रकार की सरणी के रूप में संरचित होती है, जब तक कि आप अंतिम परत तक नहीं पहुंच जाते, जिसे आप आउटपुट मानते हैं।",
  "input": "You often think of that input data as being progressively transformed into many distinct layers, where again, each layer is always structured as some kind of array of real numbers, until you get to a final layer which you consider the output.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 596.56,
  "end": 608.68
 },
 {
  "translatedText": "उदाहरण के लिए, हमारे पाठ प्रसंस्करण मॉडल में अंतिम परत संख्याओं की एक सूची है जो सभी संभावित अगले टोकनों के लिए संभाव्यता वितरण का प्रतिनिधित्व करती है।",
  "input": "For example, the final layer in our text processing model is a list of numbers representing the probability distribution for all possible next tokens.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 609.28,
  "end": 617.06
 },
 {
  "translatedText": "गहन शिक्षण में, इन मॉडल मापदंडों को लगभग हमेशा वजन के रूप में संदर्भित किया जाता है, और ऐसा इसलिए है क्योंकि इन मॉडलों की एक प्रमुख विशेषता यह है कि जिस तरह से ये पैरामीटर संसाधित किए जा रहे डेटा के साथ बातचीत करते हैं वह भारित रकम के माध्यम से होता है।",
  "input": "In deep learning, these model parameters are almost always referred to as weights, and this is because a key feature of these models is that the only way these parameters interact with the data being processed is through weighted sums.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 617.82,
  "end": 629.9
 },
 {
  "translatedText": "आप कुछ गैर-रेखीय फ़ंक्शंस भी छिड़कते हैं, लेकिन वे मापदंडों पर निर्भर नहीं होंगे।",
  "input": "You also sprinkle some non-linear functions throughout, but they won't depend on parameters.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 630.34,
  "end": 634.36
 },
 {
  "translatedText": "हालाँकि, आम तौर पर, भारित योगों को पूरी तरह नग्न और इस तरह स्पष्ट रूप से लिखे हुए देखने के बजाय, आप उन्हें मैट्रिक्स वेक्टर उत्पाद में विभिन्न घटकों के रूप में एक साथ पैक किए हुए पाएंगे।",
  "input": "Typically though, instead of seeing the weighted sums all naked and written out explicitly like this, you'll instead find them packaged together as various components in a matrix vector product.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 635.2,
  "end": 645.62
 },
 {
  "translatedText": "यह वही बात कहने के समान है, यदि आप सोचें कि मैट्रिक्स वेक्टर गुणन कैसे काम करता है, तो आउटपुट में प्रत्येक घटक एक भारित योग की तरह दिखता है।",
  "input": "It amounts to saying the same thing, if you think back to how matrix vector multiplication works, each component in the output looks like a weighted sum.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 646.74,
  "end": 654.24
 },
 {
  "translatedText": "आपके और मेरे लिए उन मैट्रिक्स के बारे में सोचना अक्सर अवधारणात्मक रूप से साफ़ होता है जो ट्यून करने योग्य मापदंडों से भरे होते हैं जो संसाधित किए जा रहे डेटा से खींचे गए वैक्टर को बदल देते हैं।",
  "input": "It's just often conceptually cleaner for you and me to think about matrices that are filled with tunable parameters that transform vectors that are drawn from the data being processed.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 654.78,
  "end": 665.42
 },
 {
  "translatedText": "उदाहरण के लिए, GPT-3 में उन 175 बिलियन वज़न को केवल 28,000 से कम अलग-अलग मैट्रिक्स में व्यवस्थित किया गया है।",
  "input": "For example, those 175 billion weights in GPT-3 are organized into just under 28,000 distinct matrices.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 666.34,
  "end": 674.16
 },
 {
  "translatedText": "ये मैट्रिसेस आठ अलग-अलग श्रेणियों में आते हैं, और आप और मैं उन श्रेणियों में से प्रत्येक के माध्यम से यह समझने जा रहे हैं कि कौन सा प्रकार क्या करता है।",
  "input": "Those matrices in turn fall into eight different categories, and what you and I are going to do is step through each one of those categories to understand what that type does.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 674.66,
  "end": 682.7
 },
 {
  "translatedText": "जैसे-जैसे हम आगे बढ़ते हैं, मुझे लगता है कि जीपीटी-3 से विशिष्ट संख्याओं को संदर्भित करना मजेदार है ताकि यह गिना जा सके कि वे 175 अरब कहां से आए हैं।",
  "input": "As we go through, I think it's kind of fun to reference the specific numbers from GPT-3 to count up exactly where those 175 billion come from.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 683.16,
  "end": 691.36
 },
 {
  "translatedText": "भले ही आजकल बड़े और बेहतर मॉडल उपलब्ध हैं, लेकिन इस बड़े भाषा मॉडल में एक विशेष आकर्षण है, जो वास्तव में मशीन लर्निंग समुदायों के बाहर दुनिया का ध्यान आकर्षित करता है।",
  "input": "Even if nowadays there are bigger and better models, this one has a certain charm as the large-language model to really capture the world's attention outside of ML communities.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 691.88,
  "end": 700.74
 },
 {
  "translatedText": "इसके अलावा, व्यावहारिक रूप से कहें तो, कंपनियां अधिक आधुनिक नेटवर्क के लिए विशिष्ट संख्याओं के बारे में अधिक सतर्क रहती हैं।",
  "input": "Also, practically speaking, companies tend to keep much tighter lips around the specific numbers for more modern networks.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 701.44,
  "end": 706.74
 },
 {
  "translatedText": "मैं बस उस दृश्य को सेट करना चाहता हूं, जिसमें आप यह देखने के लिए हुड के नीचे झांकते हैं कि चैटजीपीटी जैसे टूल के अंदर क्या होता है, लगभग सभी वास्तविक गणना मैट्रिक्स वेक्टर गुणन की तरह दिखती है।",
  "input": "I just want to set the scene going in, that as you peek under the hood to see what happens inside a tool like ChatGPT, almost all of the actual computation looks like matrix vector multiplication.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 707.36,
  "end": 717.44
 },
 {
  "translatedText": "अरबों संख्याओं के सागर में खो जाने का थोड़ा जोखिम है, लेकिन आपको अपने दिमाग में मॉडल के भार, जिसे मैं हमेशा नीले या लाल रंग में रंगूंगा, और संसाधित किए जा रहे डेटा, जिसे मैं हमेशा ग्रे रंग में रंगूंगा, के बीच एक बहुत ही स्पष्ट अंतर बना लेना चाहिए।",
  "input": "There's a little bit of a risk getting lost in the sea of billions of numbers, but you should draw a very sharp distinction in your mind between the weights of the model, which I'll always color in blue or red, and the data being processed, which I'll always color in gray.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 717.9,
  "end": 731.84
 },
 {
  "translatedText": "भार ही वास्तविक मस्तिष्क हैं, वे प्रशिक्षण के दौरान सीखी गई चीजें हैं, और वे निर्धारित करते हैं कि यह कैसे व्यवहार करेगा।",
  "input": "The weights are the actual brains, they are the things learned during training, and they determine how it behaves.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 732.18,
  "end": 737.92
 },
 {
  "translatedText": "संसाधित किया जा रहा डेटा किसी भी विशिष्ट इनपुट को, जो किसी दिए गए रन के लिए मॉडल में डाला जाता है, केवल उसी को एनकोड करता है, जैसे कि पाठ का एक उदाहरण स्निपेट।",
  "input": "The data being processed simply encodes whatever specific input is fed into the model for a given run, like an example snippet of text.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 738.28,
  "end": 746.5
 },
 {
  "translatedText": "इन सब बातों को आधार मानकर, आइए इस पाठ प्रसंस्करण उदाहरण के पहले चरण पर चलते हैं, जिसमें इनपुट को छोटे-छोटे टुकड़ों में तोड़ना और उन टुकड़ों को वेक्टर में बदलना है।",
  "input": "With all of that as foundation, let's dig into the first step of this text processing example, which is to break up the input into little chunks and turn those chunks into vectors.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 747.48,
  "end": 756.42
 },
 {
  "translatedText": "मैंने बताया कि उन टुकड़ों को टोकन्स कहा जाता है, जो शब्दों या विराम चिह्नों के टुकड़े हो सकते हैं, लेकिन इस अध्याय में और विशेषकर अगले अध्याय में, मैं बस यह दिखाना चाहता हूँ कि इसे शब्दों में अधिक स्पष्ट रूप से तोड़ा गया है।",
  "input": "I mentioned how those chunks are called tokens, which might be pieces of words or punctuation, but every now and then in this chapter and especially in the next one, I'd like to just pretend that it's broken more cleanly into words.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 757.02,
  "end": 768.08
 },
 {
  "translatedText": "क्योंकि हम मनुष्य शब्दों में सोचते हैं, इससे छोटे उदाहरणों का संदर्भ लेना और प्रत्येक चरण को स्पष्ट करना बहुत आसान हो जाएगा।",
  "input": "Because we humans think in words, this will just make it much easier to reference little examples and clarify each step.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 768.6,
  "end": 774.08
 },
 {
  "translatedText": "मॉडल में एक पूर्वनिर्धारित शब्दावली है, सभी संभावित शब्दों की कुछ सूची है, मान लीजिए उनमें से 50,000 हैं, और पहला मैट्रिक्स जिसका हम सामना करेंगे, जिसे एम्बेडिंग मैट्रिक्स के रूप में जाना जाता है, में इनमें से प्रत्येक शब्द के लिए एक एकल कॉलम है।",
  "input": "The model has a predefined vocabulary, some list of all possible words, say 50,000 of them, and the first matrix that we'll encounter, known as the embedding matrix, has a single column for each one of these words.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 775.26,
  "end": 787.8
 },
 {
  "translatedText": "ये कॉलम ही निर्धारित करते हैं कि प्रत्येक शब्द पहले चरण में किस वेक्टर में बदल जाएगा।",
  "input": "These columns are what determines what vector each word turns into in that first step.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 788.94,
  "end": 793.76
 },
 {
  "translatedText": "हम इसे &#39;We&#39; लेबल देते हैं, तथा हमारे द्वारा देखे जाने वाले सभी मैट्रिसेस की तरह, इसके मान यादृच्छिक रूप से शुरू होते हैं, लेकिन इन्हें डेटा के आधार पर सीखा जाता है।",
  "input": "We label it We, and like all the matrices we see, its values begin random, but they're going to be learned based on data.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 795.1,
  "end": 802.36
 },
 {
  "translatedText": "ट्रांसफॉर्मर से बहुत पहले मशीन लर्निंग में शब्दों को वेक्टर में बदलना आम बात थी, लेकिन अगर आपने इसे पहले कभी नहीं देखा है तो यह थोड़ा अजीब है, और यह आगे आने वाली हर चीज की नींव तय करता है, तो आइए इससे परिचित होने के लिए कुछ समय लें।",
  "input": "Turning words into vectors was common practice in machine learning long before transformers, but it's a little weird if you've never seen it before, and it sets the foundation for everything that follows, so let's take a moment to get familiar with it.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 803.62,
  "end": 815.76
 },
 {
  "translatedText": "हम अक्सर इसे एम्बेडिंग शब्द कहते हैं, जो आपको इन वैक्टरों को बहुत ज्यामितीय रूप से कुछ उच्च आयामी स्थान में बिंदुओं के रूप में सोचने के लिए आमंत्रित करता है।",
  "input": "We often call this embedding a word, which invites you to think of these vectors very geometrically as points in some high dimensional space.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 816.04,
  "end": 823.62
 },
 {
  "translatedText": "3डी स्पेस में बिंदुओं के निर्देशांक के रूप में तीन संख्याओं की सूची को विज़ुअलाइज़ करना कोई समस्या नहीं होगी, लेकिन शब्द एम्बेडिंग बहुत अधिक आयामी होते हैं।",
  "input": "Visualizing a list of three numbers as coordinates for points in 3D space would be no problem, but word embeddings tend to be much much higher dimensional.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 824.18,
  "end": 831.78
 },
 {
  "translatedText": "GPT-3 में उनके 12,288 आयाम हैं, और जैसा कि आप देखेंगे, ऐसे स्थान पर काम करना मायने रखता है जिसमें कई अलग-अलग दिशाएँ हों।",
  "input": "In GPT-3 they have 12,288 dimensions, and as you'll see, it matters to work in a space that has a lot of distinct directions.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 832.28,
  "end": 840.44
 },
 {
  "translatedText": "उसी तरह जैसे आप 3डी स्पेस के माध्यम से एक द्वि-आयामी स्लाइस ले सकते हैं और उस स्लाइस पर सभी बिंदुओं को प्रोजेक्ट कर सकते हैं, शब्द एम्बेडिंग को एनिमेट करने के लिए जो एक साधारण मॉडल मुझे दे रहा है, मैं एक समान चीज़ करने जा रहा हूं इस अत्यधिक उच्च आयामी स्थान के माध्यम से एक त्रि-आयामी स्लाइस चुनकर, और शब्द वैक्टर को उस पर प्रक्षेपित करके और परिणाम प्रदर्शित करके।",
  "input": "In the same way that you could take a two-dimensional slice through a 3D space and project all the points onto that slice, for the sake of animating word embeddings that a simple model is giving me, I'm going to do an analogous thing by choosing a three-dimensional slice through this very high dimensional space, and projecting the word vectors down onto that and displaying the results.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 841.18,
  "end": 860.48
 },
 {
  "translatedText": "यहां बड़ा विचार यह है कि एक मॉडल यह निर्धारित करने के लिए अपने वजन को बदलता और समायोजित करता है कि प्रशिक्षण के दौरान शब्द वास्तव में वैक्टर के रूप में कैसे एम्बेडेड होते हैं, यह एम्बेडिंग के एक सेट पर व्यवस्थित होता है जहां अंतरिक्ष में दिशाओं का एक प्रकार का अर्थपूर्ण अर्थ होता है।",
  "input": "The big idea here is that as a model tweaks and tunes its weights to determine how exactly words get embedded as vectors during training, it tends to settle on a set of embeddings where directions in the space have a kind of semantic meaning.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 861.28,
  "end": 874.44
 },
 {
  "translatedText": "यहां मैं जो सरल शब्द-से-वेक्टर मॉडल चला रहा हूं, उसके लिए यदि मैं उन सभी शब्दों की खोज करूं जिनकी एम्बेडिंग टावर के सबसे करीब है, तो आप देखेंगे कि वे सभी बहुत ही समान टावर-जैसी अनुभूतियां देते हैं।",
  "input": "For the simple word-to-vector model I'm running here, if I run a search for all the words whose embeddings are closest to that of tower, you'll notice how they all seem to give very similar tower-ish vibes.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 874.98,
  "end": 885.9
 },
 {
  "translatedText": "और यदि आप कुछ पायथन बनाना चाहते हैं और घर पर खेलना चाहते हैं, तो यह विशिष्ट मॉडल है जिसका उपयोग मैं एनिमेशन बनाने के लिए कर रहा हूं।",
  "input": "And if you want to pull up some Python and play along at home, this is the specific model that I'm using to make the animations.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 886.34,
  "end": 891.38
 },
 {
  "translatedText": "यह कोई ट्रांसफार्मर नहीं है, लेकिन यह इस विचार को स्पष्ट करने के लिए पर्याप्त है कि अंतरिक्ष में दिशाएँ अर्थपूर्ण अर्थ ले सकती हैं।",
  "input": "It's not a transformer, but it's enough to illustrate the idea that directions in the space can carry semantic meaning.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 891.62,
  "end": 897.6
 },
 {
  "translatedText": "इसका एक बहुत ही उत्कृष्ट उदाहरण यह है कि यदि आप महिला और पुरुष के लिए वेक्टर के बीच अंतर लेते हैं, तो आप एक के सिरे को दूसरे के सिरे से जोड़ने वाले एक छोटे वेक्टर के रूप में कल्पना करेंगे, यह राजा और पुरुष के बीच के अंतर के समान है। रानी।",
  "input": "A very classic example of this is how if you take the difference between the vectors for woman and man, something you would visualize as a little vector connecting the tip of one to the tip of the other, it's very similar to the difference between king and queen.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 898.3,
  "end": 913.2
 },
 {
  "translatedText": "तो मान लीजिए कि आप एक महिला सम्राट के लिए शब्द नहीं जानते हैं, आप इसे राजा को लेकर, इस महिला-पुरुष दिशा को जोड़कर, और उस बिंदु के निकटतम एम्बेडिंग की खोज करके पा सकते हैं।",
  "input": "So let's say you didn't know the word for a female monarch, you could find it by taking king, adding this woman-man direction, and searching for the embeddings closest to that point.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 915.08,
  "end": 925.46
 },
 {
  "translatedText": "कम से कम, एक तरह का।",
  "input": "At least, kind of.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 927.0,
  "end": 928.2
 },
 {
  "translatedText": "यद्यपि यह उस मॉडल का एक उत्कृष्ट उदाहरण है जिसके साथ मैं काम कर रहा हूँ, क्वीन का वास्तविक एम्बेडिंग वास्तव में इससे थोड़ा दूर है, संभवतः इसलिए क्योंकि प्रशिक्षण डेटा में क्वीन का उपयोग जिस तरह से किया जाता है वह किंग का केवल स्त्रीलिंग संस्करण नहीं है।",
  "input": "Despite this being a classic example for the model I'm playing with, the true embedding of queen is actually a little farther off than this would suggest, presumably because the way queen is used in training data is not merely a feminine version of king.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 928.48,
  "end": 940.78
 },
 {
  "translatedText": "जब मैंने इधर-उधर खेला, तो पारिवारिक रिश्ते इस विचार को बेहतर ढंग से चित्रित करने लगे।",
  "input": "When I played around, family relations seemed to illustrate the idea much better.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 941.62,
  "end": 945.26
 },
 {
  "translatedText": "मुद्दा यह है कि, ऐसा लगता है कि प्रशिक्षण के दौरान मॉडल को ऐसे एम्बेडिंग चुनना फायदेमंद लगा, जिससे इस स्थान में एक दिशा लिंग संबंधी जानकारी को एन्कोड कर सके।",
  "input": "The point is, it looks like during training the model found it advantageous to choose embeddings such that one direction in this space encodes gender information.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 946.34,
  "end": 954.9
 },
 {
  "translatedText": "एक और उदाहरण यह है कि यदि आप इटली के एम्बेडिंग को लेते हैं, और आप जर्मनी के एम्बेडिंग को घटाते हैं, और उसे हिटलर के एम्बेडिंग में जोड़ते हैं, तो आपको मुसोलिनी के एम्बेडिंग के बहुत करीब कुछ मिलता है।",
  "input": "Another example is that if you take the embedding of Italy, and you subtract the embedding of Germany, and add that to the embedding of Hitler, you get something very close to the embedding of Mussolini.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 956.8,
  "end": 968.09
 },
 {
  "translatedText": "यह ऐसा है मानो मॉडल ने कुछ दिशाओं को इटालियन-नेस के साथ और कुछ को द्वितीय विश्व युद्ध के धुरी नेताओं के साथ जोड़ना सीख लिया हो।",
  "input": "It's as if the model learned to associate some directions with Italian-ness, and others with WWII axis leaders.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 968.57,
  "end": 975.67
 },
 {
  "translatedText": "इस संबंध में शायद मेरा पसंदीदा उदाहरण यह है कि कैसे कुछ मॉडलों में, यदि आप जर्मनी और जापान के बीच का अंतर लें, और उसे सुशी में जोड़ दें, तो आप ब्रैटवुर्स्ट के बहुत करीब पहुंच जाते हैं।",
  "input": "Maybe my favorite example in this vein is how in some models, if you take the difference between Germany and Japan, and add it to sushi, you end up very close to bratwurst.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 976.47,
  "end": 986.23
 },
 {
  "translatedText": "इसके अलावा, निकटतम पड़ोसियों को खोजने के इस खेल को खेलते समय, मुझे यह देखकर खुशी हुई कि कैट जानवर और राक्षस दोनों के कितने करीब थी।",
  "input": "Also in playing this game of finding nearest neighbors, I was pleased to see how close Kat was to both beast and monster.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 987.35,
  "end": 993.85
 },
 {
  "translatedText": "गणितीय अंतर्ज्ञान का एक अंश, जिसे ध्यान में रखना उपयोगी है, विशेष रूप से अगले अध्याय के लिए, वह यह है कि दो सदिशों के डॉट उत्पाद को यह मापने के तरीके के रूप में देखा जा सकता है कि वे कितनी अच्छी तरह संरेखित हैं।",
  "input": "One bit of mathematical intuition that's helpful to have in mind, especially for the next chapter, is how the dot product of two vectors can be thought of as a way to measure how well they align.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 994.69,
  "end": 1003.85
 },
 {
  "translatedText": "कम्प्यूटेशनल रूप से, डॉट उत्पाद में सभी संगत घटकों को गुणा करना और फिर परिणामों को जोड़ना शामिल होता है, जो कि अच्छा है, क्योंकि हमारी अधिकांश गणना भारित योगों की तरह होनी चाहिए।",
  "input": "Computationally, dot products involve multiplying all the corresponding components and then adding the results, which is good, since so much of our computation has to look like weighted sums.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 1004.87,
  "end": 1014.33
 },
 {
  "translatedText": "ज्यामितीय रूप से, जब वेक्टर समान दिशाओं में इंगित करते हैं तो डॉट उत्पाद सकारात्मक होता है, यदि वे लंबवत होते हैं तो यह शून्य होता है, और जब भी वे विपरीत दिशाओं में इंगित करते हैं तो यह नकारात्मक होता है।",
  "input": "Geometrically, the dot product is positive when vectors point in similar directions, it's zero if they're perpendicular, and it's negative whenever they point in opposite directions.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 1015.19,
  "end": 1025.61
 },
 {
  "translatedText": "उदाहरण के लिए, मान लीजिए कि आप इस मॉडल के साथ खेल रहे थे, और आप परिकल्पना करते हैं कि बिल्लियों माइनस बिल्ली का एम्बेडिंग इस स्थान में एक प्रकार की बहुलता दिशा का प्रतिनिधित्व कर सकता है।",
  "input": "For example, let's say you were playing with this model, and you hypothesize that the embedding of cats minus cat might represent a sort of plurality direction in this space.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 1026.55,
  "end": 1037.01
 },
 {
  "translatedText": "इसका परीक्षण करने के लिए, मैं इस वेक्टर को लेने जा रहा हूं और कुछ एकवचन संज्ञाओं के एम्बेडिंग के विरुद्ध इसके डॉट उत्पाद की गणना करूंगा, और इसकी तुलना संबंधित बहुवचन संज्ञाओं के साथ डॉट उत्पादों से करूंगा।",
  "input": "To test this, I'm going to take this vector and compute its dot product against the embeddings of certain singular nouns, and compare it to the dot products with the corresponding plural nouns.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 1037.43,
  "end": 1047.05
 },
 {
  "translatedText": "यदि आप इसके साथ खेलते हैं, तो आप देखेंगे कि बहुवचन वाले वास्तव में एकवचन वाले की तुलना में लगातार उच्च मूल्य देते हैं, जो दर्शाता है कि वे इस दिशा के साथ अधिक संरेखित हैं।",
  "input": "If you play around with this, you'll notice that the plural ones do indeed seem to consistently give higher values than the singular ones, indicating that they align more with this direction.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 1047.27,
  "end": 1056.07
 },
 {
  "translatedText": "यह भी मजेदार है कि यदि आप इस डॉट उत्पाद को 1, 2, 3 और इसी तरह के शब्दों के एम्बेडिंग के साथ लेते हैं, तो वे बढ़ते हुए मान देते हैं, इसलिए यह ऐसा है जैसे हम मात्रात्मक रूप से माप सकते हैं कि मॉडल किसी दिए गए शब्द को कितना बहुवचन पाता है।",
  "input": "It's also fun how if you take this dot product with the embeddings of the words 1, 2, 3, and so on, they give increasing values, so it's as if we can quantitatively measure how plural the model finds a given word.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 1057.07,
  "end": 1069.03
 },
 {
  "translatedText": "पुनः, शब्दों को किस प्रकार अंतर्निहित किया जाता है, इसकी विशिष्टता डेटा के माध्यम से सीखी जाती है।",
  "input": "Again, the specifics for how words get embedded is learned using data.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 1070.25,
  "end": 1073.57
 },
 {
  "translatedText": "यह एम्बेडिंग मैट्रिक्स, जिसके कॉलम हमें बताते हैं कि प्रत्येक शब्द का क्या होता है, हमारे मॉडल में वज़न का पहला ढेर है।",
  "input": "This embedding matrix, whose columns tell us what happens to each word, is the first pile of weights in our model.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 1074.05,
  "end": 1079.55
 },
 {
  "translatedText": "जीपीटी-3 संख्याओं का उपयोग करते हुए, शब्दावली का आकार विशेष रूप से 50,257 है, और फिर, तकनीकी रूप से इसमें शब्द नहीं, बल्कि टोकन शामिल हैं।",
  "input": "Using the GPT-3 numbers, the vocabulary size specifically is 50,257, and again, technically this consists not of words per se, but of tokens.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 1080.03,
  "end": 1089.77
 },
 {
  "translatedText": "एम्बेडिंग आयाम 12,288 है, और इन्हें गुणा करने पर हमें पता चलता है कि इसमें लगभग 617 मिलियन भार शामिल हैं।",
  "input": "The embedding dimension is 12,288, and multiplying those tells us this consists of about 617 million weights.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 1090.63,
  "end": 1097.79
 },
 {
  "translatedText": "आइए आगे बढ़ें और इसे चालू संख्या में जोड़ें, यह याद रखते हुए कि अंत तक हमें 175 अरब तक गिनती करनी चाहिए।",
  "input": "Let's go ahead and add this to a running tally, remembering that by the end we should count up to 175 billion.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 1098.25,
  "end": 1103.81
 },
 {
  "translatedText": "ट्रांसफार्मर के मामले में, आप वास्तव में इस एम्बेडिंग स्पेस में वैक्टरों के बारे में सोचना चाहते हैं जो केवल व्यक्तिगत शब्दों का प्रतिनिधित्व नहीं करते हैं।",
  "input": "In the case of transformers, you really want to think of the vectors in this embedding space as not merely representing individual words.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 1105.43,
  "end": 1112.13
 },
 {
  "translatedText": "एक बात के लिए, वे उस शब्द की स्थिति के बारे में भी जानकारी को एन्कोड करते हैं, जिसके बारे में हम बाद में बात करेंगे, लेकिन इससे भी महत्वपूर्ण बात यह है कि आपको उनके बारे में संदर्भ में सोखने की क्षमता के बारे में सोचना चाहिए।",
  "input": "For one thing, they also encode information about the position of that word, which we'll talk about later, but more importantly, you should think of them as having the capacity to soak in context.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 1112.55,
  "end": 1122.77
 },
 {
  "translatedText": "उदाहरण के लिए, एक वेक्टर जिसने अपना जीवन किंग शब्द के एम्बेडिंग के रूप में शुरू किया था, इस नेटवर्क में विभिन्न ब्लॉकों द्वारा धीरे-धीरे खींचा और खींचा जा सकता है, ताकि अंत तक यह अधिक विशिष्ट और सूक्ष्म दिशा में इंगित हो जो किसी तरह इसे एन्कोड करता है एक राजा था जो स्कॉटलैंड में रहता था, और जिसने पिछले राजा की हत्या करके अपना पद हासिल किया था, और जिसका वर्णन शेक्सपियर की भाषा में किया जा रहा है।",
  "input": "A vector that started its life as the embedding of the word king, for example, might progressively get tugged and pulled by various blocks in this network, so that by the end it points in a much more specific and nuanced direction that somehow encodes that it was a king who lived in Scotland, and who had achieved his post after murdering the previous king, and who's being described in Shakespearean language.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 1123.35,
  "end": 1144.73
 },
 {
  "translatedText": "किसी दिए गए शब्द की अपनी समझ के बारे में सोचें।",
  "input": "Think about your own understanding of a given word.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 1145.21,
  "end": 1147.79
 },
 {
  "translatedText": "उस शब्द का अर्थ परिवेश द्वारा स्पष्ट रूप से सूचित किया जाता है, और कभी-कभी इसमें बहुत दूर से संदर्भ भी शामिल होता है, इसलिए एक ऐसे मॉडल को एक साथ रखने में जो भविष्यवाणी करने की क्षमता रखता है कि अगला शब्द क्या आएगा, लक्ष्य किसी तरह इसे संदर्भ को शामिल करने के लिए सशक्त बनाना है कुशलता से.",
  "input": "The meaning of that word is clearly informed by the surroundings, and sometimes this includes context from a long distance away, so in putting together a model that has the ability to predict what word comes next, the goal is to somehow empower it to incorporate context efficiently.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 1148.25,
  "end": 1163.39
 },
 {
  "translatedText": "स्पष्ट रूप से कहें तो, पहले चरण में, जब आप इनपुट टेक्स्ट के आधार पर वैक्टर की सरणी बनाते हैं, तो उनमें से प्रत्येक को एम्बेडिंग मैट्रिक्स से आसानी से बाहर निकाल लिया जाता है, इसलिए शुरू में प्रत्येक अपने आसपास से किसी भी इनपुट के बिना केवल एक शब्द का अर्थ ही एनकोड कर सकता है।",
  "input": "To be clear, in that very first step, when you create the array of vectors based on the input text, each one of those is simply plucked out of the embedding matrix, so initially each one can only encode the meaning of a single word without any input from its surroundings.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 1164.05,
  "end": 1176.77
 },
 {
  "translatedText": "लेकिन आपको इस नेटवर्क के प्राथमिक लक्ष्य के बारे में सोचना चाहिए जिससे यह प्रवाहित होता है कि इनमें से प्रत्येक वैक्टर को एक ऐसे अर्थ को ग्रहण करने में सक्षम बनाया जाए जो कि केवल व्यक्तिगत शब्दों का प्रतिनिधित्व करने की तुलना में कहीं अधिक समृद्ध और विशिष्ट हो।",
  "input": "But you should think of the primary goal of this network that it flows through as being to enable each one of those vectors to soak up a meaning that's much more rich and specific than what mere individual words could represent.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 1177.71,
  "end": 1188.97
 },
 {
  "translatedText": "नेटवर्क एक समय में केवल निश्चित संख्या में वैक्टर संसाधित कर सकता है, जिसे इसके संदर्भ आकार के रूप में जाना जाता है।",
  "input": "The network can only process a fixed number of vectors at a time, known as its context size.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 1189.51,
  "end": 1194.17
 },
 {
  "translatedText": "GPT-3 के लिए इसे 2048 के संदर्भ आकार के साथ प्रशिक्षित किया गया था, इसलिए नेटवर्क के माध्यम से प्रवाहित होने वाला डेटा हमेशा 2048 कॉलमों की इस सरणी की तरह दिखता है, जिनमें से प्रत्येक में 12,000 आयाम होते हैं।",
  "input": "For GPT-3 it was trained with a context size of 2048, so the data flowing through the network always looks like this array of 2048 columns, each of which has 12,000 dimensions.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 1194.51,
  "end": 1205.01
 },
 {
  "translatedText": "यह संदर्भ आकार इस बात को सीमित करता है कि ट्रांसफार्मर अगले शब्द का पूर्वानुमान लगाते समय कितना पाठ शामिल कर सकता है।",
  "input": "This context size limits how much text the transformer can incorporate when it's making a prediction of the next word.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 1205.59,
  "end": 1211.83
 },
 {
  "translatedText": "यही कारण है कि कुछ चैटबॉट्स के साथ लंबी बातचीत, जैसे कि चैटजीपीटी के शुरुआती संस्करण, अक्सर ऐसा महसूस कराते थे कि जैसे-जैसे आप बहुत लंबे समय तक बातचीत करते रहे, बॉट बातचीत का सूत्र खो देता है।",
  "input": "This is why long conversations with certain chatbots, like the early versions of ChatGPT, often gave the feeling of the bot kind of losing the thread of conversation as you continued too long.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 1212.37,
  "end": 1222.05
 },
 {
  "translatedText": "हम उचित समय पर ध्यान के विवरण में जाएंगे, लेकिन आगे बढ़ते हुए मैं एक मिनट के लिए बात करना चाहता हूं कि आखिर में क्या होता है।",
  "input": "We'll go into the details of attention in due time, but skipping ahead I want to talk for a minute about what happens at the very end.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 1223.03,
  "end": 1228.81
 },
 {
  "translatedText": "याद रखें, वांछित आउटपुट आगे आने वाले सभी टोकन पर संभाव्यता वितरण है।",
  "input": "Remember, the desired output is a probability distribution over all tokens that might come next.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 1229.45,
  "end": 1234.87
 },
 {
  "translatedText": "उदाहरण के लिए, यदि सबसे अंतिम शब्द प्रोफेसर है, और संदर्भ में हैरी पॉटर जैसे शब्द शामिल हैं, और उसके ठीक पहले हम सबसे कम पसंदीदा शिक्षक को देखते हैं, और साथ ही यदि आप मुझे यह दिखावा करने की छूट देते हैं कि टोकन केवल पूर्ण शब्दों की तरह दिखते हैं, तो एक अच्छी तरह से प्रशिक्षित नेटवर्क जिसने हैरी पॉटर के बारे में ज्ञान अर्जित किया है, संभवतः स्नेप शब्द को एक उच्च संख्या प्रदान करेगा।",
  "input": "For example, if the very last word is Professor, and the context includes words like Harry Potter, and immediately preceding we see least favorite teacher, and also if you give me some leeway by letting me pretend that tokens simply look like full words, then a well-trained network that had built up knowledge of Harry Potter would presumably assign a high number to the word Snape.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 1235.17,
  "end": 1255.83
 },
 {
  "translatedText": "इसमें दो अलग-अलग चरण शामिल हैं।",
  "input": "This involves two different steps.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 1256.51,
  "end": 1257.97
 },
 {
  "translatedText": "पहला तरीका एक अन्य मैट्रिक्स का उपयोग करना है जो उस संदर्भ में अंतिम वेक्टर को 50,000 मानों की सूची में मैप करता है, जो शब्दावली में प्रत्येक टोकन के लिए एक होता है।",
  "input": "The first one is to use another matrix that maps the very last vector in that context to a list of 50,000 values, one for each token in the vocabulary.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 1258.31,
  "end": 1267.61
 },
 {
  "translatedText": "फिर एक फ़ंक्शन है जो इसे संभाव्यता वितरण में सामान्यीकृत करता है, इसे सॉफ्टमैक्स कहा जाता है और हम बस एक सेकंड में इसके बारे में अधिक बात करेंगे, लेकिन इससे पहले भविष्यवाणी करने के लिए केवल इस अंतिम एम्बेडिंग का उपयोग करना थोड़ा अजीब लग सकता है, जब आख़िरकार उस अंतिम चरण में परत में हजारों अन्य वेक्टर अपने स्वयं के संदर्भ-समृद्ध अर्थों के साथ वहां बैठे हैं।",
  "input": "Then there's a function that normalizes this into a probability distribution, it's called Softmax and we'll talk more about it in just a second, but before that it might seem a little bit weird to only use this last embedding to make a prediction, when after all in that last step there are thousands of other vectors in the layer just sitting there with their own context-rich meanings.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 1268.17,
  "end": 1288.29
 },
 {
  "translatedText": "इसका संबंध इस तथ्य से है कि प्रशिक्षण प्रक्रिया में यह अधिक कुशल हो जाता है यदि आप अंतिम परत में उन वैक्टरों में से प्रत्येक का उपयोग एक साथ भविष्यवाणी करने के लिए करते हैं कि इसके तुरंत बाद क्या आएगा।",
  "input": "This has to do with the fact that in the training process it turns out to be much more efficient if you use each one of those vectors in the final layer to simultaneously make a prediction for what would come immediately after it.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 1288.93,
  "end": 1300.27
 },
 {
  "translatedText": "प्रशिक्षण के बारे में बाद में और भी बहुत कुछ कहा जाना बाकी है, लेकिन मैं अभी उस पर प्रकाश डालना चाहता हूं।",
  "input": "There's a lot more to be said about training later on, but I just want to call that out right now.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 1300.97,
  "end": 1305.09
 },
 {
  "translatedText": "इस मैट्रिक्स को अनएम्बेडिंग मैट्रिक्स कहा जाता है और हम इसे WU लेबल देते हैं।",
  "input": "This matrix is called the Unembedding matrix and we give it the label WU.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 1305.73,
  "end": 1309.69
 },
 {
  "translatedText": "फिर, हमारे द्वारा देखे जाने वाले सभी वज़न मैट्रिक्स की तरह, इसकी प्रविष्टियाँ यादृच्छिक रूप से शुरू होती हैं, लेकिन उन्हें प्रशिक्षण प्रक्रिया के दौरान सीखा जाता है।",
  "input": "Again, like all the weight matrices we see, its entries begin at random, but they are learned during the training process.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 1310.21,
  "end": 1315.91
 },
 {
  "translatedText": "हमारे कुल पैरामीटर गणना पर स्कोर रखते हुए, इस अनएम्बेडिंग मैट्रिक्स में शब्दावली में प्रत्येक शब्द के लिए एक पंक्ति होती है, और प्रत्येक पंक्ति में एम्बेडिंग आयाम के समान तत्वों की संख्या होती है।",
  "input": "Keeping score on our total parameter count, this Unembedding matrix has one row for each word in the vocabulary, and each row has the same number of elements as the embedding dimension.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 1316.47,
  "end": 1325.65
 },
 {
  "translatedText": "यह एम्बेडिंग मैट्रिक्स के समान है, बस ऑर्डर की अदला-बदली के साथ, यह नेटवर्क में अन्य 617 मिलियन पैरामीटर जोड़ता है, जिसका अर्थ है कि अब तक हमारी गिनती एक अरब से थोड़ी अधिक है, हमारे 175 बिलियन का एक छोटा लेकिन पूरी तरह से महत्वहीन अंश नहीं है। कुल मिलाकर समाप्त हो जाएगा.",
  "input": "It's very similar to the embedding matrix, just with the order swapped, so it adds another 617 million parameters to the network, meaning our count so far is a little over a billion, a small but not wholly insignificant fraction of the 175 billion we'll end up with in total.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 1326.41,
  "end": 1341.79
 },
 {
  "translatedText": "इस अध्याय के अंतिम लघु पाठ के रूप में, मैं इस सॉफ्टमैक्स फ़ंक्शन के बारे में अधिक बात करना चाहता हूं, क्योंकि एक बार जब हम ध्यान ब्लॉक में गोता लगाते हैं तो यह हमारे लिए एक और उपस्थिति बनाता है।",
  "input": "As the last mini-lesson for this chapter, I want to talk more about this softmax function, since it makes another appearance for us once we dive into the attention blocks.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 1342.55,
  "end": 1350.61
 },
 {
  "translatedText": "विचार यह है कि यदि आप संख्याओं के अनुक्रम को संभाव्यता वितरण के रूप में कार्य करना चाहते हैं, जैसे कि सभी संभावित अगले शब्दों पर वितरण, तो प्रत्येक मान 0 और 1 के बीच होना चाहिए, और आपको उन सभी को 1 तक जोड़ने की भी आवश्यकता है .",
  "input": "The idea is that if you want a sequence of numbers to act as a probability distribution, say a distribution over all possible next words, then each value has to be between 0 and 1, and you also need all of them to add up to 1.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 1351.43,
  "end": 1364.59
 },
 {
  "translatedText": "हालाँकि, यदि आप सीखने का खेल खेल रहे हैं जहाँ आप जो कुछ भी करते हैं वह मैट्रिक्स-वेक्टर गुणन जैसा दिखता है, तो डिफ़ॉल्ट रूप से आपको मिलने वाले आउटपुट इसका बिल्कुल भी पालन नहीं करते हैं।",
  "input": "However, if you're playing the learning game where everything you do looks like matrix-vector multiplication, the outputs you get by default don't abide by this at all.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 1365.25,
  "end": 1374.81
 },
 {
  "translatedText": "ये मान प्रायः ऋणात्मक होते हैं, या 1 से बहुत बड़े होते हैं, तथा लगभग निश्चित रूप से इनका योग 1 नहीं होता।",
  "input": "The values are often negative, or much bigger than 1, and they almost certainly don't add up to 1.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 1375.33,
  "end": 1379.87
 },
 {
  "translatedText": "सॉफ्टमैक्स संख्याओं की एक मनमानी सूची को एक वैध वितरण में इस तरह से बदलने का मानक तरीका है कि सबसे बड़ा मान 1 के सबसे करीब हो, और छोटे मान 0 के बहुत करीब हों।",
  "input": "Softmax is the standard way to turn an arbitrary list of numbers into a valid distribution in such a way that the largest values end up closest to 1, and the smaller values end up very close to 0.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 1380.51,
  "end": 1391.29
 },
 {
  "translatedText": "वास्तव में आपको बस इतना ही जानने की जरूरत है।",
  "input": "That's all you really need to know.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 1391.83,
  "end": 1393.07
 },
 {
  "translatedText": "लेकिन यदि आप उत्सुक हैं, तो इसके काम करने का तरीका यह है कि पहले e को प्रत्येक संख्या की घात तक बढ़ाया जाए, जिसका अर्थ है कि अब आपके पास सकारात्मक मूल्यों की एक सूची है, और फिर आप उन सभी सकारात्मक मूल्यों का योग ले सकते हैं और विभाजित कर सकते हैं प्रत्येक पद को उस योग से, जो इसे एक सूची में सामान्यीकृत करता है जो 1 तक जुड़ जाता है।",
  "input": "But if you're curious, the way it works is to first raise e to the power of each of the numbers, which means you now have a list of positive values, and then you can take the sum of all those positive values and divide each term by that sum, which normalizes it into a list that adds up to 1.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 1393.09,
  "end": 1409.47
 },
 {
  "translatedText": "आप देखेंगे कि यदि इनपुट में से एक संख्या बाकी की तुलना में सार्थक रूप से बड़ी है, तो आउटपुट में संबंधित पद वितरण पर हावी हो जाता है, इसलिए यदि आप इससे नमूना ले रहे हैं तो आप लगभग निश्चित रूप से अधिकतम इनपुट ही चुन रहे होंगे।",
  "input": "You'll notice that if one of the numbers in the input is meaningfully bigger than the rest, then in the output the corresponding term dominates the distribution, so if you were sampling from it you'd almost certainly just be picking the maximizing input.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 1410.17,
  "end": 1422.47
 },
 {
  "translatedText": "लेकिन यह केवल अधिकतम चुनने की तुलना में अधिक सरल है, क्योंकि जब अन्य मान समान रूप से बड़े होते हैं, तो उन्हें भी वितरण में सार्थक भार मिलता है, और जब आप इनपुट में निरंतर परिवर्तन करते हैं, तो सब कुछ निरंतर बदलता रहता है।",
  "input": "But it's softer than just picking the max in the sense that when other values are similarly large, they also get meaningful weight in the distribution, and everything changes continuously as you continuously vary the inputs.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 1422.99,
  "end": 1434.65
 },
 {
  "translatedText": "कुछ स्थितियों में, जैसे कि जब चैटजीपीटी अगले शब्द बनाने के लिए इस वितरण का उपयोग कर रहा है, तो इस फ़ंक्शन में थोड़ा अतिरिक्त मसाला जोड़कर, उन घातांकों के हर में एक निरंतर टी डालकर थोड़ा अतिरिक्त मनोरंजन की गुंजाइश होती है।",
  "input": "In some situations, like when ChatGPT is using this distribution to create a next word, there's room for a little bit of extra fun by adding a little extra spice into this function, with a constant t thrown into the denominator of those exponents.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 1435.13,
  "end": 1448.91
 },
 {
  "translatedText": "हम इसे तापमान कहते हैं, क्योंकि यह अस्पष्ट रूप से कुछ थर्मोडायनामिक्स समीकरणों में तापमान की भूमिका से मिलता जुलता है, और इसका प्रभाव यह है कि जब t बड़ा होता है, तो आप निम्न मानों को अधिक महत्व देते हैं, जिसका अर्थ है कि वितरण थोड़ा अधिक समान है, और यदि t छोटा है, तो बड़े मान अधिक आक्रामक रूप से हावी होंगे, जहां चरम में, t को शून्य के बराबर सेट करने का मतलब है कि सारा भार अधिकतम मूल्य पर चला जाता है।",
  "input": "We call it the temperature, since it vaguely resembles the role of temperature in certain thermodynamics equations, and the effect is that when t is larger, you give more weight to the lower values, meaning the distribution is a little bit more uniform, and if t is smaller, then the bigger values will dominate more aggressively, where in the extreme, setting t equal to zero means all of the weight goes to maximum value.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 1449.55,
  "end": 1472.79
 },
 {
  "translatedText": "उदाहरण के लिए, मैं जीपीटी-3 से बीज पाठ के साथ एक कहानी तैयार करवाऊंगा, एक समय ए था, लेकिन मैं प्रत्येक मामले में अलग-अलग तापमान का उपयोग करूंगा।",
  "input": "For example, I'll have GPT-3 generate a story with the seed text, once upon a time there was A, but I'll use different temperatures in each case.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 1473.47,
  "end": 1482.95
 },
 {
  "translatedText": "तापमान शून्य का अर्थ है कि यह हमेशा सबसे पूर्वानुमानित शब्द के साथ आता है, और आपको जो मिलता है वह गोल्डीलॉक्स का एक घिसा-पिटा व्युत्पन्न होता है।",
  "input": "Temperature zero means that it always goes with the most predictable word, and what you get ends up being a trite derivative of Goldilocks.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 1483.63,
  "end": 1492.37
 },
 {
  "translatedText": "उच्च तापमान उसे कम संभावना वाले शब्दों को चुनने का मौका देता है, लेकिन यह एक जोखिम के साथ आता है।",
  "input": "A higher temperature gives it a chance to choose less likely words, but it comes with a risk.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 1493.01,
  "end": 1497.91
 },
 {
  "translatedText": "इस मामले में, कहानी दक्षिण कोरिया के एक युवा वेब कलाकार के बारे में अधिक मूल रूप से शुरू होती है, लेकिन यह जल्द ही बकवास में बदल जाती है।",
  "input": "In this case, the story starts out more originally, about a young web artist from South Korea, but it quickly degenerates into nonsense.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 1498.23,
  "end": 1506.01
 },
 {
  "translatedText": "तकनीकी रूप से कहें तो, एपीआई वास्तव में आपको 2 से अधिक तापमान चुनने की अनुमति नहीं देता है।",
  "input": "Technically speaking, the API doesn't actually let you pick a temperature bigger than 2.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 1506.95,
  "end": 1510.83
 },
 {
  "translatedText": "इसका कोई गणितीय कारण नहीं है, यह केवल एक मनमाना अवरोध है जो उनके उपकरण को उन चीजों को उत्पन्न करने से रोकने के लिए लगाया गया है जो बहुत ही निरर्थक हैं।",
  "input": "There's no mathematical reason for this, it's just an arbitrary constraint imposed to keep their tool from being seen generating things that are too nonsensical.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 1511.17,
  "end": 1519.35
 },
 {
  "translatedText": "इसलिए यदि आप उत्सुक हैं, तो यह एनीमेशन वास्तव में जिस तरह से काम कर रहा है, मैं जीपीटी-3 द्वारा उत्पन्न 20 सबसे संभावित अगले टोकन ले रहा हूं, जो कि वे मुझे देंगे, ऐसा लगता है, और फिर मैं संभावनाओं के आधार पर बदलाव करता हूं 1 5वें के प्रतिपादक पर।",
  "input": "So if you're curious, the way this animation is actually working is I'm taking the 20 most probable next tokens that GPT-3 generates, which seems to be the maximum they'll give me, and then I tweak the probabilities based on an exponent of 1 5th.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 1519.87,
  "end": 1532.97
 },
 {
  "translatedText": "शब्दजाल के एक अन्य अंश के रूप में, जिस तरह से आप इस फ़ंक्शन के आउटपुट के घटकों को प्रायिकताएँ कह सकते हैं, लोग अक्सर इनपुट को लॉगिट्स के रूप में संदर्भित करते हैं, या कुछ लोग लॉगिट्स कहते हैं, कुछ लोग लॉगिट्स कहते हैं, मैं लॉगिट्स कहने जा रहा हूँ।",
  "input": "As another bit of jargon, in the same way that you might call the components of the output of this function probabilities, people often refer to the inputs as logits, or some people say logits, some people say logits, I'm gonna say logits.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 1533.13,
  "end": 1546.15
 },
 {
  "translatedText": "उदाहरण के लिए, जब आप कुछ पाठ फीड करते हैं, तो आपके पास ये सभी शब्द एम्बेडिंग नेटवर्क के माध्यम से प्रवाहित होते हैं, और आप अनएम्बेडिंग मैट्रिक्स के साथ यह अंतिम गुणन करते हैं, मशीन लर्निंग वाले लोग उस कच्चे, असामान्य आउटपुट में घटकों को अगले शब्द की भविष्यवाणी के लिए लॉगिट के रूप में संदर्भित करेंगे।",
  "input": "So for instance, when you feed in some text, you have all these word embeddings flow through the network, and you do this final multiplication with the unembedding matrix, machine learning people would refer to the components in that raw, unnormalized output as the logits for the next word prediction.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 1546.53,
  "end": 1561.39
 },
 {
  "translatedText": "इस अध्याय का अधिकांश लक्ष्य ध्यान तंत्र, कराटे किड वैक्स-ऑन-वैक्स-ऑफ शैली को समझने के लिए नींव रखना था।",
  "input": "A lot of the goal with this chapter was to lay the foundations for understanding the attention mechanism, Karate Kid wax-on-wax-off style.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 1563.33,
  "end": 1570.37
 },
 {
  "translatedText": "आप देखते हैं, यदि आपके पास शब्द एम्बेडिंग के लिए, सॉफ्टमैक्स के लिए, डॉट उत्पाद समानता को कैसे मापते हैं, इसके लिए एक मजबूत अंतर्ज्ञान है, और यह अंतर्निहित आधार भी है कि अधिकांश गणनाओं को ट्यून करने योग्य पैरामीटर से भरे मैट्रिक्स के साथ मैट्रिक्स गुणन की तरह दिखना है, तो ध्यान को समझें तंत्र, एआई में संपूर्ण आधुनिक उछाल में यह आधारशिला टुकड़ा, अपेक्षाकृत चिकना होना चाहिए।",
  "input": "You see, if you have a strong intuition for word embeddings, for softmax, for how dot products measure similarity, and also the underlying premise that most of the calculations have to look like matrix multiplication with matrices full of tunable parameters, then understanding the attention mechanism, this cornerstone piece in the whole modern boom in AI, should be relatively smooth.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 1570.85,
  "end": 1592.21
 },
 {
  "translatedText": "इसके लिए, अगले अध्याय में मेरे साथ आइए।",
  "input": "For that, come join me in the next chapter.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 1592.65,
  "end": 1594.51
 },
 {
  "translatedText": "जैसा कि मैं इसे प्रकाशित कर रहा हूं, उस अगले अध्याय का एक मसौदा पैट्रियन समर्थकों द्वारा समीक्षा के लिए उपलब्ध है।",
  "input": "As I'm publishing this, a draft of that next chapter is available for review by Patreon supporters.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 1596.39,
  "end": 1601.21
 },
 {
  "translatedText": "अंतिम संस्करण एक या दो सप्ताह में सार्वजनिक हो जाना चाहिए, यह आमतौर पर इस पर निर्भर करता है कि मैं उस समीक्षा के आधार पर कितना बदलाव करता हूँ।",
  "input": "A final version should be up in public in a week or two, it usually depends on how much I end up changing based on that review.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 1601.77,
  "end": 1607.37
 },
 {
  "translatedText": "इस बीच, यदि आप ध्यान आकर्षित करना चाहते हैं, और चैनल की थोड़ी मदद करना चाहते हैं, तो यह आपकी प्रतीक्षा कर रहा है।",
  "input": "In the meantime, if you want to dive into attention, and if you want to help the channel out a little bit, it's there waiting.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 1607.81,
  "end": 1612.41
 }
]