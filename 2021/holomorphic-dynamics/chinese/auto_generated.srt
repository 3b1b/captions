1
00:00:00,000 --> 00:00:03,780
今天我想告诉你们一个叫做全纯动力学的数学知识。

2
00:00:04,440 --> 00:00:07,886
这是研究曼德尔布罗特集等事物的领域，事实上，

3
00:00:07,886 --> 00:00:11,803
我今天的 主要目标之一是向您展示这个标志性的形状，

4
00:00:11,803 --> 00:00:15,876
数学的典型 代表，如何以比最初的定义所暗示的更普遍的

5
00:00:15,876 --> 00:00:16,660
方式出现。

6
00:00:17,380 --> 00:00:21,094
现在，这个领域也与我们在上一个视频中讨论的牛顿 

7
00:00:21,094 --> 00:00:24,654
分形密切相关，我们在本视频结束时的另一个目标 

8
00:00:24,654 --> 00:00:28,060
将是帮助解决我们在那里遇到的一些松散的问题。

9
00:00:34,599 --> 00:00:37,540
首先，全纯这个词可能看起来有点奇怪。

10
00:00:37,640 --> 00:00:44,620
它指的是具有复数 输入和复数输出的函数，您也可以对其求导。

11
00:00:45,180 --> 00:00:48,153
基本上，在这种情况下导数的含义是，

12
00:00:48,153 --> 00:00:52,876
当您放大函数在给定点 附近、该点及其邻居的行为方式时，

13
00:00:52,876 --> 00:00:57,600
它看起来大致就像缩放和 旋转，就像乘以某个复杂的常数。

14
00:00:58,240 --> 00:01:02,409
我们稍后会详细讨论 这一点，但现在知道它包括您可以写

15
00:01:02,409 --> 00:01:06,740
下的大多数 普通函数，例如多项式、指数、三角函数等等。

16
00:01:07,380 --> 00:01:11,984
这里标题中的相关动态来自于询问当您一遍又 

17
00:01:11,984 --> 00:01:18,343
一遍地重复应用这些函数之一时会发生什么， 即评估某些输入，

18
00:01:18,343 --> 00:01:24,044
然后评估您刚刚得到的相同 函数，然后再次执行此操作，

19
00:01:24,044 --> 00:01:25,360
一次又一次。

20
00:01:26,860 --> 00:01:30,180
有时由此产生的点的模式会陷入循环。

21
00:01:31,440 --> 00:01:34,700
其他时候，序列只会接近某种极限点。

22
00:01:35,740 --> 00:01:40,283
或者，序列可能会变得越来越大，最终飞向无穷 远，

23
00:01:40,283 --> 00:01:43,880
数学家也认为这接近极限点，即无穷远点。

24
00:01:45,240 --> 00:01:48,860
而有时，它们却完全没有模式，行为也很混乱。

25
00:01:50,520 --> 00:01:54,083
令人惊讶的是，对于您可能写下的各种函数，

26
00:01:54,083 --> 00:01:59,072
当您 尝试做一些事情来可视化这些不同的可能行为出 现时，

27
00:01:59,072 --> 00:02:02,280
它通常会导致一些极其复杂的分形图案。

28
00:02:03,540 --> 00:02:06,900
看过上一个视频的人已经看到了一个很好的例子。

29
00:02:07,400 --> 00:02:11,619
有一种称为牛顿法的算法，它找到某个多项式 p 的根 ，

30
00:02:11,619 --> 00:02:15,369
其工作方式基本上是重复迭代表达式 x 减去 x 

31
00:02:15,369 --> 00:02:19,120
的 p 除以 x 的 p 素数，p 素数是导数。

32
00:02:19,820 --> 00:02:25,100
当您的初始种子值位于该多项式根的松散附近（x 的 p 等于 

33
00:02:25,100 --> 00:02:30,380
0 的值）时，此过程会生成一个真正快速收敛到该 根的值序列。

34
00:02:30,660 --> 00:02:32,620
这使得它成为实践中有用的算法。

35
00:02:33,520 --> 00:02:36,341
但随后我们尝 试在复平面中执行此操作，

36
00:02:36,341 --> 00:02:39,310
查看许多可能的种子值并询问这些种子值中 

37
00:02:39,310 --> 00:02:42,280
的每一个最终可能位于复平面中的哪个根上。

38
00:02:42,280 --> 00:02:45,822
然后，我们将一种颜色 与每个根相关联，

39
00:02:45,822 --> 00:02:50,296
然后根据从该像素开始的种子值最终落在哪个根上 ，

40
00:02:50,296 --> 00:02:52,720
对平面的每个像素进行着色。

41
00:02:53,740 --> 00:02:57,053
我们得到的结果是一些极 其复杂的图片，

42
00:02:57,053 --> 00:02:59,320
颜色之间有粗糙的分形边界。

43
00:03:02,080 --> 00:03:05,706
现在，在这个示例中，如果您查看我们实际迭代的函数，

44
00:03:05,706 --> 00:03:09,478
例如 对于多项式的某些特定选择，例如 z 立方减一，

45
00:03:09,478 --> 00:03:13,394
您可以重 写整个表达式，使其看起来像一个多项式除以另一

46
00:03:13,394 --> 00:03:14,120
个多项式。

47
00:03:15,019 --> 00:03:18,040
数学家将这类函数称为有理函数。

48
00:03:18,640 --> 00:03:21,542
如果您忘记了这是由 牛顿方法产生的事实，

49
00:03:21,542 --> 00:03:25,460
您可以合理地问当您迭代任何其他有理函数 时会发生什么。

50
00:03:26,120 --> 00:03:29,420
事实上，这正是数学家皮埃尔·法图和加斯顿· 

51
00:03:29,420 --> 00:03:32,420
朱莉娅在第一次世界大战后几年所做的事情。

52
00:03:32,420 --> 00:03:35,217
他们建立了一个 令人惊讶的丰富理论，

53
00:03:35,217 --> 00:03:38,170
说明当你迭代这些有理函数时会发生什么，

54
00:03:38,170 --> 00:03:41,899
这 一点尤其令人印象深刻，因为他们没有计算机可以

55
00:03:41,899 --> 00:03:43,920
像你我一样将这些 可视化。

56
00:03:44,400 --> 00:03:46,380
记住这两个名字，稍后会出现。

57
00:03:47,160 --> 00:03:51,040
到目前为止，您可能像 这样研究的有理函数的最

58
00:03:51,040 --> 00:03:55,449
流行的示例以及随之而来的分形是最简单的 函数之一，

59
00:03:55,449 --> 00:03:58,800
z 平方加 c，其中 c 是某个常数。

60
00:03:59,880 --> 00:04:02,664
我猜想这对你们 中的许多人来说至少有些熟悉，

61
00:04:02,664 --> 00:04:05,701
但在这里快速总结一下这个故事肯定 没有什么坏处，

62
00:04:05,701 --> 00:04:07,980
因为它可以帮助为以后的事情奠定基础。

63
00:04:07,980 --> 00:04:12,563
对于这个游戏 ，我们将把 c 视为一个可以更改的值，

64
00:04:12,563 --> 00:04:15,560
并且它将显示为这个可移动的 黄点。

65
00:04:16,200 --> 00:04:21,740
对于实际的迭代过程，我们总是从 z 的初始值为零开始。

66
00:04:22,640 --> 00:04:27,240
因此，迭代此函数一次后，执行 z 平方加 c，得到 c。

67
00:04:27,900 --> 00:04:33,360
如果第二次迭 代，将该值代入函数，您将得到 c 平方加 c。

68
00:04:33,960 --> 00:04:45,340
当我在此处 更改值 c 时，您可以看到第二个值如何同步移动。

69
00:04:45,340 --> 00:04:49,470
然后我们可 以插入第二个值来获取 z3，

70
00:04:49,470 --> 00:04:55,460
插入第三个值来获取 z4，并继续这 样，可视化我们的值链。

71
00:04:55,460 --> 00:04:58,340
因此，如果我继续对前多个值执行多次不同的操作，

72
00:04:58,340 --> 00:05:01,220
 对于 c 的某些选择，这个过程仍然是有限的。

73
00:05:01,220 --> 00:05:02,020
您仍然可以在屏幕上看到这一 切。

74
00:05:02,020 --> 00:05:06,097
有时它看起来像是爆炸了，你实际上可以证明，

75
00:05:06,097 --> 00:05:09,980
如果它变得大到二， 它就会爆炸到无穷大。

76
00:05:09,980 --> 00:05:13,824
如果你将平面上保持黑色边界的点着色 ，

77
00:05:13,824 --> 00:05:19,489
并根据过程冲向无穷大的速度为不同的值分配其他颜色渐变 ，

78
00:05:19,489 --> 00:05:25,560
你就会得到所有数学中最具标志性的图像之一，曼德尔布 罗特集。

79
00:05:25,560 --> 00:05:28,564
顺便说一下，这个轨迹的交互式点和棒可视化很大程度上受到了 

80
00:05:28,564 --> 00:05:30,740
Ben Spark 的插图和他制作的关于 

81
00:05:30,740 --> 00:05:33,227
Mandelbrot 集的 Numberphi 

82
00:05:33,227 --> 00:05:35,300
le 视频的启发，这很棒，你应该观看它。

83
00:05:35,300 --> 00:05:41,760
老实说，我认为这太有趣了，无法在这 里重新实现。

84
00:05:41,760 --> 00:05:45,440
我还强烈推荐关于 ako 的互动文章。

85
00:05:45,440 --> 00:05:49,700
为那些还没有 阅读过这些内容的人提供有关所有这些内容的信息。

86
00:05:49,700 --> 00:05:53,506
Ben Spa rk 插图的优点在于它阐明了 

87
00:05:53,506 --> 00:05:58,140
Mandelbrot 集的每个不同部分实 际代表的含义。

88
00:05:58,940 --> 00:06:01,783
这个最大的心形部分包括 c 的值，

89
00:06:01,783 --> 00:06:04,460
以便该过程 最终收敛到某个极限。

90
00:06:05,280 --> 00:06:10,830
左侧的大圆圈表示进程陷入两个 值之间的循环的值，

91
00:06:10,830 --> 00:06:16,843
然后顶部和底部的圆圈显 示进程陷入三个值的循环的值，

92
00:06:16,843 --> 00:06:18,000
依此类推。

93
00:06:18,000 --> 00:06:19,640
这些 小岛中的每一个都有其自己的意义。

94
00:06:19,640 --> 00:06:23,898
另请注意，曼德尔布罗特 集和我们之前看到的牛顿分形的

95
00:06:23,898 --> 00:06:28,320
构造方式之间存在重要差 异，而不仅仅是不同的基础函数。

96
00:06:28,320 --> 00:06:30,428
对于 Mandelbrot 集，

97
00:06:30,428 --> 00:06:32,932
我们有一个一致的种子值 z 等于 0，

98
00:06:32,932 --> 00:06:35,700
但我们要调整的是参数 c，改变 函数本身。

99
00:06:35,700 --> 00:06:39,500
所以你看到的就是我们所说的参数空间。

100
00:06:39,820 --> 00:06:43,289
但对于牛顿分 形，我们有一个不变的函数，

101
00:06:43,289 --> 00:06:47,280
但我们与每个像素关联的是该过程 的不同种子值。

102
00:06:47,280 --> 00:06:51,380
当然，我们可以用地图 z 平方加 c 来玩同样的游 戏，

103
00:06:51,380 --> 00:06:53,724
我们可以将 c 固定为某个常数，

104
00:06:53,724 --> 00:06:56,800
然后让像素代表不同的可能初始值 z 为零。

105
00:06:57,680 --> 00:07:02,037
因此，曼德尔布罗特集合的每个像素对应一个唯一的函 数，

106
00:07:02,037 --> 00:07:04,620
而右侧的每个图像仅对应一个函数。

107
00:07:05,460 --> 00:07:09,220
当我们改变参数 c 时 ，它会改变右侧的整个图像。

108
00:07:10,020 --> 00:07:14,419
再次澄清一下，所应用的规则是， 如果过程保持有界，

109
00:07:14,419 --> 00:07:19,347
我们将像素着色为黑色，然后根据它们发 散到无穷大的速度，

110
00:07:19,347 --> 00:07:22,340
对发散到无穷大的像素应用某种渐变。

111
00:07:23,380 --> 00:07:27,532
原则上，考虑起来有点令人费解，存在一些由 c 

112
00:07:27,532 --> 00:07:30,602
和 z 的所有组合组成的四维空间，

113
00:07:30,602 --> 00:07:35,657
而我们在这里所 做的就是查看那个难以想象的单个二维切片。

114
00:07:35,657 --> 00:07:36,380
 图案。

115
00:07:37,740 --> 00:07:42,153
你经常会听到或读到右边的图像被称为 Julia 集或 

116
00:07:42,153 --> 00:07:46,239
Ju lia 分形，当我第一次了解所有这些东西时，

117
00:07:46,239 --> 00:07:49,018
我承认我有点 误解这就是这个术语。

118
00:07:49,018 --> 00:07:53,268
 Julia 集具体指的是 z 平方加 c 的情况，

119
00:07:53,268 --> 00:07:55,720
而且它还指的是内部的黑色区域。

120
00:07:56,440 --> 00:08:00,025
然而，朱莉娅 集这个术语有一个更笼统的定义，

121
00:08:00,025 --> 00:08:02,960
它仅指这些区域的边界， 而不是内部。

122
00:08:03,900 --> 00:08:07,212
为了为更具体的定义奠定基础，并朝着我在开 

123
00:08:07,212 --> 00:08:10,998
始时提到的第一个目标取得一些进展，值得退后一步，

124
00:08:10,998 --> 00:08:15,100
实际上 只是将自己想象成一名数学家，发现所有这一切。

125
00:08:15,740 --> 00:08:18,880
你实际上会 做什么来围绕这个构建理论？

126
00:08:19,260 --> 00:08:23,381
看一些漂亮的图片是一回事， 但如果你真的想了解这一切，

127
00:08:23,381 --> 00:08:25,060
你会问什么样的问题呢？

128
00:08:26,020 --> 00:08:29,088
一般来说，如果你想理解一些复杂的东西，

129
00:08:29,088 --> 00:08:33,610
一个好的起点是询问系统的 任何部分是否有一些简单的行为，

130
00:08:33,610 --> 00:08:36,679
最好是最简单的行为，在我们的例子 中，

131
00:08:36,679 --> 00:08:40,555
这可能意味着询问什么时候过程只是保持固定在原地，

132
00:08:40,555 --> 00:08:43,140
这意味着 z 的 f 等于 z。

133
00:08:43,740 --> 00:08:45,880
我想你会同意这是一组非常无聊的动态。

134
00:08:46,500 --> 00:08:49,680
我们将具有此属性的值称为函数的不动点。

135
00:08:49,680 --> 00:08:53,357
对于由牛顿法产生 的函数，根据设计，

136
00:08:53,357 --> 00:08:57,240
它们在相关多项式的根处有一个固定 点。

137
00:08:57,840 --> 00:09:01,555
您可以自己验证，如果 z 的 p 等于 0，

138
00:09:01,555 --> 00:09:03,920
那么整个表达 式就等于 z。

139
00:09:04,300 --> 00:09:05,660
这就是固定点的含义。

140
00:09:06,560 --> 00:09:12,772
如果您喜欢练习，您可能 会喜欢暂停片刻并计算此 

141
00:09:12,772 --> 00:09:20,280
Mandelbrot 集合函数 z 平方加 c 的不动点。

142
00:09:20,280 --> 00:09:24,192
更一般地，任何有理函数总是有不动点，

143
00:09:24,192 --> 00:09:29,842
因 为询问这个表达式何时等于 z 总是可以重新排列 

144
00:09:29,842 --> 00:09:35,493
为寻找某个多项式表达式的根，并且根据代数基本定 理，

145
00:09:35,493 --> 00:09:39,840
这必须有解，通常与该表达式中的最高程度。

146
00:09:39,840 --> 00:09:44,653
顺便说一句，这意味着您也可以使用牛顿法找到 这些不动点，

147
00:09:44,653 --> 00:09:47,060
也许这对我们来说有点太元了。

148
00:09:47,060 --> 00:09:53,172
现在仅仅询问固定点可能很容易，但是理解完整动态以及 

149
00:09:53,172 --> 00:09:58,580
我们正在查看的图表的一个关键思想是理解稳定性。

150
00:09:58,580 --> 00:10:00,509
如果附近 的点倾向于被吸引到某个固定点，

151
00:10:00,509 --> 00:10:02,632
我们就说该固定点具有吸引力；如果它们被推开，

152
00:10:02,632 --> 00:10:04,080
则我们说该固 定点具有排斥性。

153
00:10:04,080 --> 00:10:08,600
这是您实际上可以使用函数的导数显式计算的 东西。

154
00:10:08,980 --> 00:10:11,230
象征性地，当你对复杂函数求导时，

155
00:10:11,230 --> 00:10:13,902
它看起来与实数函数完 全相同，尽管像 

156
00:10:13,902 --> 00:10:17,560
z 平方这样的函数的导数是 2 乘以 z 的导 数。

157
00:10:17,560 --> 00:10:20,620
但从几何角度来看，有一种非常可爱的方式来解释这意味着什么。

158
00:10:20,620 --> 00:10:25,178
例如，在 输入 1 处，该特定函数的导数计算结果为 2，

159
00:10:25,178 --> 00:10:29,574
这告诉我们，如 果您观察该输入周围的一个非常小的邻域，

160
00:10:29,574 --> 00:10:33,481
并且您可以跟踪该小邻 域中的所有点所发生的情况，

161
00:10:33,481 --> 00:10:36,900
当您应用该函数（在本例中为 z 平方）时，

162
00:10:36,900 --> 00:10:39,180
它看起来就像乘以 2 一样。

163
00:10:39,580 --> 00:10:41,400
这就是 2 的导数的含义。

164
00:10:43,240 --> 00:10:45,900
再举一个例子，让我们看看输入 i。

165
00:10:46,500 --> 00:10:50,860
我们知道这个函数将输入移动 到负值 1，即 i 的平方。

166
00:10:51,580 --> 00:10:55,263
但是，它在该值处的导数是 2 倍 i 

167
00:10:55,263 --> 00:11:00,109
的附加信息为我们提供了附加图片，当您放大该点时 ，

168
00:11:00,109 --> 00:11:05,731
并查看函数在这个微小邻域上的作用，它看起来像是乘以 2i，

169
00:11:05,731 --> 00:11:11,160
这在本例中，它看起来像是 90 度旋转并扩大了 2 倍。

170
00:11:14,860 --> 00:11:20,293
为了分析稳定性，我们在这里唯一关心的是增 长和收缩因素，

171
00:11:20,293 --> 00:11:22,040
旋转部分并不重要。

172
00:11:22,520 --> 00:11:26,254
因此，如果您计 算函数在其固定点处的导数，

173
00:11:26,254 --> 00:11:31,232
并且该结果的绝对值小于 1，则 表明该固定点具有吸引力，

174
00:11:31,232 --> 00:11:33,900
附近的点倾向于向该固定点靠近。

175
00:11:34,360 --> 00:11:38,860
如果该导数的绝对值大于 1，则表明该不动点具有排斥性，

176
00:11:38,860 --> 00:11:40,360
 它会推开其邻居。

177
00:11:41,640 --> 00:11:45,500
例如，如果您计算出牛顿映射表达式的 导数，

178
00:11:45,500 --> 00:11:49,360
并稍微简化一些事情，那么您将得到以下结果。

179
00:11:50,380 --> 00:11:55,191
因此，如果 z 是一个固定点，在本文中意味着它是多项式 

180
00:11:55,191 --> 00:11:59,660
p 的根 之一，则该导数不仅小于 1，而且等于 0。

181
00:12:00,840 --> 00:12:04,310
这些有时被称为超 吸引固定点，因为这意味着

182
00:12:04,310 --> 00:12:07,780
这些点周围的邻域不仅缩小，而 且缩小很多。

183
00:12:08,660 --> 00:12:13,060
再说一次，这也是设计使然，因为牛顿方法 

184
00:12:13,060 --> 00:12:17,020
的目的是产生尽可能快地落向根的迭代。

185
00:12:18,020 --> 00:12:20,788
拉出我们的 z 平 方加 c 的例子，

186
00:12:20,788 --> 00:12:23,557
如果你做了第一个练习来找到它的不动点，

187
00:12:23,557 --> 00:12:27,200
下一步就会 问，什么时候至少有一个这些不动点吸引？

188
00:12:27,820 --> 00:12:30,100
对于什么 c 值来说这是正确 的？

189
00:12:31,040 --> 00:12:35,550
然后，如果这还不够挑战，请尝试使用您发现的结果 

190
00:12:35,550 --> 00:12:40,060
来表明该条件对应于曼德尔布罗特集的主要心形形状。

191
00:12:40,680 --> 00:12:43,400
这是你可以明确计算的东西，这非常酷。

192
00:12:45,320 --> 00:12:49,920
自然的下一步是询问周期，这才是事情真正开始变得有趣的 地方。

193
00:12:50,720 --> 00:12:54,453
如果 z 的 f 不是 z，而是其他值，

194
00:12:54,453 --> 00:12:58,560
然后该值又回到 z，则意味着您已陷入二循环。

195
00:12:59,320 --> 00:13:02,506
您可以通过计算 f of f of z ，

196
00:13:02,506 --> 00:13:06,300
然后 将其设置为等于 z 来显式找到此类两个循环。

197
00:13:07,120 --> 00:13:09,755
例如，对于 z 平方加 c 映射，

198
00:13:09,755 --> 00:13:12,700
f of f of z 展开如下所示。

199
00:13:13,340 --> 00:13:15,080
有点乱，但你知道，这并不算太糟糕。

200
00:13:15,560 --> 00:13:19,380
需要强调的主要一点是，它归结为求解某个四次方程。

201
00:13:20,160 --> 00:13:25,311
您应该注意，不动点也将是该方程的解，因此从技术 上讲，

202
00:13:25,311 --> 00:13:29,700
这两个循环是该方程的解减去原始定点方程 的解。

203
00:13:31,080 --> 00:13:33,562
同样，您可以使用相同的想法通过将 f 

204
00:13:33,562 --> 00:13:36,960
与其自身组合 n 次不同的次数来 查找 n 个循环。

205
00:13:37,880 --> 00:13:42,235
您很快就会得到的明确表达式变得极其混乱 ，

206
00:13:42,235 --> 00:13:47,420
但仍然可以阐明根据这个假设过程您期望有多少个周期。

207
00:13:47,960 --> 00:13:51,647
如果我们坚持使用简单的 z 平方加 c 的例子，

208
00:13:51,647 --> 00:13:55,334
当你将它与自 身组合时，你会得到一个四次多项式，

209
00:13:55,334 --> 00:13:59,636
然后是一个八次多项式，然后是 16 次多项式，依此类推，

210
00:13:59,636 --> 00:14:01,480
呈指数增长多项式的阶数。

211
00:14:02,360 --> 00:14:07,163
所以原则上 ，如果我问你一百万个周期有多少个循环，

212
00:14:07,163 --> 00:14:11,005
你可以知道这 相当于解决一些绝对疯狂的次

213
00:14:11,005 --> 00:14:14,080
数为二到一百万的多项式表 达式。

214
00:14:14,880 --> 00:14:19,579
再说一次，根据代数的基本定理，你会期望在复平面上找 

215
00:14:19,579 --> 00:14:24,640
到大约二到一百万个点的东西，这些点正是以这种方式循环的。

216
00:14:25,700 --> 00:14:30,438
更一般地说，对于任何有理图，您始终能够找到其行为落入周期为 

217
00:14:30,438 --> 00:14:31,860
n 的循环中的值。

218
00:14:32,360 --> 00:14:36,480
它最终归结为解决一些可能疯狂的多项式表达 式。

219
00:14:37,180 --> 00:14:41,083
就像这个例子一样，这样的周期点的数量将随着 

220
00:14:41,083 --> 00:14:42,680
n 呈 指数增长。

221
00:14:43,980 --> 00:14:48,207
我在上一个关于牛顿分形的视频中并没有真正讨论 过这一点，

222
00:14:48,207 --> 00:14:52,434
但认为即使对于这样的过程也有无限多个点落入某种 循环中，

223
00:14:52,434 --> 00:14:53,340
这有点奇怪。

224
00:14:54,020 --> 00:14:58,581
但在几乎所有情况下，这些点都位于这些 彩色区域之间的边界上，

225
00:14:58,581 --> 00:15:01,014
并且它们在实践中并没有真正出现，

226
00:15:01,014 --> 00:15:03,600
因为 落在其中一个点上的概率为零。

227
00:15:04,240 --> 00:15:09,468
实际上落入其中一个的重要因素 是其中一个周期是否具有吸引力，

228
00:15:09,468 --> 00:15:13,128
从某种意义上说，该周期中某 个值周围的点的

229
00:15:13,128 --> 00:15:15,220
邻域往往会被拉向该周期。

230
00:15:16,460 --> 00:15:20,811
对于对数值方法感 兴趣的人来说，一个高度相关的问题是，

231
00:15:20,811 --> 00:15:24,518
牛顿映射过程是否存在吸 引循环，因为如果存在，

232
00:15:24,518 --> 00:15:27,581
则意味着您最初的猜测被困在该循环中并 

233
00:15:27,581 --> 00:15:30,160
且永远找不到的可能性非零一个根。

234
00:15:31,160 --> 00:15:32,360
这里的答案实际上是肯定的。

235
00:15:32,360 --> 00:15:35,568
更明 确地说，如果您尝试找到 z 

236
00:15:35,568 --> 00:15:38,587
的立方减去 2z 加 2 的根，

237
00:15:38,587 --> 00:15:44,060
并且您 使用牛顿法，请观察从值 0 开始的小簇会发生什么。

238
00:15:44,060 --> 00:15:46,260
它有点来回 反弹。

239
00:15:47,260 --> 00:15:50,459
好吧，在这种情况下，我们开始的簇有点太大，

240
00:15:50,459 --> 00:15:52,440
所 以一些外部点被喷掉了。

241
00:15:52,780 --> 00:15:55,480
但如果我们从一个较小的集群开始，情况会 是这样的。

242
00:15:56,120 --> 00:16:00,940
请注意所有点是如何真正收缩到 0 到 1 之间的循 环的。

243
00:16:01,480 --> 00:16:05,040
你不太可能用随机种子来击中这个，但这绝对是可能的。

244
00:16:06,080 --> 00:16:10,187
顺便说一句，为了验证这样的循环是否具有吸引力，

245
00:16:10,187 --> 00:16:14,830
您可以做的 练习是计算 f 的 f 的 z 的导数，

246
00:16:14,830 --> 00:16:18,760
然后检查在输入零 时，该导数的大小小于 1。

247
00:16:19,760 --> 00:16:23,053
让我有点惊讶的是，当你尝 试想象哪

248
00:16:23,053 --> 00:16:26,540
些三次多项式具有吸引环时会发生什么。

249
00:16:27,080 --> 00:16:30,027
希望如果牛顿的方法能够很好地找到根源，

250
00:16:30,027 --> 00:16:32,820
那么那些吸引循环的情况应该 很少见。

251
00:16:33,960 --> 00:16:37,375
首先，为了更好地可视化我们正在查看的一个示例，

252
00:16:37,375 --> 00:16:39,750
我们可以 绘制与之前相同的分形，

253
00:16:39,750 --> 00:16:43,760
根据从该点开始的种子值趋向于哪个根对每 个点进行着色。

254
00:16:44,000 --> 00:16:47,400
但这一次我们将添加一个着色点条件，

255
00:16:47,400 --> 00:16:52,800
即如 果种子值根本不够接近根，我们将把像素着色为黑色。

256
00:16:53,760 --> 00:16:58,628
请注意，如果我调整根，这意味着我们正在尝试不同的三次多项式，

257
00:16:58,628 --> 00:17:01,550
 实际上很难找到任何地方来放置它们，

258
00:17:01,550 --> 00:17:03,660
以便我们看到任何黑色像素。

259
00:17:04,319 --> 00:17:07,660
我可以在这里找到这个小小的甜蜜点，但这绝对是罕见的。

260
00:17:08,680 --> 00:17:13,504
现在我想要的是某种 方法，以显示哪些具有吸引循环的方式，

261
00:17:13,504 --> 00:17:17,640
使用单个图像一次性可视化每 个可能的三次多项式。

262
00:17:18,880 --> 00:17:21,569
幸运的是，事实证明有一种非常简单的方 

263
00:17:21,569 --> 00:17:24,400
法可以测试这些多项式之一是否具有吸引环。

264
00:17:25,060 --> 00:17:30,102
您所要做的就是查 看种子值，该值位于三个根的平均值，

265
00:17:30,102 --> 00:17:31,460
即此处的质心。

266
00:17:32,100 --> 00:17:35,957
事实证 明，这并不明显，如果有一个吸引周期，

267
00:17:35,957 --> 00:17:39,640
你可以保证这个种 子值会落入那个吸引周期。

268
00:17:40,500 --> 00:17:44,420
也就是说，如果有黑点的话，这 就是其中之一。

269
00:17:45,340 --> 00:17:47,929
如果你想知道这个神奇的事实从何而来，

270
00:17:47,929 --> 00:17:50,520
它源于 我们的好朋友法图的一个定理。

271
00:17:50,920 --> 00:17:54,991
他表明，如果这些有理图之一 具有吸引循环，

272
00:17:54,991 --> 00:17:58,482
您可以查看迭代函数的导数等于零的值，

273
00:17:58,482 --> 00:18:02,360
 并且这些值中至少有一个必须落入循环中。

274
00:18:03,440 --> 00:18:06,908
这可能看起来有 点奇怪，但粗略的直觉是，

275
00:18:06,908 --> 00:18:10,550
如果一个周期要有吸引力，那么 至少其中一个

276
00:18:10,550 --> 00:18:14,540
值应该有一个非常小的导数，这就是收缩的来 源。

277
00:18:15,100 --> 00:18:19,517
这反过来意味着循环中的该值位于导数不仅很小而 

278
00:18:19,517 --> 00:18:25,280
且等于零的某个点附近，并且该点最终足够接近以被吸 入循环中。

279
00:18:26,560 --> 00:18:29,927
这一事实也证明了为什么对于 Mandelbrot 集合，

280
00:18:29,927 --> 00:18:32,213
我 们只使用一个种子值 z 等于 0，

281
00:18:32,213 --> 00:18:35,100
它仍然足以让我们得到一幅非常完整和有趣的图 片。

282
00:18:35,320 --> 00:18:40,600
如果找到一个稳定的循环，那么那个种子值肯定会找到它。

283
00:18:41,500 --> 00:18:45,307
我觉得也许我今天布置的作业和练习有点太多了，

284
00:18:45,307 --> 00:18:49,460
但如果你对此感 兴趣，另一个令人高兴的事情就是回

285
00:18:49,460 --> 00:18:53,614
顾一下我们在牛顿方法中发 现的函数的导数表达式，

286
00:18:53,614 --> 00:18:56,902
并使用 Fatou 的这个精彩定理来 

287
00:18:56,902 --> 00:18:59,844
展示我们关于三次多项式的神奇事实，

288
00:18:59,844 --> 00:19:02,440
即只需检查根的中点就足够 了。

289
00:19:03,240 --> 00:19:06,540
但老实说，所有这些都是您不必担心的细节。

290
00:19:06,840 --> 00:19:11,530
结果是，我们可以通过仅查看单个点而不是所有点来测 

291
00:19:11,530 --> 00:19:14,720
试这些多项式之一是否具有吸引循环。

292
00:19:15,480 --> 00:19:18,600
正因为如此，我们 实际上可以生成一个非常酷的图表。

293
00:19:19,380 --> 00:19:22,892
其工作方式是将两个根固定到位，假设 将它们放在 

294
00:19:22,892 --> 00:19:27,137
z 等于负一，z 等于正一，然后我们将围绕第三个根移 动，

295
00:19:27,137 --> 00:19:29,040
我将其称为 lambda。

296
00:19:30,480 --> 00:19:35,160
请记住，我们要寻找的关键特 征是质心点何时为黑色。

297
00:19:35,860 --> 00:19:38,756
因此，我要做的是在右侧绘制第二个图，

298
00:19:38,756 --> 00:19:42,940
其 中每个像素对应于 lambda 的一种可能选择。

299
00:19:43,860 --> 00:19:48,600
我们要做的是根据 三个根的中点的颜色为该像素着色。

300
00:19:49,600 --> 00:19:52,625
如果这感觉有点令人 困惑，那完全没关系，

301
00:19:52,625 --> 00:19:54,440
这里有很多层次在起作用。

302
00:19:55,020 --> 00:19:58,572
请记住，右 侧的每个像素都对应于由该参数 

303
00:19:58,572 --> 00:20:01,280
lambda 确定的唯一多项式。

304
00:20:02,000 --> 00:20:04,740
事实上，您可以将其称为参数空间。

305
00:20:05,080 --> 00:20:05,580
听起来有点熟？

306
00:20:13,740 --> 00:20:19,260
当且仅当对应多项式的牛顿法过程产生吸引循环时，

307
00:20:19,260 --> 00:20:23,340
该 参数空间中的点才被着色为黑色。

308
00:20:24,260 --> 00:20:26,400
再次强调，如果这需要一点 时间来消化，请不要担心。

309
00:20:27,840 --> 00:20:33,780
现在，乍一看，这张图上可能根本没 有任何黑点，这是个好消息。

310
00:20:33,940 --> 00:20:38,300
这意味着在大多数情况下 牛顿法不会陷入这样的循环。

311
00:20:39,000 --> 00:20:41,486
但是，我想我已经对此进行了足够的预览，

312
00:20:41,486 --> 00:20:44,497
您可 以确切地知道这是怎么回事，如果我们放大，

313
00:20:44,497 --> 00:20:47,376
我们可以找到一个黑色区域，并且该黑色区域看 

314
00:20:47,376 --> 00:20:49,340
起来与曼德尔布罗特集完全相同。

315
00:20:50,020 --> 00:20:54,521
再一次，提出一个问题，我们在哪里调整这些函数 之一的参数，

316
00:20:54,521 --> 00:20:57,160
会产生这种标志性的心形和气泡形状。

317
00:20:58,020 --> 00:21:01,273
结果是，这个形状并不 像您想象的那样特定于 

318
00:21:01,273 --> 00:21:02,900
z 平方加 c 示例。

319
00:21:03,400 --> 00:21:06,420
它似乎与带有这样 的过程的参数空

320
00:21:06,420 --> 00:21:09,440
间的一些更普遍和普遍的东西有关。

321
00:21:11,640 --> 00:21:15,520
尽管如此，一个紧迫的问题是为什么我们会得到分形。

322
00:21:16,220 --> 00:21:20,600
在上一个视频中，我谈到 了牛顿法的图表如何具有这种非

323
00:21:20,600 --> 00:21:25,316
常奇特的属性，如果您在彩色区域 的边界周围画一个小圆圈，

324
00:21:25,316 --> 00:21:29,360
那么该圆圈实际上必须包含图片中的 所有可用颜色。

325
00:21:30,280 --> 00:21:32,740
对于任何有理地图来说，这都是更普遍的事实。

326
00:21:33,140 --> 00:21:37,129
如果您要根 据限制行为点所属的区域（例如哪个

327
00:21:37,129 --> 00:21:41,118
限制点或哪个限制循环，或 者它是否趋于无穷大

328
00:21:41,118 --> 00:21:44,925
）为区域分配颜色，那么您绘制的小圆圈要么 

329
00:21:44,925 --> 00:21:49,640
包含仅具有这些限制行为之一的点，或者它们包含所有点。

330
00:21:49,820 --> 00:21:51,200
从来没 有介于两者之间的任何事情。

331
00:21:51,959 --> 00:21:54,294
因此，在至少有三种颜色的情况下，

332
00:21:54,294 --> 00:21:57,504
此属性意味着我们 的边界永远不可能是平滑的，

333
00:21:57,504 --> 00:22:01,005
因为沿着平滑的线段，您可以绘制一个足够小 的圆，

334
00:22:01,005 --> 00:22:03,340
仅接触两种颜色，而不是所有颜色。

335
00:22:03,920 --> 00:22:06,139
从经验上看，这就是我们所看 到的，

336
00:22:06,139 --> 00:22:08,360
无论放大多大，这些边界总是很粗糙。

337
00:22:08,880 --> 00:22:11,776
此外，您可能会注意到，当 我们放大时，

338
00:22:11,776 --> 00:22:14,520
您始终可以看到框架内的所有可用颜色。

339
00:22:16,160 --> 00:22:20,203
这并不能解释只有 两种限制行为的情况下的粗略界限，

340
00:22:20,203 --> 00:22:24,569
但它仍然是我在视频中留下的一 个值得整理的松散的结局，

341
00:22:24,569 --> 00:22:29,260
这是引入两个重要术语的一个很好的借 口，朱莉娅集和法图集。

342
00:22:29,940 --> 00:22:33,328
如果一个点最终落入某种稳定的可预测模式 ，

343
00:22:33,328 --> 00:22:37,040
我们就说它是迭代函数 Fatou 集的一部分。

344
00:22:37,740 --> 00:22:40,860
对于我们见过的所 有地图来说，这几乎包括了所有内容。

345
00:22:41,640 --> 00:22:45,206
朱莉娅集是其他一切，在我们所看到的 图片中，

346
00:22:45,206 --> 00:22:49,908
它们是彩色区域之间的粗略边界，当您从一个稳定吸引子过渡到 

347
00:22:49,908 --> 00:22:52,340
另一个稳定吸引子时会发生什么。

348
00:22:53,200 --> 00:22:58,160
例如，Julia 集将包括所 有排斥周期和排斥固定点。

349
00:22:58,880 --> 00:23:02,890
朱莉娅集合中的一个典型点虽然不会是一 个循环，

350
00:23:02,890 --> 00:23:05,680
但它会永远反弹，没有明确的模式。

351
00:23:05,680 --> 00:23:08,843
现在，如果你观察 Fat ou 集中的一个点，

352
00:23:08,843 --> 00:23:12,419
并在它周围画一个足够小的圆盘，当你遵循这个过程 时，

353
00:23:12,419 --> 00:23:15,720
当你陷入任何相关的稳定行为时，小圆盘最终会缩小。

354
00:23:16,240 --> 00:23:20,003
除非你要无穷 大，但你可以将其视为磁盘在无穷大附近缩小，

355
00:23:20,003 --> 00:23:22,020
但这也许只是让 事情变得混乱。

356
00:23:24,500 --> 00:23:28,336
相比之下，如果你在 Julia 集合上的一个点周围画 

357
00:23:28,336 --> 00:23:31,320
一个小圆盘，它往往会随着时间的推移而扩大，

358
00:23:31,320 --> 00:23:34,020
因为该圆内的点会消失并做自己的 事情。

359
00:23:35,540 --> 00:23:39,540
换句话说，朱莉娅集的点往往表现得很混乱。

360
00:23:40,080 --> 00:23:43,127
他们附近的 邻居，即使是非常接近的邻居，

361
00:23:43,127 --> 00:23:45,260
最终也会陷入性质不同的行为。

362
00:23:46,420 --> 00:23:48,840
但这不仅仅是磁盘扩展的问题。

363
00:23:49,360 --> 00:23:53,396
一个非常令人惊讶的结果是前面提到的多 色属性的关键，

364
00:23:53,396 --> 00:23:55,880
那就是如果你让这个过程进行下去，

365
00:23:55,880 --> 00:23:58,519
那个小圆盘最终会膨 胀得如此之大，

366
00:23:58,519 --> 00:24:02,400
以至于它会击中复杂平面上的每个点，最多有两个例外。

367
00:24:02,400 --> 00:24:06,880
这就是 Julia 集合的“东西无处不在”原则。

368
00:24:07,940 --> 00:24:09,360
好吧，实际上并不是这么叫的。

369
00:24:09,700 --> 00:24:13,800
在我阅读的源代码中，它被称为蒙 特尔定理的推论。

370
00:24:14,320 --> 00:24:15,700
但应该这样称呼。

371
00:24:16,120 --> 00:24:21,875
从某种意义上说 ，这告诉我们朱莉娅集的点不仅是混乱的，

372
00:24:21,875 --> 00:24:24,220
而且是尽可 能混乱的。

373
00:24:25,860 --> 00:24:29,066
在这里，让我向您展示使用牛顿图进行的一个小模拟，

374
00:24:29,066 --> 00:24:32,539
其中有几 千个点的集群，所有这些点都从 Julia 

375
00:24:32,539 --> 00:24:36,280
集上的一个点开始的一个很小的距 离（百万分之一）内开始。

376
00:24:42,680 --> 00:24:48,089
当然，“东西到处都是”原则是指 在该距离内有无数个点，

377
00:24:48,089 --> 00:24:53,700
并且它们最终会扩展到 平面上的所有点，除了可能的两个点。

378
00:24:54,200 --> 00:24:56,780
但这个小集 群仍然应该给出总体思路。

379
00:24:56,780 --> 00:24:59,692
那个小圆盘上的一个有限的小样 

380
00:24:59,692 --> 00:25:02,800
本似乎在各个方向上被喷射到各处。

381
00:25:04,400 --> 00:25:08,289
对于我们的目的来说，这 意味着如果我们的地图存在

382
00:25:08,289 --> 00:25:12,178
一些有吸引力的行为，例如吸引固定 点或吸引循环，

383
00:25:12,178 --> 00:25:16,554
则可以保证 Julia 集上该点周围那个小 圆盘的值，

384
00:25:16,554 --> 00:25:20,120
无论如何它曾经很小，最终会陷入那种吸引行为。

385
00:25:20,860 --> 00:25:24,122
如果我们有一个具有三个或更多吸引行为的案例，

386
00:25:24,122 --> 00:25:27,236
这可以解释为什么 J ulia 集不平滑，

387
00:25:27,236 --> 00:25:28,720
为什么它必须很复杂。

388
00:25:29,820 --> 00:25:32,260
即便如此，这可能并不完 全令人满意，

389
00:25:32,260 --> 00:25:35,513
因为它把罐子又向前推进了一步，引发了一个问题： 

390
00:25:35,513 --> 00:25:38,360
为什么这种东西无处不在的原则首先是正确的。

391
00:25:39,180 --> 00:25:41,930
就像我提到的，它 来自蒙特尔定理，

392
00:25:41,930 --> 00:25:46,300
我选择不深入讨论细节，因为老实说，要涵 盖的内容很多。

393
00:25:46,820 --> 00:25:50,340
我能找到的证明最终依赖于称为 J 函数的 东西，

394
00:25:50,340 --> 00:25:52,540
它本身就是一个完整复杂的故事。

395
00:25:52,800 --> 00:25:55,746
当然，我会在描述中为任 何渴望了解更多信息的人

396
00:25:55,746 --> 00:25:58,565
留下链接和资源，如果您知道一种更简单的方法 

397
00:25:58,565 --> 00:26:01,640
来了解为什么这个原理是正确的，我绝对会洗耳恭听。

398
00:26:02,400 --> 00:26:04,848
我还应该说，作为 一个简短的附注，

399
00:26:04,848 --> 00:26:08,736
即使我们到目前为止看到的图片有一个 Julia 集 ，

400
00:26:08,736 --> 00:26:12,192
其面积为零，它是这些区域之间的边界，有一些例子，

401
00:26:12,192 --> 00:26:16,080
其中 Julia 集是整个飞机上，一切都表现得很混乱，

402
00:26:16,080 --> 00:26:16,800
有点狂野。

403
00:26:18,180 --> 00:26:22,820
本节的主要内 容是混沌与分形之间的联系。

404
00:26:22,820 --> 00:26:26,174
乍一看，这些似乎只是彼 此相似，你知道，

405
00:26:26,174 --> 00:26:29,864
牛顿方法对于某些种子值来说是一种混乱的过程，

406
00:26:29,864 --> 00:26:34,057
 并且这种混乱通过遵循特定点的轨迹以一种方式可见，

407
00:26:34,057 --> 00:26:39,088
而另一种方式 则可见。 方式是通过我们图表的复杂性来实现的，

408
00:26:39,088 --> 00:26:41,940
但这些感觉就像是 性质不同的混乱。

409
00:26:42,520 --> 00:26:44,640
也许这是一个很好的比喻，但仅此而已。

410
00:26:45,320 --> 00:26:50,593
然而，这里 的巧妙之处在于，当您量化某些点的混乱程度时，

411
00:26:50,593 --> 00:26:56,243
这种量 化使我们能够通过此边界属性对粗糙分形形状进行实际解 

412
00:26:56,243 --> 00:26:56,620
释。

413
00:26:57,640 --> 00:27:01,108
你经常会看到混沌和分形在数学中结合在一起，

414
00:27:01,108 --> 00:27:04,576
 至少对我来说，只要这种结合具有逻辑联系，

415
00:27:04,576 --> 00:27:08,540
而不 是作为两个碰巧重合的现象，它是令人满意的。

