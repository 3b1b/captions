1
00:00:00,000 --> 00:00:04,240
오늘 저는 동형 역학(holomorphicdynamics)으로 알려진 수학에 대해 말씀드리고 싶습니다.

2
00:00:04,240 --> 00:00:10,615
이것은 만델브로 집합과 같은 것을 연구하는 분야입니다. 사실 오늘 나의 주요 목표 중 하나는 수학의 대표적인

3
00:00:10,615 --> 00:00:17,200
형태인 이 상징적인 모양이 초기 정의에서 제안한 것보다 더 일반적인 방식으로 어떻게 나타나는지 보여주는 것입니다.

4
00:00:17,200 --> 00:00:23,115
이제 이 필드는 지난 비디오에서 뉴턴의 프랙탈을 통해 이야기한 내용과도 밀접하게 연결되어 있으며,

5
00:00:23,115 --> 00:00:30,000
이 비디오 끝 부분에 있는 우리의 또 다른 목표는 우리가 거기에서 가졌던 느슨한 끝을 묶는 데 도움이 될 것입니다.

6
00:00:30,000 --> 00:00:36,070
그래서 우선, 홀로모픽(holomorphic)이라는 단어가 조금 이상하게 보일 수도 있습니다.

7
00:00:36,070 --> 00:00:45,040
이는 복소수 입력과 복소수 출력이 있고 도함수를 구할 수도 있는 함수를 나타냅니다.

8
00:00:45,040 --> 00:00:51,369
기본적으로 이 맥락에서 도함수를 갖는다는 것은 함수가 주어진 점 근처, 점 및 그 이웃 근처에서 어떻게

9
00:00:51,369 --> 00:00:57,589
동작하는지 확대하면 대략 복잡한 상수를 곱하는 것처럼 크기 조정 및 회전과 비슷하게 보인다는 것입니다.

10
00:00:57,589 --> 00:01:02,533
이에 대해서는 잠시 후에 더 자세히 설명하겠지만 지금은 여기에 다항식, 지수, 삼각 함수

11
00:01:02,533 --> 00:01:07,280
등 여러분이 적어둘 수 있는 대부분의 일반적인 함수가 포함되어 있다는 점만 알아두세요.

12
00:01:07,280 --> 00:01:16,779
여기 제목의 관련 역학은 일부 입력을 평가한 다음 방금 얻은 내용에 대해 동일한 함수를 평가하고 다시 수행한다는 의미에서

13
00:01:16,779 --> 00:01:26,000
이러한 기능 중 하나를 반복적으로 적용하면 어떤 일이 발생하는지 묻는 것에서 비롯됩니다. , 그리고 계속해서 또 다시.

14
00:01:26,000 --> 00:01:30,400
때때로 이로부터 나타나는 점의 패턴이 순환에 갇히게 됩니다.

15
00:01:30,400 --> 00:01:35,040
다른 경우에는 시퀀스가 일종의 제한점에 접근할 수도 있습니다.

16
00:01:35,040 --> 00:01:43,140
아니면 수열이 점점 더 커지고 무한대로 날아갈 수도 있습니다. 수학자들은 이를 한계점, 즉 무한점에 접근하는 것으로 생각합니다.

17
00:01:43,140 --> 00:01:49,840
그리고 다른 때에는 여전히 패턴이 전혀 없고 혼란스럽게 행동합니다.

18
00:01:49,840 --> 00:01:56,364
놀라운 점은 기록할 수 있는 모든 종류의 함수에 대해 이러한 다양한 가능한 동작이 발생할

19
00:01:56,364 --> 00:02:03,280
때 시각화하기 위해 무언가를 시도할 때 종종 엄청나게 복잡한 프랙탈 패턴이 발생한다는 것입니다.

20
00:02:03,280 --> 00:02:07,200
지난 영상을 시청하신 분들은 이미 이에 대한 깔끔한 예를 한 가지 보신 적이 있습니다.

21
00:02:07,200 --> 00:02:13,394
어떤 다항식 p의 근을 찾는 뉴턴의 방법이라는 알고리즘이 있는데, 그것이 작동하는 방식은 기본적으로

22
00:02:13,394 --> 00:02:19,920
x 빼기 x의 p를 x의 p 프라임으로 나눈 식을 반복적으로 반복하는 것입니다. p 프라임은 도함수입니다.

23
00:02:19,920 --> 00:02:30,335
초기 시드 값이 해당 다항식의 근(x의 p가 0인 값)의 느슨한 근처에 있는 경우 이 절차는 해당 근에 정말 빠르게 수렴하는 일련의 값을 생성합니다.

24
00:02:30,335 --> 00:02:33,070
이것이 실제로 유용한 알고리즘이 되는 이유입니다.

25
00:02:33,070 --> 00:02:38,109
그러나 그런 다음 우리는 복소 평면에서 이 작업을 수행하려고 했습니다. 가능한 많은 시드

26
00:02:38,109 --> 00:02:43,048
값을 살펴보고 이러한 시드 값 각각이 복소 평면의 어느 루트에 있을 수 있는지 묻습니다.

27
00:02:43,048 --> 00:02:52,840
그런 다음 각 루트에 색상을 연결한 다음 해당 픽셀에서 시작하는 시드 값이 최종적으로 도달할 루트를 기준으로 평면의 각 픽셀에 색상을 지정했습니다.

28
00:02:52,840 --> 00:03:02,240
우리가 얻은 결과는 색상 사이에 거친 프랙탈 경계가 있는 엄청나게 복잡한 사진 중 일부였습니다.

29
00:03:02,240 --> 00:03:08,574
이제 이 예에서 우리가 실제로 반복하고 있는 함수를 보면, 예를 들어 z 제곱 빼기 1과 같은 다항식의

30
00:03:08,574 --> 00:03:14,800
특정 선택에 대해 전체 표현식을 하나의 다항식을 다른 다항식으로 나눈 것처럼 다시 작성할 수 있습니다.

31
00:03:14,800 --> 00:03:18,160
수학자들은 이러한 종류의 함수를 합리적 함수(rational function)라고 부릅니다.

32
00:03:18,160 --> 00:03:25,501
그리고 이것이 뉴턴의 방법에서 비롯되었다는 사실을 잊어버린다면, 다른 합리적인 함수를 반복할 때 무슨 일이 일어나는지 합리적으로 물어볼 수 있습니다.

33
00:03:25,501 --> 00:03:32,693
실제로 이것이 바로 제1차 세계 대전 직후 수학자 피에르 파투(Pierre Fatou)와 가스통 줄리아(Gaston Julia)가 했던 일입니다.

34
00:03:32,693 --> 00:03:38,730
그리고 그들은 이러한 합리적인 함수를 반복할 때 어떤 일이 발생하는지에 대한 놀랍도록 풍부한 이론을 구축했습니다.

35
00:03:38,730 --> 00:03:43,919
이는 여러분과 제가 할 수 있는 방식으로 시각화할 컴퓨터가 없다는 점을 고려하면 특히 인상적입니다.

36
00:03:43,919 --> 00:03:47,238
이 두 이름을 기억하세요. 나중에 나올 것입니다.

37
00:03:47,238 --> 00:03:59,008
이와 같이 연구할 수 있는 유리 함수와 그에 따른 프랙탈의 가장 대중화된 예는 가장 간단한 함수 중 하나인 z 제곱 + c입니다. 여기서 c는 상수입니다.

38
00:03:59,008 --> 00:04:04,105
나는 이것이 적어도 여러분 중 많은 사람들에게 다소 친숙하다고 추측할 것입니다. 그러나 나중에 나올 내용을 위한

39
00:04:04,105 --> 00:04:09,202
무대를 설정하는 데 도움이 될 수 있기 때문에 여기에서 이야기를 빠르게 요약하는 것이 확실히 나쁠 것은 없습니다.

40
00:04:09,202 --> 00:04:15,454
이 게임에서 우리는 c를 변경할 수 있는 값으로 생각하고 움직일 수 있는 노란색 점으로 표시됩니다.

41
00:04:15,454 --> 00:04:21,589
실제 반복 프로세스에서는 항상 z의 초기 값이 0인 것으로 시작합니다.

42
00:04:21,589 --> 00:04:27,243
따라서 이 함수를 한 번 반복하고 z 제곱 + c를 수행하면 c를 얻습니다.

43
00:04:27,243 --> 00:04:33,461
두 번째 반복하여 해당 값을 함수에 연결하면 c 제곱에 c를 더한 결과가 나옵니다.

44
00:04:33,461 --> 00:04:39,592
여기서 c 값을 변경하면 두 번째 값이 어떻게 고정적으로 움직이는지 볼 수 있습니다.

45
00:04:39,592 --> 00:04:47,862
그런 다음 두 번째 값을 연결하여 z3을 얻고 세 번째 값을 연결하여 z4를 얻은 다음 계속해서 값 체인을 시각화할 수 있습니다.

46
00:04:47,862 --> 00:04:56,160
따라서 처음 많은 값, 즉 c의 일부 선택에 대해 이 작업을 여러 번 계속하면 이 프로세스는 계속 제한됩니다.

47
00:04:56,160 --> 00:04:58,368
여전히 화면에서 모든 것을 볼 수 있습니다.

48
00:04:58,368 --> 00:05:05,638
그리고 다른 때에는 그것이 터지는 것처럼 보이며 실제로 그것이 2만큼 커지면 무한대로 터질 것이라는 것을 보여줄 수 있습니다.

49
00:05:05,638 --> 00:05:14,589
경계가 검은색으로 유지되는 평면의 점을 색칠하고 프로세스가 무한대로 돌진하는 속도에 따라 발산 값에 다른

50
00:05:14,589 --> 00:05:23,236
색상 그라데이션을 할당하면 모든 수학에서 가장 상징적인 이미지 중 하나를 얻게 됩니다. 만델브로 집합.

51
00:05:23,236 --> 00:05:28,885
그런데 이 궤적의 대화형 점과 막대 시각화는 Ben Spark의 일러스트레이션과 Mandelbrot 세트에

52
00:05:28,885 --> 00:05:34,347
대해 그가 만든 Numberphile 비디오에서 많은 영감을 받았습니다. 훌륭합니다. 꼭 시청해 보세요.

53
00:05:34,347 --> 00:05:37,245
솔직히 여기서 다시 구현하지 않는 것이 너무 재미 있다고 생각했습니다.

54
00:05:37,245 --> 00:05:40,568
또한 ako의 대화형 기사를 적극 추천합니다.

55
00:05:40,568 --> 00:05:44,850
아직 읽어보지 못한 분들을 위해 이 모든 내용을 소개합니다.

56
00:05:44,850 --> 00:05:51,548
Ben Spark의 그림에서 좋은 점은 Mandelbrot 집합의 서로 다른 부분이 실제로 나타내는 것을 어떻게 조명하는지입니다.

57
00:05:51,548 --> 00:05:58,359
이 가장 큰 카디오이드 섹션에는 c 값이 포함되므로 프로세스는 결국 특정 한계에 수렴됩니다.

58
00:05:58,359 --> 00:06:11,183
왼쪽의 큰 원은 프로세스가 두 값 사이의 순환에 갇히는 값을 나타내고, 위쪽과 아래쪽 원은 프로세스가 세 값의 순환에 갇히는 값을 나타냅니다.

59
00:06:11,183 --> 00:06:15,217
이 작은 섬들은 각각 고유한 의미를 가지고 있습니다.

60
00:06:15,217 --> 00:06:25,571
또한 이 Mandelbrot 집합과 이전에 살펴본 Newton 도형이 서로 다른 기본 함수를 넘어 각각 구성되는 방식 사이에는 중요한 차이점이 있습니다.

61
00:06:25,571 --> 00:06:34,344
Mandelbrot 집합의 경우 일관된 시드 값 z는 0과 같지만 우리가 조정하는 것은 함수 자체를 변경하는 매개변수 c입니다.

62
00:06:34,344 --> 00:06:37,970
그래서 여러분이 보고 있는 것은 매개변수 공간이라고 부를 수 있는 것입니다.

63
00:06:37,970 --> 00:06:46,231
그러나 뉴턴의 프랙탈에는 변하지 않는 단일 함수가 있지만 각 픽셀과 연관시키는 것은 프로세스에 대한 다른 시드 값입니다.

64
00:06:46,231 --> 00:06:51,101
물론 우리는 지도 z 제곱 + c를 사용하여 동일한 게임을 할 수 있고, c를 어떤

65
00:06:51,101 --> 00:06:56,490
상수로 고정한 다음 픽셀이 다른 가능한 초기 값 z naught를 나타내도록 할 수 있습니다.

66
00:06:56,490 --> 00:07:05,061
따라서 만델브로 집합의 각 픽셀은 고유한 기능에 해당하는 반면, 오른쪽의 이미지는 각각 단일 기능에 해당합니다.

67
00:07:05,061 --> 00:07:09,306
매개변수 c를 변경하면 오른쪽 이미지 전체가 변경됩니다.

68
00:07:09,306 --> 00:07:16,950
다시 한 번 명확하게 말하자면, 적용되는 규칙은 프로세스가 제한된 상태로 유지되면 픽셀을 검은색으로 지정한 다음,

69
00:07:16,950 --> 00:07:23,280
무한대로 갈라지는 속도에 따라 무한대로 갈라지는 픽셀에 일종의 그라디언트를 적용한다는 것입니다.

70
00:07:23,280 --> 00:07:30,942
원칙적으로 생각해 보면 생각하기가 좀 이상합니다. c와 z의 모든 조합으로 이루어진 4차원 공간이 있습니다.

71
00:07:30,942 --> 00:07:37,600
여기서 우리가 하는 일은 상상할 수 없는 개별적인 2차원 조각을 살펴보는 것과 같습니다. 무늬.

72
00:07:37,600 --> 00:07:43,633
여러분은 줄리아 집합 또는 줄리아 프랙탈이라고 불리는 오른쪽의 이미지를 듣거나 읽게 될 것입니다.

73
00:07:43,633 --> 00:07:49,885
이 모든 것에 대해 처음 배웠을 때 나는 이것이 용어라는 오해를 갖고 있었다는 것을 인정할 것입니다.

74
00:07:49,885 --> 00:07:56,138
Julia 집합은 특히 z 제곱에 c를 더한 경우를 나타내며, 게다가 내부의 검은색 영역을 나타냅니다.

75
00:07:56,138 --> 00:08:03,058
그러나 Julia 집합이라는 용어는 훨씬 더 일반적인 정의를 가지며 내부가 아닌 이러한 영역의 경계만을 나타냅니다.

76
00:08:03,058 --> 00:08:09,028
좀 더 구체적인 정의를 위한 기반을 마련하고 제가 처음에 언급한 첫 번째 목표를 향해 전진하기

77
00:08:09,028 --> 00:08:15,336
위해서는 한 걸음 물러서서 지금 이 모든 것을 발견하는 수학자로서 자신을 상상해 보는 것이 좋습니다.

78
00:08:15,336 --> 00:08:18,557
이에 관한 이론을 구성하기 위해 실제로 무엇을 하시겠습니까?

79
00:08:18,557 --> 00:08:25,840
예쁜 그림을 보는 것도 중요하지만 실제로 다 이해하고 싶다면 어떤 질문을 하시겠습니까?

80
00:08:25,840 --> 00:08:37,411
일반적으로 복잡한 것을 이해하고 싶다면 시작하기 좋은 곳은 시스템에 간단한 동작, 바람직하게는 가능한 가장 단순한 동작을 하는 부분이 있는지 물어보는 것입니다.

81
00:08:37,411 --> 00:08:42,425
프로세스는 제자리에 고정되어 있습니다. 즉, z의 f는 z와 같습니다.

82
00:08:42,425 --> 00:08:46,400
그것은 꽤 지루한 역학 세트입니다. 제 생각에는 여러분도 동의하실 것입니다.

83
00:08:46,400 --> 00:08:49,813
우리는 이 속성을 가진 값을 함수의 고정점이라고 부릅니다.

84
00:08:49,813 --> 00:08:57,223
뉴턴의 방법에서 발생하는 함수의 경우 설계상 관련 다항식의 근에 고정점을 갖습니다.

85
00:08:57,223 --> 00:09:03,903
p/z가 0이면 전체 표현식이 단순히 z와 같다는 것을 직접 확인할 수 있습니다.

86
00:09:03,903 --> 00:09:06,165
이것이 바로 고정점이 된다는 의미입니다.

87
00:09:06,165 --> 00:09:14,180
연습에 열중하고 있다면 잠시 멈추고 만델브로 집합 함수 z 제곱 더하기 c의 고정점을 계산하는 것을 즐길 수 있습니다.

88
00:09:14,180 --> 00:09:24,554
더 일반적으로, 모든 유리 함수는 항상 고정점을 가지게 됩니다. 왜냐하면 이 식이 z와 같을 때 묻는 것은 항상 일부 다항식의 근을 찾는 것으로

89
00:09:24,554 --> 00:09:34,800
재배치될 수 있고, 대수학의 기본 정리에서 이것은 일반적으로 다음 수만큼 많은 해를 가져야 하기 때문입니다. 이 표현에서 가장 높은 등급입니다.

90
00:09:34,800 --> 00:09:42,640
덧붙여서, 이것은 뉴턴의 방법을 사용하여 고정점을 찾을 수도 있다는 것을 의미합니다. 어쩌면 그것은 지금 우리에게 너무 메타적인 것일 수도 있습니다.

91
00:09:42,640 --> 00:09:52,542
이제 고정점에 대해 묻는 것이 쉬울 수도 있지만 전체 역학, 즉 우리가 보고 있는 다이어그램을 이해하기 위한 핵심 아이디어는 안정성을 이해하는 것입니다.

92
00:09:52,542 --> 00:09:59,803
고정점은 가까운 점들이 그쪽으로 끌려가는 경향이 있으면 끌어당기고, 멀어지면 밀어내는 경향이 있다고 말합니다.

93
00:09:59,803 --> 00:10:04,973
그리고 이것은 함수의 도함수를 사용하여 명시적으로 실제로 계산할 수 있는 것입니다.

94
00:10:04,973 --> 00:10:14,820
상징적으로, 복소 함수의 도함수를 취하면 실제 함수의 경우와 정확히 동일하게 보입니다. 단, z 제곱과 같은 함수는 2 x z의 도함수를 갖습니다.

95
00:10:14,820 --> 00:10:19,380
하지만 기하학적으로 이것이 의미하는 바를 해석하는 정말 멋진 방법이 있습니다.

96
00:10:19,380 --> 00:10:28,987
예를 들어, 입력 1에서 이 특정 함수의 도함수는 2로 평가되며, 이것이 우리에게 알려주는 것은 입력 주위의 아주 작은 이웃을 보고 그

97
00:10:28,987 --> 00:10:38,848
작은 영역의 모든 점에 무슨 일이 일어나는지 추적한다는 것입니다. 함수를 적용할 때 이웃(이 경우 z 제곱)은 2를 곱하는 것처럼 보입니다.

98
00:10:38,848 --> 00:10:41,267
이것이 2의 도함수가 의미하는 바입니다.

99
00:10:41,267 --> 00:10:45,217
또 다른 예를 들어 입력 i를 살펴보겠습니다.

100
00:10:45,217 --> 00:10:51,019
우리는 이 함수가 해당 입력을 -1 값, 즉 i 제곱으로 이동한다는 것을 알고 있습니다.

101
00:10:51,019 --> 00:11:01,317
하지만 이 값의 도함수가 2배라는 추가 정보는 해당 지점 주위를 확대하고 이 작은 이웃에 대한 함수의 동작을 보면

102
00:11:01,317 --> 00:11:11,293
2i를 곱한 것처럼 보이는 추가 그림을 제공합니다. 이 경우에는 2배의 확장과 결합된 90도 회전처럼 보입니다.

103
00:11:11,293 --> 00:11:22,205
안정성 분석을 위해 여기서 우리가 관심을 갖는 유일한 것은 성장 및 축소 요소이며 회전 부분은 중요하지 않습니다.

104
00:11:22,205 --> 00:11:34,320
따라서 고정점에서 함수의 도함수를 계산하고 이 결과의 절대값이 1보다 작은 경우 고정점이 끌어당기고 근처의 점이 고정점을 향해 들어오는 경향이 있음을 알려줍니다.

105
00:11:34,320 --> 00:11:40,744
해당 도함수의 절대값이 1보다 크면 고정점이 반발하고 이웃을 밀어낸다는 뜻입니다.

106
00:11:40,744 --> 00:11:50,320
예를 들어, 뉴턴 지도 표현의 미분을 계산하고 몇 가지를 단순화하면 다음과 같은 결과를 얻을 수 있습니다.

107
00:11:50,320 --> 00:11:59,978
따라서 z가 고정점이라면(이 문맥에서 이는 다항식 p의 근 중 하나임을 의미), 이 도함수는 1보다 작을 뿐만 아니라 0과 같습니다.

108
00:11:59,978 --> 00:12:07,805
이는 때때로 초유인 고정점이라고도 하는데, 이는 이 점 주변의 이웃이 단지 축소되는 것이 아니라 많이 축소된다는 것을 의미하기 때문입니다.

109
00:12:07,805 --> 00:12:17,333
그리고 다시 말하지만, 이는 일종의 설계에 따른 것입니다. 왜냐하면 뉴턴 방법의 의도는 가능한 한 빨리 루트를 향해 떨어지는 반복을 생성하는 것이기 때문입니다.

110
00:12:17,333 --> 00:12:27,225
z 제곱 + c 예를 살펴보면, 고정점을 찾기 위해 첫 번째 연습을 수행한 경우 다음 단계는 고정점 중 적어도 하나가 언제 끌어당기는지 묻는 것입니다.

111
00:12:27,225 --> 00:12:30,053
c의 어떤 값에 대해 이것이 참이 될까요?

112
00:12:30,053 --> 00:12:40,480
그런 다음 이것이 충분하지 않다면 찾은 결과를 사용하여 이 조건이 Mandelbrot 세트의 주요 카디오이드 모양에 해당한다는 것을 보여주십시오.

113
00:12:40,480 --> 00:12:45,120
이것은 명시적으로 계산할 수 있는 것인데 꽤 멋지네요.

114
00:12:45,120 --> 00:12:50,192
자연스러운 다음 단계는 주기에 관해 묻는 것입니다. 여기서부터 일이 정말 흥미로워지기 시작합니다.

115
00:12:50,192 --> 00:12:58,833
z의 f가 z가 아니고 다른 값이고, 그 값이 다시 z로 돌아오면 이는 2주기에 빠졌음을 의미합니다.

116
00:12:58,833 --> 00:13:06,073
f/f/z를 평가한 다음 이를 z와 동일하게 설정하여 이러한 종류의 두 사이클을 명시적으로 찾을 수 있습니다.

117
00:13:06,073 --> 00:13:11,960
예를 들어, z 제곱 + c 맵의 경우 f of f of z는 다음과 같이 확장됩니다.

118
00:13:11,960 --> 00:13:15,360
조금 지저분하지만, 그렇게 끔찍하지는 않습니다.

119
00:13:15,360 --> 00:13:19,920
강조해야 할 가장 중요한 점은 어느 정도 4차 방정식을 푸는 것으로 귀결된다는 것입니다.

120
00:13:19,920 --> 00:13:29,823
고정 소수점은 이 방정식의 해이기도 하므로 기술적으로 두 사이클은 원래 고정 소수점 방정식의 해를 뺀 이에 대한 해입니다.

121
00:13:29,823 --> 00:13:36,850
마찬가지로, 동일한 아이디어를 사용하여 f를 n번 다른 방식으로 구성하여 n 사이클을 찾을 수 있습니다.

122
00:13:36,850 --> 00:13:47,380
금방 얻을 수 있는 명시적인 표현은 엄청나게 지저분해집니다. 하지만 이 가상 프로세스를 기반으로 얼마나 많은 사이클을 예상할 것인지 묻는 것은 여전히 명쾌합니다.

123
00:13:47,380 --> 00:13:55,641
간단한 z 제곱 더하기 c 예를 고수하면 자체적으로 구성할 때 4차 다항식, 8차 다항식,

124
00:13:55,641 --> 00:14:02,121
16차 다항식 등을 얻게 되며 기하급수적으로 증가합니다. 다항식의 순서.

125
00:14:02,121 --> 00:14:14,158
따라서 원칙적으로 백만 주기에 몇 개의 사이클이 있는지 묻는다면 이는 2차에서 100만까지의 완전히 미친 다항식을 푸는 것과 동일하다는 것을 알 수 있습니다.

126
00:14:14,158 --> 00:14:25,440
다시 말하지만, 대수학의 기본 정리는 정확히 이런 방식으로 순환하는 복소 평면에서 2~100만 개의 점 정도에서 무언가를 찾을 것이라고 기대할 것입니다.

127
00:14:25,440 --> 00:14:31,891
그리고 더 일반적으로, 합리적인 맵의 경우, 주기 n의 주기에 해당하는 동작을 갖는 값을 항상 찾을 수 있습니다.

128
00:14:31,891 --> 00:14:36,618
그것은 궁극적으로 아마도 미친 다항식 표현을 해결하는 것으로 귀결됩니다.

129
00:14:36,618 --> 00:14:42,597
그리고 이 예와 마찬가지로 이러한 주기점의 수는 n에 따라 기하급수적으로 증가합니다.

130
00:14:42,597 --> 00:14:53,443
지난 영상에서 뉴턴의 프랙탈에 대해서는 별로 이야기하지 않았지만, 이런 과정을 거치더라도 어떤 종류의 순환에 빠지는 지점이 무수히 많다고 생각하면 좀 이상합니다.

131
00:14:53,443 --> 00:14:58,858
그러나 거의 모든 경우에 이러한 지점은 색상이 지정된 영역 사이의 경계 어딘가에 있으며

132
00:14:58,858 --> 00:15:03,611
실제로는 그 중 하나에 도달할 확률이 0이기 때문에 실제로 나타나지 않습니다.

133
00:15:03,611 --> 00:15:10,212
실제로 이들 중 하나에 빠지는 데 중요한 것은 주기 중 하나가 매력을 느끼는지 여부입니다.

134
00:15:10,212 --> 00:15:16,036
즉, 해당 주기의 값 주변 지점이 해당 주기로 끌려가는 경향이 있다는 의미입니다.

135
00:15:16,036 --> 00:15:23,660
수치적 방법에 관심이 있는 사람에게 매우 관련성이 높은 질문은 이 뉴턴의 지도 프로세스에 유인 주기가 있는지 여부입니다.

136
00:15:23,660 --> 00:15:31,172
왜냐하면 만약 존재한다면 초기 추측이 해당 주기에 갇혀 결코 찾지 못할 확률이 0이 아니라는 의미이기 때문입니다. 뿌리.

137
00:15:31,172 --> 00:15:33,271
여기에 대한 대답은 실제로 &#39;예&#39;입니다.

138
00:15:33,271 --> 00:15:38,729
좀 더 명확하게 말하면, z 세제곱 빼기 2z 더하기 2의 근을 찾으려고 하고 Newton의

139
00:15:38,729 --> 00:15:44,292
방법을 사용하는 경우 값 0 주변에서 시작하는 작은 클러스터에 무슨 일이 일어나는지 살펴보세요.

140
00:15:44,292 --> 00:15:46,132
앞뒤로 튀는 정도입니다.

141
00:15:46,132 --> 00:15:52,283
그리고 음, 좋습니다. 이 경우에는 우리가 시작한 클러스터가 약간 너무 커서 외부 점 중 일부가 흩어졌습니다.

142
00:15:52,283 --> 00:15:55,463
하지만 더 작은 클러스터로 시작하면 다음과 같습니다.

143
00:15:55,463 --> 00:16:00,760
모든 포인트가 실제로 0과 1 사이의 순환을 향해 어떻게 축소되는지 확인하세요.

144
00:16:00,760 --> 00:16:05,920
무작위 시드로 이것을 칠 가능성은 없지만 확실히 가능합니다.

145
00:16:05,920 --> 00:16:12,273
그런데 이와 같은 순환이 유인되는지 확인하기 위해 할 수 있는 연습은 f(f)(z)의

146
00:16:12,273 --> 00:16:18,760
도함수를 계산하고 입력 0에서 이 도함수가 1보다 작은 크기를 갖는지 확인하는 것입니다.

147
00:16:18,760 --> 00:16:26,880
내 마음을 조금 놀라게 한 것은 어떤 3차 다항식이 유인 사이클을 가지고 있는지 시각화하려고 할 때 어떤 일이 발생하는지입니다.

148
00:16:26,880 --> 00:16:32,828
뉴턴의 방법이 뿌리를 찾는 데 전혀 적합하다면 이러한 유인 주기는 드물어야 합니다.

149
00:16:32,828 --> 00:16:38,030
우선, 우리가 보고 있는 하나의 예를 더 잘 시각화하기 위해 이전과 동일한 프랙탈을

150
00:16:38,030 --> 00:16:43,786
그려서 해당 지점에서 시작하는 시드 값의 근이 무엇인지에 따라 각 지점을 색칠할 수 있습니다.

151
00:16:43,786 --> 00:16:53,600
하지만 이번에는 시드 값이 루트에 전혀 가까워지지 않으면 픽셀을 검정색으로 채색한다는 점 채색 조건이 추가됩니다.

152
00:16:53,600 --> 00:17:04,000
근을 조정하면(즉, 다양한 3차 다항식을 시도한다는 뜻) 검은색 픽셀이 전혀 보이지 않도록 배치할 위치를 찾는 것이 실제로 매우 어렵습니다.

153
00:17:04,000 --> 00:17:08,094
여기에서 이 작은 지점을 찾을 수 있지만 확실히 드뭅니다.

154
00:17:08,094 --> 00:17:17,841
이제 제가 원하는 것은 하나의 이미지로 가능한 모든 3차 다항식을 한 번에 시각화하여 어느 이미지에 유인 주기가 있는지 보여주는 일종의 방법입니다.

155
00:17:17,841 --> 00:17:25,024
운 좋게도 이러한 다항식 중 하나에 유인 주기가 있는지 여부를 테스트하는 정말 간단한 방법이 있다는 것이 밝혀졌습니다.

156
00:17:25,024 --> 00:17:31,742
여러분이 해야 할 일은 세 뿌리의 평균, 즉 여기 질량 중심에 있는 시드 값을 살펴보는 것입니다.

157
00:17:31,742 --> 00:17:40,040
밝혀진 바에 따르면, 이는 전혀 명확하지 않습니다. 만약 유인 주기가 있다면 이 종자 가치가 해당 유인 주기에 속할 것이라고 보장할 수 있습니다.

158
00:17:40,040 --> 00:17:44,552
즉, 검은 점이 있다면 이것이 그 중 하나가 될 것입니다.

159
00:17:44,552 --> 00:17:50,771
이 마법같은 사실이 어디서 유래하는지 알고 싶다면, 그것은 우리의 좋은 친구 파투(Fatou)의 정리에서 비롯됩니다.

160
00:17:50,771 --> 00:17:56,611
그는 이러한 합리적인 지도 중 하나에 유인 주기가 있는 경우 반복 함수의 도함수가

161
00:17:56,611 --> 00:18:02,704
0인 값을 볼 수 있으며 해당 값 중 적어도 하나가 주기에 속해야 함을 보여주었습니다.

162
00:18:02,704 --> 00:18:12,065
조금 이상한 사실처럼 보일 수도 있지만, 느슨한 직관은 주기가 매력적이려면 그 값 중 적어도 하나가 매우 작은 도함수를 가져야 하며,

163
00:18:12,065 --> 00:18:14,436
여기서 수축이 발생한다는 것입니다.

164
00:18:14,436 --> 00:18:19,950
그리고 이는 결국 주기의 해당 값이 도함수가 작을 뿐만 아니라 0과 같은 지점 근처에

165
00:18:19,950 --> 00:18:25,464
위치하며 그 지점이 결국 주기에 빨려 들어갈 만큼 충분히 가까워진다는 것을 의미합니다.

166
00:18:25,464 --> 00:18:35,045
이 사실은 또한 하나의 시드 값 z가 0인 Mandelbrot 집합을 사용하여 매우 완전하고 흥미로운 그림을 얻는 데 여전히 충분한 이유를 정당화합니다.

167
00:18:35,045 --> 00:18:40,203
찾아야 할 안정적인 주기가 있다면 해당 하나의 시드 값이 확실히 그것을 찾을 것입니다.

168
00:18:40,203 --> 00:18:51,293
오늘은 숙제와 연습문제를 너무 많이 내는 것 같지만, 그것에 관심이 있다면 또 다른 즐거운 점은 뉴턴의 방법에서 파생된 함수에서 찾은 미분 표현을 다시 살펴보는

169
00:18:51,293 --> 00:19:02,384
것입니다. 그리고 이 놀라운 파투의 정리를 사용하여 삼차 다항식에 대한 우리의 마법적인 사실, 즉 근의 중간점을 확인하는 것만으로도 충분하다는 사실을 보여줍니다.

170
00:19:02,384 --> 00:19:06,720
하지만 솔직히 말해서, 이 모든 것들은 실제로 걱정할 필요가 없는 세부 사항입니다.

171
00:19:06,720 --> 00:19:15,082
결론은 모든 다항식이 아닌 단 하나의 점을 살펴봄으로써 이러한 다항식 중 하나에 유인 주기가 있는지 여부에 대한 테스트를 수행할 수 있다는 것입니다.

172
00:19:15,082 --> 00:19:18,760
이 때문에 실제로 정말 멋진 다이어그램을 생성할 수 있습니다.

173
00:19:18,760 --> 00:19:25,437
이것이 작동하는 방식은 두 개의 루트를 제자리에 고정하는 것입니다. z에 놓는 것은 음의 1이고 z는 양의 1과 같습니다.

174
00:19:25,437 --> 00:19:29,501
그런 다음 세 번째 루트를 중심으로 이동합니다. 이를 람다라고 부르겠습니다.

175
00:19:29,501 --> 00:19:35,560
기억하세요. 우리가 찾고 있는 주요 특징은 질량 중심의 점이 검은색일 때입니다.

176
00:19:35,560 --> 00:19:42,785
그래서 제가 할 일은 오른쪽에 각 픽셀이 하나의 가능한 람다 선택에 해당하는 두 번째 다이어그램을 그리는 것입니다.

177
00:19:42,785 --> 00:19:48,836
우리가 할 일은 세 루트의 중간점 색상을 기반으로 해당 픽셀에 색상을 지정하는 것입니다.

178
00:19:48,836 --> 00:19:54,707
이것이 약간 혼란스럽게 느껴지더라도 괜찮습니다. 여기에는 많은 레이어가 작용하고 있습니다.

179
00:19:54,707 --> 00:20:02,000
오른쪽의 각 픽셀은 이 매개변수 람다에 의해 결정된 고유 다항식에 해당한다는 점을 기억하세요.

180
00:20:02,000 --> 00:20:04,714
실제로 이것을 매개변수 공간이라고 부를 수도 있습니다.

181
00:20:04,714 --> 00:20:13,840
익숙한 것 같나요?

182
00:20:13,840 --> 00:20:23,420
이 매개변수 공간의 점은 해당 다항식에 대한 뉴턴 방법 프로세스가 유인 주기를 생성하는 경우에만 검은색으로 표시됩니다.

183
00:20:23,420 --> 00:20:26,938
다시 한번 말씀드리지만, 소화하는 데 시간이 조금 걸리더라도 걱정하지 마세요.

184
00:20:26,938 --> 00:20:33,770
이제 언뜻 보면 이 다이어그램에 검은 점이 전혀 없어 보일 수도 있는데 이는 좋은 소식입니다.

185
00:20:33,770 --> 00:20:38,532
이는 대부분의 경우 뉴턴의 방법이 이와 같은 순환에 빠지지 않는다는 것을 의미합니다.

186
00:20:38,532 --> 00:20:43,852
하지만 저는 이것이 어디로 가는지 정확히 알 수 있을 만큼 충분히 미리 보았다고 생각합니다.

187
00:20:43,852 --> 00:20:49,069
확대하면 검은색 영역을 찾을 수 있고 그 검은색 영역은 정확히 만델브로트 세트처럼 보입니다.

188
00:20:49,069 --> 00:20:57,456
그러나 다시 한번, 이러한 기능 중 하나에 대한 매개변수를 조정하는 질문을 하면 이 상징적인 카디오이드와 거품 모양이 생성됩니다.

189
00:20:57,456 --> 00:21:02,937
결론은 이 모양이 생각하는 것만큼 z 제곱 + c 예제에만 국한되지 않는다는 것입니다.

190
00:21:02,937 --> 00:21:11,680
이는 이와 같은 프로세스를 갖는 매개변수 공간에 대한 보다 일반적이고 보편적인 것과 관련이 있는 것 같습니다.

191
00:21:11,680 --> 00:21:15,300
그럼에도 불구하고 한 가지 긴급한 질문은 우리가 프랙탈을 얻는 이유입니다.

192
00:21:15,300 --> 00:21:22,387
지난 비디오에서 나는 뉴턴 방법의 다이어그램이 색상이 있는 영역의 경계 주위에 작은 원을 그리면 그 원이

193
00:21:22,387 --> 00:21:29,474
실제로 그림에서 사용 가능한 모든 색상을 포함해야 하는 매우 독특한 속성을 갖는 방법에 대해 설명했습니다.

194
00:21:29,474 --> 00:21:32,502
그리고 이것은 합리적인 지도에 있어서 더 일반적으로 사실입니다.

195
00:21:32,502 --> 00:21:41,113
제한점, 제한 주기, 무한대 경향 등 제한 행동 지점이 속하는 영역에 색상을 할당하려는 경우 그리는 작은

196
00:21:41,113 --> 00:21:49,723
원에는 이러한 제한 행동 중 하나만 포함하는 지점이 포함됩니다. , 또는 모두 포함된 포인트를 포함합니다.

197
00:21:49,723 --> 00:21:51,494
그 사이에는 결코 아무것도 없습니다.

198
00:21:51,494 --> 00:21:57,285
따라서 최소한 세 가지 색상이 있는 경우 이 속성은 경계가 결코 매끄러울 수 없음을 의미합니다.

199
00:21:57,285 --> 00:22:03,399
매끄러운 세그먼트를 따라 모든 색상이 아닌 두 가지 색상에만 닿는 작은 원을 그릴 수 있기 때문입니다.

200
00:22:03,399 --> 00:22:08,605
그리고 경험적으로 이것이 우리가 보는 것입니다. 아무리 확대해도 이러한 경계는 항상 거칠습니다.

201
00:22:08,605 --> 00:22:15,458
또한 확대하면 프레임 내에서 사용 가능한 모든 색상을 항상 볼 수 있다는 것을 알 수 있습니다.

202
00:22:15,458 --> 00:22:22,066
이것은 두 가지 제한 동작만 있는 맥락에서 대략적인 경계를 설명하지는 않지만 여전히 묶을 가치가 있는 해당

203
00:22:22,066 --> 00:22:28,784
비디오에 남겨둔 느슨한 끝이며 Julia 세트와 두 가지 중요한 용어를 가져오는 좋은 변명입니다. 파투 세트.

204
00:22:28,784 --> 00:22:37,295
어떤 점이 결국 안정적이고 예측 가능한 패턴에 속하게 되면 반복 함수의 Fatou 집합의 일부라고 말합니다.

205
00:22:37,295 --> 00:22:41,632
그리고 우리가 본 모든 지도에는 거의 모든 것이 포함되어 있습니다.

206
00:22:41,632 --> 00:22:47,370
Julia 세트는 다른 모든 것입니다. 우리가 본 그림에서는 색상 영역 사이의 대략적인 경계,

207
00:22:47,370 --> 00:22:52,567
즉 하나의 안정적인 어트랙터에서 다른 안정적인 어트랙터로 전환할 때 발생하는 일입니다.

208
00:22:52,567 --> 00:22:58,164
예를 들어 Julia 집합에는 모든 반발 주기와 반발 고정점이 포함됩니다.

209
00:22:58,164 --> 00:23:04,561
Julia 집합의 일반적인 지점은 순환이 아니지만 명확한 패턴 없이 영원히 튀어 오를 것입니다.

210
00:23:04,561 --> 00:23:09,952
이제 Fatou 세트의 한 지점을 보고 그 주위에 충분히 작은 디스크를 그리면 관련

211
00:23:09,952 --> 00:23:15,688
안정적인 동작이 무엇이든 관계 없이 작은 디스크가 결국 축소되는 프로세스를 따르면 됩니다.

212
00:23:15,688 --> 00:23:22,735
무한대로 가는 것이 아니라면 디스크가 무한대 주변으로 줄어들고 있다고 생각할 수도 있지만 문제가 혼란스러울 수도 있습니다.

213
00:23:22,735 --> 00:23:28,223
대조적으로, 줄리아 집합의 한 점 주위에 작은 원판을 그리는 경우, 해당 원 내의 점이

214
00:23:28,223 --> 00:23:34,160
떨어져 나가고 자체 작업을 수행함에 따라 시간이 지남에 따라 디스크가 확장되는 경향이 있습니다.

215
00:23:34,160 --> 00:23:39,520
즉, Julia 집합의 점은 혼란스럽게 행동하는 경향이 있습니다.

216
00:23:39,520 --> 00:23:46,320
가까운 이웃은 심지어 매우 가까운 곳에 있더라도 결국 질적으로 다른 행동을 하게 됩니다.

217
00:23:46,320 --> 00:23:48,876
하지만 단순히 이 디스크가 팽창하는 것만은 아닙니다.

218
00:23:48,876 --> 00:23:55,922
앞에서 언급한 다색 속성의 핵심인 매우 놀라운 결과는 이 프로세스를 실행하면 작은 디스크가 결국

219
00:23:55,922 --> 00:24:03,360
너무 많이 팽창하여 최대 두 가지 예외를 제외하고 복잡한 평면의 모든 단일 지점에 도달한다는 것입니다.

220
00:24:03,360 --> 00:24:07,760
이것은 Julia가 설정한 모든 곳에 물건이 있다는 원칙으로 알려져 있습니다.

221
00:24:07,760 --> 00:24:09,287
좋아요, 실제로는 그렇게 부르지 않습니다.

222
00:24:09,287 --> 00:24:14,062
내가 읽은 자료에서 그것은 몬텔의 정리로 알려진 것에 대한 필연적인 결과로 언급되었습니다.

223
00:24:14,062 --> 00:24:15,575
하지만 그렇게 불러야 합니다.

224
00:24:15,575 --> 00:24:24,045
어떤 의미에서 이것이 우리에게 말하는 것은 Julia 집합의 포인트가 단순히 혼란스러운 것이 아니라 가능한 한 혼란스럽다는 것입니다.

225
00:24:24,045 --> 00:24:31,134
여기에서는 줄리아 집합의 한 지점에서 1백만 분의 1이라는 아주 작은 거리 내에서 시작하는 수천

226
00:24:31,134 --> 00:24:38,223
개의 지점으로 구성된 클러스터가 포함된 뉴턴 지도를 사용한 약간의 시뮬레이션을 보여 드리겠습니다.

227
00:24:38,223 --> 00:24:47,186
물론, 물건은 어디에나 있다는 원칙은 그 거리 내에 셀 수 없이 무한히 많은 점에 관한 것이며,

228
00:24:47,186 --> 00:24:53,826
결국 두 점을 제외하고 평면의 모든 것을 도달하도록 확장된다는 것입니다.

229
00:24:53,826 --> 00:24:57,018
하지만 이 작은 클러스터는 여전히 일반적인 아이디어를 제공해야 합니다.

230
00:24:57,018 --> 00:25:03,503
그 작은 디스크에서 나온 작은 유한 샘플이 겉보기에 모든 방향으로 여기저기에 뿌려집니다.

231
00:25:03,503 --> 00:25:12,208
이것이 우리의 목적에 있어 의미하는 바는, 끌어당기는 고정점이나 끌어당기는 주기와 같은 맵의 매력적인 동작이 있는 경우 Julia 집합의

232
00:25:12,208 --> 00:25:20,800
점 주위에 있는 작은 디스크의 값이 어떻게든 보장될 수 있다는 것입니다. 아주 작았지만 결국에는 그 매력적인 행동에 빠지게 될 것입니다.

233
00:25:20,800 --> 00:25:29,111
세 개 이상의 유인 행동이 있는 경우 Julia 집합이 왜 매끄럽지 않고 복잡해야 하는지에 대한 설명을 제공합니다.

234
00:25:29,111 --> 00:25:33,889
그럼에도 불구하고 이것은 완전히 만족스럽지 않을 수 있습니다. 왜냐하면 이 원칙은 애초에 왜

235
00:25:33,889 --> 00:25:38,850
어디에나 존재하는 원칙이 사실인지에 대한 의문을 제기하고 한 단계 더 나아갈 수 있기 때문입니다.

236
00:25:38,850 --> 00:25:46,148
제가 언급한 것처럼, 이는 몬텔의 정리라는 것에서 유래합니다. 솔직히 다루어야 할 내용이 많기 때문에 여기서는 자세히 설명하지 않기로 했습니다.

237
00:25:46,148 --> 00:25:52,316
내가 찾을 수 있는 증거는 결국 J 함수라고 알려진 것에 의존하게 되는데, 이는 그 자체로 완전히 복잡한 이야기입니다.

238
00:25:52,316 --> 00:25:56,916
물론 더 많은 내용을 알고 싶어하는 분들을 위해 설명에 링크와 리소스를 남겨두겠습니다.

239
00:25:56,916 --> 00:26:02,079
이 원칙이 왜 사실인지 확인할 수 있는 더 간단한 방법을 알고 계시다면 저는 귀를 기울일 것입니다.

240
00:26:02,079 --> 00:26:10,032
또한 간단한 참고 사항으로 우리가 지금까지 본 그림에는 면적이 0인 Julia 집합이 있지만 이는 일종의 이 영역 사이의 경계이며

241
00:26:10,032 --> 00:26:17,659
Julia 집합이 전체인 예가 있다는 점을 말씀드리고 싶습니다. 비행기에서는 모든 것이 혼란스러워서 일종의 거칠게 행동합니다.

242
00:26:17,659 --> 00:26:23,214
이 특정 섹션의 주요 내용은 혼돈과 프랙탈 사이의 연결입니다.

243
00:26:23,214 --> 00:26:32,336
처음에는 이것이 단지 서로 유사한 것처럼 보입니다. 아시다시피 뉴턴의 방법은 일부 시드 값에 대한 일종의 지저분한 과정으로 밝혀졌습니다.

244
00:26:32,336 --> 00:26:42,050
그리고 이 지저분함은 특정 지점의 궤적을 따라가는 방식으로 볼 수 있고, 다이어그램의 복잡성으로 인해 질적으로 다른 종류의 지저분함처럼 느껴집니다.

245
00:26:42,050 --> 00:26:45,022
어쩌면 그것은 좋은 은유가 될 수도 있지만 그 이상은 아닙니다.

246
00:26:45,022 --> 00:26:56,590
그러나 여기서 깔끔한 점은 일부 점이 얼마나 혼란스러운지를 정량화하면 이 경계 속성을 통해 대략적인 프랙탈 모양에 대한 실제 설명으로 이어진다는 것입니다.

247
00:26:56,590 --> 00:27:01,621
수학에서 혼돈과 프랙탈이 함께 결합되는 경우를 자주 볼 수 있으며, 적어도 나에게는 두

248
00:27:01,621 --> 00:27:06,960
가지 현상이 우연히 일치하는 것보다 그 결합이 논리적인 연결과 함께 올 때마다 만족스럽습니다.

