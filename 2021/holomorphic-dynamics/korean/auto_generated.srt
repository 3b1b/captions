1
00:00:00,000 --> 00:00:04,240
오늘 저는 동형 역학(holomorphicdynamics)으로 알려진 수학에 대해 말씀드리고 싶습니다.

2
00:00:04,240 --> 00:00:08,000
이것은 만델브로 집합과 같은 것을 연구하는 분야입니다. 사실 오늘 나의 주요

3
00:00:08,000 --> 00:00:12,720
목표 중 하나는 수학의 대표적인 형태인 이 상징적인 모양이 초기

4
00:00:12,720 --> 00:00:16,480
정의에서 제안한 것보다 더 일반적인 방식으로 어떻게 나타나는지 보여주는 것입니다.

5
00:00:17,200 --> 00:00:21,200
이제 이 필드는 지난 비디오에서 뉴턴의 프랙탈을 통해 이야기한 내용과도 밀접하게

6
00:00:21,200 --> 00:00:25,200
연결되어 있으며, 이 비디오 끝 부분에 있는 우리의 또 다른 목표는

7
00:00:25,200 --> 00:00:27,840
우리가 거기에서 가졌던 느슨한 끝을 묶는 데 도움이 될 것입니다.

8
00:00:30,000 --> 00:00:39,200
그래서 우선, 홀로모픽(holomorphic)이라는 단어가 조금 이상하게 보일 수도 있습니다. 이는 복소수 입력과 복소수

9
00:00:39,200 --> 00:00:44,480
출력이 있고 도함수를 구할 수도 있는 함수를 나타냅니다.

10
00:00:45,040 --> 00:00:49,280
기본적으로 이 맥락에서 도함수를 갖는다는 것은 함수가 주어진 점 근처, 점 및

11
00:00:49,280 --> 00:00:54,720
그 이웃 근처에서 어떻게 동작하는지 확대하면 대략 복잡한 상수를 곱하는 것처럼 크기

12
00:00:54,720 --> 00:00:59,520
조정 및 회전과 비슷하게 보인다는 것입니다. 이에 대해서는 잠시 후에 더

13
00:00:59,600 --> 00:01:03,520
자세히 설명하겠지만 지금은 여기에 다항식, 지수, 삼각 함수 등 여러분이

14
00:01:03,520 --> 00:01:06,560
적어둘 수 있는 대부분의 일반적인 함수가 포함되어 있다는 점만 알아두세요.

15
00:01:07,280 --> 00:01:12,400
여기 제목의 관련 역학은 일부 입력을 평가한 다음 방금

16
00:01:12,400 --> 00:01:17,440
얻은 내용에 대해 동일한 함수를 평가하고 다시 수행한다는 의미에서

17
00:01:17,440 --> 00:01:20,480
이러한 기능 중 하나를 반복적으로 적용하면 어떤 일이 발생하는지

18
00:01:21,440 --> 00:01:25,200
묻는 것에서 비롯됩니다. , 그리고 계속해서 또 다시.

19
00:01:26,000 --> 00:01:29,360
때때로 이로부터 나타나는 점의 패턴이 순환에 갇히게 됩니다.

20
00:01:30,400 --> 00:01:33,840
다른 경우에는 시퀀스가 일종의 제한점에 접근할 수도 있습니다.

21
00:01:35,040 --> 00:01:39,040
아니면 수열이 점점 더 커지고 무한대로 날아갈 수도 있습니다.

22
00:01:39,040 --> 00:01:42,640
수학자들은 이를 한계점, 즉 무한점에 접근하는 것으로 생각합니다.

23
00:01:42,640 --> 00:01:48,080
그리고 다른 때에는 여전히 패턴이 전혀 없고 혼란스럽게 행동합니다.

24
00:01:49,840 --> 00:01:53,600
놀라운 점은 기록할 수 있는 모든 종류의 함수에 대해

25
00:01:54,160 --> 00:01:58,880
이러한 다양한 가능한 동작이 발생할 때 시각화하기 위해 무언가를

26
00:01:58,880 --> 00:02:02,160
시도할 때 종종 엄청나게 복잡한 프랙탈 패턴이 발생한다는 것입니다.

27
00:02:03,280 --> 00:02:07,200
지난 영상을 시청하신 분들은 이미 이에 대한 깔끔한 예를 한 가지 보신 적이 있습니다.

28
00:02:07,200 --> 00:02:11,760
어떤 다항식 p의 근을 찾는 뉴턴의 방법이라는 알고리즘이 있는데, 그것이

29
00:02:11,760 --> 00:02:15,120
작동하는 방식은 기본적으로 x 빼기 x의 p를 x의 p

30
00:02:15,120 --> 00:02:19,120
프라임으로 나눈 식을 반복적으로 반복하는 것입니다. p 프라임은 도함수입니다.

31
00:02:19,920 --> 00:02:24,080
초기 시드 값이 해당 다항식의 근(x의 p가 0인 값)의 느슨한 근처에

32
00:02:24,080 --> 00:02:29,200
있는 경우 이 절차는 해당 근에 정말 빠르게 수렴하는 일련의

33
00:02:29,200 --> 00:02:34,000
값을 생성합니다. 이것이 실제로 유용한 알고리즘이 되는 이유입니다. 그러나 그런 다음

34
00:02:34,000 --> 00:02:39,600
우리는 복소 평면에서 이 작업을 수행하려고 했습니다. 가능한 많은 시드 값을 살펴보고 이러한 시드 값

35
00:02:39,600 --> 00:02:44,720
각각이 복소 평면의 어느 루트에 있을 수 있는지 묻습니다. 그런 다음 각 루트에

36
00:02:44,720 --> 00:02:50,000
색상을 연결한 다음 해당 픽셀에서 시작하는 시드 값이 최종적으로 도달할 루트를 기준으로

37
00:02:50,000 --> 00:02:55,680
평면의 각 픽셀에 색상을 지정했습니다. 우리가 얻은 결과는 색상 사이에

38
00:02:55,680 --> 00:02:59,200
거친 프랙탈 경계가 있는 엄청나게 복잡한 사진 중 일부였습니다.

39
00:03:02,240 --> 00:03:05,760
이제 이 예에서 우리가 실제로 반복하고 있는 함수를 보면, 예를 들어

40
00:03:05,760 --> 00:03:09,840
z 제곱 빼기 1과 같은 다항식의 특정 선택에 대해 전체 표현식을

41
00:03:09,840 --> 00:03:14,000
하나의 다항식을 다른 다항식으로 나눈 것처럼 다시 작성할 수 있습니다.

42
00:03:14,800 --> 00:03:19,600
수학자들은 이러한 종류의 함수를 합리적 함수(rational function)라고 부릅니다. 그리고 이것이 뉴턴의 방법에서

43
00:03:19,600 --> 00:03:24,240
비롯되었다는 사실을 잊어버린다면, 다른 합리적인 함수를 반복할 때 무슨 일이 일어나는지 합리적으로

44
00:03:24,240 --> 00:03:29,120
물어볼 수 있습니다. 실제로 이것이 바로 제1차 세계 대전 직후 수학자

45
00:03:29,120 --> 00:03:33,760
피에르 파투(Pierre Fatou)와 가스통 줄리아(Gaston Julia)가 했던 일입니다. 그리고 그들은 이러한

46
00:03:33,760 --> 00:03:38,560
합리적인 함수를 반복할 때 어떤 일이 발생하는지에 대한 놀랍도록 풍부한 이론을 구축했습니다. 이는

47
00:03:38,560 --> 00:03:43,120
여러분과 제가 할 수 있는 방식으로 시각화할 컴퓨터가 없다는 점을 고려하면 특히

48
00:03:43,120 --> 00:03:48,960
인상적입니다. 이 두 이름을 기억하세요. 나중에 나올 것입니다. 이와 같이 연구할 수

49
00:03:48,960 --> 00:03:53,200
있는 유리 함수와 그에 따른 프랙탈의 가장 대중화된 예는 가장 간단한 함수

50
00:03:53,760 --> 00:04:00,320
중 하나인 z 제곱 + c입니다. 여기서 c는 상수입니다. 나는 이것이 적어도 여러분

51
00:04:00,320 --> 00:04:04,640
중 많은 사람들에게 다소 친숙하다고 추측할 것입니다. 그러나 나중에 나올 내용을 위한 무대를 설정하는 데 도움이

52
00:04:04,640 --> 00:04:10,080
될 수 있기 때문에 여기에서 이야기를 빠르게 요약하는 것이 확실히 나쁠 것은 없습니다. 이 게임에서

53
00:04:10,080 --> 00:04:14,800
우리는 c를 변경할 수 있는 값으로 생각하고 움직일 수 있는 노란색 점으로

54
00:04:14,800 --> 00:04:21,280
표시됩니다. 실제 반복 프로세스에서는 항상 z의 초기 값이 0인 것으로 시작합니다.

55
00:04:21,280 --> 00:04:28,560
따라서 이 함수를 한 번 반복하고 z 제곱 + c를 수행하면 c를 얻습니다. 두 번째 반복하여

56
00:04:28,560 --> 00:04:34,480
해당 값을 함수에 연결하면 c 제곱에 c를 더한 결과가 나옵니다. 여기서 c 값을

57
00:04:34,560 --> 00:04:40,320
변경하면 두 번째 값이 어떻게 고정적으로 움직이는지 볼 수 있습니다. 그런 다음

58
00:04:40,320 --> 00:04:45,520
두 번째 값을 연결하여 z3을 얻고 세 번째 값을 연결하여 z4를 얻은 다음 계속해서 값

59
00:04:45,520 --> 00:04:52,320
체인을 시각화할 수 있습니다. 따라서 처음 많은 값, 즉 c의 일부 선택에 대해

60
00:04:52,320 --> 00:04:58,080
이 작업을 여러 번 계속하면 이 프로세스는 계속 제한됩니다. 여전히 화면에서 모든 것을 볼 수

61
00:04:58,080 --> 00:05:02,800
있습니다. 그리고 다른 때에는 그것이 터지는 것처럼 보이며 실제로 그것이 2만큼 커지면 무한대로 터질 것이라는

62
00:05:02,800 --> 00:05:10,800
것을 보여줄 수 있습니다. 경계가 검은색으로 유지되는 평면의 점을 색칠하고 프로세스가

63
00:05:10,800 --> 00:05:16,800
무한대로 돌진하는 속도에 따라 발산 값에 다른 색상 그라데이션을 할당하면

64
00:05:16,800 --> 00:05:22,160
모든 수학에서 가장 상징적인 이미지 중 하나를 얻게 됩니다. 만델브로

65
00:05:22,160 --> 00:05:28,080
집합. 그런데 이 궤적의 대화형 점과 막대 시각화는 Ben Spark의

66
00:05:28,080 --> 00:05:32,160
일러스트레이션과 Mandelbrot 세트에 대해 그가 만든 Numberphile 비디오에서 많은 영감을

67
00:05:32,160 --> 00:05:36,320
받았습니다. 훌륭합니다. 꼭 시청해 보세요. 솔직히 여기서 다시 구현하지 않는 것이 너무 재미

68
00:05:36,320 --> 00:05:41,440
있다고 생각했습니다. 또한 ako의 대화형 기사를 적극 추천합니다. 아직 읽어보지

69
00:05:41,440 --> 00:05:45,680
못한 분들을 위해 이 모든 내용을 소개합니다. Ben Spark의 그림에서

70
00:05:45,680 --> 00:05:50,320
좋은 점은 Mandelbrot 집합의 서로 다른 부분이 실제로 나타내는 것을

71
00:05:50,320 --> 00:05:56,400
어떻게 조명하는지입니다. 이 가장 큰 카디오이드 섹션에는 c 값이 포함되므로 프로세스는

72
00:05:56,400 --> 00:06:01,760
결국 특정 한계에 수렴됩니다. 왼쪽의 큰 원은 프로세스가 두 값

73
00:06:01,760 --> 00:06:06,560
사이의 순환에 갇히는 값을 나타내고, 위쪽과 아래쪽 원은

74
00:06:06,560 --> 00:06:11,440
프로세스가 세 값의 순환에 갇히는 값을 나타냅니다. 이

75
00:06:11,440 --> 00:06:18,240
작은 섬들은 각각 고유한 의미를 가지고 있습니다. 또한 이 Mandelbrot 집합과 이전에

76
00:06:18,240 --> 00:06:22,400
살펴본 Newton 도형이 서로 다른 기본 함수를 넘어 각각

77
00:06:22,400 --> 00:06:27,440
구성되는 방식 사이에는 중요한 차이점이 있습니다. Mandelbrot 집합의 경우 일관된 시드

78
00:06:27,440 --> 00:06:33,520
값 z는 0과 같지만 우리가 조정하는 것은 함수 자체를 변경하는 매개변수

79
00:06:33,520 --> 00:06:38,960
c입니다. 그래서 여러분이 보고 있는 것은 매개변수 공간이라고 부를 수 있는 것입니다. 그러나 뉴턴의 프랙탈에는

80
00:06:38,960 --> 00:06:44,480
변하지 않는 단일 함수가 있지만 각 픽셀과 연관시키는 것은 프로세스에 대한

81
00:06:44,480 --> 00:06:50,880
다른 시드 값입니다. 물론 우리는 지도 z 제곱 + c를 사용하여 동일한 게임을 할 수

82
00:06:50,880 --> 00:06:55,600
있고, c를 어떤 상수로 고정한 다음 픽셀이 다른 가능한 초기 값 z naught를 나타내도록 할

83
00:06:55,600 --> 00:07:01,120
수 있습니다. 따라서 만델브로 집합의 각 픽셀은 고유한 기능에 해당하는 반면,

84
00:07:01,120 --> 00:07:06,880
오른쪽의 이미지는 각각 단일 기능에 해당합니다. 매개변수 c를 변경하면

85
00:07:06,880 --> 00:07:12,400
오른쪽 이미지 전체가 변경됩니다. 다시 한 번 명확하게 말하자면, 적용되는

86
00:07:12,400 --> 00:07:17,200
규칙은 프로세스가 제한된 상태로 유지되면 픽셀을 검은색으로 지정한 다음, 무한대로

87
00:07:17,200 --> 00:07:22,320
갈라지는 속도에 따라 무한대로 갈라지는 픽셀에 일종의 그라디언트를 적용한다는 것입니다.

88
00:07:23,280 --> 00:07:27,760
원칙적으로 생각해 보면 생각하기가 좀 이상합니다. c와 z의 모든 조합으로

89
00:07:27,760 --> 00:07:32,800
이루어진 4차원 공간이 있습니다. 여기서 우리가 하는 일은 상상할

90
00:07:32,800 --> 00:07:36,320
수 없는 개별적인 2차원 조각을 살펴보는 것과 같습니다. 무늬.

91
00:07:37,600 --> 00:07:43,600
여러분은 줄리아 집합 또는 줄리아 프랙탈이라고 불리는 오른쪽의 이미지를 듣거나 읽게 될

92
00:07:43,600 --> 00:07:47,200
것입니다. 이 모든 것에 대해 처음 배웠을 때 나는 이것이 용어라는

93
00:07:47,200 --> 00:07:52,320
오해를 갖고 있었다는 것을 인정할 것입니다. Julia 집합은 특히 z 제곱에

94
00:07:52,320 --> 00:07:57,040
c를 더한 경우를 나타내며, 게다가 내부의 검은색 영역을 나타냅니다. 그러나 Julia

95
00:07:57,040 --> 00:08:01,600
집합이라는 용어는 훨씬 더 일반적인 정의를 가지며 내부가 아닌 이러한 영역의

96
00:08:01,600 --> 00:08:07,200
경계만을 나타냅니다. 좀 더 구체적인 정의를 위한 기반을 마련하고 제가 처음에

97
00:08:07,200 --> 00:08:11,520
언급한 첫 번째 목표를 향해 전진하기 위해서는 한 걸음 물러서서 지금 이

98
00:08:11,520 --> 00:08:16,080
모든 것을 발견하는 수학자로서 자신을 상상해 보는 것이 좋습니다. 이에 관한 이론을

99
00:08:16,080 --> 00:08:21,200
구성하기 위해 실제로 무엇을 하시겠습니까? 예쁜 그림을 보는 것도 중요하지만

100
00:08:21,200 --> 00:08:24,720
실제로 다 이해하고 싶다면 어떤 질문을 하시겠습니까?

101
00:08:25,840 --> 00:08:30,080
일반적으로 복잡한 것을 이해하고 싶다면 시작하기 좋은 곳은 시스템에

102
00:08:30,080 --> 00:08:34,720
간단한 동작, 바람직하게는 가능한 가장 단순한 동작을 하는 부분이

103
00:08:34,720 --> 00:08:40,400
있는지 물어보는 것입니다. 프로세스는 제자리에 고정되어 있습니다. 즉, z의

104
00:08:40,400 --> 00:08:45,840
f는 z와 같습니다. 그것은 꽤 지루한 역학 세트입니다. 제 생각에는 여러분도 동의하실 것입니다.

105
00:08:46,400 --> 00:08:51,360
우리는 이 속성을 가진 값을 함수의 고정점이라고 부릅니다. 뉴턴의 방법에서 발생하는

106
00:08:51,360 --> 00:08:56,560
함수의 경우 설계상 관련 다항식의 근에 고정점을 갖습니다.

107
00:08:56,560 --> 00:09:02,800
p/z가 0이면 전체 표현식이 단순히 z와 같다는 것을 직접 확인할

108
00:09:02,800 --> 00:09:07,600
수 있습니다. 이것이 바로 고정점이 된다는 의미입니다. 연습에 열중하고 있다면 잠시

109
00:09:07,600 --> 00:09:12,720
멈추고 만델브로 집합 함수 z 제곱 더하기 c의 고정점을 계산하는 것을 즐길

110
00:09:12,720 --> 00:09:20,480
수 있습니다. 더 일반적으로, 모든 유리 함수는 항상 고정점을 가지게 됩니다. 왜냐하면

111
00:09:20,480 --> 00:09:25,040
이 식이 z와 같을 때 묻는 것은 항상 일부 다항식의 근을

112
00:09:25,040 --> 00:09:29,440
찾는 것으로 재배치될 수 있고, 대수학의 기본 정리에서 이것은 일반적으로 다음

113
00:09:29,440 --> 00:09:33,760
수만큼 많은 해를 가져야 하기 때문입니다. 이 표현에서 가장 높은 등급입니다.

114
00:09:34,800 --> 00:09:39,600
덧붙여서, 이것은 뉴턴의 방법을 사용하여 고정점을 찾을 수도 있다는 것을

115
00:09:39,760 --> 00:09:41,920
의미합니다. 어쩌면 그것은 지금 우리에게 너무 메타적인 것일 수도 있습니다.

116
00:09:42,640 --> 00:09:46,720
이제 고정점에 대해 묻는 것이 쉬울 수도 있지만 전체 역학, 즉 우리가

117
00:09:46,720 --> 00:09:53,040
보고 있는 다이어그램을 이해하기 위한 핵심 아이디어는 안정성을 이해하는 것입니다. 고정점은

118
00:09:53,040 --> 00:09:58,800
가까운 점들이 그쪽으로 끌려가는 경향이 있으면 끌어당기고, 멀어지면 밀어내는 경향이 있다고

119
00:09:58,800 --> 00:10:04,080
말합니다. 그리고 이것은 함수의 도함수를 사용하여 명시적으로 실제로 계산할 수 있는

120
00:10:04,080 --> 00:10:09,680
것입니다. 상징적으로, 복소 함수의 도함수를 취하면 실제 함수의 경우와 정확히 동일하게

121
00:10:09,680 --> 00:10:14,400
보입니다. 단, z 제곱과 같은 함수는 2 x z의 도함수를 갖습니다.

122
00:10:14,400 --> 00:10:20,160
하지만 기하학적으로 이것이 의미하는 바를 해석하는 정말 멋진 방법이 있습니다. 예를 들어,

123
00:10:20,160 --> 00:10:25,760
입력 1에서 이 특정 함수의 도함수는 2로 평가되며, 이것이 우리에게 알려주는

124
00:10:25,760 --> 00:10:30,720
것은 입력 주위의 아주 작은 이웃을 보고 그 작은 영역의 모든

125
00:10:30,720 --> 00:10:34,720
점에 무슨 일이 일어나는지 추적한다는 것입니다. 함수를 적용할 때 이웃(이

126
00:10:34,720 --> 00:10:40,880
경우 z 제곱)은 2를 곱하는 것처럼 보입니다. 이것이 2의 도함수가 의미하는 바입니다.

127
00:10:40,880 --> 00:10:48,160
또 다른 예를 들어 입력 i를 살펴보겠습니다. 우리는 이 함수가 해당 입력을 -1 값,

128
00:10:48,160 --> 00:10:54,000
즉 i 제곱으로 이동한다는 것을 알고 있습니다. 하지만 이 값의 도함수가 2배라는

129
00:10:54,000 --> 00:10:59,840
추가 정보는 해당 지점 주위를 확대하고 이 작은 이웃에

130
00:10:59,840 --> 00:11:05,680
대한 함수의 동작을 보면 2i를 곱한 것처럼 보이는 추가

131
00:11:05,680 --> 00:11:10,240
그림을 제공합니다. 이 경우에는 2배의 확장과 결합된 90도 회전처럼

132
00:11:10,240 --> 00:11:18,480
보입니다. 안정성 분석을 위해 여기서 우리가 관심을 갖는 유일한 것은 성장

133
00:11:18,480 --> 00:11:23,360
및 축소 요소이며 회전 부분은 중요하지 않습니다. 따라서 고정점에서 함수의

134
00:11:23,360 --> 00:11:29,120
도함수를 계산하고 이 결과의 절대값이 1보다 작은 경우 고정점이

135
00:11:29,120 --> 00:11:33,680
끌어당기고 근처의 점이 고정점을 향해 들어오는 경향이 있음을 알려줍니다.

136
00:11:34,320 --> 00:11:39,040
해당 도함수의 절대값이 1보다 크면 고정점이 반발하고 이웃을

137
00:11:39,040 --> 00:11:44,640
밀어낸다는 뜻입니다. 예를 들어, 뉴턴 지도 표현의 미분을 계산하고

138
00:11:44,640 --> 00:11:49,040
몇 가지를 단순화하면 다음과 같은 결과를 얻을 수 있습니다.

139
00:11:50,320 --> 00:11:55,520
따라서 z가 고정점이라면(이 문맥에서 이는 다항식 p의 근 중 하나임을 의미), 이

140
00:11:55,520 --> 00:12:01,920
도함수는 1보다 작을 뿐만 아니라 0과 같습니다. 이는 때때로 초유인 고정점이라고도

141
00:12:01,920 --> 00:12:06,160
하는데, 이는 이 점 주변의 이웃이 단지 축소되는 것이 아니라 많이 축소된다는

142
00:12:06,160 --> 00:12:12,880
것을 의미하기 때문입니다. 그리고 다시 말하지만, 이는 일종의 설계에 따른 것입니다. 왜냐하면 뉴턴 방법의 의도는

143
00:12:12,880 --> 00:12:18,880
가능한 한 빨리 루트를 향해 떨어지는 반복을 생성하는 것이기 때문입니다. z 제곱 + c

144
00:12:18,880 --> 00:12:23,600
예를 살펴보면, 고정점을 찾기 위해 첫 번째 연습을 수행한 경우 다음 단계는 고정점

145
00:12:23,600 --> 00:12:29,600
중 적어도 하나가 언제 끌어당기는지 묻는 것입니다. c의 어떤 값에 대해 이것이 참이

146
00:12:29,600 --> 00:12:35,360
될까요? 그런 다음 이것이 충분하지 않다면 찾은 결과를 사용하여 이

147
00:12:35,360 --> 00:12:40,480
조건이 Mandelbrot 세트의 주요 카디오이드 모양에 해당한다는 것을 보여주십시오.

148
00:12:40,480 --> 00:12:42,960
이것은 명시적으로 계산할 수 있는 것인데 꽤 멋지네요.

149
00:12:45,120 --> 00:12:49,360
자연스러운 다음 단계는 주기에 관해 묻는 것입니다. 여기서부터 일이 정말 흥미로워지기

150
00:12:49,360 --> 00:12:56,400
시작합니다. z의 f가 z가 아니고 다른 값이고, 그 값이 다시 z로

151
00:12:56,400 --> 00:13:01,920
돌아오면 이는 2주기에 빠졌음을 의미합니다. f/f/z를 평가한 다음 이를 z와 동일하게 설정하여 이러한

152
00:13:01,920 --> 00:13:09,280
종류의 두 사이클을 명시적으로 찾을 수 있습니다. 예를 들어, z 제곱 + c 맵의 경우

153
00:13:09,280 --> 00:13:15,360
f of f of z는 다음과 같이 확장됩니다. 조금 지저분하지만, 그렇게 끔찍하지는 않습니다.

154
00:13:15,360 --> 00:13:19,360
강조해야 할 가장 중요한 점은 어느 정도 4차 방정식을 푸는 것으로 귀결된다는 것입니다.

155
00:13:19,920 --> 00:13:23,920
고정 소수점은 이 방정식의 해이기도 하므로 기술적으로 두 사이클은

156
00:13:23,920 --> 00:13:28,880
원래 고정 소수점 방정식의 해를 뺀 이에 대한

157
00:13:28,880 --> 00:13:35,280
해입니다. 마찬가지로, 동일한 아이디어를 사용하여 f를 n번 다른 방식으로 구성하여 n 사이클을

158
00:13:35,280 --> 00:13:41,760
찾을 수 있습니다. 금방 얻을 수 있는 명시적인 표현은 엄청나게 지저분해집니다. 하지만 이

159
00:13:41,760 --> 00:13:46,960
가상 프로세스를 기반으로 얼마나 많은 사이클을 예상할 것인지 묻는 것은 여전히 명쾌합니다.

160
00:13:46,960 --> 00:13:52,480
간단한 z 제곱 더하기 c 예를 고수하면 자체적으로

161
00:13:52,480 --> 00:13:57,680
구성할 때 4차 다항식, 8차 다항식, 16차 다항식 등을

162
00:13:57,680 --> 00:14:03,200
얻게 되며 기하급수적으로 증가합니다. 다항식의 순서. 따라서 원칙적으로

163
00:14:03,200 --> 00:14:08,320
백만 주기에 몇 개의 사이클이 있는지 묻는다면 이는 2차에서 100만까지의

164
00:14:08,400 --> 00:14:13,520
완전히 미친 다항식을 푸는 것과 동일하다는 것을 알 수

165
00:14:13,520 --> 00:14:18,800
있습니다. 다시 말하지만, 대수학의 기본 정리는 정확히 이런 방식으로 순환하는 복소

166
00:14:18,800 --> 00:14:24,480
평면에서 2~100만 개의 점 정도에서 무언가를 찾을 것이라고 기대할 것입니다.

167
00:14:25,440 --> 00:14:30,320
그리고 더 일반적으로, 합리적인 맵의 경우, 주기 n의 주기에 해당하는 동작을 갖는 값을 항상

168
00:14:30,320 --> 00:14:36,000
찾을 수 있습니다. 그것은 궁극적으로 아마도 미친 다항식 표현을 해결하는 것으로

169
00:14:36,000 --> 00:14:41,440
귀결됩니다. 그리고 이 예와 마찬가지로 이러한 주기점의 수는 n에 따라

170
00:14:41,440 --> 00:14:46,880
기하급수적으로 증가합니다. 지난 영상에서 뉴턴의 프랙탈에 대해서는 별로 이야기하지 않았지만,

171
00:14:46,880 --> 00:14:51,200
이런 과정을 거치더라도 어떤 종류의 순환에 빠지는 지점이 무수히 많다고

172
00:14:51,200 --> 00:14:56,960
생각하면 좀 이상합니다. 그러나 거의 모든 경우에 이러한 지점은 색상이

173
00:14:56,960 --> 00:15:01,040
지정된 영역 사이의 경계 어딘가에 있으며 실제로는 그 중 하나에 도달할 확률이

174
00:15:01,040 --> 00:15:06,240
0이기 때문에 실제로 나타나지 않습니다. 실제로 이들 중 하나에 빠지는 데

175
00:15:06,240 --> 00:15:11,360
중요한 것은 주기 중 하나가 매력을 느끼는지 여부입니다. 즉, 해당 주기의 값

176
00:15:11,360 --> 00:15:17,840
주변 지점이 해당 주기로 끌려가는 경향이 있다는 의미입니다. 수치적 방법에 관심이 있는

177
00:15:17,840 --> 00:15:22,960
사람에게 매우 관련성이 높은 질문은 이 뉴턴의 지도 프로세스에 유인 주기가 있는지

178
00:15:22,960 --> 00:15:27,760
여부입니다. 왜냐하면 만약 존재한다면 초기 추측이 해당 주기에 갇혀 결코 찾지 못할

179
00:15:27,760 --> 00:15:33,600
확률이 0이 아니라는 의미이기 때문입니다. 뿌리. 여기에 대한 대답은 실제로 &#39;예&#39;입니다. 좀

180
00:15:33,600 --> 00:15:39,520
더 명확하게 말하면, z 세제곱 빼기 2z 더하기 2의 근을 찾으려고 하고 Newton의 방법을 사용하는

181
00:15:39,520 --> 00:15:45,440
경우 값 0 주변에서 시작하는 작은 클러스터에 무슨 일이 일어나는지 살펴보세요. 앞뒤로 튀는

182
00:15:45,440 --> 00:15:50,240
정도입니다. 그리고 음, 좋습니다. 이 경우에는 우리가 시작한 클러스터가 약간 너무 커서

183
00:15:50,240 --> 00:15:54,560
외부 점 중 일부가 흩어졌습니다. 하지만 더 작은 클러스터로 시작하면 다음과

184
00:15:54,560 --> 00:16:00,160
같습니다. 모든 포인트가 실제로 0과 1 사이의 순환을 향해 어떻게 축소되는지

185
00:16:00,160 --> 00:16:04,960
확인하세요. 무작위 시드로 이것을 칠 가능성은 없지만 확실히 가능합니다.

186
00:16:05,920 --> 00:16:10,320
그런데 이와 같은 순환이 유인되는지 확인하기 위해 할 수 있는

187
00:16:10,320 --> 00:16:16,320
연습은 f(f)(z)의 도함수를 계산하고 입력 0에서 이 도함수가 1보다 작은

188
00:16:16,320 --> 00:16:21,200
크기를 갖는지 확인하는 것입니다. . 내 마음을 조금 놀라게 한 것은 어떤

189
00:16:21,200 --> 00:16:26,880
3차 다항식이 유인 사이클을 가지고 있는지 시각화하려고 할 때 어떤 일이 발생하는지입니다.

190
00:16:26,880 --> 00:16:32,000
뉴턴의 방법이 뿌리를 찾는 데 전혀 적합하다면 이러한 유인 주기는 드물어야

191
00:16:32,000 --> 00:16:37,680
합니다. 우선, 우리가 보고 있는 하나의 예를 더 잘 시각화하기 위해 이전과 동일한

192
00:16:37,680 --> 00:16:42,560
프랙탈을 그려서 해당 지점에서 시작하는 시드 값의 근이 무엇인지에 따라 각 지점을

193
00:16:42,560 --> 00:16:47,680
색칠할 수 있습니다. 하지만 이번에는 시드 값이 루트에 전혀 가까워지지

194
00:16:47,680 --> 00:16:52,480
않으면 픽셀을 검정색으로 채색한다는 점 채색 조건이 추가됩니다.

195
00:16:53,600 --> 00:16:58,480
근을 조정하면(즉, 다양한 3차 다항식을 시도한다는 뜻) 검은색 픽셀이 전혀

196
00:16:58,480 --> 00:17:03,440
보이지 않도록 배치할 위치를 찾는 것이 실제로 매우 어렵습니다.

197
00:17:04,000 --> 00:17:09,840
여기에서 이 작은 지점을 찾을 수 있지만 확실히 드뭅니다. 이제 제가 원하는 것은

198
00:17:09,840 --> 00:17:15,840
하나의 이미지로 가능한 모든 3차 다항식을 한 번에 시각화하여 어느 이미지에 유인 주기가

199
00:17:15,840 --> 00:17:21,360
있는지 보여주는 일종의 방법입니다. 운 좋게도 이러한 다항식 중 하나에 유인 주기가 있는지

200
00:17:21,360 --> 00:17:26,480
여부를 테스트하는 정말 간단한 방법이 있다는 것이 밝혀졌습니다. 여러분이 해야 할 일은

201
00:17:26,480 --> 00:17:32,400
세 뿌리의 평균, 즉 여기 질량 중심에 있는 시드 값을 살펴보는 것입니다. 밝혀진 바에

202
00:17:32,400 --> 00:17:37,040
따르면, 이는 전혀 명확하지 않습니다. 만약 유인 주기가 있다면 이 종자 가치가 해당 유인

203
00:17:37,040 --> 00:17:43,040
주기에 속할 것이라고 보장할 수 있습니다. 즉, 검은 점이 있다면 이것이 그 중

204
00:17:43,040 --> 00:17:48,080
하나가 될 것입니다. 이 마법같은 사실이 어디서 유래하는지 알고 싶다면, 그것은 우리의

205
00:17:48,080 --> 00:17:53,520
좋은 친구 파투(Fatou)의 정리에서 비롯됩니다. 그는 이러한 합리적인 지도 중 하나에 유인

206
00:17:53,520 --> 00:17:58,400
주기가 있는 경우 반복 함수의 도함수가 0인 값을 볼 수 있으며

207
00:17:58,400 --> 00:18:04,080
해당 값 중 적어도 하나가 주기에 속해야 함을 보여주었습니다. 조금 이상한 사실처럼

208
00:18:04,080 --> 00:18:09,440
보일 수도 있지만, 느슨한 직관은 주기가 매력적이려면 그 값 중

209
00:18:09,440 --> 00:18:13,920
적어도 하나가 매우 작은 도함수를 가져야 하며, 여기서 수축이 발생한다는

210
00:18:13,920 --> 00:18:19,200
것입니다. 그리고 이는 결국 주기의 해당 값이 도함수가 작을 뿐만 아니라 0과 같은

211
00:18:19,200 --> 00:18:24,160
지점 근처에 위치하며 그 지점이 결국 주기에 빨려 들어갈 만큼 충분히 가까워진다는

212
00:18:24,160 --> 00:18:30,000
것을 의미합니다. 이 사실은 또한 하나의 시드 값 z가 0인 Mandelbrot

213
00:18:30,000 --> 00:18:34,640
집합을 사용하여 매우 완전하고 흥미로운 그림을 얻는 데 여전히 충분한 이유를 정당화합니다.

214
00:18:34,640 --> 00:18:40,080
찾아야 할 안정적인 주기가 있다면 해당 하나의 시드 값이 확실히 그것을 찾을 것입니다.

215
00:18:40,080 --> 00:18:46,000
오늘은 숙제와 연습문제를 너무 많이 내는 것 같지만, 그것에 관심이 있다면

216
00:18:46,000 --> 00:18:50,560
또 다른 즐거운 점은 뉴턴의 방법에서 파생된 함수에서 찾은 미분 표현을

217
00:18:50,560 --> 00:18:56,240
다시 살펴보는 것입니다. 그리고 이 놀라운 파투의 정리를 사용하여 삼차 다항식에

218
00:18:56,240 --> 00:19:01,920
대한 우리의 마법적인 사실, 즉 근의 중간점을 확인하는 것만으로도 충분하다는 사실을

219
00:19:01,920 --> 00:19:06,720
보여줍니다. 하지만 솔직히 말해서, 이 모든 것들은 실제로 걱정할 필요가 없는 세부 사항입니다.

220
00:19:06,720 --> 00:19:10,880
결론은 모든 다항식이 아닌 단 하나의 점을 살펴봄으로써 이러한 다항식 중 하나에 유인

221
00:19:10,880 --> 00:19:16,400
주기가 있는지 여부에 대한 테스트를 수행할 수 있다는 것입니다. 이 때문에 실제로

222
00:19:16,400 --> 00:19:21,120
정말 멋진 다이어그램을 생성할 수 있습니다. 이것이 작동하는 방식은 두 개의 루트를 제자리에 고정하는

223
00:19:21,120 --> 00:19:26,480
것입니다. z에 놓는 것은 음의 1이고 z는 양의 1과 같습니다. 그런 다음 세 번째

224
00:19:26,480 --> 00:19:32,720
루트를 중심으로 이동합니다. 이를 람다라고 부르겠습니다. 기억하세요. 우리가 찾고 있는 주요 특징은

225
00:19:32,720 --> 00:19:38,400
질량 중심의 점이 검은색일 때입니다. 그래서 제가 할 일은 오른쪽에 각 픽셀이 하나의

226
00:19:38,400 --> 00:19:44,880
가능한 람다 선택에 해당하는 두 번째 다이어그램을 그리는 것입니다. 우리가 할 일은 세 루트의

227
00:19:44,880 --> 00:19:50,480
중간점 색상을 기반으로 해당 픽셀에 색상을 지정하는 것입니다. 이것이 약간 혼란스럽게

228
00:19:50,480 --> 00:19:55,520
느껴지더라도 괜찮습니다. 여기에는 많은 레이어가 작용하고 있습니다. 오른쪽의 각

229
00:19:55,520 --> 00:20:01,280
픽셀은 이 매개변수 람다에 의해 결정된 고유 다항식에 해당한다는 점을 기억하세요.

230
00:20:02,000 --> 00:20:05,600
실제로 이것을 매개변수 공간이라고 부를 수도 있습니다. 익숙한 것 같나요?

231
00:20:13,840 --> 00:20:20,000
이 매개변수 공간의 점은 해당 다항식에 대한 뉴턴 방법 프로세스가

232
00:20:20,000 --> 00:20:25,040
유인 주기를 생성하는 경우에만 검은색으로 표시됩니다. 다시 한번 말씀드리지만, 소화하는 데

233
00:20:25,120 --> 00:20:30,400
시간이 조금 걸리더라도 걱정하지 마세요. 이제 언뜻 보면 이 다이어그램에 검은 점이 전혀

234
00:20:30,400 --> 00:20:35,920
없어 보일 수도 있는데 이는 좋은 소식입니다. 이는 대부분의 경우 뉴턴의 방법이 이와

235
00:20:35,920 --> 00:20:41,200
같은 순환에 빠지지 않는다는 것을 의미합니다. 하지만 저는 이것이 어디로 가는지 정확히 알 수

236
00:20:41,200 --> 00:20:46,800
있을 만큼 충분히 미리 보았다고 생각합니다. 확대하면 검은색 영역을 찾을 수 있고 그 검은색

237
00:20:46,800 --> 00:20:52,960
영역은 정확히 만델브로트 세트처럼 보입니다. 그러나 다시 한번, 이러한 기능 중 하나에 대한 매개변수를

238
00:20:52,960 --> 00:20:59,440
조정하는 질문을 하면 이 상징적인 카디오이드와 거품 모양이 생성됩니다. 결론은 이 모양이 생각하는 것만큼

239
00:20:59,440 --> 00:21:04,560
z 제곱 + c 예제에만 국한되지 않는다는 것입니다. 이는 이와 같은 프로세스를

240
00:21:04,560 --> 00:21:08,880
갖는 매개변수 공간에 대한 보다 일반적이고 보편적인 것과 관련이 있는 것 같습니다.

241
00:21:11,680 --> 00:21:17,360
그럼에도 불구하고 한 가지 긴급한 질문은 우리가 프랙탈을 얻는 이유입니다. 지난 비디오에서 나는 뉴턴 방법의

242
00:21:17,360 --> 00:21:22,640
다이어그램이 색상이 있는 영역의 경계 주위에 작은 원을 그리면 그 원이 실제로

243
00:21:22,640 --> 00:21:28,160
그림에서 사용 가능한 모든 색상을 포함해야 하는 매우 독특한 속성을 갖는 방법에

244
00:21:28,160 --> 00:21:33,360
대해 설명했습니다. 그리고 이것은 합리적인 지도에 있어서 더 일반적으로 사실입니다. 제한점, 제한

245
00:21:33,360 --> 00:21:38,720
주기, 무한대 경향 등 제한 행동 지점이 속하는 영역에 색상을

246
00:21:38,720 --> 00:21:44,800
할당하려는 경우 그리는 작은 원에는 이러한 제한 행동 중 하나만

247
00:21:44,800 --> 00:21:50,000
포함하는 지점이 포함됩니다. , 또는 모두 포함된 포인트를 포함합니다. 그

248
00:21:50,000 --> 00:21:55,440
사이에는 결코 아무것도 없습니다. 따라서 최소한 세 가지 색상이 있는 경우 이 속성은 경계가

249
00:21:55,440 --> 00:22:00,400
결코 매끄러울 수 없음을 의미합니다. 매끄러운 세그먼트를 따라 모든 색상이 아닌 두 가지

250
00:22:00,400 --> 00:22:05,280
색상에만 닿는 작은 원을 그릴 수 있기 때문입니다. 그리고 경험적으로 이것이 우리가 보는

251
00:22:05,280 --> 00:22:10,400
것입니다. 아무리 확대해도 이러한 경계는 항상 거칠습니다. 또한 확대하면 프레임 내에서 사용 가능한

252
00:22:10,400 --> 00:22:17,280
모든 색상을 항상 볼 수 있다는 것을 알 수 있습니다. 이것은 두 가지 제한

253
00:22:17,280 --> 00:22:21,680
동작만 있는 맥락에서 대략적인 경계를 설명하지는 않지만 여전히 묶을 가치가 있는

254
00:22:21,680 --> 00:22:26,000
해당 비디오에 남겨둔 느슨한 끝이며 Julia 세트와 두 가지 중요한 용어를 가져오는

255
00:22:26,000 --> 00:22:32,960
좋은 변명입니다. 파투 세트. 어떤 점이 결국 안정적이고 예측 가능한 패턴에

256
00:22:32,960 --> 00:22:38,560
속하게 되면 반복 함수의 Fatou 집합의 일부라고 말합니다. 그리고 우리가 본 모든

257
00:22:38,560 --> 00:22:44,640
지도에는 거의 모든 것이 포함되어 있습니다. Julia 세트는 다른 모든 것입니다. 우리가 본

258
00:22:44,640 --> 00:22:49,920
그림에서는 색상 영역 사이의 대략적인 경계, 즉 하나의 안정적인 어트랙터에서 다른 안정적인

259
00:22:49,920 --> 00:22:55,440
어트랙터로 전환할 때 발생하는 일입니다. 예를 들어 Julia 집합에는 모든 반발

260
00:22:55,440 --> 00:23:01,120
주기와 반발 고정점이 포함됩니다. Julia 집합의 일반적인 지점은 순환이 아니지만

261
00:23:01,120 --> 00:23:06,480
명확한 패턴 없이 영원히 튀어 오를 것입니다. 이제 Fatou 세트의 한 지점을

262
00:23:06,480 --> 00:23:11,520
보고 그 주위에 충분히 작은 디스크를 그리면 관련 안정적인 동작이 무엇이든

263
00:23:11,520 --> 00:23:16,800
관계 없이 작은 디스크가 결국 축소되는 프로세스를 따르면 됩니다. 무한대로 가는 것이

264
00:23:16,800 --> 00:23:20,720
아니라면 디스크가 무한대 주변으로 줄어들고 있다고 생각할 수도 있지만 문제가 혼란스러울

265
00:23:20,720 --> 00:23:28,240
수도 있습니다. 대조적으로, 줄리아 집합의 한 점 주위에 작은 원판을 그리는 경우, 해당

266
00:23:28,240 --> 00:23:33,360
원 내의 점이 떨어져 나가고 자체 작업을 수행함에 따라 시간이 지남에 따라 디스크가 확장되는 경향이

267
00:23:33,360 --> 00:23:40,560
있습니다. 즉, Julia 집합의 점은 혼란스럽게 행동하는 경향이 있습니다. 가까운 이웃은

268
00:23:40,560 --> 00:23:45,280
심지어 매우 가까운 곳에 있더라도 결국 질적으로 다른 행동을 하게 됩니다.

269
00:23:46,320 --> 00:23:51,920
하지만 단순히 이 디스크가 팽창하는 것만은 아닙니다. 앞에서 언급한 다색 속성의 핵심인 매우 놀라운

270
00:23:51,920 --> 00:23:56,720
결과는 이 프로세스를 실행하면 작은 디스크가 결국 너무 많이 팽창하여 최대

271
00:23:56,720 --> 00:24:02,480
두 가지 예외를 제외하고 복잡한 평면의 모든 단일 지점에 도달한다는 것입니다.

272
00:24:03,360 --> 00:24:06,800
이것은 Julia가 설정한 모든 곳에 물건이 있다는 원칙으로 알려져 있습니다.

273
00:24:07,760 --> 00:24:12,080
좋아요, 실제로는 그렇게 부르지 않습니다. 내가 읽은 자료에서 그것은 몬텔의 정리로 알려진 것에

274
00:24:12,080 --> 00:24:16,880
대한 필연적인 결과로 언급되었습니다. 하지만 그렇게 불러야 합니다. 어떤 의미에서 이것이 우리에게

275
00:24:16,880 --> 00:24:22,480
말하는 것은 Julia 집합의 포인트가 단순히 혼란스러운 것이 아니라 가능한 한

276
00:24:22,480 --> 00:24:28,880
혼란스럽다는 것입니다. 여기에서는 줄리아 집합의 한 지점에서 1백만 분의 1이라는 아주 작은

277
00:24:28,880 --> 00:24:34,320
거리 내에서 시작하는 수천 개의 지점으로 구성된 클러스터가 포함된 뉴턴 지도를 사용한

278
00:24:34,320 --> 00:24:45,760
약간의 시뮬레이션을 보여 드리겠습니다. 물론, 물건은 어디에나 있다는 원칙은 그 거리

279
00:24:45,760 --> 00:24:49,760
내에 셀 수 없이 무한히 많은 점에 관한 것이며, 결국 두

280
00:24:49,760 --> 00:24:54,640
점을 제외하고 평면의 모든 것을 도달하도록 확장된다는 것입니다. 하지만 이 작은

281
00:24:54,640 --> 00:24:59,680
클러스터는 여전히 일반적인 아이디어를 제공해야 합니다. 그 작은 디스크에서 나온 작은 유한

282
00:24:59,680 --> 00:25:05,840
샘플이 겉보기에 모든 방향으로 여기저기에 뿌려집니다. 이것이 우리의 목적에 있어 의미하는

283
00:25:05,840 --> 00:25:10,240
바는, 끌어당기는 고정점이나 끌어당기는 주기와 같은 맵의 매력적인 동작이 있는 경우

284
00:25:10,240 --> 00:25:14,800
Julia 집합의 점 주위에 있는 작은 디스크의 값이 어떻게든 보장될 수

285
00:25:14,800 --> 00:25:20,080
있다는 것입니다. 아주 작았지만 결국에는 그 매력적인 행동에 빠지게 될 것입니다.

286
00:25:20,800 --> 00:25:25,520
세 개 이상의 유인 행동이 있는 경우 Julia 집합이 왜 매끄럽지

287
00:25:25,600 --> 00:25:30,960
않고 복잡해야 하는지에 대한 설명을 제공합니다. 그럼에도 불구하고 이것은 완전히 만족스럽지

288
00:25:30,960 --> 00:25:35,600
않을 수 있습니다. 왜냐하면 이 원칙은 애초에 왜 어디에나 존재하는 원칙이 사실인지에 대한

289
00:25:35,600 --> 00:25:40,160
의문을 제기하고 한 단계 더 나아갈 수 있기 때문입니다. 제가 언급한 것처럼, 이는

290
00:25:40,160 --> 00:25:44,800
몬텔의 정리라는 것에서 유래합니다. 솔직히 다루어야 할 내용이 많기 때문에 여기서는 자세히

291
00:25:44,800 --> 00:25:49,280
설명하지 않기로 했습니다. 내가 찾을 수 있는 증거는 결국 J 함수라고 알려진 것에

292
00:25:49,280 --> 00:25:53,760
의존하게 되는데, 이는 그 자체로 완전히 복잡한 이야기입니다. 물론 더 많은 내용을 알고

293
00:25:53,760 --> 00:25:58,320
싶어하는 분들을 위해 설명에 링크와 리소스를 남겨두겠습니다. 이 원칙이 왜 사실인지 확인할 수

294
00:25:58,320 --> 00:26:03,280
있는 더 간단한 방법을 알고 계시다면 저는 귀를 기울일 것입니다. 또한 간단한 참고

295
00:26:03,280 --> 00:26:08,000
사항으로 우리가 지금까지 본 그림에는 면적이 0인 Julia 집합이 있지만 이는 일종의

296
00:26:08,000 --> 00:26:12,560
이 영역 사이의 경계이며 Julia 집합이 전체인 예가 있다는 점을 말씀드리고

297
00:26:12,560 --> 00:26:19,520
싶습니다. 비행기에서는 모든 것이 혼란스러워서 일종의 거칠게 행동합니다. 이 특정 섹션의

298
00:26:19,520 --> 00:26:25,120
주요 내용은 혼돈과 프랙탈 사이의 연결입니다. 처음에는 이것이 단지 서로

299
00:26:25,120 --> 00:26:29,680
유사한 것처럼 보입니다. 아시다시피 뉴턴의 방법은 일부 시드 값에 대한

300
00:26:29,680 --> 00:26:34,960
일종의 지저분한 과정으로 밝혀졌습니다. 그리고 이 지저분함은 특정 지점의 궤적을

301
00:26:34,960 --> 00:26:40,480
따라가는 방식으로 볼 수 있고, 다이어그램의 복잡성으로 인해 질적으로 다른 종류의

302
00:26:40,480 --> 00:26:45,920
지저분함처럼 느껴집니다. 어쩌면 그것은 좋은 은유가 될 수도 있지만 그 이상은 아닙니다. 그러나 여기서

303
00:26:45,920 --> 00:26:50,640
깔끔한 점은 일부 점이 얼마나 혼란스러운지를 정량화하면 이 경계

304
00:26:50,640 --> 00:26:56,080
속성을 통해 대략적인 프랙탈 모양에 대한 실제 설명으로 이어진다는 것입니다.

305
00:26:56,080 --> 00:27:02,080
수학에서 혼돈과 프랙탈이 함께 결합되는 경우를 자주 볼 수

306
00:27:02,080 --> 00:27:06,960
있으며, 적어도 나에게는 두 가지 현상이 우연히 일치하는 것보다

307
00:27:06,960 --> 00:27:09,760
그 결합이 논리적인 연결과 함께 올 때마다 만족스럽습니다.

