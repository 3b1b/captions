1
00:00:00,000 --> 00:00:05,640
您已经看到了标题，所以您知道这会导致某种分形。

2
00:00:05,640 --> 00:00:08,120
实际上它是一个无限的分形族。

3
00:00:08,120 --> 00:00:12,920
是的，它将是那些令人难以置信的复杂形状之

4
00:00:12,920 --> 00:00:14,800
一，无论你放大多远，它都有无限的细节。

5
00:00:14,800 --> 00:00:18,880
但这并不是一个真正的视频，旨在生成一些漂亮的图片供我们观看。

6
00:00:18,880 --> 00:00:22,780
好吧，好吧，也许这是其中的一部分，但这里的真实故

7
00:00:22,780 --> 00:00:26,540
事比许多其他分形背后的故事有一个更务实的起点。

8
00:00:26,540 --> 00:00:29,860
更重要的是，如果我们努力理解为什么考虑到它们

9
00:00:29,860 --> 00:00:34,900
所代表的内容，它们必须看起来像它们一样复杂

10
00:00:34,900 --> 00:00:39,640
，以及这种复杂性反映了什么，那么我们得到的最

11
00:00:39,640 --> 00:00:48,300
终图像将变得更有意义工程中广泛使用的算法。

12
00:00:48,300 --> 00:00:51,940
这里的起点是假设您有某种多项式

13
00:00:51,940 --> 00:00:54,180
，并且您想知道它何时等于零。

14
00:00:54,820 --> 00:00:57,980
对于此处的一张图，您可以直观地看到它与 x 轴相交的

15
00:00:57,980 --> 00:01:01,980
三个不同位置，并且您可以直观地了解这些值可能是什么。

16
00:01:01,980 --> 00:01:04,380
我们将其称为多项式的根。

17
00:01:04,380 --> 00:01:06,620
但实际上如何准确计算它们呢？

18
00:01:06,620 --> 00:01:10,580
现在的问题是，如果你已经对数学感兴趣，

19
00:01:10,580 --> 00:01:13,080
也许它本身就足够有趣，可以继续前进。

20
00:01:13,080 --> 00:01:16,160
但如果你把街上的某个人拉到一边问他们这个问题

21
00:01:16,160 --> 00:01:18,960
，我的意思是，他们已经睡着了，因为谁在乎呢？

22
00:01:18,960 --> 00:01:22,900
但问题是，这种问题在工程中经常出现。

23
00:01:22,940 --> 00:01:26,620
我个人最熟悉像这样突然出现的方程是在计算

24
00:01:26,620 --> 00:01:30,420
机图形学的设置中，其中多项式到处都是。

25
00:01:30,420 --> 00:01:35,020
因此，当您计算给定像素应如何着色时，以某种方式涉

26
00:01:35,020 --> 00:01:39,640
及求解使用这些多项式的方程，这种情况并不罕见。

27
00:01:39,640 --> 00:01:41,320
下面我给大家举一个有趣的例子。

28
00:01:41,320 --> 00:01:46,160
当计算机在屏幕上呈现文本时，这些

29
00:01:46,160 --> 00:01:47,160
字体通常不是使用像素值定义的。

30
00:01:47,160 --> 00:01:51,480
它们被定义为一堆多项式曲

31
00:01:51,480 --> 00:01:53,500
线，业内称为贝塞尔曲线。

32
00:01:53,500 --> 00:01:57,660
任何一个曾经接触过矢量图形的人，也许在某些

33
00:01:57,660 --> 00:02:00,520
设计软件中，都会非常熟悉这些类型的曲线。

34
00:02:00,520 --> 00:02:04,860
但要在屏幕上实际显示其中一个像素，您需要一

35
00:02:04,860 --> 00:02:08,400
种方法来告诉屏幕上的每个像素是否应该着色。

36
00:02:08,400 --> 00:02:12,200
这些曲线可以用某种笔画宽度来显示，或者如果它

37
00:02:12,200 --> 00:02:15,420
们包围一个区域，则可以对该区域进行某种填充。

38
00:02:15,420 --> 00:02:18,960
但如果你退一步认真思考一下，仅仅根据

39
00:02:18,960 --> 00:02:23,460
纯数学曲线来弄清楚每个像素如何知道它

40
00:02:23,460 --> 00:02:25,100
是否应该着色，这是一个有趣的难题。

41
00:02:25,100 --> 00:02:27,480
我的意思是，以笔划宽度为例。

42
00:02:27,480 --> 00:02:32,400
这归结为理解给定像素与这条纯数学曲线的距离有多远，

43
00:02:32,400 --> 00:02:36,780
该曲线本身就是某种柏拉图式的理想，它的宽度为零。

44
00:02:36,780 --> 00:02:41,120
您可以将其视为具有某些参数 t 的参数曲线。

45
00:02:41,120 --> 00:02:44,540
现在，要计算出该距离，您可以做的一件事是计算像素与该

46
00:02:44,540 --> 00:02:48,940
曲线上的一堆样本点之间的距离，然后计算出最小的距离。

47
00:02:49,920 --> 00:02:52,620
但这既低效又不精确。

48
00:02:52,620 --> 00:02:56,440
更好的是了解一点数学知识，并承认所有可能点

49
00:02:56,440 --> 00:03:01,440
处到曲线的距离本身就是参数的一些平滑函数。

50
00:03:01,440 --> 00:03:05,960
碰巧的是，该距离的平方本身就是一

51
00:03:05,960 --> 00:03:07,960
个多项式，这使得它非常好处理。

52
00:03:07,960 --> 00:03:11,240
如果这是关于渲染矢量图形的完整课程，我们可以扩展所

53
00:03:11,240 --> 00:03:15,180
有内容并拥抱混乱，但现在我想强调的唯一要点是，原则

54
00:03:15,200 --> 00:03:21,840
上，这个函数，您想要的最小值要知道，是一些多项式。

55
00:03:21,840 --> 00:03:25,540
找到这个最小值，从而确定像素与曲线的接近程度以及

56
00:03:25,540 --> 00:03:29,420
是否应该填充它，现在只是一个经典的微积分问题。

57
00:03:29,420 --> 00:03:33,540
你要做的就是计算出这个函数图的斜率，也就是说它的

58
00:03:33,540 --> 00:03:39,400
导数，又是一些多项式，你会问，什么时候它等于零？

59
00:03:39,400 --> 00:03:44,780
因此，要实际执行这个看似简单的仅显示曲线

60
00:03:44,780 --> 00:03:49,220
的任务，如果您有一种系统且通用的方法来计

61
00:03:49,220 --> 00:03:51,060
算给定多项式何时等于零，那不是很好吗？

62
00:03:51,060 --> 00:03:55,260
当然，我们可以从 100 个其他学科中抽取 100 个

63
00:03:55,260 --> 00:03:59,420
其他例子，我只是想让你记住，当我们寻找多项式的根时，

64
00:03:59,420 --> 00:04:03,980
即使我们总是以一种从任何真实的混乱中完全抽象出来的方式

65
00:04:03,980 --> 00:04:06,820
来显示它——世界问题，这项任务不仅仅是一个学术任务。

66
00:04:06,820 --> 00:04:12,380
但再次问问自己，你如何实际计算这些根之一？

67
00:04:12,380 --> 00:04:17,100
如果您正在解决的任何问题都会导致您使用二次函数，那么

68
00:04:17,100 --> 00:04:20,260
快乐的日子，您可以使用我们都知道和喜爱的二次公式。

69
00:04:20,260 --> 00:04:25,140
作为一个有趣的旁注，再次与计算机图形学中的寻根相关，

70
00:04:25,140 --> 00:04:29,740
我曾经让一位皮克斯工程师给了我一个估计，考虑到电影《

71
00:04:29,740 --> 00:04:34,000
寻梦环游记》的某些场景中使用了多少灯光，并考虑到其中

72
00:04:34,000 --> 00:04:38,840
一些灯光的性质当涉及球体等多项式定义的物体时，每像素

73
00:04:38,840 --> 00:04:42,840
计算时，二次公式在该电影的制作中很容易使用数万亿次。

74
00:04:42,840 --> 00:04:48,200
现在，当您的问题导致您得到更高阶多项式时，事情开始变得更加棘手。

75
00:04:48,200 --> 00:04:52,800
对于三次多项式，还有一个公式，Mathologe

76
00:04:52,800 --> 00:04:57,800
r 制作了一个精彩的视频，甚至还有一个四次公式，

77
00:04:57,800 --> 00:05:01,540
可以求解 4 次多项式，尽管老实说，这个公式是一

78
00:05:01,540 --> 00:05:04,120
个可怕的噩梦，基本上没有人们在实践中实际使用它。

79
00:05:04,120 --> 00:05:08,620
但在那之后，我发现这是所有数学中最令人着迷的结果之一

80
00:05:08,620 --> 00:05:14,240
，你无法使用类似的公式来求解 5 次或以上的多项式。

81
00:05:14,240 --> 00:05:18,380
更具体地说，对于一组相当广泛的标准函数，您可以

82
00:05:18,380 --> 00:05:22,500
证明没有可能的方法可以将这些函数组合在一起，

83
00:05:22,500 --> 00:05:27,800
从而允许您插入五次多项式的系数并始终得出根。

84
00:05:27,800 --> 00:05:32,060
这被称为五次方程的不可解性，这是一种完全不

85
00:05:32,060 --> 00:05:36,860
同的蠕虫，我们希望可以在其他时间讨论它，但

86
00:05:36,900 --> 00:05:40,980
实际上这并不重要，因为我们有算法来近似解决

87
00:05:40,980 --> 00:05:43,220
这些类型具有您想要的任何精度级别的方程。

88
00:05:43,220 --> 00:05:47,700
牛顿法是一种常见的方法，也是你我今天的主要话题。

89
00:05:47,700 --> 00:05:51,060
是的，这就是我们走向分形的原因，但我希望你

90
00:05:51,060 --> 00:05:55,660
注意整个过程一开始看起来是多么无辜和良性。

91
00:05:55,660 --> 00:05:59,700
该算法从随机猜测开始，我们将其称为 x0。

92
00:05:59,700 --> 00:06:04,780
几乎可以肯定，多项式在 x0 处的输出不是 0，因此您

93
00:06:04,820 --> 00:06:08,060
还没有找到解决方案，它是该图在该点的高度可见的其他值。

94
00:06:08,060 --> 00:06:13,340
因此，为了改进猜测，我们的想法是问，围

95
00:06:13,340 --> 00:06:16,100
绕该值的函数的线性逼近何时等于 0？

96
00:06:16,100 --> 00:06:19,900
换句话说，如果此时要在图形上画一条切

97
00:06:19,900 --> 00:06:23,500
线，那么该切线何时与 x 轴相交？

98
00:06:23,500 --> 00:06:26,860
现在假设这条切线是函数在某个真根的松

99
00:06:26,860 --> 00:06:31,340
散附近的近似值，那么这个近似值等于

100
00:06:31,340 --> 00:06:33,980
0 的地方应该会让你更接近那个真根。

101
00:06:33,980 --> 00:06:37,580
只要您能够对该函数求导，并且使用多项式，您总是

102
00:06:37,580 --> 00:06:42,140
能够做到这一点，您就可以具体计算这条线的斜率。

103
00:06:42,140 --> 00:06:45,300
因此，活跃的观众可能想停下来问一下，您如

104
00:06:45,300 --> 00:06:48,700
何找出当前猜测和改进后的猜测之间的差异？

105
00:06:48,700 --> 00:06:51,300
这一步的大小是多少？

106
00:06:51,300 --> 00:06:54,540
思考它的一种方法是考虑这样一个事实：这条切线的斜率，即

107
00:06:54,540 --> 00:06:59,940
它的上升幅度，看起来就像该图的高度除以该台阶的长度。

108
00:07:00,460 --> 00:07:03,620
但另一方面，当然，切线的斜

109
00:07:03,620 --> 00:07:05,300
率是多项式在该点的导数。

110
00:07:05,300 --> 00:07:09,980
如果我们在这里重新排列这个方程，这将

111
00:07:09,980 --> 00:07:11,660
为您提供一种计算步长的超级具体方法。

112
00:07:11,660 --> 00:07:17,260
因此，下一个猜测（我们可以称之为 x1

113
00:07:17,260 --> 00:07:18,820
）是之前的猜测，并按此步长进行调整。

114
00:07:18,820 --> 00:07:21,500
之后，您可以重复该过程。

115
00:07:21,500 --> 00:07:25,520
您计算该函数的值以及该新猜测的斜率，这将

116
00:07:25,520 --> 00:07:30,680
为您提供新的线性近似值，然后在切线与

117
00:07:30,680 --> 00:07:32,880
x 轴相交的位置进行下一个猜测 x2。

118
00:07:32,880 --> 00:07:36,520
然后对 x2 应用相同的计算，得到 x3。

119
00:07:36,520 --> 00:07:40,600
不久之后，你就会发现自己非常接近真正

120
00:07:40,600 --> 00:07:45,120
的根源，几乎是你所希望的那样接近。

121
00:07:45,120 --> 00:07:49,040
总是值得仔细检查一个公式是否确实有意

122
00:07:49,040 --> 00:07:50,040
义，在这种情况下，希望它确实有意义。

123
00:07:50,040 --> 00:07:54,500
如果 x 的 p 很大，意味着图非常

124
00:07:54,500 --> 00:07:56,260
高，则需要采取更大的步骤才能找到根。

125
00:07:56,260 --> 00:08:01,280
但是，如果 x 的 p&#39; 也很大，这意味

126
00:08:01,280 --> 00:08:03,780
着图形非常陡峭，那么您可能应该放松该步骤的大小。

127
00:08:03,780 --> 00:08:09,440
顾名思义，这是牛顿用来求解多项式表达式的方法。

128
00:08:09,440 --> 00:08:13,940
但他让它看起来比需要的复杂得多，一个名叫约瑟夫·拉夫

129
00:08:13,940 --> 00:08:18,500
森的人发表了一个更简单的版本，更像你和我现在看到的，

130
00:08:18,500 --> 00:08:22,740
所以你也经常听到这种称为牛顿算法的算法-拉夫森方法。

131
00:08:22,780 --> 00:08:25,460
如今，这是微积分课程中的一个常见话题。

132
00:08:25,460 --> 00:08:29,660
顺便说一句，一个很好的小练习就是

133
00:08:29,660 --> 00:08:33,380
尝试使用这种方法手动近似平方根。

134
00:08:33,380 --> 00:08:38,020
但不幸的是，大多数微积分学生没有看到，当

135
00:08:38,020 --> 00:08:42,500
你让自己尝试这个看似简单的过程并开始揭

136
00:08:42,500 --> 00:08:45,340
开它的一些伤疤时，事情会变得多么深入。

137
00:08:45,340 --> 00:08:49,340
您会看到，虽然牛顿方法在您从根附近开始时效果很好，并且收敛

138
00:08:49,340 --> 00:08:55,060
速度非常快，但如果您最初的猜测远离根，它可能会有一些缺陷。

139
00:08:55,060 --> 00:08:58,900
例如，让我们采用刚刚看到的函数，但将其向上

140
00:08:58,900 --> 00:09:02,340
移动，并使用相同的初始猜测来玩相同的游戏。

141
00:09:07,660 --> 00:09:12,120
请注意我们得到的新猜测序列如何围绕位于

142
00:09:12,120 --> 00:09:15,540
x 轴上方的该函数的局部最小值反弹。

143
00:09:15,540 --> 00:09:19,380
这应该是有道理的，我的意思是围绕这些值一

144
00:09:19,380 --> 00:09:23,980
直向右的函数的线性近似几乎与它向左的一个

145
00:09:23,980 --> 00:09:28,240
真根周围的函数的性质完全无关，所以它们有

146
00:09:28,240 --> 00:09:32,020
点没有给你任何关于真正根源的有用信息。

147
00:09:32,020 --> 00:09:35,980
只有当这个过程碰巧将新的猜测抛到左边足

148
00:09:35,980 --> 00:09:40,140
够远的时候，新的猜测序列才会产生任何富

149
00:09:40,140 --> 00:09:42,900
有成效的结果，并且实际上接近真正的根。

150
00:09:42,900 --> 00:09:47,100
如果我们询问在复平面中寻找

151
00:09:47,100 --> 00:09:48,640
根，事情就会变得特别有趣。

152
00:09:48,640 --> 00:09:53,040
即使像此处所示的多项式只有一个实数根，

153
00:09:53,040 --> 00:09:57,760
如果您允许这些根可能是复数，您也始终能

154
00:09:57,760 --> 00:10:00,220
够将该多项式分解为五个项，如下所示。

155
00:10:00,220 --> 00:10:02,500
这就是著名的代数基本定理。

156
00:10:02,500 --> 00:10:07,220
现在，在具有实数输入和实数输出的函数的无忧无虑的领域

157
00:10:07,220 --> 00:10:11,380
中，您可以将输入和输出之间的关联描绘为图形，牛顿方

158
00:10:11,380 --> 00:10:16,260
法通过切线和与 x 相交具有非常好的视觉意义-轴。

159
00:10:16,260 --> 00:10:20,500
但如果你想允许这些输入是任意复数，

160
00:10:20,500 --> 00:10:25,260
这意味着我们相应的输出也可能是任意

161
00:10:25,260 --> 00:10:26,660
复数，你就不能再考虑切线和图形了。

162
00:10:26,660 --> 00:10:29,420
但这个公式并不真正关心你如何想象它。

163
00:10:29,420 --> 00:10:34,980
您仍然可以玩同样的游戏，从随机猜测

164
00:10:34,980 --> 00:10:40,060
开始，评估此时的多项式及其导数，

165
00:10:40,060 --> 00:10:41,380
然后使用此更新规则生成新的猜测。

166
00:10:41,380 --> 00:10:45,680
希望这个新的猜测更接近真正的根源。

167
00:10:45,680 --> 00:10:49,700
但我确实想澄清，即使我们无法用切线来形

168
00:10:49,700 --> 00:10:51,700
象化这些步骤，但它确实是相同的逻辑。

169
00:10:51,700 --> 00:10:56,380
我们正在计算围绕您的猜测的函数的线性近似值在哪里等

170
00:10:56,380 --> 00:11:01,940
于零，然后您使用线性近似值的零作为您的下一个猜测。

171
00:11:01,940 --> 00:11:05,740
这并不是说我们盲目地将规则应用到新的环

172
00:11:05,740 --> 00:11:06,740
境中，而没有理由期望它能够发挥作用。

173
00:11:07,020 --> 00:11:11,020
事实上，至少在几次迭代之后我在这里展示的那个，你可

174
00:11:11,020 --> 00:11:16,380
以看到我们得到了一个值，其相应的输出基本上为零。

175
00:11:16,380 --> 00:11:17,380
现在这是有趣的部分。

176
00:11:17,380 --> 00:11:21,260
让我们将这个想法应用到许多不同的可能的初始猜测中。

177
00:11:21,260 --> 00:11:25,740
作为参考，我将在复平面中列

178
00:11:25,740 --> 00:11:27,580
出该特定多项式的五个真根。

179
00:11:27,580 --> 00:11:32,960
在每次迭代中，我们的每个小点都会根据牛顿法采取一些步骤。

180
00:11:32,960 --> 00:11:36,940
大多数点会很快汇聚到五个真根之一，但也有一

181
00:11:36,940 --> 00:11:41,160
些明显的掉队者似乎花了一段时间来回跳动。

182
00:11:41,160 --> 00:11:45,720
特别是，请注意那些被困在正实数线上的那些？

183
00:11:45,720 --> 00:11:50,800
它们看起来有点迷失，这正是我们之前在查看实数

184
00:11:50,800 --> 00:11:56,800
情况及其图形时对于同一个多项式所看到的情况。

185
00:11:56,800 --> 00:12:00,960
现在我要做的就是根据最后最接近的五个根中

186
00:12:00,960 --> 00:12:05,640
的哪一个对这些点进行着色，然后我们将时

187
00:12:05,640 --> 00:12:09,600
钟回滚，以便每个点都回到它开始的地方。

188
00:12:09,600 --> 00:12:13,000
现在，正如我在这里所做的那样，这还不足以获得完整的

189
00:12:13,000 --> 00:12:16,760
故事，所以让我向您展示如果我们从更精细的初始猜测网

190
00:12:16,760 --> 00:12:20,960
格开始并玩相同的游戏，应用它会是什么样子牛顿的方法

191
00:12:20,960 --> 00:12:26,360
出现了很多次，让每个根向前行进，根据每个点落在哪个

192
00:12:26,360 --> 00:12:29,500
根上给每个点着色，然后回滚时钟看看它最初来自哪里。

193
00:12:29,540 --> 00:12:33,440
但即使这样，分辨率也不足以欣赏该图案。

194
00:12:33,440 --> 00:12:40,560
如果我们对平面上的每个像素都执行此过程，您将得到以下结果。

195
00:12:40,560 --> 00:12:44,460
在这种细节水平上，配色方案至少对我

196
00:12:44,460 --> 00:12:46,460
来说有点刺耳，所以让我冷静一下。

197
00:12:46,460 --> 00:12:50,560
实际上，无论我尝试使用什么分辨率在这里向您展示这一点都可能

198
00:12:50,560 --> 00:12:56,060
永远不够，因为我们获得的形状的更精细的细节会变得无限复杂。

199
00:12:59,500 --> 00:13:05,220
但请花点时间思考一下这实际上在说什么。

200
00:13:05,220 --> 00:13:09,380
这意味着在复杂平面中的某些区域，如果您稍微调整该种子值，您知

201
00:13:09,380 --> 00:13:13,820
道，您只需将其撞到一侧 1.1 百万分之一或 1.1 万亿分

202
00:13:13,820 --> 00:13:18,420
之一，它就可以完全改变五个中的哪一个它最终落地的真正根源。

203
00:13:18,420 --> 00:13:22,140
我们在真实的图和之前显示的有问题的猜测中看到了

204
00:13:22,140 --> 00:13:26,500
这种混乱的一些预兆，但是在复杂的平面中描绘所

205
00:13:26,500 --> 00:13:31,020
有这些确实揭示了这种寻根算法的不可预测性，以

206
00:13:31,020 --> 00:13:37,060
及如何存在是发生这种不可预测性的整个初始值。

207
00:13:37,060 --> 00:13:40,460
现在，如果我抓住这些根之一并对其进行更改，这意味着我们在该

208
00:13:40,460 --> 00:13:45,640
过程中使用不同的多项式，您可以看到生成的分形图案如何变化。

209
00:13:45,640 --> 00:13:50,740
例如，请注意给定根周围的区域如何始终具

210
00:13:50,740 --> 00:13:54,560
有相同的颜色，因为这些点距离根足够近，

211
00:13:54,560 --> 00:13:58,320
在此线性近似方案可以毫无问题地找到根。

212
00:13:58,320 --> 00:14:02,760
所有的混乱似乎都发生在区域之间的边界处。

213
00:14:02,760 --> 00:14:03,760
请记住这一点。

214
00:14:03,760 --> 00:14:07,640
似乎无论我将这些根放在哪里

215
00:14:07,640 --> 00:14:08,640
，那些分形边界总是存在。

216
00:14:08,640 --> 00:14:12,240
显然，这不仅仅是我们一开始的多项式的一次性

217
00:14:12,240 --> 00:14:16,840
事件，它似乎是任何给定多项式的普遍事实。

218
00:14:16,840 --> 00:14:20,980
为了更好地说明正在发生的情况，我们可以在这里进

219
00:14:20,980 --> 00:14:23,040
行调整的另一个方面是我们使用了牛顿法的多少步。

220
00:14:23,040 --> 00:14:27,160
例如，如果我让计算机只采取零步，这意味着它只是根据它

221
00:14:27,160 --> 00:14:31,680
已经最接近的根为平面的每个点着色，这就是我们得到的。

222
00:14:31,680 --> 00:14:36,220
而这种图其实有一个特殊的名字，叫做 Voronoi 图。

223
00:14:36,220 --> 00:14:40,060
如果我们让平面上的每个点采用牛顿法的

224
00:14:40,060 --> 00:14:44,560
一步，然后根据该单步结果最接近的根

225
00:14:44,560 --> 00:14:47,560
为其着色，这就是我们将得到的结果。

226
00:14:47,560 --> 00:14:54,920
类似地，如果我们允许两个步骤，我们会得到一个

227
00:14:54,920 --> 00:14:59,720
稍微复杂的图案，依此类推，允许的步骤越多，得

228
00:14:59,720 --> 00:15:01,400
到的图像就越复杂，使我们更接近原始的分形。

229
00:15:01,400 --> 00:15:05,320
这很重要，请记住，我们在这里研究的真实形状不是

230
00:15:05,320 --> 00:15:14,560
其中任何一个，它是我们允许任意大量迭代的限制。

231
00:15:14,560 --> 00:15:17,840
此时，我们可能会问很多问题。

232
00:15:17,840 --> 00:15:21,980
也许你想用其他一些多项式来尝试一下，看看它有多普

233
00:15:21,980 --> 00:15:26,600
遍，或者你想更深入地研究这些迭代点到底可能有什么

234
00:15:26,600 --> 00:15:31,080
动力学，或者看看是否与其他一些具有类似的主题。

235
00:15:31,080 --> 00:15:35,320
但我认为最相关的问题应该

236
00:15:35,320 --> 00:15:36,320
是，这里到底发生了什么？

237
00:15:36,320 --> 00:15:40,960
我的意思是，我们在这里所做的就是重复求解线性近似。

238
00:15:40,960 --> 00:15:44,280
为什么会产生如此无限复杂的东西？

239
00:15:44,280 --> 00:15:47,880
几乎感觉这里的基本规则不应该携带

240
00:15:47,880 --> 00:15:50,580
足够的信息来实际生成这样的图像。

241
00:15:50,580 --> 00:15:53,880
在看到这一点之前，您是否认为合理的初始猜

242
00:15:53,880 --> 00:15:58,440
测可能是每个种子值只是倾向于最接近的根？

243
00:15:58,440 --> 00:16:01,640
在这种情况下，您知道，如果您根据每个点所在的根对每

244
00:16:01,640 --> 00:16:05,880
个点进行着色并将其移回原始位置，则最终图像将看起

245
00:16:05,880 --> 00:16:09,280
来像这些 Voronoi 图之一，具有直线边界。

246
00:16:09,280 --> 00:16:13,360
由于我之前提到了五次方程的不可解性，也

247
00:16:13,440 --> 00:16:15,680
许您会想知道这里的复杂性是否与此有关。

248
00:16:15,680 --> 00:16:19,240
那会很酷，但它们本质上是不相关的想法。

249
00:16:19,240 --> 00:16:24,080
事实上，到目前为止仅使用 5 次多项式可能有点误导。

250
00:16:24,080 --> 00:16:28,440
看看如果我们玩同样的游戏，但使用三次多项式，并

251
00:16:28,440 --> 00:16:31,000
且在复平面上的某个位置有三个根，会发生什么。

252
00:16:31,000 --> 00:16:35,800
再次注意，虽然大多数点都位于根部，

253
00:16:35,800 --> 00:16:37,240
但其中一些点却更加混乱地到处乱飞。

254
00:16:37,240 --> 00:16:41,480
事实上，这些是像这样的动画中最引人注目的，

255
00:16:41,480 --> 00:16:45,400
那些走向根源的只是静静地坐落在它们的终点。

256
00:16:45,400 --> 00:16:49,040
同样，如果我们在一定次数的迭代中停止此操作，并根据它

257
00:16:49,040 --> 00:16:53,560
们最接近的根对所有点进行着色，然后回滚时钟，所有可

258
00:16:53,560 --> 00:17:01,040
能的起点的相关图片就会形成具有无限细节的分形图案。

259
00:17:01,040 --> 00:17:09,880
然而，只有两个根的二次多项式则不同。

260
00:17:09,880 --> 00:17:13,880
在这种情况下，每个种子值确实会倾向

261
00:17:13,880 --> 00:17:16,400
于最接近的根，正如您所期望的那样。

262
00:17:16,400 --> 00:17:20,040
与每个根的距离相等的所有点都有一点蜿

263
00:17:20,040 --> 00:17:24,480
蜒的行为，有点像它们无法决定去哪一

264
00:17:24,480 --> 00:17:28,440
个，但这只是一行点，当我们玩着色游

265
00:17:28,440 --> 00:17:32,080
戏，我们最终得到的图表显然更无聊。

266
00:17:32,080 --> 00:17:36,600
所以当你从 2 跳到 3 时似乎会发

267
00:17:36,600 --> 00:17:37,600
生一些新的事情，问题是，到底是什么？

268
00:17:37,600 --> 00:17:41,480
如果你一个月前问我，我可能会耸耸肩，只是说，你知道，

269
00:17:41,480 --> 00:17:45,600
数学就是这样，有时答案看起来很简单，有时则不然，在某

270
00:17:45,600 --> 00:17:49,000
种情况下问“为什么”意味着什么并不总是很清楚像这样。

271
00:17:49,000 --> 00:17:53,040
但我错了，实际上我们可以给出一个理由来

272
00:17:53,040 --> 00:17:55,960
解释为什么这张图片必须看起来如此复杂。

273
00:17:55,960 --> 00:18:01,040
你看，我们可以证明这个图必须具有一个非常奇特的性质。

274
00:18:01,040 --> 00:18:05,480
将你的注意力集中在其中一个彩色区域上，比如这个蓝色区域，换

275
00:18:05,480 --> 00:18:10,880
句话说，就是最终趋向于多项式的一个特定根的所有点的集合。

276
00:18:10,880 --> 00:18:14,720
现在考虑该区域的边界，对于屏幕上显示的

277
00:18:14,720 --> 00:18:17,360
示例，该边界具有这种良好的三重对称性。

278
00:18:17,360 --> 00:18:21,840
令人惊讶的是，如果您观察任何其他颜色并

279
00:18:21,840 --> 00:18:25,480
考虑其边界，您会得到完全相同的集合。

280
00:18:25,480 --> 00:18:29,120
现在，当我说“边界”这个词时，您可能对它的含义有一个直观

281
00:18:29,120 --> 00:18:32,560
的认识，但是数学家有一种非常聪明的方法来形式化它，这使

282
00:18:32,640 --> 00:18:36,800
得在像我们的分形这样的更狂野的集合的背景下更容易推理。

283
00:18:36,800 --> 00:18:40,920
如果当你画一个以该点为中心的小圆时，无论

284
00:18:40,920 --> 00:18:45,720
多小，它总是包含既在该集合内部又在该集合

285
00:18:45,720 --> 00:18:47,960
外部的点，我们就说该点位于集合的边界上。

286
00:18:47,960 --> 00:18:51,640
因此，如果您有一个位于内部的点，那么一个足够小

287
00:18:51,640 --> 00:18:56,800
的圆最终将仅包含该集合内的点，而对于外部的一个

288
00:18:56,800 --> 00:18:58,760
点，一个足够小的圆将根本不包含该集合中的点。

289
00:18:58,760 --> 00:19:02,400
但当它在边界上时，在边界上意味

290
00:19:03,240 --> 00:19:05,840
着你的微小圆圈将永远包含两者。

291
00:19:05,840 --> 00:19:10,560
因此，回顾我们的属性，一种解读方式是，如果你画一个圆，

292
00:19:10,560 --> 00:19:15,480
无论这个圆有多小，它要么包含所有颜色，当颜色的共享边

293
00:19:15,480 --> 00:19:21,000
界位于该圆内部时，就会发生这种情况，或者它只包含一种颜

294
00:19:21,000 --> 00:19:27,120
色，当它位于其中一个区域的内部时，就会发生这种情况。

295
00:19:27,120 --> 00:19:31,320
特别是，这意味着您永远无法找到仅包含

296
00:19:31,320 --> 00:19:36,000
两种颜色的圆，因为这需要您在两个区

297
00:19:36,000 --> 00:19:38,960
域之间的边界上有点，但不是所有点。

298
00:19:38,960 --> 00:19:43,160
在解释这个事实的真正来源之前，

299
00:19:43,160 --> 00:19:45,060
尝试稍微思考一下它是很有趣的。

300
00:19:45,060 --> 00:19:48,760
你可以想象将其作为一种艺术难题呈现给某人，完全断

301
00:19:48,760 --> 00:19:52,160
章取义，从不提及牛顿方法或类似的东西，你说挑战是

302
00:19:52,160 --> 00:19:56,760
用至少三种颜色构建一幅图片，也许我们说红色，绿色

303
00:19:56,760 --> 00:20:01,080
和蓝色，因此一种颜色的边界就是所有颜色的边界。

304
00:20:01,080 --> 00:20:04,800
所以，如果你从这样简单的事情开始，那显然是行不通的，

305
00:20:04,800 --> 00:20:08,580
因为我们有一整条线的点位于绿色和红色的边界上，但没

306
00:20:08,580 --> 00:20:13,600
有触及任何蓝色，同样，你还有这些其他不允许的线点。

307
00:20:13,600 --> 00:20:18,080
因此，为了纠正这个问题，您可以沿着边界添加一些蓝色斑点

308
00:20:18,080 --> 00:20:23,160
，然后同样在红色和蓝色之间添加一些绿色斑点，在绿色和

309
00:20:23,160 --> 00:20:27,440
蓝色之间添加一些红色斑点，但是当然，现在是这些斑点的边

310
00:20:27,440 --> 00:20:29,800
界是一个问题，例如，仅触摸蓝色和红色，但不触摸绿色。

311
00:20:29,800 --> 00:20:34,160
因此，也许您可以尝试添加更小的斑点，并在这些较小

312
00:20:34,160 --> 00:20:37,240
的边界周围添加相关的第三种颜色，以帮助尝试纠正。

313
00:20:37,240 --> 00:20:44,880
同样，您必须对最初添加的每个斑点执行此操作。

314
00:20:44,880 --> 00:20:49,040
但这些小斑点的所有边界都是它们自己的问

315
00:20:49,040 --> 00:20:54,480
题，你必须以某种方式永远继续这个过程。

316
00:20:54,480 --> 00:20:59,280
如果你看看牛顿分形本身，这种斑点叠

317
00:20:59,280 --> 00:21:07,000
斑点的模式似乎正是它正在做的事情。

318
00:21:07,000 --> 00:21:10,480
我想让您注意的主要事情是，这个属性意味着您永远

319
00:21:10,480 --> 00:21:15,880
不可能拥有平滑的边界，甚至在某些小段上部分平

320
00:21:15,880 --> 00:21:18,600
滑的边界，因为任何平滑的段只会接触两种颜色。

321
00:21:18,600 --> 00:21:23,860
相反，可以说，边界必须完全由尖角组成。

322
00:21:23,860 --> 00:21:28,240
因此，如果您相信这个性质，它就解释了为

323
00:21:28,240 --> 00:21:30,080
什么无论您放大多远，边界仍然是粗糙的。

324
00:21:30,080 --> 00:21:33,640
对于那些熟悉分形维数概念的人来说，您可以测量我现

325
00:21:33,640 --> 00:21:40,040
在向您展示的特定边界的维数，该维数约为 1。44.

326
00:21:40,040 --> 00:21:44,200
考虑到我们的颜色实际上代表什么，记住这不仅仅是

327
00:21:44,200 --> 00:21:48,760
为了图片而图片，想想这个属性真正告诉我们什么。

328
00:21:48,760 --> 00:21:52,560
它表示，如果您靠近一个敏感点，其中一些种子值进入

329
00:21:52,560 --> 00:21:58,040
一个根，但附近的其他种子值将进入另一个根，那么

330
00:21:58,040 --> 00:22:01,560
实际上每个可能的根都必须可以从该小邻域内访问。

331
00:22:01,560 --> 00:22:06,040
对于你画的任何一个小圆圈，要么该圆圈中的所有点

332
00:22:06,040 --> 00:22:10,880
都趋向于一个根，要么它们趋向于所有根，但两者

333
00:22:10,880 --> 00:22:14,160
之间永远不会有任何东西，只是趋向于根的子集。

334
00:22:14,160 --> 00:22:18,120
出于一点直觉，我发现简单地观察像屏幕上

335
00:22:18,120 --> 00:22:20,500
的集群那样经历这一过程是很有启发的。

336
00:22:20,500 --> 00:22:25,680
一开始它大多粘在一起，但在一次迭代中它们都会向

337
00:22:25,680 --> 00:22:31,400
外爆炸，之后感觉任何根都可以被抓住就更合理了。

338
00:22:31,400 --> 00:22:35,060
请记住，我只是向您展示有限多个点，但原则上您会想要

339
00:22:35,060 --> 00:22:45,000
考虑某个小圆盘内所有不可数无限多个点会发生什么。

340
00:22:45,000 --> 00:22:49,040
这个属性也解释了为什么在只有两个根的二次多项

341
00:22:49,040 --> 00:22:54,400
式的情况下事情看起来正常是可以的，因为平滑

342
00:22:54,400 --> 00:22:56,920
的边界很好，无论如何只有两种颜色可以接触。

343
00:22:56,920 --> 00:23:01,020
需要明确的是，它并不能保证二次情况有一个平滑的

344
00:23:01,020 --> 00:23:04,920
边界，两种颜色之间完全有可能有一个分形边界，

345
00:23:04,920 --> 00:23:09,240
它只是看起来我们的牛顿方法图没有做任何比它需要

346
00:23:09,240 --> 00:23:13,920
的更复杂的事情在这种奇怪的边界条件的约束下。

347
00:23:13,920 --> 00:23:18,480
但当然，所有这一切都只是提出了一个问题：为

348
00:23:18,480 --> 00:23:20,560
什么这种奇怪的边界属性首先必须是真实的。

349
00:23:20,560 --> 00:23:22,580
它来自哪里？

350
00:23:22,580 --> 00:23:26,260
为此，我想向您介绍一个研究此类问题

351
00:23:26,260 --> 00:23:28,460
的数学领域，它被称为全纯动力学。

352
00:23:28,460 --> 00:23:31,500
我认为我们今天已经涵盖了足够的内容，并且肯定还有足够的

353
00:23:31,500 --> 00:23:35,140
内容可以讲述，因此将其作为单独的视频拿出来是有意义的。

354
00:23:35,140 --> 00:23:38,700
结束语，对我来说，我们称之为牛顿分

355
00:23:38,700 --> 00:23:43,260
形这一事实有点有趣，尽管牛顿对此一

356
00:23:43,260 --> 00:23:47,460
无所知，而且永远不可能像你和你那样

357
00:23:47,460 --> 00:23:49,220
处理这些图像。我可以用现代技术。

358
00:23:49,220 --> 00:23:53,100
通过数学，人们的名字与事物的联系远远

359
00:23:53,100 --> 00:23:55,220
超出了他们的梦想，这种情况经常发生。

360
00:23:55,220 --> 00:23:58,940
尽管汉密尔顿对量子力学一无所知

361
00:23:58,940 --> 00:23:59,940
，但哈密顿量是量子力学的核心。

362
00:23:59,940 --> 00:24:05,080
傅里叶本人从未计算过快速傅里叶变换，这样的例子不胜枚举。

363
00:24:05,080 --> 00:24:10,580
但这种术语的过度扩展带来了我认为鼓舞人心的观点。

364
00:24:10,580 --> 00:24:15,160
它反映了即使是几个世纪前就可以发现的

365
00:24:15,160 --> 00:24:19,600
简单想法，也常常包含一些新的角度或新

366
00:24:19,600 --> 00:24:22,040
的相关领域，可以等待数百年后被发现。

367
00:24:22,040 --> 00:24:25,720
牛顿不仅仅是不知道牛顿分形。

368
00:24:25,720 --> 00:24:29,640
关于牛顿方法，或者关于各种数学，可能还有许多其他事实，这

369
00:24:29,640 --> 00:24:34,660
些事实可能看起来像旧新闻，它们来自还没有人想到要问的问

370
00:24:34,660 --> 00:24:43,200
题，这些问题只是坐在那里，等待像你这样的人，去问他们。

371
00:24:43,240 --> 00:24:46,800
例如，如果你问我们今天讨论的这个过程是否会陷

372
00:24:46,800 --> 00:24:51,280
入循环，它会让你与曼德尔布罗特集产生令人惊

373
00:24:51,280 --> 00:24:55,120
讶的联系，我们将在下一篇中讨论这一点部分。

374
00:24:55,120 --> 00:24:58,060
顺便说一句，在我发布此内容时，第

375
00:24:58,060 --> 00:24:59,520
二部分已作为早期版本提供给顾客。

376
00:24:59,520 --> 00:25:02,960
我总是喜欢给新内容一点时

377
00:25:02,960 --> 00:25:03,960
间来收集反馈并发现错误。

378
00:25:03,960 --> 00:25:06,480
最终版本应该很快就会发布。

379
00:25:06,480 --> 00:25:09,580
说到赞助人的话题，我只想对屏幕上

380
00:25:09,580 --> 00:25:10,740
名字出现的每个人表示快速的感谢。

381
00:25:10,780 --> 00:25:14,500
我知道在最近的历史中，新视频的发布速度有点慢。

382
00:25:14,500 --> 00:25:17,340
部分原因与正在进行的其他项目有关。

383
00:25:17,340 --> 00:25:20,360
顺便说一句，我感到自豪的事情，比如夏季数学博览会，

384
00:25:20,360 --> 00:25:25,160
说实话，工作量令人惊讶，但考虑到结果，这是值得的。

385
00:25:25,160 --> 00:25:29,540
我将很快讨论所有这些并宣布获奖者，所以请继续关注。

386
00:25:29,540 --> 00:25:33,020
我只是想让你知道，在可预见的未来，我的计划肯定是

387
00:25:33,020 --> 00:25:37,020
更全心全意地回归制作新视频，最重要的是我想说的是

388
00:25:37,060 --> 00:25:40,740
感谢你的持续支持，即使是在尝试一些新事物的时候。

389
00:25:40,740 --> 00:25:44,180
这对我来说意义重大，它是让频道继续运转的动力，我将

390
00:25:44,180 --> 00:25:47,300
尽我所能，让正在酝酿中的新课程不辜负你们的信任票。

