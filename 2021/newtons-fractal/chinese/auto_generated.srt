1
00:00:02,459 --> 00:00:05,580
您已经看到了标题，所以您知道这会导致某种分形。

2
00:00:05,920 --> 00:00:07,940
实际上它是一个无限的分形族。

3
00:00:08,720 --> 00:00:12,112
是的，它将是那些令人难以置信的复杂形状之 一，

4
00:00:12,112 --> 00:00:14,620
无论你放大多远，它都有无限的细节。

5
00:00:14,760 --> 00:00:18,940
但这并不是一个真正的视频，旨在生成一些漂亮的图片供我们观看。

6
00:00:19,060 --> 00:00:21,376
好吧，好吧，也许这是其中的一部分，

7
00:00:21,376 --> 00:00:24,646
但这里的真实故 事比许多其他分形背后的故事有一个

8
00:00:24,646 --> 00:00:25,600
更务实的起点。

9
00:00:26,180 --> 00:00:31,384
更重要的是，如果我们努力理解为什么考虑到它们 所代表的内容，

10
00:00:31,384 --> 00:00:36,415
它们必须看起来像它们一样复杂 ，以及这种复杂性反映了什么，

11
00:00:36,415 --> 00:00:41,620
那么我们得到的最 终图像将变得更有意义工程中广泛使用的算法。

12
00:00:48,000 --> 00:00:53,900
这里的起点是假设您有某种多项式 ，并且您想知道它何时等于零。

13
00:00:54,320 --> 00:00:58,110
对于此处的一张图，您可以直观地看到它与 x 轴相交的 

14
00:00:58,110 --> 00:01:01,760
三个不同位置，并且您可以直观地了解这些值可能是什么。

15
00:01:01,900 --> 00:01:03,700
我们将其称为多项式的根。

16
00:01:04,260 --> 00:01:06,300
但实际上如何准确计算它们呢？

17
00:01:07,440 --> 00:01:10,009
现在的问题是，如果你已经对数学感兴趣，

18
00:01:10,009 --> 00:01:12,580
 也许它本身就足够有趣，可以继续前进。

19
00:01:12,940 --> 00:01:15,702
但如果你把街上的某个人拉到一边问他们这个问题 ，

20
00:01:15,702 --> 00:01:18,120
我的意思是，他们已经睡着了，因为谁在乎呢？

21
00:01:18,820 --> 00:01:22,060
但问题是，这种问题在工程中经常出现。

22
00:01:22,580 --> 00:01:28,384
我个人最熟悉像这样突然出现的方程是在计算 机图形学的设置中，

23
00:01:28,384 --> 00:01:30,320
其中多项式到处都是。

24
00:01:30,420 --> 00:01:33,405
因此，当您计算给定像素应如何着色时，

25
00:01:33,405 --> 00:01:38,380
以某种方式涉 及求解使用这些多项式的方程，这种情况并不罕见。

26
00:01:39,480 --> 00:01:40,880
下面我给大家举一个有趣的例子。

27
00:01:41,160 --> 00:01:44,283
当计算机在屏幕上呈现文本时，这些 

28
00:01:44,283 --> 00:01:47,040
字体通常不是使用像素值定义的。

29
00:01:47,320 --> 00:01:52,520
它们被定义为一堆多项式曲 线，业内称为贝塞尔曲线。

30
00:01:53,400 --> 00:01:55,800
任何一个曾经接触过矢量图形的人，

31
00:01:55,800 --> 00:01:59,700
也许在某些 设计软件中，都会非常熟悉这些类型的曲线。

32
00:02:00,420 --> 00:02:03,290
但要在屏幕上实际显示其中一个像素，

33
00:02:03,290 --> 00:02:07,680
您需要一 种方法来告诉屏幕上的每个像素是否应该着色。

34
00:02:08,340 --> 00:02:10,704
这些曲线可以用某种笔画宽度来显示，

35
00:02:10,704 --> 00:02:14,600
或者如果它 们包围一个区域，则可以对该区域进行某种填充。

36
00:02:15,320 --> 00:02:18,622
但如果你退一步认真思考一下，仅仅根据 

37
00:02:18,622 --> 00:02:23,141
纯数学曲线来弄清楚每个像素如何知道它 是否应该着色，

38
00:02:23,141 --> 00:02:24,880
这是一个有趣的难题。

39
00:02:25,640 --> 00:02:26,940
我的意思是，以笔划宽度为例。

40
00:02:27,320 --> 00:02:31,730
这归结为理解给定像素与这条纯数学曲线的距离有多远，

41
00:02:31,730 --> 00:02:36,140
 该曲线本身就是某种柏拉图式的理想，它的宽度为零。

42
00:02:36,700 --> 00:02:39,920
您可以将其视为具有某些参数 t 的参数曲线。

43
00:02:41,080 --> 00:02:45,124
现在，要计算出该距离，您可以做的一件事是计算像素与该 

44
00:02:45,124 --> 00:02:49,020
曲线上的一堆样本点之间的距离，然后计算出最小的距离。

45
00:02:49,820 --> 00:02:51,980
但这既低效又不精确。

46
00:02:52,460 --> 00:02:56,655
更好的是了解一点数学知识，并承认所有可能点 

47
00:02:56,655 --> 00:03:00,660
处到曲线的距离本身就是参数的一些平滑函数。

48
00:03:01,240 --> 00:03:05,200
碰巧的是，该距离的平方本身就是一 个多项式，

49
00:03:05,200 --> 00:03:07,000
这使得它非常好处理。

50
00:03:07,820 --> 00:03:10,849
如果这是关于渲染矢量图形的完整课程，

51
00:03:10,849 --> 00:03:13,710
我们可以扩展所 有内容并拥抱混乱，

52
00:03:13,710 --> 00:03:17,750
但现在我想强调的唯一要点是，原则 上，这个函数，

53
00:03:17,750 --> 00:03:20,780
您想要的最小值要知道，是一些多项式。

54
00:03:21,580 --> 00:03:25,288
找到这个最小值，从而确定像素与曲线的接近程度以及 

55
00:03:25,288 --> 00:03:28,700
是否应该填充它，现在只是一个经典的微积分问题。

56
00:03:29,340 --> 00:03:34,117
你要做的就是计算出这个函数图的斜率，也就是说它的 导数，

57
00:03:34,117 --> 00:03:37,700
又是一些多项式，你会问，什么时候它等于零？

58
00:03:38,980 --> 00:03:43,455
因此，要实际执行这个看似简单的仅显示曲线 的任务，

59
00:03:43,455 --> 00:03:48,646
如果您有一种系统且通用的方法来计 算给定多项式何时等于零，

60
00:03:48,646 --> 00:03:49,900
那不是很好吗？

61
00:03:50,960 --> 00:03:54,571
当然，我们可以从 100 个其他学科中抽取 100 

62
00:03:54,571 --> 00:03:58,460
个 其他例子，我只是想让你记住，当我们寻找多项式的根时，

63
00:03:58,460 --> 00:04:02,488
 即使我们总是以一种从任何真实的混乱中完全抽象出来的方式 

64
00:04:02,488 --> 00:04:06,100
来显示它——世界问题，这项任务不仅仅是一个学术任务。

65
00:04:06,100 --> 00:04:10,400
但再次问问自己，你如何实际计算这些根之一？

66
00:04:12,120 --> 00:04:16,006
如果您正在解决的任何问题都会导致您使用二次函数，

67
00:04:16,006 --> 00:04:20,540
那么 快乐的日子，您可以使用我们都知道和喜爱的二次公式。

68
00:04:20,540 --> 00:04:24,700
作为一个有趣的旁注，再次与计算机图形学中的寻根相关，

69
00:04:24,700 --> 00:04:28,060
 我曾经让一位皮克斯工程师给了我一个估计，

70
00:04:28,060 --> 00:04:32,380
考虑到电影《 寻梦环游记》的某些场景中使用了多少灯光，

71
00:04:32,380 --> 00:04:37,180
并考虑到其中 一些灯光的性质当涉及球体等多项式定义的物体时，

72
00:04:37,180 --> 00:04:41,980
每像素 计算时，二次公式在该电影的制作中很容易使用数万亿次。

73
00:04:43,420 --> 00:04:46,163
现在，当您的问题导致您得到更高阶多项式时，

74
00:04:46,163 --> 00:04:47,600
事情开始变得更加棘手。

75
00:04:48,120 --> 00:04:51,872
对于三次多项式，还有一个公式，Mathologe 

76
00:04:51,872 --> 00:04:55,474
r 制作了一个精彩的视频，甚至还有一个四次公式，

77
00:04:55,474 --> 00:04:58,326
 可以求解 4 次多项式，尽管老实说，

78
00:04:58,326 --> 00:05:01,929
这个公式是一 个可怕的噩梦，基本上没有人们在实践

79
00:05:01,929 --> 00:05:02,980
中实际使用它。

80
00:05:04,060 --> 00:05:08,899
但在那之后，我发现这是所有数学中最令人着迷的结果之一 ，

81
00:05:08,899 --> 00:05:13,220
你无法使用类似的公式来求解 5 次或以上的多项式。

82
00:05:14,020 --> 00:05:17,637
更具体地说，对于一组相当广泛的标准函数，

83
00:05:17,637 --> 00:05:22,340
您可以 证明没有可能的方法可以将这些函数组合在一起，

84
00:05:22,340 --> 00:05:26,500
 从而允许您插入五次多项式的系数并始终得出根。

85
00:05:27,360 --> 00:05:32,150
这被称为五次方程的不可解性，这是一种完全不 同的蠕虫，

86
00:05:32,150 --> 00:05:36,764
我们希望可以在其他时间讨论它，但 实际上这并不重要，

87
00:05:36,764 --> 00:05:41,732
因为我们有算法来近似解决 这些类型具有您想要的任何精度级

88
00:05:41,732 --> 00:05:42,620
别的方程。

89
00:05:43,240 --> 00:05:47,100
牛顿法是一种常见的方法，也是你我今天的主要话题。

90
00:05:47,620 --> 00:05:50,187
是的，这就是我们走向分形的原因，

91
00:05:50,187 --> 00:05:54,520
但我希望你 注意整个过程一开始看起来是多么无辜和良性。

92
00:05:55,240 --> 00:05:58,860
该算法从随机猜测开始，我们将其称为 x0。

93
00:05:59,660 --> 00:06:03,203
几乎可以肯定，多项式在 x0 处的输出不是 0，

94
00:06:03,203 --> 00:06:07,189
因此您 还没有找到解决方案，它是该图在该点的高度可见的

95
00:06:07,189 --> 00:06:07,780
其他值。

96
00:06:08,380 --> 00:06:11,667
因此，为了改进猜测，我们的想法是问，

97
00:06:11,667 --> 00:06:15,320
围 绕该值的函数的线性逼近何时等于 0？

98
00:06:16,020 --> 00:06:19,403
换句话说，如果此时要在图形上画一条切 线，

99
00:06:19,403 --> 00:06:21,820
那么该切线何时与 x 轴相交？

100
00:06:23,100 --> 00:06:27,891
现在假设这条切线是函数在某个真根的松 散附近的近似值，

101
00:06:27,891 --> 00:06:32,860
那么这个近似值等于 0 的地方应该会让你更接近那个真根。

102
00:06:33,900 --> 00:06:36,972
只要您能够对该函数求导，并且使用多项式，

103
00:06:36,972 --> 00:06:41,120
您总是 能够做到这一点，您就可以具体计算这条线的斜率。

104
00:06:42,100 --> 00:06:44,821
因此，活跃的观众可能想停下来问一下，

105
00:06:44,821 --> 00:06:48,300
您如 何找出当前猜测和改进后的猜测之间的差异？

106
00:06:48,520 --> 00:06:50,060
这一步的大小是多少？

107
00:06:50,900 --> 00:06:55,165
思考它的一种方法是考虑这样一个事实：这条切线的斜率，

108
00:06:55,165 --> 00:06:59,760
即 它的上升幅度，看起来就像该图的高度除以该台阶的长度。

109
00:07:00,440 --> 00:07:05,100
但另一方面，当然，切线的斜 率是多项式在该点的导数。

110
00:07:05,840 --> 00:07:08,244
如果我们在这里重新排列这个方程，

111
00:07:08,244 --> 00:07:11,400
这将 为您提供一种计算步长的超级具体方法。

112
00:07:12,140 --> 00:07:16,281
因此，下一个猜测（我们可以称之为 x1 ）是之前的猜测，

113
00:07:16,281 --> 00:07:17,760
并按此步长进行调整。

114
00:07:18,400 --> 00:07:20,980
之后，您可以重复该过程。

115
00:07:21,520 --> 00:07:24,741
您计算该函数的值以及该新猜测的斜率，

116
00:07:24,741 --> 00:07:29,037
这将 为您提供新的线性近似值，然后在切线与 x 

117
00:07:29,037 --> 00:07:32,080
轴相交的位置进行下一个猜测 x2。

118
00:07:32,780 --> 00:07:35,980
然后对 x2 应用相同的计算，得到 x3。

119
00:07:36,440 --> 00:07:40,107
不久之后，你就会发现自己非常接近真正 的根源，

120
00:07:40,107 --> 00:07:42,180
几乎是你所希望的那样接近。

121
00:07:44,760 --> 00:07:47,450
总是值得仔细检查一个公式是否确实有意 义，

122
00:07:47,450 --> 00:07:49,500
在这种情况下，希望它确实有意义。

123
00:07:49,840 --> 00:07:52,972
如果 x 的 p 很大，意味着图非常 高，

124
00:07:52,972 --> 00:07:55,360
则需要采取更大的步骤才能找到根。

125
00:07:55,980 --> 00:07:59,108
但是，如果 x 的 p' 也很大，

126
00:07:59,108 --> 00:08:03,280
这意味 着图形非常陡峭，那么您可能应该放松该步骤的大小。

127
00:08:04,520 --> 00:08:08,760
顾名思义，这是牛顿用来求解多项式表达式的方法。

128
00:08:08,760 --> 00:08:11,320
但他让它看起来比需要的复杂得多，

129
00:08:11,320 --> 00:08:15,480
一个名叫约瑟夫·拉夫 森的人发表了一个更简单的版本，

130
00:08:15,480 --> 00:08:19,640
更像你和我现在看到的， 所以你也经常听到这种称为牛顿

131
00:08:19,640 --> 00:08:21,560
算法的算法-拉夫森方法。

132
00:08:22,640 --> 00:08:24,920
如今，这是微积分课程中的一个常见话题。

133
00:08:25,360 --> 00:08:28,533
顺便说一句，一个很好的小练习就是 

134
00:08:28,533 --> 00:08:31,520
尝试使用这种方法手动近似平方根。

135
00:08:33,179 --> 00:08:36,701
但不幸的是，大多数微积分学生没有看到，

136
00:08:36,701 --> 00:08:40,778
当 你让自己尝试这个看似简单的过程并开始揭 

137
00:08:40,778 --> 00:08:44,300
开它的一些伤疤时，事情会变得多么深入。

138
00:08:45,380 --> 00:08:49,015
您会看到，虽然牛顿方法在您从根附近开始时效果很好，

139
00:08:49,015 --> 00:08:52,505
并且收敛 速度非常快，但如果您最初的猜测远离根，

140
00:08:52,505 --> 00:08:53,960
它可能会有一些缺陷。

141
00:08:54,920 --> 00:08:58,454
例如，让我们采用刚刚看到的函数，但将其向上 移动，

142
00:08:58,454 --> 00:09:01,000
并使用相同的初始猜测来玩相同的游戏。

143
00:09:07,400 --> 00:09:11,168
请注意我们得到的新猜测序列如何围绕位于 

144
00:09:11,168 --> 00:09:14,560
x 轴上方的该函数的局部最小值反弹。

145
00:09:15,460 --> 00:09:19,501
这应该是有道理的，我的意思是围绕这些值一 

146
00:09:19,501 --> 00:09:23,542
直向右的函数的线性近似几乎与它向左的一个 

147
00:09:23,542 --> 00:09:27,583
真根周围的函数的性质完全无关，所以它们有 

148
00:09:27,583 --> 00:09:31,240
点没有给你任何关于真正根源的有用信息。

149
00:09:31,880 --> 00:09:35,854
只有当这个过程碰巧将新的猜测抛到左边足 够远的时候，

150
00:09:35,854 --> 00:09:39,065
新的猜测序列才会产生任何富 有成效的结果，

151
00:09:39,065 --> 00:09:40,900
并且实际上接近真正的根。

152
00:09:42,680 --> 00:09:47,520
如果我们询问在复平面中寻找 根，事情就会变得特别有趣。

153
00:09:48,380 --> 00:09:52,062
即使像此处所示的多项式只有一个实数根，

154
00:09:52,062 --> 00:09:56,131
 如果您允许这些根可能是复数，您也始终能 

155
00:09:56,131 --> 00:09:59,620
够将该多项式分解为五个项，如下所示。

156
00:10:00,100 --> 00:10:02,100
这就是著名的代数基本定理。

157
00:10:02,820 --> 00:10:07,541
现在，在具有实数输入和实数输出的函数的无忧无虑的领域 中，

158
00:10:07,541 --> 00:10:10,798
您可以将输入和输出之间的关联描绘为图形，

159
00:10:10,798 --> 00:10:15,520
牛顿方 法通过切线和与 x 相交具有非常好的视觉意义-轴。

160
00:10:16,100 --> 00:10:19,121
但如果你想允许这些输入是任意复数，

161
00:10:19,121 --> 00:10:23,031
 这意味着我们相应的输出也可能是任意 复数，

162
00:10:23,031 --> 00:10:25,520
你就不能再考虑切线和图形了。

163
00:10:26,199 --> 00:10:29,100
但这个公式并不真正关心你如何想象它。

164
00:10:29,100 --> 00:10:33,851
您仍然可以玩同样的游戏，从随机猜测 开始，

165
00:10:33,851 --> 00:10:40,640
评估此时的多项式及其导数， 然后使用此更新规则生成新的猜测。

166
00:10:41,160 --> 00:10:43,620
希望这个新的猜测更接近真正的根源。

167
00:10:45,460 --> 00:10:49,524
但我确实想澄清，即使我们无法用切线来形 象化这些步骤，

168
00:10:49,524 --> 00:10:51,180
但它确实是相同的逻辑。

169
00:10:51,180 --> 00:10:56,866
我们正在计算围绕您的猜测的函数的线性近似值在哪里等 于零，

170
00:10:56,866 --> 00:11:01,180
然后您使用线性近似值的零作为您的下一个猜测。

171
00:11:01,480 --> 00:11:04,409
这并不是说我们盲目地将规则应用到新的环 境中，

172
00:11:04,409 --> 00:11:06,320
而没有理由期望它能够发挥作用。

173
00:11:06,980 --> 00:11:10,439
事实上，至少在几次迭代之后我在这里展示的那个，

174
00:11:10,439 --> 00:11:14,500
你可 以看到我们得到了一个值，其相应的输出基本上为零。

175
00:11:15,900 --> 00:11:17,200
现在这是有趣的部分。

176
00:11:17,200 --> 00:11:20,860
让我们将这个想法应用到许多不同的可能的初始猜测中。

177
00:11:21,780 --> 00:11:26,540
作为参考，我将在复平面中列 出该特定多项式的五个真根。

178
00:11:27,500 --> 00:11:32,000
在每次迭代中，我们的每个小点都会根据牛顿法采取一些步骤。

179
00:11:32,740 --> 00:11:35,840
大多数点会很快汇聚到五个真根之一，

180
00:11:35,840 --> 00:11:40,400
但也有一 些明显的掉队者似乎花了一段时间来回跳动。

181
00:11:41,000 --> 00:11:45,660
特别是，请注意那些被困在正实数线上的那些？

182
00:11:45,680 --> 00:11:49,492
它们看起来有点迷失，这正是我们之前在查看实数 

183
00:11:49,492 --> 00:11:53,140
情况及其图形时对于同一个多项式所看到的情况。

184
00:11:56,440 --> 00:12:00,199
现在我要做的就是根据最后最接近的五个根中 

185
00:12:00,199 --> 00:12:04,495
的哪一个对这些点进行着色，然后我们将时 钟回滚，

186
00:12:04,495 --> 00:12:07,180
以便每个点都回到它开始的地方。

187
00:12:09,240 --> 00:12:13,628
现在，正如我在这里所做的那样，这还不足以获得完整的 故事，

188
00:12:13,628 --> 00:12:17,108
所以让我向您展示如果我们从更精细的初始猜测网 

189
00:12:17,108 --> 00:12:21,042
格开始并玩相同的游戏，应用它会是什么样子牛顿的方法 

190
00:12:21,042 --> 00:12:23,463
出现了很多次，让每个根向前行进，

191
00:12:23,463 --> 00:12:26,338
根据每个点落在哪个 根上给每个点着色，

192
00:12:26,338 --> 00:12:28,760
然后回滚时钟看看它最初来自哪里。

193
00:12:29,400 --> 00:12:32,780
但即使这样，分辨率也不足以欣赏该图案。

194
00:12:33,180 --> 00:12:38,380
如果我们对平面上的每个像素都执行此过程，您将得到以下结果。

195
00:12:40,160 --> 00:12:44,086
在这种细节水平上，配色方案至少对我 来说有点刺耳，

196
00:12:44,086 --> 00:12:45,500
所以让我冷静一下。

197
00:12:46,320 --> 00:12:51,191
实际上，无论我尝试使用什么分辨率在这里向您展示这一点都可能 

198
00:12:51,191 --> 00:12:55,900
永远不够，因为我们获得的形状的更精细的细节会变得无限复杂。

199
00:13:01,760 --> 00:13:03,700
但请花点时间思考一下这实际上在说什么。

200
00:13:03,700 --> 00:13:06,140
这意味着在复杂平面中的某些区域，

201
00:13:06,140 --> 00:13:08,733
如果您稍微调整该种子值，您知 道，

202
00:13:08,733 --> 00:13:11,936
您只需将其撞到一侧 1.1 百万分之一或 

203
00:13:11,936 --> 00:13:15,292
1.1 万亿分 之一，它就可以完全改变五个中

204
00:13:15,292 --> 00:13:17,580
的哪一个它最终落地的真正根源。

205
00:13:18,400 --> 00:13:22,986
我们在真实的图和之前显示的有问题的猜测中看到了 

206
00:13:22,986 --> 00:13:27,381
这种混乱的一些预兆，但是在复杂的平面中描绘所 

207
00:13:27,381 --> 00:13:31,393
有这些确实揭示了这种寻根算法的不可预测性，

208
00:13:31,393 --> 00:13:35,980
以 及如何存在是发生这种不可预测性的整个初始值。

209
00:13:37,080 --> 00:13:39,806
现在，如果我抓住这些根之一并对其进行更改，

210
00:13:39,806 --> 00:13:42,532
这意味着我们在该 过程中使用不同的多项式，

211
00:13:42,532 --> 00:13:44,740
您可以看到生成的分形图案如何变化。

212
00:13:45,540 --> 00:13:51,040
例如，请注意给定根周围的区域如何始终具 有相同的颜色，

213
00:13:51,040 --> 00:13:56,948
因为这些点距离根足够近， 在此线性近似方案可以毫无问题地找

214
00:13:56,948 --> 00:13:57,560
到根。

215
00:13:58,180 --> 00:14:02,200
所有的混乱似乎都发生在区域之间的边界处。

216
00:14:02,720 --> 00:14:03,320
请记住这一点。

217
00:14:04,180 --> 00:14:08,480
似乎无论我将这些根放在哪里 ，那些分形边界总是存在。

218
00:14:08,980 --> 00:14:12,539
显然，这不仅仅是我们一开始的多项式的一次性 事件，

219
00:14:12,539 --> 00:14:14,960
它似乎是任何给定多项式的普遍事实。

220
00:14:16,800 --> 00:14:19,598
为了更好地说明正在发生的情况，我们可以在这里进 

221
00:14:19,598 --> 00:14:22,280
行调整的另一个方面是我们使用了牛顿法的多少步。

222
00:14:22,980 --> 00:14:25,485
例如，如果我让计算机只采取零步，

223
00:14:25,485 --> 00:14:29,870
这意味着它只是根据它 已经最接近的根为平面的每个点着色，

224
00:14:29,870 --> 00:14:31,280
这就是我们得到的。

225
00:14:31,660 --> 00:14:35,060
而这种图其实有一个特殊的名字，叫做 Voronoi 图。

226
00:14:36,060 --> 00:14:39,783
如果我们让平面上的每个点采用牛顿法的 一步，

227
00:14:39,783 --> 00:14:43,168
然后根据该单步结果最接近的根 为其着色，

228
00:14:43,168 --> 00:14:45,200
这就是我们将得到的结果。

229
00:14:50,180 --> 00:14:54,004
类似地，如果我们允许两个步骤，我们会得到一个 

230
00:14:54,004 --> 00:14:57,495
稍微复杂的图案，依此类推，允许的步骤越多，

231
00:14:57,495 --> 00:15:01,320
得 到的图像就越复杂，使我们更接近原始的分形。

232
00:15:01,860 --> 00:15:06,077
这很重要，请记住，我们在这里研究的真实形状不是 

233
00:15:06,077 --> 00:15:10,120
其中任何一个，它是我们允许任意大量迭代的限制。

234
00:15:14,340 --> 00:15:17,020
此时，我们可能会问很多问题。

235
00:15:17,460 --> 00:15:22,098
也许你想用其他一些多项式来尝试一下，看看它有多普 遍，

236
00:15:22,098 --> 00:15:26,736
或者你想更深入地研究这些迭代点到底可能有什么 动力学，

237
00:15:26,736 --> 00:15:30,000
或者看看是否与其他一些具有类似的主题。

238
00:15:30,900 --> 00:15:35,880
但我认为最相关的问题应该 是，这里到底发生了什么？

239
00:15:36,400 --> 00:15:40,400
我的意思是，我们在这里所做的就是重复求解线性近似。

240
00:15:40,880 --> 00:15:43,620
为什么会产生如此无限复杂的东西？

241
00:15:44,160 --> 00:15:46,993
几乎感觉这里的基本规则不应该携带 

242
00:15:46,993 --> 00:15:49,660
足够的信息来实际生成这样的图像。

243
00:15:50,180 --> 00:15:54,062
在看到这一点之前，您是否认为合理的初始猜 

244
00:15:54,062 --> 00:15:57,760
测可能是每个种子值只是倾向于最接近的根？

245
00:15:58,320 --> 00:16:01,731
在这种情况下，您知道，如果您根据每个点所在的根对每 

246
00:16:01,731 --> 00:16:03,830
个点进行着色并将其移回原始位置，

247
00:16:03,830 --> 00:16:07,241
则最终图像将看起 来像这些 Voronoi 图之一，

248
00:16:07,241 --> 00:16:08,160
具有直线边界。

249
00:16:09,200 --> 00:16:12,153
由于我之前提到了五次方程的不可解性，

250
00:16:12,153 --> 00:16:15,600
也 许您会想知道这里的复杂性是否与此有关。

251
00:16:15,920 --> 00:16:18,680
那会很酷，但它们本质上是不相关的想法。

252
00:16:19,079 --> 00:16:23,360
事实上，到目前为止仅使用 5 次多项式可能有点误导。

253
00:16:24,000 --> 00:16:26,793
看看如果我们玩同样的游戏，但使用三次多项式，

254
00:16:26,793 --> 00:16:29,840
并 且在复平面上的某个位置有三个根，会发生什么。

255
00:16:30,860 --> 00:16:34,026
再次注意，虽然大多数点都位于根部，

256
00:16:34,026 --> 00:16:37,380
 但其中一些点却更加混乱地到处乱飞。

257
00:16:38,040 --> 00:16:41,194
事实上，这些是像这样的动画中最引人注目的，

258
00:16:41,194 --> 00:16:44,500
 那些走向根源的只是静静地坐落在它们的终点。

259
00:16:45,160 --> 00:16:48,984
同样，如果我们在一定次数的迭代中停止此操作，

260
00:16:48,984 --> 00:16:53,678
并根据它 们最接近的根对所有点进行着色，然后回滚时钟，

261
00:16:53,678 --> 00:16:58,720
所有可 能的起点的相关图片就会形成具有无限细节的分形图案。

262
00:17:05,840 --> 00:17:09,380
然而，只有两个根的二次多项式则不同。

263
00:17:09,819 --> 00:17:13,777
在这种情况下，每个种子值确实会倾向 于最接近的根，

264
00:17:13,777 --> 00:17:15,359
正如您所期望的那样。

265
00:17:16,319 --> 00:17:21,099
与每个根的距离相等的所有点都有一点蜿 蜒的行为，

266
00:17:21,099 --> 00:17:25,680
有点像它们无法决定去哪一 个，但这只是一行点，

267
00:17:25,680 --> 00:17:30,660
当我们玩着色游 戏，我们最终得到的图表显然更无聊。

268
00:17:32,060 --> 00:17:36,263
所以当你从 2 跳到 3 时似乎会发 生一些新的事情，

269
00:17:36,263 --> 00:17:37,820
问题是，到底是什么？

270
00:17:37,820 --> 00:17:41,242
如果你一个月前问我，我可能会耸耸肩，只是说，你知道，

271
00:17:41,242 --> 00:17:44,532
 数学就是这样，有时答案看起来很简单，有时则不然，

272
00:17:44,532 --> 00:17:48,350
在某 种情况下问“为什么”意味着什么并不总是很清楚像这样。

273
00:17:48,350 --> 00:17:51,898
但我错了，实际上我们可以给出一个理由来 

274
00:17:51,898 --> 00:17:55,270
解释为什么这张图片必须看起来如此复杂。

275
00:17:55,930 --> 00:18:00,190
你看，我们可以证明这个图必须具有一个非常奇特的性质。

276
00:18:00,850 --> 00:18:05,252
将你的注意力集中在其中一个彩色区域上，比如这个蓝色区域，

277
00:18:05,252 --> 00:18:09,970
换 句话说，就是最终趋向于多项式的一个特定根的所有点的集合。

278
00:18:10,510 --> 00:18:14,001
现在考虑该区域的边界，对于屏幕上显示的 示例，

279
00:18:14,001 --> 00:18:16,430
该边界具有这种良好的三重对称性。

280
00:18:17,330 --> 00:18:21,626
令人惊讶的是，如果您观察任何其他颜色并 考虑其边界，

281
00:18:21,626 --> 00:18:23,610
您会得到完全相同的集合。

282
00:18:25,450 --> 00:18:29,081
现在，当我说“边界”这个词时，您可能对它的含义有一个直观 

283
00:18:29,081 --> 00:18:32,212
的认识，但是数学家有一种非常聪明的方法来形式化它，

284
00:18:32,212 --> 00:18:35,970
这使 得在像我们的分形这样的更狂野的集合的背景下更容易推理。

285
00:18:36,429 --> 00:18:39,524
如果当你画一个以该点为中心的小圆时，

286
00:18:39,524 --> 00:18:44,510
无论 多小，它总是包含既在该集合内部又在该集合 外部的点，

287
00:18:44,510 --> 00:18:47,090
我们就说该点位于集合的边界上。

288
00:18:47,890 --> 00:18:50,226
因此，如果您有一个位于内部的点，

289
00:18:50,226 --> 00:18:53,584
那么一个足够小 的圆最终将仅包含该集合内的点，

290
00:18:53,584 --> 00:18:56,942
而对于外部的一个 点，一个足够小的圆将根本不包

291
00:18:56,942 --> 00:18:58,110
含该集合中的点。

292
00:18:58,610 --> 00:19:01,675
但当它在边界上时，在边界上意味 

293
00:19:01,675 --> 00:19:04,550
着你的微小圆圈将永远包含两者。

294
00:19:05,410 --> 00:19:10,022
因此，回顾我们的属性，一种解读方式是，如果你画一个圆，

295
00:19:10,022 --> 00:19:13,438
 无论这个圆有多小，它要么包含所有颜色，

296
00:19:13,438 --> 00:19:17,880
当颜色的共享边 界位于该圆内部时，就会发生这种情况，

297
00:19:17,880 --> 00:19:22,492
或者它只包含一种颜 色，当它位于其中一个区域的内部时，

298
00:19:22,492 --> 00:19:24,030
就会发生这种情况。

299
00:19:27,050 --> 00:19:32,221
特别是，这意味着您永远无法找到仅包含 两种颜色的圆，

300
00:19:32,221 --> 00:19:37,790
因为这需要您在两个区 域之间的边界上有点，但不是所有点。

301
00:19:38,950 --> 00:19:41,860
在解释这个事实的真正来源之前， 

302
00:19:41,860 --> 00:19:44,590
尝试稍微思考一下它是很有趣的。

303
00:19:44,990 --> 00:19:48,328
你可以想象将其作为一种艺术难题呈现给某人，

304
00:19:48,328 --> 00:19:51,985
完全断 章取义，从不提及牛顿方法或类似的东西，

305
00:19:51,985 --> 00:19:55,164
你说挑战是 用至少三种颜色构建一幅图片，

306
00:19:55,164 --> 00:19:58,980
也许我们说红色，绿色 和蓝色，因此一种颜色的边界

307
00:19:58,980 --> 00:20:00,570
就是所有颜色的边界。

308
00:20:00,950 --> 00:20:04,903
所以，如果你从这样简单的事情开始，那显然是行不通的，

309
00:20:04,903 --> 00:20:08,552
 因为我们有一整条线的点位于绿色和红色的边界上，

310
00:20:08,552 --> 00:20:12,810
但没 有触及任何蓝色，同样，你还有这些其他不允许的线点。

311
00:20:13,630 --> 00:20:17,737
因此，为了纠正这个问题，您可以沿着边界添加一些蓝色斑点 ，

312
00:20:17,737 --> 00:20:20,712
然后同样在红色和蓝色之间添加一些绿色斑点，

313
00:20:20,712 --> 00:20:23,970
在绿色和 蓝色之间添加一些红色斑点，但是当然，

314
00:20:23,970 --> 00:20:28,078
现在是这些斑点的边 界是一个问题，例如，仅触摸蓝色和红色，

315
00:20:28,078 --> 00:20:29,070
但不触摸绿色。

316
00:20:29,629 --> 00:20:32,105
因此，也许您可以尝试添加更小的斑点，

317
00:20:32,105 --> 00:20:35,269
并在这些较小 的边界周围添加相关的第三种颜色，

318
00:20:35,269 --> 00:20:36,370
以帮助尝试纠正。

319
00:20:37,310 --> 00:20:41,170
同样，您必须对最初添加的每个斑点执行此操作。

320
00:20:44,450 --> 00:20:48,500
但这些小斑点的所有边界都是它们自己的问 题，

321
00:20:48,500 --> 00:20:51,630
你必须以某种方式永远继续这个过程。

322
00:20:53,570 --> 00:20:57,540
如果你看看牛顿分形本身，这种斑点叠 

323
00:20:57,540 --> 00:21:01,290
斑点的模式似乎正是它正在做的事情。

324
00:21:06,550 --> 00:21:10,563
我想让您注意的主要事情是，这个属性意味着您永远 

325
00:21:10,563 --> 00:21:15,246
不可能拥有平滑的边界，甚至在某些小段上部分平 滑的边界，

326
00:21:15,246 --> 00:21:18,090
因为任何平滑的段只会接触两种颜色。

327
00:21:18,790 --> 00:21:23,150
相反，可以说，边界必须完全由尖角组成。

328
00:21:23,810 --> 00:21:28,225
因此，如果您相信这个性质，它就解释了为 什么无论您放大多远，

329
00:21:28,225 --> 00:21:29,550
边界仍然是粗糙的。

330
00:21:30,170 --> 00:21:32,836
对于那些熟悉分形维数概念的人来说，

331
00:21:32,836 --> 00:21:36,287
您可以测量我现 在向您展示的特定边界的维数，

332
00:21:36,287 --> 00:21:38,170
该维数约为 1。44. 

333
00:21:39,890 --> 00:21:42,320
考虑到我们的颜色实际上代表什么，

334
00:21:42,320 --> 00:21:44,751
记住这不仅仅是 为了图片而图片，

335
00:21:44,751 --> 00:21:47,030
想想这个属性真正告诉我们什么。

336
00:21:48,310 --> 00:21:53,336
它表示，如果您靠近一个敏感点，其中一些种子值进入 一个根，

337
00:21:53,336 --> 00:21:56,283
但附近的其他种子值将进入另一个根，

338
00:21:56,283 --> 00:22:00,790
那么 实际上每个可能的根都必须可以从该小邻域内访问。

339
00:22:01,530 --> 00:22:05,578
对于你画的任何一个小圆圈，要么该圆圈中的所有点 

340
00:22:05,578 --> 00:22:08,783
都趋向于一个根，要么它们趋向于所有根，

341
00:22:08,783 --> 00:22:13,170
但两者 之间永远不会有任何东西，只是趋向于根的子集。

342
00:22:14,050 --> 00:22:17,102
出于一点直觉，我发现简单地观察像屏幕上 

343
00:22:17,102 --> 00:22:19,850
的集群那样经历这一过程是很有启发的。

344
00:22:20,430 --> 00:22:26,327
一开始它大多粘在一起，但在一次迭代中它们都会向 外爆炸，

345
00:22:26,327 --> 00:22:30,330
之后感觉任何根都可以被抓住就更合理了。

346
00:22:31,370 --> 00:22:34,402
请记住，我只是向您展示有限多个点，

347
00:22:34,402 --> 00:22:38,862
但原则上您会想要 考虑某个小圆盘内所有不可数无限多

348
00:22:38,862 --> 00:22:40,290
个点会发生什么。

349
00:22:44,610 --> 00:22:48,603
这个属性也解释了为什么在只有两个根的二次多项 

350
00:22:48,603 --> 00:22:51,555
式的情况下事情看起来正常是可以的，

351
00:22:51,555 --> 00:22:56,070
因为平滑 的边界很好，无论如何只有两种颜色可以接触。

352
00:22:56,830 --> 00:23:01,440
需要明确的是，它并不能保证二次情况有一个平滑的 边界，

353
00:23:01,440 --> 00:23:04,684
两种颜色之间完全有可能有一个分形边界，

354
00:23:04,684 --> 00:23:08,953
 它只是看起来我们的牛顿方法图没有做任何比它需要 

355
00:23:08,953 --> 00:23:12,710
的更复杂的事情在这种奇怪的边界条件的约束下。

356
00:23:13,850 --> 00:23:17,129
但当然，所有这一切都只是提出了一个问题：为 

357
00:23:17,129 --> 00:23:20,110
什么这种奇怪的边界属性首先必须是真实的。

358
00:23:20,410 --> 00:23:21,510
它来自哪里？

359
00:23:22,450 --> 00:23:26,106
为此，我想向您介绍一个研究此类问题 的数学领域，

360
00:23:26,106 --> 00:23:27,630
它被称为全纯动力学。

361
00:23:28,410 --> 00:23:30,354
我认为我们今天已经涵盖了足够的内容，

362
00:23:30,354 --> 00:23:32,190
并且肯定还有足够的 内容可以讲述，

363
00:23:32,190 --> 00:23:34,350
因此将其作为单独的视频拿出来是有意义的。

364
00:23:35,010 --> 00:23:40,426
结束语，对我来说，我们称之为牛顿分 形这一事实有点有趣，

365
00:23:40,426 --> 00:23:45,455
尽管牛顿对此一 无所知，而且永远不可能像你和你那样 

366
00:23:45,455 --> 00:23:48,550
处理这些图像。我可以用现代技术。

367
00:23:49,050 --> 00:23:53,075
通过数学，人们的名字与事物的联系远远 超出了他们的梦想，

368
00:23:53,075 --> 00:23:54,370
这种情况经常发生。

369
00:23:54,810 --> 00:23:57,343
尽管汉密尔顿对量子力学一无所知 ，

370
00:23:57,343 --> 00:23:59,430
但哈密顿量是量子力学的核心。

371
00:24:00,010 --> 00:24:04,690
傅里叶本人从未计算过快速傅里叶变换，这样的例子不胜枚举。

372
00:24:04,690 --> 00:24:09,950
但这种术语的过度扩展带来了我认为鼓舞人心的观点。

373
00:24:10,530 --> 00:24:15,175
它反映了即使是几个世纪前就可以发现的 简单想法，

374
00:24:15,175 --> 00:24:19,047
也常常包含一些新的角度或新 的相关领域，

375
00:24:19,047 --> 00:24:21,370
可以等待数百年后被发现。

376
00:24:21,910 --> 00:24:25,150
牛顿不仅仅是不知道牛顿分形。

377
00:24:25,330 --> 00:24:29,553
关于牛顿方法，或者关于各种数学，可能还有许多其他事实，

378
00:24:29,553 --> 00:24:34,246
这 些事实可能看起来像旧新闻，它们来自还没有人想到要问的问 

379
00:24:34,246 --> 00:24:38,470
题，这些问题只是坐在那里，等待像你这样的人，去问他们。

380
00:24:42,870 --> 00:24:47,329
例如，如果你问我们今天讨论的这个过程是否会陷 入循环，

381
00:24:47,329 --> 00:24:51,127
它会让你与曼德尔布罗特集产生令人惊 讶的联系，

382
00:24:51,127 --> 00:24:53,770
我们将在下一篇中讨论这一点部分。

383
00:24:55,030 --> 00:24:57,173
顺便说一句，在我发布此内容时，第 

384
00:24:57,173 --> 00:24:59,190
二部分已作为早期版本提供给顾客。

385
00:24:59,590 --> 00:25:03,470
我总是喜欢给新内容一点时 间来收集反馈并发现错误。

386
00:25:03,950 --> 00:25:05,610
最终版本应该很快就会发布。

387
00:25:06,470 --> 00:25:08,458
说到赞助人的话题，我只想对屏幕上 

388
00:25:08,458 --> 00:25:10,330
名字出现的每个人表示快速的感谢。

389
00:25:10,750 --> 00:25:13,970
我知道在最近的历史中，新视频的发布速度有点慢。

390
00:25:14,410 --> 00:25:16,750
部分原因与正在进行的其他项目有关。

391
00:25:17,230 --> 00:25:20,975
顺便说一句，我感到自豪的事情，比如夏季数学博览会，

392
00:25:20,975 --> 00:25:24,870
 说实话，工作量令人惊讶，但考虑到结果，这是值得的。

393
00:25:25,110 --> 00:25:29,030
我将很快讨论所有这些并宣布获奖者，所以请继续关注。

394
00:25:29,450 --> 00:25:32,022
我只是想让你知道，在可预见的未来，

395
00:25:32,022 --> 00:25:35,352
我的计划肯定是 更全心全意地回归制作新视频，

396
00:25:35,352 --> 00:25:38,379
最重要的是我想说的是 感谢你的持续支持，

397
00:25:38,379 --> 00:25:40,650
即使是在尝试一些新事物的时候。

398
00:25:40,910 --> 00:25:43,796
这对我来说意义重大，它是让频道继续运转的动力，

399
00:25:43,796 --> 00:25:47,310
我将 尽我所能，让正在酝酿中的新课程不辜负你们的信任票。

