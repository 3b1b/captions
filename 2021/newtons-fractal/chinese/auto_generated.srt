1
00:00:02,459 --> 00:00:05,580
您已经看到了标题，所以您知道这会导致某种分形。

2
00:00:05,920 --> 00:00:07,940
实际上它是一个无限的分形族。

3
00:00:08,720 --> 00:00:11,817
是的，它将是那些令人难以置信的复杂形状之 

4
00:00:11,817 --> 00:00:14,620
一，无论你放大多远，它都有无限的细节。

5
00:00:14,760 --> 00:00:18,940
但这并不是一个真正的视频，旨在生成一些漂亮的图片供我们观看。

6
00:00:19,060 --> 00:00:22,466
好吧，好吧，也许这是其中的一部分，但这里的真实故 

7
00:00:22,466 --> 00:00:25,600
事比许多其他分形背后的故事有一个更务实的起点。

8
00:00:26,180 --> 00:00:30,170
更重要的是，如果我们努力理解为什么考虑到它们 

9
00:00:30,170 --> 00:00:33,986
所代表的内容，它们必须看起来像它们一样复杂 

10
00:00:33,986 --> 00:00:37,976
，以及这种复杂性反映了什么，那么我们得到的最 

11
00:00:37,976 --> 00:00:41,620
终图像将变得更有意义工程中广泛使用的算法。

12
00:00:48,000 --> 00:00:53,900
这里的起点是假设您有某种多项式 ，并且您想知道它何时等于零。

13
00:00:54,320 --> 00:00:58,110
对于此处的一张图，您可以直观地看到它与 x 轴相交的 

14
00:00:58,110 --> 00:01:01,760
三个不同位置，并且您可以直观地了解这些值可能是什么。

15
00:01:01,900 --> 00:01:03,700
我们将其称为多项式的根。

16
00:01:04,260 --> 00:01:06,300
但实际上如何准确计算它们呢？

17
00:01:07,440 --> 00:01:10,145
现在的问题是，如果你已经对数学感兴趣， 

18
00:01:10,145 --> 00:01:12,580
也许它本身就足够有趣，可以继续前进。

19
00:01:12,940 --> 00:01:15,587
但如果你把街上的某个人拉到一边问他们这个问题 

20
00:01:15,587 --> 00:01:18,120
，我的意思是，他们已经睡着了，因为谁在乎呢？

21
00:01:18,820 --> 00:01:22,060
但问题是，这种问题在工程中经常出现。

22
00:01:22,580 --> 00:01:26,643
我个人最熟悉像这样突然出现的方程是在计算 

23
00:01:26,643 --> 00:01:30,320
机图形学的设置中，其中多项式到处都是。

24
00:01:30,420 --> 00:01:34,565
因此，当您计算给定像素应如何着色时，以某种方式涉 

25
00:01:34,565 --> 00:01:38,380
及求解使用这些多项式的方程，这种情况并不罕见。

26
00:01:39,480 --> 00:01:40,880
下面我给大家举一个有趣的例子。

27
00:01:41,160 --> 00:01:44,283
当计算机在屏幕上呈现文本时，这些 

28
00:01:44,283 --> 00:01:47,040
字体通常不是使用像素值定义的。

29
00:01:47,320 --> 00:01:52,520
它们被定义为一堆多项式曲 线，业内称为贝塞尔曲线。

30
00:01:53,400 --> 00:01:56,700
任何一个曾经接触过矢量图形的人，也许在某些 

31
00:01:56,700 --> 00:01:59,700
设计软件中，都会非常熟悉这些类型的曲线。

32
00:02:00,420 --> 00:02:04,134
但要在屏幕上实际显示其中一个像素，您需要一 

33
00:02:04,134 --> 00:02:07,680
种方法来告诉屏幕上的每个像素是否应该着色。

34
00:02:08,340 --> 00:02:11,539
这些曲线可以用某种笔画宽度来显示，或者如果它 

35
00:02:11,539 --> 00:02:14,600
们包围一个区域，则可以对该区域进行某种填充。

36
00:02:15,320 --> 00:02:18,622
但如果你退一步认真思考一下，仅仅根据 

37
00:02:18,622 --> 00:02:21,925
纯数学曲线来弄清楚每个像素如何知道它 

38
00:02:21,925 --> 00:02:24,880
是否应该着色，这是一个有趣的难题。

39
00:02:25,640 --> 00:02:26,940
我的意思是，以笔划宽度为例。

40
00:02:27,320 --> 00:02:31,906
这归结为理解给定像素与这条纯数学曲线的距离有多远， 

41
00:02:31,906 --> 00:02:36,140
该曲线本身就是某种柏拉图式的理想，它的宽度为零。

42
00:02:36,700 --> 00:02:39,920
您可以将其视为具有某些参数 t 的参数曲线。

43
00:02:41,080 --> 00:02:45,124
现在，要计算出该距离，您可以做的一件事是计算像素与该 

44
00:02:45,124 --> 00:02:49,020
曲线上的一堆样本点之间的距离，然后计算出最小的距离。

45
00:02:49,820 --> 00:02:51,980
但这既低效又不精确。

46
00:02:52,460 --> 00:02:56,655
更好的是了解一点数学知识，并承认所有可能点 

47
00:02:56,655 --> 00:03:00,660
处到曲线的距离本身就是参数的一些平滑函数。

48
00:03:01,240 --> 00:03:04,300
碰巧的是，该距离的平方本身就是一 

49
00:03:04,300 --> 00:03:07,000
个多项式，这使得它非常好处理。

50
00:03:07,820 --> 00:03:12,196
如果这是关于渲染矢量图形的完整课程，我们可以扩展所 

51
00:03:12,196 --> 00:03:16,572
有内容并拥抱混乱，但现在我想强调的唯一要点是，原则 

52
00:03:16,572 --> 00:03:20,780
上，这个函数，您想要的最小值要知道，是一些多项式。

53
00:03:21,580 --> 00:03:25,288
找到这个最小值，从而确定像素与曲线的接近程度以及 

54
00:03:25,288 --> 00:03:28,700
是否应该填充它，现在只是一个经典的微积分问题。

55
00:03:29,340 --> 00:03:33,605
你要做的就是计算出这个函数图的斜率，也就是说它的 

56
00:03:33,605 --> 00:03:37,700
导数，又是一些多项式，你会问，什么时候它等于零？

57
00:03:38,980 --> 00:03:42,739
因此，要实际执行这个看似简单的仅显示曲线 

58
00:03:42,739 --> 00:03:46,498
的任务，如果您有一种系统且通用的方法来计 

59
00:03:46,498 --> 00:03:49,900
算给定多项式何时等于零，那不是很好吗？

60
00:03:50,960 --> 00:03:54,571
当然，我们可以从 100 个其他学科中抽取 100 

61
00:03:54,571 --> 00:03:58,599
个 其他例子，我只是想让你记住，当我们寻找多项式的根时， 

62
00:03:58,599 --> 00:04:02,488
即使我们总是以一种从任何真实的混乱中完全抽象出来的方式 

63
00:04:02,488 --> 00:04:06,100
来显示它——世界问题，这项任务不仅仅是一个学术任务。

64
00:04:06,100 --> 00:04:10,400
但再次问问自己，你如何实际计算这些根之一？

65
00:04:12,120 --> 00:04:16,491
如果您正在解决的任何问题都会导致您使用二次函数，那么 

66
00:04:16,491 --> 00:04:20,540
快乐的日子，您可以使用我们都知道和喜爱的二次公式。

67
00:04:20,540 --> 00:04:24,860
作为一个有趣的旁注，再次与计算机图形学中的寻根相关， 

68
00:04:24,860 --> 00:04:29,180
我曾经让一位皮克斯工程师给了我一个估计，考虑到电影《 

69
00:04:29,180 --> 00:04:33,500
寻梦环游记》的某些场景中使用了多少灯光，并考虑到其中 

70
00:04:33,500 --> 00:04:37,820
一些灯光的性质当涉及球体等多项式定义的物体时，每像素 

71
00:04:37,820 --> 00:04:41,980
计算时，二次公式在该电影的制作中很容易使用数万亿次。

72
00:04:43,420 --> 00:04:45,510
现在，当您的问题导致您得到更高阶

73
00:04:45,510 --> 00:04:47,600
多项式时，事情开始变得更加棘手。

74
00:04:48,120 --> 00:04:51,872
对于三次多项式，还有一个公式，Mathologe 

75
00:04:51,872 --> 00:04:55,625
r 制作了一个精彩的视频，甚至还有一个四次公式， 

76
00:04:55,625 --> 00:04:59,377
可以求解 4 次多项式，尽管老实说，这个公式是一 

77
00:04:59,377 --> 00:05:02,980
个可怕的噩梦，基本上没有人们在实践中实际使用它。

78
00:05:04,060 --> 00:05:08,726
但在那之后，我发现这是所有数学中最令人着迷的结果之一 

79
00:05:08,726 --> 00:05:13,220
，你无法使用类似的公式来求解 5 次或以上的多项式。

80
00:05:14,020 --> 00:05:18,360
更具体地说，对于一组相当广泛的标准函数，您可以 

81
00:05:18,360 --> 00:05:22,520
证明没有可能的方法可以将这些函数组合在一起， 

82
00:05:22,520 --> 00:05:26,500
从而允许您插入五次多项式的系数并始终得出根。

83
00:05:27,360 --> 00:05:31,263
这被称为五次方程的不可解性，这是一种完全不 

84
00:05:31,263 --> 00:05:35,167
同的蠕虫，我们希望可以在其他时间讨论它，但 

85
00:05:35,167 --> 00:05:39,071
实际上这并不重要，因为我们有算法来近似解决 

86
00:05:39,071 --> 00:05:42,620
这些类型具有您想要的任何精度级别的方程。

87
00:05:43,240 --> 00:05:47,100
牛顿法是一种常见的方法，也是你我今天的主要话题。

88
00:05:47,620 --> 00:05:51,150
是的，这就是我们走向分形的原因，但我希望你 

89
00:05:51,150 --> 00:05:54,520
注意整个过程一开始看起来是多么无辜和良性。

90
00:05:55,240 --> 00:05:58,860
该算法从随机猜测开始，我们将其称为 x0。

91
00:05:59,660 --> 00:06:03,793
几乎可以肯定，多项式在 x0 处的输出不是 0，因此您 

92
00:06:03,793 --> 00:06:07,780
还没有找到解决方案，它是该图在该点的高度可见的其他值。

93
00:06:08,380 --> 00:06:12,032
因此，为了改进猜测，我们的想法是问，围 

94
00:06:12,032 --> 00:06:15,320
绕该值的函数的线性逼近何时等于 0？

95
00:06:16,020 --> 00:06:19,081
换句话说，如果此时要在图形上画一条切 

96
00:06:19,081 --> 00:06:21,820
线，那么该切线何时与 x 轴相交？

97
00:06:23,100 --> 00:06:26,471
现在假设这条切线是函数在某个真根的松 

98
00:06:26,471 --> 00:06:30,020
散附近的近似值，那么这个近似值等于 0 

99
00:06:30,020 --> 00:06:32,860
的地方应该会让你更接近那个真根。

100
00:06:33,900 --> 00:06:37,586
只要您能够对该函数求导，并且使用多项式，您总是 

101
00:06:37,586 --> 00:06:41,120
能够做到这一点，您就可以具体计算这条线的斜率。

102
00:06:42,100 --> 00:06:45,275
因此，活跃的观众可能想停下来问一下，您如 

103
00:06:45,275 --> 00:06:48,300
何找出当前猜测和改进后的猜测之间的差异？

104
00:06:48,520 --> 00:06:50,060
这一步的大小是多少？

105
00:06:50,900 --> 00:06:55,494
思考它的一种方法是考虑这样一个事实：这条切线的斜率，即 

106
00:06:55,494 --> 00:06:59,760
它的上升幅度，看起来就像该图的高度除以该台阶的长度。

107
00:07:00,440 --> 00:07:05,100
但另一方面，当然，切线的斜 率是多项式在该点的导数。

108
00:07:05,840 --> 00:07:08,695
如果我们在这里重新排列这个方程，这将 

109
00:07:08,695 --> 00:07:11,400
为您提供一种计算步长的超级具体方法。

110
00:07:12,140 --> 00:07:15,097
因此，下一个猜测（我们可以称之为 x1 

111
00:07:15,097 --> 00:07:17,760
）是之前的猜测，并按此步长进行调整。

112
00:07:18,400 --> 00:07:20,980
之后，您可以重复该过程。

113
00:07:21,520 --> 00:07:25,278
您计算该函数的值以及该新猜测的斜率，这将 

114
00:07:25,278 --> 00:07:29,037
为您提供新的线性近似值，然后在切线与 x 

115
00:07:29,037 --> 00:07:32,080
轴相交的位置进行下一个猜测 x2。

116
00:07:32,780 --> 00:07:35,980
然后对 x2 应用相同的计算，得到 x3。

117
00:07:36,440 --> 00:07:39,469
不久之后，你就会发现自己非常接近真正 

118
00:07:39,469 --> 00:07:42,180
的根源，几乎是你所希望的那样接近。

119
00:07:44,760 --> 00:07:47,194
总是值得仔细检查一个公式是否确实有意 

120
00:07:47,194 --> 00:07:49,500
义，在这种情况下，希望它确实有意义。

121
00:07:49,840 --> 00:07:52,674
如果 x 的 p 很大，意味着图非常 

122
00:07:52,674 --> 00:07:55,360
高，则需要采取更大的步骤才能找到根。

123
00:07:55,980 --> 00:07:58,512
但是，如果 x 的 p&#39; 

124
00:07:58,512 --> 00:08:02,088
也很大，这意味 着图形非常陡峭，那么您可能应该放

125
00:08:02,088 --> 00:08:03,280
松该步骤的大小。

126
00:08:04,520 --> 00:08:08,760
顾名思义，这是牛顿用来求解多项式表达式的方法。

127
00:08:08,760 --> 00:08:13,080
但他让它看起来比需要的复杂得多，一个名叫约瑟夫·拉夫 

128
00:08:13,080 --> 00:08:17,400
森的人发表了一个更简单的版本，更像你和我现在看到的， 

129
00:08:17,400 --> 00:08:21,560
所以你也经常听到这种称为牛顿算法的算法-拉夫森方法。

130
00:08:22,640 --> 00:08:24,920
如今，这是微积分课程中的一个常见话题。

131
00:08:25,360 --> 00:08:28,533
顺便说一句，一个很好的小练习就是 

132
00:08:28,533 --> 00:08:31,520
尝试使用这种方法手动近似平方根。

133
00:08:33,179 --> 00:08:37,072
但不幸的是，大多数微积分学生没有看到，当 

134
00:08:37,072 --> 00:08:40,778
你让自己尝试这个看似简单的过程并开始揭 

135
00:08:40,778 --> 00:08:44,300
开它的一些伤疤时，事情会变得多么深入。

136
00:08:45,380 --> 00:08:49,742
您会看到，虽然牛顿方法在您从根附近开始时效果很好，并且收敛 

137
00:08:49,742 --> 00:08:53,960
速度非常快，但如果您最初的猜测远离根，它可能会有一些缺陷。

138
00:08:54,920 --> 00:08:58,030
例如，让我们采用刚刚看到的函数，但将其向上 

139
00:08:58,030 --> 00:09:01,000
移动，并使用相同的初始猜测来玩相同的游戏。

140
00:09:07,400 --> 00:09:11,168
请注意我们得到的新猜测序列如何围绕位于 

141
00:09:11,168 --> 00:09:14,560
x 轴上方的该函数的局部最小值反弹。

142
00:09:15,460 --> 00:09:19,501
这应该是有道理的，我的意思是围绕这些值一 

143
00:09:19,501 --> 00:09:23,542
直向右的函数的线性近似几乎与它向左的一个 

144
00:09:23,542 --> 00:09:27,583
真根周围的函数的性质完全无关，所以它们有 

145
00:09:27,583 --> 00:09:31,240
点没有给你任何关于真正根源的有用信息。

146
00:09:31,880 --> 00:09:34,937
只有当这个过程碰巧将新的猜测抛到左边足 

147
00:09:34,937 --> 00:09:37,995
够远的时候，新的猜测序列才会产生任何富 

148
00:09:37,995 --> 00:09:40,900
有成效的结果，并且实际上接近真正的根。

149
00:09:42,680 --> 00:09:47,520
如果我们询问在复平面中寻找 根，事情就会变得特别有趣。

150
00:09:48,380 --> 00:09:52,255
即使像此处所示的多项式只有一个实数根， 

151
00:09:52,255 --> 00:09:56,131
如果您允许这些根可能是复数，您也始终能 

152
00:09:56,131 --> 00:09:59,620
够将该多项式分解为五个项，如下所示。

153
00:10:00,100 --> 00:10:02,100
这就是著名的代数基本定理。

154
00:10:02,820 --> 00:10:07,216
现在，在具有实数输入和实数输出的函数的无忧无虑的领域 

155
00:10:07,216 --> 00:10:11,449
中，您可以将输入和输出之间的关联描绘为图形，牛顿方 

156
00:10:11,449 --> 00:10:15,520
法通过切线和与 x 相交具有非常好的视觉意义-轴。

157
00:10:16,100 --> 00:10:19,299
但如果你想允许这些输入是任意复数， 

158
00:10:19,299 --> 00:10:22,498
这意味着我们相应的输出也可能是任意 

159
00:10:22,498 --> 00:10:25,520
复数，你就不能再考虑切线和图形了。

160
00:10:26,199 --> 00:10:29,100
但这个公式并不真正关心你如何想象它。

161
00:10:29,100 --> 00:10:33,172
您仍然可以玩同样的游戏，从随机猜测 

162
00:10:33,172 --> 00:10:37,019
开始，评估此时的多项式及其导数， 

163
00:10:37,019 --> 00:10:40,640
然后使用此更新规则生成新的猜测。

164
00:10:41,160 --> 00:10:43,620
希望这个新的猜测更接近真正的根源。

165
00:10:45,460 --> 00:10:48,470
但我确实想澄清，即使我们无法用切线来形 

166
00:10:48,470 --> 00:10:51,180
象化这些步骤，但它确实是相同的逻辑。

167
00:10:51,180 --> 00:10:56,278
我们正在计算围绕您的猜测的函数的线性近似值在哪里等 

168
00:10:56,278 --> 00:11:01,180
于零，然后您使用线性近似值的零作为您的下一个猜测。

169
00:11:01,480 --> 00:11:04,027
这并不是说我们盲目地将规则应用到新的环 

170
00:11:04,027 --> 00:11:06,320
境中，而没有理由期望它能够发挥作用。

171
00:11:06,980 --> 00:11:10,890
事实上，至少在几次迭代之后我在这里展示的那个，你可 

172
00:11:10,890 --> 00:11:14,500
以看到我们得到了一个值，其相应的输出基本上为零。

173
00:11:15,900 --> 00:11:17,200
现在这是有趣的部分。

174
00:11:17,200 --> 00:11:20,860
让我们将这个想法应用到许多不同的可能的初始猜测中。

175
00:11:21,780 --> 00:11:26,540
作为参考，我将在复平面中列 出该特定多项式的五个真根。

176
00:11:27,500 --> 00:11:32,000
在每次迭代中，我们的每个小点都会根据牛顿法采取一些步骤。

177
00:11:32,740 --> 00:11:36,752
大多数点会很快汇聚到五个真根之一，但也有一 

178
00:11:36,752 --> 00:11:40,400
些明显的掉队者似乎花了一段时间来回跳动。

179
00:11:41,000 --> 00:11:45,660
特别是，请注意那些被困在正实数线上的那些？

180
00:11:45,680 --> 00:11:49,492
它们看起来有点迷失，这正是我们之前在查看实数 

181
00:11:49,492 --> 00:11:53,140
情况及其图形时对于同一个多项式所看到的情况。

182
00:11:56,440 --> 00:12:00,199
现在我要做的就是根据最后最接近的五个根中 

183
00:12:00,199 --> 00:12:03,779
的哪一个对这些点进行着色，然后我们将时 

184
00:12:03,779 --> 00:12:07,180
钟回滚，以便每个点都回到它开始的地方。

185
00:12:09,240 --> 00:12:13,174
现在，正如我在这里所做的那样，这还不足以获得完整的 

186
00:12:13,174 --> 00:12:17,108
故事，所以让我向您展示如果我们从更精细的初始猜测网 

187
00:12:17,108 --> 00:12:21,042
格开始并玩相同的游戏，应用它会是什么样子牛顿的方法 

188
00:12:21,042 --> 00:12:24,977
出现了很多次，让每个根向前行进，根据每个点落在哪个 

189
00:12:24,977 --> 00:12:28,760
根上给每个点着色，然后回滚时钟看看它最初来自哪里。

190
00:12:29,400 --> 00:12:32,780
但即使这样，分辨率也不足以欣赏该图案。

191
00:12:33,180 --> 00:12:38,380
如果我们对平面上的每个像素都执行此过程，您将得到以下结果。

192
00:12:40,160 --> 00:12:42,987
在这种细节水平上，配色方案至少对我 

193
00:12:42,987 --> 00:12:45,500
来说有点刺耳，所以让我冷静一下。

194
00:12:46,320 --> 00:12:51,191
实际上，无论我尝试使用什么分辨率在这里向您展示这一点都可能 

195
00:12:51,191 --> 00:12:55,900
永远不够，因为我们获得的形状的更精细的细节会变得无限复杂。

196
00:13:01,760 --> 00:13:03,700
但请花点时间思考一下这实际上在说什么。

197
00:13:03,700 --> 00:13:07,055
这意味着在复杂平面中的某些区域，如果您稍微调

198
00:13:07,055 --> 00:13:10,258
整该种子值，您知 道，您只需将其撞到一侧 

199
00:13:10,258 --> 00:13:13,156
1.1 百万分之一或 1.1 万亿分 

200
00:13:13,156 --> 00:13:17,580
之一，它就可以完全改变五个中的哪一个它最终落地的真正根源。

201
00:13:18,400 --> 00:13:22,986
我们在真实的图和之前显示的有问题的猜测中看到了 

202
00:13:22,986 --> 00:13:27,381
这种混乱的一些预兆，但是在复杂的平面中描绘所 

203
00:13:27,381 --> 00:13:31,776
有这些确实揭示了这种寻根算法的不可预测性，以 

204
00:13:31,776 --> 00:13:35,980
及如何存在是发生这种不可预测性的整个初始值。

205
00:13:37,080 --> 00:13:40,974
现在，如果我抓住这些根之一并对其进行更改，这意味着我们在该 

206
00:13:40,974 --> 00:13:44,740
过程中使用不同的多项式，您可以看到生成的分形图案如何变化。

207
00:13:45,540 --> 00:13:49,614
例如，请注意给定根周围的区域如何始终具 

208
00:13:49,614 --> 00:13:53,689
有相同的颜色，因为这些点距离根足够近， 

209
00:13:53,689 --> 00:13:57,560
在此线性近似方案可以毫无问题地找到根。

210
00:13:58,180 --> 00:14:02,200
所有的混乱似乎都发生在区域之间的边界处。

211
00:14:02,720 --> 00:14:03,320
请记住这一点。

212
00:14:04,180 --> 00:14:08,480
似乎无论我将这些根放在哪里 ，那些分形边界总是存在。

213
00:14:08,980 --> 00:14:12,112
显然，这不仅仅是我们一开始的多项式的一次性 

214
00:14:12,112 --> 00:14:14,960
事件，它似乎是任何给定多项式的普遍事实。

215
00:14:16,800 --> 00:14:19,598
为了更好地说明正在发生的情况，我们可以在这里进 

216
00:14:19,598 --> 00:14:22,280
行调整的另一个方面是我们使用了牛顿法的多少步。

217
00:14:22,980 --> 00:14:27,208
例如，如果我让计算机只采取零步，这意味着它只是根据它 

218
00:14:27,208 --> 00:14:31,280
已经最接近的根为平面的每个点着色，这就是我们得到的。

219
00:14:31,660 --> 00:14:35,060
而这种图其实有一个特殊的名字，叫做 Voronoi 图。

220
00:14:36,060 --> 00:14:39,275
如果我们让平面上的每个点采用牛顿法的 

221
00:14:39,275 --> 00:14:42,322
一步，然后根据该单步结果最接近的根 

222
00:14:42,322 --> 00:14:45,200
为其着色，这就是我们将得到的结果。

223
00:14:50,180 --> 00:14:54,004
类似地，如果我们允许两个步骤，我们会得到一个 

224
00:14:54,004 --> 00:14:57,828
稍微复杂的图案，依此类推，允许的步骤越多，得 

225
00:14:57,828 --> 00:15:01,320
到的图像就越复杂，使我们更接近原始的分形。

226
00:15:01,860 --> 00:15:06,077
这很重要，请记住，我们在这里研究的真实形状不是 

227
00:15:06,077 --> 00:15:10,120
其中任何一个，它是我们允许任意大量迭代的限制。

228
00:15:14,340 --> 00:15:17,020
此时，我们可能会问很多问题。

229
00:15:17,460 --> 00:15:21,754
也许你想用其他一些多项式来尝试一下，看看它有多普 

230
00:15:21,754 --> 00:15:26,049
遍，或者你想更深入地研究这些迭代点到底可能有什么 

231
00:15:26,049 --> 00:15:30,000
动力学，或者看看是否与其他一些具有类似的主题。

232
00:15:30,900 --> 00:15:35,880
但我认为最相关的问题应该 是，这里到底发生了什么？

233
00:15:36,400 --> 00:15:40,400
我的意思是，我们在这里所做的就是重复求解线性近似。

234
00:15:40,880 --> 00:15:43,620
为什么会产生如此无限复杂的东西？

235
00:15:44,160 --> 00:15:46,993
几乎感觉这里的基本规则不应该携带 

236
00:15:46,993 --> 00:15:49,660
足够的信息来实际生成这样的图像。

237
00:15:50,180 --> 00:15:54,062
在看到这一点之前，您是否认为合理的初始猜 

238
00:15:54,062 --> 00:15:57,760
测可能是每个种子值只是倾向于最接近的根？

239
00:15:58,320 --> 00:16:01,731
在这种情况下，您知道，如果您根据每个点所在的根对每 

240
00:16:01,731 --> 00:16:05,011
个点进行着色并将其移回原始位置，则最终图像将看起 

241
00:16:05,011 --> 00:16:08,160
来像这些 Voronoi 图之一，具有直线边界。

242
00:16:09,200 --> 00:16:12,482
由于我之前提到了五次方程的不可解性，也 

243
00:16:12,482 --> 00:16:15,600
许您会想知道这里的复杂性是否与此有关。

244
00:16:15,920 --> 00:16:18,680
那会很酷，但它们本质上是不相关的想法。

245
00:16:19,079 --> 00:16:23,360
事实上，到目前为止仅使用 5 次多项式可能有点误导。

246
00:16:24,000 --> 00:16:27,046
看看如果我们玩同样的游戏，但使用三次多项式，并 

247
00:16:27,046 --> 00:16:29,840
且在复平面上的某个位置有三个根，会发生什么。

248
00:16:30,860 --> 00:16:34,213
再次注意，虽然大多数点都位于根部， 

249
00:16:34,213 --> 00:16:37,380
但其中一些点却更加混乱地到处乱飞。

250
00:16:38,040 --> 00:16:41,345
事实上，这些是像这样的动画中最引人注目的， 

251
00:16:41,345 --> 00:16:44,500
那些走向根源的只是静静地坐落在它们的终点。

252
00:16:45,160 --> 00:16:49,853
同样，如果我们在一定次数的迭代中停止此操作，并根据它 

253
00:16:49,853 --> 00:16:54,373
们最接近的根对所有点进行着色，然后回滚时钟，所有可 

254
00:16:54,373 --> 00:16:58,720
能的起点的相关图片就会形成具有无限细节的分形图案。

255
00:17:05,840 --> 00:17:09,380
然而，只有两个根的二次多项式则不同。

256
00:17:09,819 --> 00:17:12,669
在这种情况下，每个种子值确实会倾向 

257
00:17:12,669 --> 00:17:15,359
于最接近的根，正如您所期望的那样。

258
00:17:16,319 --> 00:17:20,104
与每个根的距离相等的所有点都有一点蜿 

259
00:17:20,104 --> 00:17:23,689
蜒的行为，有点像它们无法决定去哪一 

260
00:17:23,689 --> 00:17:27,274
个，但这只是一行点，当我们玩着色游 

261
00:17:27,274 --> 00:17:30,660
戏，我们最终得到的图表显然更无聊。

262
00:17:32,060 --> 00:17:35,017
所以当你从 2 跳到 3 时似乎会发 

263
00:17:35,017 --> 00:17:37,820
生一些新的事情，问题是，到底是什么？

264
00:17:37,820 --> 00:17:41,373
如果你一个月前问我，我可能会耸耸肩，只是说，你知道， 

265
00:17:41,373 --> 00:17:44,927
数学就是这样，有时答案看起来很简单，有时则不然，在某 

266
00:17:44,927 --> 00:17:48,350
种情况下问“为什么”意味着什么并不总是很清楚像这样。

267
00:17:48,350 --> 00:17:51,898
但我错了，实际上我们可以给出一个理由来 

268
00:17:51,898 --> 00:17:55,270
解释为什么这张图片必须看起来如此复杂。

269
00:17:55,930 --> 00:18:00,190
你看，我们可以证明这个图必须具有一个非常奇特的性质。

270
00:18:00,850 --> 00:18:05,567
将你的注意力集中在其中一个彩色区域上，比如这个蓝色区域，换 

271
00:18:05,567 --> 00:18:09,970
句话说，就是最终趋向于多项式的一个特定根的所有点的集合。

272
00:18:10,510 --> 00:18:13,545
现在考虑该区域的边界，对于屏幕上显示的 

273
00:18:13,545 --> 00:18:16,430
示例，该边界具有这种良好的三重对称性。

274
00:18:17,330 --> 00:18:20,635
令人惊讶的是，如果您观察任何其他颜色并 

275
00:18:20,635 --> 00:18:23,610
考虑其边界，您会得到完全相同的集合。

276
00:18:25,450 --> 00:18:29,081
现在，当我说“边界”这个词时，您可能对它的含义有一个直观 

277
00:18:29,081 --> 00:18:32,588
的认识，但是数学家有一种非常聪明的方法来形式化它，这使 

278
00:18:32,588 --> 00:18:35,970
得在像我们的分形这样的更狂野的集合的背景下更容易推理。

279
00:18:36,429 --> 00:18:40,040
如果当你画一个以该点为中心的小圆时，无论 

280
00:18:40,040 --> 00:18:43,651
多小，它总是包含既在该集合内部又在该集合 

281
00:18:43,651 --> 00:18:47,090
外部的点，我们就说该点位于集合的边界上。

282
00:18:47,890 --> 00:18:51,394
因此，如果您有一个位于内部的点，那么一个足够小 

283
00:18:51,394 --> 00:18:54,898
的圆最终将仅包含该集合内的点，而对于外部的一个 

284
00:18:54,898 --> 00:18:58,110
点，一个足够小的圆将根本不包含该集合中的点。

285
00:18:58,610 --> 00:19:01,675
但当它在边界上时，在边界上意味 

286
00:19:01,675 --> 00:19:04,550
着你的微小圆圈将永远包含两者。

287
00:19:05,410 --> 00:19:10,193
因此，回顾我们的属性，一种解读方式是，如果你画一个圆， 

288
00:19:10,193 --> 00:19:14,805
无论这个圆有多小，它要么包含所有颜色，当颜色的共享边 

289
00:19:14,805 --> 00:19:19,588
界位于该圆内部时，就会发生这种情况，或者它只包含一种颜 

290
00:19:19,588 --> 00:19:24,030
色，当它位于其中一个区域的内部时，就会发生这种情况。

291
00:19:27,050 --> 00:19:30,828
特别是，这意味着您永远无法找到仅包含 

292
00:19:30,828 --> 00:19:34,408
两种颜色的圆，因为这需要您在两个区 

293
00:19:34,408 --> 00:19:37,790
域之间的边界上有点，但不是所有点。

294
00:19:38,950 --> 00:19:41,860
在解释这个事实的真正来源之前， 

295
00:19:41,860 --> 00:19:44,590
尝试稍微思考一下它是很有趣的。

296
00:19:44,990 --> 00:19:48,964
你可以想象将其作为一种艺术难题呈现给某人，完全断 

297
00:19:48,964 --> 00:19:52,938
章取义，从不提及牛顿方法或类似的东西，你说挑战是 

298
00:19:52,938 --> 00:19:56,913
用至少三种颜色构建一幅图片，也许我们说红色，绿色 

299
00:19:56,913 --> 00:20:00,570
和蓝色，因此一种颜色的边界就是所有颜色的边界。

300
00:20:00,950 --> 00:20:05,055
所以，如果你从这样简单的事情开始，那显然是行不通的， 

301
00:20:05,055 --> 00:20:09,008
因为我们有一整条线的点位于绿色和红色的边界上，但没 

302
00:20:09,008 --> 00:20:12,810
有触及任何蓝色，同样，你还有这些其他不允许的线点。

303
00:20:13,630 --> 00:20:17,596
因此，为了纠正这个问题，您可以沿着边界添加一些蓝色斑点 

304
00:20:17,596 --> 00:20:21,420
，然后同样在红色和蓝色之间添加一些绿色斑点，在绿色和 

305
00:20:21,420 --> 00:20:25,387
蓝色之间添加一些红色斑点，但是当然，现在是这些斑点的边 

306
00:20:25,387 --> 00:20:29,070
界是一个问题，例如，仅触摸蓝色和红色，但不触摸绿色。

307
00:20:29,629 --> 00:20:33,068
因此，也许您可以尝试添加更小的斑点，并在这些较小 

308
00:20:33,068 --> 00:20:36,370
的边界周围添加相关的第三种颜色，以帮助尝试纠正。

309
00:20:37,310 --> 00:20:41,170
同样，您必须对最初添加的每个斑点执行此操作。

310
00:20:44,450 --> 00:20:48,132
但这些小斑点的所有边界都是它们自己的问 

311
00:20:48,132 --> 00:20:51,630
题，你必须以某种方式永远继续这个过程。

312
00:20:53,570 --> 00:20:57,540
如果你看看牛顿分形本身，这种斑点叠 

313
00:20:57,540 --> 00:21:01,290
斑点的模式似乎正是它正在做的事情。

314
00:21:06,550 --> 00:21:10,563
我想让您注意的主要事情是，这个属性意味着您永远 

315
00:21:10,563 --> 00:21:14,410
不可能拥有平滑的边界，甚至在某些小段上部分平 

316
00:21:14,410 --> 00:21:18,090
滑的边界，因为任何平滑的段只会接触两种颜色。

317
00:21:18,790 --> 00:21:23,150
相反，可以说，边界必须完全由尖角组成。

318
00:21:23,810 --> 00:21:26,753
因此，如果您相信这个性质，它就解释了为 

319
00:21:26,753 --> 00:21:29,550
什么无论您放大多远，边界仍然是粗糙的。

320
00:21:30,170 --> 00:21:34,091
对于那些熟悉分形维数概念的人来说，您可以测量我现 

321
00:21:34,091 --> 00:21:38,170
在向您展示的特定边界的维数，该维数约为 1。44. 

322
00:21:39,890 --> 00:21:43,535
考虑到我们的颜色实际上代表什么，记住这不仅仅是 

323
00:21:43,535 --> 00:21:47,030
为了图片而图片，想想这个属性真正告诉我们什么。

324
00:21:48,310 --> 00:21:52,643
它表示，如果您靠近一个敏感点，其中一些种子值进入 

325
00:21:52,643 --> 00:21:56,803
一个根，但附近的其他种子值将进入另一个根，那么 

326
00:21:56,803 --> 00:22:00,790
实际上每个可能的根都必须可以从该小邻域内访问。

327
00:22:01,530 --> 00:22:05,578
对于你画的任何一个小圆圈，要么该圆圈中的所有点 

328
00:22:05,578 --> 00:22:09,458
都趋向于一个根，要么它们趋向于所有根，但两者 

329
00:22:09,458 --> 00:22:13,170
之间永远不会有任何东西，只是趋向于根的子集。

330
00:22:14,050 --> 00:22:17,102
出于一点直觉，我发现简单地观察像屏幕上 

331
00:22:17,102 --> 00:22:19,850
的集群那样经历这一过程是很有启发的。

332
00:22:20,430 --> 00:22:25,485
一开始它大多粘在一起，但在一次迭代中它们都会向 

333
00:22:25,485 --> 00:22:30,330
外爆炸，之后感觉任何根都可以被抓住就更合理了。

334
00:22:31,370 --> 00:22:36,008
请记住，我只是向您展示有限多个点，但原则上您会想要 

335
00:22:36,008 --> 00:22:40,290
考虑某个小圆盘内所有不可数无限多个点会发生什么。

336
00:22:44,610 --> 00:22:48,603
这个属性也解释了为什么在只有两个根的二次多项 

337
00:22:48,603 --> 00:22:52,423
式的情况下事情看起来正常是可以的，因为平滑 

338
00:22:52,423 --> 00:22:56,070
的边界很好，无论如何只有两种颜色可以接触。

339
00:22:56,830 --> 00:23:00,928
需要明确的是，它并不能保证二次情况有一个平滑的 

340
00:23:00,928 --> 00:23:04,855
边界，两种颜色之间完全有可能有一个分形边界， 

341
00:23:04,855 --> 00:23:08,953
它只是看起来我们的牛顿方法图没有做任何比它需要 

342
00:23:08,953 --> 00:23:12,710
的更复杂的事情在这种奇怪的边界条件的约束下。

343
00:23:13,850 --> 00:23:17,129
但当然，所有这一切都只是提出了一个问题：为 

344
00:23:17,129 --> 00:23:20,110
什么这种奇怪的边界属性首先必须是真实的。

345
00:23:20,410 --> 00:23:21,510
它来自哪里？

346
00:23:22,450 --> 00:23:25,192
为此，我想向您介绍一个研究此类问题 

347
00:23:25,192 --> 00:23:27,630
的数学领域，它被称为全纯动力学。

348
00:23:28,410 --> 00:23:31,434
我认为我们今天已经涵盖了足够的内容，并且肯定还有足够的 

349
00:23:31,434 --> 00:23:34,350
内容可以讲述，因此将其作为单独的视频拿出来是有意义的。

350
00:23:35,010 --> 00:23:38,491
结束语，对我来说，我们称之为牛顿分 

351
00:23:38,491 --> 00:23:41,973
形这一事实有点有趣，尽管牛顿对此一 

352
00:23:41,973 --> 00:23:46,809
无所知，而且永远不可能像你和你那样 处理这些图像。

353
00:23:46,809 --> 00:23:48,550
我可以用现代技术。

354
00:23:49,050 --> 00:23:51,781
通过数学，人们的名字与事物的联系远远 

355
00:23:51,781 --> 00:23:54,370
超出了他们的梦想，这种情况经常发生。

356
00:23:54,810 --> 00:23:57,194
尽管汉密尔顿对量子力学一无所知 

357
00:23:57,194 --> 00:23:59,430
，但哈密顿量是量子力学的核心。

358
00:24:00,010 --> 00:24:04,690
傅里叶本人从未计算过快速傅里叶变换，这样的例子不胜枚举。

359
00:24:04,690 --> 00:24:09,950
但这种术语的过度扩展带来了我认为鼓舞人心的观点。

360
00:24:10,530 --> 00:24:14,207
它反映了即使是几个世纪前就可以发现的 

361
00:24:14,207 --> 00:24:17,885
简单想法，也常常包含一些新的角度或新 

362
00:24:17,885 --> 00:24:21,370
的相关领域，可以等待数百年后被发现。

363
00:24:21,910 --> 00:24:25,150
牛顿不仅仅是不知道牛顿分形。

364
00:24:25,330 --> 00:24:29,866
关于牛顿方法，或者关于各种数学，可能还有许多其他事实，这 

365
00:24:29,866 --> 00:24:34,246
些事实可能看起来像旧新闻，它们来自还没有人想到要问的问 

366
00:24:34,246 --> 00:24:38,470
题，这些问题只是坐在那里，等待像你这样的人，去问他们。

367
00:24:42,870 --> 00:24:46,668
例如，如果你问我们今天讨论的这个过程是否会陷 

368
00:24:46,668 --> 00:24:50,301
入循环，它会让你与曼德尔布罗特集产生令人惊 

369
00:24:50,301 --> 00:24:53,770
讶的联系，我们将在下一篇中讨论这一点部分。

370
00:24:55,030 --> 00:24:57,173
顺便说一句，在我发布此内容时，第 

371
00:24:57,173 --> 00:24:59,190
二部分已作为早期版本提供给顾客。

372
00:24:59,590 --> 00:25:03,470
我总是喜欢给新内容一点时 间来收集反馈并发现错误。

373
00:25:03,950 --> 00:25:05,610
最终版本应该很快就会发布。

374
00:25:06,470 --> 00:25:08,458
说到赞助人的话题，我只想对屏幕上 

375
00:25:08,458 --> 00:25:10,330
名字出现的每个人表示快速的感谢。

376
00:25:10,750 --> 00:25:13,970
我知道在最近的历史中，新视频的发布速度有点慢。

377
00:25:14,410 --> 00:25:16,750
部分原因与正在进行的其他项目有关。

378
00:25:17,230 --> 00:25:21,124
顺便说一句，我感到自豪的事情，比如夏季数学博览会， 

379
00:25:21,124 --> 00:25:24,870
说实话，工作量令人惊讶，但考虑到结果，这是值得的。

380
00:25:25,110 --> 00:25:29,030
我将很快讨论所有这些并宣布获奖者，所以请继续关注。

381
00:25:29,450 --> 00:25:33,233
我只是想让你知道，在可预见的未来，我的计划肯定是 

382
00:25:33,233 --> 00:25:37,017
更全心全意地回归制作新视频，最重要的是我想说的是 

383
00:25:37,017 --> 00:25:40,650
感谢你的持续支持，即使是在尝试一些新事物的时候。

384
00:25:40,910 --> 00:25:44,172
这对我来说意义重大，它是让频道继续运转的动力，我将 

385
00:25:44,172 --> 00:25:47,310
尽我所能，让正在酝酿中的新课程不辜负你们的信任票。

