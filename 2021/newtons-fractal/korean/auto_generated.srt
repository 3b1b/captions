1
00:00:00,000 --> 00:00:05,640
제목을 보셨으므로 이것이 특정 프랙탈로 이어진다는 것을 알 수 있습니다.

2
00:00:05,640 --> 00:00:08,120
그리고 실제로 그것은 무한한 프랙탈 계열입니다.

3
00:00:08,120 --> 00:00:14,800
그리고 네, 아무리 확대해도 무한한 디테일을 지닌 놀라울 정도로 복잡한 모양 중 하나가 될 것입니다.

4
00:00:14,800 --> 00:00:18,880
하지만 이것은 실제로 우리가 구경할 만한 예쁜 그림을 생성하는 비디오가 아닙니다.

5
00:00:18,880 --> 00:00:26,540
글쎄, 어쩌면 그게 그것의 일부일지도 모르지만, 여기의 실제 이야기는 다른 많은 프랙탈 뒤에 숨겨진 이야기보다 훨씬 더 실용적인 출발점을 가지고 있습니다.

6
00:00:26,540 --> 00:00:36,972
그리고 무엇보다도, 우리가 표현하는 내용을 고려할 때 왜 그렇게 복잡해 보여야 하는지, 그리고 이 복잡성이 무엇을 반영하는지

7
00:00:36,972 --> 00:00:48,300
이해하려고 노력한다면 우리가 얻게 되는 최종 이미지는 훨씬 더 의미 있게 될 것입니다. 엔지니어링 전반에 걸쳐 사용되는 알고리즘입니다.

8
00:00:48,300 --> 00:00:54,180
여기서 출발점은 일종의 다항식이 있고 그것이 0과 같을 때를 알고 싶다고 가정하는 것입니다.

9
00:00:54,180 --> 00:01:01,980
여기 있는 한 그래프의 경우 x축과 교차하는 세 개의 서로 다른 위치가 있음을 시각적으로 볼 수 있으며 해당 값이 무엇인지 눈으로 확인할 수 있습니다.

10
00:01:01,980 --> 00:01:04,380
우리는 이것을 다항식의 근이라고 부릅니다.

11
00:01:04,380 --> 00:01:06,620
하지만 실제로 정확히 어떻게 계산합니까?

12
00:01:06,620 --> 00:01:13,080
이제 이것은 당신이 이미 수학에 빠져 있다면 수학 자체가 앞으로 나아갈 만큼 충분히 흥미로울 수도 있는 종류의 질문입니다.

13
00:01:13,080 --> 00:01:18,960
하지만 길거리에 있는 누군가를 옆으로 불러내어 이렇게 묻는다면, 내 말은, 그 사람은 이미 잠들어 있다는 뜻입니다. 누가 신경 쓰겠습니까?

14
00:01:18,960 --> 00:01:22,900
하지만 문제는 이런 종류의 질문이 공학계에서 항상 나온다는 것입니다.

15
00:01:22,900 --> 00:01:30,420
개인적으로 이런 방정식이 나타나는 데 가장 익숙한 곳은 다항식이 여기저기 흩어져 있는 컴퓨터 그래픽 설정입니다.

16
00:01:30,420 --> 00:01:39,640
따라서 주어진 픽셀이 어떻게 색칠되어야 하는지 알아낼 때 어떻게든 이러한 다항식을 사용하는 방정식을 푸는 것이 포함되는 것은 드문 일이 아닙니다.

17
00:01:39,640 --> 00:01:41,320
여기서 재미있는 예를 하나 들어보겠습니다.

18
00:01:41,320 --> 00:01:47,160
컴퓨터가 화면에 텍스트를 렌더링할 때 해당 글꼴은 일반적으로 픽셀 값을 사용하여 정의되지 않습니다.

19
00:01:47,160 --> 00:01:53,500
이는 업계에서 베지어 곡선으로 알려진 다항식 곡선의 묶음으로 정의됩니다.

20
00:01:53,500 --> 00:02:00,520
그리고 일부 디자인 소프트웨어에서 벡터 그래픽을 사용해 본 적이 있는 분들이라면 이러한 종류의 곡선에 대해 잘 알고 계실 것입니다.

21
00:02:00,520 --> 00:02:08,400
그러나 실제로 그 중 하나를 화면에 표시하려면 화면의 각 픽셀에 색상을 지정해야 하는지 여부를 알려주는 방법이 필요합니다.

22
00:02:08,400 --> 00:02:15,420
이러한 곡선은 일종의 획 너비로 표시될 수 있으며, 영역을 둘러싸는 경우 해당 영역에 대한 일종의 채우기로 표시될 수 있습니다.

23
00:02:15,420 --> 00:02:25,100
하지만 한발 물러서서 곰곰이 생각해보면, 순수한 수학적 곡선을 바탕으로 각 픽셀이 색칠되어야 하는지 아닌지를 어떻게 아는지 알아내는 것은 흥미로운 퍼즐입니다.

24
00:02:25,100 --> 00:02:27,480
내 말은, 획 너비의 경우를 생각해 보겠습니다.

25
00:02:27,480 --> 00:02:36,780
이는 주어진 픽셀이 이 순수한 수학적 곡선에서 얼마나 멀리 떨어져 있는지 이해하는 것으로 귀결됩니다. 이 곡선 자체는 일종의 플라톤적 이상이며 너비가 0입니다.

26
00:02:36,780 --> 00:02:41,120
매개변수 t가 있는 매개변수 곡선으로 생각하면 됩니다.

27
00:02:41,120 --> 00:02:48,940
이제 이 거리를 알아내기 위해 할 수 있는 한 가지는 픽셀과 해당 곡선의 여러 샘플 포인트 사이의 거리를 계산한 다음 가장 작은 것을 알아내는 것입니다.

28
00:02:48,940 --> 00:02:52,620
그러나 그것은 비효율적이고 부정확합니다.

29
00:02:52,620 --> 00:03:01,440
더 나은 방법은 약간의 수학적 계산을 통해 가능한 모든 지점에서 곡선까지의 거리 자체가 매개변수의 부드러운 함수임을 인정하는 것입니다.

30
00:03:01,440 --> 00:03:07,960
그리고 공교롭게도 그 거리의 제곱은 그 자체로 다항식이므로 다루기가 꽤 좋습니다.

31
00:03:07,960 --> 00:03:14,949
그리고 이것이 벡터 그래픽 렌더링에 대한 완전한 강의라면 우리는 모든 것을 확장하고 혼란을 수용할 수 있습니다. 그러나 지금

32
00:03:14,949 --> 00:03:21,840
제가 강조하고 싶은 유일한 두드러진 점은 원칙적으로 이 함수는 최소한의 기능을 원한다는 것입니다. 아는 것은 다항식입니다.

33
00:03:21,840 --> 00:03:29,420
이 최소값을 찾아 픽셀이 곡선에 얼마나 가까운지, 채워야 하는지 여부를 결정하는 것은 이제 고전적인 미적분 문제에 불과합니다.

34
00:03:29,420 --> 00:03:39,400
당신이 하는 일은 이 함수 그래프의 기울기, 즉 도함수, 즉 다항식을 알아내는 것입니다. 그리고 언제 그것이 0이 되는지 묻습니다.

35
00:03:39,400 --> 00:03:45,167
따라서 실제로 곡선을 표시하는 간단해 보이는 이 작업을 수행하려면 주어진 다항식이

36
00:03:45,167 --> 00:03:51,060
0이 되는 시점을 알아낼 수 있는 체계적이고 일반적인 방법이 있다면 좋지 않을까요?

37
00:03:51,060 --> 00:03:58,682
물론 우리는 100개의 다른 분야에서 100개의 다른 예를 그릴 수 있습니다. 우리가 다항식의 근을 찾을 때 비록 우리가 항상 모든

38
00:03:58,682 --> 00:04:06,820
실수의 지저분함에서 벗어나 깔끔하게 추상된 방식으로 표시하더라도 명심하시기 바랍니다. 세계 문제, 그 과제는 결코 학문적인 과제가 아닙니다.

39
00:04:06,820 --> 00:04:12,380
하지만 다시 스스로에게 물어보세요. 실제로 그 근 중 하나를 어떻게 계산합니까?

40
00:04:12,380 --> 00:04:20,260
당신이 풀고 있는 어떤 문제가 당신을 이차 함수로 이끌어준다면, 행복한 하루 되세요. 우리 모두가 알고 사랑하는 이차 공식을 사용할 수 있습니다.

41
00:04:20,260 --> 00:04:27,579
컴퓨터 그래픽의 뿌리 찾기와 관련된 재미있는 참고 사항으로, Pixar 엔지니어에게 영화 Coco의 일부

42
00:04:27,579 --> 00:04:35,147
장면에서 사용된 조명의 수를 고려하고 이러한 일부 특성을 고려하여 추정치를 제시한 적이 있습니다. 구와 같이

43
00:04:35,147 --> 00:04:42,840
다항식으로 정의된 것이 포함된 픽셀당 계산에서는 이차 공식이 해당 영화 제작에서 수조 번 쉽게 사용되었습니다.

44
00:04:42,840 --> 00:04:48,200
이제 문제가 고차 다항식으로 이어지면 상황이 더욱 까다로워지기 시작합니다.

45
00:04:48,200 --> 00:04:55,974
3차 다항식의 경우 Mathologer가 멋진 비디오를 제작한 공식도 있습니다. 심지어 4차 다항식을 푸는 4차

46
00:04:55,974 --> 00:05:04,120
공식도 있습니다. 솔직히 말해서 그 공식은 본질적으로 아무 문제도 없는 끔찍한 악몽입니다. 실제로 실제로 사용합니다.

47
00:05:04,120 --> 00:05:14,240
하지만 그 후에는 이것이 모든 수학에서 가장 흥미로운 결과 중 하나라고 생각합니다. 5차 이상의 다항식을 풀기 위한 유사한 공식을 가질 수는 없습니다.

48
00:05:14,240 --> 00:05:20,829
더 구체적으로 말하면, 매우 광범위한 표준 함수 세트의 경우, 5차 다항식의 계수를 연결하고

49
00:05:20,829 --> 00:05:27,800
항상 근을 구할 수 있도록 이러한 함수를 결합할 수 있는 방법이 없다는 것을 증명할 수 있습니다.

50
00:05:27,800 --> 00:05:35,510
이것은 완전히 다른 웜 캔인 5분류의 해결 불가능성으로 알려져 있습니다. 나중에 이 문제에 대해 알아볼 수 있기를 바랍니다. 그러나 실제로는 중요하지

51
00:05:35,510 --> 00:05:43,220
않습니다. 왜냐하면 우리는 이러한 종류의 솔루션을 근사화하는 알고리즘을 가지고 있기 때문입니다. 원하는 수준의 정밀도로 방정식을 계산할 수 있습니다.

52
00:05:43,220 --> 00:05:47,700
오늘 여러분과 저에게 공통적이고 주요 주제는 뉴턴의 방법입니다.

53
00:05:47,700 --> 00:05:55,660
그리고 그렇습니다. 이것이 우리를 프랙탈로 이끄는 것입니다. 하지만 처음에는 전체 절차가 얼마나 순진하고 온화해 보이는지 주목해 보시기 바랍니다.

54
00:05:55,660 --> 00:05:59,700
알고리즘은 무작위 추측으로 시작합니다. 이를 x0이라고 하겠습니다.

55
00:05:59,700 --> 00:06:08,060
거의 확실하게 x0에서의 다항식의 출력은 0이 아니므로 솔루션을 찾지 못했습니다. 해당 지점에서 이 그래프의 높이로 표시되는 다른 값입니다.

56
00:06:08,060 --> 00:06:16,100
따라서 추측을 개선하기 위해 아이디어는 해당 값 주변의 함수에 대한 선형 근사가 언제 0이 되는지 묻는 것입니다.

57
00:06:16,100 --> 00:06:23,500
즉, 이 시점에서 그래프에 접선을 그리면 그 접선은 언제 x축과 교차합니까?

58
00:06:23,500 --> 00:06:33,980
이제 이 접선이 실제 근의 느슨한 부근에 있는 함수의 적절한 근사라고 가정하면, 이 근사가 0과 같은 곳이 실제 근에 더 가까워질 것입니다.

59
00:06:33,980 --> 00:06:42,140
이 함수의 도함수를 얻을 수 있고 다항식을 사용하여 항상 그렇게 할 수 있는 한 이 선의 기울기를 구체적으로 계산할 수 있습니다.

60
00:06:42,140 --> 00:06:48,700
활성 시청자가 잠시 멈춰서 현재 추측과 개선된 추측 간의 차이를 어떻게 파악하는지 묻고 싶을 수 있습니다.

61
00:06:48,700 --> 00:06:51,300
이 단계의 규모는 얼마입니까?

62
00:06:51,300 --> 00:06:59,940
이를 생각하는 한 가지 방법은 이 접선의 기울기, 즉 상승에 대한 상승이 이 그래프의 높이를 해당 계단의 길이로 나눈 것과 같다는 사실을 고려하는 것입니다.

63
00:06:59,940 --> 00:07:05,300
그러나 반면에 접선의 기울기는 해당 점에서의 다항식의 도함수입니다.

64
00:07:05,300 --> 00:07:11,660
여기서 이 방정식을 다시 정리하면 해당 단계 크기를 계산할 수 있는 매우 구체적인 방법이 제공됩니다.

65
00:07:11,660 --> 00:07:18,820
따라서 x1이라고 부를 수 있는 다음 추측은 이 단계 크기로 조정된 이전 추측입니다.

66
00:07:18,820 --> 00:07:21,500
그 후에는 이 과정을 반복하면 됩니다.

67
00:07:21,500 --> 00:07:32,880
새로운 선형 근사치를 제공하는 이 새로운 추측에서 이 함수의 값과 기울기를 계산한 후 해당 접선이 x축과 교차하는 곳마다 다음 추측인 x2를 만듭니다.

68
00:07:32,880 --> 00:07:36,520
그런 다음 동일한 계산을 x2에 적용하면 x3이 됩니다.

69
00:07:36,520 --> 00:07:45,120
그리고 머지않아 당신은 진정한 뿌리에 극도로 가까워지고, 당신이 원하는 만큼 가까워지는 자신을 발견하게 됩니다.

70
00:07:45,120 --> 00:07:50,040
공식이 실제로 의미가 있는지 직감적으로 확인하는 것은 항상 가치가 있으며, 이 경우에는 그럴 수 있기를 바랍니다.

71
00:07:50,040 --> 00:07:56,260
x의 p가 크다면, 즉 그래프가 매우 높다는 의미이며, 루트에 도달하려면 더 큰 단계를 거쳐야 합니다.

72
00:07:56,260 --> 00:08:03,780
그러나 x의 p&#39;도 크다면, 즉 그래프가 매우 가파르다는 것을 의미하므로, 그 단계를 얼마나 크게 만드는지에 대해 완화해야 할 것입니다.

73
00:08:03,780 --> 00:08:09,440
이름에서 알 수 있듯이 이것은 뉴턴이 다항식을 풀기 위해 사용한 방법이었습니다.

74
00:08:09,440 --> 00:08:16,090
하지만 그는 필요한 것보다 훨씬 더 복잡해 보이도록 만들었고 Joseph Rafson이라는 사람이 지금 여러분과 제가 보고 있는

75
00:08:16,090 --> 00:08:22,740
것과 더 유사한 훨씬 간단한 버전을 출판했습니다. 그래서 여러분은 또한 뉴턴이라는 알고리즘을 자주 듣게 됩니다. -라프슨 방식.

76
00:08:22,740 --> 00:08:25,460
요즘 미적분학 수업에서 자주 나오는 주제입니다.

77
00:08:25,460 --> 00:08:33,380
그런데 그것에 대한 느낌을 얻기 위한 좋은 작은 연습 중 하나는 이 방법을 사용하여 손으로 제곱근을 근사화하는 것입니다.

78
00:08:33,380 --> 00:08:39,189
그러나 불행하게도 대부분의 미적분학 학생들이 보지 못하는 것은 겉으로 보기에 간단해 보이는

79
00:08:39,189 --> 00:08:45,340
이 절차를 가지고 놀면서 딱지 중 일부를 따기 시작할 때 상황이 얼마나 깊어질 수 있는지입니다.

80
00:08:45,340 --> 00:08:50,622
알다시피, 뉴턴의 방법은 매우 빠르게 수렴하는 근 근처에서 시작하면 훌륭하게 작동하지만,

81
00:08:50,622 --> 00:08:55,060
초기 추측이 근에서 멀리 떨어져 있으면 몇 가지 약점이 있을 수 있습니다.

82
00:08:55,060 --> 00:09:02,340
예를 들어 방금 보고 있던 함수를 위쪽으로 이동하고 동일한 초기 추측으로 동일한 게임을 플레이해 보겠습니다.

83
00:09:02,340 --> 00:09:15,540
우리가 x축 위에 있는 이 함수의 로컬 최소값 주위에서 어떻게 바운스되는지에 대한 새로운 추측의 시퀀스에 주목하세요.

84
00:09:15,540 --> 00:09:23,594
이것은 일종의 의미가 있습니다. 오른쪽 끝까지 이 값 주위의 함수에 대한 선형 근사치는 왼쪽에 있는 하나의 실제 근

85
00:09:23,594 --> 00:09:32,020
주위의 함수의 특성과 거의 전혀 관련이 없다는 것을 의미합니다. 그 진정한 뿌리에 대한 유용한 정보를 제공하지 않습니다.

86
00:09:32,020 --> 00:09:42,900
이 과정이 우연히 새로운 추측을 충분히 왼쪽으로 던져버릴 때만 새로운 추측의 순서가 생산적인 작업을 수행하고 실제로 실제 루트에 접근합니다.

87
00:09:42,900 --> 00:09:48,640
특히 흥미로운 점은 복소 평면에서 뿌리를 찾는 것에 대해 묻는 경우입니다.

88
00:09:48,640 --> 00:09:54,215
여기에 표시된 것과 같은 다항식에 단 하나의 실수 근만 있는 경우에도 이러한 근이 잠재적으로

89
00:09:54,215 --> 00:10:00,220
복소수가 될 수 있도록 허용하면 항상 이 다항식을 이와 같은 5개의 항으로 인수분해할 수 있습니다.

90
00:10:00,220 --> 00:10:02,500
이것이 대수학의 유명한 기본 정리이다.

91
00:10:02,500 --> 00:10:09,252
이제 입력과 출력 사이의 연관성을 그래프로 그릴 수 있는 실수 입력과 실수 출력이 있는 행복한

92
00:10:09,252 --> 00:10:16,260
함수의 세계에서 뉴턴의 방법은 접선과 x를 교차하는 매우 멋진 시각적 의미를 갖습니다. -중심선.

93
00:10:16,260 --> 00:10:26,660
그러나 이러한 입력을 복소수로 허용하려는 경우(해당 출력도 복소수일 수 있음을 의미) 더 이상 접선과 그래프를 생각할 수 없습니다.

94
00:10:26,660 --> 00:10:29,420
그러나 공식은 시각화 방법에 크게 영향을 주지 않습니다.

95
00:10:29,420 --> 00:10:35,400
무작위 추측으로 시작하여 이 시점의 다항식과 그 도함수를 평가한 다음 이 업데이트

96
00:10:35,400 --> 00:10:41,380
규칙을 사용하여 새로운 추측을 생성하는 동일한 게임을 계속 플레이할 수 있습니다.

97
00:10:41,380 --> 00:10:45,680
그리고 그 새로운 추측이 실제 뿌리에 더 가깝기를 바랍니다.

98
00:10:45,680 --> 00:10:51,700
그러나 저는 이러한 단계를 접선으로 시각화할 수 없더라도 실제로는 동일한 논리라는 점을 분명히 하고 싶습니다.

99
00:10:51,700 --> 00:11:01,940
우리는 귀하의 추측에 대한 함수의 선형 근사치가 0이 되는 위치를 파악하고 있으며, 선형 근사치의 0을 다음 추측으로 사용합니다.

100
00:11:01,940 --> 00:11:06,740
규칙이 작동할 것이라고 기대할 이유 없이 새로운 컨텍스트에 규칙을 맹목적으로 적용하는 것과는 다릅니다.

101
00:11:06,740 --> 00:11:16,380
그리고 실제로 몇 번의 반복을 거친 후 여기에 표시된 최소한의 결과를 통해 해당 출력이 기본적으로 0인 값에 도달했음을 알 수 있습니다.

102
00:11:16,380 --> 00:11:17,380
이제 재미있는 부분이 있습니다.

103
00:11:17,380 --> 00:11:21,260
이 아이디어를 다양한 초기 추측에 적용해 보겠습니다.

104
00:11:21,260 --> 00:11:27,580
참고로, 나는 이 특정 다항식의 5개의 실제근을 복소평면에 올려 놓을 것입니다.

105
00:11:27,580 --> 00:11:32,960
반복할 때마다 작은 점 하나 하나가 뉴턴의 방법을 기반으로 몇 가지 단계를 수행합니다.

106
00:11:32,960 --> 00:11:41,160
대부분의 점은 빠르게 5개의 실제 뿌리 중 하나로 수렴되지만, 이리저리 튀는 데 시간이 걸리는 것처럼 보이는 눈에 띄는 낙오자가 있습니다.

107
00:11:41,160 --> 00:11:45,720
특히 양의 실수선에 갇힌 것들이 어떻게 나타나는지 주목하세요.

108
00:11:45,720 --> 00:11:56,800
그것들은 약간 길을 잃은 것처럼 보입니다. 그리고 이것은 우리가 그래프로 실수의 경우를 볼 때 동일한 다항식에 대해 이미 본 것과 정확히 같습니다.

109
00:11:56,800 --> 00:12:03,002
이제 제가 할 일은 5개의 뿌리 중 어느 뿌리에 가장 가까운지에 따라 각 점에 색을

110
00:12:03,002 --> 00:12:09,600
칠하는 것입니다. 그런 다음 모든 점이 시작된 곳으로 돌아가도록 시계를 되돌릴 것입니다.

111
00:12:09,600 --> 00:12:16,428
이제 여기서 수행한 대로 전체 내용을 파악하기에는 해상도가 충분하지 않습니다. 따라서 더 미세한 초기 추측 그리드로 시작하여

112
00:12:16,428 --> 00:12:23,061
동일한 게임을 실행하고 적용하면 어떤 모습일지 보여드리겠습니다. 뉴턴의 방법은 여러 번 반복되었습니다. 각 뿌리가 앞으로

113
00:12:23,061 --> 00:12:29,500
나아가도록 하고, 뿌리가 있는 뿌리에 따라 각 점에 색칠을 한 다음, 시계를 되돌려 원래 어디에서 왔는지 확인합니다.

114
00:12:29,500 --> 00:12:33,440
그러나 이것조차도 패턴을 감상할 만큼 충분한 해상도는 아닙니다.

115
00:12:33,440 --> 00:12:40,560
평면의 모든 단일 픽셀에 대해 이 프로세스를 수행하면 다음과 같은 결과를 얻을 수 있습니다.

116
00:12:40,560 --> 00:12:46,460
그리고 이 수준의 디테일에서는 색 구성표가 적어도 내 눈에는 약간 거슬리므로 조금 진정시키겠습니다.

117
00:12:46,460 --> 00:12:51,212
여기에서 이것을 보여주기 위해 제가 사용하려고 하는 해상도가 무엇이든 결코 충분하지 않을

118
00:12:51,212 --> 00:12:56,060
것입니다. 왜냐하면 우리가 얻는 모양의 더 미세한 세부 사항은 끝없이 복잡하기 때문입니다.

119
00:12:56,060 --> 00:13:05,220
그러나 이것이 실제로 무엇을 말하는지 잠시 생각해 보십시오.

120
00:13:05,220 --> 00:13:11,711
이는 복잡한 평면에 해당 시드 값을 약간 조정하면 110만분의 1 또는 1조 1천분의 1만큼 옆으로 치우면

121
00:13:11,711 --> 00:13:18,420
5개 중 어느 것이 완전히 바뀔 수 있는 영역이 있다는 것을 의미합니다. 진정한 뿌리는 결국 착륙하게 됩니다.

122
00:13:18,420 --> 00:13:27,740
우리는 앞서 보여드린 실제 그래프와 문제가 있는 추측을 통해 이런 종류의 혼돈에 대한 전조를 보았지만, 이 모든 것을 복잡한 평면에 그려보면 이러한 종류의 근

123
00:13:27,740 --> 00:13:37,060
찾기 알고리즘이 얼마나 예측 불가능할 수 있는지, 그리고 어떻게 존재하는지 알 수 있습니다. 이런 종류의 예측 불가능성이 발생하는 초기 값의 전체 범위입니다.

124
00:13:37,060 --> 00:13:45,640
이제 이러한 근 중 하나를 잡고 이를 변경하면(즉, 프로세스에 대해 다른 다항식을 사용한다는 의미) 결과 프랙탈 패턴이 어떻게 변경되는지 확인할 수 있습니다.

125
00:13:45,640 --> 00:13:52,099
예를 들어 주어진 근 주변 영역이 항상 동일한 색상을 갖는 방법에 주목하세요. 왜냐하면 이 선형

126
00:13:52,099 --> 00:13:58,320
근사 방식이 문제 없이 근을 찾는 방법으로 작동하는 근에 충분히 가까운 지점이기 때문입니다.

127
00:13:58,320 --> 00:14:02,760
모든 혼란은 지역 간의 경계에서 일어나는 것 같습니다.

128
00:14:02,760 --> 00:14:03,760
기억.

129
00:14:03,760 --> 00:14:08,640
그리고 이 뿌리를 어디에 두든 프랙탈 경계는 항상 거기에 있는 것 같습니다.

130
00:14:08,640 --> 00:14:16,840
이것은 분명히 우리가 처음 시작했던 다항식에 대한 일회성 문제가 아니라 주어진 다항식에 대한 일반적인 사실인 것 같습니다.

131
00:14:16,840 --> 00:14:23,040
무슨 일이 일어나고 있는지 더 잘 설명하기 위해 여기에서 조정할 수 있는 또 다른 측면은 우리가 사용하는 뉴턴 방법의 단계 수입니다.

132
00:14:23,040 --> 00:14:27,692
예를 들어, 컴퓨터가 아무런 단계도 거치지 않도록 했다면, 즉 이미 가장 가까운 루트를

133
00:14:27,692 --> 00:14:31,680
기준으로 평면의 각 점에 색을 칠한다면 이것이 우리가 얻게 될 결과입니다.

134
00:14:31,680 --> 00:14:36,220
그리고 이런 종류의 다이어그램에는 실제로 보로노이 다이어그램(Voronoi Diagram)이라는 특별한 이름이 있습니다.

135
00:14:36,220 --> 00:14:47,560
그리고 평면의 각 점에 뉴턴 방법의 단일 단계를 적용하고 그 단일 단계 결과가 가장 가까운 근에 따라 색상을 지정하면 다음과 같은 결과를 얻을 수 있습니다.

136
00:14:47,560 --> 00:15:01,400
마찬가지로, 두 단계를 허용하면 약간 더 복잡한 패턴을 얻게 되며, 더 많은 단계를 허용할수록 이미지가 더 복잡해지고 원래 프랙탈에 더 가까워집니다.

137
00:15:01,400 --> 00:15:14,560
그리고 이것이 중요합니다. 여기서 연구하고 있는 실제 모양은 이들 중 어느 것도 아니며 임의로 많은 반복을 허용하는 한계라는 점을 명심하십시오.

138
00:15:14,560 --> 00:15:17,840
이 시점에서 우리가 물어볼 질문이 너무 많습니다.

139
00:15:17,840 --> 00:15:24,502
아마도 다른 다항식을 사용하여 이것을 시험해 보고 싶거나, 그것이 얼마나 일반적인지 확인하고 싶을 수도 있고, 이러한 반복된 점으로 정확히

140
00:15:24,502 --> 00:15:31,080
어떤 동역학이 가능한지 더 깊이 파고들거나, 다음과 같은 다른 수학 조각과의 연관성이 있는지 확인하고 싶을 수도 있습니다. 비슷한 테마.

141
00:15:31,080 --> 00:15:36,320
하지만 내 생각에 가장 적절한 질문은 &#39;여기서 도대체 무슨 일이 벌어지고 있는 거지?&#39;와 같은 것이어야 한다고 생각합니다.

142
00:15:36,320 --> 00:15:40,960
내 말은, 우리가 여기서 하는 일은 반복적으로 선형 근사치를 푸는 것뿐입니다.

143
00:15:40,960 --> 00:15:44,280
왜 그렇게 끝없이 복잡한 것을 생산하겠습니까?

144
00:15:44,280 --> 00:15:50,580
여기의 기본 규칙은 실제로 이와 같은 이미지를 생성하는 데 충분한 정보를 전달해서는 안 되는 것처럼 느껴집니다.

145
00:15:50,580 --> 00:15:58,440
그리고 이것을 보기 전에, 합리적인 초기 추측은 각 시드 값이 가장 가까운 루트를 향하는 경향이 있다는 것이었을 것이라고 생각하지 않습니까?

146
00:15:58,440 --> 00:16:03,977
그리고 이 경우 각 점의 뿌리를 기준으로 색상을 지정하고 원래 위치로 다시 이동하면

147
00:16:03,977 --> 00:16:09,280
최종 이미지는 직선 경계가 있는 보로노이 다이어그램 중 하나처럼 보일 것입니다.

148
00:16:09,280 --> 00:16:15,680
그리고 앞서 내가 5차의 풀 수 없음을 언급했으므로 아마도 여기의 복잡성이 그것과 관련이 있는지 궁금할 것입니다.

149
00:16:15,680 --> 00:16:19,240
그러면 좋겠지만 본질적으로 서로 관련이 없는 아이디어입니다.

150
00:16:19,240 --> 00:16:24,080
사실 지금까지 5차 다항식만 사용하는 것은 약간 오해의 소지가 있을 수 있습니다.

151
00:16:24,080 --> 00:16:31,000
복소 평면 어딘가에 세 개의 근이 있는 3차 다항식을 사용하여 동일한 게임을 하면 어떤 일이 일어나는지 살펴보세요.

152
00:16:31,000 --> 00:16:37,240
대부분의 점은 루트에 자리잡고 있지만 일부 점은 좀 더 혼란스럽게 여기저기로 날아다니는 모습을 다시 한 번 살펴보세요.

153
00:16:37,240 --> 00:16:45,400
사실 이런 애니메이션에서 가장 눈에 띄는 것은 바로 뿌리를 향해 가는 것이 엔딩 지점에 조용히 자리잡은 것입니다.

154
00:16:45,400 --> 00:16:53,359
그리고 다시, 몇 번의 반복에서 이것을 멈추고 가장 가까운 루트를 기준으로 모든 점을 색칠하고 시계를

155
00:16:53,359 --> 00:17:01,040
되돌리면 가능한 모든 시작점에 대한 관련 그림이 무한한 세부 묘사로 이 프랙탈 패턴을 형성합니다.

156
00:17:01,040 --> 00:17:09,880
그러나 근이 2개인 이차 다항식은 다릅니다.

157
00:17:09,880 --> 00:17:16,400
이 경우 각 시드 값은 예상대로 가장 가까운 루트를 향하는 경향이 있습니다.

158
00:17:16,400 --> 00:17:24,068
각 루트에서 동일한 거리에 있는 모든 점에서 약간의 구불구불한 동작이 있습니다. 이는 어느 점으로 갈지 결정할 수 없는

159
00:17:24,068 --> 00:17:32,080
것과 비슷하지만 이는 점의 단일 선일 뿐이며, 색칠 게임을 하다 보면 우리가 얻게 되는 다이어그램은 확실히 더 지루해집니다.

160
00:17:32,080 --> 00:17:37,600
따라서 2에서 3으로 점프하면 새로운 일이 일어나는 것 같습니다. 질문은 정확히 무엇입니까?

161
00:17:37,600 --> 00:17:43,380
한 달 전에 저에게 물으셨다면 저는 아마도 어깨를 으쓱하고 이렇게 대답했을 것입니다. 수학은 원래 그런 것입니다. 대답은 간단해

162
00:17:43,380 --> 00:17:49,000
보일 때도 있고 그렇지 않을 때도 있습니다. 환경에서 왜 묻는 것이 무엇을 의미하는지 항상 명확하지는 않습니다. 이와 같이.

163
00:17:49,000 --> 00:17:55,960
하지만 내 생각은 틀렸을 것이다. 이 이미지가 왜 그렇게 복잡해 보이는지에 대해 우리가 제시할 수 있는 이유가 실제로 있다.

164
00:17:55,960 --> 00:18:01,040
보시다시피, 이 다이어그램이 가지고 있음을 증명할 수 있는 매우 독특한 속성이 있습니다.

165
00:18:01,040 --> 00:18:10,880
색칠된 영역 중 하나, 즉 이 파란색 영역, 즉 결국 다항식의 하나의 특정 근을 향하는 모든 점 집합에 주의를 집중하세요.

166
00:18:10,880 --> 00:18:17,360
이제 해당 영역의 경계를 생각해 보세요. 화면에 표시된 예에서는 이러한 종류의 멋진 3중 대칭이 있습니다.

167
00:18:17,360 --> 00:18:25,480
놀라운 점은 다른 색상을 보고 그 경계를 고려하면 정확히 동일한 세트를 얻게 된다는 것입니다.

168
00:18:25,480 --> 00:18:31,099
이제 제가 경계라는 단어를 말할 때 여러분은 그것이 무엇을 의미하는지 직관적으로 이해하실 것입니다. 하지만 수학자들은 이를

169
00:18:31,099 --> 00:18:36,800
형식화하는 매우 영리한 방법을 가지고 있으며 이는 프랙탈과 같은 더 많은 야생 집합의 맥락에서 추론하기를 더 쉽게 만듭니다.

170
00:18:36,800 --> 00:18:47,960
해당 점을 중심으로 작은 원을 그릴 때 아무리 작더라도 항상 해당 집합 내부와 외부 모두에 있는 점을 포함하면 점이 집합의 경계에 있다고 말합니다.

171
00:18:47,960 --> 00:18:53,419
따라서 내부에 점이 있는 경우 충분히 작은 원에는 결국 집합 내부의 점만 포함되고

172
00:18:53,419 --> 00:18:58,760
외부에 있는 점의 경우 충분히 작은 원에는 집합의 점이 전혀 포함되지 않습니다.

173
00:18:58,760 --> 00:19:05,840
그러나 그것이 경계에 있을 때, 경계에 있다는 것이 의미하는 바는 당신의 아주 작은 원이 항상 두 가지를 모두 포함한다는 것입니다.

174
00:19:05,840 --> 00:19:16,549
따라서 속성을 되돌아보면 이를 읽는 한 가지 방법은 원을 그리면 그 원이 아무리 작더라도 모든 색상을 포함하거나 색상의 공유 경계가 해당

175
00:19:16,549 --> 00:19:27,120
원 안에 있을 때 발생한다고 말하는 것입니다. , 또는 하나의 색상만 포함하고 있으며 이는 영역 중 하나의 내부에 있을 때 발생합니다.

176
00:19:27,120 --> 00:19:33,235
특히 이것이 의미하는 바는 두 가지 색상만 포함하는 원을 찾을 수 없다는 것입니다.

177
00:19:33,235 --> 00:19:38,960
왜냐하면 두 영역 사이의 경계에 점이 있어야 하지만 전부는 아니기 때문입니다.

178
00:19:38,960 --> 00:19:45,060
그리고 이 사실이 실제로 어디서 유래했는지 설명하기 전에, 그 사실에 대해 조금 생각해 보는 것도 재미있습니다.

179
00:19:45,060 --> 00:19:50,283
뉴턴의 방법이나 그와 유사한 것을 전혀 언급하지 않고 완전히 맥락에서 벗어난 일종의 예술 퍼즐로 누군가에게

180
00:19:50,283 --> 00:19:55,507
이것을 제시하는 것을 상상할 수 있습니다. 여기서 도전은 최소한 세 가지 색상, 아마도 우리는 빨간색이라고

181
00:19:55,507 --> 00:20:01,080
부르는 그림을 구성하는 것이라고 말합니다. 녹색, 파란색이므로 한 가지 색상의 경계가 모든 색상의 경계가 됩니다.

182
00:20:01,080 --> 00:20:07,340
따라서 이와 같이 간단한 것으로 시작했다면 분명히 작동하지 않습니다. 왜냐하면 녹색과 빨간색의 경계에 있지만

183
00:20:07,340 --> 00:20:13,600
파란색과 닿지 않는 점의 전체 라인이 있고 마찬가지로 허용되지 않는 다른 라인도 있기 때문입니다. 포인트들.

184
00:20:13,600 --> 00:20:21,602
따라서 이를 수정하려면 경계를 따라 파란색 얼룩을 추가한 다음 마찬가지로 빨간색과 파란색 사이에 녹색 얼룩을 추가하고 녹색과 파란색 사이에 빨간색

185
00:20:21,602 --> 00:20:29,800
얼룩을 추가할 수 있습니다. 물론 이제는 해당 얼룩의 경계가 됩니다. 예를 들어, 파란색과 빨간색만 만지고 녹색은 만지지 않는 등의 문제가 있습니다.

186
00:20:29,800 --> 00:20:37,240
따라서 수정을 시도하는 데 도움이 되도록 더 작은 경계 주위에 관련 세 번째 색상을 사용하여 더 작은 얼룩을 추가하려고 할 수도 있습니다.

187
00:20:37,240 --> 00:20:44,880
마찬가지로 처음에 추가한 모든 Blob에 대해 이 작업을 수행해야 합니다.

188
00:20:44,880 --> 00:20:54,480
그러나 그 작은 얼룩의 모든 경계는 그 자체의 문제이므로 어떻게든 이 과정을 영원히 계속해야 할 것입니다.

189
00:20:54,480 --> 00:21:07,000
그리고 뉴턴의 프랙탈 자체를 보면 이런 종류의 얼룩 위의 얼룩 패턴이 바로 그것이 하는 일인 것 같습니다.

190
00:21:07,000 --> 00:21:12,757
제가 주목하고 싶은 가장 중요한 점은 이 속성이 어떤 작은 세그먼트에서 매끄러운 경계를 가질 수 없거나 심지어 부분적으로

191
00:21:12,757 --> 00:21:18,600
매끄러운 경계를 가질 수 없다는 것을 의미한다는 것입니다. 왜냐하면 매끄러운 세그먼트는 두 가지 색상에만 닿기 때문입니다.

192
00:21:18,600 --> 00:21:23,860
대신, 말하자면 경계는 완전히 날카로운 모서리로 구성되어야 합니다.

193
00:21:23,860 --> 00:21:30,080
따라서 속성을 믿으면 아무리 확대해도 경계가 거칠게 유지되는 이유를 설명합니다.

194
00:21:30,080 --> 00:21:40,040
그리고 프랙탈 차원의 개념에 익숙한 분들을 위해 제가 지금 보여드리는 특정 경계의 차원이 약 1인 것으로 측정할 수 있습니다. 44.

195
00:21:40,040 --> 00:21:44,222
우리의 색상이 실제로 무엇을 나타내는지 생각해 보면 이것이 단지 그림을 위한 그림이

196
00:21:44,222 --> 00:21:48,760
아니라는 점을 기억하고 해당 건물이 실제로 우리에게 무엇을 말하고 있는지 생각해 보십시오.

197
00:21:48,760 --> 00:21:54,987
시드 값 중 일부가 하나의 루트로 이동하지만 근처의 다른 시드 값이 다른 루트로 이동하는 민감한

198
00:21:54,987 --> 00:22:01,560
지점 근처에 있는 경우 실제로 가능한 모든 루트는 해당 작은 이웃 내에서 액세스할 수 있어야 합니다.

199
00:22:01,560 --> 00:22:07,978
당신이 그리는 작은 작은 원의 경우, 그 원의 모든 점은 단지 하나의 뿌리에 대한 경향이 있거나

200
00:22:07,978 --> 00:22:14,160
모든 뿌리에 대한 경향이 있지만 그 사이에는 뿌리의 하위 집합에 대한 경향이 전혀 없습니다.

201
00:22:14,160 --> 00:22:20,500
약간의 직관을 위해 화면에 나오는 것과 같은 클러스터가 이 과정을 겪는 것을 단순히 보는 것이 깨달음을 얻었습니다.

202
00:22:20,500 --> 00:22:31,400
대부분 서로 달라붙는 것으로 시작하지만 한 번 반복하면 모두 바깥쪽으로 폭발하고 그 후에는 어떤 루트라도 잡을 수 있다는 것이 훨씬 더 합리적이라고 느껴집니다.

203
00:22:31,400 --> 00:22:38,133
저는 단지 유한한 많은 점을 보여주고 있다는 점을 명심하십시오. 그러나 원칙적으로 여러분은

204
00:22:38,133 --> 00:22:45,000
작은 디스크 내부의 셀 수 없이 많은 점에 어떤 일이 일어나는지 생각해 보고 싶을 것입니다.

205
00:22:45,000 --> 00:22:51,317
이 속성은 또한 근이 두 개인 이차 다항식의 경우 사물이 정상적으로 보이는 이유를 설명합니다.

206
00:22:51,317 --> 00:22:56,920
부드러운 경계가 있으면 괜찮고 어쨌든 만질 수 있는 색상은 두 개뿐이기 때문입니다.

207
00:22:56,920 --> 00:23:05,420
분명히 말하면, 이차 사례의 경계가 매끄러울 것이라는 보장은 없으며 두 색상 사이에 프랙탈 경계를 갖는 것이 완벽하게 가능합니다.

208
00:23:05,420 --> 00:23:13,920
뉴턴의 방법 다이어그램이 필요한 것보다 더 복잡한 작업을 수행하지 않는 것처럼 보입니다. 이 이상한 경계 조건의 제약을 받습니다.

209
00:23:13,920 --> 00:23:20,560
그러나 물론 이 모든 것은 애초에 왜 이 기괴한 경계 속성이 사실이어야 하는지에 대한 의문을 제기할 뿐입니다.

210
00:23:20,560 --> 00:23:22,580
그것은 어디에서 오는가?

211
00:23:22,580 --> 00:23:28,460
이를 위해 저는 이런 종류의 질문을 연구하는 수학 분야인 홀로모픽 동역학(holomorphicdynamics)에 대해 말씀드리고 싶습니다.

212
00:23:28,460 --> 00:23:35,140
오늘 우리는 충분한 내용을 다루었고 말할 내용도 충분히 남아 있으므로 이를 별도의 비디오로 분리하는 것이 합리적입니다.

213
00:23:35,140 --> 00:23:42,227
여기서 마무리하자면, 우리가 이것을 뉴턴의 프랙탈이라고 부르는 사실이 나에게는 뭔가 우스꽝스럽습니다. 뉴턴은 이것에 대해 전혀 단서가

214
00:23:42,227 --> 00:23:49,220
없었고 결코 여러분과 같은 방식으로 이러한 이미지를 가지고 놀 수 없었다는 사실에도 불구하고 말입니다. 현대 기술로 할 수 있어요.

215
00:23:49,220 --> 00:23:55,220
그리고 사람들의 이름이 그들이 꿈꾸던 것 이상으로 사물에 붙는 일은 수학을 통해 많이 일어납니다.

216
00:23:55,220 --> 00:23:59,940
해밀턴은 양자역학에 대해 아무것도 몰랐음에도 불구하고 해밀턴인은 양자역학의 핵심입니다.

217
00:23:59,940 --> 00:24:05,080
푸리에 자신은 한 번도 빠른 푸리에 변환을 계산한 적이 없습니다.

218
00:24:05,080 --> 00:24:10,580
그러나 이러한 명명법의 과도한 확장은 제가 생각하기에 고무적인 포인트를 전달합니다.

219
00:24:10,580 --> 00:24:16,146
이는 수백 년 전에 발견될 수 있었던 단순한 아이디어조차도 수백 년 후에 발견되기를 기다릴

220
00:24:16,146 --> 00:24:22,040
수 있는 새로운 관점이나 관련성의 새로운 영역을 그 안에 얼마나 자주 담고 있는지를 반영합니다.

221
00:24:22,040 --> 00:24:25,720
뉴턴이 뉴턴의 프랙탈에 대해 전혀 몰랐던 것은 아닙니다.

222
00:24:25,720 --> 00:24:34,581
아마도 뉴턴의 방법이나 오래된 뉴스처럼 보일 수 있는 모든 종류의 수학에 관한 많은 다른 사실들이 있을 것입니다. 이러한 사실들은

223
00:24:34,581 --> 00:24:43,200
아직 아무도 묻지 않은 질문, 그냥 거기 앉아서 당신과 같은 누군가를 기다리고 있는 질문에서 비롯됩니다. 그들에게 물어보세요.

224
00:24:43,200 --> 00:24:49,413
예를 들어, 오늘 이야기한 이 과정이 순환에 갇힌 적이 있는지 묻는다면 만델브로 집합과

225
00:24:49,413 --> 00:24:55,120
놀라운 연관성을 갖게 되며 이에 대해서는 다음에서 조금 이야기하겠습니다. 부분.

226
00:24:55,120 --> 00:24:59,520
제가 이 글을 게시하는 시점에서 두 번째 부분은 후원자에게 조기 릴리스로 제공됩니다.

227
00:24:59,520 --> 00:25:03,960
저는 항상 새로운 콘텐츠에 약간의 시간을 내어 피드백을 수집하고 오류를 파악하는 것을 좋아합니다.

228
00:25:03,960 --> 00:25:06,480
최종 버전이 곧 출시될 예정입니다.

229
00:25:06,480 --> 00:25:10,740
그리고 후원자에 관해서는 화면에 이름이 나오는 모든 분들께 간단히 감사 인사를 전하고 싶습니다.

230
00:25:10,740 --> 00:25:14,500
최근 들어 새로운 동영상이 나오는 속도가 조금 느린 것으로 알고 있습니다.

231
00:25:14,500 --> 00:25:17,340
이 중 일부는 현재 진행 중인 다른 프로젝트와 관련이 있습니다.

232
00:25:17,340 --> 00:25:25,160
그런데 제가 자랑스러워하는 여름 수학 박람회 같은 것들은 솔직히 말해서 놀랄 만큼 많은 작업이었지만 결과를 고려하면 그만한 가치가 있었습니다.

233
00:25:25,160 --> 00:25:29,540
이에 대해 모두 이야기하고 곧 우승자를 발표할 예정이니 계속 지켜봐 주시기 바랍니다.

234
00:25:29,540 --> 00:25:35,463
가까운 미래에 대한 계획은 확실히 새로운 동영상 제작으로 다시 전환하는 것이라는 점을 알아주셨으면

235
00:25:35,463 --> 00:25:40,740
하며, 무엇보다도 몇 가지 새로운 것을 시도하는 동안에도 지속적인 지원에 감사드립니다.

236
00:25:40,740 --> 00:25:47,300
이는 나에게 큰 의미가 있고 채널을 계속 유지하는 원동력이며 파이프라인의 새로운 교훈이 여러분의 신뢰에 부응할 수 있도록 최선을 다하겠습니다.

