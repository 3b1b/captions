[
 {
  "input": "I'm assuming that everybody here is coming from part 1.",
  "translatedText": "Feltételezem, hogy itt mindenki az 1. részből érkezik.",
  "model": "DeepL",
  "time_range": [
   0.0,
   2.56
  ]
 },
 {
  "input": "We were talking about Hamming codes, a way to create a block of data where most of the bits carry a meaningful message, while a few others act as a kind of redundancy, in such a way that if any bit gets flipped, either a message bit or a redundancy bit, anything in this block, a receiver is going to be able to identify that there was an error, and how to fix it.",
  "translatedText": "A Hamming-kódokról beszéltünk, egy olyan adatblokk létrehozásának módjáról, ahol a legtöbb bit egy értelmes üzenetet hordoz, míg néhány másik egyfajta redundanciaként működik, oly módon, hogy ha bármelyik bit felcserélődik, akár egy üzenetbit, akár egy redundanciabit, bármi ebben a blokkban, a vevő képes lesz azonosítani, hogy hiba történt, és hogyan kell kijavítani azt.",
  "model": "DeepL",
  "time_range": [
   3.06,
   21.24
  ]
 },
 {
  "input": "The basic idea presented there was how to use multiple parity checks to binary search your way down to the error.",
  "translatedText": "Az ott bemutatott alapötlet az volt, hogy többszörös paritásellenőrzéssel hogyan lehet binárisan lejutni a hibáig.",
  "model": "DeepL",
  "time_range": [
   21.88,
   27.16
  ]
 },
 {
  "input": "In that video, the goal was to make Hamming codes feel as hands-on and rediscoverable as possible.",
  "translatedText": "Ebben a videóban a cél az volt, hogy a Hamming-kódokat minél gyakorlatiasabbnak és újra felfedezhetőnek érezzük.",
  "model": "DeepL",
  "time_range": [
   28.98,
   34.6
  ]
 },
 {
  "input": "But as you start to think about actually implementing this, either in software or hardware, that framing may actually undersell how elegant these codes really are.",
  "translatedText": "De ha elkezdünk gondolkodni a tényleges megvalósításon, akár szoftverben, akár hardverben, akkor ez a keretezés valójában alábecsüli, hogy ezek a kódok valójában mennyire elegánsak.",
  "model": "DeepL",
  "time_range": [
   35.18,
   43.46
  ]
 },
 {
  "input": "You might think that you need to write an algorithm that keeps track of all the possible error locations and cuts that group in half with each check, but it's actually way, way simpler than that.",
  "translatedText": "Azt gondolhatod, hogy olyan algoritmust kell írnod, amely számon tartja az összes lehetséges hibahelyet, és minden egyes ellenőrzésnél kettévágja ezt a csoportot, de ez valójában sokkal, de sokkal egyszerűbb ennél.",
  "model": "DeepL",
  "time_range": [
   43.92,
   53.48
  ]
 },
 {
  "input": "If you read out the answers to the four parity checks we did in the last video, all as ones and zeros instead of yeses and nos, it literally spells out the position of the error in binary.",
  "translatedText": "Ha az előző videóban bemutatott négy paritás-ellenőrzés válaszait felolvassa, és mindegyiket egyesek és nullák formájában, igenek és nemek helyett, akkor szó szerint kiírja a hiba helyét binárisan.",
  "model": "DeepL",
  "time_range": [
   53.94,
   64.08
  ]
 },
 {
  "input": "For example, the number 7 in binary looks like 0111, essentially saying that it's 4 plus 2 plus 1.",
  "translatedText": "Például a 7-es szám binárisan úgy néz ki, mint a 0111, ami lényegében azt jelenti, hogy 4 plusz 2 plusz 1.",
  "model": "DeepL",
  "time_range": [
   64.78,
   71.26
  ]
 },
 {
  "input": "And notice where the position 7 sits.",
  "translatedText": "És figyeljük meg, hol helyezkedik el a 7-es pozíció.",
  "model": "DeepL",
  "time_range": [
   72.54,
   74.46
  ]
 },
 {
  "input": "It does affect the first of our parity groups, and the second, and the third, but not the last.",
  "translatedText": "Az első paritásos csoportot érinti, a másodikat és a harmadikat is, de az utolsót nem.",
  "model": "DeepL",
  "time_range": [
   74.84,
   81.74
  ]
 },
 {
  "input": "So reading the results of those four checks from bottom to top indeed does spell out the position of the error.",
  "translatedText": "Tehát a négy ellenőrzés eredményeinek alulról felfelé történő olvasása valóban megmutatja a hiba helyét.",
  "model": "DeepL",
  "time_range": [
   82.22,
   87.54
  ]
 },
 {
  "input": "There's nothing special about the example 7, this works in general.",
  "translatedText": "A 7-es példában nincs semmi különös, ez általánosságban működik.",
  "model": "DeepL",
  "time_range": [
   88.32,
   91.14
  ]
 },
 {
  "input": "This makes the logic for implementing the whole scheme in hardware shockingly simple.",
  "translatedText": "Ez megdöbbentően egyszerűvé teszi az egész rendszer hardveres megvalósításának logikáját.",
  "model": "DeepL",
  "time_range": [
   91.78,
   95.82
  ]
 },
 {
  "input": "Now if you want to see why this magic happens, take these 16 index labels for our positions, but instead of writing them in base 10, let's write them all in binary, running from 0000 up to 1111.",
  "translatedText": "Ha látni akarod, hogy miért történik ez a varázslat, vedd ezt a 16 indexcímkét a pozíciónkhoz, de ahelyett, hogy 10-es bázison írnánk őket, írjuk őket binárisan, 0000-tól 1111-ig.",
  "model": "DeepL",
  "time_range": [
   97.24,
   109.88
  ]
 },
 {
  "input": "As we put these binary labels back into their boxes, let me emphasize that they are distinct from the data that's actually being sent.",
  "translatedText": "Ahogy ezeket a bináris címkéket visszatesszük a dobozukba, hadd hangsúlyozzam, hogy ezek különböznek a ténylegesen küldött adatoktól.",
  "model": "DeepL",
  "time_range": [
   110.56,
   117.8
  ]
 },
 {
  "input": "They're nothing more than a conceptual label to help you and me understand where the four parity groups came from.",
  "translatedText": "Ezek nem többek, mint egy fogalmi címke, amely segít neked és nekem megérteni, honnan származik a négy paritáscsoport.",
  "model": "DeepL",
  "time_range": [
   118.32,
   123.5
  ]
 },
 {
  "input": "The elegance of having everything we're looking at be described in binary is maybe undercut by the confusion of having everything we're looking at being described in binary.",
  "translatedText": "Annak eleganciáját, hogy mindent, amit nézünk, binárisan írunk le, talán aláássa az a zűrzavar, hogy mindent, amit nézünk, binárisan írunk le.",
  "model": "DeepL",
  "time_range": [
   124.14,
   132.36
  ]
 },
 {
  "input": "It's worth it, though.",
  "translatedText": "De megéri.",
  "model": "DeepL",
  "time_range": [
   133.02,
   134.12
  ]
 },
 {
  "input": "Focus your attention just on that last bit of all of these labels.",
  "translatedText": "Koncentráljon a figyelmét csak az összes címke utolsó darabjára.",
  "model": "DeepL",
  "time_range": [
   134.8,
   138.24
  ]
 },
 {
  "input": "And then highlight the positions where that final bit is a 1.",
  "translatedText": "Majd emelje ki azokat a pozíciókat, ahol az utolsó bit 1.",
  "model": "DeepL",
  "time_range": [
   139.88,
   143.22
  ]
 },
 {
  "input": "What we get is the first of our four parity groups, which means that you can interpret that first check as asking, hey, if there's an error, is the final bit in the position of that error a 1?",
  "translatedText": "Amit kapunk, az a négy paritáscsoportunk közül az első, ami azt jelenti, hogy az első ellenőrzést úgy értelmezhetjük, hogy ha hiba van, akkor az utolsó bit a hiba helyén 1?",
  "model": "DeepL",
  "time_range": [
   144.24,
   155.74
  ]
 },
 {
  "input": "Similarly, if you focus on the second to last bit, and highlight all the positions where that's a 1, you get the second parity group from our scheme.",
  "translatedText": "Hasonlóképpen, ha az utolsó előtti bitre koncentrálunk, és kiemeljük az összes olyan pozíciót, ahol ez 1-es, akkor megkapjuk a második paritáscsoportot a sémánkból.",
  "model": "DeepL",
  "time_range": [
   158.2,
   166.16
  ]
 },
 {
  "input": "In other words, that second check is asking, hey, me again, if there's an error, is the second to last bit of that position a 1?",
  "translatedText": "Más szóval, ez a második ellenőrzés azt kérdezi, hogy hé, én megint, ha hiba van, az utolsó előtti bit az adott pozícióban 1?",
  "model": "DeepL",
  "time_range": [
   166.74,
   174.5
  ]
 },
 {
  "input": "And so on.",
  "translatedText": "És így tovább.",
  "model": "DeepL",
  "time_range": [
   175.76,
   176.9
  ]
 },
 {
  "input": "The third parity check covers every position whose third to last bit is turned on, and the last one covers the last eight positions, those ones whose highest order bit is a 1.",
  "translatedText": "A harmadik paritásellenőrzés minden olyan pozíciót lefed, amelynek utolsó előtti bitje bekapcsolt, az utolsó pedig az utolsó nyolc pozíciót, vagyis azokat, amelyek legmagasabb rendű bitje 1.",
  "model": "DeepL",
  "time_range": [
   177.22,
   188.74
  ]
 },
 {
  "input": "Everything we did earlier is the same as answering these four questions, which in turn is the same as spelling out a position in binary.",
  "translatedText": "Minden, amit korábban tettünk, ugyanaz, mint a négy kérdés megválaszolása, ami viszont ugyanaz, mint egy pozíció binárisan történő betűzése.",
  "model": "DeepL",
  "time_range": [
   189.74,
   197.74
  ]
 },
 {
  "input": "I hope this makes two things clearer.",
  "translatedText": "Remélem, ez két dolgot tisztáz.",
  "model": "DeepL",
  "time_range": [
   199.62,
   201.48
  ]
 },
 {
  "input": "The first is how to systematically generalize to block sizes that are bigger powers of two.",
  "translatedText": "Az első az, hogy hogyan lehet szisztematikusan általánosítani a nagyobb kettes hatványait jelentő blokkméretekre.",
  "model": "DeepL",
  "time_range": [
   202.04,
   206.46
  ]
 },
 {
  "input": "If it takes more bits to describe each position, like six bits to describe 64 spots, then each of those bits gives you one of the parity groups that we need to check.",
  "translatedText": "Ha minden egyes pozíció leírásához több bitre van szükség, például hat bitre 64 hely leírásához, akkor minden egyes bit egy-egy paritáscsoportot ad, amelyet ellenőriznünk kell.",
  "model": "DeepL",
  "time_range": [
   206.96,
   216.68
  ]
 },
 {
  "input": "Those of you who watched the chessboard puzzle I did with Matt Parker might find all this exceedingly familiar.",
  "translatedText": "Azok, akik látták a sakktáblás rejtvényt, amit Matt Parkerrel csináltam, mindezt rendkívül ismerősnek találhatják.",
  "model": "DeepL",
  "time_range": [
   218.4,
   223.18
  ]
 },
 {
  "input": "It's the same core logic, but solving a different problem, and applied to a 64-squared chessboard.",
  "translatedText": "Ugyanaz az alaplogika, de egy másik probléma megoldása, és egy 64 négyzetméteres sakktáblára alkalmazva.",
  "model": "DeepL",
  "time_range": [
   223.66,
   228.78
  ]
 },
 {
  "input": "The second thing I hope this makes clear is why our parity bits are sitting in the positions that are powers of two, for example 1, 2, 4, and 8.",
  "translatedText": "A második dolog, amit remélem, hogy ez világossá teszi, hogy miért ülnek a paritásbitjeink olyan pozíciókban, amelyek a kettő hatványai, például 1, 2, 4 és 8.",
  "model": "DeepL",
  "time_range": [
   229.88,
   237.32
  ]
 },
 {
  "input": "These are the positions whose binary representation has just a single bit turned on.",
  "translatedText": "Ezek azok a pozíciók, amelyek bináris ábrázolása csak egyetlen bekapcsolt bitet tartalmaz.",
  "model": "DeepL",
  "time_range": [
   238.0,
   243.0
  ]
 },
 {
  "input": "What that means is each of those parity bits sits inside one and only one of the four parity groups.",
  "translatedText": "Ez azt jelenti, hogy minden egyes paritásbit a négy paritáscsoport közül csak egy és csakis egybe tartozik.",
  "model": "DeepL",
  "time_range": [
   243.6,
   249.46
  ]
 },
 {
  "input": "You can also see this in larger examples, where no matter how big you get, each parity bit conveniently touches only one of the groups.",
  "translatedText": "Ezt nagyobb példákban is láthatjuk, ahol bármilyen nagy is legyen, minden paritásbit kényelmesen csak az egyik csoportot érinti.",
  "model": "DeepL",
  "time_range": [
   252.04,
   259.34
  ]
 },
 {
  "input": "Once you understand that these parity checks that we've focused so much of our time on are nothing more than a clever way to spell out the position of an error in binary, then we can draw a connection with a different way to think about hamming codes, one that is arguably a lot simpler and more elegant, and which can basically be written down with a single line of code.",
  "translatedText": "Ha megértettük, hogy ezek a paritásellenőrzések, amelyekre oly sok időt fordítottunk, nem többek, mint egy okos módja annak, hogy a hiba helyét binárisan leírjuk, akkor kapcsolatot tudunk teremteni a hamming kódokról való gondolkodás egy másik módjával, amely vitathatatlanul sokkal egyszerűbb és elegánsabb, és amely alapvetően egyetlen kódsorral leírható.",
  "model": "DeepL",
  "time_range": [
   265.6,
   283.24
  ]
 },
 {
  "input": "It's based on the XOR function.",
  "translatedText": "Az XOR függvényen alapul.",
  "model": "DeepL",
  "time_range": [
   283.66,
   285.5
  ]
 },
 {
  "input": "XOR, for those of you who don't know, stands for exclusive or.",
  "translatedText": "Az XOR, azok számára, akik nem tudják, a exclusive or rövidítése.",
  "model": "DeepL",
  "time_range": [
   286.94,
   290.22
  ]
 },
 {
  "input": "When you take the XOR of two bits, it's going to return a 1 if either one of those bits is turned on, but not if both are turned on or if both are turned off.",
  "translatedText": "Ha két bit XOR-ját vesszük, akkor 1 lesz, ha valamelyik bit be van kapcsolva, de nem, ha mindkettő be van kapcsolva, vagy ha mindkettő ki van kapcsolva.",
  "model": "DeepL",
  "time_range": [
   290.78,
   299.36
  ]
 },
 {
  "input": "Phrased differently, it's the parity of these two bits.",
  "translatedText": "Másképp fogalmazva, ez a két bit paritása.",
  "model": "DeepL",
  "time_range": [
   300.1,
   302.98
  ]
 },
 {
  "input": "As a math person, I prefer to think about it as addition mod 2.",
  "translatedText": "Matematikusként én inkább úgy gondolok rá, hogy összeadás mod 2.",
  "model": "DeepL",
  "time_range": [
   303.54,
   306.76
  ]
 },
 {
  "input": "We also commonly talk about the XOR of two different bit strings, which basically does this component by component.",
  "translatedText": "Szintén gyakran beszélünk két különböző bitsorozat XOR-járól, amely alapvetően komponensről komponensre végzi ezt.",
  "model": "DeepL",
  "time_range": [
   307.36,
   313.44
  ]
 },
 {
  "input": "It's like addition, but where you never carry.",
  "translatedText": "Olyan, mint az összeadás, csak itt soha nem viszed el.",
  "model": "DeepL",
  "time_range": [
   313.68,
   315.72
  ]
 },
 {
  "input": "Again, the more mathematically inclined might prefer to think of this as adding two vectors and reducing mod 2.",
  "translatedText": "A matematikához jobban értők ezt úgy képzelhetik el, hogy két vektort összeadunk, és mod 2 redukáljuk.",
  "model": "DeepL",
  "time_range": [
   316.5,
   322.48
  ]
 },
 {
  "input": "If you open up some Python right now, and you apply the caret operation between two integers, this is what it's doing, but to the bit representations of those numbers under the hood.",
  "translatedText": "Ha most megnyitsz egy Pythont, és két egész szám között alkalmazod a caret műveletet, akkor ezt teszi, de a motorháztető alatt a számok bites reprezentációjával.",
  "model": "DeepL",
  "time_range": [
   323.5,
   332.94
  ]
 },
 {
  "input": "The key point for you and me is that taking the XOR of many different bit strings is effectively a way to compute the parities of a bunch of separate groups, like so with the columns, all in one fell swoop.",
  "translatedText": "A lényeg számodra és számomra az, hogy sok különböző bitsorozat XOR-ját véve gyakorlatilag egy csomó különálló csoport paritásának kiszámítására van mód, mint az oszlopok esetében, mindezt egy csapásra.",
  "model": "DeepL",
  "time_range": [
   334.96,
   347.14
  ]
 },
 {
  "input": "This gives us a rather snazzy way to think about the multiple parity checks from our Hamming code algorithm as all being packaged together into one single operation.",
  "translatedText": "Ez egy elég elegáns módot ad arra, hogy a Hamming-kód algoritmusunk többszörös paritás-ellenőrzését egyetlen műveletbe csomagolva gondoljuk el.",
  "model": "DeepL",
  "time_range": [
   351.26,
   358.78
  ]
 },
 {
  "input": "Though at first glance it does look very different.",
  "translatedText": "Bár első pillantásra nagyon másnak tűnik.",
  "model": "DeepL",
  "time_range": [
   359.48,
   362.18
  ]
 },
 {
  "input": "Specifically, write down the 16 positions in binary, like we had before, and now highlight only the positions where the message bit is turned on to a 1, and then collect these positions into one big column and take the XOR.",
  "translatedText": "Konkrétan írjuk le a 16 pozíciót binárisan, ahogyan korábban is tettük, és most csak azokat a pozíciókat emeljük ki, ahol az üzenetbit 1-esre vált, majd gyűjtsük össze ezeket a pozíciókat egy nagy oszlopba, és vegyük az XOR-t.",
  "model": "DeepL",
  "time_range": [
   362.82,
   377.1
  ]
 },
 {
  "input": "You can probably guess that the four bits sitting at the bottom as a result are the same as the four parity checks we've come to know and love, but take a moment to actually think about why exactly.",
  "translatedText": "Valószínűleg kitalálhatod, hogy az eredményként alul ülő négy bit ugyanaz, mint az általunk megismert és szeretett négy paritásellenőrzés, de szánj egy pillanatot arra, hogy elgondolkodj azon, hogy pontosan miért.",
  "model": "DeepL",
  "time_range": [
   379.26,
   389.2
  ]
 },
 {
  "input": "This last column, for example, is counting all of the positions whose last bit is a 1, but we're already limited only to the highlighted positions, so it's effectively counting how many highlighted positions came from the first parity group.",
  "translatedText": "Ez az utolsó oszlop például megszámolja az összes olyan pozíciót, amelynek utolsó bitje 1, de már csak a kiemelt pozíciókat korlátozzuk, így gyakorlatilag azt számolja, hogy hány kiemelt pozíció származik az első paritáscsoportból.",
  "model": "DeepL",
  "time_range": [
   392.22,
   405.76
  ]
 },
 {
  "input": "Does that make sense?",
  "translatedText": "Van ennek értelme?",
  "model": "DeepL",
  "time_range": [
   406.24,
   406.8
  ]
 },
 {
  "input": "Likewise, the next column counts how many positions are in the second parity group, the positions whose second to last bit is a 1, and which are also highlighted, and so on.",
  "translatedText": "Hasonlóképpen, a következő oszlop azt számolja, hogy hány pozíció van a második paritáscsoportban, azok a pozíciók, amelyek utolsó előtti bitje 1, és amelyek szintén kiemeltek, és így tovább.",
  "model": "DeepL",
  "time_range": [
   409.08,
   420.0
  ]
 },
 {
  "input": "It's really just a small shift in perspective on the same thing we've been doing.",
  "translatedText": "Ez valójában csak egy kis perspektívaváltás ugyanannak a dolognak a szemszögéből, amit eddig is csináltunk.",
  "model": "DeepL",
  "time_range": [
   420.26,
   423.96
  ]
 },
 {
  "input": "And so you know where it goes from here.",
  "translatedText": "És így tudod, hogy innen hová vezet a dolog.",
  "model": "DeepL",
  "time_range": [
   427.76,
   429.6
  ]
 },
 {
  "input": "The sender is responsible for toggling some of the special parity bits to make sure the sum works out to be 0000.",
  "translatedText": "A küldő feladata, hogy néhány speciális paritásbitet átkapcsoljon, hogy az összeg biztosan 0000 legyen.",
  "model": "DeepL",
  "time_range": [
   430.0,
   436.56
  ]
 },
 {
  "input": "Once we have it like this, this gives us a really nice way to think about why these four resulting bits at the bottom directly spell out the position of an error.",
  "translatedText": "Ha már így állunk, akkor ez egy nagyon szép módot ad arra, hogy elgondolkodjunk azon, hogy ez a négy bit az alján miért írja le közvetlenül a hiba helyét.",
  "model": "DeepL",
  "time_range": [
   439.04,
   447.58
  ]
 },
 {
  "input": "Let's say some bit in this block gets toggled from a 0 to a 1.",
  "translatedText": "Tegyük fel, hogy ebben a blokkban egy bit 0-ról 1-re változik.",
  "model": "DeepL",
  "time_range": [
   448.46,
   451.86
  ]
 },
 {
  "input": "What that means is that the position of that bit is now going to be included in the total XOR, which changes the sum from being 0 to instead being this newly included value, the position of the error.",
  "translatedText": "Ez azt jelenti, hogy a bit pozíciója most már benne lesz a teljes XOR-ban, ami megváltoztatja az összeget 0 helyett az újonnan bevont értékre, a hiba pozíciójára.",
  "model": "DeepL",
  "time_range": [
   452.6,
   463.82
  ]
 },
 {
  "input": "Slightly less obviously, the same is true if there's an error that changes a 1 to a 0.",
  "translatedText": "Valamivel kevésbé nyilvánvaló, hogy ugyanez igaz, ha egy hiba miatt az 1-es érték 0-ra változik.",
  "model": "DeepL",
  "time_range": [
   464.46,
   469.36
  ]
 },
 {
  "input": "You see, if you add a bit string together twice, it's the same as not having it there at all, basically because in this world 1 plus 1 equals 0.",
  "translatedText": "Tudod, ha kétszer összeadsz egy bitet, az ugyanaz, mintha nem is lenne benne, mert ebben a világban 1 plusz 1 egyenlő 0-val.",
  "model": "DeepL",
  "time_range": [
   470.18,
   477.94
  ]
 },
 {
  "input": "So adding a copy of this position to the total sum has the same effect as removing it.",
  "translatedText": "Tehát ennek a pozíciónak a másolatának hozzáadása a teljes összeghez ugyanolyan hatású, mint az eltávolítása.",
  "model": "DeepL",
  "time_range": [
   478.92,
   484.3
  ]
 },
 {
  "input": "And that effect, again, is that the total result at the bottom here spells out the position of the error.",
  "translatedText": "És ez a hatás ismét az, hogy a teljes eredmény itt alul megadja a hiba helyét.",
  "model": "DeepL",
  "time_range": [
   485.16,
   490.7
  ]
 },
 {
  "input": "To illustrate how elegant this is, let me show that one line of Python code I referenced before, which will capture almost all of the logic on the receiver's end.",
  "translatedText": "Annak illusztrálására, hogy ez mennyire elegáns, hadd mutassam meg azt az egy sor Python kódot, amelyre korábban hivatkoztam, és amely szinte az egész logikát rögzíti a vevő oldalán.",
  "model": "DeepL",
  "time_range": [
   493.04,
   501.44
  ]
 },
 {
  "input": "We'll start by creating a random array of 16 ones and zeros to simulate the data block, and I'll go ahead and give it the name bits, but of course in practice this would be something that we're receiving from a sender, and instead of being random, it would be carrying 11 data bits together with 5 parity bits.",
  "translatedText": "Azzal kezdjük, hogy létrehozunk egy 16 egyesből és nullából álló véletlenszerű tömböt, hogy szimuláljuk az adatblokkot, és megadom neki a bitek nevet, de természetesen a gyakorlatban ez olyasmi lenne, amit egy feladótól kapunk, és ahelyett, hogy véletlenszerű lenne, 11 adatbitet hordozna 5 paritásbittel együtt.",
  "model": "DeepL",
  "time_range": [
   502.08,
   517.4
  ]
 },
 {
  "input": "If I call the function enumerateBits, what it does is pair together each of those bits with a corresponding index, in this case running from 0 up to 15.",
  "translatedText": "Ha meghívom az enumerateBits függvényt, akkor az minden egyes bitet összepárosít egy megfelelő indexszel, ebben az esetben 0-tól 15-ig.",
  "model": "DeepL",
  "time_range": [
   518.12,
   527.0
  ]
 },
 {
  "input": "So if we then create a list that loops over all of these pairs, pairs that look like i,bit, and then we pull out just the i value, just the index, well, it's not that exciting, we just get back those indices 0 through 15.",
  "translatedText": "Tehát ha létrehozunk egy listát, amely végigmegy ezeken a párokon, az i,bit alakú párokon, és csak az i értéket, csak az indexet vesszük ki, nos, ez nem olyan izgalmas, csak a 0-tól 15-ig terjedő indexeket kapjuk vissza.",
  "model": "DeepL",
  "time_range": [
   528.18,
   541.34
  ]
 },
 {
  "input": "But if we add on the condition to only do this if bit, meaning if that bit is a 1 and not a 0, well then it pulls out only the positions where the corresponding bit is turned on.",
  "translatedText": "De ha hozzáadjuk azt a feltételt, hogy csak akkor tegyük ezt, ha a bit, vagyis ha az a bit 1 és nem 0, akkor csak azokat a pozíciókat húzza ki, ahol a megfelelő bit be van kapcsolva.",
  "model": "DeepL",
  "time_range": [
   541.68,
   552.66
  ]
 },
 {
  "input": "In this case it looks like those positions are 0, 4, 6, 9, etc.",
  "translatedText": "Ebben az esetben úgy néz ki, hogy ezek a pozíciók a 0, 4, 6, 9, stb.",
  "model": "DeepL",
  "time_range": [
   553.38,
   557.96
  ]
 },
 {
  "input": "Remember, what we want is to collect together all of those positions, the positions of the bits that are turned on, and then XOR them together.",
  "translatedText": "Ne feledjük, hogy az összes pozíciót, a bekapcsolt bitek pozícióit össze akarjuk gyűjteni, majd XOR-olni őket.",
  "model": "DeepL",
  "time_range": [
   559.98,
   567.24
  ]
 },
 {
  "input": "To do this in Python, let me first import a couple helpful functions.",
  "translatedText": "Ehhez Pythonban először is hadd importáljak néhány hasznos függvényt.",
  "model": "DeepL",
  "time_range": [
   569.18,
   573.22
  ]
 },
 {
  "input": "That way we can call reduce() on this list, and use the XOR function to reduce it.",
  "translatedText": "Így meghívhatjuk a reduce()-t ezen a listán, és az XOR függvényt használhatjuk a redukcióhoz.",
  "model": "DeepL",
  "time_range": [
   573.9,
   578.7
  ]
 },
 {
  "input": "This basically eats its way through the list, taking XORs along the way.",
  "translatedText": "Ez alapvetően végigfogyasztja magát a listán, és közben XOR-okat vesz fel.",
  "model": "DeepL",
  "time_range": [
   579.1,
   582.68
  ]
 },
 {
  "input": "If you prefer, you can explicitly write out that XOR function without having to import it from anywhere.",
  "translatedText": "Ha szeretné, akkor kifejezetten kiírhatja ezt az XOR függvényt anélkül, hogy importálnia kellene bárhonnan.",
  "model": "DeepL",
  "time_range": [
   584.8,
   589.44
  ]
 },
 {
  "input": "So at the moment, it looks like if we do this on our random block of 16 bits, it returns 9, which has the binary representation 1001.",
  "translatedText": "Jelenleg tehát úgy néz ki, hogy ha ezt a 16 bites véletlenszerű blokkunkkal végezzük el, akkor 9-et kapunk vissza, ami az 1001-es bináris ábrázolást jelenti.",
  "model": "DeepL",
  "time_range": [
   591.94,
   601.28
  ]
 },
 {
  "input": "We won't do it here, but you could write a function where the sender uses that binary representation to set the 4 parity bits as needed, ultimately getting this block to a state where running this line of code on the full list of bits returns a 0.",
  "translatedText": "Ezt itt nem fogjuk megtenni, de írhatnál egy olyan függvényt, ahol a feladó ezt a bináris ábrázolást használja a 4 paritásbit szükség szerinti beállítására, és végül olyan állapotba hozhatnád ezt a blokkot, ahol a kódsor futtatása a bitek teljes listáján 0-t ad vissza.",
  "model": "DeepL",
  "time_range": [
   601.98,
   615.46
  ]
 },
 {
  "input": "This would be considered a well-prepared block.",
  "translatedText": "Ez egy jól előkészített blokknak minősül.",
  "model": "DeepL",
  "time_range": [
   616.08,
   618.2
  ]
 },
 {
  "input": "Now what's cool is that if we toggle any one of the bits in this list, simulating a random error from noise, then if you run this same line of code, it prints out that error.",
  "translatedText": "Most az a klassz, hogy ha a listában lévő bitek bármelyikét átkapcsoljuk, egy véletlenszerű hibát szimulálva a zajból, akkor ha lefuttatjuk ugyanazt a kódsort, akkor kiírja ezt a hibát.",
  "model": "DeepL",
  "time_range": [
   619.88,
   630.22
  ]
 },
 {
  "input": "Isn't that neat?",
  "translatedText": "Hát nem klassz?",
  "model": "DeepL",
  "time_range": [
   630.96,
   631.52
  ]
 },
 {
  "input": "You could get this block from out of the blue, run this single line on it, and it'll automatically spit out the position of an error, or a 0 if there wasn't any.",
  "translatedText": "A semmiből előveheted ezt a blokkot, lefuttathatod rajta ezt az egyetlen sort, és automatikusan kiköpi a hiba pozícióját, vagy egy 0-t, ha nem volt hiba.",
  "model": "DeepL",
  "time_range": [
   631.82,
   641.06
  ]
 },
 {
  "input": "And there's nothing special about the size 16 here.",
  "translatedText": "És itt semmi különös nincs a 16-os méretben.",
  "model": "DeepL",
  "time_range": [
   642.5,
   645.2
  ]
 },
 {
  "input": "The same line of code would work if you had a list of 256 bits.",
  "translatedText": "Ugyanez a kódsor akkor is működne, ha egy 256 bites listával rendelkeznénk.",
  "model": "DeepL",
  "time_range": [
   645.4,
   649.86
  ]
 },
 {
  "input": "Needless to say, there is more code to write here, like doing the meta parity check to detect 2-bit errors, but the idea is that almost all of the core logic from our scheme comes down to a single XOR reduction.",
  "translatedText": "Mondanom sem kell, hogy itt még több kódot kell írni, mint például a meta paritásellenőrzés a 2 bites hibák felismeréséhez, de az ötlet az, hogy a sémánk majdnem minden alapvető logikája egyetlen XOR redukcióra fut ki.",
  "model": "DeepL",
  "time_range": [
   651.88,
   663.76
  ]
 },
 {
  "input": "Now depending on your comfort with binary and XORs and software in general, you may either find this perspective a little bit confusing, or so much more elegant and simple that you're wondering why we didn't just start with it from the get-go.",
  "translatedText": "Attól függően, hogy mennyire vagy otthonos a bináris és az XOR-ok és általában a szoftverek terén, vagy egy kicsit zavarosnak találod ezt a perspektívát, vagy sokkal elegánsabbnak és egyszerűbbnek, és azon tűnődsz, hogy miért nem kezdtük ezzel a szemlélettel a kezdetektől fogva.",
  "model": "DeepL",
  "time_range": [
   666.12,
   678.42
  ]
 },
 {
  "input": "Loosely speaking, the multiple parity check perspective is easier to think about when implementing Hamming codes in hardware very directly, and the XOR perspective is easiest to think about when doing it in software, from kind of a higher level.",
  "translatedText": "Ha lazán fogalmazunk, a többszörös paritásellenőrzés perspektívájára könnyebb gondolni, amikor a Hamming-kódokat hardveresen, nagyon közvetlenül implementáljuk, az XOR perspektívájára pedig akkor a legkönnyebb gondolni, amikor szoftveresen, egy magasabb szintről csináljuk.",
  "model": "DeepL",
  "time_range": [
   679.14,
   690.5
  ]
 },
 {
  "input": "The first one is easiest to actually do by hand, and I think it does a better job instilling the core intuition underlying all of this, which is that the information required to locate a single error is related to the log of the size of the block, or in other words, it grows one bit at a time as the block size doubles.",
  "translatedText": "Az elsőt a legkönnyebb kézzel elvégezni, és úgy gondolom, hogy ez jobban elsajátítja a mindezek alapjául szolgáló alapvető intuíciót, amely szerint az egyetlen hiba megtalálásához szükséges információ a blokk méretének logaritmusával függ össze, vagy más szóval, a blokk méretének megduplázódásával egyszerre csak egy bittel nő.",
  "model": "DeepL",
  "time_range": [
   691.36,
   710.0
  ]
 },
 {
  "input": "The relevant fact here is that that information directly corresponds to how much redundancy we need.",
  "translatedText": "A lényeges tény itt az, hogy ez az információ közvetlenül megfelel annak, hogy mennyi redundanciára van szükségünk.",
  "model": "DeepL",
  "time_range": [
   711.02,
   716.06
  ]
 },
 {
  "input": "That's really what runs against most people's knee-jerk reaction when they first think about making a message resilient to errors, where usually copying the whole message is the first instinct that comes to mind.",
  "translatedText": "Ez az, ami a legtöbb ember térdproblémájával ellentétes, amikor először gondolkodik azon, hogy egy üzenetet ellenállóvá tegyen a hibákkal szemben, ahol általában a teljes üzenet másolása az első ösztön, ami eszébe jut.",
  "model": "DeepL",
  "time_range": [
   716.66,
   726.54
  ]
 },
 {
  "input": "And then, by the way, there is this whole other way that you sometimes see Hamming codes presented where you multiply the message by one big matrix.",
  "translatedText": "És egyébként van ez a teljesen más módszer, amit néha Hamming-kódok bemutatásakor láthatunk, amikor az üzenetet egy nagy mátrixszal szorozzuk meg.",
  "model": "DeepL",
  "time_range": [
   727.5,
   734.0
  ]
 },
 {
  "input": "It's kind of nice because it relates it to the broader family of linear codes, but I think that gives almost no intuition for where it comes from or how it scales.",
  "translatedText": "Ez elég szép, mert a lineáris kódok tágabb családjához kapcsolja, de szerintem ez szinte semmilyen intuíciót nem ad arra vonatkozóan, hogy honnan származik, vagy hogyan skálázódik.",
  "model": "DeepL",
  "time_range": [
   734.67,
   743.06
  ]
 },
 {
  "input": "And speaking of scaling, you might notice that the efficiency of this scheme only gets better as we increase the block size.",
  "translatedText": "És ha már a skálázásnál tartunk, észrevehetjük, hogy ennek a rendszernek a hatékonysága csak javul, ahogy növeljük a blokkméretet.",
  "model": "DeepL",
  "time_range": [
   745.2,
   751.16
  ]
 },
 {
  "input": "For example, we saw that with 256 bits, you're using only 3% of that space for redundancy, and it just keeps getting better from there.",
  "translatedText": "Láttuk például, hogy 256 bit esetén a redundanciának csak 3%-át használjuk fel, és onnantól kezdve egyre jobb lesz.",
  "model": "DeepL",
  "time_range": [
   755.0,
   762.66
  ]
 },
 {
  "input": "As the number of parity bits grows one by one, the block size keeps doubling.",
  "translatedText": "Ahogy a paritásbitek száma egyesével növekszik, a blokk mérete folyamatosan megduplázódik.",
  "model": "DeepL",
  "time_range": [
   763.3,
   767.34
  ]
 },
 {
  "input": "And if you take that to an extreme, you could have a block with, say, a million bits, where you would quite literally be playing 20 questions with your parity checks, and it uses only 21 parity bits.",
  "translatedText": "És ha ezt a végletekig fokozzuk, akkor lehet egy olyan blokkunk, mondjuk, egymillió bitből, ahol szó szerint 20 kérdést játszunk a paritásellenőrzéssel, és csak 21 paritásbitet használunk.",
  "model": "DeepL",
  "time_range": [
   769.0,
   780.02
  ]
 },
 {
  "input": "And if you step back to think about looking at a million bits and locating a single error, that genuinely feels crazy.",
  "translatedText": "És ha visszalépsz, és belegondolsz, hogy egymillió bitet nézel meg, és egyetlen hibát találsz, az tényleg őrültségnek tűnik.",
  "model": "DeepL",
  "time_range": [
   780.74,
   787.06
  ]
 },
 {
  "input": "The problem, of course, is that with a larger block, the probability of seeing more than one or two bit errors goes up, and Hamming codes do not handle anything beyond that.",
  "translatedText": "A probléma persze az, hogy nagyobb blokkok esetén megnő a valószínűsége annak, hogy egy vagy két bithibánál több hibát észlelünk, és a Hamming-kódok ezen túl nem képesek kezelni semmit.",
  "model": "DeepL",
  "time_range": [
   788.2,
   797.66
  ]
 },
 {
  "input": "So in practice, what you'd want is to find the right size so that the probability of too many bit flips isn't too high.",
  "translatedText": "A gyakorlatban tehát a megfelelő méretet kell megtalálni, hogy a túl sok bit felcserélésének valószínűsége ne legyen túl nagy.",
  "model": "DeepL",
  "time_range": [
   798.32,
   804.3
  ]
 },
 {
  "input": "Also, in practice, errors tend to come in little bursts, which would totally ruin a single block.",
  "translatedText": "Emellett a gyakorlatban a hibák általában kis sorozatban jelentkeznek, ami teljesen tönkretesz egy-egy blokkot.",
  "model": "DeepL",
  "time_range": [
   806.6,
   811.62
  ]
 },
 {
  "input": "So one common tactic to help spread out a burst of errors across many different blocks is to interlace those blocks, like this, before they're sent out or stored.",
  "translatedText": "Tehát az egyik általános taktika a hibák sok különböző blokkban való eloszlásának elősegítésére az, hogy ezeket a blokkokat összekapcsolják, például így, mielőtt elküldik vagy tárolják őket.",
  "model": "DeepL",
  "time_range": [
   812.2,
   820.98
  ]
 },
 {
  "input": "Then again, a lot of this is rendered completely moot by more modern codes, like the much more commonly used Reed-Solomon algorithm, which handles burst errors particularly well, and it can be tuned to be resilient to a larger number of errors per block.",
  "translatedText": "Másfelől, a modernebb kódok, mint például a sokkal gyakrabban használt Reed-Solomon algoritmus, amely különösen jól kezeli a sorozatos hibákat, és úgy hangolható, hogy blokkonként nagyobb számú hibával szemben is ellenálló legyen.",
  "model": "DeepL",
  "time_range": [
   825.58,
   838.82
  ]
 },
 {
  "input": "But that is a topic for another time.",
  "translatedText": "De ez már egy másik téma.",
  "model": "DeepL",
  "time_range": [
   839.36,
   841.34
  ]
 },
 {
  "input": "In his book The Art of Doing Science and Engineering, Hamming is wonderfully candid about just how meandering his discovery of this code was.",
  "translatedText": "A The Art of Doing Science and Engineering című könyvében Hamming csodálatosan őszintén beszél arról, hogy mennyire kanyargós volt a kód felfedezése.",
  "model": "DeepL",
  "time_range": [
   842.5,
   849.94
  ]
 },
 {
  "input": "He first tried all sorts of different schemes involving organizing the bits into parts of a higher dimensional lattice and strange things like this.",
  "translatedText": "Először mindenféle különböző sémákat próbált ki, amelyekben a biteket egy magasabb dimenziós rács részeibe szervezte, és ilyen furcsa dolgokat.",
  "model": "DeepL",
  "time_range": [
   850.62,
   857.78
  ]
 },
 {
  "input": "The idea that it might be possible to get parity checks to conspire in a way that spells out the position of an error only came to Hamming when he stepped back after a bunch of other analysis and asked, okay, what is the most efficient I could conceivably be about this?",
  "translatedText": "Az ötlet, hogy lehetséges lenne a paritás-ellenőrzéseket úgy összeesküvésre bírni, hogy a hiba helyét kiírják, csak akkor jutott Hamming eszébe, amikor egy csomó más elemzés után hátralépett, és megkérdezte: \"Oké, mi a leghatékonyabb, amit elképzelhető, hogy ebben a kérdésben megvalósíthatok?\".",
  "model": "DeepL",
  "time_range": [
   858.3,
   871.52
  ]
 },
 {
  "input": "He was also candid about how important it was that parity checks were already on his mind, which would have been way less common back in the 1940s than it is today.",
  "translatedText": "Őszintén beszélt arról is, mennyire fontos volt, hogy már akkor is a paritásos csekkek jártak a fejében, ami az 1940-es években sokkal kevésbé lett volna jellemző, mint manapság.",
  "model": "DeepL",
  "time_range": [
   872.62,
   881.22
  ]
 },
 {
  "input": "There are like half a dozen times throughout this book that he references the Louis Pasteur quote, luck favors a prepared mind.",
  "translatedText": "A könyvben mintegy féltucatszor hivatkozik a Louis Pasteur-idézetre, miszerint a szerencse a felkészült elmének kedvez.",
  "model": "DeepL",
  "time_range": [
   881.92,
   888.22
  ]
 },
 {
  "input": "Clever ideas often look deceptively simple in hindsight, which makes them easy to underappreciate.",
  "translatedText": "Az okos ötletek utólag gyakran megtévesztően egyszerűnek tűnnek, ami miatt könnyen alábecsüljük őket.",
  "model": "DeepL",
  "time_range": [
   889.32,
   894.3
  ]
 },
 {
  "input": "Right now my honest hope is that Hamming codes, or at least the possibility of such codes, feels almost obvious to you.",
  "translatedText": "Most őszintén remélem, hogy a Hamming-kódok, vagy legalábbis az ilyen kódok lehetősége szinte magától értetődőnek tűnik számodra.",
  "model": "DeepL",
  "time_range": [
   894.96,
   901.3
  ]
 },
 {
  "input": "But you shouldn't fool yourself into thinking that they actually are obvious, because they definitely aren't.",
  "translatedText": "De ne áltasd magad azzal, hogy ezek valóban nyilvánvalóak, mert biztosan nem azok.",
  "model": "DeepL",
  "time_range": [
   901.66,
   906.82
  ]
 },
 {
  "input": "Part of the reason that clever ideas look deceptively easy is that we only ever see the final result, cleaning up what was messy, never mentioning all of the wrong turns, underselling just how vast the space of explorable possibilities is at the start of a problem solving process, all of that.",
  "translatedText": "Az okos ötletek részben azért tűnnek megtévesztően egyszerűnek, mert mindig csak a végeredményt látjuk, eltakarítva, ami rendetlen volt, soha nem említve az összes rossz fordulatot, alábecsülve, hogy a problémamegoldási folyamat kezdetén milyen hatalmas a felfedezhető lehetőségek tárháza, mindezek.",
  "model": "DeepL",
  "time_range": [
   907.88,
   922.86
  ]
 },
 {
  "input": "But this is true in general.",
  "translatedText": "De ez általánosságban igaz.",
  "model": "DeepL",
  "time_range": [
   923.82,
   924.9
  ]
 },
 {
  "input": "I think for some special inventions, there's a second, deeper reason that we underappreciate them.",
  "translatedText": "Azt hiszem, néhány különleges találmány esetében van egy második, mélyebb oka is annak, hogy alulértékeljük őket.",
  "model": "DeepL",
  "time_range": [
   924.9,
   930.04
  ]
 },
 {
  "input": "Thinking of information in terms of bits had only really coalesced into a full theory by 1948, with Claude Shannon's seminal paper on information theory.",
  "translatedText": "Az információ bitekben való elgondolása csak 1948-ra, Claude Shannon információelméletről szóló alapvető tanulmányával vált igazán teljes elméletté.",
  "model": "DeepL",
  "time_range": [
   930.84,
   938.64
  ]
 },
 {
  "input": "This was essentially concurrent with when Hamming developed his algorithm.",
  "translatedText": "Ez lényegében egybeesett azzal, amikor Hamming kifejlesztette algoritmusát.",
  "model": "DeepL",
  "time_range": [
   939.28,
   942.54
  ]
 },
 {
  "input": "This was the same foundational paper that showed, in a certain sense, that efficient error correction is always possible, no matter how high the probability of bit flips, at least in theory.",
  "translatedText": "Ez volt az az alapozó írás, amely bizonyos értelemben megmutatta, hogy a hatékony hibajavítás mindig lehetséges, függetlenül attól, hogy a bitek felcserélésének valószínűsége mekkora, legalábbis elméletben.",
  "model": "DeepL",
  "time_range": [
   943.3,
   952.9
  ]
 },
 {
  "input": "Shannon and Hamming, by the way, shared an office in Bell Labs, despite working on very different things, which hardly seems coincidental here.",
  "translatedText": "Shannon és Hamming egyébként közös irodát használtak a Bell Labs-ben, annak ellenére, hogy nagyon különböző dolgokon dolgoztak, ami itt aligha tűnik véletlennek.",
  "model": "DeepL",
  "time_range": [
   953.7,
   961.16
  ]
 },
 {
  "input": "Fast forward several decades, and these days, many of us are so immersed in thinking about bits and information that it's easy to overlook just how distinct this way of thinking was.",
  "translatedText": "Ugorjunk előre néhány évtizedet, és manapság sokan annyira elmerültek a bitekről és információkról való gondolkodásban, hogy könnyű figyelmen kívül hagyni, mennyire más volt ez a gondolkodásmód.",
  "model": "DeepL",
  "time_range": [
   962.38,
   972.34
  ]
 },
 {
  "input": "Ironically, the ideas that most profoundly shape the ways that a future generation thinks will end up looking to that future generation simpler than they really are.",
  "translatedText": "Ironikus módon azok az eszmék, amelyek a legmélyebben alakítják a jövő generációjának gondolkodásmódját, végül egyszerűbbnek tűnnek a jövő generációja számára, mint amilyenek valójában.",
  "model": "DeepL",
  "time_range": [
   973.1,
   982.26
  ]
 }
]