1
00:00:03,620 --> 00:00:07,978
Elgondolkozott már azon, hogyan lehetséges egy CD-t vagy DVD-t megkarcolni, 

2
00:00:07,978 --> 00:00:10,100
és még mindig lejátszani, amit tárol?

3
00:00:10,900 --> 00:00:14,588
A karcolás valóban hatással van a lemezen lévő 1-ekre és 0-kra, 

4
00:00:14,588 --> 00:00:19,486
tehát a tárolttól eltérő adatokat olvas ki, de hacsak nem teljesen összekarcolódott, 

5
00:00:19,486 --> 00:00:23,002
a kiolvasott bitek pontosan ugyanabba a fájlba dekódolódnak, 

6
00:00:23,002 --> 00:00:27,440
mint amilyenre rá volt kódolva. bit a bitmásoláshoz, mindezen hibák ellenére.

7
00:00:27,440 --> 00:00:31,431
Számtalan matematikai okosság van, amely lehetővé teszi az adatok tárolását, 

8
00:00:31,431 --> 00:00:34,852
és ami ugyanilyen fontos, hogy adatokat továbbítsunk olyan módon, 

9
00:00:34,852 --> 00:00:36,200
amely ellenáll a hibáknak.

10
00:00:36,200 --> 00:00:40,880
Nos, oké, valójában nem kell akkora okosság, hogy kitaláljon egy módot erre.

11
00:00:40,880 --> 00:00:46,210
Bármely fájl, legyen szó videóról, hangról vagy szövegről, valamilyen kódról, 

12
00:00:46,210 --> 00:00:50,380
képről vagy bármi másról, végső soron 1-esek és 0-k sorozata.

13
00:00:50,680 --> 00:00:53,950
A megfordított bitek kijavítására egy egyszerű stratégia az lenne, 

14
00:00:53,950 --> 00:00:56,000
ha minden bitből három másolatot tárolunk.

15
00:00:57,580 --> 00:01:01,282
Ekkor a fájlt olvasó gép össze tudja hasonlítani ezt a három másolatot, 

16
00:01:01,282 --> 00:01:04,060
és mindig a legjobb 2-t kapja a 3-ból, ha eltérés van.

17
00:01:07,160 --> 00:01:10,860
De ez azt jelenti, hogy a hely kétharmadát redundanciára használja.

18
00:01:11,480 --> 00:01:14,873
És még akkor sem, ha az összes helyet feladjuk, nincs komoly garancia arra, 

19
00:01:14,873 --> 00:01:17,240
hogy mi történik, ha egynél több bitet megfordítanak.

20
00:01:17,980 --> 00:01:20,593
Sokkal érdekesebb kérdés, hogy hogyan lehet úgy megcsinálni, 

21
00:01:20,593 --> 00:01:24,020
hogy a hibákat a lehető legkevesebb hely elhagyása mellett ki lehessen javítani.

22
00:01:24,520 --> 00:01:30,588
Például a videóról megismert módszerrel 256 bites blokkokban tárolhatja adatait, 

23
00:01:30,588 --> 00:01:33,360
ahol minden blokk 9, 9 bitet használ!

24
00:01:33,760 --> 00:01:37,005
egyfajta redundanciaként működik, a többi 247 bit pedig szabadon 

25
00:01:37,005 --> 00:01:40,300
hordozhat bármilyen értelmes üzenetet vagy adatot, amit csak akar.

26
00:01:40,900 --> 00:01:44,252
És továbbra is az lesz, hogy ha itt bármelyik bit megfordul, 

27
00:01:44,252 --> 00:01:48,263
csak erre a blokkra nézve, és semmi másra, a gép képes lesz azonosítani, 

28
00:01:48,263 --> 00:01:52,660
hogy hiba történt, és hogy pontosan hol volt, így tudja, hogyan kell kijavítani.

29
00:01:52,660 --> 00:01:54,620
És őszintén szólva, ez varázslatnak tűnik.

30
00:01:55,440 --> 00:01:58,506
És ennél a konkrét sémánál, ha két bit megfordul, 

31
00:01:58,506 --> 00:02:02,860
a gép legalább két hibát észlel, bár nem tudja, hogyan javítsa ki őket.

32
00:02:03,520 --> 00:02:05,377
Egy kicsit később beszélünk arról, hogy ez hogyan 

33
00:02:05,377 --> 00:02:06,900
skálázható a különböző méretű blokkokhoz.

34
00:02:07,860 --> 00:02:10,329
Az ehhez hasonló hibák kijavítását lehetővé tevő 

35
00:02:10,329 --> 00:02:12,900
módszereket ésszerűen hibajavító kódokként ismerik.

36
00:02:13,660 --> 00:02:17,829
A múlt század nagy részében ez a terület a meglepően mély matematikai 

37
00:02:17,829 --> 00:02:21,940
adatok gazdag forrása volt, amely beépül a mindennapi használatunkba.

38
00:02:22,840 --> 00:02:26,903
Itt az a cél, hogy nagyon alapos megértést nyújtsunk az egyik legkorábbi, 

39
00:02:26,903 --> 00:02:28,660
Hamming-kódként ismert példának.

40
00:02:29,520 --> 00:02:33,450
És mellesleg, ahogyan ennek a videónak a felépítésére gondolok, kevésbé arról van szó, 

41
00:02:33,450 --> 00:02:37,019
hogy a lehető legközvetlenebbül magyarázzam el, hanem inkább arra ösztönözzek, 

42
00:02:37,019 --> 00:02:39,820
hogy találd ki magadnak, itt-ott egy kis gyengéd irányítással.

43
00:02:40,120 --> 00:02:42,632
Tehát amikor úgy érzed, hogy egy ponton látod, merre tart, 

44
00:02:42,632 --> 00:02:45,910
szánj arra a pillanatra egy szünetet, és aktívan jósold meg, mi lesz a terv, 

45
00:02:45,910 --> 00:02:46,720
mielőtt elmondanám.

46
00:02:47,240 --> 00:02:50,511
Továbbá, ha azt szeretné, hogy megértése a hardver szintjére jusson, 

47
00:02:50,511 --> 00:02:53,640
Ben Eater készített egy videót ehhez a videóhoz, amely bemutatja, 

48
00:02:53,640 --> 00:02:57,102
hogyan kell ténylegesen implementálni a Hamming-kódokat a kenyérlapokon, 

49
00:02:57,102 --> 00:02:58,240
ami rendkívül kielégítő.

50
00:02:59,300 --> 00:03:02,339
Tudnod kell, a Hamming-kódokat nem használják olyan széles körben, 

51
00:03:02,339 --> 00:03:05,333
mint a modernebb kódokat, mint például a Reed-Solomon algoritmus, 

52
00:03:05,333 --> 00:03:07,783
de van egy bizonyos varázslat a kontrasztban aközött, 

53
00:03:07,783 --> 00:03:10,414
hogy mennyire lehetetlennek tűnik ez a feladat az elején, 

54
00:03:10,414 --> 00:03:13,000
és mennyire ésszerűnek tűnik egyszer. tanulsz Hammingről.

55
00:03:13,720 --> 00:03:18,151
A hibajavítás alapelve, hogy az összes lehetséges üzenet hatalmas 

56
00:03:18,151 --> 00:03:22,180
területén csak egy részhalmaz tekinthető érvényes üzenetnek.

57
00:03:22,800 --> 00:03:26,940
Analógiaként gondoljon a helyesen írt szavakra a helytelenül írt szavakra.

58
00:03:28,900 --> 00:03:32,119
Amikor egy érvényes üzenetet módosítanak, a fogadó felelős azért, 

59
00:03:32,119 --> 00:03:35,193
hogy a látottakat a legközelebbi érvényes szomszédhoz javítsa, 

60
00:03:35,193 --> 00:03:37,340
ahogyan azt az elírások esetén is megteheti.

61
00:03:38,220 --> 00:03:41,140
Egy konkrét algoritmus kidolgozása az ehhez hasonló üzenetek 

62
00:03:41,140 --> 00:03:44,060
hatékony kategorizálására azonban bizonyos okosságot igényel.

63
00:03:46,780 --> 00:03:50,326
A történet az 1940-es években kezdődik, amikor egy fiatal Richard Hamming a 

64
00:03:50,326 --> 00:03:53,126
Bell Labs-nál dolgozott, és néhány munkája egy nagyon nagy, 

65
00:03:53,126 --> 00:03:55,413
drága lyukkártyás számítógép használatából állt, 

66
00:03:55,413 --> 00:03:57,420
amelyhez csak korlátozott hozzáférése volt.

67
00:03:57,800 --> 00:04:00,866
És a programok, amiket folyamatosan csinált, folyamatosan kudarcot vallottak, 

68
00:04:00,866 --> 00:04:02,400
mert időnként egy kicsit félreolvastak.

69
00:04:03,120 --> 00:04:06,113
Mivel a frusztráció a találmány tégelye, annyira elege lett, 

70
00:04:06,113 --> 00:04:08,420
hogy feltalálta a világ első hibajavító kódját.

71
00:04:09,060 --> 00:04:11,960
A Hamming-kódok keretbe foglalásának sokféle módja van, 

72
00:04:11,960 --> 00:04:15,380
de első lépésként úgy megyünk végig, ahogy Hamming gondolta róluk.

73
00:04:16,519 --> 00:04:20,940
Használjunk egy egyszerű, de nem túl egyszerű példát, egy 16 bites blokkot.

74
00:04:21,820 --> 00:04:24,740
Ezeknek a biteknek a pozícióit 0-tól 15-ig számozzuk.

75
00:04:25,620 --> 00:04:29,630
A tárolni kívánt tényleges adatok csak 12 bitet tesznek ki ebből a bitből, 

76
00:04:29,630 --> 00:04:33,000
míg a pozíciók közül 4 egyfajta redundanciaként van fenntartva.

77
00:04:33,900 --> 00:04:36,725
A redundáns szó itt nem egyszerűen másolást jelent, 

78
00:04:36,725 --> 00:04:40,040
elvégre az a 4 bit nem ad elég teret az adatok vakmásolására.

79
00:04:40,720 --> 00:04:44,748
Ehelyett sokkal árnyaltabb és okosabb redundanciát kell alkalmazniuk, 

80
00:04:44,748 --> 00:04:47,280
nem új információkkal, hanem rugalmassággal.

81
00:04:48,600 --> 00:04:52,806
Arra számíthat, hogy ez a 4 speciális bit szépen össze van csomagolva, 

82
00:04:52,806 --> 00:04:56,242
talán a végén, vagy valami hasonló, de amint látni fogja, 

83
00:04:56,242 --> 00:04:59,620
ha 2-es pozícióban ülnek, valami igazán elegáns a végére.

84
00:05:00,200 --> 00:05:03,540
Ez is adhat egy kis utalást arra vonatkozóan, hogyan méretezhető ez a nagyobb blokkokhoz.

85
00:05:04,900 --> 00:05:08,209
Technikailag is csak 11 bites adat lesz, és látni fogja, 

86
00:05:08,209 --> 00:05:13,260
hogy van egy enyhe árnyalat a 0. pozícióban zajló eseményekhez, de ez most ne aggódjon.

87
00:05:14,140 --> 00:05:17,757
Mint minden hibajavító algoritmus, ez is két játékost foglal magában, 

88
00:05:17,757 --> 00:05:21,478
egy feladót, aki a 4 speciális bit beállításáért felelős, és egy vevőt, 

89
00:05:21,478 --> 00:05:25,200
aki valamilyen ellenőrzés elvégzéséért és a hibák kijavításáért felelős.

90
00:05:25,200 --> 00:05:29,236
Természetesen a küldő és fogadó szavak valóban olyan gépekre vagy szoftverekre utalnak, 

91
00:05:29,236 --> 00:05:32,309
amelyek minden ellenőrzést elvégeznek, és az üzenet fogalma nagyon 

92
00:05:32,309 --> 00:05:34,740
tág értelemben értendő, beleértve például a tárolást.

93
00:05:35,340 --> 00:05:39,772
Végül is az adatok tárolása ugyanaz, mint üzenetet küldeni a múltból a jövőbe, 

94
00:05:39,772 --> 00:05:41,680
nem pedig egyik helyről a másikra.

95
00:05:42,560 --> 00:05:46,835
Tehát ez a beállítás, de mielőtt belemerülnénk, beszélnünk kell egy kapcsolódó ötletről, 

96
00:05:46,835 --> 00:05:50,390
amely Hammingnek a felfedezése idején frissen járt, egy olyan módszerről, 

97
00:05:50,390 --> 00:05:54,282
amely lehetővé teszi, hogy bármilyen bites hibát észleljen, de kijavítsa azokat, 

98
00:05:54,282 --> 00:05:56,300
ismert. az üzletben paritásellenőrzésként.

99
00:05:56,880 --> 00:05:59,775
A paritásellenőrzéshez csak egyetlen bitet választunk ki, 

100
00:05:59,775 --> 00:06:03,820
amelynek hangolásáért a küldő felelős, a többi pedig szabadon hordozhat üzenetet.

101
00:06:04,880 --> 00:06:08,564
Ennek a speciális bitnek az egyetlen feladata, hogy megbizonyosodjon arról, 

102
00:06:08,564 --> 00:06:11,280
hogy az üzenetben szereplő 1-ek száma páros szám legyen.

103
00:06:12,080 --> 00:06:15,028
Így például jelenleg az 1-ek teljes száma 7, ez páratlan, 

104
00:06:15,028 --> 00:06:18,841
tehát a küldőnek meg kell fordítania azt a speciális bitet, hogy 1 legyen, 

105
00:06:18,841 --> 00:06:19,960
így a szám páros lesz.

106
00:06:20,800 --> 00:06:23,817
De ha a blokk már páros számú 1-gyel indult volna, 

107
00:06:23,817 --> 00:06:26,420
akkor ez a speciális bit 0-ban maradt volna.

108
00:06:27,340 --> 00:06:31,364
Ez nagyon egyszerű, megtévesztően egyszerű, de hihetetlenül elegáns módja annak, 

109
00:06:31,364 --> 00:06:34,295
hogy a változás gondolatát az üzenetben bárhol lepároljuk, 

110
00:06:34,295 --> 00:06:36,780
hogy az egyetlen információrészletben tükröződjön.

111
00:06:37,500 --> 00:06:42,203
Figyelje meg, ha ennek az üzenetnek bármely része átfordul, akár 0-ról 1-re, 

112
00:06:42,203 --> 00:06:46,540
akár 1-ről 0-ra, az 1-ek teljes számát párosról páratlanra változtatja.

113
00:06:47,980 --> 00:06:52,455
Tehát ha Ön a címzett, megnézi ezt az üzenetet, és páratlan számú 1-et lát, 

114
00:06:52,455 --> 00:06:57,460
akkor biztosan tudhatja, hogy hiba történt, még akkor is, ha fogalma sincs, hol volt.

115
00:06:58,500 --> 00:07:02,480
A szakzsargonban azt, hogy egy bitcsoport páros vagy páratlan 1-es számmal rendelkezik, 

116
00:07:02,480 --> 00:07:03,340
paritásnak nevezik.

117
00:07:04,860 --> 00:07:07,880
Számokat is használhat, és azt mondhatja, hogy a paritás 0 vagy 1, 

118
00:07:07,880 --> 00:07:10,720
ami általában hasznosabb, ha elkezdi a matematikát az ötlettel.

119
00:07:11,220 --> 00:07:14,550
Ezt a speciális bitet pedig, amelyet a küldő a paritás szabályozására használ, 

120
00:07:14,550 --> 00:07:15,520
paritásbitnek nevezzük.

121
00:07:17,560 --> 00:07:21,194
És tulajdonképpen tisztán kell lennünk, ha a vevő páratlan paritást lát, 

122
00:07:21,194 --> 00:07:25,277
az nem feltétlenül azt jelenti, hogy csak egy hiba volt, lehet, hogy 3 hiba volt, 

123
00:07:25,277 --> 00:07:29,260
vagy 5, vagy bármilyen más páratlan szám, de biztosan tudhatják hogy nem 0 volt.

124
00:07:29,980 --> 00:07:32,878
Másrészt, ha 2 vagy páros számú hiba történt volna, 

125
00:07:32,878 --> 00:07:35,721
akkor az 1-ek végső száma továbbra is páros lenne, 

126
00:07:35,721 --> 00:07:40,125
így a fogadó nem lehet teljesen biztos abban, hogy a páros szám szükségszerűen 

127
00:07:40,125 --> 00:07:42,300
azt jelenti, hogy az üzenet hibamentes.

128
00:07:42,840 --> 00:07:47,180
Panaszkodhat, hogy egy üzenet, amely csak 2 bites átfordulással összezavarodik, 

129
00:07:47,180 --> 00:07:49,080
elég gyenge, és teljesen igaza van.

130
00:07:49,700 --> 00:07:53,933
Ne feledje azonban, hogy nincs olyan hibaészlelési vagy -javítási módszer, 

131
00:07:53,933 --> 00:07:58,900
amely 100%-os biztonságot adna afelől, hogy a kapott üzenetet a küldő szándéka szerinti.

132
00:07:59,580 --> 00:08:02,174
Végtére is, elegendő véletlenszerű zaj pusztán véletlenül 

133
00:08:02,174 --> 00:08:05,440
megváltoztathatja az egyik érvényes üzenetet egy másik érvényes üzenetté.

134
00:08:06,240 --> 00:08:10,890
Ehelyett az a cél, hogy egy bizonyos maximális számú hibaig robusztus sémát dolgozzunk 

135
00:08:10,890 --> 00:08:15,380
ki, vagy esetleg csökkentsük az ehhez hasonló téves pozitív eredmény valószínűségét.

136
00:08:16,260 --> 00:08:19,101
A paritásellenőrzések önmagukban meglehetősen gyengék, 

137
00:08:19,101 --> 00:08:23,647
de ha a változás gondolatát egy teljes üzeneten keresztül egyetlen bitig desztilláljuk, 

138
00:08:23,647 --> 00:08:27,160
azt adják, hogy hatékony építőelemet adnak a kifinomultabb sémákhoz.

139
00:08:27,940 --> 00:08:31,131
Például, amikor Hamming egy módot keresett annak azonosítására, 

140
00:08:31,131 --> 00:08:35,419
hol történt a hiba, nem csak azt, hogy megtörtént, kulcsfontosságú meglátása az volt, 

141
00:08:35,419 --> 00:08:38,261
hogy ha néhány paritásellenőrzést nem a teljes üzenetre, 

142
00:08:38,261 --> 00:08:41,352
hanem bizonyos gondosan kiválasztott részhalmazokra alkalmaz, 

143
00:08:41,352 --> 00:08:43,845
akkor megkérdezheti. egy kifinomultabb kérdéssor, 

144
00:08:43,845 --> 00:08:45,940
amely meghatározza bármely bithiba helyét.

145
00:08:46,680 --> 00:08:50,130
Az általános érzés egy kicsit olyan, mintha egy 20 kérdésből álló játékot játszanánk, 

146
00:08:50,130 --> 00:08:53,380
és igen vagy nem kérdéseket tennénk fel, amelyek kettévágják a lehetőségek terét.

147
00:08:54,160 --> 00:08:57,809
Tegyük fel például, hogy csak ezen a 8 biten végezzük el a paritásellenőrzést, 

148
00:08:57,809 --> 00:08:59,380
az összes páratlan számú pozíciót.

149
00:09:00,100 --> 00:09:04,141
Aztán ha hibát észlel, egy kicsit több információt ad a vevőnek arról, 

150
00:09:04,141 --> 00:09:08,240
hogy pontosan hol van a hiba, nevezetesen, hogy páratlan helyzetben van.

151
00:09:08,940 --> 00:09:12,782
Ha a 8 bit között nem észlelünk hibát, az vagy azt jelenti, 

152
00:09:12,782 --> 00:09:16,240
hogy nincs hiba, vagy valahol a páros pozíciókban van.

153
00:09:17,180 --> 00:09:20,858
Azt gondolhatnánk, hogy ha a paritásellenőrzést a bitek felére korlátozzuk, 

154
00:09:20,858 --> 00:09:25,070
az kevésbé hatékony, de ha más jól megválasztott ellenőrzésekkel együtt hajtjuk végre, 

155
00:09:25,070 --> 00:09:27,200
akkor az intuitív módon sokkal erősebbet ad.

156
00:09:29,240 --> 00:09:33,036
Ne feledje, hogy a paritásellenőrzés tényleges beállításához speciális 

157
00:09:33,036 --> 00:09:36,620
bitet kell kijelölni, amely szabályozza a teljes csoport paritását.

158
00:09:37,480 --> 00:09:39,180
Itt csak válasszuk ki az 1. pozíciót.

159
00:09:39,720 --> 00:09:43,323
A bemutatott példában ennek a 8 bitnek a paritása jelenleg páratlan, 

160
00:09:43,323 --> 00:09:46,980
tehát a feladó felelős a paritásbit átkapcsolásáért, most pedig páros.

161
00:09:47,940 --> 00:09:50,680
Ez csak 1 a 4 paritásellenőrzésből, amit elvégezünk.

162
00:09:50,920 --> 00:09:54,524
A második ellenőrzés a rács jobb felében található 8 bit között van, 

163
00:09:54,524 --> 00:09:56,300
legalábbis ahogy itt megrajzoltuk.

164
00:09:56,680 --> 00:09:59,713
Ezúttal a 2-es pozíciót használhatjuk paritásbitként, 

165
00:09:59,713 --> 00:10:03,981
így ennek a 8 bitnek már van páros paritása, és a küldő jól érezheti magát, 

166
00:10:03,981 --> 00:10:06,060
ha a 2-es bitet változatlanul hagyja.

167
00:10:07,020 --> 00:10:11,271
Aztán a másik végén, ha a vevő ellenőrzi ennek a csoportnak a paritását, és azt találja, 

168
00:10:11,271 --> 00:10:15,380
hogy ez furcsa, akkor tudni fogja, hogy a hiba valahol a jobb oldali 8 bit között van.

169
00:10:15,820 --> 00:10:20,580
Ellenkező esetben ez azt jelenti, hogy nincs hiba, vagy a hiba valahol a bal oldalon van.

170
00:10:21,120 --> 00:10:24,338
Vagy azt hiszem, két hiba is lehetett, de jelenleg azt feltételezzük, 

171
00:10:24,338 --> 00:10:26,500
hogy legfeljebb egy hiba van az egész blokkban.

172
00:10:26,940 --> 00:10:28,740
Ennél többért teljesen összeomlanak a dolgok.

173
00:10:29,160 --> 00:10:32,519
Mielőtt megvizsgálnánk a következő két ellenőrzést, gondoljunk át egy pillanatra, 

174
00:10:32,519 --> 00:10:35,100
hogy az első kettő mit tesz lehetővé, ha együtt tekintjük őket.

175
00:10:35,800 --> 00:10:39,660
Tegyük fel, hogy hibát észlel a páratlan oszlopok között és a jobb felében.

176
00:10:40,200 --> 00:10:43,040
Ez szükségszerűen azt jelenti, hogy a hiba valahol az utolsó oszlopban van.

177
00:10:43,820 --> 00:10:46,564
Ha a páratlan oszlopban nem volt hiba, de a jobb felében volt, 

178
00:10:46,564 --> 00:10:49,700
akkor ez azt jelzi, hogy a másodiktól az utolsóig terjedő oszlopban van.

179
00:10:50,440 --> 00:10:52,957
Hasonlóképpen, ha hiba van a páratlan oszlopokban, 

180
00:10:52,957 --> 00:10:56,560
de nem a jobb felében, akkor tudja, hogy valahol a második oszlopban van.

181
00:10:56,560 --> 00:10:59,475
És ha a két paritásellenőrzés egyike sem észlel semmit, 

182
00:10:59,475 --> 00:11:03,120
akkor az egyetlen hely, ahol hiba lehet, a bal szélső oszlopban lehet.

183
00:11:03,340 --> 00:11:06,120
De ez azt is jelentheti, hogy egyáltalán nincs hiba.

184
00:11:06,300 --> 00:11:08,548
Ez egy meglehetősen elcsépelt módja annak, hogy két 

185
00:11:08,548 --> 00:11:10,840
paritásellenőrzés segítségével rögzítsük az oszlopot.

186
00:11:11,480 --> 00:11:13,640
Innentől valószínűleg sejtheti, mi következik.

187
00:11:13,800 --> 00:11:16,140
Alapvetően ugyanazt csináljuk, csak a sorok esetében.

188
00:11:16,440 --> 00:11:20,900
A páratlan sorokon paritásellenőrzés történik, a 4-es pozíciót használva paritásbitként.

189
00:11:21,380 --> 00:11:24,401
Tehát ebben a példában ennek a csoportnak már van páros paritása, 

190
00:11:24,401 --> 00:11:25,820
így a 4. bit 0-ra lesz állítva.

191
00:11:26,560 --> 00:11:29,436
És végül van egy paritásellenőrzés az alsó két sorban, 

192
00:11:29,436 --> 00:11:31,580
a 8-as pozíciót használva paritásbitként.

193
00:11:32,120 --> 00:11:34,969
Ebben az esetben úgy tűnik, hogy a küldőnek be kell kapcsolnia a 8-as bitet, 

194
00:11:34,969 --> 00:11:36,820
hogy egyenletes paritást biztosítson a csoportnak.

195
00:11:37,700 --> 00:11:40,055
Ahogy az első két ellenőrzés lehetővé teszi az oszlop rögzítését, 

196
00:11:40,055 --> 00:11:41,840
a következő kettő lehetővé teszi a sor rögzítését.

197
00:11:42,880 --> 00:11:47,540
Példaként képzeljük el, hogy az átvitel során hiba történik, mondjuk a 3. pozícióban.

198
00:11:48,180 --> 00:11:51,945
Nos, ez érinti az első paritáscsoportot, és a második paritáscsoportot is, 

199
00:11:51,945 --> 00:11:55,560
tehát a vevő tudja, hogy valahol hiba van abban a jobb oldali oszlopban.

200
00:11:56,100 --> 00:12:00,540
De ez nem érinti a harmadik csoportot, és nem érinti a negyedik csoportot.

201
00:12:01,240 --> 00:12:04,545
Ez pedig lehetővé teszi, hogy a vevő pontosan az első sorig azonosítsa a hibát, 

202
00:12:04,545 --> 00:12:07,520
ami szükségszerűen a 3. pozíciót jelenti, így ki tudja javítani a hibát.

203
00:12:08,580 --> 00:12:11,350
Szívesen szánhat egy pillanatot arra, hogy meggyőzze magát arról, 

204
00:12:11,350 --> 00:12:14,204
hogy a négy kérdésre adott válaszok valóban mindig lehetővé teszik, 

205
00:12:14,204 --> 00:12:17,100
hogy meghatározzon egy adott helyet, függetlenül attól, hogy hol van.

206
00:12:17,720 --> 00:12:20,115
Valójában az okoskodók még azt is észrevehetik, 

207
00:12:20,115 --> 00:12:23,060
hogy van kapcsolat e kérdések és a bináris számolás között.

208
00:12:23,500 --> 00:12:25,886
És ha igen, hadd hangsúlyozzam ismét, állj meg, 

209
00:12:25,886 --> 00:12:28,920
próbáld meg magad megvonni az összefüggést, mielőtt elrontom.

210
00:12:30,500 --> 00:12:36,060
Ha kíváncsi arra, hogy mi történik, ha magát a paritásbitet érinti, akkor megpróbálhatja.

211
00:12:36,440 --> 00:12:38,520
Szánjon egy pillanatot arra, hogy gondolja végig, 

212
00:12:38,520 --> 00:12:41,558
hogyan lehet e négy speciális bit közötti hibát ugyanúgy nyomon követni, 

213
00:12:41,558 --> 00:12:44,180
mint bármely mást, ugyanazzal a négy kérdésből álló csoporttal.

214
00:12:47,060 --> 00:12:51,219
Teljesen mindegy, hiszen végső soron az üzenetbiteket akarjuk megvédeni, 

215
00:12:51,219 --> 00:12:53,100
a hibajavító bitek csak haladnak.

216
00:12:53,600 --> 00:12:57,820
De ezeknek a biteknek a védelme is melléktermékként természetesen kiesik a rendszerből.

217
00:12:59,200 --> 00:13:01,760
Azt is élvezheti, ha előre látja, hogy ez hogyan skálázódik.

218
00:13:02,300 --> 00:13:06,849
Ha például egy 256 bites méretű blokkot használtunk egy hely meghatározásához, 

219
00:13:06,849 --> 00:13:10,246
akkor mindössze nyolc igen vagy nem kérdésre van szüksége, 

220
00:13:10,246 --> 00:13:12,780
hogy binárisan keressen egy bizonyos helyre.

221
00:13:15,640 --> 00:13:17,997
És ne feledje, minden kérdés csak egyetlen bitet 

222
00:13:17,997 --> 00:13:20,500
igényel a megfelelő paritásellenőrzés beállításához.

223
00:13:23,160 --> 00:13:25,761
Lehet, hogy néhányan már látják, de később beszélünk arról, 

224
00:13:25,761 --> 00:13:29,360
hogyan lehet szisztematikusan egy-két percen belül kideríteni, mik ezek a kérdések.

225
00:13:29,880 --> 00:13:31,697
Remélhetőleg ez a vázlat elegendő ahhoz, hogy értékeljük 

226
00:13:31,697 --> 00:13:33,260
az itt fejlesztendő tevékenységünk hatékonyságát.

227
00:13:33,260 --> 00:13:37,579
Az első dolog, a nyolc kiemelt paritásbit kivételével, 

228
00:13:37,579 --> 00:13:41,820
bármi lehet, bármilyen üzenetet vagy adatot hordozhat.

229
00:13:41,820 --> 00:13:45,687
A 8 bit redundáns abban az értelemben, hogy teljesen az üzenet többi része 

230
00:13:45,687 --> 00:13:50,020
határozza meg őket, de ez sokkal okosabb módszer, mint az üzenet egészének másolása.

231
00:13:53,600 --> 00:13:56,041
És mégis, ennyire kevés feladással képes lenne 

232
00:13:56,041 --> 00:13:58,380
azonosítani és kijavítani bármelyik bithibát.

233
00:13:59,200 --> 00:14:00,400
Hát majdnem.

234
00:14:00,960 --> 00:14:04,787
Oké, itt az egyetlen probléma az, hogy ha a négy paritásellenőrzés egyike sem 

235
00:14:04,787 --> 00:14:08,910
észlel hibát, ami azt jelenti, hogy a speciálisan kiválasztott 8 bites részhalmazok 

236
00:14:08,910 --> 00:14:12,148
mindegyikének páros paritása van, ahogy a küldő szándéka szerint, 

237
00:14:12,148 --> 00:14:16,369
akkor ez vagy azt jelenti, hogy egyáltalán nem volt hiba. , vagy leszűkít minket a 0. 

238
00:14:16,369 --> 00:14:16,860
pozícióba.

239
00:14:17,740 --> 00:14:21,750
Négy igen vagy nem kérdés esetén 16 lehetséges kimenetelünk van a 

240
00:14:21,750 --> 00:14:26,673
paritásellenőrzésünkhöz, és ez elsőre tökéletesnek tűnik a blokk 16 pozíciójából 

241
00:14:26,673 --> 00:14:31,900
1 pontos meghatározásához, de közölnie kell a 17. eredményt is, a nem hibát. feltétel.

242
00:14:33,020 --> 00:14:37,300
A megoldás itt valójában nagyon egyszerű, csak felejtsd el teljesen a 0. bitet.

243
00:14:37,840 --> 00:14:40,711
Tehát amikor elvégezzük a négy paritásellenőrzésünket, és azt látjuk, 

244
00:14:40,711 --> 00:14:43,460
hogy mindegyik páros, az egyértelműen azt jelenti, hogy nincs hiba.

245
00:14:44,240 --> 00:14:47,484
Ez azt jelenti, hogy ahelyett, hogy egy 16 bites blokkal dolgoznánk, 

246
00:14:47,484 --> 00:14:51,574
mi egy 15 bites blokkkal dolgozunk, ahol a bitek közül 11 szabadon hordozhat üzenetet, 

247
00:14:51,574 --> 00:14:53,220
és közülük 4 redundancia miatt van.

248
00:14:53,780 --> 00:15:00,200
És ezzel most megvan, amit az üzletemberek 15-11 Hamming-kódként emlegetnének.

249
00:15:00,460 --> 00:15:03,448
Ennek ellenére jó, hogy van egy blokkméret, amely 2-es tiszta hatványt jelent, 

250
00:15:03,448 --> 00:15:05,718
és van egy okos módszer, amellyel megtarthatjuk a 0. bitet, 

251
00:15:05,718 --> 00:15:08,140
és rávehetjük, hogy egy kis plusz munkát végezzen el helyettünk.

252
00:15:08,700 --> 00:15:11,335
Ha paritásbitként használjuk az egész blokkon, 

253
00:15:11,335 --> 00:15:15,540
akkor ténylegesen felismerjük a 2 bites hibákat, bár nem tudjuk kijavítani.

254
00:15:16,160 --> 00:15:16,820
Íme, hogyan működik.

255
00:15:17,180 --> 00:15:20,916
Miután beállítottuk a négy speciális hibajavító bitet, beállítjuk azt a 0-at, 

256
00:15:20,916 --> 00:15:24,940
hogy a teljes blokk paritása páros legyen, akárcsak egy normál paritásellenőrzésnél.

257
00:15:25,700 --> 00:15:29,775
Most, ha egyetlen bites hiba van, akkor a teljes blokk paritása páratlanra vált, 

258
00:15:29,775 --> 00:15:33,600
de a négy hibajavító ellenőrzésnek köszönhetően ezt mindenképpen megfognánk.

259
00:15:34,160 --> 00:15:39,086
Ha azonban két hiba van, akkor a teljes paritás vissza fog váltani párosra, 

260
00:15:39,086 --> 00:15:44,791
de a vevő továbbra is látja, hogy legalább valami hiba történt a négy paritásellenőrzés 

261
00:15:44,791 --> 00:15:45,180
miatt.

262
00:15:45,180 --> 00:15:47,816
Tehát ha összességében egyenletes paritást észlelnek, 

263
00:15:47,816 --> 00:15:51,186
de a többi ellenőrzésnél valami nem nulla történik, akkor azt jelzi, 

264
00:15:51,186 --> 00:15:52,700
hogy legalább két hiba történt.

265
00:15:53,520 --> 00:15:54,000
Hát nem okos?

266
00:15:54,300 --> 00:15:57,175
Annak ellenére, hogy ezeket a 2 bites hibákat nem tudjuk kijavítani, 

267
00:15:57,175 --> 00:16:00,426
pusztán az egyetlen zavaró 0. bit visszaállításával lehetővé teszi számunkra, 

268
00:16:00,426 --> 00:16:01,260
hogy észleljük őket.

269
00:16:02,260 --> 00:16:05,220
Ez meglehetősen szabványos, kiterjesztett Hamming-kódként ismert.

270
00:16:06,540 --> 00:16:09,313
Technikailag szólva, most már teljes leírása van arról, 

271
00:16:09,313 --> 00:16:12,880
hogy mit csinál egy Hamming-kód, legalábbis egy 16 bites blokk esetében.

272
00:16:12,880 --> 00:16:16,889
De azt hiszem, sokkal elégedettebb lesz, ha ellenőrizni fogja a megértését, 

273
00:16:16,889 --> 00:16:21,320
és mindent megszilárdít idáig úgy, hogy egy teljes példát tesz az elejétől a végéig.

274
00:16:22,080 --> 00:16:24,300
De végigcsinálom veled, hogy ellenőrizd magad.

275
00:16:25,120 --> 00:16:27,838
Üzenet beállításához, legyen szó szó szerinti üzenetről, 

276
00:16:27,838 --> 00:16:30,223
amelyet térben fordít le, vagy bizonyos adatokat, 

277
00:16:30,223 --> 00:16:32,752
amelyeket idővel tárolni szeretne, az első lépés az, 

278
00:16:32,752 --> 00:16:34,660
hogy fel kell osztani 11 bites részekre.

279
00:16:35,580 --> 00:16:39,760
Minden egyes darab egy hibaálló 16 bites blokkba kerül.

280
00:16:39,760 --> 00:16:43,220
Tehát vegyük ezt példaként, és dolgozzuk ki ténylegesen.

281
00:16:43,740 --> 00:16:44,740
Hajrá, tényleg tedd meg!

282
00:16:44,740 --> 00:16:47,020
Álljunk meg, és próbáljuk összerakni ezt a blokkot.

283
00:16:52,720 --> 00:16:53,680
Oké, készen állsz?

284
00:16:54,240 --> 00:16:58,650
Ne feledje, hogy a 0 pozíció a 2 többi hatványával együtt hibajavítási feladatra van 

285
00:16:58,650 --> 00:17:03,320
fenntartva, tehát először az üzenetbiteket az összes többi helyre, sorrendben helyezze el.

286
00:17:05,339 --> 00:17:08,790
Ennek a csoportnak páros paritásúnak kell lennie, ami már így is van, 

287
00:17:08,790 --> 00:17:12,339
tehát azt a paritásbitet az 1-es pozícióban 0-ra kellett volna állítani.

288
00:17:13,020 --> 00:17:15,450
A következő csoport páratlan paritással kezdődik, 

289
00:17:15,450 --> 00:17:17,880
ezért a paritásbitjét 1-re kellett volna állítani.

290
00:17:19,160 --> 00:17:21,605
Az ezt követő csoport páratlan paritással kezdődik, 

291
00:17:21,605 --> 00:17:24,240
tehát ismét 1-re kellett volna állítani a paritásbitjét.

292
00:17:24,780 --> 00:17:27,318
És az utolsó csoportnak is van páratlan paritása, 

293
00:17:27,318 --> 00:17:30,060
vagyis azt a bitet a 8-as pozícióban 1-re állítjuk be.

294
00:17:31,300 --> 00:17:35,200
Utolsó lépésként a teljes blokk páros paritású, 

295
00:17:35,200 --> 00:17:40,320
vagyis beállíthatja a 0 bitszámot, az átfogó paritásbitet 0-ra.

296
00:17:41,340 --> 00:17:44,740
Tehát amikor ez a blokk elküldésre kerül, a négy speciális 

297
00:17:44,740 --> 00:17:48,140
részhalmaz és a blokk egészének paritása páros vagy 0 lesz.

298
00:17:48,820 --> 00:17:52,180
A gyakorlat második részeként játsszuk a befogadó szerepét.

299
00:17:53,480 --> 00:17:56,929
Természetesen ez azt jelentené, hogy még nem tudja, mi ez az üzenet, 

300
00:17:56,929 --> 00:17:59,780
talán néhányan megjegyezték, de tegyük fel, hogy még nem.

301
00:18:00,020 --> 00:18:04,805
Azt fogom tenni, hogy megváltoztatom a 0, 1 vagy 2 bitet ebben a blokkban, 

302
00:18:04,805 --> 00:18:07,740
majd megkérem, hogy találja ki, mit csináltam.

303
00:18:08,260 --> 00:18:10,810
Tehát ismét álljon meg, és próbálja meg megoldani.

304
00:18:18,790 --> 00:18:23,677
Oké, tehát Ön, mint vevő, most ellenőrizze az első paritáscsoportot, és láthatja, 

305
00:18:23,677 --> 00:18:27,910
hogy az páros, tehát minden létező hibának páros oszlopban kell lennie.

306
00:18:29,690 --> 00:18:33,154
A következő ellenőrzés páratlan számot ad nekünk, jelezve, 

307
00:18:33,154 --> 00:18:37,030
hogy legalább egy hiba van, és leszűkítve erre a konkrét oszlopra.

308
00:18:38,550 --> 00:18:41,790
A harmadik ellenőrzés kiegyenlített, ami még tovább csökkenti a lehetőségeket.

309
00:18:42,650 --> 00:18:46,767
Az utolsó paritásellenőrzés pedig páratlan, és azt jelzi, hogy valahol alul van egy hiba, 

310
00:18:46,767 --> 00:18:49,650
amiről mostanra láthatjuk, hogy a 10-es pozícióban kell lennie.

311
00:18:51,490 --> 00:18:55,407
Sőt, az egész blokk paritása furcsa, ami azt a bizonyosságot ad nekünk, 

312
00:18:55,407 --> 00:18:57,530
hogy egy átfordulás volt, és nem kettő.

313
00:18:58,070 --> 00:18:59,970
Ha három vagy több, akkor minden fogadás megszűnik.

314
00:19:01,310 --> 00:19:05,550
A 10-es számú bit kijavítása után a korrekcióhoz nem használt 11 bitet 

315
00:19:05,550 --> 00:19:09,014
kihúzva megkapjuk az eredeti üzenet megfelelő szegmensét, 

316
00:19:09,014 --> 00:19:14,390
amely ha visszatekerjük és összehasonlítjuk, valóban pontosan az, amivel kezdtük a példát.

317
00:19:15,710 --> 00:19:19,487
És most, hogy tudja, hogyan kell mindezt kézzel megtenni, szeretném megmutatni, 

318
00:19:19,487 --> 00:19:23,170
hogyan hajthatja végre ennek a logikának a lényegét egyetlen Python-kódsorral.

319
00:19:23,870 --> 00:19:28,226
Látod, amit még nem mondtam el, az az, hogy valójában mennyire elegáns ez az algoritmus, 

320
00:19:28,226 --> 00:19:31,407
milyen egyszerű rávenni a gépet, hogy rámutasson a hiba helyére, 

321
00:19:31,407 --> 00:19:35,617
hogyan lehet szisztematikusan skálázni, és hogyan tudjuk keretbe foglalni az egészet. 

322
00:19:35,617 --> 00:19:38,750
ez egyetlen művelet, nem pedig több különálló paritásellenőrzés.

323
00:19:39,430 --> 00:19:41,310
Ha szeretnéd megérteni, mire gondolok, csatlakozz hozzám a 2. részhez.

