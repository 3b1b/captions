1
00:00:00,000 --> 00:00:02,560
Feltételezem, hogy itt mindenki látta már az előző részt.

2
00:00:03,060 --> 00:00:07,184
A Hamming-kódokról beszéltünk. Egy olyan adatblokk létrehozásának módjáról, 

3
00:00:07,184 --> 00:00:09,843
ahol a legtöbb bit egy értelmes üzenetet hordoz, 

4
00:00:09,843 --> 00:00:14,456
a többi egyfajta redundanciaként működik, oly módon, hogy ha bármelyik bit átbillen, 

5
00:00:14,456 --> 00:00:18,580
akár egy üzenetbit, akár egy redundanciabit, a vevő képes lesz azonosítani, 

6
00:00:18,580 --> 00:00:21,240
hogy hiba történt, és hogyan kell kijavítani azt.

7
00:00:21,880 --> 00:00:24,309
A bemutatott alapötlet az volt, hogy hogyan lehet a 

8
00:00:24,309 --> 00:00:27,160
paritásellenőrzéseket egyfajta bináris keresésként használni.

9
00:00:28,980 --> 00:00:32,268
Abban a videóban a cél az volt, hogy a Hamming-kódokat 

10
00:00:32,268 --> 00:00:34,600
gyakorlat orientáltan újra felfedezzük.

11
00:00:35,180 --> 00:00:38,492
De ha elkezdünk gondolkodni a tényleges megvalósításon, rájöhetünk, 

12
00:00:38,492 --> 00:00:41,170
hogy a korábbi megközelítésünk nem érzékelteti eléggé, 

13
00:00:41,170 --> 00:00:43,460
hogy ezek a kódok valójában mennyire elegánsak.

14
00:00:43,920 --> 00:00:46,558
Azt gondolhatnád, hogy olyan algoritmust kell írnod, 

15
00:00:46,558 --> 00:00:48,948
amely számon tartja a hiba  lehetséges helyeit, 

16
00:00:48,948 --> 00:00:51,488
és minden egyes ellenőrzésnél felezi a tartományt, 

17
00:00:51,488 --> 00:00:53,480
de ez valójában sokkal egyszerűbb ennél.

18
00:00:53,940 --> 00:00:57,573
Ha az előző videóban bemutatott négy paritás-ellenőrzés eredményét 

19
00:00:57,573 --> 00:01:01,260
összeolvasod egyesek és nullák formájában, igenek és nemek helyett, 

20
00:01:01,260 --> 00:01:04,080
akkor az szó szerint kiírja a hiba helyét binárisan.

21
00:01:04,780 --> 00:01:07,887
Például a 7-es szám binárisan 0111-nek néz ki, 

22
00:01:07,887 --> 00:01:11,260
ami lényegében azt jelenti, hogy 4 plusz 2 plusz 1.

23
00:01:12,540 --> 00:01:14,460
És figyeljük meg, hol helyezkedik el a 7-es pozíció.

24
00:01:14,840 --> 00:01:20,240
Hatással van az első csoport paritására, a második és a harmadikéra is, 

25
00:01:20,240 --> 00:01:21,740
de az utolsóéra nem.

26
00:01:22,220 --> 00:01:24,930
Tehát a négy ellenőrzés eredményeinek alulról felfelé 

27
00:01:24,930 --> 00:01:27,540
történő összeolvasása valóban megadja a hiba helyét.

28
00:01:28,320 --> 00:01:31,140
A 7-es példában nincs semmi különleges, ez általánosságban is működik.

29
00:01:31,780 --> 00:01:35,820
Ez megdöbbentően egyszerűvé teszi az egész rendszer hardveres megvalósításának logikáját.

30
00:01:37,240 --> 00:01:41,024
Ha meg akarod érteni, hogy miért működik ez a trükk, 

31
00:01:41,024 --> 00:01:46,880
vedd a pozíciókhoz tartozó 16 indexcímkét, de a 10-es számrendszer helyett inkább 

32
00:01:46,880 --> 00:01:49,880
binárisan írjuk le őket, 0000-tól 1111-ig.

33
00:01:50,560 --> 00:01:53,771
Ahogy ezeket a bináris címkéket visszatesszük a dobozukba, 

34
00:01:53,771 --> 00:01:57,800
hadd hangsúlyozzam, hogy ezek különböznek a ténylegesen küldött adatoktól.

35
00:01:58,320 --> 00:02:01,015
Ezek csak kitalált címkék, amelyek segítenek neked 

36
00:02:01,015 --> 00:02:03,500
és nekem beazonosítani a négy paritáscsoportot.

37
00:02:04,140 --> 00:02:07,524
Annak eleganciáját, hogy ezen értékeket binárisan kezelhetjük, 

38
00:02:07,524 --> 00:02:12,360
talán aláássa az a zűrzavar, hogy igazából minden más is amit nézünk binárisan van leírva.

39
00:02:13,020 --> 00:02:14,120
De hidd el megéri.

40
00:02:14,800 --> 00:02:18,240
Először csak a címkék utolsó bitjére koncentrálj.

41
00:02:19,880 --> 00:02:23,220
Majd emeld ki azokat a pozíciókat, ahol az utolsó bit 1.

42
00:02:24,240 --> 00:02:28,723
A négy paritáscsoportunk közül így az elsőt kapjuk, ami azt jelenti, 

43
00:02:28,723 --> 00:02:33,206
hogy az első ellenőrzést egy kérdésként értelmezhetjük: Ha van hiba, 

44
00:02:33,206 --> 00:02:35,740
akkor a hely címkéjének utolsó bitje 1?

45
00:02:38,200 --> 00:02:41,132
Hasonlóképpen, ha az utolsó előtti bitre koncentrálunk, 

46
00:02:41,132 --> 00:02:43,908
és kiemeljük az összes olyan pozíciót, ahol ez 1-es, 

47
00:02:43,908 --> 00:02:46,160
akkor megkapjuk a második paritáscsoportot.

48
00:02:46,740 --> 00:02:50,395
Más szóval, ezzel a második ellenőrzéssel azt kérdezzük, 

49
00:02:50,395 --> 00:02:54,500
hogy: Hé! Megint én. Ha van hiba, a címke utolsó előtti bitje 1?

50
00:02:55,760 --> 00:02:56,900
És így tovább.

51
00:02:57,220 --> 00:03:00,594
A harmadik paritásellenőrzés minden olyan pozíciót lefed, 

52
00:03:00,594 --> 00:03:04,376
amelynek a harmadik bitje be van kapcsolva, a negyedik bit pedig 

53
00:03:04,376 --> 00:03:08,740
az utolsó nyolc pozíciót, vagyis azokat, amelyek legmagasabb rendű bitje 1.

54
00:03:09,740 --> 00:03:13,740
Minden amit eddig csináltunk, ugyanazt a négy kérdés válaszolja meg. 

55
00:03:13,740 --> 00:03:17,740
Ezek eredményéből pedig összeáll a hiba pozíciójának bináris leírása.

56
00:03:19,620 --> 00:03:21,480
Remélem, ez két dolgot is tisztáz.

57
00:03:22,040 --> 00:03:24,674
Az első, hogy hogyan lehet szisztematikusan általánosítani 

58
00:03:24,674 --> 00:03:26,460
a nagyobb kettes hatvány blokkméretekre.

59
00:03:26,960 --> 00:03:29,916
Ha minden egyes pozíció leírásához több bitre van szükség, 

60
00:03:29,916 --> 00:03:32,321
például hat bitre 64 hely megkülönböztetéséhez, 

61
00:03:32,321 --> 00:03:36,680
akkor mindegyik bithez tartozni fog egy-egy paritáscsoport, amelyet ellenőriznünk kell.

62
00:03:38,400 --> 00:03:41,509
Akik látták a sakktáblás rejtvényt, amit Matt Parkerrel csináltam, 

63
00:03:41,509 --> 00:03:43,180
mindezt igen ismerősnek találhatják.

64
00:03:43,660 --> 00:03:46,585
Ugyanaz az alaplogika, csak egy másik probléma megoldására, 

65
00:03:46,585 --> 00:03:48,780
egy 64 négyzetméteres sakktáblára alkalmazva.

66
00:03:49,880 --> 00:03:52,423
A második dolog, amit remélem világossá tudok tenni, 

67
00:03:52,423 --> 00:03:56,312
hogy miért ülnek a paritásbitjeink olyan pozíciókban, amelyek a kettő hatványai, 

68
00:03:56,312 --> 00:03:57,320
például 1, 2, 4 és 8.

69
00:03:58,000 --> 00:04:03,000
Ezek azok a pozíciók, amelyek bináris ábrázolása csak egyetlen bekapcsolt bitet tartalmaz.

70
00:04:03,600 --> 00:04:06,447
Ez azt jelenti, hogy minden egyes paritásbit a négy 

71
00:04:06,447 --> 00:04:09,460
paritáscsoport közül csak és kizárólag egyhez tartozik.

72
00:04:12,040 --> 00:04:15,876
Ezt nagyobb példáknál is láthatjuk, ahol bármekkora méretet választunk, 

73
00:04:15,876 --> 00:04:19,339
minden paritásbit praktikus módon csak az egyik csoportot érinti.

74
00:04:25,600 --> 00:04:30,401
Amint megértettük, hogy ezek a paritásellenőrzések, amelyekre oly sok időt fordítottunk, 

75
00:04:30,401 --> 00:04:34,554
nem többek, mint egy okos módja annak, hogy a hiba helyét binárisan leírjuk, 

76
00:04:34,554 --> 00:04:39,194
akkor kapcsolatot tudunk teremteni a Hamming kódok értelmezésének egy másik módjával, 

77
00:04:39,194 --> 00:04:43,240
amely sokkal egyszerűbb, elegánsabb, és egyetlen kódsorral megvalósítható. 

78
00:04:43,660 --> 00:04:45,500
Ez a XOR függvényen alapul.

79
00:04:46,940 --> 00:04:50,220
A XOR - azok számára, akik nem tudják - a kizáró vagy rövidítése.

80
00:04:50,780 --> 00:04:55,230
Ha két bit XOR-ját vesszük, akkor 1-et kapunk, ha valamelyik bit be van kapcsolva, 

81
00:04:55,230 --> 00:04:59,360
de 0 lesz, ha mindkettő be van kapcsolva, vagy ha mindkettő ki van kapcsolva.

82
00:05:00,100 --> 00:05:02,980
Másképp fogalmazva, ez a két bit paritását adja.

83
00:05:03,540 --> 00:05:06,760
Matematikusként én legszívesebben a bináris összeadás alapjaként gondolok rá.

84
00:05:07,360 --> 00:05:10,556
Gyakran említjük két különböző bitsorozat XOR-ját, 

85
00:05:10,556 --> 00:05:13,440
amely alapvetően komponensenként végzi el ezt.

86
00:05:13,680 --> 00:05:15,720
Olyan mint az összeadás, csak nincs tovább vitt érték.

87
00:05:16,500 --> 00:05:19,297
A matematikához jobban értők úgy is elképzelhetik, 

88
00:05:19,297 --> 00:05:22,480
mint két vektor összegét, aminek kettes maradékát vesszük.

89
00:05:23,500 --> 00:05:27,521
Ha most Python-ban két egész szám közé hatványjelet írsz és lefuttatod, 

90
00:05:27,521 --> 00:05:31,096
akkor pont ezt teszi a beírt számok bináris reprezentációjával, 

91
00:05:31,096 --> 00:05:32,940
amit a háttérben vált oda-vissza.

92
00:05:34,960 --> 00:05:39,210
Számunkra ebből az a lényeges, hogy különböző bitsorozatok XOR-ját 

93
00:05:39,210 --> 00:05:44,095
véve gyakorlatilag egy csomó különálló csoport paritását tudjuk kiszámítani, 

94
00:05:44,095 --> 00:05:47,140
mint az oszlopok esetében, mindezt egy csapásra.

95
00:05:51,260 --> 00:05:54,835
Ez egy elég elegáns módot ad arra, hogy a Hamming-kód algoritmusunk 

96
00:05:54,835 --> 00:05:58,780
többszörös paritás-ellenőrzését egyetlen műveletbe csomagolva képzeljük el.

97
00:05:59,480 --> 00:06:02,180
Bár első pillantásra nagyon másnak tűnik.

98
00:06:02,820 --> 00:06:07,835
Konkrétan írjuk le a 16 pozíciót binárisan, ahogyan korábban is tettük, 

99
00:06:07,835 --> 00:06:12,641
és most csak azokat a pozíciókat emeljük ki, ahol az üzenetbit 1-es, 

100
00:06:12,641 --> 00:06:17,100
majd gyűjtsük össze ezeket egy nagy oszlopba, és vegyük a XOR-t.

101
00:06:19,260 --> 00:06:23,815
Valószínűleg kitalálhatod, hogy az eredményként kapott alul ülő négy bit ugyanazt adja, 

102
00:06:23,815 --> 00:06:26,456
mint az általunk megismert négy paritásellenőrzés, 

103
00:06:26,456 --> 00:06:29,200
de nyugodtan gondold csak végig, hogy pontosan miért.

104
00:06:32,220 --> 00:06:36,376
Ez az utolsó oszlop például megszámolja az összes olyan pozíciót, 

105
00:06:36,376 --> 00:06:40,658
amelynek utolsó bitje 1, de már csak a kiemelt pozíciók számítanak, 

106
00:06:40,658 --> 00:06:45,760
így gyakorlatilag a kiemelt pozíciók számát kapjuk meg az első paritáscsoportból.

107
00:06:46,240 --> 00:06:46,800
Ez így érthető?

108
00:06:49,080 --> 00:06:52,024
Hasonlóképpen, a következő oszlop azt számolja, 

109
00:06:52,024 --> 00:06:57,423
hogy hány olyan pozíció van a második paritáscsoportban, amelyek utolsó előtti bitje 1, 

110
00:06:57,423 --> 00:07:00,000
emellett szintén kiemeltek. És így tovább.

111
00:07:00,260 --> 00:07:03,960
Ez valójában ugyanaz amit eddig is csináltunk, csak más szemszögből szemlélve.

112
00:07:07,760 --> 00:07:09,600
És így már tudod, hogy hová vezet innen az út.

113
00:07:10,000 --> 00:07:14,267
A küldő feladata, hogy néhány speciális paritásbitet átkapcsoljon, 

114
00:07:14,267 --> 00:07:16,560
hogy az összeg biztosan 0000 legyen.

115
00:07:19,040 --> 00:07:23,371
Ha idáig sikerült eljutnunk, akkor már könnyebben át tudjuk gondolni, 

116
00:07:23,371 --> 00:07:27,580
hogy ez a négy bit az alján miért írja le közvetlenül a hiba helyét.

117
00:07:28,460 --> 00:07:31,860
Tegyük fel, hogy ebben a blokkban egy bit 0-ról 1-re változik.

118
00:07:32,600 --> 00:07:38,375
Ez azt jelenti, hogy a bit helyének információja most már benne lesz a teljes XOR-ban, 

119
00:07:38,375 --> 00:07:43,820
ami megváltoztatja az összeget 0-ról az újonnan bevezetett hiba pozíciója értékre.

120
00:07:44,460 --> 00:07:47,012
Valamivel kevésbé nyilvánvaló, hogy ugyanez igaz, 

121
00:07:47,012 --> 00:07:49,360
ha egy hiba miatt az 1-es érték 0-ra változik.

122
00:07:50,180 --> 00:07:53,696
Tudod, ha egy bitsorozatot ily módon összeadod önmagával, 

123
00:07:53,696 --> 00:07:57,940
az eredmény nulla lesz, mert ebben a világban 1 plusz 1 egyenlő 0-val.

124
00:07:58,920 --> 00:08:03,139
Tehát ezen pozíció másolatának hozzáadása a teljes összeghez ugyanolyan hatású, 

125
00:08:03,139 --> 00:08:04,300
mintha eltávolítanánk.

126
00:08:05,160 --> 00:08:10,700
Ennek ismét az a hatása, hogy eredményként itt alul megkapjuk a hiba helyét.

127
00:08:13,040 --> 00:08:15,603
Annak illusztrálására, hogy ez milyen elegáns, 

128
00:08:15,603 --> 00:08:18,167
hadd mutassam meg azt az egy sor Python kódot, 

129
00:08:18,167 --> 00:08:21,440
amely szinte a teljes fogadó oldali logikát magába foglalja.

130
00:08:22,080 --> 00:08:26,182
Azzal kezdem, hogy létrehozok egy 16 egyesből vagy nullából álló véletlenszerű 

131
00:08:26,182 --> 00:08:29,194
tömböt az adatblokk szimulálására, és elnevezem biteknek. 

132
00:08:29,194 --> 00:08:33,037
Ez a gyakorlatban természetesen olyasmi lenne, amit egy feladótól kapunk, 

133
00:08:33,037 --> 00:08:37,400
és ahelyett, hogy véletlenszerű lenne, 11 adatbitet hordozna 5 paritásbittel együtt.

134
00:08:38,120 --> 00:08:42,592
Ha meghívom az enumerateBits függvényt, akkor az minden egyes bitet 

135
00:08:42,592 --> 00:08:47,000
összepárosít egy megfelelő indexszel, ebben az esetben 0-tól 15-ig.

136
00:08:48,180 --> 00:08:51,996
Tehát ha létrehozunk egy listát, amely végigmegy ezeken a párokon, 

137
00:08:51,996 --> 00:08:56,839
az "i vessző bit" alakú párokon, és csak az i értéket vesszük ki, vagyis az indexet, 

138
00:08:56,839 --> 00:09:01,340
nos, ez nem olyan izgalmas, csak a 0-tól 15-ig terjedő indexeket kapjuk vissza.

139
00:09:01,680 --> 00:09:06,121
De ha hozzáadjuk azt a feltételt, hogy csak akkor tegyük ezt, "ha bit", 

140
00:09:06,121 --> 00:09:10,315
vagyis ha az a bit 1 és nem 0, akkor csak azokat a pozíciókat nézi, 

141
00:09:10,315 --> 00:09:12,660
ahol a megfelelő bit be van kapcsolva.

142
00:09:13,380 --> 00:09:17,960
Ebben az esetben ezek a pozíciók a 0, 4, 6, 9, stb.

143
00:09:19,980 --> 00:09:25,470
Ne feledjük, hogy az összes pozíciót, a bekapcsolt bitek pozícióit akarjuk összegyűjteni, 

144
00:09:25,470 --> 00:09:27,240
majd XOR-olni őket egymással.

145
00:09:29,180 --> 00:09:33,220
Ehhez Pythonban először is hadd importáljak néhány hasznos függvényt.

146
00:09:33,900 --> 00:09:36,274
Így meghívhatjuk a reduce()-t erre a listára, 

147
00:09:36,274 --> 00:09:38,700
és a XOR függvényt használhatjuk a redukcióhoz.

148
00:09:39,100 --> 00:09:42,680
Ez lényegében végigrágja magát a listán, miközben XOR-okat végez.

149
00:09:44,800 --> 00:09:47,957
Ha szeretnéd, akkor explicit ki is írhatod XOR függvényt anélkül, 

150
00:09:47,957 --> 00:09:49,440
hogy importálni kéne bárhonnan.

151
00:09:51,940 --> 00:09:57,234
Jelenleg tehát úgy néz ki, hogy ha ezt a 16 bites véletlenszerű blokkunkkal végezzük el, 

152
00:09:57,234 --> 00:10:01,280
akkor 9-et kapunk vissza, ami az 1001-es bináris ábrázolást jelenti.

153
00:10:01,980 --> 00:10:05,603
Ezt itt most nem fogom megtenni, de lehet írni egy olyan függvényt, 

154
00:10:05,603 --> 00:10:09,599
amivel a feladó a bináris ábrázolás 4 paritásbitjét be tudja úgy állítani, 

155
00:10:09,599 --> 00:10:12,156
hogy végül olyan állapotba hozza ezt a blokkot, 

156
00:10:12,156 --> 00:10:15,460
ahol a kódsor futtatása a bitek teljes listáján 0-t ad vissza.

157
00:10:16,080 --> 00:10:18,200
Ez egy jól elkészített blokknak minősülne.

158
00:10:19,880 --> 00:10:24,536
Most az a klassz, hogy ha a listában lévő bitek bármelyikét átkapcsoljuk egy 

159
00:10:24,536 --> 00:10:28,587
véletlenszerű hibát szimulálva, és lefuttatjuk ugyanazt a kódsort, 

160
00:10:28,587 --> 00:10:30,220
akkor kiírja a hiba helyét.

161
00:10:30,960 --> 00:10:31,520
Hát nem szuper?

162
00:10:31,820 --> 00:10:36,660
Bárhonnan kapsz egy ilyen blokkot, lefuttathatod rajta ezt az egyetlen sort, 

163
00:10:36,660 --> 00:10:41,060
és automatikusan kiköpi a hiba pozícióját, vagy 0-t, ha nem volt hiba.

164
00:10:42,500 --> 00:10:45,200
És továbbra sincs semmi különös a 16-os méretben.

165
00:10:45,400 --> 00:10:49,860
Ugyanez a kódsor akkor is működne, ha egy 256 bites blokkra eresztenénk rá.

166
00:10:51,880 --> 00:10:55,433
Mondanom sem kell, hogy a teljes működéshez kell még több kódot írni, 

167
00:10:55,433 --> 00:10:59,089
mint például a meta paritásellenőrzéshez a 2 bites hibák felismerésére, 

168
00:10:59,089 --> 00:11:02,947
de az ötlet az, hogy a módszerünk alapvető logikája egyetlen XOR redukcióra 

169
00:11:02,947 --> 00:11:03,760
egyszerűsíthető.

170
00:11:06,120 --> 00:11:09,423
Attól függően mennyire mozogsz otthonosan a kettes számrendszer, 

171
00:11:09,423 --> 00:11:13,439
a XOR-ok és úgy általában a szoftverek terén, most vagy zavarosnak találod ezt 

172
00:11:13,439 --> 00:11:17,352
a perspektívát, vagy annyira elegánsnak, hogy azon tűnődsz miért nem ezzel a 

173
00:11:17,352 --> 00:11:18,420
szemlélettel kezdtük.

174
00:11:19,140 --> 00:11:22,708
Lazán fogalmazva, a paritásellenőrzéses szemléletre könnyebb gondolni, 

175
00:11:22,708 --> 00:11:26,026
amikor a Hamming-kódokat hardveresen, közvetlenül implementáljuk, 

176
00:11:26,026 --> 00:11:30,500
a XOR szemléletre pedig akkor, amikor szoftveresen, egyfajta magasabb szintről csináljuk.

177
00:11:31,360 --> 00:11:36,020
Az elsőt a legkönnyebb kézzel elvégezni, és úgy gondolom ezért jobban elősegíti 

178
00:11:36,020 --> 00:11:39,107
a mindezek alapjául szolgáló intuíció elsajátítását, 

179
00:11:39,107 --> 00:11:43,825
miszerint az egyetlen hiba megtalálásához szükséges információ a blokk méretének 

180
00:11:43,825 --> 00:11:48,485
logaritmusával függ össze, vagy más szóval, a blokk méretének megduplázódásával 

181
00:11:48,485 --> 00:11:50,000
csak egy bittel kell több.

182
00:11:51,020 --> 00:11:53,608
Fontos kiemelni, hogy ezen információ mérete közvetlenül 

183
00:11:53,608 --> 00:11:56,060
megfeleltethető a szükséges redundancia mennyiségével.

184
00:11:56,660 --> 00:11:59,638
Ez az ami a legtöbb ember beidegződésével ellentétesen hat. 

185
00:11:59,638 --> 00:12:02,866
Úgy vettem észre, hogy az emberek ösztönös gondolata az üzenetek 

186
00:12:02,866 --> 00:12:06,540
hibákkal szemben ellenállóvá tételére általában az üzenet teljes másolása.

187
00:12:07,500 --> 00:12:11,448
Mellesleg van egy másik módszer is, amit a Hamming-kódok bemutatására használnak, 

188
00:12:11,448 --> 00:12:14,000
amikor az üzenetet egy nagy mátrixszal szorozzák meg.

189
00:12:14,670 --> 00:12:18,227
Persze szép, mert a lineáris kódok tágabb családjára alkalmazható, 

190
00:12:18,227 --> 00:12:21,838
de szerintem nem elég szemléletes, hogy honnan származik a módszer, 

191
00:12:21,838 --> 00:12:23,060
vagy hogyan skálázható.

192
00:12:25,200 --> 00:12:27,440
És ha már a skálázásnál tartunk, vegyük észre, 

193
00:12:27,440 --> 00:12:31,160
hogy ennek a rendszernek a hatékonysága csak javul a blokkméretet növelésével.

194
00:12:35,000 --> 00:12:39,648
Láttuk például, hogy 256 bitnek csak 3%-át használjuk redundanciaként. 

195
00:12:39,648 --> 00:12:42,660
Több bitnél pedig csak egyre jobb ez az arány.

196
00:12:43,300 --> 00:12:47,340
Ahogy a paritásbitek számát egyesével növeljük, a blokk méretét megduplázhatjuk!

197
00:12:49,000 --> 00:12:52,886
És ha ezt a végletekig fokozzuk, olyan blokkunk is lehet, mondjuk, 

198
00:12:52,886 --> 00:12:57,989
egymillió bitből, ahol szó szerint 20 kérdéssel elvégezhető a teljes paritásellenőrzés, 

199
00:12:57,989 --> 00:13:00,020
és csak 21 paritásbitet használunk.

200
00:13:00,740 --> 00:13:03,978
És ha jobban belegondolsz, egymillió bitre ránézni és azonnal 

201
00:13:03,978 --> 00:13:07,060
megtalálni a hibát őrültségnek hangzik és mégis lehetséges.

202
00:13:08,200 --> 00:13:12,702
A probléma persze az, hogy nagyobb blokkok esetén megnő a valószínűsége annak, 

203
00:13:12,702 --> 00:13:17,660
hogy egynél több bithiba keletkezik, és a Hamming-kódok ezeket már nem képesek kezelni.

204
00:13:18,320 --> 00:13:20,840
Így tehát azt a megfelelő méretet kell megtalálni, 

205
00:13:20,840 --> 00:13:24,300
ahol az egynél több bit átbillenésének valószínűsége még nem túl nagy.

206
00:13:26,600 --> 00:13:29,794
A gyakorlatban viszont a hibák rövid sorozatban szoktak jelentkeznek, 

207
00:13:29,794 --> 00:13:31,620
ami teljesen tönkretesz egy-egy blokkot.

208
00:13:32,200 --> 00:13:36,540
Tehát az egyik általános taktika a hibák több blokkban való eloszlásának elősegítésére 

209
00:13:36,540 --> 00:13:40,980
az, hogy ezeket a blokkokat átlapolják, például így, mielőtt elküldik vagy tárolják őket.

210
00:13:45,580 --> 00:13:49,820
Másfelől ezek a módszerek már jelentősségüket vesztették a modernebb kódok miatt, 

211
00:13:49,820 --> 00:13:54,372
mint például a Reed-Solomon algoritmus, amely különösen jól kezeli a sorozatos hibákat, 

212
00:13:54,372 --> 00:13:58,820
és úgy hangolható, hogy blokkonként nagyobb számú hibával szemben is ellenálló legyen.

213
00:13:59,360 --> 00:14:01,340
De ez már egy másik videó témáját képezhetné.

214
00:14:02,500 --> 00:14:06,293
A "The Art of Doing Science and Engineering" című könyvében Hamming őszintén 

215
00:14:06,293 --> 00:14:09,940
beszél arról, hogy mennyire kanyargós úton jutott el a kód felfedezéséhez.

216
00:14:10,620 --> 00:14:13,072
Először mindenféle különböző módszert próbált ki, 

217
00:14:13,072 --> 00:14:16,455
amelyekben a biteket egy magasabb dimenziós rács részeibe szervezte, 

218
00:14:16,455 --> 00:14:17,780
és hasonló furcsa dolgokat.

219
00:14:18,300 --> 00:14:22,250
Az ötlet, hogy esetleg lehetséges lenne a paritásellenőrzéseket rábírni arra, 

220
00:14:22,250 --> 00:14:25,340
hogy a hiba helyét kiírják csak akkor jutott Hamming eszébe, 

221
00:14:25,340 --> 00:14:28,936
amikor egy csomó más elemzés után hátrább lépett és megkérdezte: "Oké, 

222
00:14:28,936 --> 00:14:31,520
mi lenne az elképzelhető leghatékonyabb megoldás?".

223
00:14:32,620 --> 00:14:35,006
Őszintén beszél arról is, mennyire fontos volt, 

224
00:14:35,006 --> 00:14:37,889
hogy már akkor is a paritásellenőrzések jártak a fejében, 

225
00:14:37,889 --> 00:14:41,220
ami az 1940-es években sokkal kevésbé volt jellemző, mint manapság.

226
00:14:41,920 --> 00:14:45,347
A könyvben mintegy féltucatszor hivatkozik Louis Pasteur idézetére, 

227
00:14:45,347 --> 00:14:48,220
miszerint "A szerencse csak a felkészült elmének kedvez".

228
00:14:49,320 --> 00:14:52,592
A brilliáns ötletek utólag gyakran megtévesztően egyszerűnek tűnnek, 

229
00:14:52,592 --> 00:14:54,300
ami miatt könnyen alábecsüljük őket.

230
00:14:54,960 --> 00:14:57,955
Őszintén remélem, hogy a Hamming-kódok, de legalább a hozzá 

231
00:14:57,955 --> 00:15:01,300
hasonló kódok létezése most már magától értetődőnek tűnik számodra.

232
00:15:01,660 --> 00:15:06,820
De ne áltasd magad azzal, hogy ezek valóban nyilvánvalóak, mert egyáltalán nem azok.

233
00:15:07,880 --> 00:15:11,264
Ezen ötletek részben azért tűnnek megtévesztően egyszerűnek, 

234
00:15:11,264 --> 00:15:15,314
mert mindig csak a végeredményt látjuk, miután minden rendbe lett rakva, 

235
00:15:15,314 --> 00:15:20,252
a problémamegoldási folyamat kezdetén előttünk álló felfedezhető lehetőségek tárházát és 

236
00:15:20,252 --> 00:15:22,860
a közben elkövetett rossz fordulatokat már nem.

237
00:15:23,820 --> 00:15:24,900
De ez általánosságban is igaz.

238
00:15:24,900 --> 00:15:28,882
Azt hiszem néhány különleges találmány esetében van egy második mélyebb oka is annak, 

239
00:15:28,882 --> 00:15:30,040
hogy alulértékeljük őket.

240
00:15:30,840 --> 00:15:33,685
Az információ bitekben való elgondolása csak 1948-ra, 

241
00:15:33,685 --> 00:15:37,744
Claude Shannon információelméletről szóló alapvető tanulmányával vált igazán 

242
00:15:37,744 --> 00:15:38,640
teljes elméletté.

243
00:15:39,280 --> 00:15:42,540
Ez lényegében egybeesett azzal, amikor Hamming kifejlesztette algoritmusát.

244
00:15:43,300 --> 00:15:46,615
Ez volt az az írás, amely bizonyos értelemben elsőként megmutatta, 

245
00:15:46,615 --> 00:15:49,881
hogy a hatékony hibajavítás mindig lehetséges, függetlenül attól, 

246
00:15:49,881 --> 00:15:52,900
hogy mekkora a bithibák valószínűsége. Legalábbis elméletben.

247
00:15:53,700 --> 00:15:57,598
Shannon és Hamming egyébként közös irodában ült a Bell Labs-nél, annak ellenére, 

248
00:15:57,598 --> 00:16:01,160
hogy elég különböző feladatokon dolgoztak, és ez aligha tűnik véletlennek.

249
00:16:02,380 --> 00:16:05,717
Ugorjunk előre néhány évtizedet. Manapság annyira elterjedtté 

250
00:16:05,717 --> 00:16:08,571
vált a bitekről és információról alkotott szemlélet, 

251
00:16:08,571 --> 00:16:12,340
hogy könnyű figyelmen kívül hagyni, korábban ez mennyire nem így volt.

252
00:16:13,100 --> 00:16:17,843
Ironikus módon pont azok az eszmék, amelyek a legjobban alakítják a jövő generációinak 

253
00:16:17,843 --> 00:16:22,260
gondolkodásmódját, tűnnek végül egyszerűbbnek számukra, mint amilyenek valójában.

