1
00:00:00,000 --> 00:00:02,560
Feltételezem, hogy itt mindenki az 1. részből jön.

2
00:00:03,060 --> 00:00:06,853
Hamming-kódokról beszéltünk, egy olyan adatblokk létrehozásának módszeréről, 

3
00:00:06,853 --> 00:00:09,415
amelyben a bitek többsége értelmes üzenetet hordoz, 

4
00:00:09,415 --> 00:00:12,470
míg néhány másik egyfajta redundanciaként működik, oly módon, 

5
00:00:12,470 --> 00:00:16,263
hogy ha bármelyik bit megfordul, akkor vagy üzenet bit vagy redundancia bit, 

6
00:00:16,263 --> 00:00:19,909
bármi ebben a blokkban, a vevő képes lesz azonosítani, hogy hiba történt, 

7
00:00:19,909 --> 00:00:21,240
és hogyan lehet kijavítani.

8
00:00:21,880 --> 00:00:24,564
Az ott bemutatott alapötlet az volt, hogyan lehet többszörös 

9
00:00:24,564 --> 00:00:27,160
paritásellenőrzést használni a bináris kereséshez a hibáig.

10
00:00:28,980 --> 00:00:31,737
Ebben a videóban az volt a cél, hogy a Hamming-kódok 

11
00:00:31,737 --> 00:00:34,600
a lehető leggyakrabban és újra felfedezhetővé váljanak.

12
00:00:35,180 --> 00:00:39,118
De ahogy elkezd gondolkodni ennek tényleges megvalósításán, akár szoftverben, 

13
00:00:39,118 --> 00:00:43,460
akár hardverben, ez a keretezés valójában alááshatja, mennyire elegánsak ezek a kódok.

14
00:00:43,920 --> 00:00:46,343
Azt gondolhatnánk, hogy olyan algoritmust kell írnia, 

15
00:00:46,343 --> 00:00:48,722
amely nyomon követi az összes lehetséges hibahelyet, 

16
00:00:48,722 --> 00:00:52,268
és minden egyes ellenőrzéssel kettévágja azt a csoportot, de valójában sokkal, 

17
00:00:52,268 --> 00:00:53,480
de sokkal egyszerűbb ennél.

18
00:00:53,940 --> 00:00:57,055
Ha felolvasod a négy paritásellenőrzésre adott válaszokat, 

19
00:00:57,055 --> 00:01:01,333
amelyeket az előző videóban végeztünk, 1-es és 0-s formában igen és nem helyett, 

20
00:01:01,333 --> 00:01:04,080
akkor szó szerint kiírja a hiba helyzetét binárisan.

21
00:01:04,780 --> 00:01:08,249
Például a 7-es szám binárisan úgy néz ki, mint 0111, 

22
00:01:08,249 --> 00:01:11,260
lényegében azt mondva, hogy 4 plusz 2 plusz 1.

23
00:01:12,540 --> 00:01:16,168
És figyeld meg, hogy a 7-es pozíció hol helyezkedik el, 

24
00:01:16,168 --> 00:01:21,740
ez érinti az első paritáscsoportunkat, a másodikat és a harmadikat, de nem az utolsót.

25
00:01:22,220 --> 00:01:24,783
Tehát e négy ellenőrzés eredményének alulról felfelé 

26
00:01:24,783 --> 00:01:27,540
történő elolvasása valóban meghatározza a hiba helyzetét.

27
00:01:28,320 --> 00:01:31,330
A 7-es példában nincs semmi különös, ez általában működik, 

28
00:01:31,330 --> 00:01:35,820
és ez megdöbbentően egyszerűvé teszi az egész séma hardveres megvalósításának logikáját.

29
00:01:37,240 --> 00:01:40,944
Ha szeretnéd látni, miért történik ez a varázslat, 

30
00:01:40,944 --> 00:01:47,046
vegyük ezt a 16 indexcímkét a pozícióinkhoz, de ahelyett, hogy 10-es alapba írnánk, 

31
00:01:47,046 --> 00:01:49,880
írjuk őket binárisan, 0000-től 1111-ig.

32
00:01:50,559 --> 00:01:53,992
Miközben ezeket a bináris címkéket visszahelyezzük a dobozukba, 

33
00:01:53,992 --> 00:01:57,800
hadd hangsúlyozzam, hogy különböznek a ténylegesen elküldött adatoktól.

34
00:01:58,320 --> 00:02:01,757
Nem mások, mint egy fogalmi címke, amely segít neked és nekem megérteni, 

35
00:02:01,757 --> 00:02:03,500
honnan jött a négy paritásos csoport.

36
00:02:04,140 --> 00:02:08,071
Azt az eleganciát, hogy mindent, amit nézünk, binárisan írunk le, 

37
00:02:08,071 --> 00:02:12,360
talán aláássa az a zavar, hogy mindent, amit nézünk, binárisan írunk le.

38
00:02:13,020 --> 00:02:14,120
Pedig megéri.

39
00:02:14,800 --> 00:02:19,224
A címkék közül csak az utolsó bitre összpontosítsa figyelmét, 

40
00:02:19,224 --> 00:02:23,220
majd jelölje ki azokat a helyeket, ahol az utolsó bit 1.

41
00:02:24,240 --> 00:02:28,268
A négy paritáscsoport közül az elsőt kapjuk, ami azt jelenti, 

42
00:02:28,268 --> 00:02:33,336
hogy az első ellenőrzést úgy értelmezheti, hogy azt kérdezi, hé, ha hiba van, 

43
00:02:33,336 --> 00:02:35,740
akkor a hiba helyének utolsó bitje 1?

44
00:02:38,200 --> 00:02:42,677
Hasonlóképpen, ha a másodiktól az utolsóig fókuszál, és kiemeli az összes olyan pozíciót, 

45
00:02:42,677 --> 00:02:46,160
ahol ez 1, akkor megkapja a második paritáscsoportot a rendszerünkből.

46
00:02:46,740 --> 00:02:50,820
Más szóval, a második ellenőrzés azt kérdezi, hé, megint én, 

47
00:02:50,820 --> 00:02:54,500
ha hiba van, akkor a pozíció második és utolsó bitje 1?

48
00:02:55,760 --> 00:02:56,900
Stb.

49
00:02:57,220 --> 00:03:00,721
A harmadik paritásellenőrzés minden olyan pozícióra kiterjed, 

50
00:03:00,721 --> 00:03:04,561
amelynek harmadik bitje be van kapcsolva, az utolsó pedig az utolsó 

51
00:03:04,561 --> 00:03:08,740
nyolc pozíciót fedi le, azokat, amelyeknek a legmagasabb sorrendű bitje 1.

52
00:03:09,740 --> 00:03:14,585
Minden, amit korábban tettünk, ugyanaz, mint ennek a négy kérdésnek a megválaszolása, 

53
00:03:14,585 --> 00:03:17,740
ami viszont ugyanaz, mint egy pozíció kiírása binárisan.

54
00:03:19,620 --> 00:03:21,480
Remélem, ez két dolgot tisztáz.

55
00:03:22,040 --> 00:03:25,102
Az első az, hogyan lehet szisztematikusan általánosítani olyan blokkméretekre, 

56
00:03:25,102 --> 00:03:26,460
amelyek kettőnél nagyobb hatványok.

57
00:03:26,960 --> 00:03:29,709
Ha több bitre van szükség az egyes pozíciók leírásához, 

58
00:03:29,709 --> 00:03:32,163
például hat bitre van szükség 64 folt leírásához, 

59
00:03:32,163 --> 00:03:35,354
akkor ezek a bitek mindegyike megadja az egyik paritáscsoportot, 

60
00:03:35,354 --> 00:03:36,680
amelyet ellenőriznünk kell.

61
00:03:38,400 --> 00:03:40,312
Azok, akik megnézték azt a sakktábla-rejtvényt, 

62
00:03:40,312 --> 00:03:43,180
amit Matt Parkerrel csináltam, mindezt rendkívül ismerősnek találhatták.

63
00:03:43,660 --> 00:03:46,481
Ugyanaz az alapvető logika, de más problémát old meg, 

64
00:03:46,481 --> 00:03:48,780
és egy 64 négyzetes sakktáblára alkalmazzák.

65
00:03:49,880 --> 00:03:53,675
A második dolog, remélem, ez világossá teszi, hogy a paritásbitjeink miért 

66
00:03:53,675 --> 00:03:57,320
vannak olyan pozíciókban, amelyek kettő hatványai, például 1, 2, 4 és 8.

67
00:03:58,000 --> 00:04:01,131
Ezek azok a pozíciók, amelyek bináris reprezentációjában 

68
00:04:01,131 --> 00:04:03,000
csak egyetlen bit van bekapcsolva.

69
00:04:03,600 --> 00:04:06,561
Ez azt jelenti, hogy a paritásbitek mindegyike 

70
00:04:06,561 --> 00:04:09,460
a négy paritáscsoport egyikén belül található.

71
00:04:12,040 --> 00:04:15,719
Ezt láthatod nagyobb példákon is, ahol akármekkora is leszel, 

72
00:04:15,719 --> 00:04:19,339
minden paritásbit kényelmesen csak az egyik csoportot érinti.

73
00:04:25,600 --> 00:04:27,865
Ha megértjük, hogy ezek a paritásellenőrzések, 

74
00:04:27,865 --> 00:04:30,708
amelyekre az időnk nagy részét összpontosítottuk, nem más, 

75
00:04:30,708 --> 00:04:34,323
mint egy okos módszer a hiba helyének binárisban történő megfogalmazására, 

76
00:04:34,323 --> 00:04:37,793
akkor összefüggést vonhatunk le a hamming másfajta gondolkodásmódjával. 

77
00:04:37,793 --> 00:04:41,167
kódokat, amelyek vitathatatlanul sokkal egyszerűbbek és elegánsabbak, 

78
00:04:41,167 --> 00:04:43,240
és alapvetően egyetlen kódsorral leírhatók.

79
00:04:43,660 --> 00:04:45,500
Az XOR függvényen alapul.

80
00:04:46,940 --> 00:04:50,220
Az XOR azoknak, akik nem ismerik, az exkluzív ill.

81
00:04:50,780 --> 00:04:54,039
Ha két bit XOR-jét veszed, akkor 1-et ad vissza, 

82
00:04:54,039 --> 00:04:59,360
ha az egyik bit be van kapcsolva, de nem, ha mindkettő be vagy ki van kapcsolva.

83
00:05:00,100 --> 00:05:02,980
Másképpen fogalmazva ez a két bit paritása.

84
00:05:03,540 --> 00:05:06,760
Matematikusként szívesebben gondolok rá, mint 2. kiegészítésre.

85
00:05:07,360 --> 00:05:10,488
Gyakran beszélünk két különböző bitsor XOR-járól is, 

86
00:05:10,488 --> 00:05:13,440
amely alapvetően komponensenként hajtja végre ezt.

87
00:05:13,680 --> 00:05:15,720
Ez olyan, mint egy kiegészítés, de ahol soha nem viszed magaddal.

88
00:05:16,500 --> 00:05:19,632
Ismét a matematikailag hajlamosabbak ezt inkább úgy gondolhatják, 

89
00:05:19,632 --> 00:05:22,480
mintha két vektort adnának hozzá, és csökkentenék a mod 2-t.

90
00:05:23,500 --> 00:05:28,583
Ha most megnyit egy Pythont, és alkalmazza a caret műveletet két egész szám között, 

91
00:05:28,583 --> 00:05:32,940
akkor ez az, amit csinál, csak a tető alatti számok bitreprezentációira.

92
00:05:34,960 --> 00:05:38,707
Számodra és nekem az a kulcsfontosságú, hogy a sok különböző bitsor 

93
00:05:38,707 --> 00:05:42,896
XOR-értékének vétele hatékony módja annak, hogy egy csomó különálló csoport 

94
00:05:42,896 --> 00:05:47,140
paródiáit számítsuk ki, mint ahogyan az oszlopoknál is, mindezt egy csapásra.

95
00:05:51,260 --> 00:05:53,807
Ez egy meglehetősen pofás módot ad arra, hogy elgondolkodjunk 

96
00:05:53,807 --> 00:05:56,848
a Hamming-kód algoritmusunkból származó többszörös paritásellenőrzéseken, 

97
00:05:56,848 --> 00:05:58,780
mivel mindez egyetlen műveletbe van csomagolva.

98
00:05:59,479 --> 00:06:02,180
Bár első pillantásra nagyon másképp néz ki.

99
00:06:02,820 --> 00:06:06,702
Konkrétan írja fel a 16 pozíciót binárisan, mint korábban, 

100
00:06:06,702 --> 00:06:11,835
és most jelölje ki azokat a pozíciókat, ahol az üzenetbit 1-re van kapcsolva, 

101
00:06:11,835 --> 00:06:17,100
majd gyűjtse össze ezeket a pozíciókat egy nagy oszlopba, és vegye fel az XOR-t.

102
00:06:19,260 --> 00:06:24,119
Valószínűleg sejtheti, hogy az eredményül kapott 4 bit megegyezik az általunk megismert 

103
00:06:24,119 --> 00:06:28,371
és kedvelt 4 paritásellenőrzéssel, de szánjunk egy percet, hogy átgondoljuk, 

104
00:06:28,371 --> 00:06:29,200
miért pontosan.

105
00:06:32,220 --> 00:06:37,355
Ez az utolsó oszlop például az összes olyan pozíciót számolja, amelynek utolsó bitje 1, 

106
00:06:37,355 --> 00:06:42,083
de már csak a kiemelt pozíciókra korlátozódik, tehát gyakorlatilag azt számolja, 

107
00:06:42,083 --> 00:06:45,760
hogy hány kiemelt pozíció származott az első paritáscsoportból.

108
00:06:46,240 --> 00:06:46,800
Ennek van értelme?

109
00:06:49,080 --> 00:06:51,636
Hasonlóképpen, a következő oszlop azt számolja, 

110
00:06:51,636 --> 00:06:55,472
hogy hány pozíció van a második paritáscsoportban, azokat a pozíciókat, 

111
00:06:55,472 --> 00:07:00,000
amelyek második és utolsó bitje 1, és amelyek szintén kiemelve vannak, és így tovább.

112
00:07:00,260 --> 00:07:03,960
Valójában ez csak egy kis perspektívaváltás ugyanabban a dologban, amit mi csináltunk.

113
00:07:07,760 --> 00:07:09,600
És hogy tudd, hová vezet innen.

114
00:07:10,000 --> 00:07:13,034
A küldő felelős néhány speciális paritásbit átkapcsolásáért, 

115
00:07:13,034 --> 00:07:15,720
hogy megbizonyosodjon arról, hogy az összeg 0000 lesz.

116
00:07:15,720 --> 00:07:21,370
Ha már így van, akkor ez egy nagyon jó módot ad arra, hogy elgondolkodjunk azon, 

117
00:07:21,370 --> 00:07:27,580
hogy ez a négy eredményül kapott bit az alján miért írja le közvetlenül a hiba helyzetét.

118
00:07:28,460 --> 00:07:31,860
Tegyük fel, hogy ebben a blokkban egy kicsit 0-ról 1-re vált.

119
00:07:32,600 --> 00:07:37,953
Ez azt jelenti, hogy ennek a bitnek a pozíciója bekerül a teljes XOR-be, 

120
00:07:37,953 --> 00:07:43,820
ami 0-ról az összeget az újonnan hozzáadott értékre, a hiba helyére változtatja.

121
00:07:44,460 --> 00:07:47,191
Valamivel kevésbé nyilvánvaló, ugyanez igaz arra az esetre is, 

122
00:07:47,191 --> 00:07:49,360
ha olyan hiba történik, amely 1-et 0-ra változtat.

123
00:07:50,180 --> 00:07:53,176
Tudod, ha kétszer összeadsz egy bites karakterláncot, az ugyanaz, 

124
00:07:53,176 --> 00:07:55,491
mintha egyáltalán nem lenne ott, alapvetően azért, 

125
00:07:55,491 --> 00:07:57,580
mert ebben a világban 1 plusz 1 egyenlő 0-val.

126
00:07:57,580 --> 00:08:00,566
Tehát ennek a pozíciónak a másolatának hozzáadása a 

127
00:08:00,566 --> 00:08:04,300
végösszeghez ugyanazt a hatást eredményezi, mint ahogy mozgatjuk.

128
00:08:05,160 --> 00:08:10,700
És ez a hatás ismét az, hogy az összesített eredmény itt alul jelzi a hiba helyzetét.

129
00:08:13,039 --> 00:08:15,245
Annak szemléltetésére, hogy ez milyen elegáns, 

130
00:08:15,245 --> 00:08:18,765
hadd mutassam meg azt a Python-kód egy sort, amelyre korábban hivatkoztam, 

131
00:08:18,765 --> 00:08:21,440
és amely szinte az összes logikát rögzíti a vevő oldalán.

132
00:08:22,080 --> 00:08:26,812
Kezdjük azzal, hogy létrehozunk egy véletlenszerű 16 1-es és 0-s tömböt az adatblokk 

133
00:08:26,812 --> 00:08:31,432
szimulálására, és megadom neki a névbiteket, de természetesen a gyakorlatban ezt a 

134
00:08:31,432 --> 00:08:35,830
küldőtől kapjuk, és ahelyett, hogy véletlenszerű lévén 11 adatbitet hordozna 5 

135
00:08:35,830 --> 00:08:37,000
paritásbittel együtt.

136
00:08:37,000 --> 00:08:41,042
Ha az enumerateBits függvényt hívom, akkor azt csinálja, 

137
00:08:41,042 --> 00:08:47,000
hogy ezeket a biteket párosítja a megfelelő indexszel, ebben az esetben 0-tól 15-ig.

138
00:08:48,180 --> 00:08:52,253
Tehát ha ezután létrehozunk egy listát, amely az összes ilyen páron áthurkol, 

139
00:08:52,253 --> 00:08:56,170
olyan párokon, amelyek i-nek néznek ki, majd csak az i értéket vesszük ki, 

140
00:08:56,170 --> 00:09:00,556
csak az indexet, akkor ez nem olyan izgalmas, csak visszakapjuk azokat az indexeket 

141
00:09:00,556 --> 00:09:01,340
0 és 15 között.

142
00:09:01,680 --> 00:09:07,434
De ha hozzátesszük azt a feltételt, hogy ezt csak if bit, azaz ha ez a bit 1 és nem 0, 

143
00:09:07,434 --> 00:09:12,660
akkor csak azokat a pozíciókat húzza ki, ahol a megfelelő bit be van kapcsolva.

144
00:09:13,380 --> 00:09:20,360
Ebben az esetben úgy tűnik, hogy ezek a pozíciók 0, 4, 6, 9 stb.

145
00:09:20,720 --> 00:09:23,861
Azt akarjuk, hogy összegyűjtsük ezeket a pozíciókat, 

146
00:09:23,861 --> 00:09:27,240
a bekapcsolt bitek pozícióit, majd együtt XOR-eljük őket.

147
00:09:29,180 --> 00:09:33,220
Ahhoz, hogy ezt Pythonban megtegye, először importáljak néhány hasznos funkciót.

148
00:09:33,900 --> 00:09:36,300
Így meghívhatjuk a redukció()-t ezen a listán, 

149
00:09:36,300 --> 00:09:38,700
és az XOR függvény segítségével csökkenthetjük.

150
00:09:39,100 --> 00:09:42,680
Ez alapvetően átveszi a listát, és végigviszi az XOR-t.

151
00:09:44,800 --> 00:09:47,816
Ha úgy tetszik, kifejezetten kiírhatja az XOR függvényt anélkül, 

152
00:09:47,816 --> 00:09:49,440
hogy bárhonnan importálnia kellene.

153
00:09:51,940 --> 00:09:57,305
Tehát jelenleg úgy néz ki, hogy ha ezt tesszük a 16 bites véletlenszerű blokkon, 

154
00:09:57,305 --> 00:10:01,280
akkor 9-et ad vissza, aminek a bináris reprezentációja 1001.

155
00:10:01,980 --> 00:10:04,510
Itt nem fogjuk megtenni, de írhat egy függvényt, 

156
00:10:04,510 --> 00:10:08,900
ahol a küldő ezt a bináris reprezentációt használja a négy paritásbit igény szerinti 

157
00:10:08,900 --> 00:10:11,793
beállításához, így végül a blokk olyan állapotba kerül, 

158
00:10:11,793 --> 00:10:15,460
ahol ennek a kódsornak a futtatása a teljes bitlistán visszatér. egy 0.

159
00:10:16,080 --> 00:10:20,100
Ez egy jól előkészített blokknak tekinthető.

160
00:10:20,100 --> 00:10:24,487
A jó dolog az, hogy ha a listában szereplő bitek bármelyikét átkapcsoljuk, 

161
00:10:24,487 --> 00:10:29,342
véletlenszerű zajból eredő hibát szimulálva, akkor ha ugyanazt a kódsort futtatja, 

162
00:10:29,342 --> 00:10:30,220
kiírja a hibát.

163
00:10:30,960 --> 00:10:31,520
Hát nem ügyes?

164
00:10:31,820 --> 00:10:36,825
Megkaphatja ezt a blokkot a semmiből, futtathatja rajta ezt az egyetlen sort, 

165
00:10:36,825 --> 00:10:41,060
és automatikusan kiköpi a hiba pozícióját, vagy egy 0-t, ha nincs.

166
00:10:42,500 --> 00:10:44,840
A 16-os méretben pedig nincs itt semmi különös.

167
00:10:44,840 --> 00:10:49,860
Ugyanez a kódsor működne, ha mondjuk 256 bites listája lenne.

168
00:10:51,880 --> 00:10:54,646
Mondanunk sem kell, hogy több kódot kell ide írni, 

169
00:10:54,646 --> 00:10:58,932
például a meta paritásellenőrzést a 2 bites hibák észlelésére, de az ötlet az, 

170
00:10:58,932 --> 00:11:03,760
hogy a sémánk szinte minden alapvető logikája egyetlen XOR-csökkentésre vezethető vissza.

171
00:11:06,120 --> 00:11:10,493
A bináris és XOR-ok és általában a szoftverek kényelmétől függően előfordulhat, 

172
00:11:10,493 --> 00:11:13,172
hogy ezt a perspektívát kissé zavarónak találja, 

173
00:11:13,172 --> 00:11:16,616
vagy sokkal elegánsabbnak és egyszerűbbnek, hogy azon töpreng, 

174
00:11:16,616 --> 00:11:18,420
miért nem kezdtük el vele. -megy.

175
00:11:19,140 --> 00:11:22,988
Lazán szólva, a többszörös paritásellenőrzési perspektíva könnyebben átgondolható, 

176
00:11:22,988 --> 00:11:26,095
ha a Hamming-kódokat nagyon közvetlenül implementálják hardverben, 

177
00:11:26,095 --> 00:11:29,201
az XOR perspektívára pedig akkor a legegyszerűbb, ha szoftveresen, 

178
00:11:29,201 --> 00:11:30,500
valamivel magasabb szintről.

179
00:11:31,360 --> 00:11:34,865
Az elsőt a legegyszerűbb kézzel elvégezni, és úgy gondolom, 

180
00:11:34,865 --> 00:11:39,715
hogy ez jobban beépíti a mindennek hátterében álló alapvető intuíciót, vagyis azt, 

181
00:11:39,715 --> 00:11:44,156
hogy az egyetlen hiba megtalálásához szükséges információ a blokk méretének 

182
00:11:44,156 --> 00:11:48,772
naplójához kapcsolódik. , vagy más szóval, a blokk méretének megduplázódásával 

183
00:11:48,772 --> 00:11:50,000
egy kicsit növekszik.

184
00:11:51,020 --> 00:11:54,235
A lényeges tény itt az, hogy ez az információ közvetlenül megfelel annak, 

185
00:11:54,235 --> 00:11:56,060
hogy mekkora redundanciára van szükségünk.

186
00:11:56,660 --> 00:11:59,752
Valójában ez az, ami ellentétes a legtöbb ember térdrángó reakciójával, 

187
00:11:59,752 --> 00:12:03,404
amikor először arra gondol, hogy egy üzenetet tegyen ellenállóvá a hibákkal szemben, 

188
00:12:03,404 --> 00:12:06,540
ahol általában a teljes üzenet lemásolása az első ösztön, ami eszébe jut.

189
00:12:07,500 --> 00:12:11,678
És akkor, egyébként, van egy egészen más mód, hogy néha Hamming-kódokat látunk bemutatva, 

190
00:12:11,678 --> 00:12:14,000
ahol az üzenetet megszorozzuk egy nagy mátrixszal.

191
00:12:14,670 --> 00:12:18,036
Ez kedves, mert a lineáris kódok tágabb családjához kapcsolódik, 

192
00:12:18,036 --> 00:12:20,988
de szerintem ez szinte semmilyen megérzést nem ad arról, 

193
00:12:20,988 --> 00:12:23,060
honnan származik vagy hogyan skálázódik.

194
00:12:25,200 --> 00:12:28,031
És ha a skálázásról beszélünk, észreveheti, hogy ennek a 

195
00:12:28,031 --> 00:12:31,160
sémának a hatékonysága csak javul, ha növeljük a blokk méretét.

196
00:12:35,000 --> 00:12:38,712
Például azt láttuk, hogy 256 bittel ennek a helynek csak 3%-át 

197
00:12:38,712 --> 00:12:42,660
használjuk fel a redundanciára, és onnantól kezdve egyre jobb lesz.

198
00:12:43,300 --> 00:12:47,340
Ahogy a paritásbitek száma egyesével nő, a blokk mérete folyamatosan megduplázódik.

199
00:12:49,000 --> 00:12:53,422
És ha ezt túlzásba viszed, akkor lehet egy millió bites blokk, 

200
00:12:53,422 --> 00:12:57,773
ahol szó szerint 20 kérdést játszanál a paritásellenőrzéssel, 

201
00:12:57,773 --> 00:13:00,020
és csak 21 paritásbitet használ.

202
00:13:00,740 --> 00:13:04,026
És ha visszalép, és arra gondol, hogy megnézzen egymillió bitet, 

203
00:13:04,026 --> 00:13:07,060
és megkeressen egyetlen hibát, az valóban őrültségnek tűnik.

204
00:13:08,199 --> 00:13:12,588
A probléma persze az, hogy egy nagyobb blokknál megnő annak a valószínűsége, 

205
00:13:12,588 --> 00:13:17,660
hogy egy-két bitnél több hibát látunk, és a Hamming kódok ezen kívül semmit sem kezelnek.

206
00:13:18,320 --> 00:13:21,286
Tehát a gyakorlatban a megfelelő méretet szeretné megtalálni, 

207
00:13:21,286 --> 00:13:24,300
hogy ne legyen túl nagy a valószínűsége a túl sok bitváltásnak.

208
00:13:26,600 --> 00:13:30,355
Ezenkívül a gyakorlatban a hibák általában kis sorozatokban érkeznek, 

209
00:13:30,355 --> 00:13:35,077
ami teljesen tönkretesz egy blokkot, ezért az egyik gyakori taktika a hibák sorozatának 

210
00:13:35,077 --> 00:13:39,370
szétosztására a különböző blokkok között az, hogy ezeket a blokkokat összefűzi, 

211
00:13:39,370 --> 00:13:40,980
mielőtt kiküldve vagy tárolva.

212
00:13:45,580 --> 00:13:49,243
Viszont ennek nagy részét teljesen megkérdőjelezik a modernebb kódok, 

213
00:13:49,243 --> 00:13:52,749
mint például a sokkal gyakrabban használt Reed-Solomon algoritmus, 

214
00:13:52,749 --> 00:13:57,040
amely különösen jól kezeli a sorozathibákat, és blokkonként nagyobb számú hibával 

215
00:13:57,040 --> 00:13:58,820
szemben is ellenállóra hangolható.

216
00:13:59,360 --> 00:14:01,340
De ez egy másik alkalom témája.

217
00:14:02,500 --> 00:14:06,521
A tudomány és mérnöki tevékenység művészete című könyvében Hamming csodálatosan 

218
00:14:06,521 --> 00:14:09,940
őszintén beszél arról, hogy milyen kanyargós volt a kód felfedezése.

219
00:14:10,620 --> 00:14:12,909
Először mindenféle különféle sémát próbált ki, 

220
00:14:12,909 --> 00:14:16,172
beleértve a biteket egy magasabb dimenziós rács részeire rendezve, 

221
00:14:16,172 --> 00:14:17,780
és ehhez hasonló furcsa dolgokat.

222
00:14:18,300 --> 00:14:21,940
Az ötlet, hogy a paritásellenőrzések összeesküvésre késztethetők oly módon, 

223
00:14:21,940 --> 00:14:24,957
hogy kifejtsék a hiba helyzetét, csak akkor jutott Hamminghez, 

224
00:14:24,957 --> 00:14:28,358
amikor egy csomó egyéb elemzés után visszalépett, és megkérdezte: oké, 

225
00:14:28,358 --> 00:14:31,520
mi a leghatékonyabb, amit tudok. elképzelhető, hogy erről van szó?

226
00:14:32,620 --> 00:14:37,495
Arról is őszintén beszélt, mennyire fontos, hogy már a paritásellenőrzés járt a fejében, 

227
00:14:37,495 --> 00:14:41,220
ami az 1940-es években sokkal kevésbé volt elterjedt, mint manapság.

228
00:14:41,920 --> 00:14:45,842
A könyvben vagy fél tucatszor hivatkozik Louis Pasteur idézetére, 

229
00:14:45,842 --> 00:14:48,220
a szerencse a felkészült elmének kedvez.

230
00:14:49,320 --> 00:14:52,784
Az okos ötletek gyakran megtévesztően egyszerűnek tűnnek utólag visszagondolva, 

231
00:14:52,784 --> 00:14:54,300
ami miatt könnyen alulértékelhetők.

232
00:14:54,960 --> 00:14:57,278
Jelenleg őszintén remélem, hogy a Hamming-kódok, 

233
00:14:57,278 --> 00:15:01,300
vagy legalábbis az ilyen kódok lehetősége, szinte magától értetődőnek tűnik számodra.

234
00:15:01,660 --> 00:15:04,311
De nem szabad becsapnia magát azzal, hogy azt gondolja, 

235
00:15:04,311 --> 00:15:06,820
hogy ezek valójában nyilvánvalóak, mert biztosan nem.

236
00:15:07,880 --> 00:15:11,257
Az okos ötletek megtévesztően egyszerűnek tűnnek, részben az az oka, 

237
00:15:11,257 --> 00:15:14,978
hogy mindig csak a végeredményt látjuk, tisztázzuk azt, ami rendetlen volt, 

238
00:15:14,978 --> 00:15:18,111
soha nem említjük meg az összes rossz fordulatot, alábecsüljük, 

239
00:15:18,111 --> 00:15:21,538
hogy a felfedezhető lehetőségek mekkora tere van a probléma kezdetén. 

240
00:15:21,538 --> 00:15:22,860
megoldási folyamat, mindez.

241
00:15:23,820 --> 00:15:24,900
De ez általánosságban igaz.

242
00:15:24,900 --> 00:15:27,766
Azt hiszem, néhány különleges találmánynak van egy másik, 

243
00:15:27,766 --> 00:15:30,040
mélyebb oka is annak, hogy alulbecsüljük őket.

244
00:15:30,840 --> 00:15:35,237
Az információ bitekben való gondolkodása csak 1948-ra vált igazán teljes elméletté, 

245
00:15:35,237 --> 00:15:38,640
Claude Shannon információelméletről szóló alapvető tanulmányával.

246
00:15:39,280 --> 00:15:42,540
Ez lényegében egybeesett azzal, amikor Hamming kidolgozta az algoritmusát.

247
00:15:43,300 --> 00:15:46,483
Ez ugyanaz az alapdolgozat, amely bizonyos értelemben megmutatta, 

248
00:15:46,483 --> 00:15:49,667
hogy a hatékony hibajavítás mindig lehetséges, függetlenül attól, 

249
00:15:49,667 --> 00:15:52,900
hogy mekkora a valószínűsége a bitváltásnak, legalábbis elméletben.

250
00:15:53,700 --> 00:15:57,663
Shannon és Hamming egyébként a Bell Labs-ban osztozott egy irodában, annak ellenére, 

251
00:15:57,663 --> 00:16:01,160
hogy nagyon különböző dolgokon dolgoztak, ami itt aligha tűnik véletlennek.

252
00:16:02,380 --> 00:16:05,819
Gyorsan előre több évtizedet, és manapság sokan annyira elmerülünk 

253
00:16:05,819 --> 00:16:08,386
a bitekről és információkról való gondolkodásban, 

254
00:16:08,386 --> 00:16:12,340
hogy könnyű figyelmen kívül hagyni, mennyire eltérő volt ez a gondolkodásmód.

255
00:16:13,100 --> 00:16:17,449
Ironikus módon azok az ötletek, amelyek a legmélyebben alakítják a jövő nemzedékének 

256
00:16:17,449 --> 00:16:20,980
gondolkodásmódját, végül egyszerűbbnek tekintik a jövő generációját, 

257
00:16:20,980 --> 00:16:22,260
mint amilyenek valójában.

