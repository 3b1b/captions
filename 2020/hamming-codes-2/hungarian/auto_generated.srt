1
00:00:00,000 --> 00:00:02,560
Feltételezem, hogy itt mindenki az 1. részből érkezik.

2
00:00:03,060 --> 00:00:06,764
A Hamming-kódokról beszéltünk, egy olyan adatblokk létrehozásának módjáról, 

3
00:00:06,764 --> 00:00:09,152
ahol a legtöbb bit egy értelmes üzenetet hordoz, 

4
00:00:09,152 --> 00:00:12,174
míg néhány másik egyfajta redundanciaként működik, oly módon, 

5
00:00:12,174 --> 00:00:16,171
hogy ha bármelyik bit felcserélődik, akár egy üzenetbit, akár egy redundanciabit, 

6
00:00:16,171 --> 00:00:19,777
bármi ebben a blokkban, a vevő képes lesz azonosítani, hogy hiba történt, 

7
00:00:19,777 --> 00:00:21,240
és hogyan kell kijavítani azt.

8
00:00:21,880 --> 00:00:24,334
Az ott bemutatott alapötlet az volt, hogy többszörös 

9
00:00:24,334 --> 00:00:27,160
paritásellenőrzéssel hogyan lehet binárisan lejutni a hibáig.

10
00:00:28,980 --> 00:00:31,739
Ebben a videóban a cél az volt, hogy a Hamming-kódokat 

11
00:00:31,739 --> 00:00:34,600
minél gyakorlatiasabbnak és újra felfedezhetőnek érezzük.

12
00:00:35,180 --> 00:00:37,741
De ha elkezdünk gondolkodni a tényleges megvalósításon, 

13
00:00:37,741 --> 00:00:41,309
akár szoftverben, akár hardverben, akkor ez a keretezés valójában alábecsüli, 

14
00:00:41,309 --> 00:00:43,460
hogy ezek a kódok valójában mennyire elegánsak.

15
00:00:43,920 --> 00:00:46,242
Azt gondolhatod, hogy olyan algoritmust kell írnod, 

16
00:00:46,242 --> 00:00:48,610
amely számon tartja az összes lehetséges hibahelyet, 

17
00:00:48,610 --> 00:00:52,273
és minden egyes ellenőrzésnél kettévágja ezt a csoportot, de ez valójában sokkal, 

18
00:00:52,273 --> 00:00:53,480
de sokkal egyszerűbb ennél.

19
00:00:53,940 --> 00:00:57,954
Ha az előző videóban bemutatott négy paritás-ellenőrzés válaszait felolvassa, 

20
00:00:57,954 --> 00:01:01,557
és mindegyiket egyesek és nullák formájában, igenek és nemek helyett, 

21
00:01:01,557 --> 00:01:04,080
akkor szó szerint kiírja a hiba helyét binárisan.

22
00:01:04,780 --> 00:01:08,142
Például a 7-es szám binárisan úgy néz ki, mint a 0111, 

23
00:01:08,142 --> 00:01:11,260
ami lényegében azt jelenti, hogy 4 plusz 2 plusz 1.

24
00:01:12,540 --> 00:01:14,460
És figyeljük meg, hol helyezkedik el a 7-es pozíció.

25
00:01:14,840 --> 00:01:21,740
Az első paritásos csoportot érinti, a másodikat és a harmadikat is, de az utolsót nem.

26
00:01:22,220 --> 00:01:24,982
Tehát a négy ellenőrzés eredményeinek alulról felfelé 

27
00:01:24,982 --> 00:01:27,540
történő olvasása valóban megmutatja a hiba helyét.

28
00:01:28,320 --> 00:01:31,140
A 7-es példában nincs semmi különös, ez általánosságban működik.

29
00:01:31,780 --> 00:01:35,820
Ez megdöbbentően egyszerűvé teszi az egész rendszer hardveres megvalósításának logikáját.

30
00:01:37,240 --> 00:01:40,982
Ha látni akarod, hogy miért történik ez a varázslat, 

31
00:01:40,982 --> 00:01:47,126
vedd ezt a 16 indexcímkét a pozíciónkhoz, de ahelyett, hogy 10-es bázison írnánk őket, 

32
00:01:47,126 --> 00:01:49,880
írjuk őket binárisan, 0000-tól 1111-ig.

33
00:01:50,560 --> 00:01:53,771
Ahogy ezeket a bináris címkéket visszatesszük a dobozukba, 

34
00:01:53,771 --> 00:01:57,800
hadd hangsúlyozzam, hogy ezek különböznek a ténylegesen küldött adatoktól.

35
00:01:58,320 --> 00:02:01,787
Ezek nem többek, mint egy fogalmi címke, amely segít neked és nekem megérteni, 

36
00:02:01,787 --> 00:02:03,500
honnan származik a négy paritáscsoport.

37
00:02:04,140 --> 00:02:08,018
Annak eleganciáját, hogy mindent, amit nézünk, binárisan írunk le, 

38
00:02:08,018 --> 00:02:12,360
talán aláássa az a zűrzavar, hogy mindent, amit nézünk, binárisan írunk le.

39
00:02:13,020 --> 00:02:14,120
De megéri.

40
00:02:14,800 --> 00:02:18,240
Koncentráljon a figyelmét csak az összes címke utolsó darabjára.

41
00:02:19,880 --> 00:02:23,220
Majd emelje ki azokat a pozíciókat, ahol az utolsó bit 1.

42
00:02:24,240 --> 00:02:29,120
Amit kapunk, az a négy paritáscsoportunk közül az első, ami azt jelenti, 

43
00:02:29,120 --> 00:02:33,333
hogy az első ellenőrzést úgy értelmezhetjük, hogy ha hiba van, 

44
00:02:33,333 --> 00:02:35,740
akkor az utolsó bit a hiba helyén 1?

45
00:02:38,200 --> 00:02:40,918
Hasonlóképpen, ha az utolsó előtti bitre koncentrálunk, 

46
00:02:40,918 --> 00:02:43,490
és kiemeljük az összes olyan pozíciót, ahol ez 1-es, 

47
00:02:43,490 --> 00:02:46,160
akkor megkapjuk a második paritáscsoportot a sémánkból.

48
00:02:46,740 --> 00:02:50,340
Más szóval, ez a második ellenőrzés azt kérdezi, hogy hé, 

49
00:02:50,340 --> 00:02:54,500
én megint, ha hiba van, az utolsó előtti bit az adott pozícióban 1?

50
00:02:55,760 --> 00:02:56,900
És így tovább.

51
00:02:57,220 --> 00:03:00,736
A harmadik paritásellenőrzés minden olyan pozíciót lefed, 

52
00:03:00,736 --> 00:03:05,769
amelynek utolsó előtti bitje bekapcsolt, az utolsó pedig az utolsó nyolc pozíciót, 

53
00:03:05,769 --> 00:03:08,740
vagyis azokat, amelyek legmagasabb rendű bitje 1.

54
00:03:09,740 --> 00:03:14,025
Minden, amit korábban tettünk, ugyanaz, mint a négy kérdés megválaszolása, 

55
00:03:14,025 --> 00:03:17,740
ami viszont ugyanaz, mint egy pozíció binárisan történő betűzése.

56
00:03:19,620 --> 00:03:21,480
Remélem, ez két dolgot tisztáz.

57
00:03:22,040 --> 00:03:24,465
Az első az, hogy hogyan lehet szisztematikusan általánosítani 

58
00:03:24,465 --> 00:03:26,460
a nagyobb kettes hatványait jelentő blokkméretekre.

59
00:03:26,960 --> 00:03:30,218
Ha minden egyes pozíció leírásához több bitre van szükség, 

60
00:03:30,218 --> 00:03:35,188
például hat bitre 64 hely leírásához, akkor minden egyes bit egy-egy paritáscsoportot ad, 

61
00:03:35,188 --> 00:03:36,680
amelyet ellenőriznünk kell.

62
00:03:38,400 --> 00:03:41,460
Azok, akik látták a sakktáblás rejtvényt, amit Matt Parkerrel csináltam, 

63
00:03:41,460 --> 00:03:43,180
mindezt rendkívül ismerősnek találhatják.

64
00:03:43,660 --> 00:03:46,416
Ugyanaz az alaplogika, de egy másik probléma megoldása, 

65
00:03:46,416 --> 00:03:48,780
és egy 64 négyzetméteres sakktáblára alkalmazva.

66
00:03:49,880 --> 00:03:52,516
A második dolog, amit remélem, hogy ez világossá teszi, 

67
00:03:52,516 --> 00:03:56,331
hogy miért ülnek a paritásbitjeink olyan pozíciókban, amelyek a kettő hatványai, 

68
00:03:56,331 --> 00:03:57,320
például 1, 2, 4 és 8.

69
00:03:58,000 --> 00:04:03,000
Ezek azok a pozíciók, amelyek bináris ábrázolása csak egyetlen bekapcsolt bitet tartalmaz.

70
00:04:03,600 --> 00:04:06,447
Ez azt jelenti, hogy minden egyes paritásbit a négy 

71
00:04:06,447 --> 00:04:09,460
paritáscsoport közül csak egy és csakis egybe tartozik.

72
00:04:12,040 --> 00:04:15,861
Ezt nagyobb példákban is láthatjuk, ahol bármilyen nagy is legyen, 

73
00:04:15,861 --> 00:04:19,339
minden paritásbit kényelmesen csak az egyik csoportot érinti.

74
00:04:25,600 --> 00:04:29,849
Ha megértettük, hogy ezek a paritásellenőrzések, amelyekre oly sok időt fordítottunk, 

75
00:04:29,849 --> 00:04:33,654
nem többek, mint egy okos módja annak, hogy a hiba helyét binárisan leírjuk, 

76
00:04:33,654 --> 00:04:37,656
akkor kapcsolatot tudunk teremteni a hamming kódokról való gondolkodás egy másik 

77
00:04:37,656 --> 00:04:40,868
módjával, amely vitathatatlanul sokkal egyszerűbb és elegánsabb, 

78
00:04:40,868 --> 00:04:43,240
és amely alapvetően egyetlen kódsorral leírható.

79
00:04:43,660 --> 00:04:45,500
Az XOR függvényen alapul.

80
00:04:46,940 --> 00:04:50,220
Az XOR, azok számára, akik nem tudják, a exclusive or rövidítése.

81
00:04:50,780 --> 00:04:55,182
Ha két bit XOR-ját vesszük, akkor 1 lesz, ha valamelyik bit be van kapcsolva, 

82
00:04:55,182 --> 00:04:59,360
de nem, ha mindkettő be van kapcsolva, vagy ha mindkettő ki van kapcsolva.

83
00:05:00,100 --> 00:05:02,980
Másképp fogalmazva, ez a két bit paritása.

84
00:05:03,540 --> 00:05:06,760
Matematikusként én inkább úgy gondolok rá, hogy összeadás mod 2.

85
00:05:07,360 --> 00:05:10,666
Szintén gyakran beszélünk két különböző bitsorozat XOR-járól, 

86
00:05:10,666 --> 00:05:13,440
amely alapvetően komponensről komponensre végzi ezt.

87
00:05:13,680 --> 00:05:15,720
Olyan, mint az összeadás, csak itt soha nem viszed el.

88
00:05:16,500 --> 00:05:19,607
A matematikához jobban értők ezt úgy képzelhetik el, 

89
00:05:19,607 --> 00:05:22,480
hogy két vektort összeadunk, és mod 2 redukáljuk.

90
00:05:23,500 --> 00:05:28,542
Ha most megnyitsz egy Pythont, és két egész szám között alkalmazod a caret műveletet, 

91
00:05:28,542 --> 00:05:32,940
akkor ezt teszi, de a motorháztető alatt a számok bites reprezentációjával.

92
00:05:34,960 --> 00:05:38,819
A lényeg számodra és számomra az, hogy sok különböző bitsorozat 

93
00:05:38,819 --> 00:05:44,245
XOR-ját véve gyakorlatilag egy csomó különálló csoport paritásának kiszámítására van mód, 

94
00:05:44,245 --> 00:05:47,140
mint az oszlopok esetében, mindezt egy csapásra.

95
00:05:51,260 --> 00:05:54,835
Ez egy elég elegáns módot ad arra, hogy a Hamming-kód algoritmusunk 

96
00:05:54,835 --> 00:05:58,780
többszörös paritás-ellenőrzését egyetlen műveletbe csomagolva gondoljuk el.

97
00:05:59,480 --> 00:06:02,180
Bár első pillantásra nagyon másnak tűnik.

98
00:06:02,820 --> 00:06:07,369
Konkrétan írjuk le a 16 pozíciót binárisan, ahogyan korábban is tettük, 

99
00:06:07,369 --> 00:06:12,171
és most csak azokat a pozíciókat emeljük ki, ahol az üzenetbit 1-esre vált, 

100
00:06:12,171 --> 00:06:17,100
majd gyűjtsük össze ezeket a pozíciókat egy nagy oszlopba, és vegyük az XOR-t.

101
00:06:19,260 --> 00:06:22,760
Valószínűleg kitalálhatod, hogy az eredményként alul ülő négy bit ugyanaz, 

102
00:06:22,760 --> 00:06:25,746
mint az általunk megismert és szeretett négy paritásellenőrzés, 

103
00:06:25,746 --> 00:06:29,200
de szánj egy pillanatot arra, hogy elgondolkodj azon, hogy pontosan miért.

104
00:06:32,220 --> 00:06:36,088
Ez az utolsó oszlop például megszámolja az összes olyan pozíciót, 

105
00:06:36,088 --> 00:06:40,250
amelynek utolsó bitje 1, de már csak a kiemelt pozíciókat korlátozzuk, 

106
00:06:40,250 --> 00:06:44,704
így gyakorlatilag azt számolja, hogy hány kiemelt pozíció származik az első 

107
00:06:44,704 --> 00:06:45,760
paritáscsoportból.

108
00:06:46,240 --> 00:06:46,800
Van ennek értelme?

109
00:06:49,080 --> 00:06:51,824
Hasonlóképpen, a következő oszlop azt számolja, 

110
00:06:51,824 --> 00:06:55,712
hogy hány pozíció van a második paritáscsoportban, azok a pozíciók, 

111
00:06:55,712 --> 00:07:00,000
amelyek utolsó előtti bitje 1, és amelyek szintén kiemeltek, és így tovább.

112
00:07:00,260 --> 00:07:03,095
Ez valójában csak egy kis perspektívaváltás ugyanannak a dolognak a szemszögéből, 

113
00:07:03,095 --> 00:07:03,960
amit eddig is csináltunk.

114
00:07:07,760 --> 00:07:09,600
És így tudod, hogy innen hová vezet a dolog.

115
00:07:10,000 --> 00:07:14,267
A küldő feladata, hogy néhány speciális paritásbitet átkapcsoljon, 

116
00:07:14,267 --> 00:07:16,560
hogy az összeg biztosan 0000 legyen.

117
00:07:19,040 --> 00:07:23,809
Ha már így állunk, akkor ez egy nagyon szép módot ad arra, hogy elgondolkodjunk azon, 

118
00:07:23,809 --> 00:07:27,580
hogy ez a négy bit az alján miért írja le közvetlenül a hiba helyét.

119
00:07:28,460 --> 00:07:31,860
Tegyük fel, hogy ebben a blokkban egy bit 0-ról 1-re változik.

120
00:07:32,600 --> 00:07:37,794
Ez azt jelenti, hogy a bit pozíciója most már benne lesz a teljes XOR-ban, 

121
00:07:37,794 --> 00:07:43,820
ami megváltoztatja az összeget 0 helyett az újonnan bevont értékre, a hiba pozíciójára.

122
00:07:44,460 --> 00:07:47,012
Valamivel kevésbé nyilvánvaló, hogy ugyanez igaz, 

123
00:07:47,012 --> 00:07:49,360
ha egy hiba miatt az 1-es érték 0-ra változik.

124
00:07:50,180 --> 00:07:53,371
Tudod, ha kétszer összeadsz egy bitet, az ugyanaz, 

125
00:07:53,371 --> 00:07:57,940
mintha nem is lenne benne, mert ebben a világban 1 plusz 1 egyenlő 0-val.

126
00:07:58,920 --> 00:08:03,263
Tehát ennek a pozíciónak a másolatának hozzáadása a teljes összeghez ugyanolyan hatású, 

127
00:08:03,263 --> 00:08:04,300
mint az eltávolítása.

128
00:08:05,160 --> 00:08:10,700
És ez a hatás ismét az, hogy a teljes eredmény itt alul megadja a hiba helyét.

129
00:08:13,040 --> 00:08:15,301
Annak illusztrálására, hogy ez mennyire elegáns, 

130
00:08:15,301 --> 00:08:17,470
hadd mutassam meg azt az egy sor Python kódot, 

131
00:08:17,470 --> 00:08:21,440
amelyre korábban hivatkoztam, és amely szinte az egész logikát rögzíti a vevő oldalán.

132
00:08:22,080 --> 00:08:26,351
Azzal kezdjük, hogy létrehozunk egy 16 egyesből és nullából álló véletlenszerű tömböt, 

133
00:08:26,351 --> 00:08:29,494
hogy szimuláljuk az adatblokkot, és megadom neki a bitek nevet, 

134
00:08:29,494 --> 00:08:33,275
de természetesen a gyakorlatban ez olyasmi lenne, amit egy feladótól kapunk, 

135
00:08:33,275 --> 00:08:37,400
és ahelyett, hogy véletlenszerű lenne, 11 adatbitet hordozna 5 paritásbittel együtt.

136
00:08:38,120 --> 00:08:42,592
Ha meghívom az enumerateBits függvényt, akkor az minden egyes bitet 

137
00:08:42,592 --> 00:08:47,000
összepárosít egy megfelelő indexszel, ebben az esetben 0-tól 15-ig.

138
00:08:48,180 --> 00:08:52,187
Tehát ha létrehozunk egy listát, amely végigmegy ezeken a párokon, 

139
00:08:52,187 --> 00:08:56,614
az i,bit alakú párokon, és csak az i értéket, csak az indexet vesszük ki, 

140
00:08:56,614 --> 00:09:01,340
nos, ez nem olyan izgalmas, csak a 0-tól 15-ig terjedő indexeket kapjuk vissza.

141
00:09:01,680 --> 00:09:05,420
De ha hozzáadjuk azt a feltételt, hogy csak akkor tegyük ezt, 

142
00:09:05,420 --> 00:09:10,367
ha a bit, vagyis ha az a bit 1 és nem 0, akkor csak azokat a pozíciókat húzza ki, 

143
00:09:10,367 --> 00:09:12,660
ahol a megfelelő bit be van kapcsolva.

144
00:09:13,380 --> 00:09:17,960
Ebben az esetben úgy néz ki, hogy ezek a pozíciók a 0, 4, 6, 9, stb.

145
00:09:19,980 --> 00:09:23,742
Ne feledjük, hogy az összes pozíciót, a bekapcsolt bitek 

146
00:09:23,742 --> 00:09:27,240
pozícióit össze akarjuk gyűjteni, majd XOR-olni őket.

147
00:09:29,180 --> 00:09:33,220
Ehhez Pythonban először is hadd importáljak néhány hasznos függvényt.

148
00:09:33,900 --> 00:09:36,377
Így meghívhatjuk a reduce()-t ezen a listán, és 

149
00:09:36,377 --> 00:09:38,700
az XOR függvényt használhatjuk a redukcióhoz.

150
00:09:39,100 --> 00:09:42,680
Ez alapvetően végigfogyasztja magát a listán, és közben XOR-okat vesz fel.

151
00:09:44,800 --> 00:09:47,922
Ha szeretné, akkor kifejezetten kiírhatja ezt az XOR függvényt anélkül, 

152
00:09:47,922 --> 00:09:49,440
hogy importálnia kellene bárhonnan.

153
00:09:51,940 --> 00:09:57,234
Jelenleg tehát úgy néz ki, hogy ha ezt a 16 bites véletlenszerű blokkunkkal végezzük el, 

154
00:09:57,234 --> 00:10:01,280
akkor 9-et kapunk vissza, ami az 1001-es bináris ábrázolást jelenti.

155
00:10:01,980 --> 00:10:05,086
Ezt itt nem fogjuk megtenni, de írhatnál egy olyan függvényt, 

156
00:10:05,086 --> 00:10:09,145
ahol a feladó ezt a bináris ábrázolást használja a 4 paritásbit szükség szerinti 

157
00:10:09,145 --> 00:10:12,353
beállítására, és végül olyan állapotba hozhatnád ezt a blokkot, 

158
00:10:12,353 --> 00:10:15,460
ahol a kódsor futtatása a bitek teljes listáján 0-t ad vissza.

159
00:10:16,080 --> 00:10:18,200
Ez egy jól előkészített blokknak minősül.

160
00:10:19,880 --> 00:10:24,016
Most az a klassz, hogy ha a listában lévő bitek bármelyikét átkapcsoljuk, 

161
00:10:24,016 --> 00:10:28,822
egy véletlenszerű hibát szimulálva a zajból, akkor ha lefuttatjuk ugyanazt a kódsort, 

162
00:10:28,822 --> 00:10:30,220
akkor kiírja ezt a hibát.

163
00:10:30,960 --> 00:10:31,520
Hát nem klassz?

164
00:10:31,820 --> 00:10:36,590
A semmiből előveheted ezt a blokkot, lefuttathatod rajta ezt az egyetlen sort, 

165
00:10:36,590 --> 00:10:41,060
és automatikusan kiköpi a hiba pozícióját, vagy egy 0-t, ha nem volt hiba.

166
00:10:42,500 --> 00:10:45,200
És itt semmi különös nincs a 16-os méretben.

167
00:10:45,400 --> 00:10:49,860
Ugyanez a kódsor akkor is működne, ha egy 256 bites listával rendelkeznénk.

168
00:10:51,880 --> 00:10:54,822
Mondanom sem kell, hogy itt még több kódot kell írni, 

169
00:10:54,822 --> 00:10:58,637
mint például a meta paritásellenőrzés a 2 bites hibák felismeréséhez, 

170
00:10:58,637 --> 00:11:02,561
de az ötlet az, hogy a sémánk majdnem minden alapvető logikája egyetlen 

171
00:11:02,561 --> 00:11:03,760
XOR redukcióra fut ki.

172
00:11:06,120 --> 00:11:09,161
Attól függően, hogy mennyire vagy otthonos a bináris és az XOR-ok és 

173
00:11:09,161 --> 00:11:12,909
általában a szoftverek terén, vagy egy kicsit zavarosnak találod ezt a perspektívát, 

174
00:11:12,909 --> 00:11:15,598
vagy sokkal elegánsabbnak és egyszerűbbnek, és azon tűnődsz, 

175
00:11:15,598 --> 00:11:18,420
hogy miért nem kezdtük ezzel a szemlélettel a kezdetektől fogva.

176
00:11:19,140 --> 00:11:22,801
Ha lazán fogalmazunk, a többszörös paritásellenőrzés perspektívájára könnyebb gondolni, 

177
00:11:22,801 --> 00:11:25,839
amikor a Hamming-kódokat hardveresen, nagyon közvetlenül implementáljuk, 

178
00:11:25,839 --> 00:11:28,294
az XOR perspektívájára pedig akkor a legkönnyebb gondolni, 

179
00:11:28,294 --> 00:11:30,500
amikor szoftveresen, egy magasabb szintről csináljuk.

180
00:11:31,360 --> 00:11:34,656
Az elsőt a legkönnyebb kézzel elvégezni, és úgy gondolom, 

181
00:11:34,656 --> 00:11:38,975
hogy ez jobban elsajátítja a mindezek alapjául szolgáló alapvető intuíciót, 

182
00:11:38,975 --> 00:11:43,805
amely szerint az egyetlen hiba megtalálásához szükséges információ a blokk méretének 

183
00:11:43,805 --> 00:11:48,351
logaritmusával függ össze, vagy más szóval, a blokk méretének megduplázódásával 

184
00:11:48,351 --> 00:11:50,000
egyszerre csak egy bittel nő.

185
00:11:51,020 --> 00:11:54,263
A lényeges tény itt az, hogy ez az információ közvetlenül megfelel annak, 

186
00:11:54,263 --> 00:11:56,060
hogy mennyi redundanciára van szükségünk.

187
00:11:56,660 --> 00:11:59,243
Ez az, ami a legtöbb ember térdproblémájával ellentétes, 

188
00:11:59,243 --> 00:12:03,322
amikor először gondolkodik azon, hogy egy üzenetet ellenállóvá tegyen a hibákkal szemben, 

189
00:12:03,322 --> 00:12:06,540
ahol általában a teljes üzenet másolása az első ösztön, ami eszébe jut.

190
00:12:07,500 --> 00:12:10,527
És egyébként van ez a teljesen más módszer, amit néha Hamming-kódok 

191
00:12:10,527 --> 00:12:14,000
bemutatásakor láthatunk, amikor az üzenetet egy nagy mátrixszal szorozzuk meg.

192
00:12:14,670 --> 00:12:17,746
Ez elég szép, mert a lineáris kódok tágabb családjához kapcsolja, 

193
00:12:17,746 --> 00:12:20,915
de szerintem ez szinte semmilyen intuíciót nem ad arra vonatkozóan, 

194
00:12:20,915 --> 00:12:23,060
hogy honnan származik, vagy hogyan skálázódik.

195
00:12:25,200 --> 00:12:27,400
És ha már a skálázásnál tartunk, észrevehetjük, 

196
00:12:27,400 --> 00:12:31,160
hogy ennek a rendszernek a hatékonysága csak javul, ahogy növeljük a blokkméretet.

197
00:12:35,000 --> 00:12:40,328
Láttuk például, hogy 256 bit esetén a redundanciának csak 3%-át használjuk fel, 

198
00:12:40,328 --> 00:12:42,660
és onnantól kezdve egyre jobb lesz.

199
00:12:43,300 --> 00:12:47,340
Ahogy a paritásbitek száma egyesével növekszik, a blokk mérete folyamatosan megduplázódik.

200
00:12:49,000 --> 00:12:52,810
És ha ezt a végletekig fokozzuk, akkor lehet egy olyan blokkunk, 

201
00:12:52,810 --> 00:12:57,968
mondjuk, egymillió bitből, ahol szó szerint 20 kérdést játszunk a paritásellenőrzéssel, 

202
00:12:57,968 --> 00:13:00,020
és csak 21 paritásbitet használunk.

203
00:13:00,740 --> 00:13:04,205
És ha visszalépsz, és belegondolsz, hogy egymillió bitet nézel meg, 

204
00:13:04,205 --> 00:13:07,060
és egyetlen hibát találsz, az tényleg őrültségnek tűnik.

205
00:13:08,200 --> 00:13:12,239
A probléma persze az, hogy nagyobb blokkok esetén megnő a valószínűsége annak, 

206
00:13:12,239 --> 00:13:14,847
hogy egy vagy két bithibánál több hibát észlelünk, 

207
00:13:14,847 --> 00:13:17,660
és a Hamming-kódok ezen túl nem képesek kezelni semmit.

208
00:13:18,320 --> 00:13:21,072
A gyakorlatban tehát a megfelelő méretet kell megtalálni, 

209
00:13:21,072 --> 00:13:24,300
hogy a túl sok bit felcserélésének valószínűsége ne legyen túl nagy.

210
00:13:26,600 --> 00:13:29,810
Emellett a gyakorlatban a hibák általában kis sorozatban jelentkeznek, 

211
00:13:29,810 --> 00:13:31,620
ami teljesen tönkretesz egy-egy blokkot.

212
00:13:32,200 --> 00:13:35,157
Tehát az egyik általános taktika a hibák sok különböző blokkban 

213
00:13:35,157 --> 00:13:38,715
való eloszlásának elősegítésére az, hogy ezeket a blokkokat összekapcsolják, 

214
00:13:38,715 --> 00:13:40,980
például így, mielőtt elküldik vagy tárolják őket.

215
00:13:45,580 --> 00:13:49,667
Másfelől, a modernebb kódok, mint például a sokkal gyakrabban használt 

216
00:13:49,667 --> 00:13:53,869
Reed-Solomon algoritmus, amely különösen jól kezeli a sorozatos hibákat, 

217
00:13:53,869 --> 00:13:58,820
és úgy hangolható, hogy blokkonként nagyobb számú hibával szemben is ellenálló legyen.

218
00:13:59,360 --> 00:14:01,340
De ez már egy másik téma.

219
00:14:02,500 --> 00:14:06,444
A The Art of Doing Science and Engineering című könyvében Hamming csodálatosan 

220
00:14:06,444 --> 00:14:09,940
őszintén beszél arról, hogy mennyire kanyargós volt a kód felfedezése.

221
00:14:10,620 --> 00:14:13,073
Először mindenféle különböző sémákat próbált ki, 

222
00:14:13,073 --> 00:14:16,528
amelyekben a biteket egy magasabb dimenziós rács részeibe szervezte, 

223
00:14:16,528 --> 00:14:17,780
és ilyen furcsa dolgokat.

224
00:14:18,300 --> 00:14:22,019
Az ötlet, hogy lehetséges lenne a paritás-ellenőrzéseket úgy összeesküvésre bírni, 

225
00:14:22,019 --> 00:14:24,797
hogy a hiba helyét kiírják, csak akkor jutott Hamming eszébe, 

226
00:14:24,797 --> 00:14:27,890
amikor egy csomó más elemzés után hátralépett, és megkérdezte: "Oké, 

227
00:14:27,890 --> 00:14:31,520
mi a leghatékonyabb, amit elképzelhető, hogy ebben a kérdésben megvalósíthatok?".

228
00:14:32,620 --> 00:14:34,987
Őszintén beszélt arról is, mennyire fontos volt, 

229
00:14:34,987 --> 00:14:37,693
hogy már akkor is a paritásos csekkek jártak a fejében, 

230
00:14:37,693 --> 00:14:41,220
ami az 1940-es években sokkal kevésbé lett volna jellemző, mint manapság.

231
00:14:41,920 --> 00:14:45,572
A könyvben mintegy féltucatszor hivatkozik a Louis Pasteur-idézetre, 

232
00:14:45,572 --> 00:14:48,220
miszerint a szerencse a felkészült elmének kedvez.

233
00:14:49,320 --> 00:14:52,524
Az okos ötletek utólag gyakran megtévesztően egyszerűnek tűnnek, 

234
00:14:52,524 --> 00:14:54,300
ami miatt könnyen alábecsüljük őket.

235
00:14:54,960 --> 00:14:58,105
Most őszintén remélem, hogy a Hamming-kódok, vagy legalábbis az 

236
00:14:58,105 --> 00:15:01,300
ilyen kódok lehetősége szinte magától értetődőnek tűnik számodra.

237
00:15:01,660 --> 00:15:06,820
De ne áltasd magad azzal, hogy ezek valóban nyilvánvalóak, mert biztosan nem azok.

238
00:15:07,880 --> 00:15:11,086
Az okos ötletek részben azért tűnnek megtévesztően egyszerűnek, 

239
00:15:11,086 --> 00:15:14,743
mert mindig csak a végeredményt látjuk, eltakarítva, ami rendetlen volt, 

240
00:15:14,743 --> 00:15:17,649
soha nem említve az összes rossz fordulatot, alábecsülve, 

241
00:15:17,649 --> 00:15:21,356
hogy a problémamegoldási folyamat kezdetén milyen hatalmas a felfedezhető 

242
00:15:21,356 --> 00:15:22,860
lehetőségek tárháza, mindezek.

243
00:15:23,820 --> 00:15:24,900
De ez általánosságban igaz.

244
00:15:24,900 --> 00:15:27,902
Azt hiszem, néhány különleges találmány esetében van egy második, 

245
00:15:27,902 --> 00:15:30,040
mélyebb oka is annak, hogy alulértékeljük őket.

246
00:15:30,840 --> 00:15:33,685
Az információ bitekben való elgondolása csak 1948-ra, 

247
00:15:33,685 --> 00:15:37,744
Claude Shannon információelméletről szóló alapvető tanulmányával vált igazán 

248
00:15:37,744 --> 00:15:38,640
teljes elméletté.

249
00:15:39,280 --> 00:15:42,540
Ez lényegében egybeesett azzal, amikor Hamming kifejlesztette algoritmusát.

250
00:15:43,300 --> 00:15:46,375
Ez volt az az alapozó írás, amely bizonyos értelemben megmutatta, 

251
00:15:46,375 --> 00:15:49,451
hogy a hatékony hibajavítás mindig lehetséges, függetlenül attól, 

252
00:15:49,451 --> 00:15:52,900
hogy a bitek felcserélésének valószínűsége mekkora, legalábbis elméletben.

253
00:15:53,700 --> 00:15:57,684
Shannon és Hamming egyébként közös irodát használtak a Bell Labs-ben, annak ellenére, 

254
00:15:57,684 --> 00:16:01,160
hogy nagyon különböző dolgokon dolgoztak, ami itt aligha tűnik véletlennek.

255
00:16:02,380 --> 00:16:05,409
Ugorjunk előre néhány évtizedet, és manapság sokan annyira 

256
00:16:05,409 --> 00:16:08,540
elmerültek a bitekről és információkról való gondolkodásban, 

257
00:16:08,540 --> 00:16:12,340
hogy könnyű figyelmen kívül hagyni, mennyire más volt ez a gondolkodásmód.

258
00:16:13,100 --> 00:16:16,268
Ironikus módon azok az eszmék, amelyek a legmélyebben alakítják 

259
00:16:16,268 --> 00:16:19,289
a jövő generációjának gondolkodásmódját, végül egyszerűbbnek 

260
00:16:19,289 --> 00:16:22,260
tűnnek a jövő generációja számára, mint amilyenek valójában.

