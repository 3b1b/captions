1
00:00:00,000 --> 00:00:08,620
Você já se perguntou como é possível riscar um CD ou

2
00:00:08,620 --> 00:00:10,900
DVD e ainda assim reproduzir tudo o que está armazenado?

3
00:00:10,900 --> 00:00:15,280
O arranhão realmente afeta os 1s e 0s no disco, então ele lê

4
00:00:15,280 --> 00:00:20,500
dados diferentes daqueles que foram armazenados, mas a menos que esteja realmente

5
00:00:20,500 --> 00:00:26,540
riscado, os bits lidos são decodificados precisamente no mesmo arquivo que foi

6
00:00:26,540 --> 00:00:28,400
codificado nele, um cópia bit por bit, apesar de todos esses erros.

7
00:00:28,400 --> 00:00:32,800
Há toda uma pilha de inteligência matemática que nos permite armazenar

8
00:00:32,800 --> 00:00:36,840
dados e, igualmente importante, transmiti-los de uma forma resistente a erros.

9
00:00:36,840 --> 00:00:41,480
Bem, ok, na verdade não é preciso muita

10
00:00:41,480 --> 00:00:42,480
inteligência para descobrir uma maneira de fazer isso.

11
00:00:42,480 --> 00:00:47,660
Qualquer arquivo, seja um vídeo, som ou texto, algum código, uma imagem, seja

12
00:00:47,660 --> 00:00:50,960
o que for, é, em última análise, uma sequência de 1s e 0s.

13
00:00:50,960 --> 00:00:55,340
E uma estratégia simples para corrigir qualquer bit

14
00:00:55,340 --> 00:00:57,780
invertido seria armazenar três cópias de cada bit.

15
00:00:57,780 --> 00:01:02,240
Então a máquina que lê este arquivo poderia comparar essas três cópias e

16
00:01:02,240 --> 00:01:07,440
sempre tirar a melhor 2 de 3 sempre que houver uma discrepância.

17
00:01:07,440 --> 00:01:11,560
Mas o que isso significa é usar dois terços do seu espaço para redundância.

18
00:01:11,560 --> 00:01:15,360
E mesmo assim, apesar de todo esse espaço cedido, não há nenhuma garantia

19
00:01:15,360 --> 00:01:18,120
forte sobre o que acontecerá se mais de um bit for invertido.

20
00:01:18,120 --> 00:01:21,960
A questão muito mais interessante é como fazer com que os

21
00:01:21,960 --> 00:01:24,740
erros possam ser corrigidos, abrindo mão do mínimo de espaço possível.

22
00:01:24,740 --> 00:01:28,500
Por exemplo, usando o método que você aprenderá neste vídeo, você poderia armazenar seus dados em blocos

23
00:01:28,500 --> 00:01:35,840
de 256 bits, onde cada bloco usa 9 bits, 9! para atuar como uma espécie de redundância,

24
00:01:35,840 --> 00:01:41,000
e os outros 247 bits são livres para transportar qualquer mensagem ou dado significativo que você desejar.

25
00:01:41,000 --> 00:01:44,740
E ainda vai acontecer que se algum bit for invertido aqui, só de

26
00:01:44,740 --> 00:01:49,640
olhar esse bloco e nada mais, uma máquina vai conseguir identificar que houve

27
00:01:49,640 --> 00:01:53,120
um erro e exatamente onde ele estava para saber como corrigi-lo. .

28
00:01:53,140 --> 00:01:55,540
E honestamente, isso parece mágico.

29
00:01:55,540 --> 00:01:59,400
E para este esquema específico, se dois bits forem invertidos, a máquina será pelo

30
00:01:59,400 --> 00:02:03,180
menos capaz de detectar que houve dois erros, embora não saiba como corrigi-los.

31
00:02:03,180 --> 00:02:08,140
Falaremos um pouco mais tarde sobre como isso é dimensionado para blocos com tamanhos diferentes.

32
00:02:08,140 --> 00:02:12,620
Métodos que permitem corrigir erros como esse são

33
00:02:12,620 --> 00:02:13,880
conhecidos, razoavelmente, como códigos de correção de erros.

34
00:02:13,880 --> 00:02:18,220
Durante a maior parte do século passado, este campo tem sido uma fonte realmente rica

35
00:02:18,220 --> 00:02:23,000
de matemática surpreendentemente profunda que é incorporada aos dispositivos que usamos todos os dias.

36
00:02:23,000 --> 00:02:27,740
O objetivo aqui é fornecer uma compreensão completa de

37
00:02:27,740 --> 00:02:29,660
um dos primeiros exemplos, conhecido como código de Hamming.

38
00:02:29,660 --> 00:02:32,620
E, a propósito, a maneira como estou pensando na estrutura deste vídeo tem menos a

39
00:02:32,620 --> 00:02:37,060
ver com explicá-lo da forma mais direta possível e mais com uma questão de incentivá-lo

40
00:02:37,060 --> 00:02:40,220
a inventá-lo por si mesmo, com um pouco de orientação gentil aqui e ali.

41
00:02:40,220 --> 00:02:44,100
Então, quando você sentir que está vendo onde as coisas estão indo em algum momento, reserve um

42
00:02:44,100 --> 00:02:47,180
momento para fazer uma pausa, preveja ativamente qual será o esquema antes que eu lhe conte.

43
00:02:47,180 --> 00:02:51,500
Além disso, se você quiser que sua compreensão chegue ao nível do

44
00:02:51,500 --> 00:02:55,160
hardware, Ben Eater fez um vídeo em conjunto com este mostrando como

45
00:02:55,160 --> 00:02:59,520
realmente implementar códigos de Hamming em protoboards, o que é extremamente satisfatório.

46
00:02:59,520 --> 00:03:03,120
Você deve saber que os códigos de Hamming não são tão amplamente usados quanto os códigos mais

47
00:03:03,120 --> 00:03:08,040
modernos, como o algoritmo Reed-Solomon, mas há uma certa magia no contraste entre o quão impossível essa

48
00:03:08,040 --> 00:03:14,240
tarefa parece no início e o quão totalmente razoável ela parece uma vez. você aprende sobre Hamming.

49
00:03:14,240 --> 00:03:19,080
O princípio básico da correção de erros é que, em um vasto espaço

50
00:03:19,300 --> 00:03:22,860
de todas as mensagens possíveis, apenas alguns subconjuntos serão considerados mensagens válidas.

51
00:03:22,860 --> 00:03:29,100
Como analogia, pense em palavras escritas corretamente versus palavras escritas incorretamente.

52
00:03:29,100 --> 00:03:33,340
Sempre que uma mensagem válida é alterada, o receptor é responsável por corrigir o que vê

53
00:03:33,340 --> 00:03:38,380
de volta ao vizinho válido mais próximo, como você faria com um erro de digitação.

54
00:03:38,380 --> 00:03:43,100
Porém, criar um algoritmo concreto para categorizar mensagens

55
00:03:43,100 --> 00:03:47,160
como essa de maneira eficiente exige certa inteligência.

56
00:03:47,160 --> 00:03:52,060
A história começa na década de 1940, quando um jovem Richard Hamming trabalhava para

57
00:03:52,060 --> 00:03:55,900
o Bell Labs, e parte de seu trabalho envolvia o uso de um computador

58
00:03:55,900 --> 00:03:57,420
de cartão perfurado muito grande e caro, ao qual ele tinha acesso limitado.

59
00:03:57,420 --> 00:04:01,200
E os programas que ele colocava continuavam falhando, porque

60
00:04:01,200 --> 00:04:03,140
de vez em quando um trecho era mal interpretado.

61
00:04:03,140 --> 00:04:07,140
Sendo a frustração o cadinho da invenção, ele ficou tão farto

62
00:04:07,140 --> 00:04:09,280
que inventou o primeiro código de correção de erros do mundo.

63
00:04:09,280 --> 00:04:13,020
Há muitas maneiras diferentes de enquadrar os códigos de Hamming, mas, numa primeira

64
00:04:13,020 --> 00:04:16,620
passagem, vamos analisá-los da maneira como o próprio Hamming pensava sobre eles.

65
00:04:16,620 --> 00:04:21,400
Vamos usar um exemplo simples, mas não muito simples, um bloco de 16 bits.

66
00:04:21,400 --> 00:04:25,700
Numeraremos as posições desses bits de 0 a 15.

67
00:04:25,700 --> 00:04:30,520
Os dados reais que queremos armazenar representarão apenas 12 desses bits,

68
00:04:30,520 --> 00:04:33,920
enquanto 4 das posições são reservadas como uma espécie de redundância.

69
00:04:33,920 --> 00:04:38,120
A palavra redundante aqui não significa simplesmente copiar, afinal, esses 4

70
00:04:38,120 --> 00:04:40,200
bits não nos dão espaço suficiente para copiar cegamente os dados.

71
00:04:40,200 --> 00:04:44,880
Em vez disso, eles precisarão ser um tipo de redundância muito mais

72
00:04:44,880 --> 00:04:48,740
sutil e inteligente, não adicionando nenhuma informação nova, mas adicionando resiliência.

73
00:04:48,740 --> 00:04:52,620
Você pode esperar que esses 4 bits especiais venham bem embalados juntos, talvez

74
00:04:52,620 --> 00:04:56,400
no final ou algo parecido, mas como você verá, colocá-los em posições que

75
00:04:56,400 --> 00:05:00,320
são potências de 2 permite algo que é realmente elegante no final.

76
00:05:00,320 --> 00:05:05,420
Também pode lhe dar uma pequena dica sobre como isso é dimensionado para blocos maiores.

77
00:05:05,420 --> 00:05:09,220
Além disso, tecnicamente, acaba sendo apenas 11 bits de dados. Você descobrirá que há uma pequena

78
00:05:09,220 --> 00:05:14,260
nuance no que acontece na posição 0, mas não se preocupe com isso por enquanto.

79
00:05:14,280 --> 00:05:18,640
Como qualquer algoritmo de correção de erros, isso envolverá dois jogadores, um

80
00:05:18,640 --> 00:05:23,200
remetente responsável por definir esses 4 bits especiais e um receptor

81
00:05:23,200 --> 00:05:26,360
responsável por realizar algum tipo de verificação e corrigir os erros.

82
00:05:26,360 --> 00:05:30,040
É claro que as palavras remetente e destinatário realmente se referem a

83
00:05:30,040 --> 00:05:34,040
máquinas ou software que fazem todas as verificações, e a ideia de

84
00:05:34,040 --> 00:05:35,480
mensagem tem um significado muito amplo, para incluir coisas como armazenamento.

85
00:05:35,480 --> 00:05:39,320
Afinal, armazenar dados é a mesma coisa que enviar uma mensagem apenas do

86
00:05:39,320 --> 00:05:42,640
passado para o futuro, em vez de de um lugar para outro.

87
00:05:42,640 --> 00:05:46,700
Então essa é a configuração, mas antes de começarmos precisamos falar sobre

88
00:05:46,700 --> 00:05:51,080
uma ideia relacionada que estava fresca na mente de Hamming no momento

89
00:05:51,080 --> 00:05:55,520
de sua descoberta, um método que permite detectar quaisquer erros de bit

90
00:05:55,520 --> 00:05:57,300
único, mas não corrigi-los, conhecido no negócio como uma verificação de paridade.

91
00:05:57,300 --> 00:06:01,300
Para uma verificação de paridade, separamos apenas um bit que o remetente é

92
00:06:01,300 --> 00:06:04,940
responsável pelo ajuste, e o restante fica livre para transportar uma mensagem.

93
00:06:04,940 --> 00:06:10,380
A única função deste bit especial é garantir que o

94
00:06:10,380 --> 00:06:12,100
número total de 1s na mensagem seja um número par.

95
00:06:12,100 --> 00:06:16,920
Então, por exemplo, agora, esse número total de 1s é 7, isso é ímpar, então

96
00:06:16,920 --> 00:06:20,960
o remetente precisa inverter esse bit especial para ser 1, tornando a contagem par.

97
00:06:20,960 --> 00:06:25,320
Mas se o bloco já tivesse começado com um número par

98
00:06:25,320 --> 00:06:27,480
de 1s, então esse bit especial teria sido mantido em 0.

99
00:06:27,480 --> 00:06:31,640
Isso é muito simples, aparentemente simples, mas é uma maneira incrivelmente elegante de destilar a ideia

100
00:06:31,640 --> 00:06:37,760
de mudança em qualquer lugar de uma mensagem para ser refletida em uma única informação.

101
00:06:37,760 --> 00:06:43,680
Observe que se qualquer bit desta mensagem for invertido, seja de 0 para 1 ou

102
00:06:43,680 --> 00:06:48,140
de 1 para 0, isso altera a contagem total de 1s de par para ímpar.

103
00:06:48,140 --> 00:06:52,000
Portanto, se você é o receptor, olha para esta mensagem e vê

104
00:06:52,000 --> 00:06:56,580
um número ímpar de 1s, pode ter certeza de que ocorreu

105
00:06:56,580 --> 00:06:58,700
algum erro, mesmo que não tenha ideia de onde ele estava.

106
00:06:58,700 --> 00:07:02,820
No jargão, se um grupo de bits tem um número

107
00:07:02,820 --> 00:07:04,940
par ou ímpar de 1s é conhecido como paridade.

108
00:07:04,940 --> 00:07:09,140
Você também pode usar números e dizer que a paridade é 0 ou 1, o

109
00:07:09,140 --> 00:07:11,320
que normalmente é mais útil quando você começa a fazer contas com a ideia.

110
00:07:11,320 --> 00:07:15,200
E esse bit especial que o remetente usa para

111
00:07:15,200 --> 00:07:18,020
controlar a paridade é chamado de bit de paridade.

112
00:07:18,020 --> 00:07:22,460
E, na verdade, devemos ser claros, se o receptor vê uma paridade ímpar, isso não

113
00:07:22,460 --> 00:07:26,920
significa necessariamente que houve apenas um erro, pode ter havido 3 erros, ou 5,

114
00:07:26,920 --> 00:07:29,560
ou qualquer outro número ímpar, mas eles podem ter certeza que não era 0.

115
00:07:29,560 --> 00:07:34,880
Por outro lado, se houvesse 2 erros, ou qualquer número par de erros, a contagem final

116
00:07:34,880 --> 00:07:39,560
de 1s ainda seria par, de modo que o receptor não pode ter total confiança

117
00:07:39,560 --> 00:07:43,360
de que uma contagem par significa necessariamente que a mensagem está livre de erros. .

118
00:07:43,360 --> 00:07:47,860
Você pode reclamar que uma mensagem que fica confusa com apenas inversões

119
00:07:47,860 --> 00:07:49,760
de 2 bits é muito fraca, e você estaria absolutamente certo.

120
00:07:49,760 --> 00:07:54,480
Tenha em mente, porém, que não existe nenhum método de detecção ou correção de erros que possa lhe

121
00:07:54,480 --> 00:07:59,720
dar 100% de confiança de que a mensagem que você recebe é aquela que o remetente pretendia.

122
00:07:59,720 --> 00:08:03,760
Afinal, ruído aleatório suficiente sempre poderia transformar uma mensagem

123
00:08:03,760 --> 00:08:05,920
válida em outra mensagem válida apenas por puro acaso.

124
00:08:05,920 --> 00:08:10,520
Em vez disso, o objetivo é criar um esquema que seja robusto até um certo

125
00:08:10,520 --> 00:08:16,480
número máximo de erros, ou talvez reduzir a probabilidade de um falso positivo como este.

126
00:08:16,480 --> 00:08:20,940
As verificações de paridade por si só são bastante fracas, mas ao

127
00:08:20,940 --> 00:08:25,640
destilar a ideia de mudança numa mensagem completa até um único bit,

128
00:08:25,640 --> 00:08:28,000
o que nos dão é um poderoso alicerce para esquemas mais sofisticados.

129
00:08:28,000 --> 00:08:32,880
Por exemplo, enquanto Hamming procurava uma maneira de identificar onde ocorreu um erro, não apenas

130
00:08:32,880 --> 00:08:37,160
que ocorreu, seu principal insight foi que, se você aplicar algumas verificações de paridade

131
00:08:37,160 --> 00:08:42,040
não à mensagem completa, mas a certos subconjuntos cuidadosamente selecionados, poderá perguntar uma série

132
00:08:42,040 --> 00:08:46,840
mais refinada de perguntas que determinam a localização de qualquer erro de bit único.

133
00:08:46,840 --> 00:08:51,280
A sensação geral é como jogar um jogo de 20 perguntas, fazendo

134
00:08:51,280 --> 00:08:54,300
perguntas sim ou não que cortam o espaço de possibilidades pela metade.

135
00:08:54,300 --> 00:08:58,840
Por exemplo, digamos que fazemos uma verificação de paridade

136
00:08:58,840 --> 00:08:59,840
apenas nesses 8 bits, todas as posições ímpares.

137
00:09:00,400 --> 00:09:04,560
Então, se um erro for detectado, ele fornece ao receptor um pouco mais de informação

138
00:09:04,560 --> 00:09:09,160
sobre onde especificamente está o erro, ou seja, que ele está em uma posição estranha.

139
00:09:09,160 --> 00:09:14,360
Se nenhum erro for detectado entre esses 8 bits, isso significa que não

140
00:09:14,360 --> 00:09:17,240
há erro algum ou que está em algum lugar nas posições pares.

141
00:09:17,240 --> 00:09:21,560
Você pode pensar que limitar uma verificação de paridade a metade dos

142
00:09:21,560 --> 00:09:25,460
bits a torna menos eficaz, mas quando feita em conjunto com

143
00:09:25,460 --> 00:09:29,720
outras verificações bem escolhidas, contra-intuitivamente nos dá algo muito mais poderoso.

144
00:09:29,720 --> 00:09:34,440
Para realmente configurar essa verificação de paridade, lembre-se de que é necessário

145
00:09:34,440 --> 00:09:37,600
reservar algum bit especial que controle a paridade desse grupo completo.

146
00:09:37,600 --> 00:09:39,920
Aqui vamos apenas escolher a posição 1.

147
00:09:39,920 --> 00:09:43,960
No exemplo mostrado, a paridade desses 8 bits é atualmente ímpar, então o remetente

148
00:09:43,960 --> 00:09:48,220
é responsável por alternar esse bit de paridade, e agora ele é par.

149
00:09:48,220 --> 00:09:51,040
Esta é apenas 1 das 4 verificações de paridade que faremos.

150
00:09:51,040 --> 00:09:55,560
A segunda verificação está entre os 8 bits na

151
00:09:55,560 --> 00:09:56,880
metade direita da grade, pelo menos como desenhamos aqui.

152
00:09:56,880 --> 00:10:02,520
Desta vez, podemos usar a posição 2 como um bit de paridade, de modo que esses 8 bits já

153
00:10:02,520 --> 00:10:07,160
tenham uma paridade par, e o remetente pode se sentir bem em deixar o bit número 2 inalterado.

154
00:10:07,160 --> 00:10:11,040
Então, do outro lado, se o receptor verificar a paridade deste grupo e achar que é

155
00:10:11,040 --> 00:10:15,960
estranho, saberá que o erro está em algum lugar entre esses 8 bits à direita.

156
00:10:15,960 --> 00:10:21,260
Caso contrário, significa que não há erro ou que o erro está em algum lugar na metade esquerda.

157
00:10:21,260 --> 00:10:24,040
Ou acho que poderia ter havido dois erros, mas por enquanto vamos

158
00:10:24,040 --> 00:10:27,080
assumir que há no máximo um erro em todo o bloco.

159
00:10:27,080 --> 00:10:29,160
As coisas quebram completamente por mais do que isso.

160
00:10:29,160 --> 00:10:32,920
Aqui, antes de olharmos para as próximas duas verificações, pare um momento para pensar

161
00:10:32,920 --> 00:10:35,880
sobre o que estas duas primeiras nos permitem fazer quando as consideramos em conjunto.

162
00:10:35,880 --> 00:10:40,240
Digamos que você detecte um erro entre as colunas ímpares e entre a metade direita.

163
00:10:40,240 --> 00:10:43,940
Significa necessariamente que o erro está em algum lugar na última coluna.

164
00:10:43,940 --> 00:10:48,280
Se não houve erro na coluna ímpar, mas houve um

165
00:10:48,280 --> 00:10:50,520
na metade direita, isso indica que está na penúltima coluna.

166
00:10:50,520 --> 00:10:54,640
Da mesma forma, se houver um erro nas colunas ímpares, mas não na

167
00:10:54,640 --> 00:10:56,560
metade direita, você sabe que está em algum lugar da segunda coluna.

168
00:10:56,560 --> 00:11:00,560
E se nenhuma dessas duas verificações de paridade detectar nada, significa que o

169
00:11:00,560 --> 00:11:03,760
único lugar onde um erro pode estar é na coluna mais à esquerda.

170
00:11:03,760 --> 00:11:06,480
Mas também pode significar simplesmente que não há erro algum.

171
00:11:06,480 --> 00:11:10,800
O que é uma forma bastante elaborada de dizer que

172
00:11:10,800 --> 00:11:11,800
duas verificações de paridade nos permitem definir a coluna.

173
00:11:11,800 --> 00:11:14,000
A partir daqui, você provavelmente pode adivinhar o que se segue.

174
00:11:14,000 --> 00:11:16,240
Fazemos basicamente a mesma coisa, mas para as linhas.

175
00:11:16,240 --> 00:11:21,040
Haverá uma verificação de paridade nas linhas ímpares, usando a posição 4 como bit de paridade.

176
00:11:21,040 --> 00:11:25,480
Portanto, neste exemplo, esse grupo já tem uma paridade

177
00:11:25,480 --> 00:11:26,480
par, então o bit 4 seria definido como 0.

178
00:11:26,480 --> 00:11:31,280
E finalmente há uma verificação de paridade nas duas linhas

179
00:11:31,280 --> 00:11:32,280
inferiores, usando a posição 8 como bit de paridade.

180
00:11:32,280 --> 00:11:35,840
Nesse caso, parece que o remetente precisa ativar o

181
00:11:35,840 --> 00:11:37,840
bit 8 para dar paridade uniforme ao grupo.

182
00:11:37,840 --> 00:11:41,360
Assim como as duas primeiras verificações nos permitem definir

183
00:11:41,360 --> 00:11:43,000
a coluna, as próximas duas permitem definir a linha.

184
00:11:43,000 --> 00:11:48,400
Por exemplo, imagine que durante a transmissão ocorre um erro, digamos, na posição 3.

185
00:11:48,400 --> 00:11:52,620
Bem, isso afeta o primeiro grupo de paridade, e também afeta o segundo grupo de paridade,

186
00:11:52,620 --> 00:11:56,340
então o receptor sabe que há um erro em algum lugar na coluna da direita.

187
00:11:56,340 --> 00:12:01,380
Mas isso não afeta o terceiro grupo e não afeta o quarto grupo.

188
00:12:01,380 --> 00:12:05,460
E isso permite que o receptor identifique o erro até a primeira linha,

189
00:12:05,460 --> 00:12:08,660
o que significa necessariamente a posição 3, para que possa corrigir o erro.

190
00:12:08,660 --> 00:12:12,640
Você pode gostar de reservar um momento para se convencer de que as respostas a essas

191
00:12:12,680 --> 00:12:17,320
quatro perguntas sempre permitirão que você identifique um local específico, não importa onde ele esteja.

192
00:12:17,320 --> 00:12:22,640
Na verdade, os astutos entre vocês podem até notar

193
00:12:22,640 --> 00:12:23,640
uma conexão entre essas questões e a contagem binária.

194
00:12:23,640 --> 00:12:27,840
E se você fizer isso, novamente deixe-me enfatizar, faça uma pausa,

195
00:12:27,840 --> 00:12:30,880
tente você mesmo estabelecer a conexão antes que eu estrague tudo.

196
00:12:30,880 --> 00:12:35,560
Se você está se perguntando o que acontece se um

197
00:12:35,560 --> 00:12:36,560
bit de paridade for afetado, bem, você pode simplesmente tentar.

198
00:12:36,560 --> 00:12:40,720
Reserve um momento para pensar em como qualquer erro entre esses quatro bits

199
00:12:40,720 --> 00:12:47,440
especiais será rastreado como qualquer outro, com o mesmo grupo de quatro perguntas.

200
00:12:47,440 --> 00:12:50,500
Isso realmente não importa, já que no final das contas o que queremos é proteger

201
00:12:50,500 --> 00:12:53,640
os bits da mensagem, os bits de correção de erros estão apenas seguindo em frente.

202
00:12:53,640 --> 00:12:57,120
Mas proteger também esses bits é algo

203
00:12:57,120 --> 00:12:59,260
que naturalmente sai do esquema como subproduto.

204
00:12:59,260 --> 00:13:02,380
Você também pode gostar de antecipar como isso será dimensionado.

205
00:13:02,380 --> 00:13:08,040
Se usarmos um bloco de 256 bits, por exemplo, para definir uma localização, você precisará

206
00:13:08,040 --> 00:13:15,680
apenas de oito perguntas de sim ou não para pesquisar binariamente até algum ponto específico.

207
00:13:15,680 --> 00:13:19,680
E lembre-se, cada pergunta exige a renúncia de apenas

208
00:13:19,680 --> 00:13:23,340
um bit para definir a verificação de paridade apropriada.

209
00:13:23,340 --> 00:13:26,960
Alguns de vocês já devem ter percebido isso, mas falaremos mais tarde sobre a

210
00:13:26,960 --> 00:13:29,960
maneira sistemática de descobrir quais são essas questões em apenas um ou dois minutos.

211
00:13:29,960 --> 00:13:33,440
Esperamos que este esboço seja suficiente para avaliar

212
00:13:33,440 --> 00:13:34,440
a eficiência do que estamos desenvolvendo aqui.

213
00:13:34,440 --> 00:13:38,440
A primeira coisa, exceto aqueles oito bits de paridade destacados, pode ser

214
00:13:38,440 --> 00:13:41,720
o que você quiser, transportando qualquer mensagem ou dado que você quiser.

215
00:13:41,720 --> 00:13:45,480
Os 8 bits são redundantes no sentido de que são completamente determinados pelo resto da

216
00:13:45,480 --> 00:13:53,640
mensagem, mas são muito mais inteligentes do que simplesmente copiar a mensagem como um todo.

217
00:13:53,640 --> 00:13:58,000
E ainda assim, por tão pouco desistido, você seria capaz

218
00:13:58,000 --> 00:13:59,000
de identificar e corrigir qualquer erro de bit único.

219
00:13:59,000 --> 00:14:00,400
Bem, quase.

220
00:14:00,400 --> 00:14:05,920
Ok, então o único problema aqui é que se nenhuma das quatro verificações de

221
00:14:05,920 --> 00:14:10,240
paridade detectar um erro, o que significa que todos os subconjuntos especialmente selecionados

222
00:14:10,240 --> 00:14:15,520
de 8 bits têm paridades pares, exatamente como o remetente pretendia, então isso

223
00:14:15,520 --> 00:14:17,760
significa que não houve erro algum , ou nos restringe à posição 0.

224
00:14:17,760 --> 00:14:23,040
Veja, com quatro perguntas de sim ou não, temos 16 resultados possíveis para nossas verificações

225
00:14:23,040 --> 00:14:28,000
de paridade e, a princípio, isso parece perfeito para identificar 1 entre 16 posições

226
00:14:28,000 --> 00:14:33,000
no bloco, mas você também precisa comunicar um 17º resultado, o sem erro doença.

227
00:14:33,000 --> 00:14:37,860
A solução aqui é realmente muito simples, basta esquecer completamente o 0º bit.

228
00:14:37,860 --> 00:14:41,920
Portanto, quando fazemos nossas quatro verificações de paridade e vemos que

229
00:14:41,920 --> 00:14:44,320
estão todas iguais, isso significa inequivocamente que não há erro.

230
00:14:44,320 --> 00:14:49,240
O que isso significa é que em vez de trabalhar com um bloco de 16 bits, trabalhamos com um bloco

231
00:14:49,240 --> 00:14:54,040
de 15 bits, onde 11 dos bits estão livres para transportar uma mensagem e 4 deles estão lá para redundância.

232
00:14:54,080 --> 00:14:58,400
E com isso, agora temos o que as pessoas

233
00:14:58,400 --> 00:14:59,400
do ramo chamariam de código de Hamming 15-11.

234
00:14:59,400 --> 00:15:03,920
Dito isso, é bom ter um tamanho de bloco com potência limpa de 2, e há uma maneira inteligente

235
00:15:03,920 --> 00:15:08,880
de manter esse 0º bit por perto e fazer com que ele faça um trabalho extra para nós.

236
00:15:08,880 --> 00:15:13,600
Se o usarmos como um bit de paridade em todo o bloco, ele

237
00:15:13,600 --> 00:15:16,320
nos permitirá detectar, mesmo que não possamos corrigir, erros de 2 bits.

238
00:15:16,320 --> 00:15:17,440
Veja como funciona.

239
00:15:17,440 --> 00:15:21,740
Depois de definir esses quatro bits especiais de correção de erros, definimos aquele 0 para

240
00:15:21,740 --> 00:15:25,540
que a paridade do bloco completo seja par, como uma verificação de paridade normal.

241
00:15:25,540 --> 00:15:29,780
Agora, se houver um erro de bit único, a paridade do bloco completo será ímpar,

242
00:15:29,780 --> 00:15:33,940
mas detectaríamos isso de qualquer maneira, graças às quatro verificações de correção de erros.

243
00:15:33,940 --> 00:15:38,100
No entanto, se houver dois erros, a paridade geral voltará a ser

244
00:15:38,100 --> 00:15:42,660
uniforme, mas o receptor ainda verá que houve pelo menos algum erro

245
00:15:42,660 --> 00:15:45,820
por causa do que está acontecendo com essas quatro verificações de paridade.

246
00:15:45,820 --> 00:15:49,780
Portanto, se eles notarem uma paridade geral uniforme, mas algo diferente de zero

247
00:15:49,820 --> 00:15:52,980
acontecendo com as outras verificações, isso indica que houve pelo menos dois erros.

248
00:15:52,980 --> 00:15:54,420
Isso não é inteligente?

249
00:15:54,420 --> 00:15:58,500
Mesmo que não possamos corrigir esses erros de 2 bits, apenas colocando

250
00:15:58,500 --> 00:16:02,340
aquele bit 0 incômodo de volta ao trabalho, isso nos permite detectá-los.

251
00:16:02,340 --> 00:16:06,540
Isso é bastante padrão, é conhecido como código de Hamming estendido.

252
00:16:06,540 --> 00:16:10,860
Tecnicamente falando, agora você tem uma descrição completa do que um código de

253
00:16:10,860 --> 00:16:13,580
Hamming faz, pelo menos no exemplo de um bloco de 16 bits.

254
00:16:13,580 --> 00:16:17,300
Mas acho que você achará mais satisfatório verificar seu entendimento e solidificar tudo

255
00:16:17,300 --> 00:16:21,980
até agora fazendo você mesmo um exemplo completo do início ao fim.

256
00:16:21,980 --> 00:16:25,100
Vou explicar isso com você para que você possa verificar por si mesmo.

257
00:16:25,100 --> 00:16:29,180
Para configurar uma mensagem, seja uma mensagem literal que você está traduzindo

258
00:16:29,180 --> 00:16:34,100
no espaço ou alguns dados que deseja armazenar ao longo do

259
00:16:34,100 --> 00:16:35,700
tempo, a primeira etapa é dividi-la em pedaços de 11 bits.

260
00:16:35,700 --> 00:16:40,340
Cada pedaço será empacotado em um bloco de 16 bits resistente a erros.

261
00:16:40,340 --> 00:16:43,740
Então, vamos tomar este como exemplo e realmente resolver isso.

262
00:16:43,740 --> 00:16:45,340
Vá em frente, realmente faça isso!

263
00:16:45,380 --> 00:16:47,380
Vamos fazer uma pausa e tentar montar este bloco.

264
00:16:52,980 --> 00:16:53,980
Ok, você está pronto?

265
00:16:53,980 --> 00:16:58,500
Lembre-se, a posição 0 junto com as outras potências de 2 são reservadas para correção de

266
00:16:58,500 --> 00:17:05,700
erros, então você começa colocando os bits da mensagem em todos os pontos restantes, em ordem.

267
00:17:05,700 --> 00:17:09,700
Você precisa que este grupo tenha uma paridade par, o que já acontece, então

268
00:17:09,700 --> 00:17:13,140
você deveria ter definido o bit de paridade na posição 1 como 0.

269
00:17:13,140 --> 00:17:17,700
O próximo grupo começa com uma paridade ímpar, então você

270
00:17:17,700 --> 00:17:19,260
deveria ter definido seu bit de paridade como 1.

271
00:17:19,260 --> 00:17:23,740
O grupo depois disso começa com uma paridade ímpar, então novamente

272
00:17:23,740 --> 00:17:24,740
você deveria ter definido seu bit de paridade como 1.

273
00:17:24,740 --> 00:17:29,500
E o grupo final também tem uma paridade ímpar, o que

274
00:17:29,500 --> 00:17:31,500
significa que definimos esse bit na posição 8 como 1.

275
00:17:31,500 --> 00:17:36,460
E então, como etapa final, o bloco completo agora tem uma paridade par, o que significa

276
00:17:36,460 --> 00:17:41,500
que você pode definir o número do bit 0, o bit de paridade abrangente, como 0.

277
00:17:41,500 --> 00:17:45,660
Assim, à medida que este bloco é enviado, a paridade dos quatro

278
00:17:45,660 --> 00:17:48,980
subconjuntos especiais e do bloco como um todo será par, ou 0.

279
00:17:48,980 --> 00:17:53,620
Na segunda parte do exercício, vamos fazer com que você desempenhe o papel de receptor.

280
00:17:53,620 --> 00:17:57,580
Claro, isso significaria que você ainda não sabe o que é esta mensagem,

281
00:17:57,580 --> 00:18:00,180
talvez alguns de vocês a tenham memorizado, mas vamos supor que não.

282
00:18:00,180 --> 00:18:05,820
O que vou fazer é alterar 0, 1 ou 2 dos bits

283
00:18:05,820 --> 00:18:08,340
desse bloco e depois pedir que você descubra o que eu fiz.

284
00:18:08,340 --> 00:18:13,460
Então, novamente, faça uma pausa e tente resolver isso.

285
00:18:13,460 --> 00:18:23,960
Ok, então você, como receptor, agora verifica o primeiro grupo de paridade e pode ver

286
00:18:23,960 --> 00:18:29,820
que é par, então qualquer erro que exista teria que estar em uma coluna par.

287
00:18:29,820 --> 00:18:34,620
A próxima verificação nos dá um número ímpar, informando que há

288
00:18:34,620 --> 00:18:38,760
pelo menos um erro e nos restringindo a esta coluna específica.

289
00:18:38,760 --> 00:18:42,900
A terceira verificação é par, reduzindo ainda mais as possibilidades.

290
00:18:42,900 --> 00:18:46,780
E a última verificação de paridade é estranha, nos dizendo que há um erro em algum

291
00:18:46,780 --> 00:18:51,700
lugar na parte inferior, que agora podemos ver que deve estar na posição número 10.

292
00:18:51,700 --> 00:18:56,140
Além do mais, a paridade de todo o bloco é estranha,

293
00:18:56,140 --> 00:18:58,220
dando-nos a confiança de que houve uma virada e não duas.

294
00:18:58,220 --> 00:19:01,600
Se forem três ou mais, todas as apostas serão canceladas.

295
00:19:01,600 --> 00:19:06,520
Depois de corrigir o bit número 10, retirar os 11 bits que não

296
00:19:06,520 --> 00:19:11,620
foram usados para correção nos dá o segmento relevante da mensagem original, que

297
00:19:11,620 --> 00:19:16,160
se você retroceder e comparar é exatamente com o que iniciamos o exemplo.

298
00:19:16,160 --> 00:19:19,260
E agora que você sabe como fazer tudo isso manualmente, gostaria de mostrar como você pode

299
00:19:19,260 --> 00:19:23,940
realizar a parte central de toda essa lógica com uma única linha de código Python.

300
00:19:23,940 --> 00:19:28,400
Veja, o que eu ainda não lhe contei é o quão elegante esse

301
00:19:28,400 --> 00:19:32,380
algoritmo realmente é, como é simples fazer uma máquina apontar para a posição

302
00:19:32,380 --> 00:19:37,680
de um erro, como escalá-lo sistematicamente e como podemos enquadrar tudo isso. isso

303
00:19:37,680 --> 00:19:39,580
como uma única operação em vez de várias verificações de paridade separadas.

304
00:19:39,580 --> 00:19:41,680
Para entender o que quero dizer, junte-se a mim na parte 2.

