1
00:00:00,000 --> 00:00:05,300
Você já se perguntou como é possível riscar um CD ou

2
00:00:05,300 --> 00:00:10,900
DVD e ainda assim reproduzir tudo o que está armazenado?

3
00:00:10,900 --> 00:00:13,806
O arranhão realmente afeta os 1s e 0s no disco,

4
00:00:13,806 --> 00:00:17,560
então ele lê dados diferentes daqueles que foram armazenados,

5
00:00:17,560 --> 00:00:22,041
mas a menos que esteja realmente riscado, os bits lidos são decodificados

6
00:00:22,041 --> 00:00:26,704
precisamente no mesmo arquivo que foi codificado nele, um cópia bit por bit,

7
00:00:26,704 --> 00:00:28,400
apesar de todos esses erros.

8
00:00:28,400 --> 00:00:32,931
Há toda uma pilha de inteligência matemática que nos permite armazenar dados e,

9
00:00:32,931 --> 00:00:36,840
igualmente importante, transmiti-los de uma forma resistente a erros.

10
00:00:36,840 --> 00:00:40,020
Bem, ok, na verdade não é preciso muita inteligência

11
00:00:40,020 --> 00:00:42,480
para descobrir uma maneira de fazer isso.

12
00:00:42,480 --> 00:00:47,031
Qualquer arquivo, seja um vídeo, som ou texto, algum código, uma imagem,

13
00:00:47,031 --> 00:00:50,960
seja o que for, é, em última análise, uma sequência de 1s e 0s.

14
00:00:50,960 --> 00:00:54,436
E uma estratégia simples para corrigir qualquer bit

15
00:00:54,436 --> 00:00:57,780
invertido seria armazenar três cópias de cada bit.

16
00:00:57,780 --> 00:01:02,786
Então a máquina que lê este arquivo poderia comparar essas três cópias

17
00:01:02,786 --> 00:01:07,440
e sempre tirar a melhor 2 de 3 sempre que houver uma discrepância.

18
00:01:07,440 --> 00:01:11,560
Mas o que isso significa é usar dois terços do seu espaço para redundância.

19
00:01:11,560 --> 00:01:13,989
E mesmo assim, apesar de todo esse espaço cedido,

20
00:01:13,989 --> 00:01:18,120
não há nenhuma garantia forte sobre o que acontecerá se mais de um bit for invertido.

21
00:01:18,120 --> 00:01:22,619
A questão muito mais interessante é como fazer com que os erros possam ser corrigidos,

22
00:01:22,619 --> 00:01:24,740
abrindo mão do mínimo de espaço possível.

23
00:01:24,740 --> 00:01:28,134
Por exemplo, usando o método que você aprenderá neste vídeo,

24
00:01:28,134 --> 00:01:32,975
você poderia armazenar seus dados em blocos de 256 bits, onde cada bloco usa 9 bits, 9!

25
00:01:32,975 --> 00:01:37,041
para atuar como uma espécie de redundância, e os outros 247 bits são livres

26
00:01:37,041 --> 00:01:41,000
para transportar qualquer mensagem ou dado significativo que você desejar.

27
00:01:41,000 --> 00:01:44,460
E ainda vai acontecer que se algum bit for invertido aqui,

28
00:01:44,460 --> 00:01:48,800
só de olhar esse bloco e nada mais, uma máquina vai conseguir identificar

29
00:01:48,800 --> 00:01:53,140
que houve um erro e exatamente onde ele estava para saber como corrigi-lo.

30
00:01:53,140 --> 00:01:55,540
E honestamente, isso parece mágico.

31
00:01:55,540 --> 00:01:58,492
E para este esquema específico, se dois bits forem invertidos,

32
00:01:58,492 --> 00:02:01,586
a máquina será pelo menos capaz de detectar que houve dois erros,

33
00:02:01,586 --> 00:02:03,180
embora não saiba como corrigi-los.

34
00:02:03,180 --> 00:02:05,634
Falaremos um pouco mais tarde sobre como isso é

35
00:02:05,634 --> 00:02:08,140
dimensionado para blocos com tamanhos diferentes.

36
00:02:08,140 --> 00:02:11,346
Métodos que permitem corrigir erros como esse são conhecidos,

37
00:02:11,346 --> 00:02:13,880
razoavelmente, como códigos de correção de erros.

38
00:02:13,880 --> 00:02:16,839
Durante a maior parte do século passado, este campo tem sido

39
00:02:16,839 --> 00:02:19,652
uma fonte realmente rica de matemática surpreendentemente

40
00:02:19,652 --> 00:02:23,000
profunda que é incorporada aos dispositivos que usamos todos os dias.

41
00:02:23,000 --> 00:02:27,748
O objetivo aqui é fornecer uma compreensão completa de um dos primeiros exemplos,

42
00:02:27,748 --> 00:02:29,660
conhecido como código de Hamming.

43
00:02:29,660 --> 00:02:33,180
E, a propósito, a maneira como estou pensando na estrutura deste vídeo tem menos

44
00:02:33,180 --> 00:02:36,526
a ver com explicá-lo da forma mais direta possível e mais com uma questão de

45
00:02:36,526 --> 00:02:40,220
incentivá-lo a inventá-lo por si mesmo, com um pouco de orientação gentil aqui e ali.

46
00:02:40,220 --> 00:02:43,366
Então, quando você sentir que está vendo onde as coisas estão indo em algum momento,

47
00:02:43,366 --> 00:02:45,588
reserve um momento para fazer uma pausa, preveja ativamente

48
00:02:45,588 --> 00:02:47,180
qual será o esquema antes que eu lhe conte.

49
00:02:47,180 --> 00:02:51,329
Além disso, se você quiser que sua compreensão chegue ao nível do hardware,

50
00:02:51,329 --> 00:02:55,097
Ben Eater fez um vídeo em conjunto com este mostrando como realmente

51
00:02:55,097 --> 00:02:59,520
implementar códigos de Hamming em protoboards, o que é extremamente satisfatório.

52
00:02:59,520 --> 00:03:03,041
Você deve saber que os códigos de Hamming não são tão amplamente usados

53
00:03:03,041 --> 00:03:06,170
quanto os códigos mais modernos, como o algoritmo Reed-Solomon,

54
00:03:06,170 --> 00:03:09,691
mas há uma certa magia no contraste entre o quão impossível essa tarefa

55
00:03:09,691 --> 00:03:12,919
parece no início e o quão totalmente razoável ela parece uma vez.

56
00:03:12,919 --> 00:03:14,240
você aprende sobre Hamming.

57
00:03:14,240 --> 00:03:16,725
O princípio básico da correção de erros é que,

58
00:03:16,725 --> 00:03:19,475
em um vasto espaço de todas as mensagens possíveis,

59
00:03:19,475 --> 00:03:22,860
apenas alguns subconjuntos serão considerados mensagens válidas.

60
00:03:22,860 --> 00:03:26,472
Como analogia, pense em palavras escritas corretamente

61
00:03:26,472 --> 00:03:29,100
versus palavras escritas incorretamente.

62
00:03:29,100 --> 00:03:33,793
Sempre que uma mensagem válida é alterada, o receptor é responsável por corrigir o que

63
00:03:33,793 --> 00:03:38,380
vê de volta ao vizinho válido mais próximo, como você faria com um erro de digitação.

64
00:03:38,380 --> 00:03:42,993
Porém, criar um algoritmo concreto para categorizar mensagens

65
00:03:42,993 --> 00:03:47,160
como essa de maneira eficiente exige certa inteligência.

66
00:03:47,160 --> 00:03:50,744
A história começa na década de 1940, quando um jovem Richard Hamming trabalhava

67
00:03:50,744 --> 00:03:54,194
para o Bell Labs, e parte de seu trabalho envolvia o uso de um computador de

68
00:03:54,194 --> 00:03:57,420
cartão perfurado muito grande e caro, ao qual ele tinha acesso limitado.

69
00:03:57,420 --> 00:04:00,253
E os programas que ele colocava continuavam falhando,

70
00:04:00,253 --> 00:04:03,140
porque de vez em quando um trecho era mal interpretado.

71
00:04:03,140 --> 00:04:06,234
Sendo a frustração o cadinho da invenção, ele ficou tão farto

72
00:04:06,234 --> 00:04:09,280
que inventou o primeiro código de correção de erros do mundo.

73
00:04:09,280 --> 00:04:12,419
Há muitas maneiras diferentes de enquadrar os códigos de Hamming, mas,

74
00:04:12,419 --> 00:04:16,133
numa primeira passagem, vamos analisá-los da maneira como o próprio Hamming pensava

75
00:04:16,133 --> 00:04:16,620
sobre eles.

76
00:04:16,620 --> 00:04:21,400
Vamos usar um exemplo simples, mas não muito simples, um bloco de 16 bits.

77
00:04:21,400 --> 00:04:25,700
Numeraremos as posições desses bits de 0 a 15.

78
00:04:25,700 --> 00:04:29,922
Os dados reais que queremos armazenar representarão apenas 12 desses bits,

79
00:04:29,922 --> 00:04:33,920
enquanto 4 das posições são reservadas como uma espécie de redundância.

80
00:04:33,920 --> 00:04:36,950
A palavra redundante aqui não significa simplesmente copiar, afinal,

81
00:04:36,950 --> 00:04:40,200
esses 4 bits não nos dão espaço suficiente para copiar cegamente os dados.

82
00:04:40,200 --> 00:04:45,010
Em vez disso, eles precisarão ser um tipo de redundância muito mais sutil e inteligente,

83
00:04:45,010 --> 00:04:48,740
não adicionando nenhuma informação nova, mas adicionando resiliência.

84
00:04:48,740 --> 00:04:52,617
Você pode esperar que esses 4 bits especiais venham bem embalados juntos,

85
00:04:52,617 --> 00:04:55,446
talvez no final ou algo parecido, mas como você verá,

86
00:04:55,446 --> 00:04:59,376
colocá-los em posições que são potências de 2 permite algo que é realmente

87
00:04:59,376 --> 00:05:00,320
elegante no final.

88
00:05:00,320 --> 00:05:05,420
Também pode lhe dar uma pequena dica sobre como isso é dimensionado para blocos maiores.

89
00:05:05,420 --> 00:05:08,573
Além disso, tecnicamente, acaba sendo apenas 11 bits de dados.

90
00:05:08,573 --> 00:05:12,177
Você descobrirá que há uma pequena nuance no que acontece na posição 0,

91
00:05:12,177 --> 00:05:14,280
mas não se preocupe com isso por enquanto.

92
00:05:14,280 --> 00:05:18,469
Como qualquer algoritmo de correção de erros, isso envolverá dois jogadores,

93
00:05:18,469 --> 00:05:22,496
um remetente responsável por definir esses 4 bits especiais e um receptor

94
00:05:22,496 --> 00:05:26,360
responsável por realizar algum tipo de verificação e corrigir os erros.

95
00:05:26,360 --> 00:05:29,358
É claro que as palavras remetente e destinatário realmente se referem a

96
00:05:29,358 --> 00:05:31,607
máquinas ou software que fazem todas as verificações,

97
00:05:31,607 --> 00:05:33,855
e a ideia de mensagem tem um significado muito amplo,

98
00:05:33,855 --> 00:05:35,480
para incluir coisas como armazenamento.

99
00:05:35,480 --> 00:05:39,004
Afinal, armazenar dados é a mesma coisa que enviar uma mensagem

100
00:05:39,004 --> 00:05:42,640
apenas do passado para o futuro, em vez de de um lugar para outro.

101
00:05:42,640 --> 00:05:46,329
Então essa é a configuração, mas antes de começarmos precisamos falar sobre

102
00:05:46,329 --> 00:05:50,698
uma ideia relacionada que estava fresca na mente de Hamming no momento de sua descoberta,

103
00:05:50,698 --> 00:05:54,678
um método que permite detectar quaisquer erros de bit único, mas não corrigi-los,

104
00:05:54,678 --> 00:05:57,300
conhecido no negócio como uma verificação de paridade.

105
00:05:57,300 --> 00:06:01,046
Para uma verificação de paridade, separamos apenas um bit que o remetente é

106
00:06:01,046 --> 00:06:04,940
responsável pelo ajuste, e o restante fica livre para transportar uma mensagem.

107
00:06:04,940 --> 00:06:08,413
A única função deste bit especial é garantir que

108
00:06:08,413 --> 00:06:12,100
o número total de 1s na mensagem seja um número par.

109
00:06:12,100 --> 00:06:16,000
Então, por exemplo, agora, esse número total de 1s é 7, isso é ímpar,

110
00:06:16,000 --> 00:06:20,960
então o remetente precisa inverter esse bit especial para ser 1, tornando a contagem par.

111
00:06:20,960 --> 00:06:24,582
Mas se o bloco já tivesse começado com um número par de 1s,

112
00:06:24,582 --> 00:06:27,480
então esse bit especial teria sido mantido em 0.

113
00:06:27,480 --> 00:06:30,818
Isso é muito simples, aparentemente simples, mas é uma maneira

114
00:06:30,818 --> 00:06:34,315
incrivelmente elegante de destilar a ideia de mudança em qualquer

115
00:06:34,315 --> 00:06:37,760
lugar de uma mensagem para ser refletida em uma única informação.

116
00:06:37,760 --> 00:06:41,940
Observe que se qualquer bit desta mensagem for invertido,

117
00:06:41,940 --> 00:06:48,140
seja de 0 para 1 ou de 1 para 0, isso altera a contagem total de 1s de par para ímpar.

118
00:06:48,140 --> 00:06:53,267
Portanto, se você é o receptor, olha para esta mensagem e vê um número ímpar de 1s,

119
00:06:53,267 --> 00:06:58,700
pode ter certeza de que ocorreu algum erro, mesmo que não tenha ideia de onde ele estava.

120
00:06:58,700 --> 00:07:04,940
No jargão, se um grupo de bits tem um número par ou ímpar de 1s é conhecido como paridade.

121
00:07:04,940 --> 00:07:07,831
Você também pode usar números e dizer que a paridade é 0 ou 1,

122
00:07:07,831 --> 00:07:11,320
o que normalmente é mais útil quando você começa a fazer contas com a ideia.

123
00:07:11,320 --> 00:07:15,198
E esse bit especial que o remetente usa para controlar

124
00:07:15,198 --> 00:07:18,020
a paridade é chamado de bit de paridade.

125
00:07:18,020 --> 00:07:21,525
E, na verdade, devemos ser claros, se o receptor vê uma paridade ímpar,

126
00:07:21,525 --> 00:07:25,713
isso não significa necessariamente que houve apenas um erro, pode ter havido 3 erros,

127
00:07:25,713 --> 00:07:29,560
ou 5, ou qualquer outro número ímpar, mas eles podem ter certeza que não era 0.

128
00:07:29,560 --> 00:07:33,470
Por outro lado, se houvesse 2 erros, ou qualquer número par de erros,

129
00:07:33,470 --> 00:07:38,052
a contagem final de 1s ainda seria par, de modo que o receptor não pode ter total

130
00:07:38,052 --> 00:07:42,521
confiança de que uma contagem par significa necessariamente que a mensagem está

131
00:07:42,521 --> 00:07:43,360
livre de erros.

132
00:07:43,360 --> 00:07:46,416
Você pode reclamar que uma mensagem que fica confusa com apenas

133
00:07:46,416 --> 00:07:49,760
inversões de 2 bits é muito fraca, e você estaria absolutamente certo.

134
00:07:49,760 --> 00:07:53,114
Tenha em mente, porém, que não existe nenhum método de detecção

135
00:07:53,114 --> 00:07:56,469
ou correção de erros que possa lhe dar 100% de confiança de que

136
00:07:56,469 --> 00:07:59,720
a mensagem que você recebe é aquela que o remetente pretendia.

137
00:07:59,720 --> 00:08:02,699
Afinal, ruído aleatório suficiente sempre poderia transformar

138
00:08:02,699 --> 00:08:05,920
uma mensagem válida em outra mensagem válida apenas por puro acaso.

139
00:08:05,920 --> 00:08:11,167
Em vez disso, o objetivo é criar um esquema que seja robusto até um certo número

140
00:08:11,167 --> 00:08:16,480
máximo de erros, ou talvez reduzir a probabilidade de um falso positivo como este.

141
00:08:16,480 --> 00:08:19,811
As verificações de paridade por si só são bastante fracas,

142
00:08:19,811 --> 00:08:24,103
mas ao destilar a ideia de mudança numa mensagem completa até um único bit,

143
00:08:24,103 --> 00:08:28,000
o que nos dão é um poderoso alicerce para esquemas mais sofisticados.

144
00:08:28,000 --> 00:08:32,343
Por exemplo, enquanto Hamming procurava uma maneira de identificar onde ocorreu um erro,

145
00:08:32,343 --> 00:08:35,028
não apenas que ocorreu, seu principal insight foi que,

146
00:08:35,028 --> 00:08:38,640
se você aplicar algumas verificações de paridade não à mensagem completa,

147
00:08:38,640 --> 00:08:41,324
mas a certos subconjuntos cuidadosamente selecionados,

148
00:08:41,324 --> 00:08:44,790
poderá perguntar uma série mais refinada de perguntas que determinam a

149
00:08:44,790 --> 00:08:46,840
localização de qualquer erro de bit único.

150
00:08:46,840 --> 00:08:49,901
A sensação geral é como jogar um jogo de 20 perguntas,

151
00:08:49,901 --> 00:08:54,300
fazendo perguntas sim ou não que cortam o espaço de possibilidades pela metade.

152
00:08:54,300 --> 00:08:58,944
Por exemplo, digamos que fazemos uma verificação de paridade apenas nesses 8 bits,

153
00:08:58,944 --> 00:09:00,400
todas as posições ímpares.

154
00:09:00,400 --> 00:09:04,754
Então, se um erro for detectado, ele fornece ao receptor um pouco mais de informação

155
00:09:04,754 --> 00:09:09,160
sobre onde especificamente está o erro, ou seja, que ele está em uma posição estranha.

156
00:09:09,160 --> 00:09:12,159
Se nenhum erro for detectado entre esses 8 bits,

157
00:09:12,159 --> 00:09:17,240
isso significa que não há erro algum ou que está em algum lugar nas posições pares.

158
00:09:17,240 --> 00:09:21,494
Você pode pensar que limitar uma verificação de paridade a metade dos bits

159
00:09:21,494 --> 00:09:25,749
a torna menos eficaz, mas quando feita em conjunto com outras verificações

160
00:09:25,749 --> 00:09:29,720
bem escolhidas, contra-intuitivamente nos dá algo muito mais poderoso.

161
00:09:29,720 --> 00:09:32,495
Para realmente configurar essa verificação de paridade,

162
00:09:32,495 --> 00:09:36,559
lembre-se de que é necessário reservar algum bit especial que controle a paridade

163
00:09:36,559 --> 00:09:37,600
desse grupo completo.

164
00:09:37,600 --> 00:09:39,920
Aqui vamos apenas escolher a posição 1.

165
00:09:39,920 --> 00:09:43,547
No exemplo mostrado, a paridade desses 8 bits é atualmente ímpar,

166
00:09:43,547 --> 00:09:48,220
então o remetente é responsável por alternar esse bit de paridade, e agora ele é par.

167
00:09:48,220 --> 00:09:51,040
Esta é apenas 1 das 4 verificações de paridade que faremos.

168
00:09:51,040 --> 00:09:55,065
A segunda verificação está entre os 8 bits na metade direita da grade,

169
00:09:55,065 --> 00:09:56,880
pelo menos como desenhamos aqui.

170
00:09:56,880 --> 00:10:00,306
Desta vez, podemos usar a posição 2 como um bit de paridade,

171
00:10:00,306 --> 00:10:03,283
de modo que esses 8 bits já tenham uma paridade par,

172
00:10:03,283 --> 00:10:07,160
e o remetente pode se sentir bem em deixar o bit número 2 inalterado.

173
00:10:07,160 --> 00:10:11,615
Então, do outro lado, se o receptor verificar a paridade deste grupo e achar que

174
00:10:11,615 --> 00:10:15,960
é estranho, saberá que o erro está em algum lugar entre esses 8 bits à direita.

175
00:10:15,960 --> 00:10:18,693
Caso contrário, significa que não há erro ou que

176
00:10:18,693 --> 00:10:21,260
o erro está em algum lugar na metade esquerda.

177
00:10:21,260 --> 00:10:24,296
Ou acho que poderia ter havido dois erros, mas por enquanto

178
00:10:24,296 --> 00:10:27,080
vamos assumir que há no máximo um erro em todo o bloco.

179
00:10:27,080 --> 00:10:29,160
As coisas quebram completamente por mais do que isso.

180
00:10:29,160 --> 00:10:31,464
Aqui, antes de olharmos para as próximas duas verificações,

181
00:10:31,464 --> 00:10:34,804
pare um momento para pensar sobre o que estas duas primeiras nos permitem fazer quando

182
00:10:34,804 --> 00:10:35,880
as consideramos em conjunto.

183
00:10:35,880 --> 00:10:40,240
Digamos que você detecte um erro entre as colunas ímpares e entre a metade direita.

184
00:10:40,240 --> 00:10:43,940
Significa necessariamente que o erro está em algum lugar na última coluna.

185
00:10:43,940 --> 00:10:48,022
Se não houve erro na coluna ímpar, mas houve um na metade direita,

186
00:10:48,022 --> 00:10:50,520
isso indica que está na penúltima coluna.

187
00:10:50,520 --> 00:10:52,999
Da mesma forma, se houver um erro nas colunas ímpares,

188
00:10:52,999 --> 00:10:56,560
mas não na metade direita, você sabe que está em algum lugar da segunda coluna.

189
00:10:56,560 --> 00:10:59,787
E se nenhuma dessas duas verificações de paridade detectar nada,

190
00:10:59,787 --> 00:11:03,760
significa que o único lugar onde um erro pode estar é na coluna mais à esquerda.

191
00:11:03,760 --> 00:11:06,480
Mas também pode significar simplesmente que não há erro algum.

192
00:11:06,480 --> 00:11:09,140
O que é uma forma bastante elaborada de dizer que duas

193
00:11:09,140 --> 00:11:11,800
verificações de paridade nos permitem definir a coluna.

194
00:11:11,800 --> 00:11:14,000
A partir daqui, você provavelmente pode adivinhar o que se segue.

195
00:11:14,000 --> 00:11:16,240
Fazemos basicamente a mesma coisa, mas para as linhas.

196
00:11:16,240 --> 00:11:19,018
Haverá uma verificação de paridade nas linhas ímpares,

197
00:11:19,018 --> 00:11:21,040
usando a posição 4 como bit de paridade.

198
00:11:21,040 --> 00:11:24,461
Portanto, neste exemplo, esse grupo já tem uma paridade par,

199
00:11:24,461 --> 00:11:26,480
então o bit 4 seria definido como 0.

200
00:11:26,480 --> 00:11:30,208
E finalmente há uma verificação de paridade nas duas linhas inferiores,

201
00:11:30,208 --> 00:11:32,280
usando a posição 8 como bit de paridade.

202
00:11:32,280 --> 00:11:35,237
Nesse caso, parece que o remetente precisa ativar

203
00:11:35,237 --> 00:11:37,840
o bit 8 para dar paridade uniforme ao grupo.

204
00:11:37,840 --> 00:11:41,115
Assim como as duas primeiras verificações nos permitem definir a coluna,

205
00:11:41,115 --> 00:11:43,000
as próximas duas permitem definir a linha.

206
00:11:43,000 --> 00:11:48,400
Por exemplo, imagine que durante a transmissão ocorre um erro, digamos, na posição 3.

207
00:11:48,400 --> 00:11:52,784
Bem, isso afeta o primeiro grupo de paridade, e também afeta o segundo grupo de paridade,

208
00:11:52,784 --> 00:11:56,340
então o receptor sabe que há um erro em algum lugar na coluna da direita.

209
00:11:56,340 --> 00:12:01,380
Mas isso não afeta o terceiro grupo e não afeta o quarto grupo.

210
00:12:01,380 --> 00:12:04,896
E isso permite que o receptor identifique o erro até a primeira linha,

211
00:12:04,896 --> 00:12:08,660
o que significa necessariamente a posição 3, para que possa corrigir o erro.

212
00:12:08,660 --> 00:12:11,425
Você pode gostar de reservar um momento para se convencer de

213
00:12:11,425 --> 00:12:14,327
que as respostas a essas quatro perguntas sempre permitirão que

214
00:12:14,327 --> 00:12:17,320
você identifique um local específico, não importa onde ele esteja.

215
00:12:17,320 --> 00:12:20,389
Na verdade, os astutos entre vocês podem até notar

216
00:12:20,389 --> 00:12:23,640
uma conexão entre essas questões e a contagem binária.

217
00:12:23,640 --> 00:12:27,314
E se você fizer isso, novamente deixe-me enfatizar, faça uma pausa,

218
00:12:27,314 --> 00:12:30,880
tente você mesmo estabelecer a conexão antes que eu estrague tudo.

219
00:12:30,880 --> 00:12:34,800
Se você está se perguntando o que acontece se um bit de paridade for afetado,

220
00:12:34,800 --> 00:12:36,560
bem, você pode simplesmente tentar.

221
00:12:36,560 --> 00:12:41,763
Reserve um momento para pensar em como qualquer erro entre esses quatro bits

222
00:12:41,763 --> 00:12:47,440
especiais será rastreado como qualquer outro, com o mesmo grupo de quatro perguntas.

223
00:12:47,440 --> 00:12:50,520
Isso realmente não importa, já que no final das contas o que queremos é proteger

224
00:12:50,520 --> 00:12:53,640
os bits da mensagem, os bits de correção de erros estão apenas seguindo em frente.

225
00:12:53,640 --> 00:12:59,260
Mas proteger também esses bits é algo que naturalmente sai do esquema como subproduto.

226
00:12:59,260 --> 00:13:02,380
Você também pode gostar de antecipar como isso será dimensionado.

227
00:13:02,380 --> 00:13:07,843
Se usarmos um bloco de 256 bits, por exemplo, para definir uma localização,

228
00:13:07,843 --> 00:13:12,085
você precisará apenas de oito perguntas de sim ou não para

229
00:13:12,085 --> 00:13:15,680
pesquisar binariamente até algum ponto específico.

230
00:13:15,680 --> 00:13:19,406
E lembre-se, cada pergunta exige a renúncia de apenas

231
00:13:19,406 --> 00:13:23,340
um bit para definir a verificação de paridade apropriada.

232
00:13:23,340 --> 00:13:26,469
Alguns de vocês já devem ter percebido isso, mas falaremos mais tarde sobre a

233
00:13:26,469 --> 00:13:29,960
maneira sistemática de descobrir quais são essas questões em apenas um ou dois minutos.

234
00:13:29,960 --> 00:13:32,024
Esperamos que este esboço seja suficiente para

235
00:13:32,024 --> 00:13:34,440
avaliar a eficiência do que estamos desenvolvendo aqui.

236
00:13:34,440 --> 00:13:37,670
A primeira coisa, exceto aqueles oito bits de paridade destacados,

237
00:13:37,670 --> 00:13:41,720
pode ser o que você quiser, transportando qualquer mensagem ou dado que você quiser.

238
00:13:41,720 --> 00:13:45,780
Os 8 bits são redundantes no sentido de que são completamente

239
00:13:45,780 --> 00:13:49,448
determinados pelo resto da mensagem, mas são muito mais

240
00:13:49,448 --> 00:13:53,640
inteligentes do que simplesmente copiar a mensagem como um todo.

241
00:13:53,640 --> 00:13:56,417
E ainda assim, por tão pouco desistido, você seria capaz

242
00:13:56,417 --> 00:13:59,000
de identificar e corrigir qualquer erro de bit único.

243
00:13:59,000 --> 00:14:00,400
Bem, quase.

244
00:14:00,400 --> 00:14:04,535
Ok, então o único problema aqui é que se nenhuma das quatro verificações de

245
00:14:04,535 --> 00:14:09,052
paridade detectar um erro, o que significa que todos os subconjuntos especialmente

246
00:14:09,052 --> 00:14:13,569
selecionados de 8 bits têm paridades pares, exatamente como o remetente pretendia,

247
00:14:13,569 --> 00:14:17,760
então isso significa que não houve erro algum , ou nos restringe à posição 0.

248
00:14:17,760 --> 00:14:22,627
Veja, com quatro perguntas de sim ou não, temos 16 resultados possíveis para nossas

249
00:14:22,627 --> 00:14:27,668
verificações de paridade e, a princípio, isso parece perfeito para identificar 1 entre

250
00:14:27,668 --> 00:14:31,956
16 posições no bloco, mas você também precisa comunicar um 17º resultado,

251
00:14:31,956 --> 00:14:33,000
o sem erro doença.

252
00:14:33,000 --> 00:14:37,860
A solução aqui é realmente muito simples, basta esquecer completamente o 0º bit.

253
00:14:37,860 --> 00:14:41,112
Portanto, quando fazemos nossas quatro verificações de paridade e vemos

254
00:14:41,112 --> 00:14:44,320
que estão todas iguais, isso significa inequivocamente que não há erro.

255
00:14:44,320 --> 00:14:47,747
O que isso significa é que em vez de trabalhar com um bloco de 16 bits,

256
00:14:47,747 --> 00:14:50,937
trabalhamos com um bloco de 15 bits, onde 11 dos bits estão livres

257
00:14:50,937 --> 00:14:54,080
para transportar uma mensagem e 4 deles estão lá para redundância.

258
00:14:54,080 --> 00:14:59,400
E com isso, agora temos o que as pessoas do ramo chamariam de código de Hamming 15-11.

259
00:14:59,400 --> 00:15:02,895
Dito isso, é bom ter um tamanho de bloco com potência limpa de 2,

260
00:15:02,895 --> 00:15:07,608
e há uma maneira inteligente de manter esse 0º bit por perto e fazer com que ele faça um

261
00:15:07,608 --> 00:15:08,880
trabalho extra para nós.

262
00:15:08,880 --> 00:15:11,946
Se o usarmos como um bit de paridade em todo o bloco,

263
00:15:11,946 --> 00:15:16,320
ele nos permitirá detectar, mesmo que não possamos corrigir, erros de 2 bits.

264
00:15:16,320 --> 00:15:17,440
Veja como funciona.

265
00:15:17,440 --> 00:15:20,587
Depois de definir esses quatro bits especiais de correção de erros,

266
00:15:20,587 --> 00:15:23,688
definimos aquele 0 para que a paridade do bloco completo seja par,

267
00:15:23,688 --> 00:15:25,540
como uma verificação de paridade normal.

268
00:15:25,540 --> 00:15:29,380
Agora, se houver um erro de bit único, a paridade do bloco completo será ímpar,

269
00:15:29,380 --> 00:15:33,508
mas detectaríamos isso de qualquer maneira, graças às quatro verificações de correção

270
00:15:33,508 --> 00:15:33,940
de erros.

271
00:15:33,940 --> 00:15:38,203
No entanto, se houver dois erros, a paridade geral voltará a ser uniforme,

272
00:15:38,203 --> 00:15:42,068
mas o receptor ainda verá que houve pelo menos algum erro por causa

273
00:15:42,068 --> 00:15:45,820
do que está acontecendo com essas quatro verificações de paridade.

274
00:15:45,820 --> 00:15:48,192
Portanto, se eles notarem uma paridade geral uniforme,

275
00:15:48,192 --> 00:15:51,082
mas algo diferente de zero acontecendo com as outras verificações,

276
00:15:51,082 --> 00:15:52,980
isso indica que houve pelo menos dois erros.

277
00:15:52,980 --> 00:15:54,420
Isso não é inteligente?

278
00:15:54,420 --> 00:15:57,424
Mesmo que não possamos corrigir esses erros de 2 bits,

279
00:15:57,424 --> 00:16:02,340
apenas colocando aquele bit 0 incômodo de volta ao trabalho, isso nos permite detectá-los.

280
00:16:02,340 --> 00:16:06,540
Isso é bastante padrão, é conhecido como código de Hamming estendido.

281
00:16:06,540 --> 00:16:10,111
Tecnicamente falando, agora você tem uma descrição completa do que um

282
00:16:10,111 --> 00:16:13,580
código de Hamming faz, pelo menos no exemplo de um bloco de 16 bits.

283
00:16:13,580 --> 00:16:17,481
Mas acho que você achará mais satisfatório verificar seu entendimento e

284
00:16:17,481 --> 00:16:21,980
solidificar tudo até agora fazendo você mesmo um exemplo completo do início ao fim.

285
00:16:21,980 --> 00:16:25,100
Vou explicar isso com você para que você possa verificar por si mesmo.

286
00:16:25,100 --> 00:16:28,579
Para configurar uma mensagem, seja uma mensagem literal que você

287
00:16:28,579 --> 00:16:32,969
está traduzindo no espaço ou alguns dados que deseja armazenar ao longo do tempo,

288
00:16:32,969 --> 00:16:35,700
a primeira etapa é dividi-la em pedaços de 11 bits.

289
00:16:35,700 --> 00:16:40,340
Cada pedaço será empacotado em um bloco de 16 bits resistente a erros.

290
00:16:40,340 --> 00:16:43,740
Então, vamos tomar este como exemplo e realmente resolver isso.

291
00:16:43,740 --> 00:16:45,380
Vá em frente, realmente faça isso!

292
00:16:45,380 --> 00:16:52,980
Vamos fazer uma pausa e tentar montar este bloco.

293
00:16:52,980 --> 00:16:53,980
Ok, você está pronto?

294
00:16:53,980 --> 00:16:57,929
Lembre-se, a posição 0 junto com as outras potências de 2 são

295
00:16:57,929 --> 00:17:01,941
reservadas para correção de erros, então você começa colocando

296
00:17:01,941 --> 00:17:05,700
os bits da mensagem em todos os pontos restantes, em ordem.

297
00:17:05,700 --> 00:17:09,446
Você precisa que este grupo tenha uma paridade par, o que já acontece,

298
00:17:09,446 --> 00:17:13,140
então você deveria ter definido o bit de paridade na posição 1 como 0.

299
00:17:13,140 --> 00:17:15,853
O próximo grupo começa com uma paridade ímpar,

300
00:17:15,853 --> 00:17:19,260
então você deveria ter definido seu bit de paridade como 1.

301
00:17:19,260 --> 00:17:21,615
O grupo depois disso começa com uma paridade ímpar,

302
00:17:21,615 --> 00:17:24,740
então novamente você deveria ter definido seu bit de paridade como 1.

303
00:17:24,740 --> 00:17:27,737
E o grupo final também tem uma paridade ímpar,

304
00:17:27,737 --> 00:17:31,500
o que significa que definimos esse bit na posição 8 como 1.

305
00:17:31,500 --> 00:17:35,837
E então, como etapa final, o bloco completo agora tem uma paridade par,

306
00:17:35,837 --> 00:17:41,078
o que significa que você pode definir o número do bit 0, o bit de paridade abrangente,

307
00:17:41,078 --> 00:17:41,500
como 0.

308
00:17:41,500 --> 00:17:45,299
Assim, à medida que este bloco é enviado, a paridade dos quatro

309
00:17:45,299 --> 00:17:48,980
subconjuntos especiais e do bloco como um todo será par, ou 0.

310
00:17:48,980 --> 00:17:53,620
Na segunda parte do exercício, vamos fazer com que você desempenhe o papel de receptor.

311
00:17:53,620 --> 00:17:56,993
Claro, isso significaria que você ainda não sabe o que é esta mensagem,

312
00:17:56,993 --> 00:18:00,180
talvez alguns de vocês a tenham memorizado, mas vamos supor que não.

313
00:18:00,180 --> 00:18:04,220
O que vou fazer é alterar 0, 1 ou 2 dos bits desse

314
00:18:04,220 --> 00:18:08,340
bloco e depois pedir que você descubra o que eu fiz.

315
00:18:08,340 --> 00:18:13,460
Então, novamente, faça uma pausa e tente resolver isso.

316
00:18:13,460 --> 00:18:21,740
Ok, então você, como receptor, agora verifica o primeiro grupo de paridade e pode

317
00:18:21,740 --> 00:18:29,820
ver que é par, então qualquer erro que exista teria que estar em uma coluna par.

318
00:18:29,820 --> 00:18:34,325
A próxima verificação nos dá um número ímpar, informando que há

319
00:18:34,325 --> 00:18:38,760
pelo menos um erro e nos restringindo a esta coluna específica.

320
00:18:38,760 --> 00:18:42,900
A terceira verificação é par, reduzindo ainda mais as possibilidades.

321
00:18:42,900 --> 00:18:45,391
E a última verificação de paridade é estranha,

322
00:18:45,391 --> 00:18:48,625
nos dizendo que há um erro em algum lugar na parte inferior,

323
00:18:48,625 --> 00:18:51,700
que agora podemos ver que deve estar na posição número 10.

324
00:18:51,700 --> 00:18:54,841
Além do mais, a paridade de todo o bloco é estranha,

325
00:18:54,841 --> 00:18:58,220
dando-nos a confiança de que houve uma virada e não duas.

326
00:18:58,220 --> 00:19:01,600
Se forem três ou mais, todas as apostas serão canceladas.

327
00:19:01,600 --> 00:19:06,229
Depois de corrigir o bit número 10, retirar os 11 bits que não foram

328
00:19:06,229 --> 00:19:10,993
usados para correção nos dá o segmento relevante da mensagem original,

329
00:19:10,993 --> 00:19:16,160
que se você retroceder e comparar é exatamente com o que iniciamos o exemplo.

330
00:19:16,160 --> 00:19:18,678
E agora que você sabe como fazer tudo isso manualmente,

331
00:19:18,678 --> 00:19:22,455
gostaria de mostrar como você pode realizar a parte central de toda essa lógica com

332
00:19:22,455 --> 00:19:23,940
uma única linha de código Python.

333
00:19:23,940 --> 00:19:28,229
Veja, o que eu ainda não lhe contei é o quão elegante esse algoritmo realmente é,

334
00:19:28,229 --> 00:19:31,786
como é simples fazer uma máquina apontar para a posição de um erro,

335
00:19:31,786 --> 00:19:35,343
como escalá-lo sistematicamente e como podemos enquadrar tudo isso.

336
00:19:35,343 --> 00:19:39,580
isso como uma única operação em vez de várias verificações de paridade separadas.

337
00:19:39,580 --> 00:19:39,580
Para entender o que quero dizer, junte-se a mim na parte 2.

