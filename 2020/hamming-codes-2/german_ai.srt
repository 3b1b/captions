1
00:00:00,000 --> 00:00:08,620
Haben Sie sich jemals gefragt, wie es möglich ist, eine CD

2
00:00:08,620 --> 00:00:10,900
oder DVD zu zerkratzen und trotzdem den darauf gespeicherten Inhalt wiederzugeben?

3
00:00:10,900 --> 00:00:15,280
Der Kratzer wirkt sich tatsächlich auf die Einsen und Nullen auf der Festplatte aus,

4
00:00:15,280 --> 00:00:20,500
sodass andere Daten als die gespeicherten Daten ausgelesen werden. Wenn die Festplatte jedoch

5
00:00:20,500 --> 00:00:26,540
nicht wirklich zerkratzt wird, werden die ausgelesenen Bits in genau dieselbe Datei dekodiert,

6
00:00:26,540 --> 00:00:28,400
die darauf kodiert wurde, a Bit für Bit kopiert, trotz all dieser Fehler.

7
00:00:28,400 --> 00:00:32,800
Es gibt eine ganze Reihe mathematischer Raffinessen, die es uns ermöglichen,

8
00:00:32,800 --> 00:00:36,840
Daten fehlersicher zu speichern und, was noch wichtiger ist, zu übertragen.

9
00:00:36,840 --> 00:00:41,480
Na gut, eigentlich braucht es gar nicht so viel

10
00:00:41,480 --> 00:00:42,480
Cleverness, um einen Weg zu finden, dies zu bewerkstelligen.

11
00:00:42,480 --> 00:00:47,660
Jede Datei, sei es ein Video, ein Ton oder ein Text, ein Code, ein

12
00:00:47,660 --> 00:00:50,960
Bild oder was auch immer, ist letztendlich eine Folge von Einsen und Nullen.

13
00:00:50,960 --> 00:00:55,340
Und eine einfache Strategie zur Korrektur jedes umgedrehten

14
00:00:55,340 --> 00:00:57,780
Bits wäre, drei Kopien jedes Bits zu speichern.

15
00:00:57,780 --> 00:01:02,240
Dann könnte die Maschine, die diese Datei liest, diese drei Kopien vergleichen und

16
00:01:02,240 --> 00:01:07,440
immer die besten 2 von 3 nehmen, wenn es eine Diskrepanz gibt.

17
00:01:07,440 --> 00:01:11,560
Das bedeutet jedoch, dass zwei Drittel Ihres Platzes für Redundanz genutzt werden.

18
00:01:11,560 --> 00:01:15,360
Und selbst dann gibt es trotz all des verschenkten Platzes keine sichere

19
00:01:15,360 --> 00:01:18,120
Garantie dafür, was passiert, wenn mehr als ein Bit umgedreht wird.

20
00:01:18,120 --> 00:01:21,960
Die viel interessantere Frage ist, wie man es so gestalten kann, dass

21
00:01:21,960 --> 00:01:24,740
Fehler korrigiert werden können und dabei möglichst wenig Platz verloren geht.

22
00:01:24,740 --> 00:01:28,500
Mit der Methode, die Sie in diesem Video kennenlernen, könnten Sie beispielsweise Ihre Daten in

23
00:01:28,500 --> 00:01:35,840
256-Bit-Blöcken speichern, wobei jeder Block 9 Bits verwendet, 9! um als eine Art Redundanz zu fungieren,

24
00:01:35,840 --> 00:01:41,000
und die anderen 247 Bits sind frei, um jede gewünschte aussagekräftige Nachricht oder Daten zu übertragen.

25
00:01:41,000 --> 00:01:44,740
Und es wird immer noch so sein, dass eine Maschine, wenn hier irgendein Bit umgedreht wird, allein durch

26
00:01:44,740 --> 00:01:49,640
einen Blick auf diesen Block und nichts weiter in der Lage sein wird, zu erkennen, dass ein Fehler

27
00:01:49,640 --> 00:01:53,120
aufgetreten ist und wo er sich genau befand, sodass sie weiß, wie sie ihn korrigieren kann .

28
00:01:53,140 --> 00:01:55,540
Und ehrlich gesagt, das fühlt sich wie Magie an.

29
00:01:55,540 --> 00:01:59,400
Und wenn bei diesem speziellen Schema zwei Bits umgedreht werden, kann die Maschine zumindest

30
00:01:59,400 --> 00:02:03,180
erkennen, dass zwei Fehler aufgetreten sind, weiß jedoch nicht, wie sie diese beheben kann.

31
00:02:03,180 --> 00:02:08,140
Wir werden etwas später darüber sprechen, wie dies für Blöcke unterschiedlicher Größe skaliert wird.

32
00:02:08,140 --> 00:02:12,620
Methoden, mit denen Sie solche Fehler korrigieren

33
00:02:12,620 --> 00:02:13,880
können, werden vernünftigerweise als Fehlerkorrekturcodes bezeichnet.

34
00:02:13,880 --> 00:02:18,220
Über den größten Teil des letzten Jahrhunderts hinweg war dieses Gebiet eine wirklich reichhaltige

35
00:02:18,220 --> 00:02:23,000
Quelle überraschend tiefgreifender Mathematik, die in die Geräte einfließt, die wir täglich verwenden.

36
00:02:23,000 --> 00:02:27,740
Ziel ist es, Ihnen ein sehr umfassendes Verständnis eines der

37
00:02:27,740 --> 00:02:29,660
frühesten Beispiele zu vermitteln, das als Hamming-Code bekannt ist.

38
00:02:29,660 --> 00:02:32,620
Übrigens geht es mir beim Aufbau dieses Videos weniger darum, es so

39
00:02:32,620 --> 00:02:37,060
direkt wie möglich zu erklären, als vielmehr darum, Sie dazu anzuregen, es

40
00:02:37,060 --> 00:02:40,220
selbst zu erfinden, mit ein wenig sanfter Anleitung hier und da.

41
00:02:40,220 --> 00:02:44,100
Wenn Sie also das Gefühl haben, irgendwann zu sehen, wohin es führt, nehmen Sie sich diesen Moment

42
00:02:44,100 --> 00:02:47,180
Zeit, um innezuhalten und aktiv vorherzusagen, wie der Plan aussehen wird, bevor ich es Ihnen sage.

43
00:02:47,180 --> 00:02:51,500
Wenn Sie außerdem möchten, dass Ihr Verständnis bis auf die Hardware-Ebene reicht, hat

44
00:02:51,500 --> 00:02:55,160
Ben Eater in Verbindung mit diesem Video ein Video erstellt, das Ihnen

45
00:02:55,160 --> 00:02:59,520
zeigt, wie Sie Hamming-Codes tatsächlich auf Steckbrettern implementieren, was äußerst zufriedenstellend ist.

46
00:02:59,520 --> 00:03:03,120
Sie sollten wissen, dass Hamming-Codes nicht so häufig verwendet werden wie modernere Codes wie der

47
00:03:03,120 --> 00:03:08,040
Reed-Solomon-Algorithmus, aber der Kontrast zwischen der Unmöglichkeit, die sich diese Aufgabe am Anfang anfühlt, und

48
00:03:08,040 --> 00:03:14,240
der völligen Vernünftigkeit, die sie einmal erscheint, hat etwas Magisches Sie erfahren etwas über Hamming.

49
00:03:14,240 --> 00:03:19,080
Das Grundprinzip der Fehlerkorrektur besteht darin, dass in einem riesigen Bereich

50
00:03:19,300 --> 00:03:22,860
aller möglichen Nachrichten nur einige Teilmengen als gültige Nachrichten gelten.

51
00:03:22,860 --> 00:03:29,100
Denken Sie als Analogie an richtig geschriebene Wörter und falsch geschriebene Wörter.

52
00:03:29,100 --> 00:03:33,340
Immer wenn eine gültige Nachricht geändert wird, ist der Empfänger dafür verantwortlich, das, was er sieht,

53
00:03:33,340 --> 00:03:38,380
an den nächsten gültigen Nachbarn zu korrigieren, wie es bei einem Tippfehler der Fall wäre.

54
00:03:38,380 --> 00:03:43,100
Die Entwicklung eines konkreten Algorithmus zur effizienten Kategorisierung

55
00:03:43,100 --> 00:03:47,160
solcher Nachrichten erfordert jedoch eine gewisse Cleverness.

56
00:03:47,160 --> 00:03:52,060
Die Geschichte beginnt in den 1940er Jahren, als der junge Richard Hamming

57
00:03:52,060 --> 00:03:55,900
für Bell Labs arbeitete und bei einigen seiner Arbeiten einen sehr

58
00:03:55,900 --> 00:03:57,420
großen, teuren Lochkartencomputer benutzte, zu dem er nur begrenzten Zugang hatte.

59
00:03:57,420 --> 00:04:01,200
Und die Programme, die er ständig durchführte, scheiterten immer wieder,

60
00:04:01,200 --> 00:04:03,140
weil hin und wieder ein Teil falsch verstanden wurde.

61
00:04:03,140 --> 00:04:07,140
Da Frustration der Schmelztiegel der Erfindungen war, hatte er

62
00:04:07,140 --> 00:04:09,280
die Nase voll und erfand den weltweit ersten Fehlerkorrekturcode.

63
00:04:09,280 --> 00:04:13,020
Es gibt viele verschiedene Möglichkeiten, Hamming-Codes zu formulieren, aber zunächst

64
00:04:13,020 --> 00:04:16,620
werden wir es so durchgehen, wie Hamming selbst darüber dachte.

65
00:04:16,620 --> 00:04:21,400
Nehmen wir ein einfaches, aber nicht zu einfaches Beispiel: einen Block mit 16 Bit.

66
00:04:21,400 --> 00:04:25,700
Wir nummerieren die Positionen dieser Bits von 0 bis 15.

67
00:04:25,700 --> 00:04:30,520
Die eigentlichen Daten, die wir speichern möchten, werden nur 12 dieser Bits

68
00:04:30,520 --> 00:04:33,920
ausmachen, während 4 der Positionen als eine Art Redundanz reserviert sind.

69
00:04:33,920 --> 00:04:38,120
Das Wort „redundant“ bedeutet hier nicht einfach „kopieren“, schließlich geben uns diese

70
00:04:38,120 --> 00:04:40,200
4 Bits nicht genug Platz, um die Daten blind zu kopieren.

71
00:04:40,200 --> 00:04:44,880
Stattdessen müssen sie eine viel differenziertere und intelligentere Art der Redundanz

72
00:04:44,880 --> 00:04:48,740
sein, die keine neuen Informationen hinzufügt, sondern die Widerstandsfähigkeit erhöht.

73
00:04:48,740 --> 00:04:52,620
Man könnte erwarten, dass diese 4 besonderen Teile schön verpackt zusammenkommen, vielleicht am

74
00:04:52,620 --> 00:04:56,400
Ende oder so ähnlich, aber wie Sie sehen werden, ermöglicht es, sie in

75
00:04:56,400 --> 00:05:00,320
Positionen zu platzieren, die Zweierpotenzen sind, am Ende etwas wirklich Elegantes zu schaffen.

76
00:05:00,320 --> 00:05:05,420
Es könnte Ihnen auch einen kleinen Hinweis darauf geben, wie sich dies auf größere Blöcke skalieren lässt.

77
00:05:05,420 --> 00:05:09,220
Auch technisch gesehen sind es am Ende nur 11 Datenbits. Sie werden feststellen, dass es eine leichte Nuance

78
00:05:09,220 --> 00:05:14,260
für das gibt, was an Position 0 passiert, aber machen Sie sich darüber im Moment keine Sorgen.

79
00:05:14,280 --> 00:05:18,640
Wie bei jedem Fehlerkorrekturalgorithmus sind auch hier zwei Spieler beteiligt: ein Sender, der

80
00:05:18,640 --> 00:05:23,200
für das Setzen dieser vier Spezialbits verantwortlich ist, und ein Empfänger, der

81
00:05:23,200 --> 00:05:26,360
dafür verantwortlich ist, eine Art Prüfung durchzuführen und die Fehler zu korrigieren.

82
00:05:26,360 --> 00:05:30,040
Natürlich beziehen sich die Wörter „Sender“ und „Empfänger“ in Wirklichkeit auf

83
00:05:30,040 --> 00:05:34,040
Maschinen oder Software, die alle Prüfungen durchführen, und der Begriff „Nachricht“

84
00:05:34,040 --> 00:05:35,480
ist sehr weit gefasst und umfasst Dinge wie die Speicherung.

85
00:05:35,480 --> 00:05:39,320
Schließlich ist das Speichern von Daten dasselbe wie das Versenden einer Nachricht nur

86
00:05:39,320 --> 00:05:42,640
von der Vergangenheit in die Zukunft und nicht von einem Ort zum anderen.

87
00:05:42,640 --> 00:05:46,700
Das ist also der Aufbau, aber bevor wir uns darauf einlassen können, müssen

88
00:05:46,700 --> 00:05:51,080
wir über eine verwandte Idee sprechen, die Hamming zum Zeitpunkt seiner Entdeckung

89
00:05:51,080 --> 00:05:55,520
noch frisch im Kopf hatte: eine Methode, mit der man einzelne Bitfehler

90
00:05:55,520 --> 00:05:57,300
erkennen, aber nicht korrigieren kann, wie man weiß im Geschäft als Paritätskontrolle.

91
00:05:57,300 --> 00:06:01,300
Bei einer Paritätsprüfung trennen wir nur ein einzelnes Bit heraus, für dessen

92
00:06:01,300 --> 00:06:04,940
Abstimmung der Absender verantwortlich ist, und der Rest kann eine Nachricht übertragen.

93
00:06:04,940 --> 00:06:10,380
Die einzige Aufgabe dieses speziellen Bits besteht darin, sicherzustellen, dass die

94
00:06:10,380 --> 00:06:12,100
Gesamtzahl der Einsen in der Nachricht eine gerade Zahl ist.

95
00:06:12,100 --> 00:06:16,920
Im Moment beträgt die Gesamtzahl der Einsen beispielsweise 7, das ist ungerade, daher muss der

96
00:06:16,920 --> 00:06:20,960
Absender dieses spezielle Bit auf eine 1 umdrehen, um die Zählung gerade zu machen.

97
00:06:20,960 --> 00:06:25,320
Hätte der Block jedoch bereits mit einer geraden Anzahl von

98
00:06:25,320 --> 00:06:27,480
Einsen begonnen, wäre dieses Sonderbit auf 0 gehalten worden.

99
00:06:27,480 --> 00:06:31,640
Das ist ziemlich einfach, täuschend einfach, aber es ist eine unglaublich elegante Möglichkeit, die Idee

100
00:06:31,640 --> 00:06:37,760
der Veränderung irgendwo in einer Nachricht zu destillieren, um sie in einer einzigen Information widerzuspiegeln.

101
00:06:37,760 --> 00:06:43,680
Beachten Sie, dass sich die Gesamtzahl der Einsen von gerade auf ungerade ändert, wenn ein

102
00:06:43,680 --> 00:06:48,140
Bit dieser Nachricht umgedreht wird, entweder von 0 auf 1 oder von 1 auf 0.

103
00:06:48,140 --> 00:06:52,000
Wenn Sie also der Empfänger sind, sich diese Nachricht ansehen und eine ungerade

104
00:06:52,000 --> 00:06:56,580
Anzahl von Einsen sehen, können Sie mit Sicherheit wissen, dass ein Fehler aufgetreten

105
00:06:56,580 --> 00:06:58,700
ist, auch wenn Sie möglicherweise keine Ahnung haben, wo dieser Fehler aufgetreten ist.

106
00:06:58,700 --> 00:07:02,820
Ob eine Gruppe von Bits eine gerade oder ungerade Anzahl

107
00:07:02,820 --> 00:07:04,940
von Einsen hat, wird im Fachjargon als Parität bezeichnet.

108
00:07:04,940 --> 00:07:09,140
Sie könnten auch Zahlen verwenden und sagen, dass die Parität 0 oder 1

109
00:07:09,140 --> 00:07:11,320
ist, was normalerweise hilfreicher ist, wenn Sie anfangen, mit der Idee zu rechnen.

110
00:07:11,320 --> 00:07:15,200
Und dieses spezielle Bit, das der Absender zur

111
00:07:15,200 --> 00:07:18,020
Steuerung der Parität verwendet, wird Paritätsbit genannt.

112
00:07:18,020 --> 00:07:22,460
Und eigentlich sollten wir uns darüber im Klaren sein: Wenn der Empfänger eine ungerade Parität sieht, bedeutet das

113
00:07:22,460 --> 00:07:26,920
nicht unbedingt, dass nur ein Fehler aufgetreten ist, es könnten auch 3 Fehler oder 5 oder eine

114
00:07:26,920 --> 00:07:29,560
andere ungerade Zahl gewesen sein, aber er kann es mit Sicherheit wissen dass es nicht 0 war.

115
00:07:29,560 --> 00:07:34,880
Wenn es andererseits zwei Fehler oder eine gerade Anzahl von Fehlern gegeben hätte, wäre

116
00:07:34,880 --> 00:07:39,560
die endgültige Anzahl von Einsen immer noch gerade, sodass der Empfänger nicht vollständig darauf

117
00:07:39,560 --> 00:07:43,360
vertrauen kann, dass eine gerade Anzahl zwangsläufig bedeutet, dass die Nachricht fehlerfrei ist .

118
00:07:43,360 --> 00:07:47,860
Sie könnten sich darüber beschweren, dass eine Nachricht, die durch nur 2-Bit-Flips

119
00:07:47,860 --> 00:07:49,760
durcheinander gebracht wird, ziemlich schwach ist, und Sie haben völlig Recht.

120
00:07:49,760 --> 00:07:54,480
Bedenken Sie jedoch, dass es keine Methode zur Fehlererkennung oder -korrektur gibt, die Ihnen hundertprozentige Sicherheit

121
00:07:54,480 --> 00:07:59,720
geben könnte, dass die Nachricht, die Sie erhalten, die ist, die der Absender beabsichtigt hat.

122
00:07:59,720 --> 00:08:03,760
Schließlich könnte genügend zufälliges Rauschen immer eine gültige Nachricht

123
00:08:03,760 --> 00:08:05,920
durch reinen Zufall in eine andere gültige Nachricht verwandeln.

124
00:08:05,920 --> 00:08:10,520
Stattdessen besteht das Ziel darin, ein Schema zu entwickeln, das bis zu einer bestimmten

125
00:08:10,520 --> 00:08:16,480
maximalen Fehleranzahl robust ist, oder vielleicht die Wahrscheinlichkeit eines solchen Fehlalarms zu verringern.

126
00:08:16,480 --> 00:08:20,940
Paritätsprüfungen allein sind ziemlich schwach, aber indem sie die Idee

127
00:08:20,940 --> 00:08:25,640
der Änderung einer gesamten Nachricht auf ein einzelnes Bit reduzieren,

128
00:08:25,640 --> 00:08:28,000
geben sie uns einen leistungsstarken Baustein für ausgefeiltere Schemata.

129
00:08:28,000 --> 00:08:32,880
Als Hamming beispielsweise nach einer Möglichkeit suchte, herauszufinden, wo ein Fehler aufgetreten ist und

130
00:08:32,880 --> 00:08:37,160
nicht nur, dass er aufgetreten ist, war seine wichtigste Erkenntnis, dass man fragen kann,

131
00:08:37,160 --> 00:08:42,040
wenn man einige Paritätsprüfungen nicht auf die gesamte Nachricht, sondern auf bestimmte sorgfältig ausgewählte

132
00:08:42,040 --> 00:08:46,840
Teilmengen anwendet eine verfeinerte Reihe von Fragen, die den Ort eines einzelnen Bitfehlers bestimmen.

133
00:08:46,840 --> 00:08:51,280
Das Gesamtgefühl ist ein bisschen so, als würde man ein Spiel mit 20 Fragen

134
00:08:51,280 --> 00:08:54,300
spielen, bei dem Ja- oder Nein-Fragen gestellt werden, die den Raum der Möglichkeiten halbieren.

135
00:08:54,300 --> 00:08:58,840
Nehmen wir zum Beispiel an, wir führen eine Paritätsprüfung nur

136
00:08:58,840 --> 00:08:59,840
für diese 8 Bits durch, also alle ungeradzahligen Positionen.

137
00:09:00,400 --> 00:09:04,560
Wenn dann ein Fehler erkannt wird, erhält der Empfänger etwas mehr Informationen darüber, wo

138
00:09:04,560 --> 00:09:09,160
genau sich der Fehler befindet, nämlich dass er sich an einer ungeraden Position befindet.

139
00:09:09,160 --> 00:09:14,360
Wenn unter diesen 8 Bits kein Fehler erkannt wird, bedeutet das entweder, dass überhaupt

140
00:09:14,360 --> 00:09:17,240
kein Fehler vorliegt, oder dass er sich irgendwo in den geraden Positionen befindet.

141
00:09:17,240 --> 00:09:21,560
Man könnte denken, dass die Beschränkung einer Paritätsprüfung auf die Hälfte der

142
00:09:21,560 --> 00:09:25,460
Bits sie weniger effektiv macht, aber wenn sie in Verbindung mit anderen

143
00:09:25,460 --> 00:09:29,720
sorgfältig ausgewählten Prüfungen durchgeführt wird, ergibt sie uns kontraintuitiv etwas viel Leistungsfähigeres.

144
00:09:29,720 --> 00:09:34,440
Um diese Paritätsprüfung tatsächlich einzurichten, müssen Sie bedenken, dass ein spezielles

145
00:09:34,440 --> 00:09:37,600
Bit reserviert werden muss, das die Parität der gesamten Gruppe steuert.

146
00:09:37,600 --> 00:09:39,920
Hier wählen wir einfach Position 1.

147
00:09:39,920 --> 00:09:43,960
Im gezeigten Beispiel ist die Parität dieser 8 Bits derzeit ungerade, sodass der

148
00:09:43,960 --> 00:09:48,220
Absender dafür verantwortlich ist, dieses Paritätsbit umzuschalten, und jetzt ist es gerade.

149
00:09:48,220 --> 00:09:51,040
Dies ist nur eine von vier Paritätsprüfungen, die wir durchführen werden.

150
00:09:51,040 --> 00:09:55,560
Das zweite Häkchen gehört zu den 8 Bits in der rechten

151
00:09:55,560 --> 00:09:56,880
Hälfte des Rasters, zumindest so, wie wir es hier gezeichnet haben.

152
00:09:56,880 --> 00:10:02,520
Dieses Mal verwenden wir möglicherweise Position 2 als Paritätsbit, sodass diese 8 Bits bereits eine gerade

153
00:10:02,520 --> 00:10:07,160
Parität haben und der Absender beruhigt sein kann, wenn er dieses Bit Nummer 2 unverändert lässt.

154
00:10:07,160 --> 00:10:11,040
Wenn der Empfänger andererseits die Parität dieser Gruppe überprüft und feststellt, dass sie ungerade ist,

155
00:10:11,040 --> 00:10:15,960
weiß er, dass der Fehler irgendwo zwischen diesen 8 Bits auf der rechten Seite liegt.

156
00:10:15,960 --> 00:10:21,260
Andernfalls liegt entweder kein Fehler vor oder der Fehler liegt irgendwo in der linken Hälfte.

157
00:10:21,260 --> 00:10:24,040
Oder ich denke, es könnte zwei Fehler gegeben haben, aber im Moment gehen

158
00:10:24,040 --> 00:10:27,080
wir davon aus, dass es höchstens einen Fehler im gesamten Block gibt.

159
00:10:27,080 --> 00:10:29,160
Darüber hinaus brechen die Dinge völlig zusammen.

160
00:10:29,160 --> 00:10:32,920
Bevor wir uns die nächsten beiden Prüfungen ansehen, nehmen Sie sich einen Moment Zeit

161
00:10:32,920 --> 00:10:35,880
und überlegen Sie, was uns diese ersten beiden ermöglichen, wenn Sie sie zusammen betrachten.

162
00:10:35,880 --> 00:10:40,240
Nehmen wir an, Sie entdecken einen Fehler in den ungeraden Spalten und in der rechten Hälfte.

163
00:10:40,240 --> 00:10:43,940
Das bedeutet zwangsläufig, dass der Fehler irgendwo in der letzten Spalte liegt.

164
00:10:43,940 --> 00:10:48,280
Wenn in der ungeraden Spalte kein Fehler aufgetreten ist, in der rechten Hälfte

165
00:10:48,280 --> 00:10:50,520
jedoch einer, bedeutet dies, dass es sich um die vorletzte Spalte handelt.

166
00:10:50,520 --> 00:10:54,640
Wenn in den ungeraden Spalten, aber nicht in der rechten Hälfte ein Fehler

167
00:10:54,640 --> 00:10:56,560
auftritt, wissen Sie ebenfalls, dass er sich irgendwo in der zweiten Spalte befindet.

168
00:10:56,560 --> 00:11:00,560
Und wenn keine dieser beiden Paritätsprüfungen etwas erkennt, bedeutet dies, dass der einzige

169
00:11:00,560 --> 00:11:03,760
Ort, an dem ein Fehler auftreten könnte, die Spalte ganz links ist.

170
00:11:03,760 --> 00:11:06,480
Es könnte aber auch einfach bedeuten, dass überhaupt kein Fehler vorliegt.

171
00:11:06,480 --> 00:11:10,800
Das ist alles eine ziemlich umständliche Art zu sagen, dass

172
00:11:10,800 --> 00:11:11,800
wir mit zwei Paritätsprüfungen die Spalte genau bestimmen können.

173
00:11:11,800 --> 00:11:14,000
Von hier aus können Sie wahrscheinlich erraten, was folgt.

174
00:11:14,000 --> 00:11:16,240
Wir machen im Grunde das Gleiche, außer für die Zeilen.

175
00:11:16,240 --> 00:11:21,040
In den ungeraden Zeilen wird eine Paritätsprüfung durchgeführt, wobei Position 4 als Paritätsbit verwendet wird.

176
00:11:21,040 --> 00:11:25,480
In diesem Beispiel hat diese Gruppe also bereits eine

177
00:11:25,480 --> 00:11:26,480
gerade Parität, sodass Bit 4 auf 0 gesetzt wäre.

178
00:11:26,480 --> 00:11:31,280
Und schließlich gibt es eine Paritätsprüfung in den unteren

179
00:11:31,280 --> 00:11:32,280
beiden Zeilen, wobei Position 8 als Paritätsbit verwendet wird.

180
00:11:32,280 --> 00:11:35,840
In diesem Fall sieht es so aus, als ob der Absender dieses

181
00:11:35,840 --> 00:11:37,840
Bit 8 aktivieren muss, um der Gruppe eine gleichmäßige Parität zu verleihen.

182
00:11:37,840 --> 00:11:41,360
So wie wir mit den ersten beiden Prüfungen die Spalte festlegen

183
00:11:41,360 --> 00:11:43,000
können, können Sie mit den nächsten beiden Prüfungen die Zeile festlegen.

184
00:11:43,000 --> 00:11:48,400
Stellen Sie sich als Beispiel vor, dass während der Übertragung ein Fehler beispielsweise an Position 3 auftritt.

185
00:11:48,400 --> 00:11:52,620
Nun, das betrifft die erste Paritätsgruppe und auch die zweite Paritätsgruppe, sodass

186
00:11:52,620 --> 00:11:56,340
der Empfänger weiß, dass irgendwo in der rechten Spalte ein Fehler vorliegt.

187
00:11:56,340 --> 00:12:01,380
Aber es hat keine Auswirkungen auf die dritte Gruppe und auch nicht auf die vierte Gruppe.

188
00:12:01,380 --> 00:12:05,460
Und so kann der Empfänger den Fehler bis zur ersten Zeile,

189
00:12:05,460 --> 00:12:08,660
was zwangsläufig Position 3 bedeutet, lokalisieren und den Fehler beheben.

190
00:12:08,660 --> 00:12:12,640
Nehmen Sie sich vielleicht einen Moment Zeit, um sich davon zu überzeugen, dass Sie mit den Antworten auf

191
00:12:12,680 --> 00:12:17,320
diese vier Fragen wirklich immer einen bestimmten Ort bestimmen können, ganz gleich, wo er sich gerade befindet.

192
00:12:17,320 --> 00:12:22,640
Tatsächlich bemerken die klugen Köpfe unter Ihnen möglicherweise sogar

193
00:12:22,640 --> 00:12:23,640
einen Zusammenhang zwischen diesen Fragen und dem binären Zählen.

194
00:12:23,640 --> 00:12:27,840
Und wenn ja, lassen Sie mich noch einmal betonen: Halten Sie inne

195
00:12:27,840 --> 00:12:30,880
und versuchen Sie selbst, die Verbindung herzustellen, bevor ich sie verderbe.

196
00:12:30,880 --> 00:12:35,560
Wenn Sie sich fragen, was passiert, wenn ein Paritätsbit

197
00:12:35,560 --> 00:12:36,560
selbst betroffen ist, können Sie es einfach versuchen.

198
00:12:36,560 --> 00:12:40,720
Nehmen Sie sich einen Moment Zeit, um darüber nachzudenken, wie jeder Fehler in diesen vier

199
00:12:40,720 --> 00:12:47,440
Spezialbits genau wie jeder andere mit derselben Gruppe von vier Fragen aufgespürt werden kann.

200
00:12:47,440 --> 00:12:50,500
Das spielt keine Rolle, denn letzten Endes geht es darum,

201
00:12:50,500 --> 00:12:53,640
die Nachrichtenbits zu schützen, während die Fehlerkorrekturbits nur mitlaufen.

202
00:12:53,640 --> 00:12:57,120
Aber auch der Schutz dieser Teile fällt

203
00:12:57,120 --> 00:12:59,260
natürlich als Nebenprodukt aus dem Plan.

204
00:12:59,260 --> 00:13:02,380
Es könnte Ihnen auch Spaß machen, vorherzusehen, wie sich dies skalieren wird.

205
00:13:02,380 --> 00:13:08,040
Wenn wir beispielsweise einen Block mit einer Größe von 256 Bit verwenden, um einen Ort zu

206
00:13:08,040 --> 00:13:15,680
bestimmen, benötigen Sie nur acht Ja- oder Nein-Fragen, um binär zu einem bestimmten Ort zu suchen.

207
00:13:15,680 --> 00:13:19,680
Und denken Sie daran, dass bei jeder Frage nur ein

208
00:13:19,680 --> 00:13:23,340
einziges Bit aufgegeben werden muss, um die entsprechende Paritätsprüfung festzulegen.

209
00:13:23,340 --> 00:13:26,960
Einige von Ihnen haben es vielleicht schon gesehen, aber wir werden später über die

210
00:13:26,960 --> 00:13:29,960
systematische Methode sprechen, um diese Fragen in nur ein oder zwei Minuten herauszufinden.

211
00:13:29,960 --> 00:13:33,440
Hoffentlich reicht diese Skizze aus, um die Effizienz

212
00:13:33,440 --> 00:13:34,440
dessen, was wir hier entwickeln, zu würdigen.

213
00:13:34,440 --> 00:13:38,440
Das erste Ding kann, abgesehen von den acht hervorgehobenen Paritätsbits, alles

214
00:13:38,440 --> 00:13:41,720
sein, was Sie wollen, und jede gewünschte Nachricht oder Daten enthalten.

215
00:13:41,720 --> 00:13:45,480
Die 8 Bits sind in dem Sinne redundant, dass sie vollständig vom Rest der Nachricht bestimmt werden, aber

216
00:13:45,480 --> 00:13:53,640
es geht auf eine viel intelligentere Art und Weise, als einfach die Nachricht als Ganzes zu kopieren.

217
00:13:53,640 --> 00:13:58,000
Und dennoch wäre man mit so wenig Aufwand in der

218
00:13:58,000 --> 00:13:59,000
Lage, jeden einzelnen Bitfehler zu identifizieren und zu beheben.

219
00:13:59,000 --> 00:14:00,400
Naja fast.

220
00:14:00,400 --> 00:14:05,920
Okay, das einzige Problem besteht hier darin, dass, wenn keine der vier Paritätsprüfungen einen

221
00:14:05,920 --> 00:14:10,240
Fehler erkennt, was bedeutet, dass die speziell ausgewählten Teilmengen von 8 Bits alle gerade

222
00:14:10,240 --> 00:14:15,520
Paritäten haben, genau wie der Absender es beabsichtigt hat, dann bedeutet das entweder, dass

223
00:14:15,520 --> 00:14:17,760
überhaupt kein Fehler aufgetreten ist , oder es schränkt uns auf Position 0 ein.

224
00:14:17,760 --> 00:14:23,040
Sie sehen, mit vier Ja- oder Nein-Fragen haben wir 16 mögliche Ergebnisse für unsere Paritätsprüfungen,

225
00:14:23,040 --> 00:14:28,000
und das fühlt sich zunächst perfekt an, um eine von 16 Positionen im Block

226
00:14:28,000 --> 00:14:33,000
zu bestimmen, aber Sie müssen auch ein 17. Ergebnis mitteilen, das „Kein Fehler“. Zustand.

227
00:14:33,000 --> 00:14:37,860
Die Lösung hier ist eigentlich ziemlich einfach: Vergessen Sie einfach das 0. Bit ganz.

228
00:14:37,860 --> 00:14:41,920
Wenn wir also unsere vier Paritätsprüfungen durchführen und feststellen, dass sie

229
00:14:41,920 --> 00:14:44,320
alle gerade sind, bedeutet das eindeutig, dass kein Fehler vorliegt.

230
00:14:44,320 --> 00:14:49,240
Das bedeutet, dass wir nicht mit einem 16-Bit-Block arbeiten, sondern mit einem 15-Bit-Block, bei dem 11

231
00:14:49,240 --> 00:14:54,040
der Bits frei sind, um eine Nachricht zu übertragen, und 4 davon der Redundanz dienen.

232
00:14:54,080 --> 00:14:58,400
Und damit haben wir jetzt das, was die

233
00:14:58,400 --> 00:14:59,400
Leute in der Branche als 15-11-Hamming-Code bezeichnen würden.

234
00:14:59,400 --> 00:15:03,920
Trotzdem ist es schön, eine Blockgröße zu haben, die einer sauberen Potenz von 2 entspricht, und es gibt eine clevere

235
00:15:03,920 --> 00:15:08,880
Möglichkeit, dieses 0-te Bit beizubehalten und es so dazu zu bringen, ein wenig zusätzliche Arbeit für uns zu erledigen.

236
00:15:08,880 --> 00:15:13,600
Wenn wir es als Paritätsbit im gesamten Block verwenden, können wir

237
00:15:13,600 --> 00:15:16,320
2-Bit-Fehler tatsächlich erkennen, auch wenn wir sie nicht korrigieren können.

238
00:15:16,320 --> 00:15:17,440
So funktioniert das.

239
00:15:17,440 --> 00:15:21,740
Nachdem wir diese vier speziellen Fehlerkorrekturbits gesetzt haben, setzen wir das nullte, sodass

240
00:15:21,740 --> 00:15:25,540
die Parität des gesamten Blocks gerade ist, genau wie bei einer normalen Paritätsprüfung.

241
00:15:25,540 --> 00:15:29,780
Wenn es nun einen einzelnen Bitfehler gibt, wechselt die Parität des gesamten Blocks in

242
00:15:29,780 --> 00:15:33,940
den ungeraden Zustand, aber dank der vier fehlerkorrigierenden Prüfungen würden wir das trotzdem erkennen.

243
00:15:33,940 --> 00:15:38,100
Wenn es jedoch zwei Fehler gibt, wird die Gesamtparität

244
00:15:38,100 --> 00:15:42,660
wieder ausgeglichen, aber der Empfänger sieht aufgrund der vier

245
00:15:42,660 --> 00:15:45,820
Paritätsprüfungen immer noch, dass zumindest ein Fehler vorliegt.

246
00:15:45,820 --> 00:15:49,780
Wenn sie also feststellen, dass die Parität insgesamt gleichmäßig ist, aber bei den anderen

247
00:15:49,820 --> 00:15:52,980
Prüfungen etwas ungleich Null passiert, bedeutet das, dass mindestens zwei Fehler aufgetreten sind.

248
00:15:52,980 --> 00:15:54,420
Ist das nicht klug?

249
00:15:54,420 --> 00:15:58,500
Auch wenn wir diese 2-Bit-Fehler nicht korrigieren können, können wir sie einfach dadurch

250
00:15:58,500 --> 00:16:02,340
erkennen, dass wir das eine kleine lästige 0. Bit wieder in Betrieb nehmen.

251
00:16:02,340 --> 00:16:06,540
Das ist ziemlich normal und wird als erweiterter Hamming-Code bezeichnet.

252
00:16:06,540 --> 00:16:10,860
Technisch gesehen haben Sie jetzt eine vollständige Beschreibung dessen, was

253
00:16:10,860 --> 00:16:13,580
ein Hamming-Code bewirkt, zumindest für das Beispiel eines 16-Bit-Blocks.

254
00:16:13,580 --> 00:16:17,300
Ich denke jedoch, dass es für Sie befriedigender sein wird, Ihr Verständnis zu überprüfen und alles bis

255
00:16:17,300 --> 00:16:21,980
zu diesem Punkt zu festigen, indem Sie selbst ein vollständiges Beispiel von Anfang bis Ende durcharbeiten.

256
00:16:21,980 --> 00:16:25,100
Ich werde es jedoch mit Ihnen durchgehen, damit Sie es selbst überprüfen können.

257
00:16:25,100 --> 00:16:29,180
Um eine Nachricht einzurichten, unabhängig davon, ob es sich um eine wörtliche Nachricht handelt,

258
00:16:29,180 --> 00:16:34,100
die Sie über den Speicherplatz übersetzen, oder um Daten, die Sie über einen

259
00:16:34,100 --> 00:16:35,700
längeren Zeitraum speichern möchten, besteht der erste Schritt darin, sie in 11-Bit-Blöcke aufzuteilen.

260
00:16:35,700 --> 00:16:40,340
Jeder Block wird in einen fehlerresistenten 16-Bit-Block verpackt.

261
00:16:40,340 --> 00:16:43,740
Nehmen wir also dieses als Beispiel und arbeiten wir es tatsächlich aus.

262
00:16:43,740 --> 00:16:45,340
Machen Sie es tatsächlich!

263
00:16:45,380 --> 00:16:47,380
Lassen Sie uns innehalten und versuchen, diesen Block zusammenzusetzen.

264
00:16:52,980 --> 00:16:53,980
Okay, bist du bereit?

265
00:16:53,980 --> 00:16:58,500
Denken Sie daran, dass Position 0 zusammen mit den anderen Potenzen von 2 für Fehlerkorrekturzwecke reserviert

266
00:16:58,500 --> 00:17:05,700
ist. Sie beginnen also damit, die Nachrichtenbits der Reihe nach an allen verbleibenden Stellen zu platzieren.

267
00:17:05,700 --> 00:17:09,700
Diese Gruppe muss über eine gerade Parität verfügen, was bereits der Fall ist.

268
00:17:09,700 --> 00:17:13,140
Daher sollten Sie das Paritätsbit in Position 1 auf 0 gesetzt haben.

269
00:17:13,140 --> 00:17:17,700
Die nächste Gruppe beginnt mit einer ungeraden Parität, daher

270
00:17:17,700 --> 00:17:19,260
sollten Sie ihr Paritätsbit auf 1 gesetzt haben.

271
00:17:19,260 --> 00:17:23,740
Die Gruppe danach beginnt mit einer ungeraden Parität, daher

272
00:17:23,740 --> 00:17:24,740
hätten Sie ihr Paritätsbit wiederum auf 1 setzen sollen.

273
00:17:24,740 --> 00:17:29,500
Und die letzte Gruppe hat auch eine ungerade Parität, was bedeutet,

274
00:17:29,500 --> 00:17:31,500
dass wir dieses Bit in Position 8 auf eine 1 setzen.

275
00:17:31,500 --> 00:17:36,460
Und als letzten Schritt hat der gesamte Block nun eine gerade Parität, was bedeutet,

276
00:17:36,460 --> 00:17:41,500
dass Sie das Bit Nummer 0, das übergeordnete Paritätsbit, auf 0 setzen können.

277
00:17:41,500 --> 00:17:45,660
Wenn dieser Block gesendet wird, ist die Parität der vier

278
00:17:45,660 --> 00:17:48,980
speziellen Teilmengen und des Blocks als Ganzes gerade oder 0.

279
00:17:48,980 --> 00:17:53,620
Lassen Sie uns im zweiten Teil der Übung die Rolle des Empfängers übernehmen.

280
00:17:53,620 --> 00:17:57,580
Das würde natürlich bedeuten, dass Sie diese Nachricht noch nicht kennen. Vielleicht haben einige

281
00:17:57,580 --> 00:18:00,180
von Ihnen sie auswendig gelernt, aber nehmen wir an, dass Sie es nicht wissen.

282
00:18:00,180 --> 00:18:05,820
Ich werde entweder 0, 1 oder 2 der Bits in diesem

283
00:18:05,820 --> 00:18:08,340
Block ändern und Sie dann bitten, herauszufinden, was ich getan habe.

284
00:18:08,340 --> 00:18:13,460
Halten Sie also noch einmal inne und versuchen Sie, es herauszufinden.

285
00:18:13,460 --> 00:18:23,960
Okay, Sie als Empfänger überprüfen jetzt die erste Paritätsgruppe und können sehen, dass

286
00:18:23,960 --> 00:18:29,820
sie gerade ist, sodass jeder vorhandene Fehler in einer geraden Spalte stehen müsste.

287
00:18:29,820 --> 00:18:34,620
Bei der nächsten Prüfung erhalten wir eine ungerade Zahl, die uns sagt,

288
00:18:34,620 --> 00:18:38,760
dass mindestens ein Fehler vorliegt, und uns auf diese bestimmte Spalte eingrenzt.

289
00:18:38,760 --> 00:18:42,900
Die dritte Prüfung ist ausgeglichen und schränkt die Möglichkeiten noch weiter ein.

290
00:18:42,900 --> 00:18:46,780
Und die letzte Paritätsprüfung ist seltsam und sagt uns, dass irgendwo unten ein Fehler

291
00:18:46,780 --> 00:18:51,700
vorliegt, der sich, wie wir jetzt erkennen können, an Position Nummer 10 befinden muss.

292
00:18:51,700 --> 00:18:56,140
Darüber hinaus ist die Parität des gesamten Blocks ungerade, was uns

293
00:18:56,140 --> 00:18:58,220
die Gewissheit gibt, dass es einen Flip und nicht zwei gab.

294
00:18:58,220 --> 00:19:01,600
Bei drei oder mehr sind alle Wetten ungültig.

295
00:19:01,600 --> 00:19:06,520
Nach der Korrektur von Bit Nummer 10 erhalten wir durch Herausziehen der 11 Bits,

296
00:19:06,520 --> 00:19:11,620
die nicht zur Korrektur verwendet wurden, den relevanten Abschnitt der ursprünglichen Nachricht, der, wenn

297
00:19:11,620 --> 00:19:16,160
man zurückspult und vergleicht, tatsächlich genau das ist, womit wir das Beispiel begonnen haben.

298
00:19:16,160 --> 00:19:19,260
Und da Sie nun wissen, wie man das alles von Hand macht, möchte ich Ihnen

299
00:19:19,260 --> 00:19:23,940
zeigen, wie Sie den Kernteil dieser gesamten Logik mit einer einzigen Zeile Python-Code ausführen können.

300
00:19:23,940 --> 00:19:28,400
Sehen Sie, was ich Ihnen noch nicht gesagt habe, ist, wie elegant dieser Algorithmus

301
00:19:28,400 --> 00:19:32,380
wirklich ist, wie einfach es ist, eine Maschine dazu zu bringen, auf die

302
00:19:32,380 --> 00:19:37,680
Position eines Fehlers zu zeigen, wie man ihn systematisch skaliert und wie wir

303
00:19:37,680 --> 00:19:39,580
alles einordnen können Dies ist ein einziger Vorgang und nicht mehrere separate Paritätsprüfungen.

304
00:19:39,580 --> 00:19:41,680
Um zu sehen, was ich meine, kommen Sie zu Teil 2.

