1
00:00:00,000 --> 00:00:08,620
Pernahkah Anda bertanya-tanya bagaimana mungkin untuk menggores CD atau

2
00:00:08,620 --> 00:00:10,900
DVD dan tetap memutarnya apa pun yang disimpannya?

3
00:00:10,900 --> 00:00:15,280
Goresan tersebut benar-benar mempengaruhi angka 1 dan 0 pada disk, jadi ia membacakan

4
00:00:15,280 --> 00:00:20,500
data yang berbeda dari apa yang disimpan, namun kecuali jika benar-benar tergores, bit-bit

5
00:00:20,500 --> 00:00:26,540
yang terbaca akan didekodekan ke dalam file yang sama persis dengan yang dikodekan

6
00:00:26,540 --> 00:00:28,400
ke dalamnya, a salinan bit demi bit, terlepas dari semua kesalahan itu.

7
00:00:28,400 --> 00:00:32,800
Ada banyak kepintaran matematika yang memungkinkan kita menyimpan data, dan sama

8
00:00:32,800 --> 00:00:36,840
pentingnya untuk mengirimkan data, dengan cara yang tahan terhadap kesalahan.

9
00:00:36,840 --> 00:00:41,480
Baiklah, sebenarnya tidak diperlukan banyak kepintaran

10
00:00:41,480 --> 00:00:42,480
untuk menemukan cara melakukan hal ini.

11
00:00:42,480 --> 00:00:47,660
File apa pun, apakah itu video atau suara atau teks, beberapa

12
00:00:47,660 --> 00:00:50,960
kode, gambar, apa pun, pada akhirnya merupakan urutan 1 dan 0.

13
00:00:50,960 --> 00:00:55,340
Dan strategi sederhana untuk memperbaiki bit apa pun yang

14
00:00:55,340 --> 00:00:57,780
terbalik adalah dengan menyimpan tiga salinan setiap bit.

15
00:00:57,780 --> 00:01:02,240
Kemudian mesin yang membaca file ini dapat membandingkan ketiga salinan tersebut dan

16
00:01:02,240 --> 00:01:07,440
selalu mengambil 2 dari 3 yang terbaik setiap kali ada perbedaan.

17
00:01:07,440 --> 00:01:11,560
Namun artinya adalah menggunakan dua pertiga ruang Anda untuk redundansi.

18
00:01:11,560 --> 00:01:15,360
Meski begitu, meskipun ada banyak ruang yang terbuang, tidak ada jaminan kuat

19
00:01:15,360 --> 00:01:18,120
mengenai apa yang akan terjadi jika lebih dari satu bit dibalik.

20
00:01:18,120 --> 00:01:21,960
Pertanyaan yang jauh lebih menarik adalah bagaimana membuat

21
00:01:21,960 --> 00:01:24,740
kesalahan dapat diperbaiki sambil memberikan ruang sesedikit mungkin.

22
00:01:24,740 --> 00:01:28,500
Misalnya, dengan menggunakan metode yang akan Anda pelajari dalam video ini, Anda dapat menyimpan data dalam

23
00:01:28,500 --> 00:01:35,840
blok 256-bit, yang setiap bloknya menggunakan 9 bit, 9! untuk bertindak sebagai semacam redundansi, dan

24
00:01:35,840 --> 00:01:41,000
247 bit lainnya bebas membawa pesan atau data bermakna apa pun yang Anda inginkan.

25
00:01:41,000 --> 00:01:44,740
Dan akan tetap terjadi jika ada bit yang terbalik di sini, hanya dengan

26
00:01:44,740 --> 00:01:49,640
melihat blok ini dan tidak lebih, mesin akan dapat mengidentifikasi bahwa ada kesalahan

27
00:01:49,640 --> 00:01:53,120
dan secara tepat di mana letak kesalahannya sehingga ia mengetahui cara memperbaikinya. .

28
00:01:53,140 --> 00:01:55,540
Dan sejujurnya, itu terasa seperti keajaiban.

29
00:01:55,540 --> 00:01:59,400
Dan untuk skema khusus ini, jika dua bit dibalik, mesin setidaknya akan

30
00:01:59,400 --> 00:02:03,180
dapat mendeteksi bahwa ada dua kesalahan, meskipun mesin tidak tahu cara memperbaikinya.

31
00:02:03,180 --> 00:02:08,140
Kita akan membahasnya nanti tentang cara menskalakan balok dengan ukuran berbeda.

32
00:02:08,140 --> 00:02:12,620
Metode yang memungkinkan Anda memperbaiki kesalahan seperti ini

33
00:02:12,620 --> 00:02:13,880
dikenal cukup masuk akal sebagai kode koreksi kesalahan.

34
00:02:13,880 --> 00:02:18,220
Selama hampir satu abad terakhir, bidang ini telah menjadi sumber yang sangat kaya akan

35
00:02:18,220 --> 00:02:23,000
matematika mendalam yang dapat dimasukkan ke dalam perangkat yang kita gunakan setiap hari.

36
00:02:23,000 --> 00:02:27,740
Tujuannya di sini adalah memberi Anda pemahaman menyeluruh tentang salah

37
00:02:27,740 --> 00:02:29,660
satu contoh paling awal, yang dikenal sebagai kode Hamming.

38
00:02:29,660 --> 00:02:32,620
Dan omong-omong, cara saya memikirkan struktur video ini bukanlah

39
00:02:32,620 --> 00:02:37,060
menjelaskannya secara langsung, namun lebih pada mendorong Anda untuk

40
00:02:37,060 --> 00:02:40,220
menciptakannya sendiri, dengan sedikit panduan lembut di sana-sini.

41
00:02:40,220 --> 00:02:44,100
Jadi ketika Anda merasa sudah tahu ke mana arahnya pada suatu saat, luangkan waktu sejenak untuk

42
00:02:44,100 --> 00:02:47,180
berhenti sejenak, prediksi secara aktif skema apa yang akan terjadi sebelum saya memberi tahu Anda.

43
00:02:47,180 --> 00:02:51,500
Selain itu, jika Anda ingin pemahaman Anda turun ke tingkat perangkat keras, Ben

44
00:02:51,500 --> 00:02:55,160
Eater telah membuat video bersama dengan video ini yang menunjukkan kepada Anda

45
00:02:55,160 --> 00:02:59,520
cara mengimplementasikan kode Hamming pada papan tempat memotong roti, yang sangat memuaskan.

46
00:02:59,520 --> 00:03:03,120
Anda harus tahu, kode Hamming tidak digunakan secara luas seperti kode yang lebih modern, seperti

47
00:03:03,120 --> 00:03:08,040
algoritma Reed-Solomon, namun ada keajaiban tertentu dalam kontras antara betapa mustahilnya tugas ini terasa

48
00:03:08,040 --> 00:03:14,240
pada awalnya, dan betapa masuk akalnya hal itu ketika dilakukan. Anda belajar tentang Hamming.

49
00:03:14,240 --> 00:03:19,080
Prinsip dasar koreksi kesalahan adalah bahwa dalam ruang yang luas dari semua

50
00:03:19,300 --> 00:03:22,860
kemungkinan pesan, hanya beberapa subset yang akan dianggap sebagai pesan valid.

51
00:03:22,860 --> 00:03:29,100
Sebagai analogi, pikirkan tentang kata-kata yang dieja dengan benar vs kata-kata yang dieja dengan salah.

52
00:03:29,100 --> 00:03:33,340
Setiap kali pesan yang valid diubah, penerima bertanggung jawab untuk mengoreksi apa yang mereka lihat

53
00:03:33,340 --> 00:03:38,380
kembali ke tetangga terdekat yang valid, seperti yang mungkin Anda lakukan jika salah ketik.

54
00:03:38,380 --> 00:03:43,100
Namun, menghasilkan algoritma konkrit untuk mengkategorikan pesan

55
00:03:43,100 --> 00:03:47,160
seperti ini secara efisien membutuhkan kepintaran tertentu.

56
00:03:47,160 --> 00:03:52,060
Ceritanya dimulai pada tahun 1940-an, ketika Richard Hamming muda bekerja

57
00:03:52,060 --> 00:03:55,900
untuk Bell Labs, dan beberapa pekerjaannya melibatkan penggunaan komputer kartu

58
00:03:55,900 --> 00:03:57,420
punch yang sangat besar dan mahal yang aksesnya terbatas.

59
00:03:57,420 --> 00:04:01,200
Dan program-program yang dijalankannya terus-menerus gagal, karena

60
00:04:01,200 --> 00:04:03,140
kadang-kadang ada bagian yang salah dibaca.

61
00:04:03,140 --> 00:04:07,140
Frustrasi menjadi wadah penemuan, dia menjadi sangat muak sehingga

62
00:04:07,140 --> 00:04:09,280
dia menemukan kode koreksi kesalahan pertama di dunia.

63
00:04:09,280 --> 00:04:13,020
Ada banyak cara berbeda untuk membingkai kode Hamming, tetapi sebagai langkah

64
00:04:13,020 --> 00:04:16,620
pertama kita akan membahasnya sesuai dengan cara Hamming sendiri memikirkannya.

65
00:04:16,620 --> 00:04:21,400
Mari kita gunakan contoh yang sederhana, namun tidak terlalu sederhana, blok 16 bit.

66
00:04:21,400 --> 00:04:25,700
Kami akan memberi nomor pada posisi bit-bit ini dari 0 hingga 15.

67
00:04:25,700 --> 00:04:30,520
Data aktual yang ingin kita simpan hanya akan berjumlah 12

68
00:04:30,520 --> 00:04:33,920
bit ini, sementara 4 posisi dicadangkan sebagai semacam redundansi.

69
00:04:33,920 --> 00:04:38,120
Kata redundant di sini tidak hanya berarti menyalin, lagipula, 4 bit tersebut

70
00:04:38,120 --> 00:04:40,200
tidak memberi kita cukup ruang untuk menyalin data secara membabi buta.

71
00:04:40,200 --> 00:04:44,880
Sebaliknya, mereka harus menjadi redundansi yang lebih bernuansa dan

72
00:04:44,880 --> 00:04:48,740
cerdas, tidak menambahkan informasi baru, namun menambah ketahanan.

73
00:04:48,740 --> 00:04:52,620
Anda mungkin mengharapkan 4 bagian khusus ini dikemas dengan baik bersama-sama, mungkin

74
00:04:52,620 --> 00:04:56,400
di akhir atau semacamnya, tetapi seperti yang akan Anda lihat, menempatkannya pada

75
00:04:56,400 --> 00:05:00,320
posisi pangkat 2 memungkinkan untuk menghasilkan sesuatu yang sangat elegan pada akhirnya.

76
00:05:00,320 --> 00:05:05,420
Ini juga mungkin memberi Anda sedikit petunjuk tentang bagaimana skala ini untuk blok yang lebih besar.

77
00:05:05,420 --> 00:05:09,220
Secara teknis juga hanya berisi 11 bit data, Anda akan menemukan ada sedikit perbedaan pada

78
00:05:09,220 --> 00:05:14,260
apa yang terjadi di posisi 0, tapi jangan khawatir tentang itu untuk saat ini.

79
00:05:14,280 --> 00:05:18,640
Seperti algoritma koreksi kesalahan lainnya, ini akan melibatkan dua pemain, pengirim

80
00:05:18,640 --> 00:05:23,200
yang bertanggung jawab untuk mengatur 4 bit khusus ini, dan penerima

81
00:05:23,200 --> 00:05:26,360
yang bertanggung jawab untuk melakukan semacam pemeriksaan dan memperbaiki kesalahan.

82
00:05:26,360 --> 00:05:30,040
Tentu saja, kata pengirim dan penerima sebenarnya mengacu pada mesin

83
00:05:30,040 --> 00:05:34,040
atau perangkat lunak yang melakukan semua pemeriksaan, dan gagasan tentang

84
00:05:34,040 --> 00:05:35,480
pesan memiliki arti yang sangat luas, termasuk hal-hal seperti penyimpanan.

85
00:05:35,480 --> 00:05:39,320
Lagi pula, menyimpan data sama saja dengan mengirim pesan dari masa

86
00:05:39,320 --> 00:05:42,640
lalu ke masa depan, bukan dari satu tempat ke tempat lain.

87
00:05:42,640 --> 00:05:46,700
Jadi begitulah pengaturannya, tapi sebelum kita mendalami lebih dalam, kita perlu

88
00:05:46,700 --> 00:05:51,080
membicarakan tentang ide terkait yang masih segar di benak Hamming pada

89
00:05:51,080 --> 00:05:55,520
saat penemuannya, sebuah metode yang memungkinkan Anda mendeteksi kesalahan bit apa

90
00:05:55,520 --> 00:05:57,300
pun, namun tidak memperbaikinya, dikenal dalam bisnis sebagai pemeriksaan paritas.

91
00:05:57,300 --> 00:06:01,300
Untuk pemeriksaan paritas, kami memisahkan hanya satu bit yang menjadi tanggung

92
00:06:01,300 --> 00:06:04,940
jawab pengirim untuk disetel, dan sisanya bebas untuk membawa pesan.

93
00:06:04,940 --> 00:06:10,380
Satu-satunya tugas bit khusus ini adalah memastikan bahwa

94
00:06:10,380 --> 00:06:12,100
jumlah total 1 dalam pesan adalah bilangan genap.

95
00:06:12,100 --> 00:06:16,920
Jadi misalnya sekarang, jumlah total 1 itu adalah 7, itu ganjil, jadi

96
00:06:16,920 --> 00:06:20,960
pengirim perlu membalik bit khusus itu menjadi 1, sehingga hitungannya genap.

97
00:06:20,960 --> 00:06:25,320
Namun jika blok telah dimulai dengan bilangan genap 1,

98
00:06:25,320 --> 00:06:27,480
maka bit khusus ini akan tetap pada bilangan 0.

99
00:06:27,480 --> 00:06:31,640
Ini cukup sederhana, tampak sederhana, namun merupakan cara yang sangat elegan untuk menyaring

100
00:06:31,640 --> 00:06:37,760
gagasan perubahan di bagian mana pun dalam pesan agar tercermin dalam sedikit informasi.

101
00:06:37,760 --> 00:06:43,680
Perhatikan jika ada bagian dari pesan ini yang dibalik, baik dari 0 ke 1

102
00:06:43,680 --> 00:06:48,140
atau 1 ke 0, ini akan mengubah jumlah total 1 dari genap menjadi ganjil.

103
00:06:48,140 --> 00:06:52,000
Jadi jika Anda adalah penerimanya, Anda melihat pesan ini, dan Anda melihat

104
00:06:52,000 --> 00:06:56,580
angka 1 yang ganjil, Anda dapat mengetahui dengan pasti bahwa telah terjadi

105
00:06:56,580 --> 00:06:58,700
kesalahan, meskipun Anda mungkin tidak tahu di mana kesalahan itu terjadi.

106
00:06:58,700 --> 00:07:02,820
Dalam jargon, apakah sekelompok bit memiliki jumlah

107
00:07:02,820 --> 00:07:04,940
1 genap atau ganjil dikenal sebagai paritasnya.

108
00:07:04,940 --> 00:07:09,140
Anda juga dapat menggunakan angka dan mengatakan paritasnya adalah 0 atau

109
00:07:09,140 --> 00:07:11,320
1, yang biasanya lebih berguna setelah Anda mulai menghitung ide tersebut.

110
00:07:11,320 --> 00:07:15,200
Dan bit khusus yang digunakan pengirim

111
00:07:15,200 --> 00:07:18,020
untuk mengontrol paritas disebut bit paritas.

112
00:07:18,020 --> 00:07:22,460
Dan sebenarnya harus jelas, jika penerima melihat paritas ganjil, bukan berarti hanya

113
00:07:22,460 --> 00:07:26,920
ada satu kesalahan, mungkin ada 3 kesalahan, atau 5, atau angka

114
00:07:26,920 --> 00:07:29,560
ganjil lainnya, tapi mereka bisa tahu pasti bahwa itu bukan 0.

115
00:07:29,560 --> 00:07:34,880
Di sisi lain, jika terdapat 2 kesalahan, atau jumlah kesalahan berapapun, jumlah akhir

116
00:07:34,880 --> 00:07:39,560
dari 1 detik tersebut akan tetap genap, sehingga penerima tidak dapat yakin sepenuhnya

117
00:07:39,560 --> 00:07:43,360
bahwa jumlah kesalahan yang genap berarti pesan tersebut bebas dari kesalahan. .

118
00:07:43,360 --> 00:07:47,860
Anda mungkin mengeluh bahwa pesan yang menjadi kacau hanya dengan

119
00:07:47,860 --> 00:07:49,760
pembalikan 2 bit cukup lemah, dan Anda memang benar.

120
00:07:49,760 --> 00:07:54,480
Namun perlu diingat, tidak ada metode deteksi atau koreksi kesalahan yang dapat memberi Anda

121
00:07:54,480 --> 00:07:59,720
keyakinan 100% bahwa pesan yang Anda terima adalah pesan yang dimaksudkan oleh pengirim.

122
00:07:59,720 --> 00:08:03,760
Lagi pula, gangguan acak yang cukup selalu dapat mengubah satu

123
00:08:03,760 --> 00:08:05,920
pesan valid menjadi pesan valid lainnya hanya secara kebetulan.

124
00:08:05,920 --> 00:08:10,520
Sebaliknya, tujuannya adalah untuk menghasilkan skema yang kuat hingga jumlah kesalahan

125
00:08:10,520 --> 00:08:16,480
maksimum tertentu, atau mungkin untuk mengurangi kemungkinan kesalahan positif seperti ini.

126
00:08:16,480 --> 00:08:20,940
Pemeriksaan paritas sendiri cukup lemah, namun dengan menyaring gagasan perubahan dari

127
00:08:20,940 --> 00:08:25,640
seluruh pesan menjadi satu bagian saja, apa yang mereka berikan kepada

128
00:08:25,640 --> 00:08:28,000
kita adalah landasan yang kuat untuk skema yang lebih canggih.

129
00:08:28,000 --> 00:08:32,880
Misalnya, saat Hamming sedang mencari cara untuk mengidentifikasi di mana kesalahan terjadi, bukan

130
00:08:32,880 --> 00:08:37,160
hanya kesalahan itu terjadi, wawasan utamanya adalah jika Anda menerapkan beberapa pemeriksaan paritas

131
00:08:37,160 --> 00:08:42,040
bukan pada keseluruhan pesan, namun pada subkumpulan tertentu yang dipilih dengan cermat, Anda

132
00:08:42,040 --> 00:08:46,840
dapat bertanya serangkaian pertanyaan yang lebih halus yang menjelaskan lokasi kesalahan bit tunggal.

133
00:08:46,840 --> 00:08:51,280
Perasaan keseluruhannya seperti memainkan permainan 20 pertanyaan, menanyakan pertanyaan

134
00:08:51,280 --> 00:08:54,300
ya atau tidak yang memotong ruang kemungkinan menjadi dua.

135
00:08:54,300 --> 00:08:58,840
Sebagai contoh, katakanlah kita melakukan pemeriksaan paritas hanya

136
00:08:58,840 --> 00:08:59,840
pada 8 bit ini, semua posisi bernomor ganjil.

137
00:09:00,400 --> 00:09:04,560
Kemudian jika terdeteksi adanya error, maka akan memberikan sedikit informasi lebih kepada

138
00:09:04,560 --> 00:09:09,160
penerima mengenai di mana tepatnya error tersebut berada, yaitu pada posisi ganjil.

139
00:09:09,160 --> 00:09:14,360
Jika tidak ada kesalahan yang terdeteksi di antara 8 bit tersebut, itu

140
00:09:14,360 --> 00:09:17,240
berarti tidak ada kesalahan sama sekali, atau berada pada posisi genap.

141
00:09:17,240 --> 00:09:21,560
Anda mungkin berpikir bahwa membatasi pemeriksaan paritas hingga setengah bit membuatnya kurang

142
00:09:21,560 --> 00:09:25,460
efektif, namun jika dilakukan bersamaan dengan pemeriksaan lain yang dipilih dengan baik,

143
00:09:25,460 --> 00:09:29,720
hal ini secara berlawanan memberi kita sesuatu yang jauh lebih kuat.

144
00:09:29,720 --> 00:09:34,440
Untuk benar-benar menyiapkan pemeriksaan paritas tersebut, ingat, diperlukan pengalokasian beberapa

145
00:09:34,440 --> 00:09:37,600
bit khusus yang memiliki kontrol untuk paritas grup penuh tersebut.

146
00:09:37,600 --> 00:09:39,920
Disini kita pilih saja posisi 1.

147
00:09:39,920 --> 00:09:43,960
Pada contoh yang ditunjukkan, paritas 8 bit ini saat ini ganjil, sehingga

148
00:09:43,960 --> 00:09:48,220
pengirim bertanggung jawab untuk mengubah bit paritas tersebut, dan sekarang menjadi genap.

149
00:09:48,220 --> 00:09:51,040
Ini hanya 1 dari 4 pemeriksaan paritas yang akan kami lakukan.

150
00:09:51,040 --> 00:09:55,560
Pemeriksaan kedua adalah di antara 8 bit di bagian kanan

151
00:09:55,560 --> 00:09:56,880
grid, setidaknya seperti yang telah kita gambarkan di sini.

152
00:09:56,880 --> 00:10:02,520
Kali ini kita mungkin menggunakan posisi 2 sebagai bit paritas, jadi 8 bit ini sudah

153
00:10:02,520 --> 00:10:07,160
memiliki paritas genap, dan pengirim akan merasa senang membiarkan bit nomor 2 itu tidak berubah.

154
00:10:07,160 --> 00:10:11,040
Kemudian di sisi lain, jika penerima memeriksa paritas grup ini dan mereka menemukan bahwa paritasnya

155
00:10:11,040 --> 00:10:15,960
ganjil, mereka akan mengetahui bahwa kesalahannya ada di antara 8 bit di sebelah kanan ini.

156
00:10:15,960 --> 00:10:21,260
Kalau tidak, berarti tidak ada kesalahan, atau kesalahannya ada di bagian kiri.

157
00:10:21,260 --> 00:10:24,040
Atau saya kira mungkin ada dua kesalahan, tapi untuk saat ini kita

158
00:10:24,040 --> 00:10:27,080
akan berasumsi bahwa paling banyak ada satu kesalahan di seluruh blok.

159
00:10:27,080 --> 00:10:29,160
Segala sesuatunya rusak total karena lebih dari itu.

160
00:10:29,160 --> 00:10:32,920
Di sini, sebelum kita melihat dua pemeriksaan berikutnya, luangkan waktu sejenak untuk memikirkan tentang

161
00:10:32,920 --> 00:10:35,880
apa yang dapat kita lakukan dari dua pemeriksaan pertama ketika Anda mempertimbangkan keduanya bersama-sama.

162
00:10:35,880 --> 00:10:40,240
Katakanlah Anda mendeteksi kesalahan di antara kolom ganjil, dan di paruh kanan.

163
00:10:40,240 --> 00:10:43,940
Ini berarti kesalahannya ada di kolom terakhir.

164
00:10:43,940 --> 00:10:48,280
Jika tidak ada kesalahan pada kolom ganjil namun ada satu kesalahan pada

165
00:10:48,280 --> 00:10:50,520
separuh kanan, berarti kesalahan tersebut berada pada kolom kedua dari terakhir.

166
00:10:50,520 --> 00:10:54,640
Begitu pula jika ada kesalahan di kolom ganjil tetapi tidak

167
00:10:54,640 --> 00:10:56,560
di separuh kanan, Anda tahu kesalahannya ada di kolom kedua.

168
00:10:56,560 --> 00:11:00,560
Dan jika tidak satu pun dari kedua pemeriksaan paritas tersebut yang mendeteksi apa

169
00:11:00,560 --> 00:11:03,760
pun, berarti satu-satunya tempat terjadinya kesalahan adalah di kolom paling kiri tersebut.

170
00:11:03,760 --> 00:11:06,480
Tapi itu juga mungkin berarti tidak ada kesalahan sama sekali.

171
00:11:06,480 --> 00:11:10,800
Ini merupakan cara yang agak rumit untuk mengatakan

172
00:11:10,800 --> 00:11:11,800
bahwa dua pemeriksaan paritas mari kita tentukan kolomnya.

173
00:11:11,800 --> 00:11:14,000
Dari sini, Anda mungkin bisa menebak berikut ini.

174
00:11:14,000 --> 00:11:16,240
Pada dasarnya kami melakukan hal yang sama tetapi untuk barisnya.

175
00:11:16,240 --> 00:11:21,040
Akan ada pemeriksaan paritas pada baris ganjil, menggunakan posisi 4 sebagai bit paritas.

176
00:11:21,040 --> 00:11:25,480
Jadi dalam contoh ini grup tersebut sudah memiliki paritas

177
00:11:25,480 --> 00:11:26,480
genap, jadi bit 4 akan disetel ke 0.

178
00:11:26,480 --> 00:11:31,280
Dan terakhir ada pemeriksaan paritas pada dua baris

179
00:11:31,280 --> 00:11:32,280
terbawah, menggunakan posisi 8 sebagai bit paritas.

180
00:11:32,280 --> 00:11:35,840
Dalam hal ini, sepertinya pengirim perlu mengaktifkan bit 8

181
00:11:35,840 --> 00:11:37,840
tersebut untuk memberikan keseimbangan yang merata pada grup.

182
00:11:37,840 --> 00:11:41,360
Sama seperti dua pemeriksaan pertama yang memungkinkan kita menentukan

183
00:11:41,360 --> 00:11:43,000
kolom, dua pemeriksaan berikutnya memungkinkan Anda menentukan baris.

184
00:11:43,000 --> 00:11:48,400
Sebagai contoh, bayangkan selama transmisi terjadi kesalahan pada, katakanlah, posisi 3.

185
00:11:48,400 --> 00:11:52,620
Ini mempengaruhi kelompok paritas pertama, dan juga mempengaruhi kelompok paritas kedua, sehingga

186
00:11:52,620 --> 00:11:56,340
penerima mengetahui bahwa ada kesalahan di suatu tempat di kolom kanan itu.

187
00:11:56,340 --> 00:12:01,380
Tapi itu tidak mempengaruhi kelompok ketiga, dan tidak mempengaruhi kelompok keempat.

188
00:12:01,380 --> 00:12:05,460
Dan itu memungkinkan penerima menentukan kesalahan hingga baris pertama, yang

189
00:12:05,460 --> 00:12:08,660
berarti posisi 3, sehingga mereka dapat memperbaiki kesalahan tersebut.

190
00:12:08,660 --> 00:12:12,640
Anda mungkin senang meluangkan waktu sejenak untuk meyakinkan diri sendiri bahwa jawaban atas keempat

191
00:12:12,680 --> 00:12:17,320
pertanyaan ini akan selalu memungkinkan Anda menentukan lokasi tertentu, di mana pun lokasinya.

192
00:12:17,320 --> 00:12:22,640
Faktanya, orang yang cerdik di antara Anda mungkin

193
00:12:22,640 --> 00:12:23,640
menyadari hubungan antara pertanyaan-pertanyaan ini dan penghitungan biner.

194
00:12:23,640 --> 00:12:27,840
Dan jika Anda melakukannya, sekali lagi izinkan saya menekankan, berhenti

195
00:12:27,840 --> 00:12:30,880
sejenak, cobalah sendiri untuk menarik hubungannya sebelum saya merusaknya.

196
00:12:30,880 --> 00:12:35,560
Jika Anda bertanya-tanya apa yang terjadi jika bit

197
00:12:35,560 --> 00:12:36,560
paritas itu sendiri terpengaruh, Anda bisa mencobanya.

198
00:12:36,560 --> 00:12:40,720
Luangkan waktu sejenak untuk memikirkan bagaimana kesalahan apa pun di antara empat bit

199
00:12:40,720 --> 00:12:47,440
khusus ini akan dilacak seperti yang lainnya, dengan kelompok empat pertanyaan yang sama.

200
00:12:47,440 --> 00:12:50,500
Hal ini tidak menjadi masalah, karena pada akhirnya yang kita inginkan

201
00:12:50,500 --> 00:12:53,640
adalah melindungi bit pesan, bit koreksi kesalahan akan terus berjalan.

202
00:12:53,640 --> 00:12:57,120
Namun melindungi bagian-bagian tersebut juga merupakan sesuatu yang secara

203
00:12:57,120 --> 00:12:59,260
alami tidak termasuk dalam skema dan merupakan produk sampingan.

204
00:12:59,260 --> 00:13:02,380
Anda mungkin juga senang mengantisipasi bagaimana skalanya.

205
00:13:02,380 --> 00:13:08,040
Jika kita menggunakan blok berukuran 256 bit, misalnya, untuk menentukan lokasi, Anda hanya memerlukan

206
00:13:08,040 --> 00:13:15,680
delapan pertanyaan ya atau tidak untuk melakukan pencarian biner hingga ke titik tertentu.

207
00:13:15,680 --> 00:13:19,680
Dan ingat, setiap pertanyaan hanya memerlukan penyerahan satu

208
00:13:19,680 --> 00:13:23,340
bit untuk mengatur pemeriksaan paritas yang sesuai.

209
00:13:23,340 --> 00:13:26,960
Beberapa dari Anda mungkin sudah melihatnya, tetapi nanti kita akan membahas tentang

210
00:13:26,960 --> 00:13:29,960
cara sistematis untuk mengetahui pertanyaan-pertanyaan ini hanya dalam satu atau dua menit.

211
00:13:29,960 --> 00:13:33,440
Semoga sketsa ini cukup untuk mengapresiasi efisiensi

212
00:13:33,440 --> 00:13:34,440
dari apa yang kami kembangkan di sini.

213
00:13:34,440 --> 00:13:38,440
Hal pertama, kecuali delapan bit paritas yang disorot, dapat berupa apa pun

214
00:13:38,440 --> 00:13:41,720
yang Anda inginkan, membawa pesan atau data apa pun yang Anda inginkan.

215
00:13:41,720 --> 00:13:45,480
8 bit tersebut mubazir dalam arti bahwa mereka sepenuhnya ditentukan oleh sisa pesan, namun

216
00:13:45,480 --> 00:13:53,640
ini adalah cara yang jauh lebih cerdas daripada sekadar menyalin pesan secara keseluruhan.

217
00:13:53,640 --> 00:13:58,000
Dan tetap saja, dengan sedikit menyerah, Anda akan

218
00:13:58,000 --> 00:13:59,000
dapat mengidentifikasi dan memperbaiki kesalahan bit apa pun.

219
00:13:59,000 --> 00:14:00,400
Hampir saja.

220
00:14:00,400 --> 00:14:05,920
Oke, jadi satu-satunya masalah di sini adalah jika tidak satu pun dari empat

221
00:14:05,920 --> 00:14:10,240
pemeriksaan paritas yang mendeteksi kesalahan, artinya subset 8 bit yang dipilih secara

222
00:14:10,240 --> 00:14:15,520
khusus semuanya memiliki paritas genap, seperti yang diinginkan pengirim, maka itu berarti

223
00:14:15,520 --> 00:14:17,760
tidak ada kesalahan sama sekali. , atau mempersempit kita ke posisi 0.

224
00:14:17,760 --> 00:14:23,040
Anda tahu, dengan empat pertanyaan ya atau tidak, kami memiliki 16 kemungkinan hasil untuk pemeriksaan

225
00:14:23,040 --> 00:14:28,000
paritas kami, dan pada awalnya itu terasa sempurna untuk menunjukkan dengan tepat 1 dari 16

226
00:14:28,000 --> 00:14:33,000
posisi di blok, tetapi Anda juga perlu mengomunikasikan hasil ke-17, tidak ada kesalahan kondisi.

227
00:14:33,000 --> 00:14:37,860
Solusinya di sini sebenarnya cukup sederhana, lupakan saja bit ke-0 itu sepenuhnya.

228
00:14:37,860 --> 00:14:41,920
Jadi ketika kita melakukan empat pemeriksaan paritas dan kita

229
00:14:41,920 --> 00:14:44,320
melihat semuanya genap, itu berarti tidak ada kesalahan.

230
00:14:44,320 --> 00:14:49,240
Artinya, daripada bekerja dengan blok 16-bit, kami bekerja dengan blok 15-bit, di mana

231
00:14:49,240 --> 00:14:54,040
11 bit bebas untuk membawa pesan dan 4 di antaranya untuk redundansi.

232
00:14:54,080 --> 00:14:58,400
Dan dengan itu, kami sekarang memiliki apa yang oleh

233
00:14:58,400 --> 00:14:59,400
orang-orang dalam bisnis ini disebut sebagai kode 15-11 Hamming.

234
00:14:59,400 --> 00:15:03,920
Meskipun demikian, menyenangkan untuk memiliki ukuran blok dengan pangkat bersih 2, dan ada cara cerdas

235
00:15:03,920 --> 00:15:08,880
agar kita dapat mempertahankan bit ke-0 tersebut dan membuatnya melakukan sedikit pekerjaan ekstra untuk kita.

236
00:15:08,880 --> 00:15:13,600
Jika kita menggunakannya sebagai bit paritas di seluruh blok, ini

237
00:15:13,600 --> 00:15:16,320
memungkinkan kita mendeteksi, meskipun kita tidak dapat memperbaiki, kesalahan 2-bit.

238
00:15:16,320 --> 00:15:17,440
Begini cara kerjanya.

239
00:15:17,440 --> 00:15:21,740
Setelah menyetel keempat bit koreksi kesalahan khusus tersebut, kami menyetel bit ke-0

240
00:15:21,740 --> 00:15:25,540
tersebut sehingga paritas dari blok penuh menjadi genap, seperti pemeriksaan paritas normal.

241
00:15:25,540 --> 00:15:29,780
Sekarang, jika ada kesalahan bit tunggal, maka paritas blok penuh akan berubah

242
00:15:29,780 --> 00:15:33,940
menjadi ganjil, namun kita akan tetap menangkapnya berkat empat pemeriksaan koreksi kesalahan.

243
00:15:33,940 --> 00:15:38,100
Namun, jika ada dua kesalahan, maka keseluruhan paritas akan kembali menjadi

244
00:15:38,100 --> 00:15:42,660
genap, namun penerima masih akan melihat bahwa setidaknya ada beberapa

245
00:15:42,660 --> 00:15:45,820
kesalahan karena apa yang terjadi dengan keempat pemeriksaan paritas tersebut.

246
00:15:45,820 --> 00:15:49,780
Jadi, jika mereka melihat adanya paritas yang genap secara keseluruhan, namun terjadi sesuatu yang bukan

247
00:15:49,820 --> 00:15:52,980
nol pada pemeriksaan lainnya, hal ini memberi tahu mereka bahwa setidaknya ada dua kesalahan.

248
00:15:52,980 --> 00:15:54,420
Bukankah itu pintar?

249
00:15:54,420 --> 00:15:58,500
Meskipun kami tidak dapat memperbaiki kesalahan 2-bit tersebut, hanya dengan

250
00:15:58,500 --> 00:16:02,340
mengembalikan satu bit ke-0 yang mengganggu itu, kami dapat mendeteksinya.

251
00:16:02,340 --> 00:16:06,540
Ini cukup standar, dikenal sebagai kode Hamming yang diperluas.

252
00:16:06,540 --> 00:16:10,860
Secara teknis, Anda sekarang memiliki gambaran lengkap tentang

253
00:16:10,860 --> 00:16:13,580
fungsi kode Hamming, setidaknya untuk contoh blok 16-bit.

254
00:16:13,580 --> 00:16:17,300
Namun saya pikir Anda akan merasa lebih puas jika memeriksa pemahaman Anda dan memantapkan

255
00:16:17,300 --> 00:16:21,980
semuanya hingga saat ini dengan melakukan sendiri satu contoh lengkap dari awal hingga akhir.

256
00:16:21,980 --> 00:16:25,100
Saya akan membahasnya bersama Anda sehingga Anda dapat memeriksanya sendiri.

257
00:16:25,100 --> 00:16:29,180
Untuk menyiapkan pesan, apakah itu pesan literal yang Anda terjemahkan

258
00:16:29,180 --> 00:16:34,100
melalui ruang atau beberapa data yang ingin Anda simpan dari

259
00:16:34,100 --> 00:16:35,700
waktu ke waktu, langkah pertama adalah membaginya menjadi potongan 11-bit.

260
00:16:35,700 --> 00:16:40,340
Setiap potongan akan dikemas ke dalam blok 16-bit yang tahan kesalahan.

261
00:16:40,340 --> 00:16:43,740
Jadi mari kita ambil yang ini sebagai contoh dan kerjakan.

262
00:16:43,740 --> 00:16:45,340
Silakan, lakukanlah!

263
00:16:45,380 --> 00:16:47,380
Mari kita berhenti sejenak dan mencoba menyusun blok ini.

264
00:16:52,980 --> 00:16:53,980
Oke, kamu siap?

265
00:16:53,980 --> 00:16:58,500
Ingat, posisi 0 dan pangkat 2 lainnya dicadangkan untuk tugas koreksi kesalahan, jadi

266
00:16:58,500 --> 00:17:05,700
Anda mulai dengan menempatkan bit pesan di semua tempat yang tersisa, secara berurutan.

267
00:17:05,700 --> 00:17:09,700
Anda memerlukan grup ini untuk memiliki paritas genap, yang sudah dimilikinya, jadi

268
00:17:09,700 --> 00:17:13,140
Anda harus menyetel bit paritas tersebut di posisi 1 menjadi 0.

269
00:17:13,140 --> 00:17:17,700
Grup berikutnya dimulai dengan paritas ganjil, jadi

270
00:17:17,700 --> 00:17:19,260
Anda harus menyetel bit paritasnya menjadi 1.

271
00:17:19,260 --> 00:17:23,740
Grup setelah itu dimulai dengan paritas ganjil, jadi sekali

272
00:17:23,740 --> 00:17:24,740
lagi Anda harus menyetel bit paritasnya ke 1.

273
00:17:24,740 --> 00:17:29,500
Dan grup terakhir juga memiliki paritas ganjil, artinya bit

274
00:17:29,500 --> 00:17:31,500
tersebut kita atur pada posisi 8 menjadi 1.

275
00:17:31,500 --> 00:17:36,460
Dan sebagai langkah terakhir, blok penuh sekarang memiliki paritas genap, artinya

276
00:17:36,460 --> 00:17:41,500
Anda dapat mengatur bit nomor 0, bit paritas keseluruhan, menjadi 0.

277
00:17:41,500 --> 00:17:45,660
Jadi ketika blok ini dilepaskan, paritas dari empat himpunan bagian khusus

278
00:17:45,660 --> 00:17:48,980
dan blok secara keseluruhan semuanya akan menjadi genap, atau 0.

279
00:17:48,980 --> 00:17:53,620
Sebagai bagian kedua dari latihan ini, biarkan Anda berperan sebagai penerima.

280
00:17:53,620 --> 00:17:57,580
Tentu saja itu berarti Anda belum mengetahui apa pesan ini, mungkin

281
00:17:57,580 --> 00:18:00,180
sebagian dari Anda sudah menghafalnya, tapi anggap saja Anda belum.

282
00:18:00,180 --> 00:18:05,820
Apa yang akan saya lakukan adalah mengubah 0, 1, atau 2 bit di

283
00:18:05,820 --> 00:18:08,340
blok itu, dan kemudian meminta Anda mencari tahu apa yang saya lakukan.

284
00:18:08,340 --> 00:18:13,460
Jadi sekali lagi, jeda dan coba kerjakan.

285
00:18:13,460 --> 00:18:23,960
Oke, jadi Anda sebagai penerima sekarang periksa grup paritas pertama dan Anda dapat melihat bahwa

286
00:18:23,960 --> 00:18:29,820
grup tersebut genap, jadi kesalahan apa pun yang ada pasti berada di kolom genap.

287
00:18:29,820 --> 00:18:34,620
Pemeriksaan berikutnya memberi kita angka ganjil, memberi tahu kita berdua bahwa setidaknya

288
00:18:34,620 --> 00:18:38,760
ada satu kesalahan, dan mempersempit kita ke dalam kolom spesifik ini.

289
00:18:38,760 --> 00:18:42,900
Pemeriksaan ketiga bersifat genap, mengurangi kemungkinan lebih jauh lagi.

290
00:18:42,900 --> 00:18:46,780
Dan pemeriksaan paritas terakhir adalah ganjil, memberi tahu kita bahwa ada kesalahan di suatu

291
00:18:46,780 --> 00:18:51,700
tempat di bawah, yang sekarang kita lihat pasti berada di posisi nomor 10.

292
00:18:51,700 --> 00:18:56,140
Terlebih lagi, paritas seluruh blok ganjil, memberi kita

293
00:18:56,140 --> 00:18:58,220
keyakinan bahwa ada satu flip dan bukan dua.

294
00:18:58,220 --> 00:19:01,600
Jika jumlahnya tiga atau lebih, semua taruhan dibatalkan.

295
00:19:01,600 --> 00:19:06,520
Setelah mengoreksi bit nomor 10 itu, mengeluarkan 11 bit yang tidak digunakan

296
00:19:06,520 --> 00:19:11,620
untuk koreksi memberi kita segmen yang relevan dari pesan asli, yang jika

297
00:19:11,620 --> 00:19:16,160
Anda memutar ulang dan membandingkannya memang persis dengan contoh yang kita mulai.

298
00:19:16,160 --> 00:19:19,260
Dan sekarang setelah Anda mengetahui cara melakukan semua ini dengan tangan, saya ingin menunjukkan kepada Anda

299
00:19:19,260 --> 00:19:23,940
bagaimana Anda dapat menjalankan bagian inti dari semua logika ini dengan satu baris kode Python.

300
00:19:23,940 --> 00:19:28,400
Anda tahu, apa yang belum saya sampaikan kepada Anda adalah betapa

301
00:19:28,400 --> 00:19:32,380
elegannya algoritma ini, betapa sederhananya membuat mesin menunjukkan posisi kesalahan,

302
00:19:32,380 --> 00:19:37,680
bagaimana menskalakannya secara sistematis, dan bagaimana kita dapat membingkai semuanya.

303
00:19:37,680 --> 00:19:39,580
ini sebagai satu operasi tunggal, bukan beberapa pemeriksaan paritas terpisah.

304
00:19:39,580 --> 00:19:41,680
Untuk memahami maksud saya, bergabunglah dengan saya di bagian 2.

