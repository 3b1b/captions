1
00:00:03,620 --> 00:00:07,019
Pernahkah Anda bertanya-tanya bagaimana mungkin untuk menggores 

2
00:00:07,019 --> 00:00:10,100
CD atau DVD dan tetap memutarnya apa pun yang disimpannya?

3
00:00:10,900 --> 00:00:14,247
Goresan tersebut benar-benar mempengaruhi angka 1 dan 0 pada disk, 

4
00:00:14,247 --> 00:00:17,296
jadi ia membacakan data yang berbeda dari apa yang disimpan, 

5
00:00:17,296 --> 00:00:21,393
namun kecuali jika benar-benar tergores, bit-bit yang terbaca akan didekodekan ke 

6
00:00:21,393 --> 00:00:25,741
dalam file yang sama persis dengan yang dikodekan ke dalamnya, a salinan bit demi bit, 

7
00:00:25,741 --> 00:00:27,440
terlepas dari semua kesalahan itu.

8
00:00:27,440 --> 00:00:31,431
Ada banyak kepintaran matematika yang memungkinkan kita menyimpan data, 

9
00:00:31,431 --> 00:00:36,200
dan sama pentingnya untuk mengirimkan data, dengan cara yang tahan terhadap kesalahan.

10
00:00:36,200 --> 00:00:38,938
Baiklah, sebenarnya tidak diperlukan banyak kepintaran 

11
00:00:38,938 --> 00:00:40,880
untuk menemukan cara melakukan hal ini.

12
00:00:40,880 --> 00:00:46,089
File apa pun, apakah itu video atau suara atau teks, beberapa kode, 

13
00:00:46,089 --> 00:00:50,380
gambar, apa pun, pada akhirnya merupakan urutan 1 dan 0.

14
00:00:50,680 --> 00:00:53,363
Dan strategi sederhana untuk memperbaiki bit apa pun yang 

15
00:00:53,363 --> 00:00:56,000
terbalik adalah dengan menyimpan tiga salinan setiap bit.

16
00:00:57,580 --> 00:01:00,690
Kemudian mesin yang membaca file ini dapat membandingkan ketiga salinan 

17
00:01:00,690 --> 00:01:04,060
tersebut dan selalu mengambil 2 dari 3 yang terbaik setiap kali ada perbedaan.

18
00:01:07,160 --> 00:01:10,860
Namun artinya adalah menggunakan dua pertiga ruang Anda untuk redundansi.

19
00:01:11,480 --> 00:01:13,710
Meski begitu, meskipun ada banyak ruang yang terbuang, 

20
00:01:13,710 --> 00:01:17,240
tidak ada jaminan kuat mengenai apa yang akan terjadi jika lebih dari satu bit dibalik.

21
00:01:17,980 --> 00:01:20,789
Pertanyaan yang jauh lebih menarik adalah bagaimana membuat 

22
00:01:20,789 --> 00:01:24,020
kesalahan dapat diperbaiki sambil memberikan ruang sesedikit mungkin.

23
00:01:24,520 --> 00:01:28,670
Misalnya, dengan menggunakan metode yang akan Anda pelajari dalam video ini, 

24
00:01:28,670 --> 00:01:33,360
Anda dapat menyimpan data dalam blok 256-bit, yang setiap bloknya menggunakan 9 bit, 9!

25
00:01:33,760 --> 00:01:36,979
untuk bertindak sebagai semacam redundansi, dan 247 bit lainnya 

26
00:01:36,979 --> 00:01:40,300
bebas membawa pesan atau data bermakna apa pun yang Anda inginkan.

27
00:01:40,900 --> 00:01:43,709
Dan akan tetap terjadi jika ada bit yang terbalik di sini, 

28
00:01:43,709 --> 00:01:45,946
hanya dengan melihat blok ini dan tidak lebih, 

29
00:01:45,946 --> 00:01:49,708
mesin akan dapat mengidentifikasi bahwa ada kesalahan dan secara tepat di mana 

30
00:01:49,708 --> 00:01:52,660
letak kesalahannya sehingga ia mengetahui cara memperbaikinya.

31
00:01:52,660 --> 00:01:54,620
Dan sejujurnya, itu terasa seperti keajaiban.

32
00:01:55,440 --> 00:01:57,758
Dan untuk skema khusus ini, jika dua bit dibalik, 

33
00:01:57,758 --> 00:02:00,726
mesin setidaknya akan dapat mendeteksi bahwa ada dua kesalahan, 

34
00:02:00,726 --> 00:02:02,860
meskipun mesin tidak tahu cara memperbaikinya.

35
00:02:03,520 --> 00:02:06,900
Kita akan membahasnya nanti tentang cara menskalakan balok dengan ukuran berbeda.

36
00:02:07,860 --> 00:02:10,380
Metode yang memungkinkan Anda memperbaiki kesalahan seperti 

37
00:02:10,380 --> 00:02:12,900
ini dikenal cukup masuk akal sebagai kode koreksi kesalahan.

38
00:02:13,660 --> 00:02:17,730
Selama hampir satu abad terakhir, bidang ini telah menjadi sumber yang sangat kaya akan 

39
00:02:17,730 --> 00:02:21,708
matematika mendalam yang dapat dimasukkan ke dalam perangkat yang kita gunakan setiap 

40
00:02:21,708 --> 00:02:21,940
hari.

41
00:02:22,840 --> 00:02:25,794
Tujuannya di sini adalah memberi Anda pemahaman menyeluruh tentang 

42
00:02:25,794 --> 00:02:28,660
salah satu contoh paling awal, yang dikenal sebagai kode Hamming.

43
00:02:29,520 --> 00:02:32,868
Dan omong-omong, cara saya memikirkan struktur video ini bukanlah 

44
00:02:32,868 --> 00:02:36,116
menjelaskannya secara langsung, namun lebih pada mendorong Anda 

45
00:02:36,116 --> 00:02:39,820
untuk menciptakannya sendiri, dengan sedikit panduan lembut di sana-sini.

46
00:02:40,120 --> 00:02:42,409
Jadi ketika Anda merasa sudah tahu ke mana arahnya pada suatu saat, 

47
00:02:42,409 --> 00:02:43,992
luangkan waktu sejenak untuk berhenti sejenak, 

48
00:02:43,992 --> 00:02:46,720
prediksi secara aktif skema apa yang akan terjadi sebelum saya memberi tahu Anda.

49
00:02:47,240 --> 00:02:50,574
Selain itu, jika Anda ingin pemahaman Anda turun ke tingkat perangkat keras, 

50
00:02:50,574 --> 00:02:54,212
Ben Eater telah membuat video bersama dengan video ini yang menunjukkan kepada Anda 

51
00:02:54,212 --> 00:02:57,287
cara mengimplementasikan kode Hamming pada papan tempat memotong roti, 

52
00:02:57,287 --> 00:02:58,240
yang sangat memuaskan.

53
00:02:59,300 --> 00:03:03,382
Anda harus tahu, kode Hamming tidak digunakan secara luas seperti kode yang lebih modern, 

54
00:03:03,382 --> 00:03:06,785
seperti algoritma Reed-Solomon, namun ada keajaiban tertentu dalam kontras 

55
00:03:06,785 --> 00:03:09,370
antara betapa mustahilnya tugas ini terasa pada awalnya, 

56
00:03:09,370 --> 00:03:13,000
dan betapa masuk akalnya hal itu ketika dilakukan. Anda belajar tentang Hamming.

57
00:03:13,720 --> 00:03:17,896
Prinsip dasar koreksi kesalahan adalah bahwa dalam ruang yang luas dari semua 

58
00:03:17,896 --> 00:03:22,180
kemungkinan pesan, hanya beberapa subset yang akan dianggap sebagai pesan valid.

59
00:03:22,800 --> 00:03:24,732
Sebagai analogi, pikirkan tentang kata-kata yang 

60
00:03:24,732 --> 00:03:26,940
dieja dengan benar vs kata-kata yang dieja dengan salah.

61
00:03:28,900 --> 00:03:31,670
Setiap kali pesan yang valid diubah, penerima bertanggung jawab 

62
00:03:31,670 --> 00:03:35,132
untuk mengoreksi apa yang mereka lihat kembali ke tetangga terdekat yang valid, 

63
00:03:35,132 --> 00:03:37,340
seperti yang mungkin Anda lakukan jika salah ketik.

64
00:03:38,220 --> 00:03:41,023
Namun, menghasilkan algoritma konkrit untuk mengkategorikan 

65
00:03:41,023 --> 00:03:44,060
pesan seperti ini secara efisien membutuhkan kepintaran tertentu.

66
00:03:46,780 --> 00:03:50,108
Ceritanya dimulai pada tahun 1940-an, ketika Richard Hamming muda 

67
00:03:50,108 --> 00:03:53,789
bekerja untuk Bell Labs, dan beberapa pekerjaannya melibatkan penggunaan 

68
00:03:53,789 --> 00:03:57,420
komputer kartu punch yang sangat besar dan mahal yang aksesnya terbatas.

69
00:03:57,800 --> 00:04:00,309
Dan program-program yang dijalankannya terus-menerus gagal, 

70
00:04:00,309 --> 00:04:02,400
karena kadang-kadang ada bagian yang salah dibaca.

71
00:04:03,120 --> 00:04:05,660
Frustrasi menjadi wadah penemuan, dia menjadi sangat muak 

72
00:04:05,660 --> 00:04:08,420
sehingga dia menemukan kode koreksi kesalahan pertama di dunia.

73
00:04:09,060 --> 00:04:11,274
Ada banyak cara berbeda untuk membingkai kode Hamming, 

74
00:04:11,274 --> 00:04:14,494
tetapi sebagai langkah pertama kita akan membahasnya sesuai dengan cara Hamming 

75
00:04:14,494 --> 00:04:15,380
sendiri memikirkannya.

76
00:04:16,519 --> 00:04:20,940
Mari kita gunakan contoh yang sederhana, namun tidak terlalu sederhana, blok 16 bit.

77
00:04:21,820 --> 00:04:24,740
Kami akan memberi nomor pada posisi bit-bit ini dari 0 hingga 15.

78
00:04:25,620 --> 00:04:29,602
Data aktual yang ingin kita simpan hanya akan berjumlah 12 bit ini, 

79
00:04:29,602 --> 00:04:33,000
sementara 4 posisi dicadangkan sebagai semacam redundansi.

80
00:04:33,900 --> 00:04:36,496
Kata redundant di sini tidak hanya berarti menyalin, lagipula, 

81
00:04:36,496 --> 00:04:40,040
4 bit tersebut tidak memberi kita cukup ruang untuk menyalin data secara membabi buta.

82
00:04:40,720 --> 00:04:44,434
Sebaliknya, mereka harus menjadi redundansi yang lebih bernuansa dan cerdas, 

83
00:04:44,434 --> 00:04:47,280
tidak menambahkan informasi baru, namun menambah ketahanan.

84
00:04:48,600 --> 00:04:51,977
Anda mungkin mengharapkan 4 bagian khusus ini dikemas dengan baik bersama-sama, 

85
00:04:51,977 --> 00:04:54,975
mungkin di akhir atau semacamnya, tetapi seperti yang akan Anda lihat, 

86
00:04:54,975 --> 00:04:58,733
menempatkannya pada posisi pangkat 2 memungkinkan untuk menghasilkan sesuatu yang sangat 

87
00:04:58,733 --> 00:04:59,620
elegan pada akhirnya.

88
00:05:00,200 --> 00:05:01,724
Ini juga mungkin memberi Anda sedikit petunjuk 

89
00:05:01,724 --> 00:05:03,540
tentang bagaimana skala ini untuk blok yang lebih besar.

90
00:05:04,900 --> 00:05:09,178
Secara teknis juga hanya berisi 11 bit data, Anda akan menemukan ada sedikit perbedaan 

91
00:05:09,178 --> 00:05:13,260
pada apa yang terjadi di posisi 0, tapi jangan khawatir tentang itu untuk saat ini.

92
00:05:14,140 --> 00:05:17,688
Seperti algoritma koreksi kesalahan lainnya, ini akan melibatkan dua pemain, 

93
00:05:17,688 --> 00:05:20,683
pengirim yang bertanggung jawab untuk mengatur 4 bit khusus ini, 

94
00:05:20,683 --> 00:05:24,186
dan penerima yang bertanggung jawab untuk melakukan semacam pemeriksaan dan 

95
00:05:24,186 --> 00:05:25,200
memperbaiki kesalahan.

96
00:05:25,200 --> 00:05:28,423
Tentu saja, kata pengirim dan penerima sebenarnya mengacu pada mesin atau 

97
00:05:28,423 --> 00:05:30,601
perangkat lunak yang melakukan semua pemeriksaan, 

98
00:05:30,601 --> 00:05:33,128
dan gagasan tentang pesan memiliki arti yang sangat luas, 

99
00:05:33,128 --> 00:05:34,740
termasuk hal-hal seperti penyimpanan.

100
00:05:35,340 --> 00:05:39,767
Lagi pula, menyimpan data sama saja dengan mengirim pesan dari masa lalu ke masa depan, 

101
00:05:39,767 --> 00:05:41,680
bukan dari satu tempat ke tempat lain.

102
00:05:42,560 --> 00:05:45,608
Jadi begitulah pengaturannya, tapi sebelum kita mendalami lebih dalam, 

103
00:05:45,608 --> 00:05:48,957
kita perlu membicarakan tentang ide terkait yang masih segar di benak Hamming 

104
00:05:48,957 --> 00:05:52,435
pada saat penemuannya, sebuah metode yang memungkinkan Anda mendeteksi kesalahan 

105
00:05:52,435 --> 00:05:56,300
bit apa pun, namun tidak memperbaikinya, dikenal dalam bisnis sebagai pemeriksaan paritas.

106
00:05:56,880 --> 00:06:00,209
Untuk pemeriksaan paritas, kami memisahkan hanya satu bit yang menjadi 

107
00:06:00,209 --> 00:06:03,820
tanggung jawab pengirim untuk disetel, dan sisanya bebas untuk membawa pesan.

108
00:06:04,880 --> 00:06:07,990
Satu-satunya tugas bit khusus ini adalah memastikan 

109
00:06:07,990 --> 00:06:11,280
bahwa jumlah total 1 dalam pesan adalah bilangan genap.

110
00:06:12,080 --> 00:06:15,564
Jadi misalnya sekarang, jumlah total 1 itu adalah 7, itu ganjil, 

111
00:06:15,564 --> 00:06:19,960
jadi pengirim perlu membalik bit khusus itu menjadi 1, sehingga hitungannya genap.

112
00:06:20,800 --> 00:06:23,830
Namun jika blok telah dimulai dengan bilangan genap 1, 

113
00:06:23,830 --> 00:06:26,420
maka bit khusus ini akan tetap pada bilangan 0.

114
00:06:27,340 --> 00:06:30,435
Ini cukup sederhana, tampak sederhana, namun merupakan cara 

115
00:06:30,435 --> 00:06:33,684
yang sangat elegan untuk menyaring gagasan perubahan di bagian 

116
00:06:33,684 --> 00:06:36,780
mana pun dalam pesan agar tercermin dalam sedikit informasi.

117
00:06:37,500 --> 00:06:42,861
Perhatikan jika ada bagian dari pesan ini yang dibalik, baik dari 0 ke 1 atau 1 ke 0, 

118
00:06:42,861 --> 00:06:46,540
ini akan mengubah jumlah total 1 dari genap menjadi ganjil.

119
00:06:47,980 --> 00:06:50,454
Jadi jika Anda adalah penerimanya, Anda melihat pesan ini, 

120
00:06:50,454 --> 00:06:53,516
dan Anda melihat angka 1 yang ganjil, Anda dapat mengetahui dengan pasti 

121
00:06:53,516 --> 00:06:56,537
bahwa telah terjadi kesalahan, meskipun Anda mungkin tidak tahu di mana 

122
00:06:56,537 --> 00:06:57,460
kesalahan itu terjadi.

123
00:06:58,500 --> 00:07:01,042
Dalam jargon, apakah sekelompok bit memiliki jumlah 

124
00:07:01,042 --> 00:07:03,340
1 genap atau ganjil dikenal sebagai paritasnya.

125
00:07:04,860 --> 00:07:07,908
Anda juga dapat menggunakan angka dan mengatakan paritasnya adalah 0 atau 1, 

126
00:07:07,908 --> 00:07:10,720
yang biasanya lebih berguna setelah Anda mulai menghitung ide tersebut.

127
00:07:11,220 --> 00:07:15,520
Dan bit khusus yang digunakan pengirim untuk mengontrol paritas disebut bit paritas.

128
00:07:17,560 --> 00:07:21,202
Dan sebenarnya harus jelas, jika penerima melihat paritas ganjil, 

129
00:07:21,202 --> 00:07:25,231
bukan berarti hanya ada satu kesalahan, mungkin ada 3 kesalahan, atau 5, 

130
00:07:25,231 --> 00:07:29,260
atau angka ganjil lainnya, tapi mereka bisa tahu pasti bahwa itu bukan 0.

131
00:07:29,980 --> 00:07:33,597
Di sisi lain, jika terdapat 2 kesalahan, atau jumlah kesalahan berapapun, 

132
00:07:33,597 --> 00:07:36,188
jumlah akhir dari 1 detik tersebut akan tetap genap, 

133
00:07:36,188 --> 00:07:40,148
sehingga penerima tidak dapat yakin sepenuhnya bahwa jumlah kesalahan yang genap 

134
00:07:40,148 --> 00:07:42,300
berarti pesan tersebut bebas dari kesalahan.

135
00:07:42,840 --> 00:07:45,960
Anda mungkin mengeluh bahwa pesan yang menjadi kacau hanya 

136
00:07:45,960 --> 00:07:49,080
dengan pembalikan 2 bit cukup lemah, dan Anda memang benar.

137
00:07:49,700 --> 00:07:52,698
Namun perlu diingat, tidak ada metode deteksi atau koreksi 

138
00:07:52,698 --> 00:07:55,799
kesalahan yang dapat memberi Anda keyakinan 100% bahwa pesan 

139
00:07:55,799 --> 00:07:58,900
yang Anda terima adalah pesan yang dimaksudkan oleh pengirim.

140
00:07:59,580 --> 00:08:02,510
Lagi pula, gangguan acak yang cukup selalu dapat mengubah satu 

141
00:08:02,510 --> 00:08:05,440
pesan valid menjadi pesan valid lainnya hanya secara kebetulan.

142
00:08:06,240 --> 00:08:10,733
Sebaliknya, tujuannya adalah untuk menghasilkan skema yang kuat hingga jumlah kesalahan 

143
00:08:10,733 --> 00:08:15,175
maksimum tertentu, atau mungkin untuk mengurangi kemungkinan kesalahan positif seperti 

144
00:08:15,175 --> 00:08:15,380
ini.

145
00:08:16,260 --> 00:08:19,827
Pemeriksaan paritas sendiri cukup lemah, namun dengan menyaring gagasan 

146
00:08:19,827 --> 00:08:22,552
perubahan dari seluruh pesan menjadi satu bagian saja, 

147
00:08:22,552 --> 00:08:26,218
apa yang mereka berikan kepada kita adalah landasan yang kuat untuk skema 

148
00:08:26,218 --> 00:08:27,160
yang lebih canggih.

149
00:08:27,940 --> 00:08:31,286
Misalnya, saat Hamming sedang mencari cara untuk mengidentifikasi di mana 

150
00:08:31,286 --> 00:08:33,728
kesalahan terjadi, bukan hanya kesalahan itu terjadi, 

151
00:08:33,728 --> 00:08:37,347
wawasan utamanya adalah jika Anda menerapkan beberapa pemeriksaan paritas bukan 

152
00:08:37,347 --> 00:08:41,146
pada keseluruhan pesan, namun pada subkumpulan tertentu yang dipilih dengan cermat, 

153
00:08:41,146 --> 00:08:44,628
Anda dapat bertanya serangkaian pertanyaan yang lebih halus yang menjelaskan 

154
00:08:44,628 --> 00:08:45,940
lokasi kesalahan bit tunggal.

155
00:08:46,680 --> 00:08:49,733
Perasaan keseluruhannya seperti memainkan permainan 20 pertanyaan, 

156
00:08:49,733 --> 00:08:53,380
menanyakan pertanyaan ya atau tidak yang memotong ruang kemungkinan menjadi dua.

157
00:08:54,160 --> 00:08:58,040
Sebagai contoh, katakanlah kita melakukan pemeriksaan paritas hanya pada 8 bit ini, 

158
00:08:58,040 --> 00:08:59,380
semua posisi bernomor ganjil.

159
00:09:00,100 --> 00:09:04,029
Kemudian jika terdeteksi adanya error, maka akan memberikan sedikit informasi lebih 

160
00:09:04,029 --> 00:09:08,240
kepada penerima mengenai di mana tepatnya error tersebut berada, yaitu pada posisi ganjil.

161
00:09:08,940 --> 00:09:12,384
Jika tidak ada kesalahan yang terdeteksi di antara 8 bit tersebut, 

162
00:09:12,384 --> 00:09:16,240
itu berarti tidak ada kesalahan sama sekali, atau berada pada posisi genap.

163
00:09:17,180 --> 00:09:20,690
Anda mungkin berpikir bahwa membatasi pemeriksaan paritas hingga setengah bit membuatnya 

164
00:09:20,690 --> 00:09:24,004
kurang efektif, namun jika dilakukan bersamaan dengan pemeriksaan lain yang dipilih 

165
00:09:24,004 --> 00:09:27,200
dengan baik, hal ini secara berlawanan memberi kita sesuatu yang jauh lebih kuat.

166
00:09:29,240 --> 00:09:32,156
Untuk benar-benar menyiapkan pemeriksaan paritas tersebut, ingat, 

167
00:09:32,156 --> 00:09:35,736
diperlukan pengalokasian beberapa bit khusus yang memiliki kontrol untuk paritas 

168
00:09:35,736 --> 00:09:36,620
grup penuh tersebut.

169
00:09:37,480 --> 00:09:39,180
Disini kita pilih saja posisi 1.

170
00:09:39,720 --> 00:09:42,580
Pada contoh yang ditunjukkan, paritas 8 bit ini saat ini ganjil, 

171
00:09:42,580 --> 00:09:45,792
sehingga pengirim bertanggung jawab untuk mengubah bit paritas tersebut, 

172
00:09:45,792 --> 00:09:46,980
dan sekarang menjadi genap.

173
00:09:47,940 --> 00:09:50,680
Ini hanya 1 dari 4 pemeriksaan paritas yang akan kami lakukan.

174
00:09:50,920 --> 00:09:53,841
Pemeriksaan kedua adalah di antara 8 bit di bagian kanan grid, 

175
00:09:53,841 --> 00:09:56,300
setidaknya seperti yang telah kita gambarkan di sini.

176
00:09:56,680 --> 00:09:59,978
Kali ini kita mungkin menggunakan posisi 2 sebagai bit paritas, 

177
00:09:59,978 --> 00:10:02,967
jadi 8 bit ini sudah memiliki paritas genap, dan pengirim 

178
00:10:02,967 --> 00:10:06,060
akan merasa senang membiarkan bit nomor 2 itu tidak berubah.

179
00:10:07,020 --> 00:10:09,792
Kemudian di sisi lain, jika penerima memeriksa paritas grup ini 

180
00:10:09,792 --> 00:10:12,781
dan mereka menemukan bahwa paritasnya ganjil, mereka akan mengetahui 

181
00:10:12,781 --> 00:10:15,380
bahwa kesalahannya ada di antara 8 bit di sebelah kanan ini.

182
00:10:15,820 --> 00:10:20,580
Kalau tidak, berarti tidak ada kesalahan, atau kesalahannya ada di bagian kiri.

183
00:10:21,120 --> 00:10:23,751
Atau saya kira mungkin ada dua kesalahan, tapi untuk saat ini kita 

184
00:10:23,751 --> 00:10:26,500
akan berasumsi bahwa paling banyak ada satu kesalahan di seluruh blok.

185
00:10:26,940 --> 00:10:28,740
Segala sesuatunya rusak total karena lebih dari itu.

186
00:10:29,160 --> 00:10:30,769
Di sini, sebelum kita melihat dua pemeriksaan berikutnya, 

187
00:10:30,769 --> 00:10:32,657
luangkan waktu sejenak untuk memikirkan tentang apa yang dapat kita 

188
00:10:32,657 --> 00:10:35,100
lakukan dari dua pemeriksaan pertama ketika Anda mempertimbangkan keduanya bersama-sama.

189
00:10:35,800 --> 00:10:39,660
Katakanlah Anda mendeteksi kesalahan di antara kolom ganjil, dan di paruh kanan.

190
00:10:40,200 --> 00:10:43,040
Ini berarti kesalahannya ada di kolom terakhir.

191
00:10:43,820 --> 00:10:47,201
Jika tidak ada kesalahan pada kolom ganjil namun ada satu kesalahan pada separuh kanan, 

192
00:10:47,201 --> 00:10:49,700
berarti kesalahan tersebut berada pada kolom kedua dari terakhir.

193
00:10:50,440 --> 00:10:54,417
Begitu pula jika ada kesalahan di kolom ganjil tetapi tidak di separuh kanan, 

194
00:10:54,417 --> 00:10:56,560
Anda tahu kesalahannya ada di kolom kedua.

195
00:10:56,560 --> 00:10:59,896
Dan jika tidak satu pun dari kedua pemeriksaan paritas tersebut yang mendeteksi apa pun, 

196
00:10:59,896 --> 00:11:03,120
berarti satu-satunya tempat terjadinya kesalahan adalah di kolom paling kiri tersebut.

197
00:11:03,340 --> 00:11:06,120
Tapi itu juga mungkin berarti tidak ada kesalahan sama sekali.

198
00:11:06,300 --> 00:11:08,446
Ini merupakan cara yang agak rumit untuk mengatakan 

199
00:11:08,446 --> 00:11:10,840
bahwa dua pemeriksaan paritas mari kita tentukan kolomnya.

200
00:11:11,480 --> 00:11:13,640
Dari sini, Anda mungkin bisa menebak berikut ini.

201
00:11:13,800 --> 00:11:16,140
Pada dasarnya kami melakukan hal yang sama tetapi untuk barisnya.

202
00:11:16,440 --> 00:11:20,900
Akan ada pemeriksaan paritas pada baris ganjil, menggunakan posisi 4 sebagai bit paritas.

203
00:11:21,380 --> 00:11:24,464
Jadi dalam contoh ini grup tersebut sudah memiliki paritas genap, 

204
00:11:24,464 --> 00:11:25,820
jadi bit 4 akan disetel ke 0.

205
00:11:26,560 --> 00:11:29,581
Dan terakhir ada pemeriksaan paritas pada dua baris terbawah, 

206
00:11:29,581 --> 00:11:31,580
menggunakan posisi 8 sebagai bit paritas.

207
00:11:32,120 --> 00:11:34,450
Dalam hal ini, sepertinya pengirim perlu mengaktifkan bit 8 

208
00:11:34,450 --> 00:11:36,820
tersebut untuk memberikan keseimbangan yang merata pada grup.

209
00:11:37,700 --> 00:11:40,006
Sama seperti dua pemeriksaan pertama yang memungkinkan kita menentukan kolom, 

210
00:11:40,006 --> 00:11:41,840
dua pemeriksaan berikutnya memungkinkan Anda menentukan baris.

211
00:11:42,880 --> 00:11:47,540
Sebagai contoh, bayangkan selama transmisi terjadi kesalahan pada, katakanlah, posisi 3.

212
00:11:48,180 --> 00:11:51,976
Ini mempengaruhi kelompok paritas pertama, dan juga mempengaruhi kelompok paritas kedua, 

213
00:11:51,976 --> 00:11:55,560
sehingga penerima mengetahui bahwa ada kesalahan di suatu tempat di kolom kanan itu.

214
00:11:56,100 --> 00:12:00,540
Tapi itu tidak mempengaruhi kelompok ketiga, dan tidak mempengaruhi kelompok keempat.

215
00:12:01,240 --> 00:12:04,316
Dan itu memungkinkan penerima menentukan kesalahan hingga baris pertama, 

216
00:12:04,316 --> 00:12:07,520
yang berarti posisi 3, sehingga mereka dapat memperbaiki kesalahan tersebut.

217
00:12:08,580 --> 00:12:11,477
Anda mungkin senang meluangkan waktu sejenak untuk meyakinkan diri 

218
00:12:11,477 --> 00:12:14,159
sendiri bahwa jawaban atas keempat pertanyaan ini akan selalu 

219
00:12:14,159 --> 00:12:17,100
memungkinkan Anda menentukan lokasi tertentu, di mana pun lokasinya.

220
00:12:17,720 --> 00:12:20,305
Faktanya, orang yang cerdik di antara Anda mungkin menyadari 

221
00:12:20,305 --> 00:12:23,060
hubungan antara pertanyaan-pertanyaan ini dan penghitungan biner.

222
00:12:23,500 --> 00:12:25,864
Dan jika Anda melakukannya, sekali lagi izinkan saya menekankan, 

223
00:12:25,864 --> 00:12:28,920
berhenti sejenak, cobalah sendiri untuk menarik hubungannya sebelum saya merusaknya.

224
00:12:30,500 --> 00:12:34,947
Jika Anda bertanya-tanya apa yang terjadi jika bit paritas itu sendiri terpengaruh, 

225
00:12:34,947 --> 00:12:36,060
Anda bisa mencobanya.

226
00:12:36,440 --> 00:12:40,288
Luangkan waktu sejenak untuk memikirkan bagaimana kesalahan apa pun di antara empat bit 

227
00:12:40,288 --> 00:12:44,180
khusus ini akan dilacak seperti yang lainnya, dengan kelompok empat pertanyaan yang sama.

228
00:12:47,060 --> 00:12:50,080
Hal ini tidak menjadi masalah, karena pada akhirnya yang kita inginkan 

229
00:12:50,080 --> 00:12:53,100
adalah melindungi bit pesan, bit koreksi kesalahan akan terus berjalan.

230
00:12:53,600 --> 00:12:55,664
Namun melindungi bagian-bagian tersebut juga merupakan sesuatu yang 

231
00:12:55,664 --> 00:12:57,820
secara alami tidak termasuk dalam skema dan merupakan produk sampingan.

232
00:12:59,200 --> 00:13:01,760
Anda mungkin juga senang mengantisipasi bagaimana skalanya.

233
00:13:02,300 --> 00:13:05,340
Jika kita menggunakan blok berukuran 256 bit, misalnya, 

234
00:13:05,340 --> 00:13:08,924
untuk menentukan lokasi, Anda hanya memerlukan delapan pertanyaan 

235
00:13:08,924 --> 00:13:12,780
ya atau tidak untuk melakukan pencarian biner hingga ke titik tertentu.

236
00:13:15,640 --> 00:13:18,091
Dan ingat, setiap pertanyaan hanya memerlukan penyerahan 

237
00:13:18,091 --> 00:13:20,500
satu bit untuk mengatur pemeriksaan paritas yang sesuai.

238
00:13:23,160 --> 00:13:26,330
Beberapa dari Anda mungkin sudah melihatnya, tetapi nanti kita akan membahas tentang cara 

239
00:13:26,330 --> 00:13:29,360
sistematis untuk mengetahui pertanyaan-pertanyaan ini hanya dalam satu atau dua menit.

240
00:13:29,880 --> 00:13:31,863
Semoga sketsa ini cukup untuk mengapresiasi efisiensi 

241
00:13:31,863 --> 00:13:33,260
dari apa yang kami kembangkan di sini.

242
00:13:33,260 --> 00:13:36,462
Hal pertama, kecuali delapan bit paritas yang disorot, 

243
00:13:36,462 --> 00:13:40,713
dapat berupa apa pun yang Anda inginkan, membawa pesan atau data apa pun 

244
00:13:40,713 --> 00:13:41,820
yang Anda inginkan.

245
00:13:41,820 --> 00:13:45,694
8 bit tersebut mubazir dalam arti bahwa mereka sepenuhnya ditentukan oleh sisa pesan, 

246
00:13:45,694 --> 00:13:48,488
namun ini adalah cara yang jauh lebih cerdas daripada sekadar 

247
00:13:48,488 --> 00:13:50,020
menyalin pesan secara keseluruhan.

248
00:13:53,600 --> 00:13:56,032
Dan tetap saja, dengan sedikit menyerah, Anda akan dapat 

249
00:13:56,032 --> 00:13:58,380
mengidentifikasi dan memperbaiki kesalahan bit apa pun.

250
00:13:59,200 --> 00:14:00,400
Hampir saja.

251
00:14:00,960 --> 00:14:04,715
Oke, jadi satu-satunya masalah di sini adalah jika tidak satu pun dari empat 

252
00:14:04,715 --> 00:14:07,007
pemeriksaan paritas yang mendeteksi kesalahan, 

253
00:14:07,007 --> 00:14:10,958
artinya subset 8 bit yang dipilih secara khusus semuanya memiliki paritas genap, 

254
00:14:10,958 --> 00:14:15,055
seperti yang diinginkan pengirim, maka itu berarti tidak ada kesalahan sama sekali. 

255
00:14:15,055 --> 00:14:16,860
, atau mempersempit kita ke posisi 0.

256
00:14:17,740 --> 00:14:20,164
Anda tahu, dengan empat pertanyaan ya atau tidak, 

257
00:14:20,164 --> 00:14:23,413
kami memiliki 16 kemungkinan hasil untuk pemeriksaan paritas kami, 

258
00:14:23,413 --> 00:14:27,050
dan pada awalnya itu terasa sempurna untuk menunjukkan dengan tepat 1 dari 

259
00:14:27,050 --> 00:14:30,542
16 posisi di blok, tetapi Anda juga perlu mengomunikasikan hasil ke-17, 

260
00:14:30,542 --> 00:14:31,900
tidak ada kesalahan kondisi.

261
00:14:33,020 --> 00:14:37,300
Solusinya di sini sebenarnya cukup sederhana, lupakan saja bit ke-0 itu sepenuhnya.

262
00:14:37,840 --> 00:14:41,935
Jadi ketika kita melakukan empat pemeriksaan paritas dan kita melihat semuanya genap, 

263
00:14:41,935 --> 00:14:43,460
itu berarti tidak ada kesalahan.

264
00:14:44,240 --> 00:14:48,787
Artinya, daripada bekerja dengan blok 16-bit, kami bekerja dengan blok 15-bit, 

265
00:14:48,787 --> 00:14:53,220
di mana 11 bit bebas untuk membawa pesan dan 4 di antaranya untuk redundansi.

266
00:14:53,780 --> 00:14:56,688
Dan dengan itu, kami sekarang memiliki apa yang oleh 

267
00:14:56,688 --> 00:15:00,200
orang-orang dalam bisnis ini disebut sebagai kode 15-11 Hamming.

268
00:15:00,460 --> 00:15:03,474
Meskipun demikian, menyenangkan untuk memiliki ukuran blok dengan pangkat bersih 2, 

269
00:15:03,474 --> 00:15:05,950
dan ada cara cerdas agar kita dapat mempertahankan bit ke-0 tersebut 

270
00:15:05,950 --> 00:15:08,140
dan membuatnya melakukan sedikit pekerjaan ekstra untuk kita.

271
00:15:08,700 --> 00:15:11,508
Jika kita menggunakannya sebagai bit paritas di seluruh blok, 

272
00:15:11,508 --> 00:15:15,540
ini memungkinkan kita mendeteksi, meskipun kita tidak dapat memperbaiki, kesalahan 2-bit.

273
00:15:16,160 --> 00:15:16,820
Begini cara kerjanya.

274
00:15:17,180 --> 00:15:19,954
Setelah menyetel keempat bit koreksi kesalahan khusus tersebut, 

275
00:15:19,954 --> 00:15:23,422
kami menyetel bit ke-0 tersebut sehingga paritas dari blok penuh menjadi genap, 

276
00:15:23,422 --> 00:15:24,940
seperti pemeriksaan paritas normal.

277
00:15:25,700 --> 00:15:29,672
Sekarang, jika ada kesalahan bit tunggal, maka paritas blok penuh akan berubah menjadi 

278
00:15:29,672 --> 00:15:33,600
ganjil, namun kita akan tetap menangkapnya berkat empat pemeriksaan koreksi kesalahan.

279
00:15:34,160 --> 00:15:38,255
Namun, jika ada dua kesalahan, maka keseluruhan paritas akan kembali menjadi genap, 

280
00:15:38,255 --> 00:15:41,864
namun penerima masih akan melihat bahwa setidaknya ada beberapa kesalahan 

281
00:15:41,864 --> 00:15:45,180
karena apa yang terjadi dengan keempat pemeriksaan paritas tersebut.

282
00:15:45,180 --> 00:15:47,914
Jadi, jika mereka melihat adanya paritas yang genap secara keseluruhan, 

283
00:15:47,914 --> 00:15:50,307
namun terjadi sesuatu yang bukan nol pada pemeriksaan lainnya, 

284
00:15:50,307 --> 00:15:52,700
hal ini memberi tahu mereka bahwa setidaknya ada dua kesalahan.

285
00:15:53,520 --> 00:15:54,000
Bukankah itu pintar?

286
00:15:54,300 --> 00:15:57,249
Meskipun kami tidak dapat memperbaiki kesalahan 2-bit tersebut, 

287
00:15:57,249 --> 00:16:01,260
hanya dengan mengembalikan satu bit ke-0 yang mengganggu itu, kami dapat mendeteksinya.

288
00:16:02,260 --> 00:16:05,220
Ini cukup standar, dikenal sebagai kode Hamming yang diperluas.

289
00:16:06,540 --> 00:16:10,978
Secara teknis, Anda sekarang memiliki gambaran lengkap tentang fungsi kode Hamming, 

290
00:16:10,978 --> 00:16:12,880
setidaknya untuk contoh blok 16-bit.

291
00:16:12,880 --> 00:16:15,632
Namun saya pikir Anda akan merasa lebih puas jika memeriksa 

292
00:16:15,632 --> 00:16:18,521
pemahaman Anda dan memantapkan semuanya hingga saat ini dengan 

293
00:16:18,521 --> 00:16:21,320
melakukan sendiri satu contoh lengkap dari awal hingga akhir.

294
00:16:22,080 --> 00:16:24,300
Saya akan membahasnya bersama Anda sehingga Anda dapat memeriksanya sendiri.

295
00:16:25,120 --> 00:16:28,408
Untuk menyiapkan pesan, apakah itu pesan literal yang Anda terjemahkan 

296
00:16:28,408 --> 00:16:31,973
melalui ruang atau beberapa data yang ingin Anda simpan dari waktu ke waktu, 

297
00:16:31,973 --> 00:16:34,660
langkah pertama adalah membaginya menjadi potongan 11-bit.

298
00:16:35,580 --> 00:16:39,760
Setiap potongan akan dikemas ke dalam blok 16-bit yang tahan kesalahan.

299
00:16:39,760 --> 00:16:43,220
Jadi mari kita ambil yang ini sebagai contoh dan kerjakan.

300
00:16:43,740 --> 00:16:44,740
Silakan, lakukanlah!

301
00:16:44,740 --> 00:16:47,020
Mari kita berhenti sejenak dan mencoba menyusun blok ini.

302
00:16:52,720 --> 00:16:53,680
Oke, kamu siap?

303
00:16:54,240 --> 00:16:58,491
Ingat, posisi 0 dan pangkat 2 lainnya dicadangkan untuk tugas koreksi kesalahan, 

304
00:16:58,491 --> 00:17:02,427
jadi Anda mulai dengan menempatkan bit pesan di semua tempat yang tersisa, 

305
00:17:02,427 --> 00:17:03,320
secara berurutan.

306
00:17:05,339 --> 00:17:09,101
Anda memerlukan grup ini untuk memiliki paritas genap, yang sudah dimilikinya, 

307
00:17:09,101 --> 00:17:12,339
jadi Anda harus menyetel bit paritas tersebut di posisi 1 menjadi 0.

308
00:17:13,020 --> 00:17:15,374
Grup berikutnya dimulai dengan paritas ganjil, 

309
00:17:15,374 --> 00:17:17,880
jadi Anda harus menyetel bit paritasnya menjadi 1.

310
00:17:19,160 --> 00:17:21,482
Grup setelah itu dimulai dengan paritas ganjil, 

311
00:17:21,482 --> 00:17:24,240
jadi sekali lagi Anda harus menyetel bit paritasnya ke 1.

312
00:17:24,780 --> 00:17:27,240
Dan grup terakhir juga memiliki paritas ganjil, 

313
00:17:27,240 --> 00:17:30,060
artinya bit tersebut kita atur pada posisi 8 menjadi 1.

314
00:17:31,300 --> 00:17:35,749
Dan sebagai langkah terakhir, blok penuh sekarang memiliki paritas genap, 

315
00:17:35,749 --> 00:17:40,320
artinya Anda dapat mengatur bit nomor 0, bit paritas keseluruhan, menjadi 0.

316
00:17:41,340 --> 00:17:44,666
Jadi ketika blok ini dilepaskan, paritas dari empat himpunan bagian 

317
00:17:44,666 --> 00:17:48,140
khusus dan blok secara keseluruhan semuanya akan menjadi genap, atau 0.

318
00:17:48,820 --> 00:17:52,180
Sebagai bagian kedua dari latihan ini, biarkan Anda berperan sebagai penerima.

319
00:17:53,480 --> 00:17:56,280
Tentu saja itu berarti Anda belum mengetahui apa pesan ini, 

320
00:17:56,280 --> 00:17:59,780
mungkin sebagian dari Anda sudah menghafalnya, tapi anggap saja Anda belum.

321
00:18:00,020 --> 00:18:04,225
Apa yang akan saya lakukan adalah mengubah 0, 1, atau 2 bit di blok itu, 

322
00:18:04,225 --> 00:18:07,740
dan kemudian meminta Anda mencari tahu apa yang saya lakukan.

323
00:18:08,260 --> 00:18:10,810
Jadi sekali lagi, jeda dan coba kerjakan.

324
00:18:18,790 --> 00:18:23,096
Oke, jadi Anda sebagai penerima sekarang periksa grup paritas pertama dan Anda dapat 

325
00:18:23,096 --> 00:18:27,606
melihat bahwa grup tersebut genap, jadi kesalahan apa pun yang ada pasti berada di kolom 

326
00:18:27,606 --> 00:18:27,910
genap.

327
00:18:29,690 --> 00:18:31,955
Pemeriksaan berikutnya memberi kita angka ganjil, 

328
00:18:31,955 --> 00:18:34,764
memberi tahu kita berdua bahwa setidaknya ada satu kesalahan, 

329
00:18:34,764 --> 00:18:37,030
dan mempersempit kita ke dalam kolom spesifik ini.

330
00:18:38,550 --> 00:18:41,790
Pemeriksaan ketiga bersifat genap, mengurangi kemungkinan lebih jauh lagi.

331
00:18:42,650 --> 00:18:44,638
Dan pemeriksaan paritas terakhir adalah ganjil, 

332
00:18:44,638 --> 00:18:47,289
memberi tahu kita bahwa ada kesalahan di suatu tempat di bawah, 

333
00:18:47,289 --> 00:18:49,650
yang sekarang kita lihat pasti berada di posisi nomor 10.

334
00:18:51,490 --> 00:18:54,599
Terlebih lagi, paritas seluruh blok ganjil, memberi 

335
00:18:54,599 --> 00:18:57,530
kita keyakinan bahwa ada satu flip dan bukan dua.

336
00:18:58,070 --> 00:18:59,970
Jika jumlahnya tiga atau lebih, semua taruhan dibatalkan.

337
00:19:01,310 --> 00:19:05,633
Setelah mengoreksi bit nomor 10 itu, mengeluarkan 11 bit yang tidak digunakan 

338
00:19:05,633 --> 00:19:09,180
untuk koreksi memberi kita segmen yang relevan dari pesan asli, 

339
00:19:09,180 --> 00:19:13,503
yang jika Anda memutar ulang dan membandingkannya memang persis dengan contoh 

340
00:19:13,503 --> 00:19:14,390
yang kita mulai.

341
00:19:15,710 --> 00:19:18,458
Dan sekarang setelah Anda mengetahui cara melakukan semua ini dengan tangan, 

342
00:19:18,458 --> 00:19:20,885
saya ingin menunjukkan kepada Anda bagaimana Anda dapat menjalankan 

343
00:19:20,885 --> 00:19:23,170
bagian inti dari semua logika ini dengan satu baris kode Python.

344
00:19:23,870 --> 00:19:27,406
Anda tahu, apa yang belum saya sampaikan kepada Anda adalah betapa elegannya 

345
00:19:27,406 --> 00:19:31,034
algoritma ini, betapa sederhananya membuat mesin menunjukkan posisi kesalahan, 

346
00:19:31,034 --> 00:19:35,167
bagaimana menskalakannya secara sistematis, dan bagaimana kita dapat membingkai semuanya. 

347
00:19:35,167 --> 00:19:38,750
ini sebagai satu operasi tunggal, bukan beberapa pemeriksaan paritas terpisah.

348
00:19:39,430 --> 00:19:41,310
Untuk memahami maksud saya, bergabunglah dengan saya di bagian 2.

