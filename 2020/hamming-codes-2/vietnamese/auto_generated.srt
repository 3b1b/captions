1
00:00:00,000 --> 00:00:02,560
Tôi cho rằng mọi người ở đây đều đến từ phần 1.

2
00:00:03,060 --> 00:00:06,725
Chúng ta đang nói về mã Hamming, một cách để tạo ra một khối dữ liệu trong 

3
00:00:06,725 --> 00:00:09,217
đó hầu hết các bit mang một thông điệp có ý nghĩa, 

4
00:00:09,217 --> 00:00:12,101
trong khi một số bit khác hoạt động như một loại dự phòng, 

5
00:00:12,101 --> 00:00:15,766
theo cách mà nếu bất kỳ bit nào bị đảo lộn, thì đó sẽ là một bit thông báo 

6
00:00:15,766 --> 00:00:18,161
hoặc bit dự phòng, bất kỳ thứ gì trong khối này, 

7
00:00:18,161 --> 00:00:21,240
bộ thu sẽ có thể xác định rằng đã xảy ra lỗi và cách khắc phục.

8
00:00:21,880 --> 00:00:24,462
Ý tưởng cơ bản được trình bày ở đó là cách sử dụng nhiều biện pháp 

9
00:00:24,462 --> 00:00:27,160
kiểm tra chẵn lẻ để tìm kiếm nhị phân theo cách của bạn để tìm ra lỗi.

10
00:00:28,980 --> 00:00:31,847
Trong video đó, mục tiêu là làm cho mã Hamming có 

11
00:00:31,847 --> 00:00:34,600
cảm giác thực tế và dễ khám phá lại nhất có thể.

12
00:00:35,180 --> 00:00:38,027
Nhưng khi bạn bắt đầu nghĩ đến việc thực sự triển khai điều này, 

13
00:00:38,027 --> 00:00:40,787
dù bằng phần mềm hay phần cứng, thì việc đóng khung đó thực sự 

14
00:00:40,787 --> 00:00:43,460
có thể đánh giá thấp mức độ tinh tế thực sự của những mã này.

15
00:00:43,920 --> 00:00:47,057
Bạn có thể nghĩ rằng mình cần phải viết một thuật toán theo dõi 

16
00:00:47,057 --> 00:00:51,028
tất cả các vị trí lỗi có thể xảy ra và cắt nhóm đó làm đôi sau mỗi lần kiểm tra, 

17
00:00:51,028 --> 00:00:53,480
nhưng thực tế thì cách này đơn giản hơn thế nhiều.

18
00:00:53,940 --> 00:00:57,368
Nếu bạn đọc to câu trả lời cho bốn phép kiểm tra tính chẵn lẻ mà ta đã 

19
00:00:57,368 --> 00:01:00,796
thực hiện trong video trước, tất cả đều là 1 và 0 thay vì có và không, 

20
00:01:00,796 --> 00:01:04,080
thì nó sẽ chỉ ra vị trí của lỗi ở dạng nhị phân theo đúng nghĩa đen.

21
00:01:04,780 --> 00:01:08,403
Ví dụ: số 7 trong hệ nhị phân trông giống như 0111, 

22
00:01:08,403 --> 00:01:11,260
về cơ bản nó có nghĩa là 4 cộng 2 cộng 1.

23
00:01:12,540 --> 00:01:15,606
Và hãy để ý xem vị trí số 7 nằm ở đâu, nó ảnh hưởng đến nhóm 

24
00:01:15,606 --> 00:01:18,220
đầu tiên trong số các nhóm ngang bằng của chúng ta, 

25
00:01:18,220 --> 00:01:21,740
nhóm thứ hai và nhóm thứ ba, nhưng không ảnh hưởng đến nhóm cuối cùng.

26
00:01:22,220 --> 00:01:24,853
Vì vậy, việc đọc kết quả của bốn lần kiểm tra đó 

27
00:01:24,853 --> 00:01:27,540
từ dưới lên trên thực sự sẽ chỉ ra vị trí của lỗi.

28
00:01:28,320 --> 00:01:31,952
Không có gì đặc biệt về ví dụ 7, nhìn chung nó hoạt động tốt và điều này làm 

29
00:01:31,952 --> 00:01:35,820
cho logic triển khai toàn bộ sơ đồ trong phần cứng trở nên đơn giản đến kinh ngạc.

30
00:01:37,240 --> 00:01:40,892
Bây giờ nếu bạn muốn biết tại sao điều kỳ diệu này lại xảy ra, 

31
00:01:40,892 --> 00:01:44,197
hãy lấy 16 nhãn chỉ mục này cho các vị trí của chúng ta, 

32
00:01:44,197 --> 00:01:48,604
nhưng thay vì viết chúng ở cơ số 10, hãy viết tất cả chúng ở dạng nhị phân, 

33
00:01:48,604 --> 00:01:49,880
chạy từ 0000 đến 1111.

34
00:01:50,560 --> 00:01:54,020
Khi chúng ta đặt các ký hiệu nhị phân này trở lại hộp của chúng, 

35
00:01:54,020 --> 00:01:57,800
hãy để tôi nhấn mạnh rằng chúng khác biệt với dữ liệu thực sự được gửi.

36
00:01:58,320 --> 00:02:00,910
Chúng không gì khác hơn là một ký hiệu khái niệm để 

37
00:02:00,910 --> 00:02:03,500
giúp bạn và tôi hiểu bốn nhóm ngang bằng đến từ đâu.

38
00:02:04,140 --> 00:02:08,279
Sự tinh tế của mọi thứ mà chúng ta đang xét được mô tả ở dạng nhị phân 

39
00:02:08,279 --> 00:02:12,360
có thể được giảm bớt sự nhầm lẫn khi chúng đang ở trong dạng nhị phân.

40
00:02:13,020 --> 00:02:14,120
Dù vậy, nó đáng giá.

41
00:02:14,800 --> 00:02:19,772
Hãy tập trung sự chú ý của bạn vào phần cuối cùng của tất cả các nhãn này, 

42
00:02:19,772 --> 00:02:23,220
sau đó đánh dấu các vị trí mà bit cuối cùng đó là 1.

43
00:02:24,240 --> 00:02:28,318
Những gì chúng ta nhận được là nhóm đầu tiên trong số bốn nhóm chẵn lẻ, 

44
00:02:28,318 --> 00:02:32,057
có nghĩa là bạn có thể hiểu lần kiểm tra đầu tiên đó là hỏi, này, 

45
00:02:32,057 --> 00:02:35,740
nếu có lỗi, bit cuối cùng ở vị trí của lỗi đó có phải là 1 không?

46
00:02:38,200 --> 00:02:42,104
Tương tự, nếu bạn tập trung vào bit thứ hai đến bit cuối cùng và đánh dấu tất 

47
00:02:42,104 --> 00:02:46,160
cả các vị trí có số 1, bạn sẽ có được nhóm chẵn lẻ thứ hai từ sơ đồ của chúng ta.

48
00:02:46,740 --> 00:02:50,401
Nói cách khác, lần kiểm tra thứ hai đó đang hỏi, này, tôi lại nói, 

49
00:02:50,401 --> 00:02:54,500
nếu có lỗi, bit thứ hai đến bit cuối cùng của vị trí đó có phải là 1 không?

50
00:02:55,760 --> 00:02:56,900
Và như thế.

51
00:02:57,220 --> 00:03:02,916
Kiểm tra tính chẵn lẻ thứ ba bao gồm mọi vị trí có bit thứ ba đến bit cuối cùng được bật 

52
00:03:02,916 --> 00:03:06,116
và vị trí cuối cùng bao gồm tám vị trí cuối cùng, 

53
00:03:06,116 --> 00:03:08,740
những vị trí có bit thứ tự cao nhất là 1.

54
00:03:09,740 --> 00:03:13,817
Mọi điều chúng ta đã làm trước đó cũng giống như việc trả lời bốn câu hỏi này, 

55
00:03:13,817 --> 00:03:17,740
những câu hỏi này cũng giống như việc đánh vần một vị trí trong hệ nhị phân.

56
00:03:19,620 --> 00:03:21,480
Tôi hy vọng điều này làm cho hai điều rõ ràng hơn.

57
00:03:22,040 --> 00:03:24,189
Đầu tiên là làm thế nào để khái quát hóa một cách có 

58
00:03:24,189 --> 00:03:26,460
hệ thống các kích thước khối có lũy thừa lớn hơn bằng 2.

59
00:03:26,960 --> 00:03:31,734
Nếu cần nhiều bit hơn để mô tả từng vị trí, chẳng hạn như sáu bit để mô tả 64 điểm, 

60
00:03:31,734 --> 00:03:36,680
thì mỗi bit đó sẽ cung cấp cho bạn một trong các nhóm chẵn lẻ mà chúng ta cần kiểm tra.

61
00:03:38,400 --> 00:03:40,832
Những ai đã xem trò chơi xếp hình trên bàn cờ mà tôi làm 

62
00:03:40,832 --> 00:03:43,180
với Matt Parker có thể thấy điều này cực kỳ quen thuộc.

63
00:03:43,660 --> 00:03:46,245
Đó là logic cốt lõi tương tự, nhưng giải quyết một 

64
00:03:46,245 --> 00:03:48,780
vấn đề khác và được áp dụng cho bàn cờ 64 ô vuông.

65
00:03:49,880 --> 00:03:53,572
Điều thứ hai tôi hy vọng điều này làm rõ là tại sao các bit chẵn lẻ 

66
00:03:53,572 --> 00:03:57,320
của chúng ta lại nằm ở các vị trí lũy thừa của 2, ví dụ 1, 2, 4 và 8.

67
00:03:58,000 --> 00:04:03,000
Đây là những vị trí mà biểu diễn nhị phân chỉ được bật một bit.

68
00:04:03,600 --> 00:04:06,626
Điều đó có nghĩa là mỗi bit chẵn lẻ đó nằm bên 

69
00:04:06,626 --> 00:04:09,460
trong một và chỉ một trong bốn nhóm chẵn lẻ.

70
00:04:12,040 --> 00:04:16,137
Bạn cũng có thể thấy điều này trong các ví dụ lớn hơn, trong đó dù bạn có lớn đến đâu, 

71
00:04:16,137 --> 00:04:19,339
mỗi bit chẵn lẻ chỉ chạm vào một trong các nhóm một cách thuận tiện.

72
00:04:25,600 --> 00:04:29,147
Một khi bạn hiểu rằng việc kiểm tra tính chẵn lẻ mà ta đã dành rất nhiều 

73
00:04:29,147 --> 00:04:32,694
thời gian vào đó không gì khác hơn là một cách thông minh để đánh vần vị 

74
00:04:32,694 --> 00:04:36,145
trí của một lỗi trong hệ nhị phân, khi đó ta có thể rút ra mối liên hệ 

75
00:04:36,145 --> 00:04:39,546
bằng một cách nghĩ khác về mã hamming, một mã được cho là đơn giản và 

76
00:04:39,546 --> 00:04:43,240
tinh tế hơn rất nhiều và về cơ bản có thể được viết ra chỉ bằng một dòng mã.

77
00:04:43,660 --> 00:04:45,500
Nó dựa trên hàm XOR.

78
00:04:46,940 --> 00:04:50,220
XOR, dành cho những ai chưa biết, là viết tắt của độc quyền hoặc.

79
00:04:50,780 --> 00:04:55,954
Khi bạn lấy XOR của hai bit, nó sẽ trả về 1 nếu một trong hai bit đó được bật, 

80
00:04:55,954 --> 00:04:59,360
nhưng không trả về nếu cả hai bit được bật hoặc tắt.

81
00:05:00,100 --> 00:05:02,980
Nói cách khác, đó là tính chẵn lẻ của hai bit này.

82
00:05:03,540 --> 00:05:06,760
Là một người làm toán, tôi thích coi nó như phép cộng mod 2 hơn.

83
00:05:07,360 --> 00:05:10,701
Chúng ta cũng thường nói về XOR của hai chuỗi bit khác nhau, 

84
00:05:10,701 --> 00:05:13,440
về cơ bản thực hiện việc này theo từng thành phần.

85
00:05:13,680 --> 00:05:15,720
Nó giống như sự bổ sung, nhưng bạn không bao giờ mang theo.

86
00:05:16,500 --> 00:05:19,332
Một lần nữa, những người thiên về toán học hơn có thể 

87
00:05:19,332 --> 00:05:22,480
thích coi điều này như việc cộng hai vectơ và rút gọn mod 2.

88
00:05:23,500 --> 00:05:27,837
Nếu bạn mở một số Python ngay bây giờ và áp dụng thao tác dấu mũ giữa hai số nguyên, 

89
00:05:27,837 --> 00:05:30,949
thì đây chính là những gì nó đang làm nhưng đối với các biểu 

90
00:05:30,949 --> 00:05:32,940
diễn bit của các số đó ở phần bên dưới.

91
00:05:34,960 --> 00:05:39,000
Điểm mấu chốt đối với bạn và tôi là việc lấy XOR của nhiều chuỗi bit 

92
00:05:39,000 --> 00:05:44,270
khác nhau thực sự là một cách để tính toán các bản nhại của một loạt các nhóm riêng biệt, 

93
00:05:44,270 --> 00:05:47,140
giống như với các cột, tất cả trong một cú trượt.

94
00:05:51,260 --> 00:05:53,727
Điều này mang lại cho chúng ta một cách khá thú vị để suy nghĩ 

95
00:05:53,727 --> 00:05:56,234
về nhiều lần kiểm tra tính chẵn lẻ từ thuật toán mã Hamming của 

96
00:05:56,234 --> 00:05:58,780
chúng ta khi tất cả được gói gọn lại thành một thao tác duy nhất.

97
00:05:59,480 --> 00:06:02,180
Mặc dù thoạt nhìn nó trông rất khác.

98
00:06:02,820 --> 00:06:06,031
Cụ thể là viết ra 16 vị trí trong hệ nhị phân, 

99
00:06:06,031 --> 00:06:10,814
giống như chúng ta đã làm trước đây và bây giờ đánh dấu các vị trí mà 

100
00:06:10,814 --> 00:06:15,528
bit thông báo được bật thành 1, sau đó thu thập các vị trí này thành 

101
00:06:15,528 --> 00:06:17,100
một cột lớn và lấy XOR.

102
00:06:19,260 --> 00:06:22,608
Bạn có thể đoán rằng kết quả là 4 bit nằm ở dưới cùng giống với 

103
00:06:22,608 --> 00:06:25,328
4 kiểm tra tính chẵn lẻ mà ta đã biết và yêu thích, 

104
00:06:25,328 --> 00:06:29,200
nhưng hãy dành chút thời gian để thực sự suy nghĩ chính xác lý do tại sao.

105
00:06:32,220 --> 00:06:36,773
Ví dụ: cột cuối cùng này đang đếm tất cả các vị trí có bit cuối cùng là 1, 

106
00:06:36,773 --> 00:06:40,659
nhưng chúng tôi chỉ giới hạn ở các vị trí được đánh dấu, do đó, 

107
00:06:40,659 --> 00:06:45,760
nó đếm một cách hiệu quả số lượng vị trí được đánh dấu đến từ nhóm chẵn lẻ đầu tiên.

108
00:06:46,240 --> 00:06:46,800
Điều đó có ý nghĩa?

109
00:06:49,080 --> 00:06:54,356
Tương tự, cột tiếp theo đếm số lượng vị trí trong nhóm chẵn lẻ thứ hai, 

110
00:06:54,356 --> 00:07:00,000
các vị trí có bit thứ hai đến bit cuối cùng là 1 và cũng được đánh dấu, v. v.

111
00:07:00,260 --> 00:07:03,960
Đó thực sự chỉ là một thay đổi nhỏ trong quan điểm về điều tương tự mà ta đang làm.

112
00:07:07,760 --> 00:07:09,600
Và vì vậy bạn biết nó sẽ đi đâu từ đây.

113
00:07:10,000 --> 00:07:13,493
Người gửi chịu trách nhiệm chuyển đổi một số bit 

114
00:07:13,493 --> 00:07:16,560
chẵn lẻ đặc biệt để đảm bảo tổng bằng 0000.

115
00:07:19,040 --> 00:07:21,901
Bây giờ khi chúng ta đã có nó như thế này, điều này mang lại cho 

116
00:07:21,901 --> 00:07:24,674
chúng ta một cách thực sự hay để suy nghĩ về lý do tại sao bốn 

117
00:07:24,674 --> 00:07:27,580
bit kết quả ở phía dưới này trực tiếp đánh vần vị trí của một lỗi.

118
00:07:28,460 --> 00:07:31,860
Giả sử một số bit trong khối này được chuyển từ 0 sang 1.

119
00:07:32,600 --> 00:07:37,859
Điều đó có nghĩa là vị trí của bit đó hiện sẽ được bao gồm trong tổng XOR, 

120
00:07:37,859 --> 00:07:43,820
làm thay đổi tổng từ 0 thành thay vào đó là giá trị mới được đưa vào, vị trí của lỗi.

121
00:07:44,460 --> 00:07:49,360
Ít rõ ràng hơn một chút, điều tương tự cũng đúng nếu có lỗi thay đổi từ 1 thành 0.

122
00:07:50,180 --> 00:07:53,417
Bạn thấy đấy, nếu bạn cộng một chuỗi bit lại với nhau hai lần, 

123
00:07:53,417 --> 00:07:57,940
thì cũng giống như không có nó ở đó, về cơ bản là vì trong thế giới này 1 cộng 1 bằng 0.

124
00:07:58,920 --> 00:08:01,585
Vì vậy, việc thêm một bản sao của vị trí này vào tổng 

125
00:08:01,585 --> 00:08:04,300
số có tác dụng tương tự như việc chúng ta di chuyển nó.

126
00:08:05,160 --> 00:08:10,700
Và một lần nữa, hiệu ứng đó là kết quả tổng thể ở phía dưới ở đây cho biết vị trí của lỗi.

127
00:08:13,040 --> 00:08:17,160
Để minh họa mức độ tinh tế của điều này, hãy để tôi chỉ ra một dòng mã Python 

128
00:08:17,160 --> 00:08:21,440
mà tôi đã tham chiếu trước đó, nó sẽ nắm bắt gần như toàn bộ logic ở đầu máy thu.

129
00:08:22,080 --> 00:08:25,855
Chúng ta sẽ bắt đầu bằng cách tạo một mảng ngẫu nhiên gồm 16 số 1 và 

130
00:08:25,855 --> 00:08:29,357
0 để mô phỏng khối dữ liệu và tôi sẽ đặt tên cho nó là các bit, 

131
00:08:29,357 --> 00:08:33,296
nhưng tất nhiên trong thực tế đây sẽ là thứ chúng ta nhận được từ người 

132
00:08:33,296 --> 00:08:37,400
gửi và thay vì ngẫu nhiên nó sẽ mang 11 bit dữ liệu cùng với 5 bit chẵn lẻ.

133
00:08:38,120 --> 00:08:42,529
Nếu tôi gọi hàm enumerate Bits, nhiệm vụ của nó là ghép từng bit đó lại 

134
00:08:42,529 --> 00:08:47,000
với nhau bằng một chỉ mục tương ứng, trong trường hợp này là từ 0 đến 15.

135
00:08:48,180 --> 00:08:52,566
Vì vậy, nếu sau đó chúng ta tạo một danh sách lặp lại tất cả các cặp này, 

136
00:08:52,566 --> 00:08:56,775
các cặp trông giống i và sau đó chúng ta chỉ lấy ra giá trị i, chỉ số, 

137
00:08:56,775 --> 00:09:01,340
thì điều đó không thú vị lắm, chúng ta chỉ lấy lại các chỉ số đó từ 0 đến 15.

138
00:09:01,680 --> 00:09:06,254
Nhưng nếu chúng ta thêm vào điều kiện chỉ thực hiện điều này nếu bit, 

139
00:09:06,254 --> 00:09:11,810
nghĩa là nếu bit đó là 1 chứ không phải 0, thì nó chỉ lấy ra các vị trí mà bit tương 

140
00:09:11,810 --> 00:09:12,660
ứng được bật.

141
00:09:13,380 --> 00:09:17,960
Trong trường hợp này, có vẻ như các vị trí đó là 0, 4, 6, 9, v. v.

142
00:09:19,980 --> 00:09:23,725
Điều chúng ta muốn là tập hợp tất cả các vị trí đó lại với nhau, 

143
00:09:23,725 --> 00:09:27,240
vị trí của các bit được bật và sau đó XOR chúng lại với nhau.

144
00:09:29,180 --> 00:09:33,220
Để thực hiện điều này bằng Python, trước tiên tôi hãy nhập một vài hàm hữu ích.

145
00:09:33,900 --> 00:09:36,476
Bằng cách đó, chúng ta có thể gọi hàm less() trong 

146
00:09:36,476 --> 00:09:38,700
danh sách này và sử dụng hàm XOR để giảm nó.

147
00:09:39,100 --> 00:09:42,680
Về cơ bản, điều này sẽ xuyên suốt danh sách, mang theo XOR trong suốt quá trình.

148
00:09:44,800 --> 00:09:49,440
Nếu muốn, bạn có thể viết rõ ràng hàm XOR đó mà không cần phải nhập nó từ bất kỳ đâu.

149
00:09:51,940 --> 00:09:58,237
Vì vậy, hiện tại, có vẻ như nếu chúng ta thực hiện điều này trên khối 16 bit ngẫu nhiên, 

150
00:09:58,237 --> 00:10:01,280
nó sẽ trả về 9, có biểu diễn nhị phân 1001.

151
00:10:01,980 --> 00:10:06,437
Chúng ta sẽ không làm điều đó ở đây, nhưng bạn có thể viết một hàm trong đó người 

152
00:10:06,437 --> 00:10:10,024
gửi sử dụng biểu diễn nhị phân đó để đặt bốn bit chẵn lẻ nếu cần, 

153
00:10:10,024 --> 00:10:14,372
cuối cùng đưa khối này về trạng thái chạy dòng mã này trên danh sách đầy đủ các 

154
00:10:14,372 --> 00:10:15,460
bit trả về một số 0.

155
00:10:16,080 --> 00:10:18,200
Đây sẽ được coi là một khối được chuẩn bị tốt.

156
00:10:19,880 --> 00:10:24,523
Điều thú vị là nếu chúng ta chuyển đổi bất kỳ bit nào trong danh sách này, 

157
00:10:24,523 --> 00:10:29,043
mô phỏng một lỗi ngẫu nhiên do nhiễu, thì nếu bạn chạy cùng dòng mã này, 

158
00:10:29,043 --> 00:10:30,220
nó sẽ in ra lỗi đó.

159
00:10:30,960 --> 00:10:31,520
Thật gọn gàng phải không?

160
00:10:31,820 --> 00:10:36,325
Bạn có thể lấy khối này bất ngờ, chạy dòng đơn này trên đó 

161
00:10:36,325 --> 00:10:41,060
và nó sẽ tự động đưa ra vị trí của lỗi hoặc số 0 nếu không có.

162
00:10:42,500 --> 00:10:45,200
Và cũng không có gì đặc biệt về size 16 ở đây.

163
00:10:45,400 --> 00:10:49,860
Dòng mã tương tự sẽ hoạt động nếu bạn có một danh sách 256 bit.

164
00:10:51,880 --> 00:10:54,560
Không cần phải nói, có nhiều mã hơn để viết ở đây, 

165
00:10:54,560 --> 00:10:58,503
chẳng hạn như thực hiện kiểm tra tính chẵn lẻ meta để phát hiện lỗi 2 bit, 

166
00:10:58,503 --> 00:11:02,550
nhưng ý tưởng là hầu như tất cả logic cốt lõi từ sơ đồ của chúng ta đều giảm 

167
00:11:02,550 --> 00:11:03,760
xuống một XOR duy nhất.

168
00:11:06,120 --> 00:11:10,645
Bây giờ, tùy thuộc vào sự thoải mái của bạn với nhị phân, XOR và phần mềm nói chung, 

169
00:11:10,645 --> 00:11:14,799
bạn có thể thấy quan điểm này hơi khó hiểu hoặc tinh tế và đơn giản hơn nhiều 

170
00:11:14,799 --> 00:11:18,420
đến mức bạn đang tự hỏi tại sao ta không bắt đầu với nó ngay từ đầu.

171
00:11:19,140 --> 00:11:22,909
Nói một cách lỏng lẻo, phối cảnh kiểm tra tính chẵn lẻ sẽ dễ nghĩ đến hơn 

172
00:11:22,909 --> 00:11:26,679
khi triển khai mã Hamming trong phần cứng một cách trực tiếp và phối cảnh 

173
00:11:26,679 --> 00:11:30,500
XOR là dễ nghĩ đến nhất khi thực hiện nó trong phần mềm, từ cấp độ cao hơn.

174
00:11:31,360 --> 00:11:35,911
Cách đầu tiên thực sự dễ thực hiện nhất bằng tay và tôi nghĩ nó thực hiện công việc 

175
00:11:35,911 --> 00:11:40,300
tốt hơn khi thấm nhuần trực giác cốt lõi làm nền tảng cho tất cả những điều này, 

176
00:11:40,300 --> 00:11:44,906
đó là thông tin cần thiết để xác định một lỗi duy nhất có liên quan đến nhật ký kích 

177
00:11:44,906 --> 00:11:49,566
thước của khối, hay nói cách khác, nó tăng lên từng chút một khi kích thước khối tăng 

178
00:11:49,566 --> 00:11:50,000
gấp đôi.

179
00:11:51,020 --> 00:11:53,540
Thực tế có liên quan ở đây là thông tin đó tương 

180
00:11:53,540 --> 00:11:56,060
ứng trực tiếp với mức độ dư thừa mà chúng ta cần.

181
00:11:56,660 --> 00:11:59,939
Đó thực sự là điều khiến hầu hết mọi người phải phản ứng tức thời khi lần đầu 

182
00:11:59,939 --> 00:12:02,924
tiên họ nghĩ đến việc tạo ra một thông điệp có khả năng chống lại lỗi, 

183
00:12:02,924 --> 00:12:06,540
trong đó việc sao chép toàn bộ thông điệp là bản năng đầu tiên hiện lên trong đầu bạn.

184
00:12:07,500 --> 00:12:10,727
Và sau đó, nhân tiện, có một cách hoàn toàn khác mà đôi khi bạn thấy mã 

185
00:12:10,727 --> 00:12:14,000
Hamming được trình bày, trong đó bạn nhân thông điệp với một ma trận lớn.

186
00:12:14,670 --> 00:12:17,738
Điều này khá hay vì nó liên quan đến họ mã tuyến tính rộng hơn, 

187
00:12:17,738 --> 00:12:21,813
nhưng tôi nghĩ điều đó hầu như không mang lại trực quan nào về nguồn gốc của nó hoặc 

188
00:12:21,813 --> 00:12:23,060
quy mô của nó như thế nào.

189
00:12:25,200 --> 00:12:28,054
Và nói về việc chia tỷ lệ, bạn có thể thấy rằng hiệu quả 

190
00:12:28,054 --> 00:12:31,160
của sơ đồ này chỉ trở nên tốt hơn khi ta tăng kích thước khối.

191
00:12:35,000 --> 00:12:38,797
Ví dụ: chúng ta thấy rằng với 256 bit, bạn chỉ sử dụng 3% 

192
00:12:38,797 --> 00:12:42,660
dung lượng đó để dự phòng và nó sẽ ngày càng tốt hơn từ đó.

193
00:12:43,300 --> 00:12:47,340
Khi số lượng bit chẵn lẻ tăng lên từng cái một, kích thước khối tiếp tục tăng gấp đôi.

194
00:12:49,000 --> 00:12:53,814
Và nếu bạn coi điều đó đến mức cực đoan, bạn có thể có một khối với một triệu bit, 

195
00:12:53,814 --> 00:12:57,410
trong đó bạn thực sự sẽ chơi 20 câu hỏi với các kiểm tra chẵn 

196
00:12:57,410 --> 00:13:00,020
lẻ của mình và nó chỉ sử dụng 21 bit chẵn lẻ.

197
00:13:00,740 --> 00:13:04,936
Và nếu bạn lùi lại để nghĩ về việc xem xét một triệu bit và tìm ra một lỗi duy nhất, 

198
00:13:04,936 --> 00:13:07,060
điều đó thực sự khiến bạn cảm thấy điên rồ.

199
00:13:08,200 --> 00:13:12,959
Tất nhiên, vấn đề là với khối lớn hơn, xác suất nhìn thấy nhiều hơn một hoặc hai 

200
00:13:12,959 --> 00:13:17,660
bit lỗi sẽ tăng lên và mã Hamming không xử lý được bất kỳ điều gì ngoài điều đó.

201
00:13:18,320 --> 00:13:21,335
Vì vậy, trong thực tế, điều bạn muốn là tìm kích thước phù 

202
00:13:21,335 --> 00:13:24,300
hợp để xác suất xảy ra quá nhiều bit bị lật không quá cao.

203
00:13:26,600 --> 00:13:29,980
Ngoài ra, trong thực tế, lỗi có xu hướng xảy ra theo từng đợt nhỏ, 

204
00:13:29,980 --> 00:13:32,755
điều này sẽ làm hỏng hoàn toàn một khối đơn lẻ, do đó, 

205
00:13:32,755 --> 00:13:36,338
một chiến thuật phổ biến để giúp dàn trải một loạt lỗi trên nhiều khối 

206
00:13:36,338 --> 00:13:39,970
khác nhau là xen kẽ các khối đó, như thế này, trước khi chúng xuất hiện 

207
00:13:39,970 --> 00:13:40,980
gửi đi hoặc lưu trữ.

208
00:13:45,580 --> 00:13:48,844
Sau đó, một lần nữa, phần lớn trong số này được hiển thị hoàn toàn bằng 

209
00:13:48,844 --> 00:13:52,562
các mã hiện đại hơn, như thuật toán Reed-Solomon được sử dụng phổ biến hơn nhiều, 

210
00:13:52,562 --> 00:13:55,963
xử lý các lỗi bùng phát một cách đặc biệt tốt và nó có thể được điều chỉnh 

211
00:13:55,963 --> 00:13:58,820
để có khả năng phục hồi với số lượng lỗi lớn hơn trên mỗi khối.

212
00:13:59,360 --> 00:14:01,340
Nhưng đó là một chủ đề cho một thời điểm khác.

213
00:14:02,500 --> 00:14:05,193
Trong cuốn sách Nghệ thuật thực hiện khoa học và kỹ thuật, 

214
00:14:05,193 --> 00:14:08,844
Hamming đã thẳng thắn một cách tuyệt vời về việc khám phá ra mật mã này của ông 

215
00:14:08,844 --> 00:14:09,940
đã quanh co như thế nào.

216
00:14:10,620 --> 00:14:14,266
Đầu tiên anh ấy thử tất cả các loại kế hoạch khác nhau liên quan đến việc tổ chức 

217
00:14:14,266 --> 00:14:17,780
các bit thành các phần của mạng nhiều chiều hơn và những thứ kỳ lạ như thế này.

218
00:14:18,300 --> 00:14:21,486
Ý tưởng rằng có thể sử dụng các biện pháp kiểm tra tính chẵn lẻ để 

219
00:14:21,486 --> 00:14:24,767
thông đồng theo cách xác định vị trí của lỗi chỉ đến với Hamming khi 

220
00:14:24,767 --> 00:14:27,858
anh ấy lùi lại sau một loạt các phân tích khác và hỏi, được rồi, 

221
00:14:27,858 --> 00:14:31,520
cách hiệu quả nhất mà tôi có thể làm là gì có thể hình dung được về điều này?

222
00:14:32,620 --> 00:14:37,000
Ông cũng thẳng thắn về tầm quan trọng của việc kiểm tra tính chẵn lẻ đã nằm trong 

223
00:14:37,000 --> 00:14:41,220
tâm trí ông, điều này có lẽ ít phổ biến hơn vào những năm 1940 so với ngày nay.

224
00:14:41,920 --> 00:14:45,880
Có khoảng nửa tá lần trong suốt cuốn sách này ông đề cập đến câu nói của Louis Pasteur, 

225
00:14:45,880 --> 00:14:48,220
may mắn sẽ đến với một tâm trí đã chuẩn bị sẵn sàng.

226
00:14:49,320 --> 00:14:52,298
Những ý tưởng thông minh thường có vẻ đơn giản khi nhìn lại, 

227
00:14:52,298 --> 00:14:54,300
điều này khiến chúng dễ bị đánh giá thấp.

228
00:14:54,960 --> 00:14:57,585
Hiện tại, hy vọng thực sự của tôi là các mã Hamming, 

229
00:14:57,585 --> 00:15:01,300
hoặc ít nhất là khả năng có các mã như vậy, gần như hiển nhiên đối với bạn.

230
00:15:01,660 --> 00:15:04,952
Nhưng bạn không nên tự lừa dối mình rằng chúng thực sự hiển nhiên, 

231
00:15:04,952 --> 00:15:06,820
bởi vì chúng chắc chắn không phải vậy.

232
00:15:07,880 --> 00:15:11,565
Một phần lý do khiến những ý tưởng thông minh có vẻ dễ dàng bị đánh lừa là vì 

233
00:15:11,565 --> 00:15:14,543
ta chỉ nhìn thấy kết quả cuối cùng, dọn dẹp những thứ lộn xộn, 

234
00:15:14,543 --> 00:15:17,142
không bao giờ đề cập đến tất cả những bước rẽ sai lầm, 

235
00:15:17,142 --> 00:15:20,922
đánh giá thấp tầm quan trọng của những khả năng có thể khám phá khi bắt đầu tất 

236
00:15:20,922 --> 00:15:22,860
cả quá trình đó để giải quyết một vấn đề.

237
00:15:23,820 --> 00:15:24,900
Nhưng điều này nói chung là đúng.

238
00:15:24,900 --> 00:15:27,400
Tôi nghĩ đối với một số phát minh đặc biệt, còn có lý 

239
00:15:27,400 --> 00:15:30,040
do thứ hai sâu xa hơn khiến chúng ta đánh giá thấp chúng.

240
00:15:30,840 --> 00:15:34,646
Việc suy nghĩ về thông tin dưới dạng bit chỉ thực sự kết hợp thành một lý thuyết 

241
00:15:34,646 --> 00:15:38,640
đầy đủ vào năm 1948, với bài báo chuyên đề về lý thuyết thông tin của Claude Shannon.

242
00:15:39,280 --> 00:15:42,540
Điều này về cơ bản xảy ra đồng thời với thời điểm Hamming phát triển thuật toán của mình.

243
00:15:43,300 --> 00:15:47,984
Theo một nghĩa nào đó, đây cũng chính là bài báo nền tảng đã chỉ ra rằng luôn có 

244
00:15:47,984 --> 00:15:52,900
thể sửa lỗi hiệu quả, bất kể xác suất lật bit cao đến đâu, ít nhất là trên lý thuyết.

245
00:15:53,700 --> 00:15:56,711
Nhân tiện, Shannon và Hamming chia sẻ một văn phòng ở Bell Labs, 

246
00:15:56,711 --> 00:15:59,074
mặc dù làm việc trên những lĩnh vực rất khác nhau, 

247
00:15:59,074 --> 00:16:01,160
điều này hầu như không có vẻ trùng hợp ở đây.

248
00:16:02,380 --> 00:16:04,832
Nhiều thập kỷ trôi qua nhanh chóng, và ngày nay, 

249
00:16:04,832 --> 00:16:08,185
nhiều người trong chúng ta quá đắm chìm trong việc suy nghĩ về các 

250
00:16:08,185 --> 00:16:12,340
bit và thông tin đến mức ta dễ dàng bỏ qua cách suy nghĩ này khác biệt như thế nào.

251
00:16:13,100 --> 00:16:17,564
Trớ trêu thay, những ý tưởng định hình sâu sắc nhất cách suy nghĩ của thế hệ 

252
00:16:17,564 --> 00:16:22,260
tương lai cuối cùng lại khiến thế hệ tương lai nhìn nhận nó đơn giản hơn thực tế.

