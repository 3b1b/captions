[
 {
  "input": "I'm assuming that everybody here is coming from part 1.",
  "translatedText": "मी असे गृहीत धरत आहे की येथे प्रत्येकजण भाग 1 पासून येत आहे.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 0.0,
  "end": 2.56
 },
 {
  "input": "We were talking about Hamming codes, a way to create a block of data where most of the bits carry a meaningful message, while a few others act as a kind of redundancy, in such a way that if any bit gets flipped, either a message bit or a redundancy bit, anything in this block, a receiver is going to be able to identify that there was an error, and how to fix it.",
  "translatedText": "आम्ही हॅमिंग कोडबद्दल बोलत होतो, डेटाचा एक ब्लॉक तयार करण्याचा एक मार्ग जिथे बहुतेक बिट एक अर्थपूर्ण संदेश देतात, तर काही इतर एक प्रकारचा रिडंडंसी म्हणून काम करतात, अशा प्रकारे की जर काही बिट फ्लिप झाले तर एकतर संदेश बिट किंवा रिडंडंसी बिट, या ब्लॉकमधील काहीही, एक प्राप्तकर्ता त्रुटी आहे हे ओळखण्यास सक्षम असेल आणि त्याचे निराकरण कसे करावे.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 3.06,
  "end": 21.24
 },
 {
  "input": "The basic idea presented there was how to use multiple parity checks to binary search your way down to the error.",
  "translatedText": "तेथे सादर केलेली मूलभूत कल्पना ही होती की त्रुटीकडे जाण्यासाठी बायनरी शोधण्यासाठी एकाधिक पॅरिटी चेक कसे वापरायचे.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 21.88,
  "end": 27.16
 },
 {
  "input": "In that video the goal was to make Hamming codes feel as hands-on and rediscoverable as possible.",
  "translatedText": "त्या व्हिडिओमध्ये हॅमिंग कोड शक्य तितक्या हँड्स-ऑन आणि पुन्हा शोधण्यायोग्य वाटणे हे ध्येय होते.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 28.98,
  "end": 34.6
 },
 {
  "input": "But as you start to think about actually implementing this, either in software or hardware, that framing may actually undersell how elegant these codes really are.",
  "translatedText": "परंतु जसे तुम्ही हे सॉफ्टवेअर किंवा हार्डवेअरमध्ये प्रत्यक्षात अंमलात आणण्याचा विचार करू लागता, ते फ्रेमिंग हे कोड्स खरोखर किती सुंदर आहेत हे कमी करू शकते.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 35.18,
  "end": 43.46
 },
 {
  "input": "You might think that you need to write an algorithm that keeps track of all the possible error locations and cuts that group in half with each check, but it's actually way, way simpler than that.",
  "translatedText": "तुम्हाला असे वाटेल की तुम्हाला एखादे अल्गोरिदम लिहावे लागेल जे सर्व संभाव्य त्रुटी स्थानांचा मागोवा ठेवेल आणि प्रत्येक चेकसह त्या गटाला अर्धा कापून टाकेल, परंतु प्रत्यक्षात ते त्यापेक्षा सोपे आहे.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 43.92,
  "end": 53.48
 },
 {
  "input": "If you read out the answers to the four parity checks we did in the last video, all as 1s and 0s instead of yeses and nos, it literally spells out the position of the error in binary.",
  "translatedText": "शेवटच्या व्हिडिओमध्ये आम्ही केलेल्या चार पॅरिटी चेकची उत्तरे तुम्ही होय आणि नाही ऐवजी 1s आणि 0s अशी वाचली, तर ते बायनरीमधील त्रुटीचे स्थान अक्षरशः स्पष्ट करते.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 53.94,
  "end": 64.08
 },
 {
  "input": "For example, the number 7 in binary looks like 0111, essentially saying that it's 4 plus 2 plus 1.",
  "translatedText": "उदाहरणार्थ, बायनरी मधील 7 ही संख्या 0111 सारखी दिसते, मूलत: ते 4 अधिक 2 अधिक 1 असे म्हणते.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 64.78,
  "end": 71.26
 },
 {
  "input": "And notice where the position 7 sits, it does affect the first of our parity groups, and the second, and the third, but not the last.",
  "translatedText": "आणि लक्षात घ्या की स्थान 7 कुठे बसते, ते आमच्या समता गटांपैकी पहिल्यावर, आणि दुसऱ्या आणि तिसऱ्याला प्रभावित करते, परंतु शेवटचे नाही.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 72.54,
  "end": 81.74
 },
 {
  "input": "So reading the results of those four checks from bottom to top indeed does spell out the position of the error.",
  "translatedText": "त्यामुळे तळापासून वरपर्यंत त्या चार तपासण्यांचे निकाल वाचून त्रुटीची स्थिती स्पष्ट होते.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 82.22,
  "end": 87.54
 },
 {
  "input": "There's nothing special about the example 7, this works in general, and this makes the logic for implementing the whole scheme in hardware shockingly simple.",
  "translatedText": "उदाहरण 7 मध्ये विशेष काही नाही, हे सर्वसाधारणपणे कार्य करते आणि यामुळे हार्डवेअरमध्ये संपूर्ण योजना लागू करण्याचे तर्क धक्कादायकपणे सोपे होते.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 88.32,
  "end": 95.82
 },
 {
  "input": "Now if you want to see why this magic happens, take these 16 index labels for our positions, but instead of writing them in base 10, let's write them all in binary, running from 0000 up to 1111.",
  "translatedText": "आता ही जादू का घडते हे जर तुम्हाला पहायचे असेल, तर आमच्या पोझिशन्ससाठी ही 16 इंडेक्स लेबले घ्या, परंतु त्यांना बेस 10 मध्ये लिहिण्याऐवजी, 0000 ते 1111 पर्यंत चालणारे ते सर्व बायनरीमध्ये लिहूया.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 97.24,
  "end": 109.88
 },
 {
  "input": "As we put these binary labels back into their boxes, let me emphasize that they are distinct from the data that's actually being sent.",
  "translatedText": "जसे आम्ही ही बायनरी लेबले त्यांच्या बॉक्समध्ये परत ठेवतो, मी यावर जोर देतो की ते प्रत्यक्षात पाठवलेल्या डेटापेक्षा वेगळे आहेत.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 110.56,
  "end": 117.8
 },
 {
  "input": "They're nothing more than a conceptual label to help you and me understand where the four parity groups came from.",
  "translatedText": "ते चार समानता गट कुठून आले हे तुम्हाला आणि मला समजण्यास मदत करण्यासाठी एक संकल्पनात्मक लेबलपेक्षा अधिक काही नाही.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 118.32,
  "end": 123.5
 },
 {
  "input": "The elegance of having everything we're looking at be described in binary is maybe undercut by the confusion of having everything we're looking at being described in binary.",
  "translatedText": "बायनरीमध्ये वर्णन केल्या जाणाऱ्या प्रत्येक गोष्टीचे वर्णन आपण पाहत आहोत या संभ्रमामुळे कदाचित कमी होईल.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 124.14,
  "end": 132.36
 },
 {
  "input": "It's worth it, though.",
  "translatedText": "तो वाचतो आहे, तरी.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 133.02,
  "end": 134.12
 },
 {
  "input": "Focus your attention just on that last bit of all of these labels, and then highlight the positions where that final bit is a 1.",
  "translatedText": "तुमचे लक्ष या सर्व लेबल्सच्या शेवटच्या बिट्सवर केंद्रित करा आणि नंतर ते स्थान हायलाइट करा जिथे तो अंतिम बिट 1 आहे.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 134.8,
  "end": 143.22
 },
 {
  "input": "What we get is the first of our four parity groups, which means you can interpret that first check as asking, hey, if there's an error, is the final bit in the position of that error a 1?",
  "translatedText": "आम्हाला जे मिळते ते आमच्या चार पॅरिटी गटांपैकी पहिले आहे, याचा अर्थ तुम्ही त्या पहिल्या चेकचा विचार म्हणून अर्थ लावू शकता, अरे, जर एखादी त्रुटी असेल, तर त्या त्रुटीच्या स्थितीतील अंतिम बिट 1 आहे का?",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 144.24,
  "end": 155.74
 },
 {
  "input": "Similarly, if you focus on the second to last bit, and highlight all the positions where that's a 1, you get the second parity group from our scheme.",
  "translatedText": "त्याचप्रमाणे, जर तुम्ही सेकंड टू लास्ट बिटवर लक्ष केंद्रित केले आणि 1 असलेल्या सर्व पोझिशन्स हायलाइट केल्यास तुम्हाला आमच्या स्कीममधून दुसरा पॅरिटी ग्रुप मिळेल.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 158.2,
  "end": 166.16
 },
 {
  "input": "In other words, that second check is asking, hey, me again, if there's an error, is the second to last bit of that position a 1?",
  "translatedText": "दुसऱ्या शब्दांत, तो दुसरा चेक विचारत आहे, अहो, मला पुन्हा, जर एखादी त्रुटी असेल, तर त्या स्थितीचा दुसरा टू शेवटचा बिट 1 आहे का?",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 166.74,
  "end": 174.5
 },
 {
  "input": "And so on.",
  "translatedText": "वगैरे.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 175.76,
  "end": 176.9
 },
 {
  "input": "The third parity check covers every position whose third to last bit is turned on, and the last one covers the last eight positions, those ones whose highest order bit is a 1.",
  "translatedText": "तिसरा पॅरिटी चेक प्रत्येक पोझिशनचा कव्हर करतो ज्याचा तिसरा ते शेवटचा बिट चालू आहे आणि शेवटच्या आठ पोझिशन्सला कव्हर करते, ज्यांची सर्वोच्च ऑर्डर बिट 1 आहे.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 177.22,
  "end": 188.74
 },
 {
  "input": "Everything we did earlier is the same as answering these four questions, which in turn is the same as spelling out a position in binary.",
  "translatedText": "आम्ही याआधी जे काही केले ते या चार प्रश्नांची उत्तरे देण्यासारखेच आहे, जे यामधून बायनरीमधील स्थानाचे स्पेलिंग सारखेच आहे.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 189.74,
  "end": 197.74
 },
 {
  "input": "I hope this makes two things clearer.",
  "translatedText": "मला आशा आहे की हे दोन गोष्टी स्पष्ट करेल.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 199.62,
  "end": 201.48
 },
 {
  "input": "The first is how to systematically generalize to block sizes that are bigger powers of two.",
  "translatedText": "प्रथम म्हणजे दोन मोठ्या शक्ती असलेल्या आकारांना ब्लॉक करण्यासाठी पद्धतशीरपणे सामान्यीकरण कसे करावे.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 202.04,
  "end": 206.46
 },
 {
  "input": "If it takes more bits to describe each position, like six bits to describe 64 spots, then each of those bits gives you one of the parity groups that we need to check.",
  "translatedText": "प्रत्येक पोझिशनचे वर्णन करण्यासाठी अधिक बिट्स लागत असल्यास, जसे की 64 स्पॉट्सचे वर्णन करण्यासाठी सहा बिट्स, तर त्या प्रत्येक बिट्समुळे आपल्याला समानता गटांपैकी एक मिळेल जो आपल्याला तपासण्याची आवश्यकता आहे.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 206.96,
  "end": 216.68
 },
 {
  "input": "Those of you who watched the chessboard puzzle I did with Matt Parker might find all this exceedingly familiar.",
  "translatedText": "तुमच्यापैकी ज्यांनी मी मॅट पार्करसोबत केलेले बुद्धिबळाचे कोडे पाहिले त्यांना कदाचित हे सर्व अत्यंत परिचित वाटेल.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 218.4,
  "end": 223.18
 },
 {
  "input": "It's the same core logic, but solving a different problem, and applied to a 64-squared chessboard.",
  "translatedText": "हे समान मुख्य तर्क आहे, परंतु वेगळ्या समस्येचे निराकरण करते आणि 64-चौरस बुद्धिबळावर लागू केले जाते.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 223.66,
  "end": 228.78
 },
 {
  "input": "The second thing I hope this makes clear is why our parity bits are sitting in the positions that are powers of two, for example 1, 2, 4, and 8.",
  "translatedText": "दुसरी गोष्ट मला आशा आहे की हे स्पष्ट करते की आमचे पॅरिटी बिट्स दोन पॉवर असलेल्या पोझिशनमध्ये का बसले आहेत, उदाहरणार्थ 1, 2, 4 आणि 8.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 229.88,
  "end": 237.32
 },
 {
  "input": "These are the positions whose binary representation has just a single bit turned on.",
  "translatedText": "ही अशी पोझिशन्स आहेत ज्यांचे बायनरी प्रतिनिधित्व फक्त एक बिट चालू आहे.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 238.0,
  "end": 243.0
 },
 {
  "input": "What that means is each of those parity bits sits inside one and only one of the four parity groups.",
  "translatedText": "याचा अर्थ असा आहे की त्या प्रत्येक पॅरिटी बिट्स चार पॅरिटी गटांपैकी फक्त एकामध्ये बसतात.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 243.6,
  "end": 249.46
 },
 {
  "input": "You can also see this in larger examples, where no matter how big you get, each parity bit conveniently touches only one of the groups.",
  "translatedText": "आपण हे मोठ्या उदाहरणांमध्ये देखील पाहू शकता, जिथे आपण कितीही मोठे असले तरीही, प्रत्येक पॅरिटी बिट सोयीस्करपणे फक्त एका गटाला स्पर्श करते.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 252.04,
  "end": 259.34
 },
 {
  "input": "Once you understand that these parity checks that we've focused so much of our time on are nothing more than a clever way to spell out the position of an error in binary, then we can draw a connection with a different way to think about hamming codes, one that is arguably a lot simpler and more elegant, and which can basically be written down with a single line of code.",
  "translatedText": "एकदा आपण समजून घेतले की या समता तपासण्या ज्यावर आम्ही आमचा बराच वेळ लक्ष केंद्रित केला आहे ते बायनरीमधील त्रुटीची स्थिती स्पष्ट करण्याचा एक चतुर मार्ग आहे, त्यानंतर आम्ही हॅमिंगबद्दल विचार करण्याच्या वेगळ्या मार्गाने कनेक्शन काढू शकतो. कोड्स, जे वादातीतपणे बरेच सोपे आणि अधिक शोभिवंत आहेत आणि जे मुळात कोडच्या एका ओळीने लिहिता येतात.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 265.6,
  "end": 283.24
 },
 {
  "input": "It's based on the XOR function.",
  "translatedText": "हे XOR फंक्शनवर आधारित आहे.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 283.66,
  "end": 285.5
 },
 {
  "input": "XOR, for those of you who don't know, stands for exclusive or.",
  "translatedText": "XOR, तुमच्यापैकी ज्यांना माहित नाही त्यांच्यासाठी, अनन्य किंवा.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 286.94,
  "end": 290.22
 },
 {
  "input": "When you take the XOR of two bits, it's going to return a 1 if either one of those bits is turned on, but not if both are turned on or off.",
  "translatedText": "जेव्हा तुम्ही दोन बिट्सचा XOR घेता, तेव्हा त्यापैकी एक बिट चालू असल्यास ते 1 परत करेल, परंतु दोन्ही चालू किंवा बंद असल्यास नाही.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 290.78,
  "end": 299.36
 },
 {
  "input": "Phrased differently, it's the parity of these two bits.",
  "translatedText": "वेगळ्या पद्धतीने शब्दबद्ध केले तर ही या दोन बिट्सची समानता आहे.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 300.1,
  "end": 302.98
 },
 {
  "input": "As a math person, I prefer to think about it as addition mod 2.",
  "translatedText": "एक गणिती व्यक्ती म्हणून, मी त्याबद्दल अतिरिक्त मोड 2 म्हणून विचार करण्यास प्राधान्य देतो.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 303.54,
  "end": 306.76
 },
 {
  "input": "We also commonly talk about the XOR of two different bit strings, which basically does this component by component.",
  "translatedText": "आम्ही सामान्यतः दोन भिन्न बिट स्ट्रिंग्सच्या XOR बद्दल बोलतो, जे मुळात हा घटक घटकानुसार करते.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 307.36,
  "end": 313.44
 },
 {
  "input": "It's like addition, but where you never carry.",
  "translatedText": "हे जोडण्यासारखे आहे, परंतु जिथे आपण कधीही वाहून नेत नाही.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 313.68,
  "end": 315.72
 },
 {
  "input": "Again, the more mathematically inclined might prefer to think of this as adding two vectors and reducing mod 2.",
  "translatedText": "पुन्हा, अधिक गणिती कल हे दोन वेक्टर जोडणे आणि मोड 2 कमी करणे असा विचार करणे पसंत करू शकतात.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 316.5,
  "end": 322.48
 },
 {
  "input": "If you open up some Python right now and apply the caret operation between two integers, this is what it's doing but to the bit representations of those numbers under the hood.",
  "translatedText": "जर तुम्ही आत्ताच काही Python उघडले आणि दोन पूर्णांकांमध्ये कॅरेट ऑपरेशन लागू केले, तर ते हेच करत आहे परंतु हुडच्या खाली असलेल्या त्या संख्यांच्या थोड्या प्रतिनिधित्वासाठी.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 323.5,
  "end": 332.94
 },
 {
  "input": "The key point for you and me is that taking the XOR of many different bit strings is effectively a way to compute the parodies of a bunch of separate groups, like so with the columns, all in one fell swoop.",
  "translatedText": "तुमच्यासाठी आणि माझ्यासाठी महत्त्वाचा मुद्दा असा आहे की अनेक भिन्न बिट स्ट्रिंग्सचे XOR घेणे हा वेगवेगळ्या गटांच्या विडंबनांची प्रभावीपणे गणना करण्याचा एक मार्ग आहे, जसे की स्तंभांप्रमाणेच, सर्व काही एकाच वेळी होते.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 334.96,
  "end": 347.14
 },
 {
  "input": "This gives us a rather snazzy way to think about the multiple parity checks from our Hamming code algorithm as all being packaged together into one single operation.",
  "translatedText": "हे आम्हाला आमच्या हॅमिंग कोड अल्गोरिदममधील एकाधिक समानता तपासण्यांबद्दल विचार करण्याचा एक अतिशय आकर्षक मार्ग देते कारण सर्व एकाच ऑपरेशनमध्ये एकत्रित केले जातात.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 351.26,
  "end": 358.78
 },
 {
  "input": "Though at first glance it does look very different.",
  "translatedText": "जरी पहिल्या दृष्टीक्षेपात ते खूप वेगळे दिसते.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 359.48,
  "end": 362.18
 },
 {
  "input": "Specifically write down the 16 positions in binary, like we had before, and now highlight the positions where the message bit is turned on to a 1, and then collect these positions into one big column and take the XOR.",
  "translatedText": "विशेषत: बायनरीमध्ये 16 पोझिशन्स लिहा, जसे की आमच्याकडे आधी होती, आणि आता ज्या पोझिशन्सवर मेसेज बिट ऑन केले आहे ते 1 वर हायलाइट करा आणि नंतर या पोझिशन्स एका मोठ्या कॉलममध्ये एकत्र करा आणि XOR घ्या.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 362.82,
  "end": 377.1
 },
 {
  "input": "You can probably guess that the 4 bits sitting at the bottom as a result are the same as the 4 parity checks we've come to know and love, but take a moment to actually think about why exactly.",
  "translatedText": "आपण कदाचित अंदाज लावू शकता की परिणामी तळाशी बसलेले 4 बिट्स 4 पॅरिटी तपासण्यांसारखेच आहेत ज्या आम्हाला माहित आहेत आणि आवडतात, परंतु नक्की का याचा विचार करण्यासाठी थोडा वेळ घ्या.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 379.26,
  "end": 389.2
 },
 {
  "input": "This last column, for example, is counting all of the positions whose last bit is a 1, but we're already limited only to the highlighted positions, so it's effectively counting how many highlighted positions came from the first parity group.",
  "translatedText": "हा शेवटचा स्तंभ, उदाहरणार्थ, सर्व पोझिशन्स मोजत आहे ज्याचा शेवटचा बिट 1 आहे, परंतु आम्ही आधीच केवळ हायलाइट केलेल्या पोझिशन्सपुरते मर्यादित आहोत, त्यामुळे पहिल्या पॅरिटी गटातून किती हायलाइट केलेल्या पोझिशन्स आल्या हे प्रभावीपणे मोजत आहे.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 392.22,
  "end": 405.76
 },
 {
  "input": "Does that make sense?",
  "translatedText": "त्याला काही अर्थ आहे का?",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 406.24,
  "end": 406.8
 },
 {
  "input": "Likewise, the next column counts how many positions are in the second parity group, the positions whose second to last bit is a 1, and which are also highlighted, and so on.",
  "translatedText": "त्याचप्रमाणे, पुढील स्तंभ दुसऱ्या पॅरिटी गटात किती पोझिशन्स आहेत याची मोजणी करतो, ज्या पोझिशन्सचा दुसरा ते शेवटचा बिट 1 आहे आणि ज्या हायलाइट केल्या आहेत, आणि असेच पुढे.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 409.08,
  "end": 420.0
 },
 {
  "input": "It's really just a small shift in perspective on the same thing we've been doing.",
  "translatedText": "आम्ही करत आहोत त्याच गोष्टीकडे दृष्टीकोनातील हा खरोखरच एक छोटासा बदल आहे.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 420.26,
  "end": 423.96
 },
 {
  "input": "And so you know where it goes from here.",
  "translatedText": "आणि म्हणून ते इथून कुठे जाते हे तुम्हाला माहिती आहे.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 427.76,
  "end": 429.6
 },
 {
  "input": "The sender is responsible for toggling some of the special parity bits to make sure the sum works out to be 0000.",
  "translatedText": "बेरीज 0000 असल्याचे सुनिश्चित करण्यासाठी काही विशेष पॅरिटी बिट्स टॉगल करण्यासाठी प्रेषक जबाबदार आहे.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 430.0,
  "end": 436.56
 },
 {
  "input": "Now once we have it like this, this gives us a really nice way to think about why these four resulting bits at the bottom directly spell out the position of an error.",
  "translatedText": "आता एकदा आमच्याकडे असे झाले की, हे आम्हाला तळाशी असलेले हे चार परिणामी बिट्स थेट त्रुटीची स्थिती का स्पष्ट करतात याबद्दल विचार करण्याचा एक चांगला मार्ग देते.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 439.04,
  "end": 447.58
 },
 {
  "input": "Let's say some bit in this block gets toggled from a 0 to a 1.",
  "translatedText": "समजा या ब्लॉकमध्ये ० ते १ पर्यंत टॉगल केले आहे.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 448.46,
  "end": 451.86
 },
 {
  "input": "What that means is that the position of that bit is now going to be included in the total XOR, which changes the sum from being 0 to instead being this newly included value, the position of the error.",
  "translatedText": "याचा अर्थ असा आहे की त्या बिटची स्थिती आता एकूण XOR मध्ये समाविष्ट केली जाणार आहे, जी बेरीज 0 वरून बदलते त्याऐवजी हे नवीन समाविष्ट केलेले मूल्य, त्रुटीची स्थिती.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 452.6,
  "end": 463.82
 },
 {
  "input": "Slightly less obviously, the same is true if there's an error that changes a 1 to a 0.",
  "translatedText": "थोडेसे कमी स्पष्टपणे, 1 ते 0 बदलणारी त्रुटी असल्यास तेच खरे आहे.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 464.46,
  "end": 469.36
 },
 {
  "input": "You see, if you add a bit string together twice, it's the same as not having it there at all, basically because in this world 1 plus 1 equals 0.",
  "translatedText": "तुम्ही पहा, जर तुम्ही दोनदा थोडीशी स्ट्रिंग जोडली, तर ती तिथे अजिबात नसल्यासारखीच आहे, मुळात कारण या जगात 1 अधिक 1 बरोबर 0 आहे.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 470.18,
  "end": 477.94
 },
 {
  "input": "So adding a copy of this position to the total sum has the same effect as we're moving it.",
  "translatedText": "त्यामुळे एकूण बेरीजमध्ये या स्थितीची एक प्रत जोडल्याने आपण ती हलवत आहोत तसाच परिणाम होतो.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 478.92,
  "end": 484.3
 },
 {
  "input": "And that effect, again, is that the total result at the bottom here spells out the position of the error.",
  "translatedText": "आणि तो परिणाम, पुन्हा, येथे तळाशी एकूण परिणाम त्रुटीची स्थिती स्पष्ट करतो.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 485.16,
  "end": 490.7
 },
 {
  "input": "To illustrate how elegant this is, let me show that one line of Python code I referenced before, which will capture almost all of the logic on the receiver's end.",
  "translatedText": "हे किती शोभिवंत आहे हे स्पष्ट करण्यासाठी, मी आधी संदर्भित केलेल्या पायथन कोडची एक ओळ दाखवते, जी रिसीव्हरच्या शेवटी जवळजवळ सर्व लॉजिक कॅप्चर करेल.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 493.04,
  "end": 501.44
 },
 {
  "input": "We'll start by creating a random array of 16 1s and 0s to simulate the data block, and I'll give it the name bits, but of course in practice this would be something we're receiving from a sender, and instead of being random it would be carrying 11 data bits together with 5 parity bits.",
  "translatedText": "आम्ही डेटा ब्लॉकचे नक्कल करण्यासाठी 16 1s आणि 0s चा यादृच्छिक अॅरे तयार करून सुरुवात करू आणि मी त्याला नावाचे बिट्स देईन, परंतु अर्थातच सराव मध्ये हे असे काहीतरी असेल जे आम्हाला प्रेषकाकडून प्राप्त होत असेल आणि त्याऐवजी यादृच्छिक असल्याने ते 5 पॅरिटी बिट्ससह 11 डेटा बिट्स घेऊन जाईल.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 502.08,
  "end": 517.4
 },
 {
  "input": "If I call the function enumerateBits, what it does is pair together each of those bits with a corresponding index, in this case running from 0 up to 15.",
  "translatedText": "जर मी फंक्शनला enumerateBits म्हणतो, तर ते काय करते ते प्रत्येक बिट्सला संबंधित इंडेक्ससह जोडते, या प्रकरणात 0 ते 15 पर्यंत चालते.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 518.12,
  "end": 527.0
 },
 {
  "input": "So if we then create a list that loops over all of these pairs, pairs that look like i, and then we pull out just the i value, just the index, well it's not that exciting, we just get back those indices 0 through 15.",
  "translatedText": "मग जर आपण या सर्व जोड्या, i सारख्या दिसणार्‍या जोड्या लूप करणारी यादी तयार केली आणि मग आपण फक्त i मूल्य, फक्त निर्देशांक काढू, तर ते इतके रोमांचक नाही, तर आपल्याला ते निर्देशांक 0 ते 15 परत मिळतात.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 528.18,
  "end": 541.34
 },
 {
  "input": "But if we add on the condition to only do this if bit, meaning if that bit is a 1 and not a 0, well then it pulls out only the positions where the corresponding bit is turned on.",
  "translatedText": "पण जर आपण हे फक्त बिट जर करण्याची अट जोडली, म्हणजे जर तो बिट 1 असेल तर 0 नसेल, तर तो फक्त त्या पोझिशन्स बाहेर काढतो जिथे संबंधित बिट चालू आहे.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 541.68,
  "end": 552.66
 },
 {
  "input": "In this case it looks like those positions are 0, 4, 6, 9, etc.",
  "translatedText": "या प्रकरणात असे दिसते की ती पोझिशन्स 0, 4, 6, 9, इ.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 553.38,
  "end": 557.96
 },
 {
  "input": "What we want is to collect together all of those positions, the positions of the bits that are turned on, and then XOR them together.",
  "translatedText": "त्या सर्व पोझिशन्स, चालू केलेल्या बिट्सच्या पोझिशन्स आणि नंतर त्यांना एकत्र XOR करायचे आहे.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 559.98,
  "end": 567.24
 },
 {
  "input": "To do this in Python, let me first import a couple helpful functions.",
  "translatedText": "पायथनमध्ये हे करण्यासाठी, मी प्रथम काही उपयुक्त कार्ये आयात करू.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 569.18,
  "end": 573.22
 },
 {
  "input": "That way we can call reduce() on this list, and use the XOR function to reduce it.",
  "translatedText": "अशाप्रकारे आपण या यादीत reduce() कॉल करू शकतो आणि ते कमी करण्यासाठी XOR फंक्शन वापरू शकतो.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 573.9,
  "end": 578.7
 },
 {
  "input": "This basically eats its way through the list, taking XORs along the way.",
  "translatedText": "हे मुळात XORs घेऊन, यादीतून मार्ग काढते.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 579.1,
  "end": 582.68
 },
 {
  "input": "If you prefer, you can explicitly write out that XOR function without having to import it from anywhere.",
  "translatedText": "तुमची इच्छा असल्यास, तुम्ही ते XOR फंक्शन कोठूनही आयात न करता स्पष्टपणे लिहू शकता.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 584.8,
  "end": 589.44
 },
 {
  "input": "So at the moment it looks like if we do this on our random block of 16 bits, it returns 9, which has the binary representation 1001.",
  "translatedText": "तर याक्षणी असे दिसते की जर आपण हे आपल्या 16 बिट्सच्या यादृच्छिक ब्लॉकवर केले तर ते 9 परत करेल, ज्याचे बायनरी प्रतिनिधित्व 1001 आहे.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 591.94,
  "end": 601.28
 },
 {
  "input": "We won't do it here, but you could write a function where the sender uses that binary representation to set the four parity bits as needed, ultimately getting this block to a state where running this line of code on the full list of bits returns a 0.",
  "translatedText": "आम्ही ते येथे करणार नाही, परंतु तुम्ही एक फंक्शन लिहू शकता जिथे प्रेषक आवश्यकतेनुसार चार पॅरिटी बिट्स सेट करण्यासाठी बायनरी प्रतिनिधित्व वापरतो, शेवटी हा ब्लॉक अशा स्थितीत आणतो जिथे कोडची ही ओळ बिट्सच्या संपूर्ण यादीवर चालते. एक 0.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 601.98,
  "end": 615.46
 },
 {
  "input": "This would be considered a well-prepared block.",
  "translatedText": "हा एक उत्तम प्रकारे तयार केलेला ब्लॉक मानला जाईल.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 616.08,
  "end": 618.2
 },
 {
  "input": "What's cool is that if we toggle any one of the bits in this list, simulating a random error from noise, then if you run this same line of code, it prints out that error.",
  "translatedText": "काय छान आहे की जर आपण या यादीतील कोणत्याही एका बिट्सला टॉगल केले, नॉइजमधून यादृच्छिक त्रुटीचे नक्कल करून, जर तुम्ही कोडची हीच ओळ चालवली तर ती त्रुटी प्रिंट करते.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 619.88,
  "end": 630.22
 },
 {
  "input": "Isn't that neat?",
  "translatedText": "नीट आहे ना?",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 630.96,
  "end": 631.52
 },
 {
  "input": "You could get this block from out of the blue, run this single line on it, and it'll automatically spit out the position of an error, or a 0 if there wasn't any.",
  "translatedText": "तुम्ही हा ब्लॉक निळ्या रंगातून मिळवू शकता, त्यावर ही एकल ओळ चालवा आणि ती आपोआप त्रुटीची स्थिती बाहेर टाकेल, किंवा जर नसेल तर 0.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 631.82,
  "end": 641.06
 },
 {
  "input": "And there's nothing special about the size 16 here.",
  "translatedText": "आणि येथे 16 आकाराबद्दल काही विशेष नाही.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 642.5,
  "end": 645.2
 },
 {
  "input": "The same line of code would work if you had a list of, say, 256 bits.",
  "translatedText": "तुमच्याकडे २५६ बिट्सची यादी असेल तर कोडची समान ओळ काम करेल.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 645.4,
  "end": 649.86
 },
 {
  "input": "Needless to say, there is more code to write here, like doing the meta parity check to detect 2-bit errors, but the idea is that almost all of the core logic from our scheme comes down to a single XOR reduction.",
  "translatedText": "2-बिट त्रुटी शोधण्यासाठी मेटा पॅरिटी चेक करण्यासारखे, इथे लिहिण्यासाठी आणखी कोड आहे हे सांगण्याची गरज नाही, परंतु कल्पना अशी आहे की आमच्या योजनेतील जवळजवळ सर्व मुख्य तर्क एका XOR कपातीवर येतात.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 651.88,
  "end": 663.76
 },
 {
  "input": "Now, depending on your comfort with binary and XORs and software in general, you may either find this perspective a little bit confusing, or so much more elegant and simple that you're wondering why we didn't just start with it from the get-go.",
  "translatedText": "आता, बायनरी आणि XORs आणि सर्वसाधारणपणे सॉफ्टवेअरसह तुमच्या सोयीनुसार, तुम्हाला एकतर हा दृष्टीकोन थोडा गोंधळात टाकणारा किंवा इतका अधिक मोहक आणि सोपा वाटू शकतो की, आम्ही सुरुवातीपासूनच याची सुरुवात का केली नाही याचा तुम्हाला प्रश्न पडतो.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 666.12,
  "end": 678.42
 },
 {
  "input": "Loosely speaking, the multiple parity check perspective is easier to think about when implementing Hamming codes in hardware very directly, and the XOR perspective is easiest to think about when doing it in software, from kind of a higher level.",
  "translatedText": "- जा हलक्या शब्दात सांगायचे तर, हार्डवेअरमध्ये हॅमिंग कोडची अंमलबजावणी करताना मल्टीपल पॅरिटी चेक दृष्टीकोन विचार करणे सोपे आहे, आणि XOR दृष्टीकोन हे सॉफ्टवेअरमध्ये करत असताना विचार करणे सर्वात सोपा आहे.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 679.14,
  "end": 690.5
 },
 {
  "input": "The first one is easiest to actually do by hand, and I think it does a better job instilling the core intuition underlying all of this, which is that the information required to locate a single error is related to the log of the size of the block, or in other words, it grows one bit at a time as the block size doubles.",
  "translatedText": "पहिली गोष्ट हाताने करणे सर्वात सोपी आहे, आणि मला वाटते की या सर्व गोष्टींमध्ये अंतर्भूत असलेली मूळ अंतर्ज्ञान स्थापित करणे अधिक चांगले कार्य करते, म्हणजे एक त्रुटी शोधण्यासाठी आवश्यक असलेली माहिती ब्लॉकच्या आकाराच्या लॉगशी संबंधित आहे. , किंवा दुसर्‍या शब्दात, ब्लॉकचा आकार दुप्पट होताना तो एकावेळी थोडा वाढतो.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 691.36,
  "end": 710.0
 },
 {
  "input": "The relevant fact here is that that information directly corresponds to how much redundancy we need.",
  "translatedText": "येथे संबंधित वस्तुस्थिती अशी आहे की ती माहिती आपल्याला किती रिडंडन्सीची आवश्यकता आहे याच्याशी थेट संबंधित आहे.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 711.02,
  "end": 716.06
 },
 {
  "input": "That's really what runs against most people's knee-jerk reaction when they first think about making a message resilient to errors, where usually copying the whole message is the first instinct that comes to mind.",
  "translatedText": "बहुतेक लोकांच्या गुडघेदुखीच्या प्रतिक्रियेच्या विरोधात हेच चालते जेव्हा ते प्रथम एखादे संदेश त्रुटींना लवचिक बनवण्याचा विचार करतात, जेथे सामान्यतः संपूर्ण संदेश कॉपी करणे ही मनात येणारी पहिली प्रवृत्ती असते.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 716.66,
  "end": 726.54
 },
 {
  "input": "And then, by the way, there is this whole other way that you sometimes see Hamming codes presented, where you multiply the message by one big matrix.",
  "translatedText": "आणि मग, तसे, हा संपूर्ण दुसरा मार्ग आहे ज्यामध्ये आपण कधीकधी हॅमिंग कोड सादर केलेले दिसतो, जिथे आपण संदेश एका मोठ्या मॅट्रिक्सने गुणाकार करतो.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 727.5,
  "end": 734.0
 },
 {
  "input": "It's kind of nice because it relates it to the broader family of linear codes, but I think that gives almost no intuition for where it comes from or how it scales.",
  "translatedText": "हे एक प्रकारचे छान आहे कारण ते रेखीय कोडच्या विस्तृत कुटुंबाशी संबंधित आहे, परंतु मला वाटते की ते कोठून येते किंवा ते कसे मोजले जाते याबद्दल जवळजवळ कोणतीही अंतर्ज्ञान देत नाही.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 734.67,
  "end": 743.06
 },
 {
  "input": "And speaking of scaling, you might notice that the efficiency of this scheme only gets better as we increase the block size.",
  "translatedText": "आणि स्केलिंगबद्दल बोलताना, तुमच्या लक्षात येईल की या योजनेची कार्यक्षमता केवळ आम्ही ब्लॉक आकार वाढवतो तेव्हाच अधिक चांगली होते.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 745.2,
  "end": 751.16
 },
 {
  "input": "For example, we saw that with 256 bits, you're using only 3% of that space for redundancy, and it just keeps getting better from there.",
  "translatedText": "उदाहरणार्थ, आम्ही पाहिले की 256 बिट्ससह, तुम्ही त्यातील केवळ 3% जागा रिडंडंसीसाठी वापरत आहात आणि ते तिथून चांगले होत आहे.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 755.0,
  "end": 762.66
 },
 {
  "input": "As the number of parity bits grows one by one, the block size keeps doubling.",
  "translatedText": "पॅरिटी बिट्सची संख्या एक एक करून वाढत असताना, ब्लॉकचा आकार दुप्पट होत जातो.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 763.3,
  "end": 767.34
 },
 {
  "input": "And if you take that to an extreme, you could have a block with, say, a million bits, where you would quite literally be playing 20 questions with your parity checks, and it uses only 21 parity bits.",
  "translatedText": "आणि जर तुम्ही ते टोकापर्यंत नेले, तर तुमच्याकडे एक दशलक्ष बिट्सचा ब्लॉक असू शकतो, जिथे तुम्ही तुमच्या पॅरिटी चेकसह अक्षरशः 20 प्रश्न खेळत असाल आणि ते फक्त 21 पॅरिटी बिट्स वापरते.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 769.0,
  "end": 780.02
 },
 {
  "input": "And if you step back to think about looking at a million bits and locating a single error, that genuinely feels crazy.",
  "translatedText": "आणि जर तुम्ही दशलक्ष बिट्स पाहण्याचा आणि एक त्रुटी शोधण्याचा विचार करण्यासाठी मागे पाऊल टाकले तर ते खरोखरच वेडे वाटते.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 780.74,
  "end": 787.06
 },
 {
  "input": "The problem, of course, is that with a larger block, the probability of seeing more than one or two bit errors goes up, and Hamming codes do not handle anything beyond that.",
  "translatedText": "अर्थातच, समस्या अशी आहे की मोठ्या ब्लॉकसह, एक किंवा दोन बिट त्रुटींपेक्षा जास्त दिसण्याची शक्यता वाढते आणि हॅमिंग कोड त्यापलीकडे काहीही हाताळत नाहीत.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 788.2,
  "end": 797.66
 },
 {
  "input": "So in practice, what you'd want is to find the right size so that the probability of too many bit flips isn't too high.",
  "translatedText": "त्यामुळे व्यवहारात, तुम्हाला योग्य आकार शोधायचा आहे जेणेकरून खूप जास्त बिट फ्लिप होण्याची शक्यता जास्त नसेल.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 798.32,
  "end": 804.3
 },
 {
  "input": "Also, in practice, errors tend to come in little bursts, which would totally ruin a single block, so one common tactic to help spread out a burst of errors across many different blocks is to interlace those blocks, like this, before they're sent out or stored.",
  "translatedText": "तसेच, व्यवहारात, त्रुटी थोड्या वेळाने येतात, ज्यामुळे एकाच ब्लॉकचा पूर्णपणे नाश होतो, त्यामुळे अनेक वेगवेगळ्या ब्लॉक्समध्ये त्रुटी पसरवण्यास मदत करण्यासाठी एक सामान्य युक्ती म्हणजे त्या ब्लॉक्सना एकमेकांशी जोडणे, जसे की, ते होण्यापूर्वी. बाहेर पाठवले किंवा साठवले.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 806.6,
  "end": 820.98
 },
 {
  "input": "Then again, a lot of this is rendered completely moot by more modern codes, like the much more commonly used Reed-Solomon algorithm, which handles burst errors particularly well, and it can be tuned to be resilient to a larger number of errors per block.",
  "translatedText": "नंतर पुन्हा, यापैकी बरेच काही अधिक आधुनिक कोडद्वारे पूर्णपणे विवादित केले जाते, जसे की सामान्यतः वापरल्या जाणार्‍या रीड-सोलोमन अल्गोरिदम, जे बर्स्ट एरर्स विशेषतः चांगल्या प्रकारे हाताळते आणि प्रत्येक ब्लॉकमध्ये मोठ्या संख्येने त्रुटींसाठी लवचिक होण्यासाठी ट्यून केले जाऊ शकते.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 825.58,
  "end": 838.82
 },
 {
  "input": "But that's a topic for another time.",
  "translatedText": "पण तो दुसर्‍या वेळी विषय आहे.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 839.36,
  "end": 841.34
 },
 {
  "input": "In his book The Art of Doing Science and Engineering, Hamming is wonderfully candid about just how meandering his discovery of this code was.",
  "translatedText": "त्याच्या द आर्ट ऑफ डुइंग सायन्स अँड इंजिनीअरिंग या पुस्तकात, हॅमिंगने या कोडचा शोध किती क्षुल्लक होता हे आश्चर्यकारकपणे स्पष्ट केले आहे.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 842.5,
  "end": 849.94
 },
 {
  "input": "He first tried all sorts of different schemes involving organizing the bits into parts of a higher dimensional lattice and strange things like this.",
  "translatedText": "त्याने प्रथम सर्व प्रकारच्या विविध योजना वापरून पाहिल्या ज्यामध्ये बिट्सला उच्च मितीय जाळीच्या भागांमध्ये व्यवस्थित करणे आणि यासारख्या विचित्र गोष्टींचा समावेश आहे.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 850.62,
  "end": 857.78
 },
 {
  "input": "The idea that it might be possible to get parity checks to conspire in a way that spells out the position of an error only came to Hamming when he stepped back after a bunch of other analysis and asked, okay, what is the most efficient I could conceivably be about this?",
  "translatedText": "एररच्या स्थितीचे स्पेलिंग अशा प्रकारे कट रचण्यासाठी पॅरिटी चेक मिळवणे शक्य आहे ही कल्पना हॅमिंगला तेव्हाच आली जेव्हा त्याने इतर विश्लेषणाच्या गुच्छानंतर मागे पाऊल टाकले आणि विचारले, ठीक आहे, मी सर्वात कार्यक्षम काय आहे? कदाचित या बद्दल असेल?",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 858.3,
  "end": 871.52
 },
 {
  "input": "He was also candid about how important it was that parity checks were already on his mind, which would have been way less common back in the 1940s than it is today.",
  "translatedText": "पॅरिटी चेक त्याच्या मनात आधीपासूनच होते हे किती महत्वाचे आहे याबद्दल ते स्पष्टपणे सांगत होते, जे आजच्या पेक्षा 1940 च्या दशकात कमी सामान्य झाले असते.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 872.62,
  "end": 881.22
 },
 {
  "input": "There are like half a dozen times throughout this book that he references the Louis Pasteur quote, luck favors a prepared mind.",
  "translatedText": "या पुस्तकात अर्धा डझन वेळा त्यांनी लुई पाश्चरच्या कोटाचा संदर्भ दिला आहे, नशीब तयार मनाला अनुकूल आहे.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 881.92,
  "end": 888.22
 },
 {
  "input": "Clever ideas often look deceptively simple in hindsight, which makes them easy to underappreciate.",
  "translatedText": "हुशार कल्पना अनेकदा भ्रामकपणे सोप्या दिसतात, ज्यामुळे त्यांचे कमी कौतुक करणे सोपे होते.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 889.32,
  "end": 894.3
 },
 {
  "input": "Right now my honest hope is that Hamming codes, or at least the possibility of such codes, feels almost obvious to you.",
  "translatedText": "सध्या माझी प्रामाणिक आशा आहे की हॅमिंग कोड्स किंवा किमान अशा कोडची शक्यता तुम्हाला जवळजवळ स्पष्ट वाटते.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 894.96,
  "end": 901.3
 },
 {
  "input": "But you shouldn't fool yourself into thinking that they actually are obvious, because they definitely aren't.",
  "translatedText": "परंतु ते प्रत्यक्षात स्पष्ट आहेत असा विचार करून तुम्ही स्वत:ला फसवू नका, कारण ते नक्कीच नाहीत.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 901.66,
  "end": 906.82
 },
 {
  "input": "Part of the reason that clever ideas look deceptively easy is that we only ever see the final result, cleaning up what was messy, never mentioning all of the wrong turns, underselling just how vast the space of explorable possibilities is at the start of a problem solving process, all of that.",
  "translatedText": "हुशार कल्पना भ्रामकपणे सोप्या दिसण्याच्या कारणाचा एक भाग हा आहे की आपण फक्त अंतिम परिणाम पाहतो, जे गोंधळलेले होते ते साफ करणे, सर्व चुकीच्या वळणांचा कधीही उल्लेख न करणे, एखाद्या समस्येच्या सुरुवातीला शोधण्यायोग्य शक्यतांची जागा किती विस्तीर्ण आहे हे कमी करणे. सोडवण्याची प्रक्रिया, ते सर्व.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 907.88,
  "end": 922.86
 },
 {
  "input": "But this is true in general.",
  "translatedText": "पण हे सर्वसाधारणपणे खरे आहे.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 923.82,
  "end": 924.9
 },
 {
  "input": "I think for some special inventions, there's a second, deeper reason that we underappreciate them.",
  "translatedText": "मला असे वाटते की काही विशेष शोधांसाठी, एक दुसरे, सखोल कारण आहे की आपण त्यांचे कमी कौतुक करतो.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 924.9,
  "end": 930.04
 },
 {
  "input": "Thinking of information in terms of bits had only really coalesced into a full theory by 1948, with Claude Shannon's seminal paper on information theory.",
  "translatedText": "माहितीच्या सिद्धांतावर क्लॉड शॅननच्या मुख्य पेपरसह 1948 पर्यंत बिट्सच्या संदर्भात माहितीचा विचार करणे खरोखरच संपूर्ण सिद्धांतामध्ये एकत्रित झाले होते.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 930.84,
  "end": 938.64
 },
 {
  "input": "This was essentially concurrent with when Hamming developed his algorithm.",
  "translatedText": "जेव्हा हॅमिंगने त्याचे अल्गोरिदम विकसित केले तेव्हा हे मूलत: समांतर होते.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 939.28,
  "end": 942.54
 },
 {
  "input": "This was the same foundational paper that showed, in a certain sense, that efficient error correction is always possible, no matter how high the probability of bit flips, at least in theory.",
  "translatedText": "हा तोच पायाभूत कागद होता ज्याने एका विशिष्ट अर्थाने दाखवून दिले की, किमान सिद्धांतानुसार, बिट फ्लिपची संभाव्यता कितीही उच्च असली तरीही कार्यक्षम त्रुटी सुधारणे नेहमीच शक्य असते.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 943.3,
  "end": 952.9
 },
 {
  "input": "Shannon and Hamming, by the way, shared an office in Bell Labs, despite working on very different things, which hardly seems coincidental here.",
  "translatedText": "शॅनन आणि हॅमिंग यांनी अगदी वेगळ्या गोष्टींवर काम करूनही बेल लॅबमध्ये एक ऑफिस शेअर केले, जे इथे योगायोगच नाही.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 953.7,
  "end": 961.16
 },
 {
  "input": "Fast forward several decades, and these days, many of us are so immersed in thinking about bits and information that it's easy to overlook just how distinct this way of thinking was.",
  "translatedText": "अनेक दशके फास्ट फॉरवर्ड, आणि आजकाल, आपल्यापैकी बरेच जण बिट्स आणि माहितीबद्दल विचार करण्यात इतके मग्न आहेत की विचार करण्याची ही पद्धत किती वेगळी होती याकडे दुर्लक्ष करणे सोपे आहे.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 962.38,
  "end": 972.34
 },
 {
  "input": "Ironically, the ideas that most profoundly shape the ways that a future generation thinks will end up looking to that future generation simpler than they really are.",
  "translatedText": "गंमत म्हणजे, भावी पिढीच्या विचारसरणीला सर्वात गहनपणे आकार देणार्‍या कल्पना त्या भावी पिढीला त्यांच्यापेक्षा सोप्या वाटतील.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 973.1,
  "end": 982.26
 }
]