[
 {
  "input": "I'm assuming that everybody here is coming from part 1.",
  "translatedText": "ఇక్కడ అందరూ పార్ట్ 1 నుండి వస్తున్నారని నేను ఊహిస్తున్నాను.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 0.0,
  "end": 2.56
 },
 {
  "input": "We were talking about Hamming codes, a way to create a block of data where most of the bits carry a meaningful message, while a few others act as a kind of redundancy, in such a way that if any bit gets flipped, either a message bit or a redundancy bit, anything in this block, a receiver is going to be able to identify that there was an error, and how to fix it.",
  "translatedText": "మేము హామింగ్ కోడ్‌ల గురించి మాట్లాడుతున్నాము, చాలా బిట్‌లు అర్థవంతమైన సందేశాన్ని కలిగి ఉండే డేటా బ్లాక్‌ను సృష్టించే మార్గం, మరికొన్ని ఒక రకమైన రిడెండెన్సీగా పనిచేస్తాయి, ఆ విధంగా ఏదైనా బిట్ తిప్పబడితే, సందేశం బిట్ లేదా రిడెండెన్సీ బిట్, ఈ బ్లాక్‌లో ఏదైనా, రిసీవర్ లోపం ఉందని మరియు దాన్ని ఎలా పరిష్కరించాలో గుర్తించగలదు.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 3.06,
  "end": 21.24
 },
 {
  "input": "The basic idea presented there was how to use multiple parity checks to binary search your way down to the error.",
  "translatedText": "బైనరీ శోధన కోసం బహుళ పారిటీ తనిఖీలను ఎలా ఉపయోగించాలి అనేది అక్కడ అందించబడిన ప్రాథమిక ఆలోచన.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 21.88,
  "end": 27.16
 },
 {
  "input": "In that video the goal was to make Hamming codes feel as hands-on and rediscoverable as possible.",
  "translatedText": "ఆ వీడియోలో హామింగ్ కోడ్‌లను సాధ్యమైనంత వరకు అందుబాటులో ఉంచడం మరియు తిరిగి కనుగొనగలిగేలా చేయడం లక్ష్యం.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 28.98,
  "end": 34.6
 },
 {
  "input": "But as you start to think about actually implementing this, either in software or hardware, that framing may actually undersell how elegant these codes really are.",
  "translatedText": "సాఫ్ట్‌వేర్ లేదా హార్డ్‌వేర్‌లో దీన్ని అమలు చేయడం గురించి మీరు ఆలోచించడం ప్రారంభించినప్పుడు, ఈ కోడ్‌లు నిజంగా ఎంత సొగసైనవో ఆ ఫ్రేమింగ్ వాస్తవానికి తక్కువగా ఉంటుంది.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 35.18,
  "end": 43.46
 },
 {
  "input": "You might think that you need to write an algorithm that keeps track of all the possible error locations and cuts that group in half with each check, but it's actually way, way simpler than that.",
  "translatedText": "సాధ్యమయ్యే అన్ని ఎర్రర్ లొకేషన్‌లను ట్రాక్ చేసే మరియు ప్రతి చెక్‌తో ఆ సమూహాన్ని సగానికి తగ్గించే అల్గారిథమ్‌ను మీరు వ్రాయవలసి ఉంటుందని మీరు అనుకోవచ్చు, అయితే ఇది నిజానికి దాని కంటే సరళమైనది.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 43.92,
  "end": 53.48
 },
 {
  "input": "If you read out the answers to the four parity checks we did in the last video, all as 1s and 0s instead of yeses and nos, it literally spells out the position of the error in binary.",
  "translatedText": "మేము చివరి వీడియోలో చేసిన నాలుగు సమానత్వ తనిఖీలకు సమాధానాలను మీరు చదివితే, అవును మరియు సంఖ్యలకు బదులుగా 1 సె మరియు 0 సె, ఇది బైనరీలో లోపం యొక్క స్థానాన్ని అక్షరాలా వివరిస్తుంది.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 53.94,
  "end": 64.08
 },
 {
  "input": "For example, the number 7 in binary looks like 0111, essentially saying that it's 4 plus 2 plus 1.",
  "translatedText": "ఉదాహరణకు, బైనరీలో 7 సంఖ్య 0111 లాగా కనిపిస్తుంది, ముఖ్యంగా ఇది 4 ప్లస్ 2 ప్లస్ 1 అని చెబుతోంది.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 64.78,
  "end": 71.26
 },
 {
  "input": "And notice where the position 7 sits, it does affect the first of our parity groups, and the second, and the third, but not the last.",
  "translatedText": "మరియు స్థానం 7 ఎక్కడ కూర్చుందో గమనించండి, ఇది మా సమానత్వ సమూహాలలో మొదటిదానిని ప్రభావితం చేస్తుంది మరియు రెండవది మరియు మూడవది, కానీ చివరిది కాదు.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 72.54,
  "end": 81.74
 },
 {
  "input": "So reading the results of those four checks from bottom to top indeed does spell out the position of the error.",
  "translatedText": "కాబట్టి ఆ నాలుగు చెక్‌ల ఫలితాలను దిగువ నుండి పైకి చదవడం నిజంగా లోపం యొక్క స్థితిని తెలియజేస్తుంది.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 82.22,
  "end": 87.54
 },
 {
  "input": "There's nothing special about the example 7, this works in general, and this makes the logic for implementing the whole scheme in hardware shockingly simple.",
  "translatedText": "ఉదాహరణ 7 గురించి ప్రత్యేకంగా ఏమీ లేదు, ఇది సాధారణంగా పని చేస్తుంది మరియు ఇది హార్డ్‌వేర్‌లో మొత్తం పథకాన్ని అమలు చేయడానికి తర్కాన్ని దిగ్భ్రాంతికరంగా సులభం చేస్తుంది.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 88.32,
  "end": 95.82
 },
 {
  "input": "Now if you want to see why this magic happens, take these 16 index labels for our positions, but instead of writing them in base 10, let's write them all in binary, running from 0000 up to 1111.",
  "translatedText": "ఇప్పుడు మీరు ఈ మాయాజాలం ఎందుకు జరుగుతుందో చూడాలనుకుంటే, మా స్థానాల కోసం ఈ 16 సూచిక లేబుల్‌లను తీసుకోండి, కానీ వాటిని బేస్ 10లో వ్రాయడానికి బదులుగా, 0000 నుండి 1111 వరకు నడుస్తున్న బైనరీలో అన్నింటినీ వ్రాస్దాం.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 97.24,
  "end": 109.88
 },
 {
  "input": "As we put these binary labels back into their boxes, let me emphasize that they are distinct from the data that's actually being sent.",
  "translatedText": "మేము ఈ బైనరీ లేబుల్‌లను వాటి పెట్టెల్లోకి తిరిగి ఉంచినప్పుడు, అవి వాస్తవానికి పంపబడుతున్న డేటా నుండి విభిన్నంగా ఉన్నాయని నేను నొక్కిచెబుతున్నాను.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 110.56,
  "end": 117.8
 },
 {
  "input": "They're nothing more than a conceptual label to help you and me understand where the four parity groups came from.",
  "translatedText": "నాలుగు సమానత్వ సమూహాలు ఎక్కడ నుండి వచ్చాయో అర్థం చేసుకోవడంలో మీకు మరియు నాకు సహాయం చేయడానికి అవి సంభావిత లేబుల్ తప్ప మరేమీ కాదు.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 118.32,
  "end": 123.5
 },
 {
  "input": "The elegance of having everything we're looking at be described in binary is maybe undercut by the confusion of having everything we're looking at being described in binary.",
  "translatedText": "మనం చూస్తున్న ప్రతిదీ బైనరీలో వర్ణించబడటం యొక్క సొగసైనది బహుశా మనం చూస్తున్న ప్రతిదాన్ని బైనరీలో వివరించడం వల్ల కలిగే గందరగోళం వల్ల తగ్గుతుంది.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 124.14,
  "end": 132.36
 },
 {
  "input": "It's worth it, though.",
  "translatedText": "అయితే ఇది విలువైనదే.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 133.02,
  "end": 134.12
 },
 {
  "input": "Focus your attention just on that last bit of all of these labels, and then highlight the positions where that final bit is a 1.",
  "translatedText": "ఈ లేబుల్‌లన్నింటిలో చివరి బిట్‌పై మాత్రమే మీ దృష్టిని కేంద్రీకరించండి, ఆపై ఆ చివరి బిట్ 1 ఉన్న స్థానాలను హైలైట్ చేయండి.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 134.8,
  "end": 143.22
 },
 {
  "input": "What we get is the first of our four parity groups, which means you can interpret that first check as asking, hey, if there's an error, is the final bit in the position of that error a 1?",
  "translatedText": "మేము పొందేది మా నాలుగు సమానత్వ సమూహాలలో మొదటిది, అంటే మీరు ఆ మొదటి చెక్‌ని అడుగుతున్నట్లు అర్థం చేసుకోవచ్చు, హే, లోపం ఉన్నట్లయితే, ఆ లోపం యొక్క స్థానం 1గా ఉందా?",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 144.24,
  "end": 155.74
 },
 {
  "input": "Similarly, if you focus on the second to last bit, and highlight all the positions where that's a 1, you get the second parity group from our scheme.",
  "translatedText": "అదేవిధంగా, మీరు రెండవ నుండి చివరి బిట్‌పై దృష్టి సారించి, అది 1 ఉన్న అన్ని స్థానాలను హైలైట్ చేస్తే, మీరు మా పథకం నుండి రెండవ సమాన సమూహాన్ని పొందుతారు.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 158.2,
  "end": 166.16
 },
 {
  "input": "In other words, that second check is asking, hey, me again, if there's an error, is the second to last bit of that position a 1?",
  "translatedText": "మరో మాటలో చెప్పాలంటే, ఆ రెండవ చెక్ అడుగుతోంది, హే, నన్ను మళ్లీ, లోపం ఉంటే, ఆ స్థానం యొక్క రెండవ నుండి చివరి బిట్ 1నా?",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 166.74,
  "end": 174.5
 },
 {
  "input": "And so on.",
  "translatedText": "మరియు అందువలన న.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 175.76,
  "end": 176.9
 },
 {
  "input": "The third parity check covers every position whose third to last bit is turned on, and the last one covers the last eight positions, those ones whose highest order bit is a 1.",
  "translatedText": "మూడవ పారిటీ చెక్ మూడవ నుండి చివరి బిట్ ఆన్ చేయబడిన ప్రతి స్థానాన్ని కవర్ చేస్తుంది మరియు చివరిది చివరి ఎనిమిది స్థానాలను కవర్ చేస్తుంది, అత్యధిక ఆర్డర్ బిట్ 1గా ఉంటుంది.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 177.22,
  "end": 188.74
 },
 {
  "input": "Everything we did earlier is the same as answering these four questions, which in turn is the same as spelling out a position in binary.",
  "translatedText": "మేము ఇంతకు ముందు చేసినవన్నీ ఈ నాలుగు ప్రశ్నలకు సమాధానమివ్వడం వలెనే ఉంటాయి, ఇది బైనరీలో ఒక స్థానాన్ని స్పెల్లింగ్ చేయడం వలె ఉంటుంది.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 189.74,
  "end": 197.74
 },
 {
  "input": "I hope this makes two things clearer.",
  "translatedText": "ఇది రెండు విషయాలను స్పష్టం చేస్తుందని నేను ఆశిస్తున్నాను.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 199.62,
  "end": 201.48
 },
 {
  "input": "The first is how to systematically generalize to block sizes that are bigger powers of two.",
  "translatedText": "మొదటిది రెండు పెద్ద శక్తులు ఉండే పరిమాణాలను బ్లాక్ చేయడానికి క్రమపద్ధతిలో సాధారణీకరించడం ఎలా.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 202.04,
  "end": 206.46
 },
 {
  "input": "If it takes more bits to describe each position, like six bits to describe 64 spots, then each of those bits gives you one of the parity groups that we need to check.",
  "translatedText": "64 స్పాట్‌లను వివరించడానికి ఆరు బిట్‌ల వంటి ప్రతి స్థానాన్ని వివరించడానికి మరిన్ని బిట్‌లు తీసుకుంటే, ఆ బిట్‌లలో ప్రతి ఒక్కటి మేము తనిఖీ చేయాల్సిన సమాన సమూహాలలో ఒకదాన్ని మీకు అందిస్తుంది.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 206.96,
  "end": 216.68
 },
 {
  "input": "Those of you who watched the chessboard puzzle I did with Matt Parker might find all this exceedingly familiar.",
  "translatedText": "మీలో మాట్ పార్కర్‌తో నేను చేసిన చదరంగం పజిల్‌ని చూసిన వారికి ఇవన్నీ బాగా తెలిసి ఉండవచ్చు.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 218.4,
  "end": 223.18
 },
 {
  "input": "It's the same core logic, but solving a different problem, and applied to a 64-squared chessboard.",
  "translatedText": "ఇది అదే ప్రధాన తర్కం, కానీ వేరొక సమస్యను పరిష్కరిస్తుంది మరియు 64-స్క్వేర్డ్ చెస్‌బోర్డ్‌కు వర్తించబడుతుంది.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 223.66,
  "end": 228.78
 },
 {
  "input": "The second thing I hope this makes clear is why our parity bits are sitting in the positions that are powers of two, for example 1, 2, 4, and 8.",
  "translatedText": "ఇది స్పష్టం చేస్తుందని నేను ఆశిస్తున్న రెండవ విషయం ఏమిటంటే, మా సమానత్వ బిట్‌లు రెండు శక్తులైన స్థానాల్లో ఎందుకు కూర్చున్నాయో, ఉదాహరణకు 1, 2, 4 మరియు 8.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 229.88,
  "end": 237.32
 },
 {
  "input": "These are the positions whose binary representation has just a single bit turned on.",
  "translatedText": "బైనరీ ప్రాతినిధ్యం కేవలం ఒక్క బిట్ మాత్రమే ఆన్ చేసిన స్థానాలు ఇవి.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 238.0,
  "end": 243.0
 },
 {
  "input": "What that means is each of those parity bits sits inside one and only one of the four parity groups.",
  "translatedText": "దాని అర్థం ఏమిటంటే, ఆ పారిటీ బిట్‌లలో ప్రతి ఒక్కటి నాలుగు సమాన సమూహాలలో ఒకటి మాత్రమే ఉంటుంది.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 243.6,
  "end": 249.46
 },
 {
  "input": "You can also see this in larger examples, where no matter how big you get, each parity bit conveniently touches only one of the groups.",
  "translatedText": "మీరు దీన్ని పెద్ద ఉదాహరణలలో కూడా చూడవచ్చు, ఇక్కడ మీరు ఎంత పెద్దదైనా సరే, ప్రతి పారిటీ బిట్ సౌకర్యవంతంగా సమూహాలలో ఒకదానిని మాత్రమే తాకుతుంది.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 252.04,
  "end": 259.34
 },
 {
  "input": "Once you understand that these parity checks that we've focused so much of our time on are nothing more than a clever way to spell out the position of an error in binary, then we can draw a connection with a different way to think about hamming codes, one that is arguably a lot simpler and more elegant, and which can basically be written down with a single line of code.",
  "translatedText": "మేము మా సమయాన్ని ఎక్కువగా కేంద్రీకరించిన ఈ సమానత్వ తనిఖీలు బైనరీలో లోపం యొక్క స్థానాన్ని వివరించడానికి ఒక తెలివైన మార్గం తప్ప మరేమీ కాదని మీరు అర్థం చేసుకున్న తర్వాత, మేము హామింగ్ గురించి ఆలోచించడానికి వేరొక మార్గంతో కనెక్షన్‌ని పొందవచ్చు. కోడ్‌లు, ఇది నిస్సందేహంగా చాలా సరళమైనది మరియు మరింత సొగసైనది మరియు ఇది ప్రాథమికంగా ఒకే లైన్ కోడ్‌తో వ్రాయబడుతుంది.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 265.6,
  "end": 283.24
 },
 {
  "input": "It's based on the XOR function.",
  "translatedText": "ఇది XOR ఫంక్షన్‌పై ఆధారపడి ఉంటుంది.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 283.66,
  "end": 285.5
 },
 {
  "input": "XOR, for those of you who don't know, stands for exclusive or.",
  "translatedText": "XOR, మీలో తెలియని వారికి, ప్రత్యేకమైనది లేదా.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 286.94,
  "end": 290.22
 },
 {
  "input": "When you take the XOR of two bits, it's going to return a 1 if either one of those bits is turned on, but not if both are turned on or off.",
  "translatedText": "మీరు రెండు బిట్‌ల XORను తీసుకున్నప్పుడు, ఆ బిట్‌లలో ఒకదానిని ఆన్ చేసినట్లయితే అది 1ని తిరిగి ఇస్తుంది, కానీ రెండూ ఆన్ లేదా ఆఫ్ చేయబడితే కాదు.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 290.78,
  "end": 299.36
 },
 {
  "input": "Phrased differently, it's the parity of these two bits.",
  "translatedText": "విభిన్నంగా పదబంధం, ఇది ఈ రెండు బిట్‌ల సమానత్వం.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 300.1,
  "end": 302.98
 },
 {
  "input": "As a math person, I prefer to think about it as addition mod 2.",
  "translatedText": "గణిత వ్యక్తిగా, నేను దాని గురించి అదనపు మోడ్ 2గా ఆలోచించాలనుకుంటున్నాను.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 303.54,
  "end": 306.76
 },
 {
  "input": "We also commonly talk about the XOR of two different bit strings, which basically does this component by component.",
  "translatedText": "మేము సాధారణంగా రెండు వేర్వేరు బిట్ స్ట్రింగ్‌ల XOR గురించి మాట్లాడుతాము, ఇది ప్రాథమికంగా ఈ కాంపోనెంట్‌ను కాంపోనెంట్‌గా చేస్తుంది.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 307.36,
  "end": 313.44
 },
 {
  "input": "It's like addition, but where you never carry.",
  "translatedText": "ఇది అదనంగా వంటిది, కానీ మీరు ఎక్కడికి తీసుకెళ్లలేరు.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 313.68,
  "end": 315.72
 },
 {
  "input": "Again, the more mathematically inclined might prefer to think of this as adding two vectors and reducing mod 2.",
  "translatedText": "మళ్ళీ, గణితశాస్త్రపరంగా ఎక్కువ మొగ్గు ఉన్నవారు దీనిని రెండు వెక్టర్‌లను జోడించడం మరియు మోడ్ 2ను తగ్గించడం వంటిదిగా భావించవచ్చు.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 316.5,
  "end": 322.48
 },
 {
  "input": "If you open up some Python right now and apply the caret operation between two integers, this is what it's doing but to the bit representations of those numbers under the hood.",
  "translatedText": "మీరు ప్రస్తుతం కొన్ని పైథాన్‌ని తెరిచి, రెండు పూర్ణాంకాల మధ్య కేరెట్ ఆపరేషన్‌ను వర్తింపజేస్తే, ఇది హుడ్ కింద ఉన్న ఆ సంఖ్యల బిట్ రిప్రజెంటేషన్‌లకు మాత్రమే చేస్తుంది.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 323.5,
  "end": 332.94
 },
 {
  "input": "The key point for you and me is that taking the XOR of many different bit strings is effectively a way to compute the parodies of a bunch of separate groups, like so with the columns, all in one fell swoop.",
  "translatedText": "మీకు మరియు నాకు ముఖ్యమైన అంశం ఏమిటంటే, అనేక విభిన్న బిట్ స్ట్రింగ్‌ల యొక్క XOR తీసుకోవడం అనేది నిలువు వరుసల మాదిరిగానే, ప్రత్యేక సమూహాల యొక్క పేరడీలను గణించడానికి ఒక మార్గం.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 334.96,
  "end": 347.14
 },
 {
  "input": "This gives us a rather snazzy way to think about the multiple parity checks from our Hamming code algorithm as all being packaged together into one single operation.",
  "translatedText": "ఇది మా హామింగ్ కోడ్ అల్గారిథమ్ నుండి బహుళ పారిటీ చెక్‌ల గురించి ఆలోచించడానికి చాలా చురుకైన మార్గాన్ని అందిస్తుంది, ఎందుకంటే అన్నీ ఒకే ఆపరేషన్‌లో ప్యాక్ చేయబడతాయి.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 351.26,
  "end": 358.78
 },
 {
  "input": "Though at first glance it does look very different.",
  "translatedText": "మొదటి చూపులో ఇది చాలా భిన్నంగా కనిపించినప్పటికీ.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 359.48,
  "end": 362.18
 },
 {
  "input": "Specifically write down the 16 positions in binary, like we had before, and now highlight the positions where the message bit is turned on to a 1, and then collect these positions into one big column and take the XOR.",
  "translatedText": "ప్రత్యేకంగా బైనరీలో 16 స్థానాలను వ్రాయండి, మనం ఇంతకు ముందు ఉన్నట్లుగా, ఇప్పుడు మెసేజ్ బిట్ 1కి ఆన్ చేయబడిన స్థానాలను హైలైట్ చేయండి, ఆపై ఈ స్థానాలను ఒక పెద్ద నిలువు వరుసలో సేకరించి XOR తీసుకోండి.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 362.82,
  "end": 377.1
 },
 {
  "input": "You can probably guess that the 4 bits sitting at the bottom as a result are the same as the 4 parity checks we've come to know and love, but take a moment to actually think about why exactly.",
  "translatedText": "ఫలితంగా దిగువన కూర్చున్న 4 బిట్‌లు మనకు తెలిసిన మరియు ఇష్టపడే 4 పారిటీ చెక్‌ల మాదిరిగానే ఉంటాయని మీరు బహుశా ఊహించవచ్చు, అయితే సరిగ్గా ఎందుకు అని ఆలోచించడానికి కొంత సమయం కేటాయించండి.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 379.26,
  "end": 389.2
 },
 {
  "input": "This last column, for example, is counting all of the positions whose last bit is a 1, but we're already limited only to the highlighted positions, so it's effectively counting how many highlighted positions came from the first parity group.",
  "translatedText": "ఈ చివరి నిలువు వరుస, ఉదాహరణకు, చివరి బిట్ 1 ఉన్న అన్ని స్థానాలను గణిస్తోంది, కానీ మేము ఇప్పటికే హైలైట్ చేసిన స్థానాలకు మాత్రమే పరిమితం చేసాము, కాబట్టి ఇది మొదటి సమూహ సమూహం నుండి ఎన్ని హైలైట్ చేయబడిన స్థానాలను ప్రభావవంతంగా లెక్కిస్తుంది.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 392.22,
  "end": 405.76
 },
 {
  "input": "Does that make sense?",
  "translatedText": "అది సమంజసమా?",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 406.24,
  "end": 406.8
 },
 {
  "input": "Likewise, the next column counts how many positions are in the second parity group, the positions whose second to last bit is a 1, and which are also highlighted, and so on.",
  "translatedText": "అదేవిధంగా, తదుపరి నిలువు వరుస రెండవ సమాన సమూహంలో ఎన్ని స్థానాలు ఉన్నాయి, రెండవ నుండి చివరి బిట్ 1 వరకు ఉన్న స్థానాలు మరియు హైలైట్ చేయబడినవి మరియు మొదలైనవి కూడా లెక్కించబడతాయి.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 409.08,
  "end": 420.0
 },
 {
  "input": "It's really just a small shift in perspective on the same thing we've been doing.",
  "translatedText": "ఇది నిజంగా మనం చేస్తున్న అదే పనిపై దృష్టికోణంలో చిన్న మార్పు.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 420.26,
  "end": 423.96
 },
 {
  "input": "And so you know where it goes from here.",
  "translatedText": "మరియు అది ఇక్కడ నుండి ఎక్కడికి వెళుతుందో మీకు తెలుసు.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 427.76,
  "end": 429.6
 },
 {
  "input": "The sender is responsible for toggling some of the special parity bits to make sure the sum works out to be 0000.",
  "translatedText": "మొత్తం 0000 వరకు పని చేస్తుందని నిర్ధారించుకోవడానికి కొన్ని ప్రత్యేక పారిటీ బిట్‌లను టోగుల్ చేయడానికి పంపినవారు బాధ్యత వహిస్తారు.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 430.0,
  "end": 436.56
 },
 {
  "input": "Now once we have it like this, this gives us a really nice way to think about why these four resulting bits at the bottom directly spell out the position of an error.",
  "translatedText": "ఇప్పుడు మనం దీన్ని ఇలా కలిగి ఉంటే, దిగువన ఉన్న ఈ నాలుగు ఫలిత బిట్‌లు నేరుగా లోపం యొక్క స్థానాన్ని ఎందుకు వివరిస్తాయి అనే దాని గురించి ఆలోచించడానికి ఇది మాకు నిజంగా మంచి మార్గాన్ని ఇస్తుంది.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 439.04,
  "end": 447.58
 },
 {
  "input": "Let's say some bit in this block gets toggled from a 0 to a 1.",
  "translatedText": "ఈ బ్లాక్‌లోని కొంత బిట్ 0 నుండి 1కి టోగుల్ చేయబడిందని అనుకుందాం.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 448.46,
  "end": 451.86
 },
 {
  "input": "What that means is that the position of that bit is now going to be included in the total XOR, which changes the sum from being 0 to instead being this newly included value, the position of the error.",
  "translatedText": "దీని అర్థం ఏమిటంటే, ఆ బిట్ యొక్క స్థానం ఇప్పుడు మొత్తం XORలో చేర్చబడుతుంది, ఇది మొత్తాన్ని 0 నుండి బదులుగా ఈ కొత్తగా చేర్చబడిన విలువ, లోపం యొక్క స్థానంగా మారుస్తుంది.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 452.6,
  "end": 463.82
 },
 {
  "input": "Slightly less obviously, the same is true if there's an error that changes a 1 to a 0.",
  "translatedText": "కొంచెం తక్కువ స్పష్టంగా, 1 నుండి 0కి మార్చే లోపం ఉన్నట్లయితే అదే నిజం.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 464.46,
  "end": 469.36
 },
 {
  "input": "You see, if you add a bit string together twice, it's the same as not having it there at all, basically because in this world 1 plus 1 equals 0.",
  "translatedText": "మీరు చూడండి, మీరు ఒక బిట్ స్ట్రింగ్‌ని రెండుసార్లు కలిపితే, అది అక్కడ లేనట్లే, ప్రాథమికంగా ఈ ప్రపంచంలో 1 ప్లస్ 1 0కి సమానం.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 470.18,
  "end": 477.94
 },
 {
  "input": "So adding a copy of this position to the total sum has the same effect as we're moving it.",
  "translatedText": "కాబట్టి మొత్తం మొత్తానికి ఈ స్థానం యొక్క కాపీని జోడించడం వలన మనం దానిని తరలిస్తున్నట్లే ప్రభావం ఉంటుంది.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 478.92,
  "end": 484.3
 },
 {
  "input": "And that effect, again, is that the total result at the bottom here spells out the position of the error.",
  "translatedText": "మరియు ఆ ప్రభావం, మళ్ళీ, ఇక్కడ దిగువన ఉన్న మొత్తం ఫలితం లోపం యొక్క స్థానాన్ని తెలియజేస్తుంది.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 485.16,
  "end": 490.7
 },
 {
  "input": "To illustrate how elegant this is, let me show that one line of Python code I referenced before, which will capture almost all of the logic on the receiver's end.",
  "translatedText": "ఇది ఎంత సొగసైనదో వివరించడానికి, నేను ఇంతకు ముందు ప్రస్తావించిన పైథాన్ కోడ్‌లోని ఒక లైన్‌ను చూపుతాను, ఇది రిసీవర్ చివరన దాదాపు అన్ని లాజిక్‌లను సంగ్రహిస్తుంది.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 493.04,
  "end": 501.44
 },
 {
  "input": "We'll start by creating a random array of 16 1s and 0s to simulate the data block, and I'll give it the name bits, but of course in practice this would be something we're receiving from a sender, and instead of being random it would be carrying 11 data bits together with 5 parity bits.",
  "translatedText": "మేము డేటా బ్లాక్‌ను అనుకరించడానికి 16 1సె మరియు 0 సె యాదృచ్ఛిక శ్రేణిని సృష్టించడం ద్వారా ప్రారంభిస్తాము మరియు నేను దానికి బిట్‌లను ఇస్తాను, అయితే ఆచరణలో ఇది మనం పంపినవారి నుండి స్వీకరించేదే అవుతుంది మరియు బదులుగా యాదృచ్ఛికంగా ఇది 5 పారిటీ బిట్‌లతో కలిపి 11 డేటా బిట్‌లను కలిగి ఉంటుంది.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 502.08,
  "end": 517.4
 },
 {
  "input": "If I call the function enumerateBits, what it does is pair together each of those bits with a corresponding index, in this case running from 0 up to 15.",
  "translatedText": "నేను ఫంక్షన్ enumerateBits అని పిలిస్తే, అది చేసేది ఆ బిట్‌లను సంబంధిత సూచికతో జత చేయడం, ఈ సందర్భంలో 0 నుండి 15 వరకు నడుస్తుంది.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 518.12,
  "end": 527.0
 },
 {
  "input": "So if we then create a list that loops over all of these pairs, pairs that look like i, and then we pull out just the i value, just the index, well it's not that exciting, we just get back those indices 0 through 15.",
  "translatedText": "కాబట్టి మనం ఈ అన్ని జతలపై లూప్ చేసే జాబితాను సృష్టించినట్లయితే, i లాగా కనిపించే జంటలు, ఆపై మేము కేవలం i విలువను, కేవలం సూచికను తీసివేస్తే, అది అంత ఉత్తేజకరమైనది కాదు, మేము ఆ సూచికలను 0 నుండి 15 వరకు తిరిగి పొందుతాము.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 528.18,
  "end": 541.34
 },
 {
  "input": "But if we add on the condition to only do this if bit, meaning if that bit is a 1 and not a 0, well then it pulls out only the positions where the corresponding bit is turned on.",
  "translatedText": "కానీ మనం దీన్ని బిట్ అయితే మాత్రమే చేయాలనే షరతును జోడిస్తే, అంటే ఆ బిట్ 1 మరియు 0 కాకపోతే, అది సంబంధిత బిట్ ఆన్ చేయబడిన స్థానాలను మాత్రమే బయటకు తీస్తుంది.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 541.68,
  "end": 552.66
 },
 {
  "input": "In this case it looks like those positions are 0, 4, 6, 9, etc.",
  "translatedText": "ఈ సందర్భంలో ఆ స్థానాలు 0, 4, 6, 9, మొదలైనవి ఉన్నట్లు కనిపిస్తోంది.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 553.38,
  "end": 557.96
 },
 {
  "input": "What we want is to collect together all of those positions, the positions of the bits that are turned on, and then XOR them together.",
  "translatedText": "మనకు కావలసినది ఏమిటంటే, ఆ స్థానాలు, ఆన్ చేయబడిన బిట్‌ల స్థానాలు అన్నీ కలిపి, ఆపై వాటిని కలిపి XOR చేయడం.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 559.98,
  "end": 567.24
 },
 {
  "input": "To do this in Python, let me first import a couple helpful functions.",
  "translatedText": "పైథాన్‌లో దీన్ని చేయడానికి, నేను ముందుగా ఒక జంట సహాయక ఫంక్షన్‌లను దిగుమతి చేస్తాను.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 569.18,
  "end": 573.22
 },
 {
  "input": "That way we can call reduce() on this list, and use the XOR function to reduce it.",
  "translatedText": "ఆ విధంగా మనం ఈ జాబితాలో తగ్గించు() అని పిలుస్తాము మరియు దానిని తగ్గించడానికి XOR ఫంక్షన్‌ని ఉపయోగించవచ్చు.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 573.9,
  "end": 578.7
 },
 {
  "input": "This basically eats its way through the list, taking XORs along the way.",
  "translatedText": "ఇది ప్రాథమికంగా జాబితా ద్వారా దాని మార్గాన్ని తింటుంది, మార్గం వెంట XORలను తీసుకుంటుంది.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 579.1,
  "end": 582.68
 },
 {
  "input": "If you prefer, you can explicitly write out that XOR function without having to import it from anywhere.",
  "translatedText": "మీరు కావాలనుకుంటే, మీరు ఎక్కడి నుండైనా దిగుమతి చేయకుండానే ఆ XOR ఫంక్షన్‌ని స్పష్టంగా వ్రాయవచ్చు.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 584.8,
  "end": 589.44
 },
 {
  "input": "So at the moment it looks like if we do this on our random block of 16 bits, it returns 9, which has the binary representation 1001.",
  "translatedText": "కాబట్టి ప్రస్తుతానికి మనం దీన్ని 16 బిట్‌ల యాదృచ్ఛిక బ్లాక్‌లో చేస్తే, అది బైనరీ ప్రాతినిధ్యం 1001ని కలిగి ఉన్న 9ని తిరిగి ఇస్తుంది.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 591.94,
  "end": 601.28
 },
 {
  "input": "We won't do it here, but you could write a function where the sender uses that binary representation to set the four parity bits as needed, ultimately getting this block to a state where running this line of code on the full list of bits returns a 0.",
  "translatedText": "మేము దీన్ని ఇక్కడ చేయము, కానీ పంపినవారు నాలుగు పారిటీ బిట్‌లను అవసరమైన విధంగా సెట్ చేయడానికి బైనరీ ప్రాతినిధ్యాన్ని ఉపయోగించే ఒక ఫంక్షన్‌ను మీరు వ్రాయవచ్చు, చివరికి ఈ బ్లాక్‌ని బిట్‌ల పూర్తి జాబితాలో ఈ లైన్ కోడ్‌ని అమలు చేసే స్థితికి చేరుకుంటుంది. ఒక 0.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 601.98,
  "end": 615.46
 },
 {
  "input": "This would be considered a well-prepared block.",
  "translatedText": "ఇది బాగా సిద్ధమైన బ్లాక్‌గా పరిగణించబడుతుంది.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 616.08,
  "end": 618.2
 },
 {
  "input": "What's cool is that if we toggle any one of the bits in this list, simulating a random error from noise, then if you run this same line of code, it prints out that error.",
  "translatedText": "మంచి విషయం ఏమిటంటే, శబ్దం నుండి యాదృచ్ఛిక లోపాన్ని అనుకరిస్తూ, ఈ జాబితాలోని ఏదైనా బిట్‌లను మనం టోగుల్ చేస్తే, మీరు ఇదే లైన్ కోడ్‌ను అమలు చేస్తే, అది ఆ లోపాన్ని ముద్రిస్తుంది.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 619.88,
  "end": 630.22
 },
 {
  "input": "Isn't that neat?",
  "translatedText": "అది చక్కగా లేదా?",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 630.96,
  "end": 631.52
 },
 {
  "input": "You could get this block from out of the blue, run this single line on it, and it'll automatically spit out the position of an error, or a 0 if there wasn't any.",
  "translatedText": "మీరు ఈ బ్లాక్‌ను నీలిరంగు నుండి పొందవచ్చు, దానిపై ఈ సింగిల్ లైన్‌ను అమలు చేయవచ్చు మరియు అది స్వయంచాలకంగా లోపం యొక్క స్థానం లేదా ఏదైనా లేకుంటే 0ని ఉమ్మివేస్తుంది.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 631.82,
  "end": 641.06
 },
 {
  "input": "And there's nothing special about the size 16 here.",
  "translatedText": "మరియు ఇక్కడ పరిమాణం 16 గురించి ప్రత్యేకంగా ఏమీ లేదు.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 642.5,
  "end": 645.2
 },
 {
  "input": "The same line of code would work if you had a list of, say, 256 bits.",
  "translatedText": "మీరు 256 బిట్‌ల జాబితాను కలిగి ఉంటే అదే లైన్ కోడ్ పని చేస్తుంది.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 645.4,
  "end": 649.86
 },
 {
  "input": "Needless to say, there is more code to write here, like doing the meta parity check to detect 2-bit errors, but the idea is that almost all of the core logic from our scheme comes down to a single XOR reduction.",
  "translatedText": "2-బిట్ ఎర్రర్‌లను గుర్తించడానికి మెటా పారిటీ చెక్ చేయడం వంటి మరిన్ని కోడ్‌లు ఇక్కడ వ్రాయాలని ప్రత్యేకంగా చెప్పనవసరం లేదు, అయితే మా స్కీమ్‌లోని దాదాపు అన్ని కోర్ లాజిక్‌లు ఒకే XOR తగ్గింపుకు వస్తాయి.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 651.88,
  "end": 663.76
 },
 {
  "input": "Now, depending on your comfort with binary and XORs and software in general, you may either find this perspective a little bit confusing, or so much more elegant and simple that you're wondering why we didn't just start with it from the get-go.",
  "translatedText": "ఇప్పుడు, బైనరీ మరియు XORలు మరియు సాధారణంగా సాఫ్ట్‌వేర్‌తో మీ సౌకర్యాన్ని బట్టి, మీరు ఈ దృక్పథాన్ని కొంచెం గందరగోళంగా లేదా చాలా సొగసైన మరియు సరళంగా కనుగొనవచ్చు, మేము దీన్ని ఎందుకు ప్రారంభించలేదని మీరు ఆశ్చర్యపోతున్నారు. -వెళ్ళండి.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 666.12,
  "end": 678.42
 },
 {
  "input": "Loosely speaking, the multiple parity check perspective is easier to think about when implementing Hamming codes in hardware very directly, and the XOR perspective is easiest to think about when doing it in software, from kind of a higher level.",
  "translatedText": "వదులుగా చెప్పాలంటే, హార్డ్‌వేర్‌లో హామింగ్ కోడ్‌లను నేరుగా అమలు చేసేటప్పుడు బహుళ పారిటీ తనిఖీ దృక్పథం గురించి ఆలోచించడం సులభం, మరియు XOR దృక్పథాన్ని సాఫ్ట్‌వేర్‌లో చేసేటప్పుడు, ఉన్నత స్థాయి నుండి ఆలోచించడం చాలా సులభం.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 679.14,
  "end": 690.5
 },
 {
  "input": "The first one is easiest to actually do by hand, and I think it does a better job instilling the core intuition underlying all of this, which is that the information required to locate a single error is related to the log of the size of the block, or in other words, it grows one bit at a time as the block size doubles.",
  "translatedText": "మొదటిది వాస్తవానికి చేతితో చేయడం చాలా సులభం, మరియు వీటన్నింటికీ అంతర్లీనంగా ఉన్న ప్రధాన అంతర్ దృష్టిని కలిగించడం మంచి పని చేస్తుందని నేను భావిస్తున్నాను, అంటే ఒకే లోపాన్ని గుర్తించడానికి అవసరమైన సమాచారం బ్లాక్ పరిమాణం యొక్క లాగ్‌కు సంబంధించినది. , లేదా మరో మాటలో చెప్పాలంటే, బ్లాక్ సైజు రెట్టింపు అయ్యే కొద్దీ ఒక్కోసారి అది పెరుగుతుంది.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 691.36,
  "end": 710.0
 },
 {
  "input": "The relevant fact here is that that information directly corresponds to how much redundancy we need.",
  "translatedText": "ఇక్కడ సంబంధిత వాస్తవం ఏమిటంటే, ఆ సమాచారం మనకు ఎంత రిడెండెన్సీ అవసరమో దానికి నేరుగా అనుగుణంగా ఉంటుంది.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 711.02,
  "end": 716.06
 },
 {
  "input": "That's really what runs against most people's knee-jerk reaction when they first think about making a message resilient to errors, where usually copying the whole message is the first instinct that comes to mind.",
  "translatedText": "చాలా మంది వ్యక్తుల యొక్క మోకాలి కుదుపు ప్రతిచర్యకు వ్యతిరేకంగా జరిగేది అదే, వారు ఒక సందేశాన్ని లోపాలను తట్టుకునేలా చేయడం గురించి మొదట ఆలోచించినప్పుడు, సాధారణంగా మొత్తం సందేశాన్ని కాపీ చేయడం అనేది గుర్తుకు వచ్చే మొదటి ప్రవృత్తి.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 716.66,
  "end": 726.54
 },
 {
  "input": "And then, by the way, there is this whole other way that you sometimes see Hamming codes presented, where you multiply the message by one big matrix.",
  "translatedText": "ఆపై, మార్గం ద్వారా, మీరు కొన్నిసార్లు హామింగ్ కోడ్‌లను ప్రదర్శించే ఈ మొత్తం ఇతర మార్గం ఉంది, ఇక్కడ మీరు సందేశాన్ని ఒక పెద్ద మ్యాట్రిక్స్ ద్వారా గుణిస్తారు.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 727.5,
  "end": 734.0
 },
 {
  "input": "It's kind of nice because it relates it to the broader family of linear codes, but I think that gives almost no intuition for where it comes from or how it scales.",
  "translatedText": "ఇది చాలా బాగుంది ఎందుకంటే ఇది సరళ కోడ్‌ల యొక్క విస్తృత కుటుంబానికి సంబంధించినది, కానీ అది ఎక్కడ నుండి వస్తుంది లేదా ఎలా స్కేల్ చేస్తుంది అనే దాని గురించి దాదాపు అంతర్ దృష్టిని ఇవ్వదని నేను భావిస్తున్నాను.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 734.67,
  "end": 743.06
 },
 {
  "input": "And speaking of scaling, you might notice that the efficiency of this scheme only gets better as we increase the block size.",
  "translatedText": "మరియు స్కేలింగ్ గురించి చెప్పాలంటే, మేము బ్లాక్ పరిమాణాన్ని పెంచుతున్నప్పుడు మాత్రమే ఈ పథకం యొక్క సామర్థ్యం మెరుగుపడుతుందని మీరు గమనించవచ్చు.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 745.2,
  "end": 751.16
 },
 {
  "input": "For example, we saw that with 256 bits, you're using only 3% of that space for redundancy, and it just keeps getting better from there.",
  "translatedText": "ఉదాహరణకు, 256 బిట్‌లతో, మీరు రిడెండెన్సీ కోసం ఆ స్థలంలో 3% మాత్రమే ఉపయోగిస్తున్నారని మేము చూశాము మరియు అది అక్కడ నుండి మెరుగుపడుతోంది.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 755.0,
  "end": 762.66
 },
 {
  "input": "As the number of parity bits grows one by one, the block size keeps doubling.",
  "translatedText": "పారిటీ బిట్‌ల సంఖ్య ఒక్కొక్కటిగా పెరుగుతున్న కొద్దీ, బ్లాక్ పరిమాణం రెట్టింపు అవుతూ ఉంటుంది.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 763.3,
  "end": 767.34
 },
 {
  "input": "And if you take that to an extreme, you could have a block with, say, a million bits, where you would quite literally be playing 20 questions with your parity checks, and it uses only 21 parity bits.",
  "translatedText": "మరియు మీరు దానిని విపరీతంగా తీసుకుంటే, మీరు మిలియన్ బిట్‌లతో బ్లాక్‌ను కలిగి ఉండవచ్చు, ఇక్కడ మీరు మీ పారిటీ తనిఖీలతో అక్షరాలా 20 ప్రశ్నలను ప్లే చేస్తారు మరియు ఇది 21 పారిటీ బిట్‌లను మాత్రమే ఉపయోగిస్తుంది.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 769.0,
  "end": 780.02
 },
 {
  "input": "And if you step back to think about looking at a million bits and locating a single error, that genuinely feels crazy.",
  "translatedText": "మరియు మీరు మిలియన్ బిట్‌లను చూడటం మరియు ఒక్క ఎర్రర్‌ను గుర్తించడం గురించి ఆలోచించడానికి వెనుకడుగు వేస్తే, అది నిజంగా పిచ్చిగా అనిపిస్తుంది.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 780.74,
  "end": 787.06
 },
 {
  "input": "The problem, of course, is that with a larger block, the probability of seeing more than one or two bit errors goes up, and Hamming codes do not handle anything beyond that.",
  "translatedText": "సమస్య ఏమిటంటే, పెద్ద బ్లాక్‌తో, ఒకటి లేదా రెండు కంటే ఎక్కువ బిట్ ఎర్రర్‌లను చూసే సంభావ్యత పెరుగుతుంది మరియు హామింగ్ కోడ్‌లు అంతకు మించి దేనినీ నిర్వహించవు.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 788.2,
  "end": 797.66
 },
 {
  "input": "So in practice, what you'd want is to find the right size so that the probability of too many bit flips isn't too high.",
  "translatedText": "కాబట్టి ఆచరణలో, మీకు కావలసినది సరైన పరిమాణాన్ని కనుగొనడం, తద్వారా చాలా ఎక్కువ బిట్ ఫ్లిప్‌ల సంభావ్యత చాలా ఎక్కువగా ఉండదు.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 798.32,
  "end": 804.3
 },
 {
  "input": "Also, in practice, errors tend to come in little bursts, which would totally ruin a single block, so one common tactic to help spread out a burst of errors across many different blocks is to interlace those blocks, like this, before they're sent out or stored.",
  "translatedText": "అలాగే, ఆచరణలో, లోపాలు చిన్న పేలుళ్లలో వస్తాయి, ఇది ఒక బ్లాక్‌ను పూర్తిగా నాశనం చేస్తుంది, కాబట్టి అనేక విభిన్న బ్లాక్‌లలో లోపాలను వ్యాప్తి చేయడంలో సహాయపడే ఒక సాధారణ వ్యూహం ఏమిటంటే, ఆ బ్లాక్‌లను వాటి ముందు ఇలా ఇంటర్‌లేస్ చేయడం. బయటకు పంపబడింది లేదా నిల్వ చేయబడుతుంది.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 806.6,
  "end": 820.98
 },
 {
  "input": "Then again, a lot of this is rendered completely moot by more modern codes, like the much more commonly used Reed-Solomon algorithm, which handles burst errors particularly well, and it can be tuned to be resilient to a larger number of errors per block.",
  "translatedText": "మరలా, చాలా సాధారణంగా ఉపయోగించే రీడ్-సోలమన్ అల్గోరిథం వంటి ఆధునిక కోడ్‌ల ద్వారా చాలా వరకు పూర్తిగా మూట్ చేయబడింది, ఇది బరస్ట్ ఎర్రర్‌లను ప్రత్యేకంగా నిర్వహిస్తుంది మరియు ప్రతి బ్లాక్‌కు పెద్ద సంఖ్యలో ఎర్రర్‌లకు స్థితిస్థాపకంగా ఉండేలా ట్యూన్ చేయవచ్చు.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 825.58,
  "end": 838.82
 },
 {
  "input": "But that's a topic for another time.",
  "translatedText": "కానీ అది మరొక సారి చర్చనీయాంశం.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 839.36,
  "end": 841.34
 },
 {
  "input": "In his book The Art of Doing Science and Engineering, Hamming is wonderfully candid about just how meandering his discovery of this code was.",
  "translatedText": "అతని పుస్తకం ది ఆర్ట్ ఆఫ్ డూయింగ్ సైన్స్ అండ్ ఇంజినీరింగ్‌లో, హామింగ్ ఈ కోడ్‌ని తన కనిపెట్టడం ఎంత మెలికలు తిరిగిపోయిందో అద్భుతంగా చెప్పాడు.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 842.5,
  "end": 849.94
 },
 {
  "input": "He first tried all sorts of different schemes involving organizing the bits into parts of a higher dimensional lattice and strange things like this.",
  "translatedText": "అతను మొదట బిట్‌లను అధిక డైమెన్షనల్ లాటిస్‌లోని భాగాలుగా నిర్వహించడం మరియు ఇలాంటి వింత విషయాలతో కూడిన అన్ని రకాల విభిన్న స్కీమ్‌లను ప్రయత్నించాడు.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 850.62,
  "end": 857.78
 },
 {
  "input": "The idea that it might be possible to get parity checks to conspire in a way that spells out the position of an error only came to Hamming when he stepped back after a bunch of other analysis and asked, okay, what is the most efficient I could conceivably be about this?",
  "translatedText": "లోపం యొక్క స్థితిని వివరించే విధంగా కుట్ర చేయడానికి సమానత్వ తనిఖీలను పొందడం సాధ్యమవుతుందనే ఆలోచన హామింగ్‌కు వచ్చినప్పుడు అతను ఇతర విశ్లేషణల సమూహం తర్వాత వెనక్కి వెళ్లి, సరే, నేను చేయగలిగిన అత్యంత సమర్థవంతమైనది ఏమిటి అని అడిగాడు. దీని గురించి ఆలోచించవచ్చా?",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 858.3,
  "end": 871.52
 },
 {
  "input": "He was also candid about how important it was that parity checks were already on his mind, which would have been way less common back in the 1940s than it is today.",
  "translatedText": "1940 లలో ఈనాటి కంటే తక్కువ సాధారణం అయ్యే పారిటీ తనిఖీలు అతని మనస్సులో ఇప్పటికే ఉండటం ఎంత ముఖ్యమో కూడా అతను నిజాయితీగా ఉన్నాడు.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 872.62,
  "end": 881.22
 },
 {
  "input": "There are like half a dozen times throughout this book that he references the Louis Pasteur quote, luck favors a prepared mind.",
  "translatedText": "అతను లూయిస్ పాశ్చర్ కోట్‌ను ప్రస్తావించిన అరడజను సార్లు ఈ పుస్తకంలో ఉన్నాయి, అదృష్టం సిద్ధమైన మనస్సుకు అనుకూలంగా ఉంటుంది.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 881.92,
  "end": 888.22
 },
 {
  "input": "Clever ideas often look deceptively simple in hindsight, which makes them easy to underappreciate.",
  "translatedText": "తెలివైన ఆలోచనలు తరచుగా వెనుకకు చూస్తే మోసపూరితంగా సరళంగా కనిపిస్తాయి, ఇది వాటిని తక్కువ అంచనా వేయడానికి సులభం చేస్తుంది.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 889.32,
  "end": 894.3
 },
 {
  "input": "Right now my honest hope is that Hamming codes, or at least the possibility of such codes, feels almost obvious to you.",
  "translatedText": "హామింగ్ కోడ్‌లు లేదా కనీసం అలాంటి కోడ్‌ల అవకాశం మీకు దాదాపు స్పష్టంగా కనిపిస్తుందని ప్రస్తుతం నా నిజాయితీ ఆశ.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 894.96,
  "end": 901.3
 },
 {
  "input": "But you shouldn't fool yourself into thinking that they actually are obvious, because they definitely aren't.",
  "translatedText": "అయితే అవి స్పష్టంగా కనిపిస్తున్నాయని భావించి మిమ్మల్ని మీరు మోసం చేసుకోకూడదు, ఎందుకంటే అవి ఖచ్చితంగా కావు.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 901.66,
  "end": 906.82
 },
 {
  "input": "Part of the reason that clever ideas look deceptively easy is that we only ever see the final result, cleaning up what was messy, never mentioning all of the wrong turns, underselling just how vast the space of explorable possibilities is at the start of a problem solving process, all of that.",
  "translatedText": "తెలివైన ఆలోచనలు మోసపూరితంగా తేలికగా కనిపించడానికి ఒక కారణం ఏమిటంటే, మనం ఎప్పుడైనా తుది ఫలితాన్ని మాత్రమే చూస్తాము, గజిబిజిగా ఉన్నవాటిని శుభ్రం చేయడం, తప్పు మలుపులన్నింటినీ ఎప్పుడూ ప్రస్తావించకపోవడం, సమస్య ప్రారంభంలో అన్వేషించదగిన అవకాశాల స్థలం ఎంత విశాలంగా ఉందో తక్కువగా అమ్మడం. పరిష్కార ప్రక్రియ, అన్నింటినీ.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 907.88,
  "end": 922.86
 },
 {
  "input": "But this is true in general.",
  "translatedText": "కానీ ఇది సాధారణంగా నిజం.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 923.82,
  "end": 924.9
 },
 {
  "input": "I think for some special inventions, there's a second, deeper reason that we underappreciate them.",
  "translatedText": "కొన్ని ప్రత్యేక ఆవిష్కరణల కోసం, మనం వాటిని తక్కువగా అంచనా వేయడానికి రెండవ, లోతైన కారణం ఉందని నేను భావిస్తున్నాను.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 924.9,
  "end": 930.04
 },
 {
  "input": "Thinking of information in terms of bits had only really coalesced into a full theory by 1948, with Claude Shannon's seminal paper on information theory.",
  "translatedText": "సమాచార సిద్ధాంతంపై క్లాడ్ షానన్ యొక్క సెమినల్ పేపర్‌తో 1948 నాటికి బిట్‌ల పరంగా సమాచారం గురించి ఆలోచించడం నిజంగా పూర్తి సిద్ధాంతంగా కలిసిపోయింది.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 930.84,
  "end": 938.64
 },
 {
  "input": "This was essentially concurrent with when Hamming developed his algorithm.",
  "translatedText": "హామింగ్ తన అల్గారిథమ్‌ను అభివృద్ధి చేసినప్పుడు ఇది తప్పనిసరిగా సమానంగా ఉంటుంది.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 939.28,
  "end": 942.54
 },
 {
  "input": "This was the same foundational paper that showed, in a certain sense, that efficient error correction is always possible, no matter how high the probability of bit flips, at least in theory.",
  "translatedText": "బిట్ ఫ్లిప్‌ల సంభావ్యత ఎంత ఎక్కువగా ఉన్నా, కనీసం థియరీలో అయినా సమర్థవంతమైన లోపాన్ని సరిదిద్దడం ఎల్లప్పుడూ సాధ్యమేనని ఒక నిర్దిష్ట కోణంలో చూపించిన అదే పునాది పేపర్.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 943.3,
  "end": 952.9
 },
 {
  "input": "Shannon and Hamming, by the way, shared an office in Bell Labs, despite working on very different things, which hardly seems coincidental here.",
  "translatedText": "షానన్ మరియు హామింగ్, చాలా భిన్నమైన విషయాలపై పనిచేసినప్పటికీ, బెల్ ల్యాబ్స్‌లో కార్యాలయాన్ని పంచుకున్నారు, ఇది ఇక్కడ యాదృచ్ఛికంగా కనిపించదు.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 953.7,
  "end": 961.16
 },
 {
  "input": "Fast forward several decades, and these days, many of us are so immersed in thinking about bits and information that it's easy to overlook just how distinct this way of thinking was.",
  "translatedText": "కొన్ని దశాబ్దాలుగా ఫాస్ట్ ఫార్వార్డ్, మరియు ఈ రోజుల్లో, మనలో చాలా మంది బిట్స్ మరియు సమాచారం గురించి ఆలోచించడంలో మునిగిపోయారు, ఈ ఆలోచనా విధానం ఎంత విభిన్నంగా ఉందో పట్టించుకోవడం సులభం.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 962.38,
  "end": 972.34
 },
 {
  "input": "Ironically, the ideas that most profoundly shape the ways that a future generation thinks will end up looking to that future generation simpler than they really are.",
  "translatedText": "హాస్యాస్పదంగా, భవిష్యత్ తరం ఆలోచించే మార్గాలను చాలా లోతుగా రూపొందించే ఆలోచనలు ఆ భవిష్యత్తు తరానికి నిజంగా ఉన్నదానికంటే సరళంగా కనిపిస్తాయి.",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 973.1,
  "end": 982.26
 }
]