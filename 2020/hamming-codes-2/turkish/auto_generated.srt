1
00:00:00,000 --> 00:00:02,560
Buradaki herkesin 1. bölümden geldiğini varsayıyorum.

2
00:00:03,060 --> 00:00:07,504
Bitlerin çoğunun anlamlı bir mesaj taşıdığı, diğer birkaç parçanın ise bir tür artıklık 

3
00:00:07,504 --> 00:00:11,392
işlevi gördüğü bir veri bloğu oluşturmanın bir yolu olan Hamming kodlarından 

4
00:00:11,392 --> 00:00:15,836
bahsediyorduk; herhangi bir bit ters çevrildiğinde ya bir mesaj Bit veya artıklık biti, 

5
00:00:15,836 --> 00:00:20,230
bu bloktaki herhangi bir şeyde, alıcı bir hata olduğunu ve bunun nasıl düzeltileceğini 

6
00:00:20,230 --> 00:00:21,240
tanımlayabilecektir.

7
00:00:21,880 --> 00:00:24,497
Orada sunulan temel fikir, hataya giden yolda ikili arama 

8
00:00:24,497 --> 00:00:27,160
yapmak için çoklu eşlik kontrolünün nasıl kullanılacağıydı.

9
00:00:28,980 --> 00:00:31,687
Bu videoda amaç, Hamming kodlarının mümkün olduğunca 

10
00:00:31,687 --> 00:00:34,600
uygulamalı ve yeniden keşfedilebilir olmasını sağlamaktı.

11
00:00:35,180 --> 00:00:39,196
Ancak bunu yazılım veya donanımda gerçekten uygulamayı düşünmeye başladığınızda, 

12
00:00:39,196 --> 00:00:43,460
bu çerçeveleme aslında bu kodların gerçekte ne kadar zarif olduğunun altını çizebilir.

13
00:00:43,920 --> 00:00:46,966
Tüm olası hata konumlarını takip eden ve her kontrolde bu 

14
00:00:46,966 --> 00:00:50,853
grubu yarıya indiren bir algoritma yazmanız gerektiğini düşünebilirsiniz, 

15
00:00:50,853 --> 00:00:53,480
ancak aslında bu bundan çok ama çok daha basittir.

16
00:00:53,940 --> 00:00:58,981
Son videoda yaptığımız dört eşlik kontrolünün yanıtlarını evet ve hayır yerine 1'ler 

17
00:00:58,981 --> 00:01:04,080
ve 0'lar olarak okursanız, bu tam anlamıyla hatanın ikili dosyadaki konumunu belirtir.

18
00:01:04,780 --> 00:01:08,442
Örneğin, ikili sistemde 7 sayısı 0111'e benzer, 

19
00:01:08,442 --> 00:01:11,260
aslında 4 artı 2 artı 1 olduğunu söyler.

20
00:01:12,540 --> 00:01:17,847
Ve 7. pozisyonun nerede olduğuna dikkat edin, bu durum eşitlik gruplarımızın birincisini, 

21
00:01:17,847 --> 00:01:21,740
ikincisini ve üçüncüsünü etkiliyor, ancak sonuncusunu etkilemiyor.

22
00:01:22,220 --> 00:01:24,760
Yani bu dört kontrolün sonuçlarını aşağıdan yukarıya 

23
00:01:24,760 --> 00:01:27,540
doğru okumak gerçekten de hatanın konumunu ortaya koyuyor.

24
00:01:28,320 --> 00:01:31,631
Örnek 7'de özel bir şey yok, bu genel olarak işe yarıyor ve bu, 

25
00:01:31,631 --> 00:01:35,820
tüm şemanın donanıma uygulanmasının mantığını şaşırtıcı derecede basit hale getiriyor.

26
00:01:37,240 --> 00:01:40,569
Şimdi bu sihrin neden oluştuğunu görmek istiyorsanız, 

27
00:01:40,569 --> 00:01:43,652
pozisyonlarımız için bu 16 indeks etiketini alın, 

28
00:01:43,652 --> 00:01:47,536
ancak bunları 10 tabanında yazmak yerine, hepsini 0000'den 

29
00:01:47,536 --> 00:01:49,880
1111'e kadar ikili olarak yazalım.

30
00:01:50,559 --> 00:01:54,237
Bu ikili etiketleri kutularına geri koyarken, bunların gerçekte 

31
00:01:54,237 --> 00:01:57,800
gönderilen verilerden farklı olduklarını vurgulamam gerekiyor.

32
00:01:58,320 --> 00:02:00,734
Bunlar sizin ve benim dört eşitlik grubunun nereden geldiğini 

33
00:02:00,734 --> 00:02:03,500
anlamamıza yardımcı olacak kavramsal bir etiketten başka bir şey değil.

34
00:02:04,140 --> 00:02:07,007
Baktığımız her şeyin ikili olarak tanımlanmasının zarafeti, 

35
00:02:07,007 --> 00:02:11,117
belki de baktığımız her şeyin ikili olarak tanımlanmasının yarattığı kafa karışıklığı 

36
00:02:11,117 --> 00:02:12,360
nedeniyle gölgede kalıyor.

37
00:02:13,020 --> 00:02:14,120
Yine de buna değer.

38
00:02:14,800 --> 00:02:19,193
Dikkatinizi tüm bu etiketlerin sadece son kısmına odaklayın 

39
00:02:19,193 --> 00:02:23,220
ve ardından bu son bitin 1 olduğu konumları vurgulayın.

40
00:02:24,240 --> 00:02:27,793
Elde ettiğimiz şey, dört eşlik grubumuzun ilkidir; bu, 

41
00:02:27,793 --> 00:02:33,414
ilk kontrolü şu soruyla yorumlayabileceğiniz anlamına gelir: hey, eğer bir hata varsa, 

42
00:02:33,414 --> 00:02:35,740
bu hatanın konumundaki son bit 1 mi?

43
00:02:38,200 --> 00:02:42,207
Benzer şekilde, ikinciden sonuncuya odaklanırsanız ve bunun 1 olduğu tüm 

44
00:02:42,207 --> 00:02:46,160
konumları vurgularsanız, şemamızdan ikinci eşlik grubunu elde edersiniz.

45
00:02:46,740 --> 00:02:50,837
Başka bir deyişle, bu ikinci kontrol şunu soruyor: Hey, ben yine, 

46
00:02:50,837 --> 00:02:54,500
eğer bir hata varsa, bu konumun ikinciden sondan biti 1 mi?

47
00:02:55,760 --> 00:02:56,900
Ve benzeri.

48
00:02:57,220 --> 00:03:02,941
Üçüncü eşlik kontrolü, üçüncü bitten son bitine kadar açık olan her konumu 

49
00:03:02,941 --> 00:03:08,740
kapsar ve sonuncusu, en yüksek dereceli biti 1 olan son sekiz konumu kapsar.

50
00:03:09,740 --> 00:03:13,964
Daha önce yaptığımız her şey bu dört soruyu yanıtlamakla aynıydı, 

51
00:03:13,964 --> 00:03:17,740
bu da ikili sistemde bir konumun hecelenmesiyle aynı şeydi.

52
00:03:19,620 --> 00:03:21,480
Umarım bu iki şeyi daha açık hale getirir.

53
00:03:22,040 --> 00:03:24,443
Birincisi, ikinin daha büyük kuvvetleri olan blok boyutlarına 

54
00:03:24,443 --> 00:03:26,460
sistematik olarak nasıl genelleştirme yapılacağıdır.

55
00:03:26,960 --> 00:03:29,675
Her bir konumu tanımlamak daha fazla bit gerektiriyorsa, 

56
00:03:29,675 --> 00:03:32,391
örneğin 64 noktayı tanımlamak için altı bit gerekiyorsa, 

57
00:03:32,391 --> 00:03:36,680
o zaman bu bitlerin her biri size kontrol etmemiz gereken eşlik gruplarından birini verir.

58
00:03:38,400 --> 00:03:40,790
Matt Parker'la yaptığım satranç tahtası bulmacasını 

59
00:03:40,790 --> 00:03:43,180
izleyenleriniz tüm bunları fazlasıyla tanıdık bulabilir.

60
00:03:43,660 --> 00:03:45,945
Bu aynı temel mantıktır ancak farklı bir problemi 

61
00:03:45,945 --> 00:03:48,780
çözmektedir ve 64 karelik bir satranç tahtasına uygulanmıştır.

62
00:03:49,880 --> 00:03:52,552
Bunun açıklığa kavuşturacağını umduğum ikinci şey, 

63
00:03:52,552 --> 00:03:56,219
eşlik bitlerimizin neden ikinin kuvvetleri olan konumlarda olduğudur, 

64
00:03:56,219 --> 00:03:57,320
örneğin 1, 2, 4 ve 8.

65
00:03:58,000 --> 00:04:03,000
Bunlar, ikili gösterimi yalnızca tek bir bitin açık olduğu konumlardır.

66
00:04:03,600 --> 00:04:06,198
Bunun anlamı, bu eşlik bitlerinin her birinin, 

67
00:04:06,198 --> 00:04:09,460
dört eşlik grubundan yalnızca birinin içinde yer almasıdır.

68
00:04:12,040 --> 00:04:16,065
Bunu daha büyük örneklerde de görebilirsiniz; ne kadar büyürseniz büyüsün, 

69
00:04:16,065 --> 00:04:19,339
her eşlik biti rahatlıkla gruplardan yalnızca birine dokunur.

70
00:04:25,600 --> 00:04:29,552
Zamanımızın büyük bir kısmını üzerinde yoğunlaştığımız bu eşlik kontrollerinin, 

71
00:04:29,552 --> 00:04:33,703
ikili sistemde bir hatanın konumunu açıklamanın akıllıca bir yolundan başka bir şey 

72
00:04:33,703 --> 00:04:37,804
olmadığını anladığınızda, hamming hakkında düşünmenin farklı bir yolu ile bağlantı 

73
00:04:37,804 --> 00:04:41,807
kurabiliriz. Muhtemelen çok daha basit ve daha zarif olan ve temelde tek bir kod 

74
00:04:41,807 --> 00:04:43,240
satırıyla yazılabilen kodlar.

75
00:04:43,660 --> 00:04:45,500
XOR fonksiyonuna dayanmaktadır.

76
00:04:46,940 --> 00:04:50,220
Bilmeyenler için XOR, özel veya anlamına gelir.

77
00:04:50,780 --> 00:04:56,033
İki bitin XOR'unu aldığınızda, bu bitlerden herhangi biri açıksa 1 değerini döndürür, 

78
00:04:56,033 --> 00:04:59,360
ancak her ikisi de açık veya kapalıysa bu sonuç değişmez.

79
00:05:00,100 --> 00:05:02,980
Farklı bir ifadeyle bu iki bitin paritesidir.

80
00:05:03,540 --> 00:05:06,760
Bir matematikçi olarak bunu toplama modu 2 olarak düşünmeyi tercih ederim.

81
00:05:07,360 --> 00:05:10,798
Ayrıca genellikle iki farklı bit dizisinin XOR'undan bahsederiz, 

82
00:05:10,798 --> 00:05:13,440
bu da temel olarak bu bileşeni bileşen bazında yapar.

83
00:05:13,680 --> 00:05:15,720
Toplama gibi ama asla taşımadığınız yer.

84
00:05:16,500 --> 00:05:19,560
Yine, matematiğe daha yatkın olanlar bunu iki vektörün eklenmesi 

85
00:05:19,560 --> 00:05:22,480
ve mod 2'nin azaltılması olarak düşünmeyi tercih edebilir.

86
00:05:23,500 --> 00:05:27,795
Şu anda Python'u açarsanız ve iki tamsayı arasında düzeltme işareti işlemini 

87
00:05:27,795 --> 00:05:32,356
uygularsanız, yaptığı şey budur, ancak bu sayıların başlık altındaki bit temsillerine 

88
00:05:32,356 --> 00:05:32,940
yöneliktir.

89
00:05:34,960 --> 00:05:39,808
Sizin ve benim için kilit nokta, birçok farklı bit dizisinin XOR'unu almanın, 

90
00:05:39,808 --> 00:05:43,651
sütunlarda olduğu gibi bir grup ayrı grubun parodilerini tek bir 

91
00:05:43,651 --> 00:05:47,140
hamlede etkili bir şekilde hesaplamanın bir yolu olmasıdır.

92
00:05:51,260 --> 00:05:54,916
Bu bize, Hamming kod algoritmamızın çoklu eşlik kontrollerinin tek bir 

93
00:05:54,916 --> 00:05:58,780
işlemde paketlenmesi hakkında düşünmemiz için oldukça şık bir yol sağlıyor.

94
00:05:59,479 --> 00:06:02,180
Her ne kadar ilk bakışta çok farklı görünse de.

95
00:06:02,820 --> 00:06:07,627
Daha önce yaptığımız gibi, ikili olarak 16 konumu özel olarak yazın 

96
00:06:07,627 --> 00:06:12,363
ve şimdi mesaj bitinin 1'e açık olduğu konumları vurgulayın ve 

97
00:06:12,363 --> 00:06:17,100
ardından bu konumları büyük bir sütunda toplayın ve XOR'u alın.

98
00:06:19,260 --> 00:06:22,455
Sonuç olarak altta bulunan 4 bitin, bildiğimiz ve sevdiğimiz 4 

99
00:06:22,455 --> 00:06:25,751
eşlik kontrolüyle aynı olduğunu muhtemelen tahmin edebilirsiniz, 

100
00:06:25,751 --> 00:06:29,200
ancak bunun nedenini tam olarak düşünmek için bir dakikanızı ayırın.

101
00:06:32,220 --> 00:06:36,158
Örneğin bu son sütun, son biti 1 olan tüm pozisyonları sayıyor, 

102
00:06:36,158 --> 00:06:39,790
ancak biz zaten yalnızca vurgulanan konumlarla sınırlıyız, 

103
00:06:39,790 --> 00:06:44,098
dolayısıyla kaç tane vurgulanan konumun ilk eşlik grubundan geldiğini 

104
00:06:44,098 --> 00:06:45,760
etkili bir şekilde sayıyor.

105
00:06:46,240 --> 00:06:46,800
bu mantıklı mı?

106
00:06:49,080 --> 00:06:54,971
Benzer şekilde, bir sonraki sütun, ikinci eşlik grubunda kaç konumun bulunduğunu, 

107
00:06:54,971 --> 00:07:00,000
ikinciden sondan biti 1 olan ve hangilerinin vurgulandığını vb. sayar.

108
00:07:00,260 --> 00:07:03,960
Aslında bu, yapmakta olduğumuz şeye ilişkin perspektifte küçük bir değişiklik.

109
00:07:07,760 --> 00:07:09,600
Yani buradan nereye gideceğini biliyorsun.

110
00:07:10,000 --> 00:07:12,860
Gönderen, toplamın 0000 olmasını sağlamak için bazı 

111
00:07:12,860 --> 00:07:15,720
özel eşlik bitlerinin değiştirilmesinden sorumludur.

112
00:07:15,720 --> 00:07:19,629
Şimdi bu şekilde elde ettiğimizde, bu bize, alttaki sonuçta 

113
00:07:19,629 --> 00:07:23,539
ortaya çıkan dört bitin neden doğrudan bir hatanın konumunu 

114
00:07:23,539 --> 00:07:27,580
gösterdiğini düşünmemiz için gerçekten güzel bir yol sağlıyor.

115
00:07:28,460 --> 00:07:31,860
Diyelim ki bu bloktaki bir bit 0'dan 1'e değiştirildi.

116
00:07:32,600 --> 00:07:37,755
Bunun anlamı, o bitin konumu artık toplam XOR'a dahil edilecek, 

117
00:07:37,755 --> 00:07:43,820
bu da toplamı 0'dan yeni eklenen değere, yani hatanın konumuna dönüştürecek.

118
00:07:44,460 --> 00:07:46,909
Biraz daha az açık bir şekilde, 1'i 0'a 

119
00:07:46,909 --> 00:07:49,360
değiştiren bir hata varsa aynı durum geçerlidir.

120
00:07:50,180 --> 00:07:53,399
Görüyorsunuz, eğer bir bit dizisini iki kez toplarsanız, 

121
00:07:53,399 --> 00:07:57,580
bu orada hiç olmamasıyla aynı şeydir, çünkü bu dünyada 1 artı 1 eşittir 0.

122
00:07:57,580 --> 00:08:01,654
Yani bu pozisyonun bir kopyasını toplam toplama eklemek, 

123
00:08:01,654 --> 00:08:04,300
onu taşımamızla aynı etkiye sahiptir.

124
00:08:05,160 --> 00:08:10,700
Ve bu etki yine, alttaki toplam sonucun hatanın konumunu ortaya koymasıdır.

125
00:08:13,039 --> 00:08:17,287
Bunun ne kadar zarif olduğunu göstermek için, daha önce bahsettiğim Python kodunun alıcı 

126
00:08:17,287 --> 00:08:21,440
tarafındaki mantığın neredeyse tamamını yakalayacak bir satırını göstermeme izin verin.

127
00:08:22,080 --> 00:08:25,672
Veri bloğunu simüle etmek için 16 1 ve 0'lardan oluşan rastgele bir 

128
00:08:25,672 --> 00:08:28,816
dizi oluşturarak başlayacağız ve ona bitlerin adını vereceğim, 

129
00:08:28,816 --> 00:08:32,558
ancak elbette pratikte bu, bir göndericiden aldığımız bir şey olacaktır ve 

130
00:08:32,558 --> 00:08:37,000
bunun yerine rastgele olduğundan 5 eşlik bitiyle birlikte 11 veri biti taşıyor olacaktır.

131
00:08:37,000 --> 00:08:41,863
EnumerateBits fonksiyonunu çağırırsam, bu bitlerin her birini karşılık 

132
00:08:41,863 --> 00:08:47,000
gelen bir indeksle eşleştirir, bu durumda 0'dan 15'e kadar çalışır.

133
00:08:48,180 --> 00:08:52,637
Yani eğer daha sonra tüm bu çiftleri, i'ye benzeyen çiftleri kapsayan bir liste 

134
00:08:52,637 --> 00:08:56,245
oluşturursak ve sonra sadece i değerini, sadece indeksi çıkarırsak, 

135
00:08:56,245 --> 00:09:00,703
bu o kadar da heyecan verici değil, sadece 0'dan 15'e kadar olan indeksleri 

136
00:09:00,703 --> 00:09:01,340
geri alırız.

137
00:09:01,680 --> 00:09:07,796
Ancak bunu yalnızca if biti yapma koşulunu eklersek, yani bu bit 0 değil de 1 ise, 

138
00:09:07,796 --> 00:09:12,660
o zaman yalnızca karşılık gelen bitin açık olduğu konumları çeker.

139
00:09:13,380 --> 00:09:20,360
Bu durumda bu konumlar 0, 4, 6, 9 vb. gibi görünüyor.

140
00:09:20,720 --> 00:09:23,980
İstediğimiz şey, tüm bu konumları, açık olan bitlerin konumlarını 

141
00:09:23,980 --> 00:09:27,240
bir araya toplamak ve ardından bunları XOR ile bir araya getirmek.

142
00:09:29,180 --> 00:09:33,220
Bunu Python'da yapmak için önce birkaç yararlı işlevi içe aktarayım.

143
00:09:33,900 --> 00:09:36,275
Bu şekilde bu listede reduc()'u çağırabilir 

144
00:09:36,275 --> 00:09:38,700
ve azaltmak için XOR fonksiyonunu kullanabiliriz.

145
00:09:39,100 --> 00:09:42,680
Bu, temelde XOR'ları da alarak liste boyunca yolunu yiyor.

146
00:09:44,800 --> 00:09:47,005
İsterseniz, herhangi bir yerden içe aktarmanıza 

147
00:09:47,005 --> 00:09:49,440
gerek kalmadan bu XOR işlevini açıkça yazabilirsiniz.

148
00:09:51,940 --> 00:09:58,166
Yani şu anda öyle görünüyor ki eğer bunu 16 bitlik rastgele bloğumuz üzerinde yaparsak, 

149
00:09:58,166 --> 00:10:01,280
ikili temsili 1001 olan 9 değerini döndürür.

150
00:10:01,980 --> 00:10:06,372
Bunu burada yapmayacağız, ancak gönderenin, dört eşlik bitini gerektiği gibi ayarlamak 

151
00:10:06,372 --> 00:10:09,199
için bu ikili gösterimi kullandığı ve sonuçta bu bloğu, 

152
00:10:09,199 --> 00:10:13,642
bu kod satırını bitlerin tam listesinde çalıştırmanın geri döndüğü bir duruma getirdiği 

153
00:10:13,642 --> 00:10:15,460
bir fonksiyon yazabilirsiniz. bir 0.

154
00:10:16,080 --> 00:10:20,100
Bu iyi hazırlanmış bir blok olarak kabul edilir.

155
00:10:20,100 --> 00:10:23,861
İşin güzel yanı, bu listedeki bitlerden herhangi birini değiştirirsek, 

156
00:10:23,861 --> 00:10:26,987
gürültüden kaynaklanan rastgele bir hatayı simüle edersek, 

157
00:10:26,987 --> 00:10:30,220
o zaman aynı kod satırını çalıştırırsanız, o hatayı yazdırır.

158
00:10:30,960 --> 00:10:31,520
Çok hoş değil mi?

159
00:10:31,820 --> 00:10:36,504
Bu bloğu birdenbire alabilir, üzerinde bu tek satırı çalıştırabilirsiniz 

160
00:10:36,504 --> 00:10:41,060
ve otomatik olarak bir hatanın konumunu veya eğer yoksa 0'ı söyler.

161
00:10:42,500 --> 00:10:44,840
Ve burada 16 bedenin özel bir yanı yok.

162
00:10:44,840 --> 00:10:49,860
Örneğin 256 bitlik bir listeniz varsa aynı kod satırı işe yarar.

163
00:10:51,880 --> 00:10:56,000
Söylemeye gerek yok, 2 bitlik hataları tespit etmek için meta eşlik kontrolü 

164
00:10:56,000 --> 00:10:59,639
yapmak gibi buraya yazılacak daha fazla kod var, ancak fikir şu ki, 

165
00:10:59,639 --> 00:11:03,760
şemamızdaki temel mantığın neredeyse tamamı tek bir XOR azaltımına dayanıyor.

166
00:11:06,120 --> 00:11:10,464
Şimdi, ikili ve XOR'lar ve genel olarak yazılım konusundaki rahatınıza bağlı olarak, 

167
00:11:10,464 --> 00:11:14,417
bu bakış açısını ya biraz kafa karıştırıcı bulabilir ya da çok daha şık ve basit 

168
00:11:14,417 --> 00:11:18,420
bulabilir ve neden en baştan bununla başlamadığımızı merak edebilirsiniz. -Gitmek.

169
00:11:19,140 --> 00:11:21,980
Kabaca konuşursak, çoklu eşlik kontrolü perspektifini, 

170
00:11:21,980 --> 00:11:25,749
Hamming kodlarını donanıma doğrudan uygularken düşünmek daha kolaydır ve 

171
00:11:25,749 --> 00:11:29,364
XOR perspektifini, bunu yazılımda yaparken, daha yüksek bir seviyeden 

172
00:11:29,364 --> 00:11:30,500
düşünmek en kolayıdır.

173
00:11:31,360 --> 00:11:35,895
İlkini elle yapmak en kolay olanıdır ve bence tüm bunların altında yatan 

174
00:11:35,895 --> 00:11:39,623
temel sezgiyi aşılamak açısından daha iyi bir iş çıkarıyor; 

175
00:11:39,623 --> 00:11:44,967
yani tek bir hatayı bulmak için gereken bilgi, bloğun boyutunun günlüğüyle ilgilidir. 

176
00:11:44,967 --> 00:11:50,000
, başka bir deyişle, blok boyutu iki katına çıktıkça her seferinde bir bit büyür.

177
00:11:51,020 --> 00:11:53,467
Buradaki ilgili gerçek şu ki, bu bilgi doğrudan ne 

178
00:11:53,467 --> 00:11:56,060
kadar fazlalığa ihtiyacımız olduğuna karşılık geliyor.

179
00:11:56,660 --> 00:11:59,692
Bu aslında çoğu insanın, bir mesajı hatalara karşı dayanıklı hale 

180
00:11:59,692 --> 00:12:03,277
getirmeyi ilk düşündüklerinde, düşünmeden verdikleri tepkiyle çelişen şeydir; 

181
00:12:03,277 --> 00:12:06,540
burada genellikle mesajın tamamını kopyalamak akla gelen ilk içgüdüdür.

182
00:12:07,500 --> 00:12:10,553
Ve bu arada, bazen Hamming kodlarının sunulduğunu gördüğünüz, 

183
00:12:10,553 --> 00:12:14,000
mesajı büyük bir matrisle çarptığınız tamamen farklı bir yol daha var.

184
00:12:14,670 --> 00:12:18,089
Bu biraz hoş çünkü onu daha geniş doğrusal kod ailesiyle ilişkilendiriyor, 

185
00:12:18,089 --> 00:12:20,916
ancak bunun nereden geldiği veya nasıl ölçeklendiği konusunda 

186
00:12:20,916 --> 00:12:23,060
neredeyse hiçbir sezgi vermediğini düşünüyorum.

187
00:12:25,200 --> 00:12:28,153
Ölçeklendirmeden bahsetmişken, blok boyutunu artırdıkça 

188
00:12:28,153 --> 00:12:31,160
bu planın verimliliğinin de arttığını fark edebilirsiniz.

189
00:12:35,000 --> 00:12:38,614
Örneğin, 256 bit ile bu alanın yalnızca %3'ünü yedeklilik için 

190
00:12:38,614 --> 00:12:42,660
kullandığınızı ve bu noktadan sonra giderek daha iyi hale geldiğini gördük.

191
00:12:43,300 --> 00:12:47,340
Eşlik bitlerinin sayısı birer birer arttıkça blok boyutu da iki katına çıkar.

192
00:12:49,000 --> 00:12:53,631
Ve eğer bunu aşırıya götürürseniz, diyelim ki bir milyon bitlik bir bloğunuz olabilir, 

193
00:12:53,631 --> 00:12:57,624
burada kelimenin tam anlamıyla eşlik kontrollerinizle 20 soru oynuyorsunuz 

194
00:12:57,624 --> 00:13:00,020
ve bu blok yalnızca 21 eşlik biti kullanıyor.

195
00:13:00,740 --> 00:13:05,396
Milyonlarca parçaya bakıp tek bir hatayı bulmayı düşünmek için geri adım atarsanız, 

196
00:13:05,396 --> 00:13:07,060
bu gerçekten çılgınca geliyor.

197
00:13:08,199 --> 00:13:12,788
Sorun, elbette, daha büyük bir blokla, bir veya iki bitten daha fazla hata görme 

198
00:13:12,788 --> 00:13:17,660
olasılığının artması ve Hamming kodlarının bunun ötesinde hiçbir şeyi ele almamasıdır.

199
00:13:18,320 --> 00:13:21,100
Yani pratikte isteyeceğiniz şey, çok fazla bit dönme 

200
00:13:21,100 --> 00:13:24,300
olasılığının çok yüksek olmaması için doğru boyutu bulmaktır.

201
00:13:26,600 --> 00:13:30,081
Ayrıca pratikte hatalar küçük patlamalar halinde ortaya çıkma eğilimindedir, 

202
00:13:30,081 --> 00:13:33,699
bu da tek bir bloğu tamamen mahveder, bu nedenle bir dizi hatanın birçok farklı 

203
00:13:33,699 --> 00:13:36,096
bloğa yayılmasına yardımcı olacak yaygın bir taktik, 

204
00:13:36,096 --> 00:13:39,849
bu blokları bu şekilde birbirine geçirmeden önce bu şekilde birbirine geçirmektir. 

205
00:13:39,849 --> 00:13:40,980
gönderilir veya saklanır.

206
00:13:45,580 --> 00:13:48,429
Öte yandan, bunların birçoğu, çok daha yaygın olarak kullanılan, 

207
00:13:48,429 --> 00:13:51,893
patlama hatalarını özellikle iyi bir şekilde ele alan Reed-Solomon algoritması 

208
00:13:51,893 --> 00:13:55,137
gibi daha modern kodlar tarafından tamamen tartışmalı hale getiriliyor ve 

209
00:13:55,137 --> 00:13:58,820
blok başına daha fazla sayıda hataya karşı dayanıklı olacak şekilde ayarlanabiliyor.

210
00:13:59,360 --> 00:14:01,340
Ama bu başka bir zamanın konusu.

211
00:14:02,500 --> 00:14:05,981
Hamming, The Art of Doing Science and Engineering adlı kitabında bu kodu 

212
00:14:05,981 --> 00:14:09,940
keşfetmesinin ne kadar dolambaçlı olduğunu son derece samimi bir şekilde anlatıyor.

213
00:14:10,620 --> 00:14:14,380
İlk önce, parçaları daha yüksek boyutlu bir kafesin parçalarına ayırmayı 

214
00:14:14,380 --> 00:14:17,780
ve bunun gibi tuhaf şeyleri içeren her türlü farklı şemayı denedi.

215
00:14:18,300 --> 00:14:21,511
Bir hatanın konumunu ortaya koyacak şekilde eşlik kontrollerinin bir 

216
00:14:21,511 --> 00:14:23,699
araya getirilmesinin mümkün olabileceği fikri, 

217
00:14:23,699 --> 00:14:27,097
Hamming'in aklına ancak bir sürü başka analizden sonra geri çekilip, 

218
00:14:27,097 --> 00:14:30,263
tamam, yapabileceğim en verimli şeyin ne olduğunu sorduğunda geldi. 

219
00:14:30,263 --> 00:14:31,520
bunun hakkında olabilir mi?

220
00:14:32,620 --> 00:14:36,563
Ayrıca, 1940'larda bugün olduğundan çok daha az yaygın olan eşitlik 

221
00:14:36,563 --> 00:14:41,220
kontrollerinin zaten aklında olmasının ne kadar önemli olduğu konusunda da samimiydi.

222
00:14:41,920 --> 00:14:45,045
Bu kitap boyunca neredeyse yarım düzine kez Louis Pasteur'ün 

223
00:14:45,045 --> 00:14:48,220
bir sözüne gönderme yapıyor; şans hazırlıklı bir zihinden yanadır.

224
00:14:49,320 --> 00:14:52,746
Zekice fikirler genellikle geriye dönüp bakıldığında aldatıcı derecede basit görünür, 

225
00:14:52,746 --> 00:14:54,300
bu da onları küçümsemeyi kolaylaştırır.

226
00:14:54,960 --> 00:14:58,182
Şu anda samimi umudum, Hamming kodlarının veya en azından bu 

227
00:14:58,182 --> 00:15:01,300
tür kodların olasılığının size neredeyse apaçık gelmesidir.

228
00:15:01,660 --> 00:15:03,974
Ancak bunların aslında bariz olduğunu düşünerek 

229
00:15:03,974 --> 00:15:06,820
kendinizi kandırmamalısınız çünkü kesinlikle öyle değiller.

230
00:15:07,880 --> 00:15:11,284
Zekice fikirlerin aldatıcı derecede kolay görünmesinin bir nedeni de, 

231
00:15:11,284 --> 00:15:14,202
yalnızca nihai sonucu görmemiz, dağınık olanı temizlememiz, 

232
00:15:14,202 --> 00:15:18,239
tüm yanlış dönüşlerden hiç bahsetmememiz, bir sorunun başlangıcında keşfedilebilir 

233
00:15:18,239 --> 00:15:22,130
olasılıklar alanının ne kadar geniş olduğunun altını çizmemizdir. çözme süreci, 

234
00:15:22,130 --> 00:15:22,860
bunların hepsi.

235
00:15:23,820 --> 00:15:24,900
Ancak bu genel olarak doğrudur.

236
00:15:24,900 --> 00:15:27,540
Bazı özel icatlarda onları yeterince takdir etmememizin 

237
00:15:27,540 --> 00:15:30,040
ikinci ve daha derin bir nedeni olduğunu düşünüyorum.

238
00:15:30,840 --> 00:15:34,685
Bilgiyi bitler cinsinden düşünmek, Claude Shannon'ın bilgi teorisi 

239
00:15:34,685 --> 00:15:38,640
üzerine ufuk açıcı makalesiyle ancak 1948'de tam bir teoriye dönüştü.

240
00:15:39,280 --> 00:15:42,540
Bu aslında Hamming'in algoritmasını geliştirmesiyle eşzamanlıydı.

241
00:15:43,300 --> 00:15:47,642
Bu, en azından teoride, bit kayması olasılığı ne kadar yüksek olursa olsun, 

242
00:15:47,642 --> 00:15:52,328
bir anlamda etkili hata düzeltmenin her zaman mümkün olduğunu gösteren aynı temel 

243
00:15:52,328 --> 00:15:52,900
makaleydi.

244
00:15:53,700 --> 00:15:57,175
Bu arada Shannon ve Hamming, çok farklı şeyler üzerinde çalışmalarına rağmen Bell 

245
00:15:57,175 --> 00:16:00,693
Laboratuvarları'nda bir ofisi paylaşıyorlardı ki bu da burada pek rastlantısal 

246
00:16:00,693 --> 00:16:01,160
görünmüyor.

247
00:16:02,380 --> 00:16:05,716
Birkaç on yıl ileri saralım ve bu günlerde çoğumuz küçük parçalar 

248
00:16:05,716 --> 00:16:08,750
ve bilgiler üzerine düşünmeye o kadar dalmış durumdayız ki, 

249
00:16:08,750 --> 00:16:12,340
bu düşünce tarzının ne kadar farklı olduğunu gözden kaçırmak çok kolay.

250
00:16:13,100 --> 00:16:18,041
İroniktir ki, gelecek neslin düşünme biçimini en derinden şekillendiren fikirler, 

251
00:16:18,041 --> 00:16:22,260
gelecek nesile gerçekte olduğundan daha basit görünmeye yol açacaktır.

