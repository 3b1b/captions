1
00:00:00,000 --> 00:00:05,356
Bir CD&#39;yi veya DVD&#39;yi çizerken, içinde sakladığı

2
00:00:05,356 --> 00:00:10,900
şeyi oynatmanın nasıl mümkün olduğunu hiç merak ettiniz mi?

3
00:00:10,900 --> 00:00:15,420
Çizik gerçekten diskteki 1&#39;leri ve 0&#39;ları etkiler, bu nedenle

4
00:00:15,420 --> 00:00:20,005
depolanan verilerden farklı verileri okur, ancak gerçekten çizilmediği

5
00:00:20,005 --> 00:00:24,267
sürece okuduğu bitlerin kodu, üzerine kodlanmış olanla tam olarak

6
00:00:24,267 --> 00:00:28,400
aynı dosyaya dönüştürülür. tüm bu hatalara rağmen bit bit kopya.

7
00:00:28,400 --> 00:00:32,591
Verileri depolamamıza ve aynı derecede önemlisi, hatalara karşı dirençli

8
00:00:32,591 --> 00:00:36,840
bir şekilde veri iletmemize olanak tanıyan bir sürü matematiksel zeka var.

9
00:00:36,840 --> 00:00:42,480
Tamam, aslında bunu yapmanın bir yolunu bulmak o kadar da zeki olmayı gerektirmiyor.

10
00:00:42,480 --> 00:00:46,550
Herhangi bir dosya, ister video, ister ses, ister metin, ister bir kod,

11
00:00:46,550 --> 00:00:50,960
ister bir görüntü olsun, sonuçta 1&#39;ler ve 0&#39;lardan oluşan bir dizidir.

12
00:00:50,960 --> 00:00:54,370
Ve ters çevrilen herhangi bir biti düzeltmek için basit

13
00:00:54,370 --> 00:00:57,780
bir strateji, her bitin üç kopyasını saklamak olacaktır.

14
00:00:57,780 --> 00:01:02,542
Daha sonra bu dosyayı okuyan makine bu üç kopyayı karşılaştırabilir ve

15
00:01:02,542 --> 00:01:07,440
bir tutarsızlık olduğunda her zaman 3 üzerinden en iyi 2&#39;yi alabilir.

16
00:01:07,440 --> 00:01:11,560
Ancak bunun anlamı, alanınızın üçte ikisini yedeklilik için kullanmaktır.

17
00:01:11,560 --> 00:01:14,816
Ve o zaman bile, kaybedilen tüm bu alana rağmen, birden fazla bitin

18
00:01:14,816 --> 00:01:18,120
ters çevrilmesi durumunda ne olacağına dair güçlü bir garanti yoktur.

19
00:01:18,120 --> 00:01:21,513
Çok daha ilginç olan soru, mümkün olduğunca az yer kaplarken

20
00:01:21,513 --> 00:01:24,740
hataların düzeltilebilmesi için bunun nasıl yapılacağıdır.

21
00:01:24,740 --> 00:01:28,889
Örneğin, bu videoda öğreneceğiniz yöntemi kullanarak verilerinizi

22
00:01:28,889 --> 00:01:32,975
256 bitlik bloklarda saklayabilirsiniz; burada her blok 9 bit, 9!

23
00:01:32,975 --> 00:01:36,609
bir tür artıklık görevi görür ve diğer 247 bit,

24
00:01:36,609 --> 00:01:41,000
istediğiniz anlamlı mesajı veya veriyi taşımakta özgürdür.

25
00:01:41,000 --> 00:01:45,098
Ve yine de burada herhangi bir bit ters çevrilirse, sadece bu bloğa bakarak ve

26
00:01:45,098 --> 00:01:49,145
başka hiçbir şeye bakmadan, bir makine bir hata olduğunu ve tam olarak nerede

27
00:01:49,145 --> 00:01:53,140
olduğunu tespit edebilecek ve böylece onu nasıl düzelteceğini bilebilecektir.

28
00:01:53,140 --> 00:01:55,540
Ve dürüst olmak gerekirse, bu sihir gibi geliyor.

29
00:01:55,540 --> 00:01:59,335
Ve bu özel şema için, eğer iki bit ters çevrilirse, makine en azından iki hata

30
00:01:59,335 --> 00:02:03,180
olduğunu tespit edebilecektir, ancak bunları nasıl düzelteceğini bilemeyecektir.

31
00:02:03,180 --> 00:02:06,452
Bunun farklı boyutlardaki bloklar için nasıl ölçeklendirileceği

32
00:02:06,452 --> 00:02:08,140
hakkında biraz sonra konuşacağız.

33
00:02:08,140 --> 00:02:11,118
Bunun gibi hataları düzeltmenize izin veren yöntemler,

34
00:02:11,118 --> 00:02:13,880
makul olarak, hata düzeltme kodları olarak bilinir.

35
00:02:13,880 --> 00:02:18,227
Geçen yüzyılın büyük bir bölümünde bu alan, her gün kullandığımız cihazlara dahil

36
00:02:18,227 --> 00:02:23,000
edilen, şaşırtıcı derecede derin bir matematik açısından gerçekten zengin bir kaynak oldu.

37
00:02:23,000 --> 00:02:26,130
Buradaki amaç size Hamming kodu olarak bilinen en eski

38
00:02:26,130 --> 00:02:29,660
örneklerden biri hakkında kapsamlı bir anlayış kazandırmaktır.

39
00:02:29,660 --> 00:02:33,009
Bu arada, bu videonun yapısı hakkında düşünme biçimim, onu

40
00:02:33,009 --> 00:02:36,586
mümkün olduğunca doğrudan açıklamaktan çok, ara sıra hafif bir

41
00:02:36,586 --> 00:02:40,220
rehberlikle sizi onu kendiniz icat etmeye teşvik etmekle ilgili.

42
00:02:40,220 --> 00:02:43,571
Yani bir noktada işlerin nereye gideceğini gördüğünüzü hissettiğinizde, o anı

43
00:02:43,571 --> 00:02:47,180
duraklatın ve ben size söylemeden önce planın ne olacağını aktif olarak tahmin edin.

44
00:02:47,180 --> 00:02:51,293
Ayrıca, anlayışınızın donanım düzeyine inmesini istiyorsanız, Ben Eater

45
00:02:51,293 --> 00:02:55,178
bununla bağlantılı olarak Hamming kodlarını devre tahtalarına nasıl

46
00:02:55,178 --> 00:02:59,520
uygulayacağınızı gösteren bir video hazırladı ki bu son derece tatmin edici.

47
00:02:59,520 --> 00:03:03,083
Hamming kodlarının, Reed-Solomon algoritması gibi daha modern kodlar

48
00:03:03,083 --> 00:03:06,854
kadar yaygın kullanılmadığını bilmelisiniz, ancak bu görevin başlangıçta

49
00:03:06,854 --> 00:03:10,572
ne kadar imkansız hissettirdiği ile bir kez ne kadar mantıklı göründüğü

50
00:03:10,572 --> 00:03:14,240
arasındaki karşıtlıkta belli bir sihir var. Hamming&#39;i öğreniyorsun.

51
00:03:14,240 --> 00:03:18,674
Hata düzeltmenin temel ilkesi, olası tüm mesajların geniş bir alanında

52
00:03:18,674 --> 00:03:22,860
yalnızca bazı alt kümelerin geçerli mesaj olarak kabul edilmesidir.

53
00:03:22,860 --> 00:03:29,100
Bir benzetme olarak, doğru yazılan sözcükler ile yanlış yazılan sözcükleri düşünün.

54
00:03:29,100 --> 00:03:33,891
Geçerli bir mesaj değiştirildiğinde, tıpkı bir yazım hatasında yapabileceğiniz

55
00:03:33,891 --> 00:03:38,380
gibi, alıcı gördüklerini en yakın geçerli komşuya düzeltmekten sorumludur.

56
00:03:38,380 --> 00:03:42,516
Ancak bunun gibi mesajları etkili bir şekilde kategorize

57
00:03:42,516 --> 00:03:47,160
etmek için somut bir algoritma bulmak belli bir zeka gerektirir.

58
00:03:47,160 --> 00:03:50,694
Hikaye 1940&#39;larda, genç Richard Hamming&#39;in Bell Laboratuvarları

59
00:03:50,694 --> 00:03:53,934
için çalıştığı ve bazı işlerinin sınırlı erişime sahip olduğu çok

60
00:03:53,934 --> 00:03:57,420
büyük, pahalı bir delikli kart bilgisayarını kullandığı zaman başlıyor.

61
00:03:57,420 --> 00:04:00,146
Ve uygulamaya koyduğu programlar sürekli başarısız

62
00:04:00,146 --> 00:04:03,140
oluyordu çünkü ara sıra bazı kısımlar yanlış okunuyordu.

63
00:04:03,140 --> 00:04:06,120
Hayal kırıklığı buluşun potası olduğundan o kadar

64
00:04:06,120 --> 00:04:09,280
bıktı ki dünyanın ilk hata düzeltme kodunu icat etti.

65
00:04:09,280 --> 00:04:13,016
Hamming kodlarını çerçevelemenin pek çok farklı yolu vardır, ancak ilk geçiş olarak

66
00:04:13,016 --> 00:04:16,620
biz bunu Hamming&#39;in kendisinin onlar hakkında düşündüğü şekilde ele alacağız.

67
00:04:16,620 --> 00:04:21,400
Basit ama çok da basit olmayan bir örnek, 16 bitlik bir blok kullanalım.

68
00:04:21,400 --> 00:04:25,700
Bu bitlerin konumlarını 0&#39;dan 15&#39;e kadar numaralandıracağız.

69
00:04:25,700 --> 00:04:29,614
Saklamak istediğimiz gerçek veriler bu bitlerden yalnızca 12&#39;sini

70
00:04:29,614 --> 00:04:33,920
oluşturacak, konumların 4&#39;ü ise bir tür artıklık olarak ayrılmış durumda.

71
00:04:33,920 --> 00:04:37,016
Buradaki gereksiz kelimesi sadece kopyalama anlamına gelmiyor, sonuçta

72
00:04:37,016 --> 00:04:40,200
bu 4 bit bize verileri körü körüne kopyalamak için yeterli alan vermiyor.

73
00:04:40,200 --> 00:04:44,236
Bunun yerine, bunların çok daha incelikli ve akıllı bir tür fazlalık

74
00:04:44,236 --> 00:04:48,740
olması, herhangi bir yeni bilgi eklemesi değil, esneklik sağlaması gerekecek.

75
00:04:48,740 --> 00:04:52,493
Bu 4 özel parçanın, belki sonunda ya da buna benzer bir şekilde güzel bir şekilde

76
00:04:52,493 --> 00:04:56,246
bir araya gelmesini bekleyebilirsiniz, ancak göreceğiniz gibi, bunların 2&#39;nin

77
00:04:56,246 --> 00:05:00,320
kuvvetleri olan konumlara yerleştirilmesi, sonunda gerçekten zarif bir şeye olanak tanır.

78
00:05:00,320 --> 00:05:03,487
Ayrıca, bunun daha büyük bloklar için nasıl ölçeklendiğine

79
00:05:03,487 --> 00:05:05,420
dair size küçük bir ipucu verebilir.

80
00:05:05,420 --> 00:05:09,900
Ayrıca teknik olarak sadece 11 bitlik bir veriden ibarettir, 0 konumunda olup bitenlerle

81
00:05:09,900 --> 00:05:14,280
ilgili hafif bir nüans olduğunu göreceksiniz, ancak şimdilik bunun için endişelenmeyin.

82
00:05:14,280 --> 00:05:18,272
Herhangi bir hata düzeltme algoritması gibi, bu da iki oyuncuyu içerecektir;

83
00:05:18,272 --> 00:05:22,419
bu 4 özel bitin ayarlanmasından sorumlu olan bir gönderici ve bir tür kontrolün

84
00:05:22,419 --> 00:05:26,360
gerçekleştirilmesinden ve hataların düzeltilmesinden sorumlu olan bir alıcı.

85
00:05:26,360 --> 00:05:29,460
Elbette, gönderen ve alıcı kelimeleri aslında tüm kontrolleri yapan

86
00:05:29,460 --> 00:05:32,561
makinelere veya yazılımlara atıfta bulunur ve mesaj fikri, depolama

87
00:05:32,561 --> 00:05:35,480
gibi şeyleri de içerecek şekilde oldukça geniş bir anlama gelir.

88
00:05:35,480 --> 00:05:39,187
Sonuçta veri depolamak, mesajın bir yerden başka bir yere

89
00:05:39,187 --> 00:05:42,640
değil, geçmişten geleceğe gönderilmesiyle aynı şeydir.

90
00:05:42,640 --> 00:05:46,204
Kurulum bu, ancak konuya dalmadan önce, keşfi sırasında Hamming&#39;in

91
00:05:46,204 --> 00:05:49,970
aklında yeni olan ilgili bir fikir hakkında konuşmamız gerekiyor; herhangi

92
00:05:49,970 --> 00:05:53,735
bir tek bit hatasını tespit etmenize izin veren ancak bunları düzeltmenize

93
00:05:53,735 --> 00:05:57,300
izin vermeyen bir yöntem, bilinen iş dünyasında parite kontrolü olarak.

94
00:05:57,300 --> 00:06:01,056
Eşlik kontrolü için, gönderenin ayarlamadan sorumlu olduğu

95
00:06:01,056 --> 00:06:04,940
tek bir biti ayırıyoruz ve geri kalanı mesaj taşımakta özgür.

96
00:06:04,940 --> 00:06:08,482
Bu özel bitin tek görevi mesajdaki 1&#39;lerin

97
00:06:08,482 --> 00:06:12,100
toplam sayısının çift sayı olmasını sağlamaktır.

98
00:06:12,100 --> 00:06:16,503
Örneğin şu anda, 1&#39;lerin toplam sayısı 7&#39;dir, bu tek sayıdır, dolayısıyla

99
00:06:16,503 --> 00:06:20,960
gönderenin bu özel biti 1 olacak şekilde çevirmesi gerekir, böylece sayı çift olur.

100
00:06:20,960 --> 00:06:27,480
Ancak blok zaten çift sayıda 1&#39;lerle başlamış olsaydı, bu özel bit 0&#39;da tutulurdu.

101
00:06:27,480 --> 00:06:30,906
Bu oldukça basit, yanıltıcı derecede basit, ancak bir mesajın

102
00:06:30,906 --> 00:06:34,056
herhangi bir yerindeki değişimin tek bir bilgi parçasına

103
00:06:34,056 --> 00:06:37,760
yansıtılacağı fikrini damıtmanın inanılmaz derecede zarif bir yolu.

104
00:06:37,760 --> 00:06:43,175
Bu mesajın herhangi bir bitinin 0&#39;dan 1&#39;e veya 1&#39;den 0&#39;a çevrilmesi

105
00:06:43,175 --> 00:06:48,140
durumunda, 1&#39;lerin toplam sayısının çiftten teke değişmesine dikkat edin.

106
00:06:48,140 --> 00:06:51,546
Yani eğer alıcıysanız, bu mesaja baktığınızda ve tek sayıda

107
00:06:51,546 --> 00:06:55,123
1&#39;ler görüyorsanız, nerede olduğu hakkında hiçbir fikriniz

108
00:06:55,123 --> 00:06:58,700
olmasa bile bir hatanın meydana geldiğinden emin olabilirsiniz.

109
00:06:58,700 --> 00:07:01,756
Jargonda, bir bit grubunun çift veya tek sayıda

110
00:07:01,756 --> 00:07:04,940
1&#39;e sahip olup olmadığı, eşlik olarak bilinir.

111
00:07:04,940 --> 00:07:08,255
Ayrıca sayıları kullanabilir ve paritenin 0 veya 1 olduğunu söyleyebilirsiniz;

112
00:07:08,255 --> 00:07:11,320
bu fikirle matematik yapmaya başladığınızda genellikle daha yararlı olur.

113
00:07:11,320 --> 00:07:15,042
Ve göndericinin pariteyi kontrol etmek için kullandığı

114
00:07:15,042 --> 00:07:18,020
bu özel bit, eşlik biti olarak adlandırılır.

115
00:07:18,020 --> 00:07:21,866
Ve aslında, açık olmalıyız ki, eğer alıcı tek bir parite görürse, bu

116
00:07:21,866 --> 00:07:25,546
sadece bir hata olduğu anlamına gelmez, 3 hata, 5 hata veya başka

117
00:07:25,546 --> 00:07:29,560
herhangi bir tek sayı olabilir, ancak kesin olarak bilebilir. 0 değildi.

118
00:07:29,560 --> 00:07:34,137
Öte yandan, 2 hata veya herhangi bir çift sayıda hata olsaydı, son

119
00:07:34,137 --> 00:07:38,509
1 sayısı hâlâ çift sayı olurdu, dolayısıyla alıcı, çift sayının

120
00:07:38,509 --> 00:07:43,360
mutlaka mesajın hatasız olduğu anlamına geldiğine tam olarak güvenemez.

121
00:07:43,360 --> 00:07:46,374
Yalnızca 2 bitlik geçişlerle bozulan bir mesajın oldukça

122
00:07:46,374 --> 00:07:49,760
zayıf olduğundan şikayet edebilirsiniz ve kesinlikle haklısınız.

123
00:07:49,760 --> 00:07:54,838
Ancak, aldığınız mesajın gönderenin amaçladığı mesaj olduğuna dair size %100

124
00:07:54,838 --> 00:07:59,720
güven verecek bir hata tespiti veya düzeltme yöntemi olmadığını unutmayın.

125
00:07:59,720 --> 00:08:02,970
Sonuçta, yeterince rastgele gürültü her zaman geçerli bir mesajı

126
00:08:02,970 --> 00:08:05,920
tamamen şans eseri başka bir geçerli mesaja dönüştürebilir.

127
00:08:05,920 --> 00:08:11,162
Bunun yerine amaç, belirli bir maksimum hata sayısına kadar dayanıklı

128
00:08:11,162 --> 00:08:16,480
bir şema bulmak veya bunun gibi yanlış pozitif olasılığını azaltmaktır.

129
00:08:16,480 --> 00:08:20,239
Eşlik kontrolleri kendi başlarına oldukça zayıftır, ancak tüm

130
00:08:20,239 --> 00:08:23,998
mesajdaki değişim fikrini tek bir bit&#39;e indirgeyerek bize

131
00:08:23,998 --> 00:08:28,000
verdikleri şey, daha karmaşık planlar için güçlü bir yapı taşıdır.

132
00:08:28,000 --> 00:08:32,723
Örneğin, Hamming bir hatanın sadece meydana geldiğini değil, nerede meydana geldiğini de

133
00:08:32,723 --> 00:08:37,499
belirlemenin bir yolunu ararken, onun temel görüşü şuydu: Eğer bazı eşitlik kontrollerini

134
00:08:37,499 --> 00:08:42,222
mesajın tamamına değil de dikkatle seçilmiş belirli alt kümelere uygularsanız, şu soruyu

135
00:08:42,222 --> 00:08:46,840
sorabilirsiniz: herhangi bir bit hatasının yerini belirleyen daha rafine bir dizi soru.

136
00:08:46,840 --> 00:08:50,357
Genel his biraz 20 soruluk bir oyun oynamaya, olasılıklar

137
00:08:50,357 --> 00:08:54,300
alanını yarıya indiren evet veya hayır soruları sormaya benziyor.

138
00:08:54,300 --> 00:08:57,104
Örneğin, diyelim ki sadece bu 8 bit üzerinde, tek sayılı

139
00:08:57,104 --> 00:09:00,400
konumların tümü üzerinde bir eşlik kontrolü yaptığımızı varsayalım.

140
00:09:00,400 --> 00:09:04,811
Daha sonra bir hata tespit edilirse, alıcıya hatanın tam olarak nerede

141
00:09:04,811 --> 00:09:09,160
olduğu, yani tek bir konumda olduğu hakkında biraz daha bilgi verilir.

142
00:09:09,160 --> 00:09:13,048
Bu 8 bit arasında herhangi bir hata tespit edilmezse, bu ya hiç

143
00:09:13,048 --> 00:09:17,240
hata olmadığı anlamına gelir ya da çift konumlarda bir yerde bulunur.

144
00:09:17,240 --> 00:09:21,251
Eşlik kontrolünü bitlerin yarısıyla sınırlandırmanın onu daha az etkili

145
00:09:21,251 --> 00:09:25,318
hale getirdiğini düşünebilirsiniz, ancak diğer iyi seçilmiş kontrollerle

146
00:09:25,318 --> 00:09:29,720
birlikte yapıldığında, mantıksız bir şekilde bize çok daha güçlü bir şey verir.

147
00:09:29,720 --> 00:09:33,719
Eşlik kontrolünü gerçekten ayarlamak için, unutmayın, o tam grubun

148
00:09:33,719 --> 00:09:37,600
eşliğini kontrol eden bazı özel bitlerin tahsis edilmesi gerekir.

149
00:09:37,600 --> 00:09:39,920
Burada sadece konum 1&#39;i seçelim.

150
00:09:39,920 --> 00:09:43,922
Gösterilen örnekte, bu 8 bitin paritesi şu anda tektir, dolayısıyla

151
00:09:43,922 --> 00:09:48,220
gönderen bu eşlik bitinin değiştirilmesinden sorumludur ve artık çifttir.

152
00:09:48,220 --> 00:09:51,040
Bu, yapacağımız 4 eşlik kontrolünden yalnızca 1&#39;idir.

153
00:09:51,040 --> 00:09:54,284
İkinci kontrol, en azından burada çizdiğimiz şekliyle,

154
00:09:54,284 --> 00:09:56,880
ızgaranın sağ yarısındaki 8 bit arasındadır.

155
00:09:56,880 --> 00:10:00,379
Bu kez konum 2&#39;yi eşlik biti olarak kullanabiliriz, böylece

156
00:10:00,379 --> 00:10:03,551
bu 8 bit zaten eşit bir eşliğe sahiptir ve gönderen, bu 2

157
00:10:03,551 --> 00:10:07,160
numaralı biti değiştirmeden bırakmanın kendisini iyi hissedebilir.

158
00:10:07,160 --> 00:10:11,368
Diğer taraftan eğer alıcı bu grubun paritesini kontrol ederse ve bunun tuhaf

159
00:10:11,368 --> 00:10:15,960
olduğunu görürse, hatanın sağdaki bu 8 bit arasında bir yerde olduğunu anlayacaktır.

160
00:10:15,960 --> 00:10:18,782
Aksi takdirde bu, ya hata olmadığı ya da hatanın

161
00:10:18,782 --> 00:10:21,260
sol yarıda bir yerde olduğu anlamına gelir.

162
00:10:21,260 --> 00:10:24,051
Ya da sanırım iki hata olabilirdi ama şimdilik

163
00:10:24,051 --> 00:10:27,080
tüm blokta en fazla bir hata olduğunu varsayacağız.

164
00:10:27,080 --> 00:10:29,160
Bundan daha fazlası için işler tamamen bozulur.

165
00:10:29,160 --> 00:10:32,564
Burada, sonraki iki kontrole bakmadan önce, bir dakika durup bu ilk ikisinin

166
00:10:32,564 --> 00:10:35,880
birlikte değerlendirildiğinde bize ne yapmamıza olanak sağladığını düşünün.

167
00:10:35,880 --> 00:10:40,240
Diyelim ki tek sütunlar arasında ve sağ yarıda bir hata tespit ettiniz.

168
00:10:40,240 --> 00:10:43,940
Bu mutlaka hatanın son sütunda bir yerde olduğu anlamına gelir.

169
00:10:43,940 --> 00:10:47,230
Tek sütunda hata yoksa ancak sağ yarıda bir hata varsa,

170
00:10:47,230 --> 00:10:50,520
bu size sorunun sondan ikinci sütunda olduğunu gösterir.

171
00:10:50,520 --> 00:10:53,613
Benzer şekilde, tek sütunlarda bir hata varsa ancak sağ yarıda

172
00:10:53,613 --> 00:10:56,560
değilse, bunun ikinci sütunda bir yerde olduğunu bilirsiniz.

173
00:10:56,560 --> 00:11:00,185
Ve eğer bu iki eşlik kontrolünden hiçbiri bir şey tespit etmezse, bu,

174
00:11:00,185 --> 00:11:03,760
hatanın olabileceği tek yerin en soldaki sütun olduğu anlamına gelir.

175
00:11:03,760 --> 00:11:06,480
Ancak bu aynı zamanda hiçbir hatanın olmadığı anlamına da gelebilir.

176
00:11:06,480 --> 00:11:09,246
Bu, iki eşlik kontrolünün sütunu belirlememize izin

177
00:11:09,246 --> 00:11:11,800
verdiğini söylemenin oldukça ayrıntılı bir yolu.

178
00:11:11,800 --> 00:11:14,000
Buradan sonrasını muhtemelen tahmin edebilirsiniz.

179
00:11:14,000 --> 00:11:16,240
Temelde aynı şeyi yapıyoruz ancak satırlar için.

180
00:11:16,240 --> 00:11:21,040
Konum 4&#39;ü eşlik biti olarak kullanarak tek satırlarda bir eşlik kontrolü yapılacak.

181
00:11:21,040 --> 00:11:26,480
Yani bu örnekte bu grup zaten çift eşlikli olduğundan bit 4, 0&#39;a ayarlanacaktır.

182
00:11:26,480 --> 00:11:29,259
Ve son olarak, alt iki satırda, konum 8&#39;i

183
00:11:29,259 --> 00:11:32,280
eşlik biti olarak kullanan bir eşlik kontrolü var.

184
00:11:32,280 --> 00:11:35,523
Bu durumda, gruba eşit eşitlik sağlamak için gönderenin

185
00:11:35,523 --> 00:11:37,840
8. biti açması gerekiyor gibi görünüyor.

186
00:11:37,840 --> 00:11:40,374
İlk iki kontrol sütunu belirlememize izin verdiği gibi,

187
00:11:40,374 --> 00:11:43,000
sonraki iki kontrol de satırı belirlemenize olanak sağlar.

188
00:11:43,000 --> 00:11:48,400
Örnek olarak, iletim sırasında örneğin 3. pozisyonda bir hata olduğunu hayal edin.

189
00:11:48,400 --> 00:11:52,314
Bu, birinci eşlik grubunu etkiler ve aynı zamanda ikinci eşlik grubunu

190
00:11:52,314 --> 00:11:56,340
da etkiler, böylece alıcı, sağ sütunda bir yerde bir hata olduğunu bilir.

191
00:11:56,340 --> 00:12:01,380
Ama üçüncü grubu etkilemediği gibi dördüncü grubu da etkilemez.

192
00:12:01,380 --> 00:12:04,994
Ve bu, alıcının hatayı ilk satıra kadar tespit etmesini sağlar, bu da

193
00:12:04,994 --> 00:12:08,660
zorunlu olarak 3. konum anlamına gelir, böylece hatayı düzeltebilirler.

194
00:12:08,660 --> 00:12:11,531
Bu dört sorunun yanıtlarının, nerede olursa olsun, belirli bir

195
00:12:11,531 --> 00:12:14,357
konumu belirlemenize gerçekten olanak sağlayacağına kendinizi

196
00:12:14,357 --> 00:12:17,320
ikna etmek için bir dakikanızı ayırmanın tadını çıkarabilirsiniz.

197
00:12:17,320 --> 00:12:20,446
Hatta aranızdaki zeki biri bu sorularla ikili

198
00:12:20,446 --> 00:12:23,640
sayım arasında bir bağlantı bile fark edebilir.

199
00:12:23,640 --> 00:12:27,260
Ve eğer yaparsanız, tekrar vurgulayayım, duraklatın,

200
00:12:27,260 --> 00:12:30,880
ben onu bozmadan bağlantıyı kendiniz kurmaya çalışın.

201
00:12:30,880 --> 00:12:34,028
Bir eşlik bitinin kendisi etkilenirse ne olacağını

202
00:12:34,028 --> 00:12:36,560
merak ediyorsanız, bunu deneyebilirsiniz.

203
00:12:36,560 --> 00:12:41,754
Bir dakikanızı ayırıp bu dört özel parça arasındaki herhangi bir hatanın,

204
00:12:41,754 --> 00:12:47,440
tıpkı diğerleri gibi, dört sorudan oluşan aynı grupla nasıl bulunacağını düşünün.

205
00:12:47,440 --> 00:12:50,470
Aslında bunun bir önemi yok, çünkü günün sonunda istediğimiz şey

206
00:12:50,470 --> 00:12:53,640
mesaj bitlerini korumaktır, hata düzeltme bitleri yoluna devam eder.

207
00:12:53,640 --> 00:12:56,308
Ancak bu parçaların da korunması, doğal olarak

208
00:12:56,308 --> 00:12:59,260
bir yan ürün olarak planın dışında kalan bir şeydir.

209
00:12:59,260 --> 00:13:02,380
Bunun nasıl ölçekleneceğini tahmin etmekten de keyif alabilirsiniz.

210
00:13:02,380 --> 00:13:06,744
Örneğin, bir konumu belirlemek için 256 bit boyutunda bir blok

211
00:13:06,744 --> 00:13:11,246
kullansaydık, belirli bir noktaya giden yolu ikili olarak aramak

212
00:13:11,246 --> 00:13:15,680
için yalnızca sekiz evet veya hayır sorusuna ihtiyacınız olurdu.

213
00:13:15,680 --> 00:13:19,688
Ve unutmayın, her soru uygun eşlik kontrolünü ayarlamak

214
00:13:19,688 --> 00:13:23,340
için yalnızca tek bir bitten vazgeçmeyi gerektirir.

215
00:13:23,340 --> 00:13:26,540
Bazılarınız bunu zaten görmüş olabilir, ancak daha sonra bu soruların ne

216
00:13:26,540 --> 00:13:29,960
olduğunu bir veya iki dakika içinde bulmanın sistematik yolundan bahsedeceğiz.

217
00:13:29,960 --> 00:13:34,440
Umarım bu taslak, burada geliştirdiğimiz şeyin verimliliğini takdir etmek için yeterlidir.

218
00:13:34,440 --> 00:13:37,988
İlk şey, vurgulanan sekiz eşlik biti dışında, istediğiniz

219
00:13:37,988 --> 00:13:41,720
her şey olabilir, istediğiniz mesajı veya veriyi taşıyabilir.

220
00:13:41,720 --> 00:13:47,862
8 bit, tamamen mesajın geri kalanı tarafından belirlenmeleri anlamında gereksizdir,

221
00:13:47,862 --> 00:13:53,640
ancak bu, mesajın bir bütün olarak kopyalanmasından çok daha akıllı bir yoldur.

222
00:13:53,640 --> 00:13:56,347
Ve yine de, bu kadar az vazgeçmekle, herhangi bir

223
00:13:56,347 --> 00:13:59,000
tek bit hatasını tespit edip düzeltebileceksiniz.

224
00:13:59,000 --> 00:14:00,400
Neredeyse.

225
00:14:00,400 --> 00:14:04,724
Tamam, buradaki sorun şu ki, eğer dört eşlik kontrolünden hiçbiri bir

226
00:14:04,724 --> 00:14:09,049
hata tespit etmezse, yani özel olarak seçilmiş 8 bitlik alt kümelerin

227
00:14:09,049 --> 00:14:13,435
tümü, gönderenin amaçladığı gibi eşit eşliklere sahipse, o zaman bu da

228
00:14:13,435 --> 00:14:17,760
hiçbir hata olmadığı anlamına gelir. veya bizi 0 pozisyonuna daraltır.

229
00:14:17,760 --> 00:14:22,936
Görüyorsunuz, dört evet veya hayır sorusuyla, eşitlik kontrollerimiz için 16 olası sonuç

230
00:14:22,936 --> 00:14:27,881
var ve ilk başta bu, bloktaki 16 konumdan 1&#39;inin yerini belirlemek için mükemmel

231
00:14:27,881 --> 00:14:33,000
gibi geliyor, ancak aynı zamanda 17. sonucu da iletmeniz gerekiyor, yani hata yok durum.

232
00:14:33,000 --> 00:14:37,860
Buradaki çözüm aslında oldukça basit, sadece o 0&#39;ıncı biti tamamen unutun.

233
00:14:37,860 --> 00:14:41,291
Yani dört eşlik kontrolümüzü yaptığımızda ve hepsinin eşit olduğunu

234
00:14:41,291 --> 00:14:44,320
gördüğümüzde, bu açıkça hiçbir hata olmadığı anlamına gelir.

235
00:14:44,320 --> 00:14:49,286
Bunun anlamı, 16 bitlik bir blokla çalışmak yerine, 15 bitlik bir blokla çalışıyoruz;

236
00:14:49,286 --> 00:14:54,080
burada bitlerin 11&#39;i mesaj taşımak için serbest ve 4&#39;ü yedeklik için orada.

237
00:14:54,080 --> 00:14:56,635
Ve bununla birlikte, artık sektördeki insanların

238
00:14:56,635 --> 00:14:59,400
15-11 Hamming kodu olarak adlandıracağı şeye sahibiz.

239
00:14:59,400 --> 00:15:02,527
Bununla birlikte, 2&#39;nin temiz kuvveti olan bir blok boyutuna

240
00:15:02,527 --> 00:15:05,703
sahip olmak güzel ve bu 0&#39;ıncı biti etrafta tutmanın ve bizim

241
00:15:05,703 --> 00:15:08,880
için biraz fazladan iş yapmasını sağlamanın akıllıca bir yolu var.

242
00:15:08,880 --> 00:15:12,420
Bunu tüm blok boyunca bir eşlik biti olarak kullanırsak, 2

243
00:15:12,420 --> 00:15:16,320
bitlik hataları düzeltemesek bile aslında tespit etmemizi sağlar.

244
00:15:16,320 --> 00:15:17,440
İşte nasıl çalışıyor?

245
00:15:17,440 --> 00:15:21,409
Bu dört özel hata düzeltme bitini ayarladıktan sonra, tam bloğun paritesi

246
00:15:21,409 --> 00:15:25,540
normal bir eşlik kontrolü gibi çift olacak şekilde 0&#39;ıncı biti ayarladık.

247
00:15:25,540 --> 00:15:29,557
Şimdi, eğer tek bir bit hatası varsa, o zaman tam bloğun paritesi tek olacak

248
00:15:29,557 --> 00:15:33,940
şekilde değişir, ancak dört hata düzeltme kontrolü sayesinde bunu yine de yakalarız.

249
00:15:33,940 --> 00:15:37,766
Bununla birlikte, eğer iki hata varsa, o zaman genel parite tekrar

250
00:15:37,766 --> 00:15:41,764
eşit duruma dönecektir, ancak alıcı yine de bu dört eşlik kontrolünde

251
00:15:41,764 --> 00:15:45,820
olup bitenlerden dolayı en azından bir miktar hata olduğunu görecektir.

252
00:15:45,820 --> 00:15:49,400
Yani genel olarak eşit bir eşitlik fark ederlerse ancak diğer kontrollerde

253
00:15:49,400 --> 00:15:52,980
sıfırdan farklı bir şey oluyorsa, bu onlara en az iki hata olduğunu söyler.

254
00:15:52,980 --> 00:15:54,420
Bu çok akıllıca değil mi?

255
00:15:54,420 --> 00:15:58,324
Her ne kadar bu 2 bitlik hataları düzeltemesek de, o küçük can sıkıcı

256
00:15:58,324 --> 00:16:02,340
0&#39;ıncı biti tekrar devreye sokarak, onları tespit etmemizi sağlıyor.

257
00:16:02,340 --> 00:16:06,540
Bu oldukça standarttır, genişletilmiş Hamming kodu olarak bilinir.

258
00:16:06,540 --> 00:16:10,111
Teknik açıdan konuşursak, artık en azından 16 bitlik bir blok örneği

259
00:16:10,111 --> 00:16:13,580
için Hamming kodunun ne yaptığının tam bir açıklamasına sahipsiniz.

260
00:16:13,580 --> 00:16:17,804
Ancak, baştan sona kendi başınıza tam bir örnek yaparak anlayışınızı kontrol etmeyi ve

261
00:16:17,804 --> 00:16:21,980
bu noktaya kadar her şeyi sağlamlaştırmayı daha tatmin edici bulacağınızı düşünüyorum.

262
00:16:21,980 --> 00:16:25,100
Kendinizi kontrol edebilmeniz için ben de sizinle birlikte üzerinden geçeceğim.

263
00:16:25,100 --> 00:16:30,248
İster uzayda çevirdiğiniz gerçek bir mesaj, ister zaman içinde depolamak istediğiniz

264
00:16:30,248 --> 00:16:35,700
bazı veriler olsun, bir mesaj oluşturmak için ilk adım, onu 11 bitlik parçalara bölmektir.

265
00:16:35,700 --> 00:16:40,340
Her parça, hataya dayanıklı 16 bitlik bir blok halinde paketlenecek.

266
00:16:40,340 --> 00:16:43,740
Hadi bunu bir örnek olarak alalım ve gerçekten üzerinde çalışalım.

267
00:16:43,740 --> 00:16:45,380
Devam edin, gerçekten yapın!

268
00:16:45,380 --> 00:16:52,980
Durup bu bloğu bir araya getirmeyi deneyelim.

269
00:16:52,980 --> 00:16:53,980
Tamam, hazır mısın?

270
00:16:53,980 --> 00:17:00,115
Unutmayın, 0 konumu ve 2&#39;nin diğer kuvvetleri hata düzeltme görevi için ayrılmıştır,

271
00:17:00,115 --> 00:17:05,700
bu nedenle mesaj bitlerini kalan tüm noktalara sırayla yerleştirerek başlarsınız.

272
00:17:05,700 --> 00:17:09,532
Bu grubun çift eşlikli olması gerekir ki zaten öyledir, dolayısıyla

273
00:17:09,532 --> 00:17:13,140
1 konumundaki eşlik bitini 0 olacak şekilde ayarlamanız gerekir.

274
00:17:13,140 --> 00:17:16,554
Bir sonraki grup tek bir eşlikle başlar, dolayısıyla

275
00:17:16,554 --> 00:17:19,260
eşlik bitini 1 olarak ayarlamanız gerekir.

276
00:17:19,260 --> 00:17:22,167
Bundan sonraki grup tek eşlikle başlar, dolayısıyla

277
00:17:22,167 --> 00:17:24,740
eşlik bitini yine 1&#39;e ayarlamanız gerekir.

278
00:17:24,740 --> 00:17:31,500
Ve son grubun da tek bir paritesi var, yani bu biti 8 pozisyonuna 1 olarak ayarladık.

279
00:17:31,500 --> 00:17:36,470
Ve son adım olarak, tam bloğun artık çift bir eşlik durumu var; bu, 0 numaralı bit

280
00:17:36,470 --> 00:17:41,500
sayısını, yani kapsayıcı eşlik bitini 0 olarak ayarlayabileceğiniz anlamına geliyor.

281
00:17:41,500 --> 00:17:45,240
Yani bu blok gönderildiğinde, dört özel alt kümenin ve

282
00:17:45,240 --> 00:17:48,980
bir bütün olarak bloğun paritesi çift veya 0 olacaktır.

283
00:17:48,980 --> 00:17:53,620
Alıştırmanın ikinci bölümünde alıcı rolünü oynamanızı sağlayalım.

284
00:17:53,620 --> 00:17:56,948
Tabii bu, bu mesajın ne olduğunu henüz bilmediğiniz anlamına gelir,

285
00:17:56,948 --> 00:18:00,180
belki bazılarınız ezberlemiştir, ama varsayalım ki ezberlemediniz.

286
00:18:00,180 --> 00:18:04,189
Yapacağım şey, o bloktaki bitlerden 0, 1 veya 2&#39;sini

287
00:18:04,189 --> 00:18:08,340
değiştirmek ve sonra sizden ne yaptığımı bulmanızı istemek.

288
00:18:08,340 --> 00:18:13,460
Tekrar duraklatın ve çözmeye çalışın.

289
00:18:13,460 --> 00:18:21,039
Tamam, şimdi alıcı olarak siz ilk eşlik grubunu kontrol ediyorsunuz ve bunun çift

290
00:18:21,039 --> 00:18:29,080
olduğunu görebiliyorsunuz, dolayısıyla mevcut herhangi bir hatanın çift sütunda olması

291
00:18:29,080 --> 00:18:29,820
gerekir.

292
00:18:29,820 --> 00:18:34,255
Bir sonraki kontrol bize tek bir sayı veriyor, ikimize de en az

293
00:18:34,255 --> 00:18:38,760
bir hata olduğunu söylüyor ve bizi bu spesifik sütuna daraltıyor.

294
00:18:38,760 --> 00:18:42,900
Üçüncü kontrol eşittir, olasılıkları daha da azaltır.

295
00:18:42,900 --> 00:18:47,026
Ve son eşlik kontrolü tuhaf, bize altta bir yerde bir hata olduğunu

296
00:18:47,026 --> 00:18:51,700
söylüyor, şu anda bunun 10 numaralı konumda olması gerektiğini görebiliyoruz.

297
00:18:51,700 --> 00:18:54,960
Dahası, tüm bloğun paritesi tuhaftır ve bize iki

298
00:18:54,960 --> 00:18:58,220
değil, tek bir atış olduğu konusunda güven verir.

299
00:18:58,220 --> 00:19:01,600
Üç veya daha fazla ise tüm bahisler kapalıdır.

300
00:19:01,600 --> 00:19:06,241
10 numaralı biti düzelttikten sonra, düzeltme için kullanılmayan 11 biti

301
00:19:06,241 --> 00:19:10,882
çıkarmak bize orijinal mesajın ilgili bölümünü verir; geri sararsanız ve

302
00:19:10,882 --> 00:19:16,160
karşılaştırırsanız, bu gerçekten de örneğe başladığımız şeyin tam olarak aynısıdır.

303
00:19:16,160 --> 00:19:19,984
Artık tüm bunları elle nasıl yapacağınızı bildiğinize göre, size tüm bu mantığın temel

304
00:19:19,984 --> 00:19:23,940
kısmını tek bir Python kodu satırıyla nasıl gerçekleştirebileceğinizi göstermek istiyorum.

305
00:19:23,940 --> 00:19:27,885
Görüyorsunuz, size henüz söylemediğim şey, bu algoritmanın gerçekte ne kadar zarif

306
00:19:27,885 --> 00:19:31,736
olduğu, bir makinenin hatanın konumunu göstermesinin ne kadar basit olduğu, bunu

307
00:19:31,736 --> 00:19:34,826
sistematik olarak nasıl ölçeklendireceğimiz ve tüm bunları nasıl

308
00:19:34,826 --> 00:19:38,581
çerçeveleyebileceğimizdir. bu, birden fazla ayrı eşlik kontrolü yerine tek bir

309
00:19:38,581 --> 00:19:39,580
işlem olarak yapılır.

310
00:19:39,580 --> 00:19:39,580
Ne demek istediğimi anlamak için 2. bölümde bana katılın.

