1
00:00:00,000 --> 00:00:08,620
Bạn đã bao giờ tự hỏi làm thế nào có thể làm xước một đĩa CD hoặc

2
00:00:08,620 --> 00:00:10,900
DVD mà vẫn có thể phát lại bất cứ thứ gì nó đang lưu trữ không?

3
00:00:10,900 --> 00:00:15,280
Vết xước thực sự ảnh hưởng đến số 1 và 0 trên đĩa, do đó nó đọc

4
00:00:15,280 --> 00:00:20,500
dữ liệu khác với những gì được lưu trữ, nhưng trừ khi nó thực sự bị trầy

5
00:00:20,500 --> 00:00:26,540
xước, các bit mà nó đọc được sẽ được giải mã thành cùng một tệp được mã

6
00:00:26,540 --> 00:00:28,400
hóa trên đó, một bit để sao chép bit, bất chấp tất cả những lỗi đó.

7
00:00:28,400 --> 00:00:32,800
Có rất nhiều sự thông minh về toán học cho phép chúng ta lưu trữ dữ liệu

8
00:00:32,800 --> 00:00:36,840
và quan trọng không kém là truyền dữ liệu theo cách có khả năng chống lại lỗi.

9
00:00:36,840 --> 00:00:41,480
Được rồi, thực ra không cần quá thông minh

10
00:00:41,480 --> 00:00:42,480
để nghĩ ra cách thực hiện việc này.

11
00:00:42,480 --> 00:00:47,660
Bất kỳ tập tin nào, cho dù đó là video, âm thanh hay văn bản, một số

12
00:00:47,660 --> 00:00:50,960
mã, hình ảnh, bất cứ thứ gì, cuối cùng đều là một chuỗi số 1 và 0.

13
00:00:50,960 --> 00:00:55,340
Và một chiến lược đơn giản để sửa bất kỳ bit nào

14
00:00:55,340 --> 00:00:57,780
bị đảo lộn là lưu trữ ba bản sao của mỗi bit.

15
00:00:57,780 --> 00:01:02,240
Sau đó, máy đọc tệp này có thể so sánh ba bản sao này và luôn

16
00:01:02,240 --> 00:01:07,440
lấy 2 trên 3 bản tốt nhất bất cứ khi nào có sự khác biệt.

17
00:01:07,440 --> 00:01:11,560
Nhưng điều đó có nghĩa là sử dụng 2/3 dung lượng của bạn để dự phòng.

18
00:01:11,560 --> 00:01:15,360
Và thậm chí sau đó, đối với tất cả không gian bị bỏ đi, không có gì đảm

19
00:01:15,360 --> 00:01:18,120
bảo chắc chắn về điều gì sẽ xảy ra nếu có nhiều hơn một bit bị đảo lộn.

20
00:01:18,120 --> 00:01:21,960
Câu hỏi thú vị hơn nhiều là làm thế nào để có

21
00:01:21,960 --> 00:01:24,740
thể sửa lỗi trong khi chiếm ít không gian nhất có thể.

22
00:01:24,740 --> 00:01:28,500
Ví dụ: bằng cách sử dụng phương pháp bạn sẽ tìm hiểu về video này, bạn có thể lưu trữ dữ liệu của mình

23
00:01:28,500 --> 00:01:35,840
trong các khối 256 bit, trong đó mỗi khối sử dụng 9 bit, 9! hoạt động như một loại dự phòng và 247

24
00:01:35,840 --> 00:01:41,000
bit còn lại có thể tự do mang bất kỳ thông điệp hoặc dữ liệu có ý nghĩa nào bạn muốn.

25
00:01:41,000 --> 00:01:44,740
Và vẫn sẽ xảy ra trường hợp nếu bất kỳ bit nào bị đảo lộn ở đây, chỉ

26
00:01:44,740 --> 00:01:49,640
cần nhìn vào khối này và không cần gì thêm, máy sẽ có thể xác định rằng đã

27
00:01:49,640 --> 00:01:53,120
có lỗi và xác định chính xác lỗi đó ở đâu để nó biết cách sửa. .

28
00:01:53,140 --> 00:01:55,540
Và thành thật mà nói, điều đó giống như một phép thuật.

29
00:01:55,540 --> 00:01:59,400
Và đối với sơ đồ cụ thể này, nếu hai bit bị đảo lộn, máy ít nhất sẽ

30
00:01:59,400 --> 00:02:03,180
có thể phát hiện ra rằng có hai lỗi, mặc dù nó sẽ không biết cách sửa chúng.

31
00:02:03,180 --> 00:02:08,140
Chúng ta sẽ nói một lát sau về cách điều chỉnh tỷ lệ này đối với các khối có kích thước khác nhau.

32
00:02:08,140 --> 00:02:12,620
Các phương pháp cho phép bạn sửa các lỗi như thế này

33
00:02:12,620 --> 00:02:13,880
được biết đến một cách hợp lý dưới dạng mã sửa lỗi.

34
00:02:13,880 --> 00:02:18,220
Trong phần lớn thế kỷ trước, lĩnh vực này thực sự là một nguồn toán học sâu

35
00:02:18,220 --> 00:02:23,000
sắc đáng kinh ngạc được tích hợp vào các thiết bị chúng ta sử dụng hàng ngày.

36
00:02:23,000 --> 00:02:27,740
Mục tiêu ở đây là giúp bạn hiểu rất kỹ về một

37
00:02:27,740 --> 00:02:29,660
trong những ví dụ sớm nhất, được gọi là mã Hamming.

38
00:02:29,660 --> 00:02:32,620
Và nhân tiện, cách tôi nghĩ về cấu trúc của video này không phải là giải thích

39
00:02:32,620 --> 00:02:37,060
nó một cách trực tiếp nhất có thể mà quan trọng hơn là thúc đẩy bạn

40
00:02:37,060 --> 00:02:40,220
tự sáng tạo ra nó với một chút hướng dẫn nhẹ nhàng chỗ này chỗ kia.

41
00:02:40,220 --> 00:02:44,100
Vì vậy, khi bạn cảm thấy mình biết mọi chuyện sẽ đi đến đâu vào một thời điểm nào đó, hãy dành thời gian

42
00:02:44,100 --> 00:02:47,180
đó để tạm dừng, chủ động dự đoán kế hoạch sẽ diễn ra như thế nào trước khi tôi nói cho bạn biết.

43
00:02:47,180 --> 00:02:51,500
Ngoài ra, nếu bạn muốn hiểu sâu hơn ở cấp độ phần cứng, Ben Eater

44
00:02:51,500 --> 00:02:55,160
đã tạo một video kết hợp với video này hướng dẫn bạn cách thực

45
00:02:55,160 --> 00:02:59,520
sự triển khai mã Hamming trên bảng mạch, điều này cực kỳ thỏa mãn.

46
00:02:59,520 --> 00:03:03,120
Bạn nên biết, mã Hamming không được sử dụng rộng rãi như các mã hiện đại hơn, như thuật toán Reed-Solomon,

47
00:03:03,120 --> 00:03:08,040
nhưng có một điều kỳ diệu nào đó đối với sự tương phản giữa việc nhiệm vụ này có cảm

48
00:03:08,040 --> 00:03:14,240
giác bất khả thi ngay từ đầu và nó có vẻ hoàn toàn hợp lý. bạn tìm hiểu về Hamming.

49
00:03:14,240 --> 00:03:19,080
Nguyên tắc cơ bản của việc sửa lỗi là trong một không gian rộng lớn gồm tất cả các

50
00:03:19,300 --> 00:03:22,860
thông báo có thể có, chỉ một số tập hợp con được coi là các thông báo hợp lệ.

51
00:03:22,860 --> 00:03:29,100
Tương tự, hãy nghĩ về những từ viết đúng chính tả và những từ viết sai chính tả.

52
00:03:29,100 --> 00:03:33,340
Bất cứ khi nào một tin nhắn hợp lệ bị thay đổi, người nhận có trách nhiệm sửa lại những gì

53
00:03:33,340 --> 00:03:38,380
họ nhìn thấy cho người hàng xóm hợp lệ gần nhất, như bạn có thể làm với một lỗi đánh máy.

54
00:03:38,380 --> 00:03:43,100
Tuy nhiên, việc đưa ra một thuật toán cụ thể để phân loại hiệu

55
00:03:43,100 --> 00:03:47,160
quả các tin nhắn như thế này cần có sự thông minh nhất định.

56
00:03:47,160 --> 00:03:52,060
Câu chuyện bắt đầu vào những năm 1940, khi chàng trai trẻ Richard Hamming đang làm việc cho

57
00:03:52,060 --> 00:03:55,900
Bell Labs, và một số công việc của anh liên quan đến việc sử dụng một chiếc

58
00:03:55,900 --> 00:03:57,420
máy tính thẻ đục lỗ rất đắt tiền mà anh chỉ có quyền truy cập hạn chế.

59
00:03:57,420 --> 00:04:01,200
Và các chương trình mà anh ấy thực hiện liên tục bị

60
00:04:01,200 --> 00:04:03,140
lỗi, bởi vì thỉnh thoảng có một chút bị đọc sai.

61
00:04:03,140 --> 00:04:07,140
Sự thất vọng là lò thử thách của phát minh, anh ta chán nản

62
00:04:07,140 --> 00:04:09,280
đến mức phát minh ra mã sửa lỗi đầu tiên trên thế giới.

63
00:04:09,280 --> 00:04:13,020
Có nhiều cách khác nhau để đóng khung mã Hamming, nhưng bước đầu tiên

64
00:04:13,020 --> 00:04:16,620
chúng ta sẽ tìm hiểu nó theo cách mà chính Hamming nghĩ về chúng.

65
00:04:16,620 --> 00:04:21,400
Hãy sử dụng một ví dụ đơn giản nhưng không quá đơn giản, một khối 16 bit.

66
00:04:21,400 --> 00:04:25,700
Chúng ta sẽ đánh số vị trí của các bit này từ 0 đến 15.

67
00:04:25,700 --> 00:04:30,520
Dữ liệu thực tế mà chúng tôi muốn lưu trữ sẽ chỉ chiếm 12 bit trong

68
00:04:30,520 --> 00:04:33,920
số này, trong khi 4 vị trí được dành riêng như một loại dự phòng.

69
00:04:33,920 --> 00:04:38,120
Từ dư thừa ở đây không đơn giản có nghĩa là sao chép, xét cho cùng thì 4

70
00:04:38,120 --> 00:04:40,200
bit đó không cho chúng ta đủ chỗ để sao chép dữ liệu một cách mù quáng.

71
00:04:40,200 --> 00:04:44,880
Thay vào đó, chúng sẽ cần phải là một loại dự phòng thông minh và sắc thái

72
00:04:44,880 --> 00:04:48,740
hơn nhiều, không thêm bất kỳ thông tin mới nào mà thêm khả năng phục hồi.

73
00:04:48,740 --> 00:04:52,620
Bạn có thể mong đợi 4 bit đặc biệt này được kết hợp chặt chẽ với nhau, có thể

74
00:04:52,620 --> 00:04:56,400
ở cuối hoặc thứ gì đó tương tự, nhưng như bạn sẽ thấy, việc đặt chúng ở các vị

75
00:04:56,400 --> 00:05:00,320
trí có lũy thừa bằng 2 sẽ tạo ra thứ gì đó thực sự thanh lịch vào cuối.

76
00:05:00,320 --> 00:05:05,420
Nó cũng có thể cung cấp cho bạn một gợi ý nhỏ về cách tỷ lệ này đối với các khối lớn hơn.

77
00:05:05,420 --> 00:05:09,220
Ngoài ra, về mặt kỹ thuật, nó chỉ có 11 bit dữ liệu, bạn sẽ thấy có một sắc thái

78
00:05:09,220 --> 00:05:14,260
nhẹ cho những gì diễn ra ở vị trí 0, nhưng hiện tại đừng lo lắng về điều đó.

79
00:05:14,280 --> 00:05:18,640
Giống như bất kỳ thuật toán sửa lỗi nào, điều này sẽ có sự tham gia của

80
00:05:18,640 --> 00:05:23,200
hai người chơi, một người gửi chịu trách nhiệm thiết lập 4 bit đặc biệt này và

81
00:05:23,200 --> 00:05:26,360
một người nhận chịu trách nhiệm thực hiện một số loại kiểm tra và sửa lỗi.

82
00:05:26,360 --> 00:05:30,040
Tất nhiên, từ người gửi và người nhận thực sự đề cập đến máy móc

83
00:05:30,040 --> 00:05:34,040
hoặc phần mềm thực hiện tất cả các bước kiểm tra và ý tưởng

84
00:05:34,040 --> 00:05:35,480
về tin nhắn được hiểu rất rộng, bao gồm những thứ như lưu trữ.

85
00:05:35,480 --> 00:05:39,320
Xét cho cùng, việc lưu trữ dữ liệu cũng giống như gửi một tin nhắn

86
00:05:39,320 --> 00:05:42,640
từ quá khứ đến tương lai thay vì từ nơi này đến nơi khác.

87
00:05:42,640 --> 00:05:46,700
Đó là thiết lập, nhưng trước khi đi sâu vào chúng ta cần nói về một

88
00:05:46,700 --> 00:05:51,080
ý tưởng liên quan mới mẻ trong đầu Hamming vào thời điểm ông phát hiện

89
00:05:51,080 --> 00:05:55,520
ra, một phương pháp cho phép bạn phát hiện bất kỳ lỗi bit nào nhưng không

90
00:05:55,520 --> 00:05:57,300
sửa chúng, đã biết trong kinh doanh như một sự kiểm tra tính chẵn lẻ.

91
00:05:57,300 --> 00:06:01,300
Để kiểm tra tính chẵn lẻ, chúng tôi chỉ tách ra một bit duy nhất mà người

92
00:06:01,300 --> 00:06:04,940
gửi chịu trách nhiệm điều chỉnh và phần còn lại được tự do mang tin nhắn.

93
00:06:04,940 --> 00:06:10,380
Công việc duy nhất của bit đặc biệt này là đảm bảo

94
00:06:10,380 --> 00:06:12,100
rằng tổng số số 1 trong tin nhắn là số chẵn.

95
00:06:12,100 --> 00:06:16,920
Vì vậy, ví dụ ngay bây giờ, tổng số 1 đó là 7, là số lẻ nên

96
00:06:16,920 --> 00:06:20,960
người gửi cần lật bit đặc biệt đó thành 1, làm cho số đếm là chẵn.

97
00:06:20,960 --> 00:06:25,320
Nhưng nếu khối đã bắt đầu với số chẵn là 1

98
00:06:25,320 --> 00:06:27,480
thì bit đặc biệt này sẽ được giữ ở mức 0.

99
00:06:27,480 --> 00:06:31,640
Điều này khá đơn giản, có vẻ đơn giản, nhưng đó là một cách cực kỳ tinh tế để chắt lọc ý

100
00:06:31,640 --> 00:06:37,760
tưởng về sự thay đổi ở bất kỳ đâu trong thông điệp để được phản ánh trong một thông tin duy nhất.

101
00:06:37,760 --> 00:06:43,680
Lưu ý nếu bất kỳ bit nào của thông báo này bị đảo ngược, từ 0 thành

102
00:06:43,680 --> 00:06:48,140
1 hoặc 1 thành 0, nó sẽ thay đổi tổng số 1 từ chẵn thành lẻ.

103
00:06:48,140 --> 00:06:52,000
Vì vậy, nếu bạn là người nhận, bạn nhìn vào tin nhắn này và thấy

104
00:06:52,000 --> 00:06:56,580
số lẻ là 1, bạn có thể biết chắc chắn rằng đã xảy ra

105
00:06:56,580 --> 00:06:58,700
lỗi nào đó, mặc dù bạn có thể không biết lỗi đó ở đâu.

106
00:06:58,700 --> 00:07:02,820
Trong thuật ngữ, việc một nhóm bit có số 1 chẵn

107
00:07:02,820 --> 00:07:04,940
hay lẻ được gọi là tính chẵn lẻ của nó.

108
00:07:04,940 --> 00:07:09,140
Bạn cũng có thể sử dụng các con số và nói số chẵn lẻ là 0 hoặc

109
00:07:09,140 --> 00:07:11,320
1, điều này thường hữu ích hơn khi bạn bắt đầu làm toán với ý tưởng này.

110
00:07:11,320 --> 00:07:15,200
Và bit đặc biệt này mà người gửi sử dụng để

111
00:07:15,200 --> 00:07:18,020
kiểm soát tính chẵn lẻ được gọi là bit chẵn lẻ.

112
00:07:18,020 --> 00:07:22,460
Và trên thực tế, chúng ta nên nói rõ, nếu người nhận nhìn thấy một số chẵn lẻ lẻ, điều

113
00:07:22,460 --> 00:07:26,920
đó không nhất thiết có nghĩa là chỉ có một lỗi, có thể có 3 lỗi, hoặc 5 lỗi hoặc

114
00:07:26,920 --> 00:07:29,560
bất kỳ số lẻ nào khác, nhưng họ có thể biết chắc chắn. rằng nó không phải là 0.

115
00:07:29,560 --> 00:07:34,880
Mặt khác, nếu có 2 lỗi hoặc bất kỳ số lỗi chẵn nào thì số 1

116
00:07:34,880 --> 00:07:39,560
cuối cùng vẫn là số chẵn, do đó người nhận không thể hoàn toàn tin

117
00:07:39,560 --> 00:07:43,360
tưởng rằng số chẵn nhất thiết có nghĩa là tin nhắn không có lỗi. .

118
00:07:43,360 --> 00:07:47,860
Bạn có thể phàn nàn rằng một tin nhắn bị lộn xộn chỉ

119
00:07:47,860 --> 00:07:49,760
sau 2 lần lật là khá yếu và bạn hoàn toàn đúng.

120
00:07:49,760 --> 00:07:54,480
Tuy nhiên, hãy nhớ rằng không có phương pháp phát hiện hoặc sửa lỗi nào có thể

121
00:07:54,480 --> 00:07:59,720
giúp bạn tin cậy 100% rằng thư bạn nhận được là thư mà người gửi dự định.

122
00:07:59,720 --> 00:08:03,760
Rốt cuộc, tiếng ồn ngẫu nhiên đủ lớn luôn có thể thay đổi một tin nhắn

123
00:08:03,760 --> 00:08:05,920
hợp lệ thành một tin nhắn hợp lệ khác chỉ hoàn toàn là tình cờ.

124
00:08:05,920 --> 00:08:10,520
Thay vào đó, mục tiêu là đưa ra một sơ đồ mạnh mẽ với số lỗi tối đa

125
00:08:10,520 --> 00:08:16,480
nhất định hoặc có thể giảm xác suất xảy ra kết quả dương tính giả như thế này.

126
00:08:16,480 --> 00:08:20,940
Bản thân việc kiểm tra tính chẵn lẻ khá yếu, nhưng bằng cách chắt lọc ý tưởng

127
00:08:20,940 --> 00:08:25,640
thay đổi toàn bộ thông điệp thành một bit duy nhất, những gì chúng mang lại cho

128
00:08:25,640 --> 00:08:28,000
chúng ta là một khối xây dựng mạnh mẽ cho các kế hoạch phức tạp hơn.

129
00:08:28,000 --> 00:08:32,880
Ví dụ, khi Hamming đang tìm cách xác định lỗi đã xảy ra ở đâu, không chỉ lỗi xảy ra,

130
00:08:32,880 --> 00:08:37,160
hiểu biết sâu sắc quan trọng của ông là nếu bạn áp dụng một số kiểm tra tính chẵn lẻ

131
00:08:37,160 --> 00:08:42,040
không phải cho toàn bộ thông báo mà cho một số tập hợp con được chọn cẩn thận, bạn có

132
00:08:42,040 --> 00:08:46,840
thể hỏi một loạt câu hỏi tinh tế hơn nhằm xác định vị trí của bất kỳ lỗi bit nào.

133
00:08:46,840 --> 00:08:51,280
Cảm giác tổng thể giống như chơi một trò chơi gồm 20 câu hỏi,

134
00:08:51,280 --> 00:08:54,300
đặt các câu hỏi có hoặc không để cắt đôi không gian khả năng.

135
00:08:54,300 --> 00:08:58,840
Ví dụ: giả sử chúng tôi thực hiện kiểm tra tính chẵn lẻ chỉ

136
00:08:58,840 --> 00:08:59,840
trên 8 bit này, tất cả các vị trí được đánh số lẻ.

137
00:09:00,400 --> 00:09:04,560
Sau đó, nếu phát hiện thấy lỗi, nó sẽ cung cấp cho người nhận thêm một chút

138
00:09:04,560 --> 00:09:09,160
thông tin về lỗi cụ thể ở đâu, cụ thể là lỗi ở vị trí kỳ lạ.

139
00:09:09,160 --> 00:09:14,360
Nếu không phát hiện thấy lỗi nào trong số 8 bit đó, điều đó có

140
00:09:14,360 --> 00:09:17,240
nghĩa là không có lỗi nào cả hoặc nó nằm ở vị trí chẵn.

141
00:09:17,240 --> 00:09:21,560
Bạn có thể nghĩ rằng việc giới hạn kiểm tra tính chẵn lẻ ở mức một nửa số bit sẽ khiến

142
00:09:21,560 --> 00:09:25,460
nó kém hiệu quả hơn, nhưng khi nó được thực hiện cùng với các kiểm tra được lựa chọn kỹ lưỡng

143
00:09:25,460 --> 00:09:29,720
khác, nó sẽ mang lại cho chúng ta thứ gì đó mạnh mẽ hơn rất nhiều một cách phản trực giác.

144
00:09:29,720 --> 00:09:34,440
Để thực sự thiết lập việc kiểm tra tính chẵn lẻ đó, hãy nhớ rằng, nó đòi hỏi phải

145
00:09:34,440 --> 00:09:37,600
đánh dấu một số bit đặc biệt có quyền kiểm soát tính chẵn lẻ của toàn bộ nhóm đó.

146
00:09:37,600 --> 00:09:39,920
Ở đây chúng ta hãy chọn vị trí 1.

147
00:09:39,920 --> 00:09:43,960
Đối với ví dụ được hiển thị, tính chẵn lẻ của 8 bit này hiện là số lẻ, do

148
00:09:43,960 --> 00:09:48,220
đó người gửi có trách nhiệm chuyển đổi bit chẵn lẻ đó và bây giờ nó là số chẵn.

149
00:09:48,220 --> 00:09:51,040
Đây chỉ là 1 trong 4 lần kiểm tra tính chẵn lẻ mà chúng tôi sẽ thực hiện.

150
00:09:51,040 --> 00:09:55,560
Kiểm tra thứ hai nằm trong số 8 bit ở nửa bên phải

151
00:09:55,560 --> 00:09:56,880
của lưới, ít nhất là như chúng tôi đã vẽ ở đây.

152
00:09:56,880 --> 00:10:02,520
Lần này chúng ta có thể sử dụng vị trí 2 làm bit chẵn lẻ, vì vậy 8 bit này đã

153
00:10:02,520 --> 00:10:07,160
có giá trị chẵn lẻ và người gửi có thể cảm thấy hài lòng khi giữ nguyên bit số 2 đó.

154
00:10:07,160 --> 00:10:11,040
Sau đó, ở đầu bên kia, nếu người nhận kiểm tra tính chẵn lẻ của nhóm này và thấy rằng

155
00:10:11,040 --> 00:10:15,960
nó kỳ lạ, họ sẽ biết rằng lỗi nằm ở đâu đó trong số 8 bit bên phải này.

156
00:10:15,960 --> 00:10:21,260
Ngược lại, điều đó có nghĩa là không có lỗi hoặc lỗi nằm ở đâu đó ở nửa bên trái.

157
00:10:21,260 --> 00:10:24,040
Hoặc tôi đoán có thể có hai lỗi, nhưng hiện tại chúng ta

158
00:10:24,040 --> 00:10:27,080
giả định rằng có nhiều nhất một lỗi trong toàn bộ khối.

159
00:10:27,080 --> 00:10:29,160
Mọi thứ bị phá vỡ hoàn toàn vì nhiều hơn thế.

160
00:10:29,160 --> 00:10:32,920
Ở đây, trước khi chúng ta xem xét hai bước kiểm tra tiếp theo, hãy dành chút thời gian để suy nghĩ

161
00:10:32,920 --> 00:10:35,880
xem hai bước kiểm tra đầu tiên này cho phép chúng ta làm gì khi bạn xem xét chúng cùng nhau.

162
00:10:35,880 --> 00:10:40,240
Giả sử bạn phát hiện lỗi giữa các cột lẻ và giữa nửa bên phải.

163
00:10:40,240 --> 00:10:43,940
Nó nhất thiết có nghĩa là lỗi ở đâu đó trong cột cuối cùng.

164
00:10:43,940 --> 00:10:48,280
Nếu không có lỗi ở cột lẻ nhưng có một lỗi ở nửa bên phải, điều

165
00:10:48,280 --> 00:10:50,520
đó cho bạn biết lỗi đó nằm ở cột thứ hai đến cột cuối cùng.

166
00:10:50,520 --> 00:10:54,640
Tương tự như vậy, nếu có lỗi ở cột lẻ nhưng không ở

167
00:10:54,640 --> 00:10:56,560
nửa bên phải, bạn biết lỗi đó nằm ở cột thứ hai.

168
00:10:56,560 --> 00:11:00,560
Và nếu cả hai lần kiểm tra chẵn lẻ đó đều không phát hiện ra điều gì, điều đó

169
00:11:00,560 --> 00:11:03,760
có nghĩa là nơi duy nhất có thể xảy ra lỗi là ở cột ngoài cùng bên trái.

170
00:11:03,760 --> 00:11:06,480
Nhưng nó cũng có thể đơn giản có nghĩa là không có lỗi nào cả.

171
00:11:06,480 --> 00:11:10,800
Đó hoàn toàn là một cách khá phức tạp để nói rằng hai

172
00:11:10,800 --> 00:11:11,800
lần kiểm tra tính chẵn lẻ cho phép chúng ta xác định cột.

173
00:11:11,800 --> 00:11:14,000
Từ đây có lẽ bạn có thể đoán được điều gì sẽ xảy ra tiếp theo.

174
00:11:14,000 --> 00:11:16,240
Về cơ bản chúng tôi làm điều tương tự nhưng đối với các hàng.

175
00:11:16,240 --> 00:11:21,040
Sẽ có kiểm tra tính chẵn lẻ trên các hàng lẻ, sử dụng vị trí 4 làm bit chẵn lẻ.

176
00:11:21,040 --> 00:11:25,480
Vì vậy, trong ví dụ này, nhóm đó đã có tính chẵn

177
00:11:25,480 --> 00:11:26,480
lẻ chẵn, vì vậy bit 4 sẽ được đặt thành 0.

178
00:11:26,480 --> 00:11:31,280
Và cuối cùng là kiểm tra tính chẵn lẻ ở hai hàng

179
00:11:31,280 --> 00:11:32,280
dưới cùng, sử dụng vị trí 8 làm bit chẵn lẻ.

180
00:11:32,280 --> 00:11:35,840
Trong trường hợp này, có vẻ như người gửi cần bật

181
00:11:35,840 --> 00:11:37,840
bit 8 đó để mang lại cho nhóm sự chẵn lẻ.

182
00:11:37,840 --> 00:11:41,360
Giống như hai bước kiểm tra đầu tiên cho phép chúng ta ghim

183
00:11:41,360 --> 00:11:43,000
cột, hai bước kiểm tra tiếp theo cho phép bạn ghim hàng.

184
00:11:43,000 --> 00:11:48,400
Ví dụ, hãy tưởng tượng rằng trong quá trình truyền có một lỗi ở vị trí 3.

185
00:11:48,400 --> 00:11:52,620
Chà, điều này ảnh hưởng đến nhóm chẵn lẻ đầu tiên và nó cũng ảnh hưởng đến nhóm chẵn

186
00:11:52,620 --> 00:11:56,340
lẻ thứ hai, vì vậy người nhận biết rằng có lỗi ở đâu đó trong cột bên phải đó.

187
00:11:56,340 --> 00:12:01,380
Nhưng nó không ảnh hưởng đến nhóm thứ ba, và nó không ảnh hưởng đến nhóm thứ tư.

188
00:12:01,380 --> 00:12:05,460
Và điều đó cho phép người nhận xác định chính xác lỗi cho đến hàng

189
00:12:05,460 --> 00:12:08,660
đầu tiên, nghĩa là vị trí thứ 3, để họ có thể sửa lỗi.

190
00:12:08,660 --> 00:12:12,640
Bạn có thể thích dành chút thời gian để thuyết phục bản thân rằng câu trả lời cho bốn câu hỏi

191
00:12:12,680 --> 00:12:17,320
này thực sự sẽ luôn giúp bạn xác định được một địa điểm cụ thể, bất kể chúng ở đâu.

192
00:12:17,320 --> 00:12:22,640
Trên thực tế, những người tinh ý trong số các bạn thậm chí có thể

193
00:12:22,640 --> 00:12:23,640
nhận thấy mối liên hệ giữa những câu hỏi này và việc đếm nhị phân.

194
00:12:23,640 --> 00:12:27,840
Và nếu bạn làm vậy, một lần nữa hãy để tôi nhấn mạnh, tạm dừng,

195
00:12:27,840 --> 00:12:30,880
cố gắng tự mình rút ra mối liên hệ trước khi tôi làm hỏng nó.

196
00:12:30,880 --> 00:12:35,560
Nếu bạn đang thắc mắc điều gì sẽ xảy ra nếu bản

197
00:12:35,560 --> 00:12:36,560
thân bit chẵn lẻ bị ảnh hưởng, thì bạn có thể thử.

198
00:12:36,560 --> 00:12:40,720
Hãy dành một chút thời gian để suy nghĩ xem làm thế nào bất kỳ lỗi nào trong số bốn phần

199
00:12:40,720 --> 00:12:47,440
đặc biệt này sẽ được theo dõi giống như bất kỳ lỗi nào khác, với cùng một nhóm bốn câu hỏi.

200
00:12:47,440 --> 00:12:50,500
Điều đó thực sự không quan trọng, vì cuối cùng điều chúng ta muốn là

201
00:12:50,500 --> 00:12:53,640
bảo vệ các bit thông báo, các bit sửa lỗi vẫn tiếp tục hoạt động.

202
00:12:53,640 --> 00:12:57,120
Nhưng việc bảo vệ những bit đó cũng là điều đương

203
00:12:57,120 --> 00:12:59,260
nhiên nằm ngoài kế hoạch như một sản phẩm phụ.

204
00:12:59,260 --> 00:13:02,380
Bạn cũng có thể thích dự đoán quy mô này như thế nào.

205
00:13:02,380 --> 00:13:08,040
Ví dụ: nếu chúng tôi sử dụng một khối có kích thước 256 bit để xác định một vị trí, bạn chỉ cần

206
00:13:08,040 --> 00:13:15,680
tám câu hỏi có hoặc không để tìm kiếm nhị phân theo cách của bạn đến một vị trí cụ thể nào đó.

207
00:13:15,680 --> 00:13:19,680
Và hãy nhớ rằng, mỗi câu hỏi chỉ yêu cầu bỏ đi một

208
00:13:19,680 --> 00:13:23,340
bit duy nhất để đặt kiểm tra tính chẵn lẻ thích hợp.

209
00:13:23,340 --> 00:13:26,960
Một số bạn có thể đã nhìn thấy nó, nhưng sau này chúng ta sẽ nói về cách có

210
00:13:26,960 --> 00:13:29,960
hệ thống để tìm ra nội dung của những câu hỏi này chỉ trong một hoặc hai phút.

211
00:13:29,960 --> 00:13:33,440
Hy vọng bản phác thảo này đủ để đánh giá cao tính

212
00:13:33,440 --> 00:13:34,440
hiệu quả của những gì chúng tôi đang phát triển ở đây.

213
00:13:34,440 --> 00:13:38,440
Điều đầu tiên, ngoại trừ tám bit chẵn lẻ được đánh dấu đó, có thể là bất

214
00:13:38,440 --> 00:13:41,720
cứ thứ gì bạn muốn, mang bất kỳ thông điệp hoặc dữ liệu nào bạn muốn.

215
00:13:41,720 --> 00:13:45,480
8 bit dư thừa theo nghĩa là chúng hoàn toàn được xác định bởi phần còn lại của tin

216
00:13:45,480 --> 00:13:53,640
nhắn, nhưng đó là cách thông minh hơn nhiều so với việc chỉ sao chép toàn bộ tin nhắn.

217
00:13:53,640 --> 00:13:58,000
Tuy nhiên, với rất ít sự từ bỏ, bạn sẽ có

218
00:13:58,000 --> 00:13:59,000
thể xác định và sửa bất kỳ lỗi bit nào.

219
00:13:59,000 --> 00:14:00,400
Vâng, gần như vậy.

220
00:14:00,400 --> 00:14:05,920
Được rồi, vấn đề ở đây là nếu không có kiểm tra chẵn lẻ nào trong số bốn kiểm

221
00:14:05,920 --> 00:14:10,240
tra chẵn lẻ phát hiện ra lỗi, nghĩa là các tập hợp con 8 bit được chọn đặc

222
00:14:10,240 --> 00:14:15,520
biệt đều có các số chẵn lẻ, giống như dự định của người gửi, thì điều đó có

223
00:14:15,520 --> 00:14:17,760
nghĩa là không có lỗi nào cả , hoặc nó thu hẹp chúng ta xuống vị trí 0.

224
00:14:17,760 --> 00:14:23,040
Bạn thấy đấy, với bốn câu hỏi có hoặc không, chúng tôi có 16 kết quả có thể xảy ra cho

225
00:14:23,040 --> 00:14:28,000
việc kiểm tra tính chẵn lẻ của mình và lúc đầu, điều đó có vẻ hoàn hảo để xác định 1

226
00:14:28,000 --> 00:14:33,000
trong 16 vị trí trong khối, nhưng bạn cũng cần thông báo kết quả thứ 17, không có lỗi tình trạng.

227
00:14:33,000 --> 00:14:37,860
Giải pháp ở đây thực sự khá đơn giản, chỉ cần quên hoàn toàn bit 0 đó đi.

228
00:14:37,860 --> 00:14:41,920
Vì vậy, khi chúng tôi thực hiện bốn lần kiểm tra tính chẵn lẻ và thấy rằng

229
00:14:41,920 --> 00:14:44,320
tất cả chúng đều bằng nhau, điều đó rõ ràng có nghĩa là không có lỗi.

230
00:14:44,320 --> 00:14:49,240
Điều đó có nghĩa là thay vì làm việc với khối 16 bit, chúng tôi làm việc với khối 15

231
00:14:49,240 --> 00:14:54,040
bit, trong đó 11 bit được tự do mang tin nhắn và 4 trong số đó dành cho dự phòng.

232
00:14:54,080 --> 00:14:58,400
Và cùng với đó, giờ đây chúng ta có thứ

233
00:14:58,400 --> 00:14:59,400
mà mọi người trong ngành gọi là mã Hamming 15-11.

234
00:14:59,400 --> 00:15:03,920
Điều đó nói lên rằng, thật tuyệt khi có kích thước khối có lũy thừa sạch là 2 và có một cách thông minh là

235
00:15:03,920 --> 00:15:08,880
chúng ta có thể giữ bit thứ 0 đó xung quanh và khiến nó thực hiện thêm một chút công việc cho chúng ta.

236
00:15:08,880 --> 00:15:13,600
Nếu chúng tôi sử dụng nó như một bit chẵn lẻ trên toàn bộ khối, nó cho phép

237
00:15:13,600 --> 00:15:16,320
chúng tôi thực sự phát hiện các lỗi 2 bit, mặc dù chúng tôi không thể sửa.

238
00:15:16,320 --> 00:15:17,440
Đây là cách nó hoạt động.

239
00:15:17,440 --> 00:15:21,740
Sau khi thiết lập bốn bit sửa lỗi đặc biệt đó, chúng tôi đặt bit thứ 0 đó sao

240
00:15:21,740 --> 00:15:25,540
cho tính chẵn lẻ của toàn bộ khối là chẵn, giống như kiểm tra tính chẵn lẻ thông thường.

241
00:15:25,540 --> 00:15:29,780
Bây giờ, nếu có một lỗi bit nào đó thì tính chẵn lẻ của toàn bộ khối sẽ chuyển thành số

242
00:15:29,780 --> 00:15:33,940
lẻ, nhưng dù sao thì chúng ta cũng sẽ phát hiện được điều đó nhờ bốn bước kiểm tra sửa lỗi.

243
00:15:33,940 --> 00:15:38,100
Tuy nhiên, nếu có hai lỗi thì tổng số chẵn lẻ sẽ chuyển về trạng

244
00:15:38,100 --> 00:15:42,660
thái chẵn, nhưng người nhận vẫn thấy rằng đã có ít nhất một số lỗi

245
00:15:42,660 --> 00:15:45,820
do những gì đang xảy ra với bốn lần kiểm tra chẵn lẻ đó.

246
00:15:45,820 --> 00:15:49,780
Vì vậy, nếu họ nhận thấy có sự chẵn lẻ về tổng thể, nhưng có điều gì đó khác 0

247
00:15:49,820 --> 00:15:52,980
xảy ra với các lần kiểm tra khác, thì điều đó cho họ biết rằng có ít nhất hai lỗi.

248
00:15:52,980 --> 00:15:54,420
Không phải là thông minh sao?

249
00:15:54,420 --> 00:15:58,500
Mặc dù chúng tôi không thể sửa các lỗi 2 bit đó, nhưng chỉ cần đưa bit 0

250
00:15:58,500 --> 00:16:02,340
khó chịu đó hoạt động trở lại, nó sẽ cho phép chúng tôi phát hiện ra chúng.

251
00:16:02,340 --> 00:16:06,540
Đây là mã khá chuẩn, nó được gọi là mã Hamming mở rộng.

252
00:16:06,540 --> 00:16:10,860
Về mặt kỹ thuật, bây giờ bạn đã có mô tả đầy đủ về chức

253
00:16:10,860 --> 00:16:13,580
năng của mã Hamming, ít nhất là đối với ví dụ về khối 16 bit.

254
00:16:13,580 --> 00:16:17,300
Nhưng tôi nghĩ bạn sẽ thấy hài lòng hơn khi kiểm tra sự hiểu biết của mình và củng cố mọi

255
00:16:17,300 --> 00:16:21,980
thứ cho đến thời điểm này bằng cách tự mình làm một ví dụ đầy đủ từ đầu đến cuối.

256
00:16:21,980 --> 00:16:25,100
Tuy nhiên, tôi sẽ cùng bạn giải quyết vấn đề này để bạn có thể tự kiểm tra.

257
00:16:25,100 --> 00:16:29,180
Để thiết lập một tin nhắn, cho dù đó là tin nhắn theo nghĩa đen

258
00:16:29,180 --> 00:16:34,100
mà bạn đang dịch theo không gian hay một số dữ liệu bạn muốn lưu

259
00:16:34,100 --> 00:16:35,700
trữ theo thời gian, bước đầu tiên là chia nó thành các phần 11 bit.

260
00:16:35,700 --> 00:16:40,340
Mỗi đoạn sẽ được đóng gói thành một khối 16 bit chống lỗi.

261
00:16:40,340 --> 00:16:43,740
Vì vậy, hãy lấy ví dụ này làm ví dụ và thực sự giải quyết nó.

262
00:16:43,740 --> 00:16:45,340
Hãy tiếp tục, thực sự làm điều đó!

263
00:16:45,380 --> 00:16:47,380
Hãy tạm dừng và thử ghép khối này lại với nhau.

264
00:16:52,980 --> 00:16:53,980
Được rồi, bạn sẵn sàng chưa?

265
00:16:53,980 --> 00:16:58,500
Hãy nhớ rằng, vị trí 0 cùng với các lũy thừa khác của 2 được dành cho nhiệm vụ sửa lỗi, vì

266
00:16:58,500 --> 00:17:05,700
vậy bạn bắt đầu bằng cách đặt các bit thông báo vào tất cả các vị trí còn lại theo thứ tự.

267
00:17:05,700 --> 00:17:09,700
Bạn cần nhóm này có tính chẵn lẻ, điều này đã có sẵn, vì

268
00:17:09,700 --> 00:17:13,140
vậy bạn nên đặt bit chẵn lẻ đó ở vị trí 1 là 0.

269
00:17:13,140 --> 00:17:17,700
Nhóm tiếp theo bắt đầu với số chẵn lẻ lẻ, vì

270
00:17:17,700 --> 00:17:19,260
vậy bạn nên đặt bit chẵn lẻ của nó là 1.

271
00:17:19,260 --> 00:17:23,740
Nhóm sau đó bắt đầu với số chẵn lẻ lẻ, vì vậy một

272
00:17:23,740 --> 00:17:24,740
lần nữa bạn phải đặt bit chẵn lẻ của nó thành 1.

273
00:17:24,740 --> 00:17:29,500
Và nhóm cuối cùng cũng có tính chẵn lẻ lẻ, nghĩa là

274
00:17:29,500 --> 00:17:31,500
chúng ta đặt bit đó ở vị trí 8 là 1.

275
00:17:31,500 --> 00:17:36,460
Và ở bước cuối cùng, toàn bộ khối bây giờ có tính chẵn lẻ chẵn, nghĩa là

276
00:17:36,460 --> 00:17:41,500
bạn có thể đặt số bit đó là 0, bit chẵn lẻ tổng thể, là 0.

277
00:17:41,500 --> 00:17:45,660
Vì vậy, khi khối này được gửi đi, tính chẵn lẻ của bốn tập hợp

278
00:17:45,660 --> 00:17:48,980
con đặc biệt và toàn bộ khối sẽ là số chẵn hoặc bằng 0.

279
00:17:48,980 --> 00:17:53,620
Trong phần thứ hai của bài tập, bạn hãy đóng vai người nhận.

280
00:17:53,620 --> 00:17:57,580
Tất nhiên, điều đó có nghĩa là bạn chưa biết thông điệp này là gì, có

281
00:17:57,580 --> 00:18:00,180
thể một số bạn đã ghi nhớ nó, nhưng hãy giả sử rằng bạn chưa biết.

282
00:18:00,180 --> 00:18:05,820
Những gì tôi sắp làm là thay đổi 0, 1 hoặc 2 bit trong khối

283
00:18:05,820 --> 00:18:08,340
đó và sau đó yêu cầu bạn tìm hiểu xem tôi đã làm gì.

284
00:18:08,340 --> 00:18:13,460
Vì vậy, một lần nữa, hãy tạm dừng và thử giải quyết nó.

285
00:18:13,460 --> 00:18:23,960
Được rồi, bây giờ bạn với tư cách là người nhận hãy kiểm tra nhóm chẵn lẻ đầu tiên và bạn có

286
00:18:23,960 --> 00:18:29,820
thể thấy rằng đó là số chẵn, vì vậy bất kỳ lỗi nào tồn tại sẽ phải nằm trong một cột chẵn.

287
00:18:29,820 --> 00:18:34,620
Kiểm tra tiếp theo cung cấp cho chúng tôi một số lẻ, cho chúng tôi biết

288
00:18:34,620 --> 00:18:38,760
rằng có ít nhất một lỗi và thu hẹp chúng tôi vào cột cụ thể này.

289
00:18:38,760 --> 00:18:42,900
Lần kiểm tra thứ ba là chẵn, cắt giảm các khả năng hơn nữa.

290
00:18:42,900 --> 00:18:46,780
Và lần kiểm tra chẵn lẻ cuối cùng rất kỳ quặc, cho chúng ta biết có lỗi ở đâu đó

291
00:18:46,780 --> 00:18:51,700
ở phía dưới, mà đến bây giờ chúng ta có thể thấy lỗi này phải ở vị trí số 10.

292
00:18:51,700 --> 00:18:56,140
Hơn nữa, tính chẵn lẻ của toàn bộ khối là số lẻ, khiến chúng

293
00:18:56,140 --> 00:18:58,220
tôi tin tưởng rằng chỉ có một lần lật chứ không phải hai.

294
00:18:58,220 --> 00:19:01,600
Nếu là ba hoặc nhiều hơn, tất cả cược sẽ bị hủy.

295
00:19:01,600 --> 00:19:06,520
Sau khi sửa bit số 10 đó, việc rút ra 11 bit không được sử dụng để sửa

296
00:19:06,520 --> 00:19:11,620
sẽ cho chúng ta phân đoạn có liên quan của thông báo gốc, nếu bạn tua lại và

297
00:19:11,620 --> 00:19:16,160
so sánh thì thực sự chính xác là những gì chúng ta đã bắt đầu ví dụ.

298
00:19:16,160 --> 00:19:19,260
Và bây giờ bạn đã biết cách thực hiện tất cả những điều này bằng tay, tôi muốn chỉ cho

299
00:19:19,260 --> 00:19:23,940
bạn cách bạn có thể thực hiện phần cốt lõi của tất cả logic này bằng một dòng mã Python.

300
00:19:23,940 --> 00:19:28,400
Bạn thấy đấy, điều tôi chưa nói với bạn là thuật toán này thực sự tinh tế đến mức

301
00:19:28,400 --> 00:19:32,380
nào, thật đơn giản để khiến một chiếc máy chỉ ra vị trí của một lỗi, cách chia tỷ

302
00:19:32,380 --> 00:19:37,680
lệ nó một cách có hệ thống và cách chúng ta có thể đóng khung tất cả các lỗi

303
00:19:37,680 --> 00:19:39,580
đó. đây là một thao tác đơn lẻ thay vì nhiều lần kiểm tra tính chẵn lẻ riêng biệt.

304
00:19:39,580 --> 00:19:41,680
Để hiểu ý tôi, hãy cùng tôi tham gia phần 2 nhé.

