[
 {
  "input": "I'm assuming that everybody here is coming from part 1.",
  "translatedText": "ここにいる皆さんはパート1から来ていると思います。",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 0.0,
  "end": 2.56
 },
 {
  "input": "We were talking about Hamming codes, a way to create a block of data where most of the bits carry a meaningful message, while a few others act as a kind of redundancy, in such a way that if any bit gets flipped, either a message bit or a redundancy bit, anything in this block, a receiver is going to be able to identify that there was an error, and how to fix it.",
  "translatedText": "私たちはハミング コードについて話していました。 これは、ほとんどのビットが意味のあ るメッセージを運ぶデータ ブロックを作成する方法であり、他のいくつかのビットは一種 の冗長性として機能し、ビットが反転した場合、メッセージが送信されるか、メッセージが 送信されるかが決まります。 ビットや冗長ビットなど、このブロック内のあらゆるものによ って、受信機はエラーがあったことと、それを修正する方法を識別できるようになります。",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 3.06,
  "end": 21.24
 },
 {
  "input": "The basic idea presented there was how to use multiple parity checks to binary search your way down to the error.",
  "translatedText": "そこで提示された基本的なアイデアは、複数のパリティ チェッ クを使用してエラーに至るまでバイナリ検索を行う方法でした。",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 21.88,
  "end": 27.16
 },
 {
  "input": "In that video the goal was to make Hamming codes feel as hands-on and rediscoverable as possible.",
  "translatedText": "このビデオの目標は、ハミング コードをできる限り実 際に操作でき、再発見できるようにすることでした。",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 28.98,
  "end": 34.6
 },
 {
  "input": "But as you start to think about actually implementing this, either in software or hardware, that framing may actually undersell how elegant these codes really are.",
  "translatedText": "しかし、これをソフトウェアまたはハードウェアで実際に実装することを考え始めると、その枠組みに よって、これらのコードが実際にどれほどエレガントであるかが実際に理解できないかもしれません。",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 35.18,
  "end": 43.46
 },
 {
  "input": "You might think that you need to write an algorithm that keeps track of all the possible error locations and cuts that group in half with each check, but it's actually way, way simpler than that.",
  "translatedText": "考えられるすべてのエラー位置を追跡し、各チェックでそのグル ープを半分に分割するアルゴリズムを作成する必要があると思 うかもしれませんが、実際にはそれよりもはるかに簡単です。",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 43.92,
  "end": 53.48
 },
 {
  "input": "If you read out the answers to the four parity checks we did in the last video, all as 1s and 0s instead of yeses and nos, it literally spells out the position of the error in binary.",
  "translatedText": "前回のビデオで行った 4 つのパリティ チェックの答えを、すべて「はい」と「いいえ」では なく「1」と「0」として読み上げると、文字通りエラーの位置が 2 進数で表示されます。",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 53.94,
  "end": 64.08
 },
 {
  "input": "For example, the number 7 in binary looks like 0111, essentially saying that it's 4 plus 2 plus 1.",
  "translatedText": "たとえば、2 進数の 7 は 0111 のように見え、本質的 には 4 プラス 2 プラス 1 であることを示しています。",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 64.78,
  "end": 71.26
 },
 {
  "input": "And notice where the position 7 sits, it does affect the first of our parity groups, and the second, and the third, but not the last.",
  "translatedText": "位置 7 がどこに位置するかに注目してください。 パリティ グループ の最初、2 番目、3 番目には影響しますが、最後には影響しません。",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 72.54,
  "end": 81.74
 },
 {
  "input": "So reading the results of those four checks from bottom to top indeed does spell out the position of the error.",
  "translatedText": "したがって、これら 4 つのチェックの結果を下か ら上に読むと、エラーの位置が明らかになります。",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 82.22,
  "end": 87.54
 },
 {
  "input": "There's nothing special about the example 7, this works in general, and this makes the logic for implementing the whole scheme in hardware shockingly simple.",
  "translatedText": "例 7 には特別なことは何もありません。 これは一般的に機能し、ハードウ ェアでスキーム全体を実装するためのロジックが驚くほど単純になります。",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 88.32,
  "end": 95.82
 },
 {
  "input": "Now if you want to see why this magic happens, take these 16 index labels for our positions, but instead of writing them in base 10, let's write them all in binary, running from 0000 up to 1111.",
  "translatedText": "この魔法がなぜ起こるのかを知りたい場合は、これらの 16 個のインデック ス ラベルを位置に取ってください。 ただし、それらを 10 進数で書く代わ りに、0000 から 1111 までのバイナリですべて書いてみましょう。",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 97.24,
  "end": 109.88
 },
 {
  "input": "As we put these binary labels back into their boxes, let me emphasize that they are distinct from the data that's actually being sent.",
  "translatedText": "これらのバイナリ ラベルを箱に戻すときに、実際に送信 されるデータとは区別されることを強調しておきます。",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 110.56,
  "end": 117.8
 },
 {
  "input": "They're nothing more than a conceptual label to help you and me understand where the four parity groups came from.",
  "translatedText": "これらは、4 つのパリティ グループがどこから来たの かを理解するのに役立つ概念的なラベルにすぎません。",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 118.32,
  "end": 123.5
 },
 {
  "input": "The elegance of having everything we're looking at be described in binary is maybe undercut by the confusion of having everything we're looking at being described in binary.",
  "translatedText": "私たちが見ているものすべてがバイナリで記述されることの優雅さは、おそらく、私たち が見ているものすべてがバイナリで記述されることの混乱によって損なわれるでしょう。",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 124.14,
  "end": 132.36
 },
 {
  "input": "It's worth it, though.",
  "translatedText": "ただし、それだけの価値はあります。",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 133.02,
  "end": 134.12
 },
 {
  "input": "Focus your attention just on that last bit of all of these labels, and then highlight the positions where that final bit is a 1.",
  "translatedText": "これらすべてのラベルの最後のビットに注目し、その 最後のビットが 1 である位置を強調表示します。",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 134.8,
  "end": 143.22
 },
 {
  "input": "What we get is the first of our four parity groups, which means you can interpret that first check as asking, hey, if there's an error, is the final bit in the position of that error a 1?",
  "translatedText": "得られるのは 4 つのパリティ グループの最初のグループです。 つ まり、最初のチェックは、エラーがある場合、そのエラーの位置にある 最後のビットは 1 ですか? という質問であると解釈できます。",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 144.24,
  "end": 155.74
 },
 {
  "input": "Similarly, if you focus on the second to last bit, and highlight all the positions where that's a 1, you get the second parity group from our scheme.",
  "translatedText": "同様に、最後から 2 番目のビットに注目し、それが 1 であるすべての位置 を強調表示すると、スキームから 2 番目のパリティ グループが得られます。",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 158.2,
  "end": 166.16
 },
 {
  "input": "In other words, that second check is asking, hey, me again, if there's an error, is the second to last bit of that position a 1?",
  "translatedText": "言い換えれば、その 2 番目のチェックでは、エラーがある場合、その 位置の最後から 2 番目のビットは 1 ですか? と尋ねています。",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 166.74,
  "end": 174.5
 },
 {
  "input": "And so on.",
  "translatedText": "等々。",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 175.76,
  "end": 176.9
 },
 {
  "input": "The third parity check covers every position whose third to last bit is turned on, and the last one covers the last eight positions, those ones whose highest order bit is a 1.",
  "translatedText": "3 番目のパリティ チェックは、最後から 3 番目のビットがオンになっているすべての位置をカバー し、最後のパリティ チェックは、最上位ビットが 1 である最後の 8 つの位置をカバーします。",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 177.22,
  "end": 188.74
 },
 {
  "input": "Everything we did earlier is the same as answering these four questions, which in turn is the same as spelling out a position in binary.",
  "translatedText": "これまでに行ったことはすべて、これら 4 つの質問に答えることと同じ であり、これはバイナリでポジションを詳しく説明することと同じです。",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 189.74,
  "end": 197.74
 },
 {
  "input": "I hope this makes two things clearer.",
  "translatedText": "これにより 2 つのことが明確になると思います。",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 199.62,
  "end": 201.48
 },
 {
  "input": "The first is how to systematically generalize to block sizes that are bigger powers of two.",
  "translatedText": "1 つ目は、2 の累乗より大きいブロック サイズに体系的に一般化する方法です。",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 202.04,
  "end": 206.46
 },
 {
  "input": "If it takes more bits to describe each position, like six bits to describe 64 spots, then each of those bits gives you one of the parity groups that we need to check.",
  "translatedText": "64 個のスポットを表すのに 6 ビットなど、各位置を表すのにさらに多くのビットが必要な場合 、それらの各ビットによって、チェックする必要があるパリティ グループの 1 つが得られます。",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 206.96,
  "end": 216.68
 },
 {
  "input": "Those of you who watched the chessboard puzzle I did with Matt Parker might find all this exceedingly familiar.",
  "translatedText": "私がマット・パーカーと一緒にやったチェス盤のパズルを見たことがある人 なら、これらすべてに非常に馴染みのあるものに気づくかもしれません。",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 218.4,
  "end": 223.18
 },
 {
  "input": "It's the same core logic, but solving a different problem, and applied to a 64-squared chessboard.",
  "translatedText": "これは同じコア ロジックですが、別の問題を解 決し、64 マスのチェス盤に適用されます。",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 223.66,
  "end": 228.78
 },
 {
  "input": "The second thing I hope this makes clear is why our parity bits are sitting in the positions that are powers of two, for example 1, 2, 4, and 8.",
  "translatedText": "これで明らかになることを望みます 2 つ目は、パリティ ビットが 2 の累乗の位置 (たとえば 1、2、4、8) にある理由です。",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 229.88,
  "end": 237.32
 },
 {
  "input": "These are the positions whose binary representation has just a single bit turned on.",
  "translatedText": "これらは、バイナリ表現で 1 つのビットだけがオンになっている位置です。",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 238.0,
  "end": 243.0
 },
 {
  "input": "What that means is each of those parity bits sits inside one and only one of the four parity groups.",
  "translatedText": "これが意味するのは、これらのパリティ ビットはそれぞれ、4 つのパ リティ グループのうちの 1 つのみの中に存在するということです。",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 243.6,
  "end": 249.46
 },
 {
  "input": "You can also see this in larger examples, where no matter how big you get, each parity bit conveniently touches only one of the groups.",
  "translatedText": "これは、より大きな例でも見ることができます。 この例では、どれだけ大きくな っても、各パリティ ビットは都合よくグループの 1 つだけに影響します。",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 252.04,
  "end": 259.34
 },
 {
  "input": "Once you understand that these parity checks that we've focused so much of our time on are nothing more than a clever way to spell out the position of an error in binary, then we can draw a connection with a different way to think about hamming codes, one that is arguably a lot simpler and more elegant, and which can basically be written down with a single line of code.",
  "translatedText": "私たちが多くの時間を費やしてきたパリティ チェックが、バイ ナリでエラーの位置を詳しく説明するための賢い方法にすぎない ことを理解すると、ハミングについての別の考え方との関連性を 引き出すことができます。 コードはおそらくはるかにシンプルで 洗練されており、基本的には 1 行のコードで記述できます。",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 265.6,
  "end": 283.24
 },
 {
  "input": "It's based on the XOR function.",
  "translatedText": "これは XOR 関数に基づいています。",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 283.66,
  "end": 285.5
 },
 {
  "input": "XOR, for those of you who don't know, stands for exclusive or.",
  "translatedText": "知らない人のために説明すると、XOR は排他的論理和の略です。",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 286.94,
  "end": 290.22
 },
 {
  "input": "When you take the XOR of two bits, it's going to return a 1 if either one of those bits is turned on, but not if both are turned on or off.",
  "translatedText": "2 つのビットの XOR を計算すると、それらのビットのいずれかがオンで あれば 1 が返されますが、両方がオンまたはオフの場合は返されません。",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 290.78,
  "end": 299.36
 },
 {
  "input": "Phrased differently, it's the parity of these two bits.",
  "translatedText": "別の言い方をすると、これはこれら 2 ビットのパリティです。",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 300.1,
  "end": 302.98
 },
 {
  "input": "As a math person, I prefer to think about it as addition mod 2.",
  "translatedText": "数学者として、私はこれを加算法 2 として考えることを好みます。",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 303.54,
  "end": 306.76
 },
 {
  "input": "We also commonly talk about the XOR of two different bit strings, which basically does this component by component.",
  "translatedText": "また、2 つの異なるビット文字列の XOR についてもよく話 しますが、これは基本的にコンポーネントごとに実行されます。",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 307.36,
  "end": 313.44
 },
 {
  "input": "It's like addition, but where you never carry.",
  "translatedText": "それは足し算のようなものですが、決して持ち歩かない場所です。",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 313.68,
  "end": 315.72
 },
 {
  "input": "Again, the more mathematically inclined might prefer to think of this as adding two vectors and reducing mod 2.",
  "translatedText": "繰り返しますが、より数学的な傾向がある人は、これを 2 つのベクトル を加算し、mod 2 を減らすものと考えることを好むかもしれません。",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 316.5,
  "end": 322.48
 },
 {
  "input": "If you open up some Python right now and apply the caret operation between two integers, this is what it's doing but to the bit representations of those numbers under the hood.",
  "translatedText": "今すぐ Python を開いて 2 つの整数間にキャレット操作を適 用すると、内部でこれらの数値のビット表現が行われることになります。",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 323.5,
  "end": 332.94
 },
 {
  "input": "The key point for you and me is that taking the XOR of many different bit strings is effectively a way to compute the parodies of a bunch of separate groups, like so with the columns, all in one fell swoop.",
  "translatedText": "あなたと私にとって重要な点は、多くの異なるビット文字列の X OR をとることは、列の場合と同様に、多数の別々のグループの パロディを一度に計算する効果的な方法であるということです。",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 334.96,
  "end": 347.14
 },
 {
  "input": "This gives us a rather snazzy way to think about the multiple parity checks from our Hamming code algorithm as all being packaged together into one single operation.",
  "translatedText": "これにより、ハミング コード アルゴリズムからの複数のパリティ チェックがすべて 1 つの操作にパッケージ化されていると考える、かなり気の利いた方法が得られます。",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 351.26,
  "end": 358.78
 },
 {
  "input": "Though at first glance it does look very different.",
  "translatedText": "一見するとかなり違うように見えますが。",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 359.48,
  "end": 362.18
 },
 {
  "input": "Specifically write down the 16 positions in binary, like we had before, and now highlight the positions where the message bit is turned on to a 1, and then collect these positions into one big column and take the XOR.",
  "translatedText": "具体的には、以前と同様に 16 個の位置をバイナリで書き留め 、メッセージ ビットが 1 に変わる位置を強調表示し、これ らの位置を 1 つの大きな列に集めて XOR をとります。",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 362.82,
  "end": 377.1
 },
 {
  "input": "You can probably guess that the 4 bits sitting at the bottom as a result are the same as the 4 parity checks we've come to know and love, but take a moment to actually think about why exactly.",
  "translatedText": "おそらく、結果として最下位にある 4 ビットが、私たちがよく知っていて 愛用している 4 つのパリティ チェックと同じであると推測できるでしょ う。 しかし、実際になぜなのかを少し時間を取って実際に考えてください。",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 379.26,
  "end": 389.2
 },
 {
  "input": "This last column, for example, is counting all of the positions whose last bit is a 1, but we're already limited only to the highlighted positions, so it's effectively counting how many highlighted positions came from the first parity group.",
  "translatedText": "たとえば、この最後の列は、最後のビットが 1 であるすべての位置をカウント していますが、すでに強調表示された位置のみに制限されているため、事実上、最 初のパリティ グループからの強調表示された位置の数がカウントされています。",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 392.22,
  "end": 405.76
 },
 {
  "input": "Does that make sense?",
  "translatedText": "それは理にかなっていますか？",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 406.24,
  "end": 406.8
 },
 {
  "input": "Likewise, the next column counts how many positions are in the second parity group, the positions whose second to last bit is a 1, and which are also highlighted, and so on.",
  "translatedText": "同様に、次の列では、2 番目のパリティ グループに位 置がいくつあるか、最後から 2 番目のビットが 1 で、強調表示されている位置などがカウントされます。",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 409.08,
  "end": 420.0
 },
 {
  "input": "It's really just a small shift in perspective on the same thing we've been doing.",
  "translatedText": "それは、私たちがこれまでやってきたことと同じことについて、視点を少し変えただけです。",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 420.26,
  "end": 423.96
 },
 {
  "input": "And so you know where it goes from here.",
  "translatedText": "ここから先はわかります。",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 427.76,
  "end": 429.6
 },
 {
  "input": "The sender is responsible for toggling some of the special parity bits to make sure the sum works out to be 0000.",
  "translatedText": "送信者は、合計が 0000 になるように特別なパ リティ ビットの一部を切り替える責任があります。",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 430.0,
  "end": 436.56
 },
 {
  "input": "Now once we have it like this, this gives us a really nice way to think about why these four resulting bits at the bottom directly spell out the position of an error.",
  "translatedText": "このようにすると、結果として得られる下部の 4 つのビットが エラーの位置を直接表す理由を考える非常に良い方法になります。",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 439.04,
  "end": 447.58
 },
 {
  "input": "Let's say some bit in this block gets toggled from a 0 to a 1.",
  "translatedText": "このブロック内の一部のビットが 0 から 1 に切り替わるとします。",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 448.46,
  "end": 451.86
 },
 {
  "input": "What that means is that the position of that bit is now going to be included in the total XOR, which changes the sum from being 0 to instead being this newly included value, the position of the error.",
  "translatedText": "これが意味するのは、そのビットの位置が合計 XOR に含 まれることになり、合計が 0 から、代わりにこの新しく含 まれた値、つまりエラーの位置に変更されるということです。",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 452.6,
  "end": 463.82
 },
 {
  "input": "Slightly less obviously, the same is true if there's an error that changes a 1 to a 0.",
  "translatedText": "少しわかりにくいですが、1 を 0 に変更するエ ラーが発生した場合も同じことが当てはまります。",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 464.46,
  "end": 469.36
 },
 {
  "input": "You see, if you add a bit string together twice, it's the same as not having it there at all, basically because in this world 1 plus 1 equals 0.",
  "translatedText": "ご存知のとおり、ビット列を 2 回追加すると、ビット列がまったく存在しないのと同 じになります。 基本的に、この世界では 1 プラス 1 は 0 に等しいためです。",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 470.18,
  "end": 477.94
 },
 {
  "input": "So adding a copy of this position to the total sum has the same effect as we're moving it.",
  "translatedText": "したがって、この位置のコピーを合計に追加す ると、移動するのと同じ効果が得られます。",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 478.92,
  "end": 484.3
 },
 {
  "input": "And that effect, again, is that the total result at the bottom here spells out the position of the error.",
  "translatedText": "そして、その効果は、やはり、ここの一番下にある合計結 果がエラーの位置を詳しく示しているということです。",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 485.16,
  "end": 490.7
 },
 {
  "input": "To illustrate how elegant this is, let me show that one line of Python code I referenced before, which will capture almost all of the logic on the receiver's end.",
  "translatedText": "これがいかに洗練されているかを説明するために、前に参照した Python コードの 1 行を示します。 これにより、受信側のロジックのほぼすべてがキャプチャされます。",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 493.04,
  "end": 501.44
 },
 {
  "input": "We'll start by creating a random array of 16 1s and 0s to simulate the data block, and I'll give it the name bits, but of course in practice this would be something we're receiving from a sender, and instead of being random it would be carrying 11 data bits together with 5 parity bits.",
  "translatedText": "まず、データ ブロックをシミュレートするために 16 個の 1 と 0 の ランダムな配列を作成し、それに bits という名前を付けますが、もちろ ん実際には、これは送信者から受信するものになります。 ランダムであるため、1 1 個のデータ ビットと 5 個のパリティ ビットを運ぶことになります。",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 502.08,
  "end": 517.4
 },
 {
  "input": "If I call the function enumerateBits, what it does is pair together each of those bits with a corresponding index, in this case running from 0 up to 15.",
  "translatedText": "enumerateBits 関数を呼び出すと、これらの各ビットが対応する インデックス (この場合は 0 から 15 まで) とペアになります。",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 518.12,
  "end": 527.0
 },
 {
  "input": "So if we then create a list that loops over all of these pairs, pairs that look like i, and then we pull out just the i value, just the index, well it's not that exciting, we just get back those indices 0 through 15.",
  "translatedText": "したがって、これらすべてのペア (i に似たペア) をループするリストを作 成し、i の値だけ、インデックスだけを取り出すとします。 それほど面白いこ とではありません。 インデックス 0 から 15 が返されるだけです。",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 528.18,
  "end": 541.34
 },
 {
  "input": "But if we add on the condition to only do this if bit, meaning if that bit is a 1 and not a 0, well then it pulls out only the positions where the corresponding bit is turned on.",
  "translatedText": "しかし、ビットの場合のみ、つまりそのビットが 0 ではなく 1 である場合にのみこれを実 行するという条件を追加すると、対応するビットがオンになっている位置のみが抽出されます。",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 541.68,
  "end": 552.66
 },
 {
  "input": "In this case it looks like those positions are 0, 4, 6, 9, etc.",
  "translatedText": "この場合、それらの位置は 0、4、6、9 などのように見えます。",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 553.38,
  "end": 557.96
 },
 {
  "input": "What we want is to collect together all of those positions, the positions of the bits that are turned on, and then XOR them together.",
  "translatedText": "私たちが望んでいるのは、これらの位置、つまりオンになっているビ ットの位置をすべて収集し、それらを XOR 演算することです。",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 559.98,
  "end": 567.24
 },
 {
  "input": "To do this in Python, let me first import a couple helpful functions.",
  "translatedText": "これを Python で行うには、まずいくつかの便利な関数をインポートします。",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 569.18,
  "end": 573.22
 },
 {
  "input": "That way we can call reduce() on this list, and use the XOR function to reduce it.",
  "translatedText": "そうすることで、このリストに対してreduce()を呼び出し、XOR関数を使用してリストを減らすことができます。",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 573.9,
  "end": 578.7
 },
 {
  "input": "This basically eats its way through the list, taking XORs along the way.",
  "translatedText": "これは基本的にリスト全体を処理し、途中で XOR を取得します。",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 579.1,
  "end": 582.68
 },
 {
  "input": "If you prefer, you can explicitly write out that XOR function without having to import it from anywhere.",
  "translatedText": "必要に応じて、XOR 関数をどこからもインポ ートせずに明示的に書き出すことができます。",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 584.8,
  "end": 589.44
 },
 {
  "input": "So at the moment it looks like if we do this on our random block of 16 bits, it returns 9, which has the binary representation 1001.",
  "translatedText": "したがって、現時点では、16 ビットのランダム ブロックでこれを実 行すると、バイナリ表現 1001 を持つ 9 が返されるようです。",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 591.94,
  "end": 601.28
 },
 {
  "input": "We won't do it here, but you could write a function where the sender uses that binary representation to set the four parity bits as needed, ultimately getting this block to a state where running this line of code on the full list of bits returns a 0.",
  "translatedText": "ここではそれを行いませんが、送信者がそのバイナリ表現を使用して必要に応じて 4 つのパリティ ビットを設定し、最終的にこのブロックをビットの完全なリストに対して このコード行を実行すると返される状態にする関数を作成することもできます。 0。",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 601.98,
  "end": 615.46
 },
 {
  "input": "This would be considered a well-prepared block.",
  "translatedText": "これは、十分に準備されたブロックであると考えられます。",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 616.08,
  "end": 618.2
 },
 {
  "input": "What's cool is that if we toggle any one of the bits in this list, simulating a random error from noise, then if you run this same line of code, it prints out that error.",
  "translatedText": "素晴らしいのは、このリストのビットのいずれかを切り替えて、ノイズによるランダムなエ ラーをシミュレートし、同じコード行を実行すると、そのエラーが出力されることです。",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 619.88,
  "end": 630.22
 },
 {
  "input": "Isn't that neat?",
  "translatedText": "素敵じゃないですか？",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 630.96,
  "end": 631.52
 },
 {
  "input": "You could get this block from out of the blue, run this single line on it, and it'll automatically spit out the position of an error, or a 0 if there wasn't any.",
  "translatedText": "このブロックを突然取得し、その上でこの 1 行を実行すると、エラーの位 置が自動的に出力され、エラーが存在しない場合は 0 が出力されます。",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 631.82,
  "end": 641.06
 },
 {
  "input": "And there's nothing special about the size 16 here.",
  "translatedText": "サイズ 16 については特別なことは何もありません。",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 642.5,
  "end": 645.2
 },
 {
  "input": "The same line of code would work if you had a list of, say, 256 bits.",
  "translatedText": "たとえば 256 ビットのリストがある場合、同じコード行が機能します。",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 645.4,
  "end": 649.86
 },
 {
  "input": "Needless to say, there is more code to write here, like doing the meta parity check to detect 2-bit errors, but the idea is that almost all of the core logic from our scheme comes down to a single XOR reduction.",
  "translatedText": "言うまでもなく、2 ビット エラーを検出するためのメタ パリティ チェックの実行 など、ここで記述するコードはさらにありますが、考え方としては、このスキームのコア ロジックのほぼすべてが単一の XOR リダクションに帰結するということです。",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 651.88,
  "end": 663.76
 },
 {
  "input": "Now, depending on your comfort with binary and XORs and software in general, you may either find this perspective a little bit confusing, or so much more elegant and simple that you're wondering why we didn't just start with it from the get-go.",
  "translatedText": "さて、バイナリ、XOR、およびソフトウェア全般に慣れているかどうかに応じて、こ の視点が少しわかりにくいと感じるか、またははるかにエレガントでシンプルなので、 なぜ最初からこの視点を始めなかったのかと不思議に思うかもしれません。 -行く。",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 666.12,
  "end": 678.42
 },
 {
  "input": "Loosely speaking, the multiple parity check perspective is easier to think about when implementing Hamming codes in hardware very directly, and the XOR perspective is easiest to think about when doing it in software, from kind of a higher level.",
  "translatedText": "大まかに言うと、複数のパリティ チェックの観点は、ハミング コードを ハードウェアで直接実装する場合に考えやすく、XOR の観点は、ソフト ウェアで実行する場合に、より高いレベルから考えるのが最も簡単です。",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 679.14,
  "end": 690.5
 },
 {
  "input": "The first one is easiest to actually do by hand, and I think it does a better job instilling the core intuition underlying all of this, which is that the information required to locate a single error is related to the log of the size of the block, or in other words, it grows one bit at a time as the block size doubles.",
  "translatedText": "最初の方法は実際に手作業で行うのが最も簡単で、これらすべての根底にある核となる 直感を植え付けるのに効果的だと思います。 つまり、単一のエラーを見つけるのに必 要な情報はブロックのサイズのログに関連しているということです。 、言い換えれば 、ブロック サイズが 2 倍になると、一度に 1 ビットずつ大きくなります。",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 691.36,
  "end": 710.0
 },
 {
  "input": "The relevant fact here is that that information directly corresponds to how much redundancy we need.",
  "translatedText": "ここで重要な事実は、その情報が必要な冗長 性の量に直接対応しているということです。",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 711.02,
  "end": 716.06
 },
 {
  "input": "That's really what runs against most people's knee-jerk reaction when they first think about making a message resilient to errors, where usually copying the whole message is the first instinct that comes to mind.",
  "translatedText": "これは、ほとんどの人が最初にメッセージをエラーに強いも のにしようと考えたとき、通常はメッセージ全体をコピーす ることが最初に頭に浮かぶ本能的な反応に反するものです。",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 716.66,
  "end": 726.54
 },
 {
  "input": "And then, by the way, there is this whole other way that you sometimes see Hamming codes presented, where you multiply the message by one big matrix.",
  "translatedText": "そして、ところで、時々ハミング コードが表示されるのを目にすることがあります が、これとはまったく別の方法で、メッセージに 1 つの大きな行列を掛けます。",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 727.5,
  "end": 734.0
 },
 {
  "input": "It's kind of nice because it relates it to the broader family of linear codes, but I think that gives almost no intuition for where it comes from or how it scales.",
  "translatedText": "これは、線形コードのより広範なファミリーに関連付けられているため、ある意味素晴らしいですが、そ れがどこから来たのか、どのようにスケールするのかについてはほとんど直観が得られないと思います。",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 734.67,
  "end": 743.06
 },
 {
  "input": "And speaking of scaling, you might notice that the efficiency of this scheme only gets better as we increase the block size.",
  "translatedText": "スケーリングについて言えば、ブロック サイズが増加するにつれ てこのスキームの効率が向上することに気づくかもしれません。",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 745.2,
  "end": 751.16
 },
 {
  "input": "For example, we saw that with 256 bits, you're using only 3% of that space for redundancy, and it just keeps getting better from there.",
  "translatedText": "たとえば、256 ビットでは、冗長性のためにそのスペースの 3% の みが使用されており、そこからさらに改善され続けることがわかりました。",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 755.0,
  "end": 762.66
 },
 {
  "input": "As the number of parity bits grows one by one, the block size keeps doubling.",
  "translatedText": "パリティ ビットの数が 1 つずつ増加すると、ブロック サイズは 2 倍になり続けます。",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 763.3,
  "end": 767.34
 },
 {
  "input": "And if you take that to an extreme, you could have a block with, say, a million bits, where you would quite literally be playing 20 questions with your parity checks, and it uses only 21 parity bits.",
  "translatedText": "これを極端に解釈すると、たとえば 100 万ビットのブロック があり、文字通り 20 問のパリティ チェックを行うことにな り、使用するパリティ ビットは 21 ビットだけになります。",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 769.0,
  "end": 780.02
 },
 {
  "input": "And if you step back to think about looking at a million bits and locating a single error, that genuinely feels crazy.",
  "translatedText": "そして、百万ビットを調べて単一のエラーを見つけることを一歩 下がって考えると、それは本当にクレイジーに感じられます。",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 780.74,
  "end": 787.06
 },
 {
  "input": "The problem, of course, is that with a larger block, the probability of seeing more than one or two bit errors goes up, and Hamming codes do not handle anything beyond that.",
  "translatedText": "もちろん、問題は、ブロックが大きくなると、1 つまたは 2 つ以上のビット エラーが 発生する確率が高くなり、ハミング コードがそれを超えるものを処理できないことです。",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 788.2,
  "end": 797.66
 },
 {
  "input": "So in practice, what you'd want is to find the right size so that the probability of too many bit flips isn't too high.",
  "translatedText": "したがって、実際には、ビット フリップが多すぎる可能性が 高すぎないように、適切なサイズを見つけることが必要です。",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 798.32,
  "end": 804.3
 },
 {
  "input": "Also, in practice, errors tend to come in little bursts, which would totally ruin a single block, so one common tactic to help spread out a burst of errors across many different blocks is to interlace those blocks, like this, before they're sent out or stored.",
  "translatedText": "また、実際には、エラーは小さなバーストで発生する傾向があり、単一のブロックを完全に破壊してしまうた め、エラーのバーストを多くの異なるブロックに分散させるための一般的な戦術の 1 つは、ブロックがブ ロックされる前に、このようにそれらのブロックをインターレースすることです。 発送または保管されます。",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 806.6,
  "end": 820.98
 },
 {
  "input": "Then again, a lot of this is rendered completely moot by more modern codes, like the much more commonly used Reed-Solomon algorithm, which handles burst errors particularly well, and it can be tuned to be resilient to a larger number of errors per block.",
  "translatedText": "しかし、繰り返しになりますが、この多くは、より一般的に使用されているリードソロモン ア ルゴリズムなど、バースト エラーを特にうまく処理し、ブロックあたりのより多くのエラー に耐性を持つように調整できる、より現代的なコードによって完全に無意味になります。",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 825.58,
  "end": 838.82
 },
 {
  "input": "But that's a topic for another time.",
  "translatedText": "しかし、それはまた別の機会にお話します。",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 839.36,
  "end": 841.34
 },
 {
  "input": "In his book The Art of Doing Science and Engineering, Hamming is wonderfully candid about just how meandering his discovery of this code was.",
  "translatedText": "ハミング氏は著書『The Art of Doing Science and Engineering』 の中で、このコードの発見がどれほど曲がりくねったものであったかについて、驚くほど率直に語っています。",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 842.5,
  "end": 849.94
 },
 {
  "input": "He first tried all sorts of different schemes involving organizing the bits into parts of a higher dimensional lattice and strange things like this.",
  "translatedText": "彼はまず、ビットを高次元の格子の一部に組織することや、このような 奇妙なことを含む、あらゆる種類のさまざまなスキームを試しました。",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 850.62,
  "end": 857.78
 },
 {
  "input": "The idea that it might be possible to get parity checks to conspire in a way that spells out the position of an error only came to Hamming when he stepped back after a bunch of other analysis and asked, okay, what is the most efficient I could conceivably be about this?",
  "translatedText": "エラーの位置を明らかにする方法でパリティ チェックを共謀させること ができるかもしれないという考えがハミングに思いついたのは、ハミング が他の一連の分析を終えて一歩下がって、「わかった、私にできる最も効 率的なものは何か」と尋ねたときでした。 おそらくこれについてですか？",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 858.3,
  "end": 871.52
 },
 {
  "input": "He was also candid about how important it was that parity checks were already on his mind, which would have been way less common back in the 1940s than it is today.",
  "translatedText": "彼はまた、パリティ チェックがすでに頭の中にあったことがいかに重要であるかについても率直に 語った。 1940 年代にはパリティ チェックは現在よりもはるかに一般的ではなかったはずだ。",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 872.62,
  "end": 881.22
 },
 {
  "input": "There are like half a dozen times throughout this book that he references the Louis Pasteur quote, luck favors a prepared mind.",
  "translatedText": "この本の中で、ルイ・パスツールの名言「幸運は準備ができ た心に味方する」という言葉が何度も引用されています。",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 881.92,
  "end": 888.22
 },
 {
  "input": "Clever ideas often look deceptively simple in hindsight, which makes them easy to underappreciate.",
  "translatedText": "賢いアイデアは、後から考えると一見シンプルに見えることが多く、過小評価されがちです。",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 889.32,
  "end": 894.3
 },
 {
  "input": "Right now my honest hope is that Hamming codes, or at least the possibility of such codes, feels almost obvious to you.",
  "translatedText": "今のところ私の正直な願いは、ハミング符号、あるいは少なくともそのよ うな符号の可能性が、皆さんにとってほぼ明白に感じられることです。",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 894.96,
  "end": 901.3
 },
 {
  "input": "But you shouldn't fool yourself into thinking that they actually are obvious, because they definitely aren't.",
  "translatedText": "しかし、それらは決して明らかではないので、それら が実際には明白であると思い込む必要はありません。",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 901.66,
  "end": 906.82
 },
 {
  "input": "Part of the reason that clever ideas look deceptively easy is that we only ever see the final result, cleaning up what was messy, never mentioning all of the wrong turns, underselling just how vast the space of explorable possibilities is at the start of a problem solving process, all of that.",
  "translatedText": "賢いアイデアが一見簡単そうに見える理由の 1 つは、私たちは最終的な 結果しか見ていないこと、散らかったものを片づけること、間違った方向へ の言及がまったくないこと、問題の開始時に探索可能な可能性の空間がいか に広大であるかを過小評価していることです。 解決プロセス、そのすべて。",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 907.88,
  "end": 922.86
 },
 {
  "input": "But this is true in general.",
  "translatedText": "しかし、これは一般的に真実です。",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 923.82,
  "end": 924.9
 },
 {
  "input": "I think for some special inventions, there's a second, deeper reason that we underappreciate them.",
  "translatedText": "一部の特別な発明については、私たちがそれらを過小評 価している第二の、より深い理由があると思います。",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 924.9,
  "end": 930.04
 },
 {
  "input": "Thinking of information in terms of bits had only really coalesced into a full theory by 1948, with Claude Shannon's seminal paper on information theory.",
  "translatedText": "情報をビットの観点から考えることは、1948 年までにクロード シャノンによ る情報理論に関する独創的な論文によってようやく完全な理論に統合されました。",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 930.84,
  "end": 938.64
 },
 {
  "input": "This was essentially concurrent with when Hamming developed his algorithm.",
  "translatedText": "これは基本的に、ハミングがアルゴリズムを開発したときと同時進行でした。",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 939.28,
  "end": 942.54
 },
 {
  "input": "This was the same foundational paper that showed, in a certain sense, that efficient error correction is always possible, no matter how high the probability of bit flips, at least in theory.",
  "translatedText": "これは、ビット反転の確率がどれほど高くても、少な くとも理論上は、ある意味、効率的なエラー訂正が 常に可能であることを示した同じ基礎論文でした。",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 943.3,
  "end": 952.9
 },
 {
  "input": "Shannon and Hamming, by the way, shared an office in Bell Labs, despite working on very different things, which hardly seems coincidental here.",
  "translatedText": "ちなみに、シャノンとハミングは、まったく異なることに取り組んでいたにもかかわ らず、ベル研究所でオフィスを共有していましたが、ここでは偶然とは思えません。",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 953.7,
  "end": 961.16
 },
 {
  "input": "Fast forward several decades, and these days, many of us are so immersed in thinking about bits and information that it's easy to overlook just how distinct this way of thinking was.",
  "translatedText": "数十年が経ち、最近では私たちの多くが断片や情報について考えることに没 頭しているため、この考え方がいかに独特であったかを見落としがちです。",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 962.38,
  "end": 972.34
 },
 {
  "input": "Ironically, the ideas that most profoundly shape the ways that a future generation thinks will end up looking to that future generation simpler than they really are.",
  "translatedText": "皮肉なことに、将来の世代の考え方を最も深く形作っているアイデアは、最 終的にはその将来の世代にとって実際よりも単純なものになるでしょう。",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 973.1,
  "end": 982.26
 }
]