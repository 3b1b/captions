1
00:00:00,000 --> 00:00:03,120
Saya berasumsi bahwa semua orang di sini berasal dari bagian 1.

2
00:00:03,120 --> 00:00:06,920
Kita berbicara tentang kode Hamming, suatu cara untuk membuat blok data yang

3
00:00:06,920 --> 00:00:11,640
sebagian besar bitnya membawa pesan yang bermakna, sementara beberapa bit lainnya bertindak

4
00:00:11,640 --> 00:00:15,800
sebagai semacam redundansi, sedemikian rupa sehingga jika ada bit yang dibalik,

5
00:00:15,800 --> 00:00:20,560
maka akan muncul pesan. bit atau bit redundansi, apa pun di blok

6
00:00:20,560 --> 00:00:21,920
ini, penerima akan dapat mengidentifikasi kesalahan yang terjadi, dan cara memperbaikinya.

7
00:00:21,920 --> 00:00:25,900
Ide dasar yang disajikan di sana adalah bagaimana menggunakan

8
00:00:25,900 --> 00:00:29,800
beberapa pemeriksaan paritas untuk mencari biner hingga menemukan kesalahan.

9
00:00:29,800 --> 00:00:33,920
Dalam video tersebut, tujuannya adalah untuk membuat kode

10
00:00:33,920 --> 00:00:35,420
Hamming terasa mudah dan mudah ditemukan kembali.

11
00:00:35,420 --> 00:00:40,040
Namun saat Anda mulai berpikir untuk mengimplementasikannya, baik dalam perangkat lunak

12
00:00:40,040 --> 00:00:44,120
maupun perangkat keras, pembingkaian tersebut mungkin meremehkan betapa elegannya kode-kode ini.

13
00:00:44,120 --> 00:00:47,620
Anda mungkin berpikir bahwa Anda perlu menulis algoritma yang melacak

14
00:00:47,620 --> 00:00:52,320
semua kemungkinan lokasi kesalahan dan memotong kelompok itu menjadi dua

15
00:00:52,320 --> 00:00:54,160
dengan setiap pemeriksaan, tetapi sebenarnya jauh lebih sederhana dari itu.

16
00:00:54,160 --> 00:00:58,720
Jika Anda membacakan jawaban atas empat pemeriksaan paritas yang kami lakukan di video terakhir, semuanya dalam angka

17
00:00:58,760 --> 00:01:04,800
1 dan 0, bukan ya dan tidak, maka secara harfiah posisi kesalahan akan dijabarkan dalam biner.

18
00:01:04,800 --> 00:01:10,160
Misalnya, angka 7 dalam biner terlihat seperti 0111, yang

19
00:01:10,160 --> 00:01:12,640
pada dasarnya berarti 4 ditambah 2 ditambah 1.

20
00:01:12,640 --> 00:01:17,960
Dan perhatikan di mana posisi 7 berada, itu memang mempengaruhi kelompok paritas

21
00:01:17,960 --> 00:01:22,280
pertama kita, dan kelompok paritas kedua, dan ketiga, tapi bukan yang terakhir.

22
00:01:22,280 --> 00:01:26,560
Jadi membaca hasil keempat pemeriksaan tersebut dari

23
00:01:26,560 --> 00:01:28,000
bawah ke atas memang menunjukkan posisi kesalahannya.

24
00:01:28,520 --> 00:01:32,240
Tidak ada yang istimewa dari contoh 7, ini berfungsi secara umum, dan ini

25
00:01:32,240 --> 00:01:37,440
membuat logika untuk mengimplementasikan keseluruhan skema pada perangkat keras menjadi sangat sederhana.

26
00:01:37,440 --> 00:01:43,380
Sekarang jika Anda ingin melihat mengapa keajaiban ini terjadi, ambil 16 label

27
00:01:43,380 --> 00:01:48,480
indeks ini untuk posisi kita, tapi daripada menuliskannya dalam basis 10,

28
00:01:48,480 --> 00:01:50,720
mari kita tulis semuanya dalam biner, mulai dari 0000 hingga 1111.

29
00:01:50,720 --> 00:01:55,880
Saat kita mengembalikan label biner ini ke dalam kotaknya, izinkan saya

30
00:01:56,080 --> 00:01:58,440
menekankan bahwa label tersebut berbeda dari data yang sebenarnya dikirim.

31
00:01:58,440 --> 00:02:02,200
Itu tidak lebih dari sebuah label konseptual untuk membantu Anda

32
00:02:02,200 --> 00:02:04,200
dan saya memahami dari mana empat kelompok paritas itu berasal.

33
00:02:04,200 --> 00:02:08,840
Keanggunan dalam mendeskripsikan segala sesuatu yang kita lihat dalam biner mungkin dilemahkan

34
00:02:08,840 --> 00:02:13,160
oleh kebingungan karena segala sesuatu yang kita lihat dijelaskan dalam biner.

35
00:02:13,160 --> 00:02:15,040
Tapi itu sepadan.

36
00:02:15,040 --> 00:02:20,740
Fokuskan perhatian Anda hanya pada bagian terakhir dari semua label ini,

37
00:02:20,740 --> 00:02:24,280
lalu sorot posisi di mana bagian terakhir tersebut adalah 1.

38
00:02:24,280 --> 00:02:28,800
Apa yang kita dapatkan adalah yang pertama dari empat kelompok paritas, yang

39
00:02:28,800 --> 00:02:34,480
berarti Anda dapat menafsirkan pemeriksaan pertama itu sebagai pertanyaan, hei, jika

40
00:02:34,480 --> 00:02:36,680
ada kesalahan, apakah bit terakhir pada posisi kesalahan itu adalah 1?

41
00:02:36,680 --> 00:02:42,600
Demikian pula, jika Anda fokus pada bit kedua hingga terakhir, dan menyorot semua

42
00:02:42,600 --> 00:02:47,040
posisi yang bernilai 1, Anda mendapatkan grup paritas kedua dari skema kami.

43
00:02:47,040 --> 00:02:51,960
Dengan kata lain, pengecekan kedua itu menanyakan, hai, sekali lagi, jika

44
00:02:51,960 --> 00:02:56,160
ada kesalahan, apakah bit kedua dari posisi terakhir itu adalah 1?

45
00:02:56,160 --> 00:02:57,160
Dan seterusnya.

46
00:02:57,160 --> 00:03:03,320
Pemeriksaan paritas ketiga mencakup setiap posisi yang bit ketiga hingga terakhirnya diaktifkan, dan yang

47
00:03:03,320 --> 00:03:10,120
terakhir mencakup delapan posisi terakhir, yaitu posisi yang bit urutan tertingginya adalah 1.

48
00:03:10,120 --> 00:03:15,680
Semua yang kita lakukan sebelumnya sama dengan menjawab keempat pertanyaan

49
00:03:15,680 --> 00:03:18,800
tersebut, yang pada gilirannya sama dengan mengeja posisi dalam biner.

50
00:03:19,800 --> 00:03:22,080
Saya harap ini membuat dua hal menjadi lebih jelas.

51
00:03:22,080 --> 00:03:27,140
Yang pertama adalah bagaimana menggeneralisasi secara sistematis ke ukuran blok yang merupakan pangkat dua yang lebih besar.

52
00:03:27,140 --> 00:03:33,180
Jika diperlukan lebih banyak bit untuk mendeskripsikan setiap posisi, seperti enam bit untuk mendeskripsikan 64

53
00:03:33,180 --> 00:03:38,640
titik, maka setiap bit tersebut memberi Anda salah satu grup paritas yang perlu kita periksa.

54
00:03:38,640 --> 00:03:42,060
Bagi Anda yang menonton teka-teki papan catur yang saya buat

55
00:03:42,060 --> 00:03:43,400
bersama Matt Parker mungkin menganggap semua ini sangat familiar.

56
00:03:43,400 --> 00:03:48,200
Logika intinya sama, tetapi memecahkan masalah yang berbeda,

57
00:03:48,200 --> 00:03:49,880
dan diterapkan pada papan catur berukuran 64 kotak.

58
00:03:49,880 --> 00:03:54,000
Hal kedua yang saya harap dapat dijelaskan adalah mengapa bit paritas kita

59
00:03:54,000 --> 00:03:58,320
berada pada posisi pangkat dua, misalnya 1, 2, 4, dan 8.

60
00:03:58,320 --> 00:04:03,640
Ini adalah posisi yang representasi binernya hanya diaktifkan satu bit.

61
00:04:03,640 --> 00:04:09,000
Artinya, masing-masing bit paritas tersebut berada di dalam

62
00:04:09,000 --> 00:04:12,640
satu dan hanya satu dari empat grup paritas.

63
00:04:12,640 --> 00:04:16,840
Anda juga dapat melihat ini dalam contoh yang lebih besar, di mana tidak peduli

64
00:04:16,840 --> 00:04:25,920
seberapa besar yang Anda dapatkan, setiap bit paritas hanya menyentuh salah satu grup.

65
00:04:25,920 --> 00:04:29,680
Setelah Anda memahami bahwa pemeriksaan paritas yang telah kita fokuskan sebagian

66
00:04:29,680 --> 00:04:34,320
besar waktu kita tidak lebih dari cara cerdas untuk menguraikan posisi

67
00:04:34,320 --> 00:04:37,880
kesalahan dalam biner, maka kita dapat menghubungkannya dengan cara berpikir yang

68
00:04:37,880 --> 00:04:42,160
berbeda tentang hamming. kode, yang bisa dibilang jauh lebih sederhana dan

69
00:04:42,160 --> 00:04:43,880
elegan, dan pada dasarnya dapat ditulis dengan satu baris kode.

70
00:04:43,920 --> 00:04:46,200
Ini didasarkan pada fungsi XOR.

71
00:04:46,200 --> 00:04:50,960
XOR bagi anda yang belum tahu, singkatan dari Exclusive or.

72
00:04:50,960 --> 00:04:55,440
Saat Anda mengambil XOR dari dua bit, itu akan mengembalikan 1 jika salah

73
00:04:55,440 --> 00:05:00,200
satu dari bit tersebut diaktifkan, tetapi tidak jika keduanya diaktifkan atau dinonaktifkan.

74
00:05:00,200 --> 00:05:03,760
Dengan kata lain, ini adalah paritas dari dua bit ini.

75
00:05:03,760 --> 00:05:07,840
Sebagai orang matematika, saya lebih suka menganggapnya sebagai mod penjumlahan 2.

76
00:05:07,840 --> 00:05:12,000
Kita juga biasa berbicara tentang XOR dari dua string bit

77
00:05:12,040 --> 00:05:14,040
yang berbeda, yang pada dasarnya melakukan komponen demi komponen.

78
00:05:14,040 --> 00:05:16,280
Ini seperti tambahan, tetapi Anda tidak pernah membawanya.

79
00:05:16,280 --> 00:05:21,240
Sekali lagi, mereka yang lebih cenderung matematis mungkin lebih suka

80
00:05:21,240 --> 00:05:23,520
menganggap ini sebagai penjumlahan dua vektor dan pengurangan mod 2.

81
00:05:23,520 --> 00:05:28,720
Jika Anda membuka beberapa Python sekarang dan menerapkan operasi tanda sisipan antara

82
00:05:28,720 --> 00:05:35,400
dua bilangan bulat, inilah yang dilakukannya kecuali representasi bit dari angka-angka tersebut.

83
00:05:35,400 --> 00:05:40,920
Poin kuncinya bagi Anda dan saya adalah bahwa mengambil XOR dari banyak

84
00:05:40,960 --> 00:05:45,960
string bit yang berbeda secara efektif merupakan cara untuk menghitung parodi dari

85
00:05:45,960 --> 00:05:51,320
sekelompok grup terpisah, seperti halnya dengan kolom, semuanya dalam satu gerakan.

86
00:05:51,320 --> 00:05:54,520
Ini memberi kita cara yang agak menarik untuk memikirkan tentang beberapa pemeriksaan paritas

87
00:05:54,520 --> 00:05:59,680
dari algoritma kode Hamming karena semuanya dikemas bersama menjadi satu operasi tunggal.

88
00:05:59,680 --> 00:06:02,800
Meski sekilas memang terlihat sangat berbeda.

89
00:06:02,800 --> 00:06:08,360
Secara khusus tuliskan 16 posisi dalam biner, seperti yang kita lakukan sebelumnya,

90
00:06:08,640 --> 00:06:14,800
dan sekarang sorot posisi di mana bit pesan diubah menjadi 1, lalu

91
00:06:14,800 --> 00:06:19,400
kumpulkan posisi-posisi ini ke dalam satu kolom besar dan ambil XOR.

92
00:06:19,400 --> 00:06:23,480
Anda mungkin dapat menebak bahwa 4 bit yang berada di bagian

93
00:06:23,480 --> 00:06:27,480
bawah sebagai hasilnya sama dengan 4 pemeriksaan paritas yang telah kita

94
00:06:27,480 --> 00:06:32,720
kenal dan sukai, tetapi luangkan waktu sejenak untuk memikirkan alasan sebenarnya.

95
00:06:32,720 --> 00:06:37,880
Kolom terakhir ini, misalnya, menghitung semua posisi yang bit terakhirnya adalah 1,

96
00:06:38,400 --> 00:06:42,400
namun kita sudah dibatasi hanya pada posisi yang disorot, sehingga secara efektif

97
00:06:42,400 --> 00:06:45,960
menghitung berapa banyak posisi yang disorot yang berasal dari grup paritas pertama.

98
00:06:45,960 --> 00:06:48,520
Apakah itu masuk akal?

99
00:06:48,520 --> 00:06:53,600
Demikian pula, kolom berikutnya menghitung berapa banyak posisi dalam

100
00:06:53,600 --> 00:06:59,640
grup paritas kedua, posisi yang bit kedua hingga terakhirnya

101
00:06:59,640 --> 00:07:00,640
adalah 1, dan yang juga disorot, dan seterusnya.

102
00:07:00,640 --> 00:07:06,640
Ini hanyalah perubahan kecil dalam perspektif terhadap hal yang sama yang telah kita lakukan.

103
00:07:07,640 --> 00:07:10,000
Jadi Anda tahu ke mana perginya setelah ini.

104
00:07:10,000 --> 00:07:14,400
Pengirim bertanggung jawab untuk mengubah beberapa bit

105
00:07:14,400 --> 00:07:19,640
paritas khusus untuk memastikan jumlahnya menjadi 0000.

106
00:07:19,640 --> 00:07:23,600
Sekarang setelah kita memilikinya seperti ini, ini memberi kita cara yang sangat bagus untuk

107
00:07:23,600 --> 00:07:28,720
memikirkan mengapa keempat bit yang dihasilkan di bawah ini secara langsung menguraikan posisi kesalahan.

108
00:07:28,720 --> 00:07:32,680
Katakanlah beberapa bit di blok ini diubah dari 0 menjadi 1.

109
00:07:32,720 --> 00:07:37,320
Artinya adalah posisi bit tersebut sekarang akan dimasukkan

110
00:07:37,320 --> 00:07:42,960
dalam total XOR, yang mengubah jumlah dari 0

111
00:07:42,960 --> 00:07:44,800
menjadi nilai yang baru dimasukkan, posisi kesalahan.

112
00:07:44,800 --> 00:07:48,800
Sedikit kurang jelas, hal yang sama juga berlaku

113
00:07:48,800 --> 00:07:49,800
jika ada kesalahan yang mengubah 1 menjadi 0.

114
00:07:49,800 --> 00:07:54,720
Soalnya, jika Anda menambahkan sedikit string dua kali, itu sama saja dengan tidak memilikinya

115
00:07:54,720 --> 00:07:59,000
sama sekali, pada dasarnya karena di dunia ini 1 tambah 1 sama dengan 0.

116
00:07:59,000 --> 00:08:03,720
Jadi menambahkan salinan posisi ini ke jumlah total

117
00:08:03,720 --> 00:08:05,400
memiliki efek yang sama seperti kita memindahkannya.

118
00:08:05,400 --> 00:08:10,080
Dan efeknya, sekali lagi, adalah hasil total

119
00:08:10,080 --> 00:08:13,480
di bawah ini menjelaskan posisi kesalahannya.

120
00:08:13,480 --> 00:08:17,720
Untuk mengilustrasikan betapa elegannya hal ini, izinkan saya menunjukkan satu baris kode Python

121
00:08:17,720 --> 00:08:22,120
yang saya referensikan sebelumnya, yang akan menangkap hampir semua logika di pihak penerima.

122
00:08:22,120 --> 00:08:27,160
Kita akan mulai dengan membuat array acak 16 1 dan 0 untuk mensimulasikan

123
00:08:27,160 --> 00:08:31,160
blok data, dan saya akan memberinya nama bit, tapi tentu saja dalam

124
00:08:31,160 --> 00:08:36,160
praktiknya ini akan menjadi sesuatu yang kita terima dari pengirim, dan bukannya karena

125
00:08:36,160 --> 00:08:38,600
acak, ia akan membawa 11 bit data bersama dengan 5 bit paritas.

126
00:08:38,600 --> 00:08:43,160
Jika saya memanggil fungsi enumerateBits, yang dilakukannya adalah memasangkan masing-masing bit tersebut

127
00:08:43,160 --> 00:08:48,240
dengan indeks yang sesuai, dalam hal ini berjalan dari 0 hingga 15.

128
00:08:48,240 --> 00:08:53,200
Jadi jika kita kemudian membuat daftar yang mengulang semua pasangan ini, pasangan yang

129
00:08:53,200 --> 00:08:59,160
terlihat seperti i, dan kemudian kita hanya mengeluarkan nilai i, hanya indeksnya, itu

130
00:08:59,160 --> 00:09:01,920
tidak terlalu menarik, kita hanya mendapatkan kembali indeks tersebut 0 sampai 15 .

131
00:09:01,920 --> 00:09:07,520
Tetapi jika kita menambahkan kondisi untuk hanya melakukan ini jika bit, yang berarti jika bit tersebut adalah

132
00:09:07,520 --> 00:09:13,400
1 dan bukan 0, maka bit tersebut hanya akan menarik keluar posisi di mana bit terkait diaktifkan.

133
00:09:13,400 --> 00:09:20,320
Dalam hal ini sepertinya posisi tersebut adalah 0, 4, 6, 9, dst.

134
00:09:20,720 --> 00:09:24,640
Apa yang kita inginkan adalah mengumpulkan semua posisi tersebut,

135
00:09:24,640 --> 00:09:29,960
posisi bit-bit yang diaktifkan, dan kemudian melakukan XOR bersama-sama.

136
00:09:29,960 --> 00:09:33,960
Untuk melakukan ini dengan Python, izinkan saya mengimpor beberapa fungsi bermanfaat terlebih dahulu.

137
00:09:33,960 --> 00:09:39,140
Dengan begitu kita bisa memanggil pengurangan() pada daftar ini, dan menggunakan fungsi XOR untuk menguranginya.

138
00:09:39,140 --> 00:09:44,840
Ini pada dasarnya memakan seluruh daftar, mengambil XOR di sepanjang jalan.

139
00:09:44,840 --> 00:09:48,760
Jika mau, Anda dapat menulis fungsi XOR tersebut

140
00:09:48,800 --> 00:09:52,200
secara eksplisit tanpa harus mengimpornya dari mana pun.

141
00:09:52,200 --> 00:09:56,880
Jadi saat ini sepertinya jika kita melakukan ini pada blok acak

142
00:09:56,880 --> 00:10:02,080
16 bit, ia akan mengembalikan 9, yang memiliki representasi biner 1001.

143
00:10:02,080 --> 00:10:05,960
Kami tidak akan melakukannya di sini, tetapi Anda dapat menulis fungsi di mana pengirim menggunakan representasi

144
00:10:05,960 --> 00:10:11,560
biner tersebut untuk mengatur empat bit paritas sesuai kebutuhan, yang pada akhirnya membuat blok ini ke

145
00:10:11,560 --> 00:10:16,200
keadaan di mana menjalankan baris kode ini pada daftar bit lengkap akan kembali sebuah 0.

146
00:10:17,200 --> 00:10:20,200
Ini akan dianggap sebagai blok yang dipersiapkan dengan baik.

147
00:10:20,200 --> 00:10:24,640
Yang keren adalah jika kita mengganti salah satu bit dalam daftar ini, menyimulasikan kesalahan acak

148
00:10:24,640 --> 00:10:30,600
dari noise, lalu jika Anda menjalankan baris kode yang sama, kesalahan tersebut akan dicetak.

149
00:10:30,600 --> 00:10:31,920
Bukankah itu rapi?

150
00:10:31,920 --> 00:10:37,200
Anda bisa mendapatkan blok ini secara tiba-tiba, menjalankan satu baris ini di atasnya,

151
00:10:37,200 --> 00:10:42,920
dan secara otomatis akan memunculkan posisi kesalahan, atau 0 jika tidak ada.

152
00:10:42,920 --> 00:10:45,520
Dan tidak ada yang istimewa dari ukuran 16 di sini.

153
00:10:45,520 --> 00:10:52,280
Baris kode yang sama akan berfungsi jika Anda memiliki daftar, katakanlah, 256 bit.

154
00:10:52,280 --> 00:10:56,280
Tak perlu dikatakan, ada lebih banyak kode untuk ditulis di sini, seperti

155
00:10:56,280 --> 00:11:01,440
melakukan pemeriksaan meta paritas untuk mendeteksi kesalahan 2-bit, namun idenya adalah bahwa

156
00:11:01,440 --> 00:11:05,080
hampir semua logika inti dari skema kita turun ke pengurangan XOR tunggal.

157
00:11:05,080 --> 00:11:10,600
Sekarang, tergantung pada kenyamanan Anda dengan biner dan XOR serta perangkat lunak secara

158
00:11:10,600 --> 00:11:15,880
umum, Anda mungkin menganggap perspektif ini sedikit membingungkan, atau jauh lebih elegan

159
00:11:15,880 --> 00:11:19,320
dan sederhana sehingga Anda bertanya-tanya mengapa kami tidak memulainya dari awal. -pergi.

160
00:11:19,320 --> 00:11:22,880
Secara longgar, perspektif pemeriksaan paritas berganda lebih mudah untuk dipikirkan ketika mengimplementasikan

161
00:11:22,880 --> 00:11:27,560
kode Hamming pada perangkat keras secara langsung, dan perspektif XOR paling mudah

162
00:11:27,560 --> 00:11:31,380
untuk dipikirkan ketika melakukannya dalam perangkat lunak, dari tingkat yang lebih tinggi.

163
00:11:31,380 --> 00:11:35,640
Yang pertama paling mudah dilakukan dengan tangan, dan menurut saya ini lebih baik

164
00:11:35,640 --> 00:11:40,720
dalam menanamkan intuisi inti yang mendasari semua ini, yaitu bahwa informasi yang

165
00:11:40,720 --> 00:11:46,840
diperlukan untuk menemukan satu kesalahan terkait dengan log ukuran blok. , atau dengan

166
00:11:46,840 --> 00:11:51,020
kata lain, ia bertambah sedikit demi sedikit seiring dengan bertambahnya ukuran blok.

167
00:11:51,020 --> 00:11:55,440
Fakta yang relevan di sini adalah bahwa informasi tersebut secara

168
00:11:55,440 --> 00:11:56,440
langsung berhubungan dengan seberapa banyak redundansi yang kita butuhkan.

169
00:11:56,440 --> 00:12:00,320
Hal itulah yang bertentangan dengan reaksi spontan kebanyakan orang ketika mereka pertama

170
00:12:00,320 --> 00:12:05,280
kali berpikir untuk membuat sebuah pesan tahan terhadap kesalahan, di mana

171
00:12:05,280 --> 00:12:07,520
biasanya menyalin seluruh pesan adalah naluri pertama yang terlintas dalam pikiran.

172
00:12:07,520 --> 00:12:11,120
Lalu, ada cara lain yang terkadang Anda lihat menampilkan

173
00:12:11,120 --> 00:12:14,800
kode Hamming, yaitu mengalikan pesan dengan satu matriks besar.

174
00:12:14,800 --> 00:12:18,580
Agak bagus karena menghubungkannya dengan kelompok kode linier yang lebih luas, tapi menurut saya

175
00:12:18,580 --> 00:12:25,160
hal itu hampir tidak memberikan intuisi tentang dari mana asalnya atau bagaimana skalanya.

176
00:12:25,160 --> 00:12:29,340
Dan berbicara tentang penskalaan, Anda mungkin memperhatikan bahwa efisiensi

177
00:12:29,340 --> 00:12:32,200
skema ini semakin baik seiring dengan peningkatan ukuran blok.

178
00:12:32,200 --> 00:12:40,560
Misalnya, kita melihat bahwa dengan 256 bit, Anda hanya menggunakan 3% dari ruang

179
00:12:40,560 --> 00:12:43,480
tersebut untuk redundansi, dan hal tersebut terus menjadi lebih baik dari sana.

180
00:12:43,480 --> 00:12:49,040
Ketika jumlah bit paritas bertambah satu per satu, ukuran blok terus berlipat ganda.

181
00:12:49,040 --> 00:12:53,840
Dan jika Anda menganggapnya ekstrem, Anda bisa memiliki blok dengan, katakanlah, satu

182
00:12:53,840 --> 00:12:58,800
juta bit, di mana Anda benar-benar akan memainkan 20 pertanyaan dengan

183
00:12:58,800 --> 00:13:00,800
pemeriksaan paritas Anda, dan blok tersebut hanya menggunakan 21 bit paritas.

184
00:13:00,800 --> 00:13:05,760
Dan jika Anda mundur sejenak untuk berpikir tentang melihat sejuta

185
00:13:05,760 --> 00:13:08,640
bit dan menemukan satu kesalahan, itu benar-benar terasa gila.

186
00:13:08,640 --> 00:13:12,680
Masalahnya, tentu saja, dengan blok yang lebih besar, kemungkinan melihat lebih dari satu atau dua

187
00:13:12,680 --> 00:13:18,360
kesalahan bit akan meningkat, dan kode Hamming tidak dapat menangani apa pun selain itu.

188
00:13:18,360 --> 00:13:22,020
Jadi dalam praktiknya, yang Anda inginkan adalah menemukan ukuran yang tepat

189
00:13:22,020 --> 00:13:25,520
sehingga kemungkinan terjadinya terlalu banyak bit flips tidak terlalu tinggi.

190
00:13:26,520 --> 00:13:30,920
Selain itu, dalam praktiknya, kesalahan cenderung terjadi dalam beberapa saat, yang akan merusak total satu

191
00:13:30,920 --> 00:13:35,680
blok, jadi salah satu taktik umum untuk membantu menyebarkan ledakan kesalahan ke banyak blok yang

192
00:13:35,680 --> 00:13:41,720
berbeda adalah dengan menjalin blok-blok tersebut, seperti ini, sebelum mereka terjadi. dikirim atau disimpan.

193
00:13:45,480 --> 00:13:49,920
Selain itu, banyak dari hal ini yang dianggap sepenuhnya diperdebatkan oleh kode-kode yang lebih modern,

194
00:13:49,920 --> 00:13:55,060
seperti algoritma Reed-Solomon yang jauh lebih umum digunakan, yang menangani error burst dengan sangat baik,

195
00:13:55,100 --> 00:13:59,580
dan dapat disesuaikan agar tahan terhadap jumlah error yang lebih besar per blok. .

196
00:13:59,580 --> 00:14:03,000
Tapi itu topik untuk lain waktu.

197
00:14:03,000 --> 00:14:07,660
Dalam bukunya The Art of Doing Science and Engineering, Hamming

198
00:14:07,660 --> 00:14:10,700
sangat berterus terang tentang betapa berliku-liku penemuan kode ini.

199
00:14:10,700 --> 00:14:15,180
Dia pertama kali mencoba segala macam skema berbeda yang melibatkan pengorganisasian bit-bit

200
00:14:15,180 --> 00:14:18,420
menjadi bagian-bagian kisi dimensi yang lebih tinggi dan hal-hal aneh seperti ini.

201
00:14:18,420 --> 00:14:22,520
Gagasan bahwa mungkin saja pemeriksaan paritas berkonspirasi sedemikian rupa sehingga

202
00:14:22,520 --> 00:14:26,360
menjelaskan posisi kesalahan hanya muncul di benak Hamming ketika dia

203
00:14:26,360 --> 00:14:30,800
mundur setelah serangkaian analisis lain dan bertanya, oke, apa cara

204
00:14:30,800 --> 00:14:32,860
paling efisien yang bisa saya lakukan? mungkin tentang ini?

205
00:14:32,860 --> 00:14:36,760
Dia juga berterus terang tentang betapa pentingnya pemeriksaan paritas yang sudah ada dalam pikirannya,

206
00:14:36,760 --> 00:14:42,040
yang mana hal ini jauh lebih jarang dilakukan pada tahun 1940an dibandingkan saat ini.

207
00:14:42,040 --> 00:14:46,040
Ada setengah lusin kali dalam buku ini dia merujuk pada

208
00:14:46,040 --> 00:14:49,640
kutipan Louis Pasteur, keberuntungan berpihak pada pikiran yang siap.

209
00:14:49,640 --> 00:14:55,120
Ide-ide cerdas sering kali terlihat sederhana jika dipikir-pikir, sehingga mudah untuk kurang dihargai.

210
00:14:55,120 --> 00:14:59,680
Saat ini harapan jujur saya adalah bahwa kode Hamming, atau

211
00:14:59,680 --> 00:15:01,820
setidaknya kemungkinan kode tersebut, terasa hampir jelas bagi Anda.

212
00:15:01,820 --> 00:15:05,440
Namun Anda tidak boleh membodohi diri sendiri dengan berpikir

213
00:15:05,440 --> 00:15:08,000
bahwa hal tersebut sebenarnya sudah jelas, karena sebenarnya tidak.

214
00:15:08,000 --> 00:15:12,080
Salah satu alasan mengapa ide-ide cerdas terlihat mudah adalah karena kita

215
00:15:12,080 --> 00:15:17,360
hanya melihat hasil akhirnya, membereskan apa yang berantakan, tidak pernah

216
00:15:17,360 --> 00:15:22,400
menyebutkan semua hal yang salah, meremehkan betapa luasnya ruang kemungkinan yang

217
00:15:22,400 --> 00:15:23,980
dapat dieksplorasi pada awal sebuah masalah. proses penyelesaian, semua itu.

218
00:15:23,980 --> 00:15:25,280
Namun hal ini berlaku secara umum.

219
00:15:25,280 --> 00:15:29,880
Saya pikir untuk beberapa penemuan khusus, ada alasan

220
00:15:29,880 --> 00:15:31,040
kedua yang lebih dalam sehingga kita kurang menghargainya.

221
00:15:31,040 --> 00:15:35,040
Memikirkan informasi dalam bentuk potongan-potongan baru benar-benar menyatu menjadi teori penuh

222
00:15:35,040 --> 00:15:39,400
pada tahun 1948, dengan makalah penting Claude Shannon tentang teori informasi.

223
00:15:39,400 --> 00:15:43,400
Hal ini pada dasarnya bersamaan dengan ketika Hamming mengembangkan algoritmanya.

224
00:15:43,440 --> 00:15:47,300
Ini adalah makalah dasar yang sama yang menunjukkan, dalam arti

225
00:15:47,300 --> 00:15:52,080
tertentu, bahwa koreksi kesalahan yang efisien selalu mungkin dilakukan, tidak

226
00:15:52,080 --> 00:15:53,920
peduli seberapa tinggi kemungkinan pembalikan bit, setidaknya secara teori.

227
00:15:53,920 --> 00:15:58,120
Omong-omong, Shannon dan Hamming berbagi kantor di Bell Labs, meskipun mengerjakan

228
00:15:58,120 --> 00:16:02,400
hal-hal yang sangat berbeda, yang sepertinya bukan suatu kebetulan di sini.

229
00:16:02,400 --> 00:16:06,960
Beberapa dekade kemudian, dan saat ini, banyak dari kita yang begitu tenggelam dalam pemikiran

230
00:16:06,960 --> 00:16:13,080
tentang hal-hal kecil dan informasi sehingga mudah untuk mengabaikan betapa berbedanya cara berpikir ini.

231
00:16:13,080 --> 00:16:17,920
Ironisnya, ide-ide yang secara mendalam membentuk cara berpikir generasi masa depan

232
00:16:17,920 --> 00:16:22,640
akan membuat generasi masa depan terlihat lebih sederhana daripada yang sebenarnya.

