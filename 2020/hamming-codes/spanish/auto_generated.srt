1
00:00:03,620 --> 00:00:06,830
¿Alguna vez te has preguntado cómo es posible rayar un 

2
00:00:06,830 --> 00:00:10,100
CD o un DVD y aún así reproducir lo que esté almacenado?

3
00:00:10,900 --> 00:00:13,980
El rayado realmente afecta los unos y ceros en el disco, 

4
00:00:13,980 --> 00:00:17,440
por lo que lee datos diferentes de los que estaban almacenados, 

5
00:00:17,440 --> 00:00:21,332
pero a menos que esté realmente rayado, los bits que lee se decodifican 

6
00:00:21,332 --> 00:00:25,818
exactamente en el mismo archivo que estaba codificado en él, un copia bit por bit, 

7
00:00:25,818 --> 00:00:27,440
a pesar de todos esos errores.

8
00:00:27,440 --> 00:00:31,845
Existe una gran cantidad de inteligencia matemática que nos permite almacenar datos y, 

9
00:00:31,845 --> 00:00:36,200
lo que es igualmente importante, transmitirlos de una manera resiliente a los errores.

10
00:00:36,200 --> 00:00:38,495
Bueno, está bien, en realidad no se necesita mucha 

11
00:00:38,495 --> 00:00:40,880
inteligencia para encontrar una manera de hacer esto.

12
00:00:40,880 --> 00:00:45,470
Cualquier archivo, ya sea un vídeo, un sonido o un texto, algún código, 

13
00:00:45,470 --> 00:00:50,380
una imagen, lo que sea, es en última instancia una secuencia de unos y ceros.

14
00:00:50,680 --> 00:00:53,291
Y una estrategia sencilla para corregir cualquier bit 

15
00:00:53,291 --> 00:00:56,000
que se invierta sería almacenar tres copias de cada bit.

16
00:00:57,580 --> 00:01:00,679
Luego, la máquina que lea este archivo podría comparar estas tres 

17
00:01:00,679 --> 00:01:04,060
copias y siempre tomará las 2 mejores de 3 cuando haya una discrepancia.

18
00:01:07,160 --> 00:01:10,860
Pero esto significa utilizar dos tercios del espacio para redundancia.

19
00:01:11,480 --> 00:01:13,942
E incluso entonces, a pesar de todo ese espacio cedido, 

20
00:01:13,942 --> 00:01:17,240
no hay una garantía sólida de lo que sucederá si se invierte más de un bit.

21
00:01:17,980 --> 00:01:20,846
La pregunta mucho más interesante es cómo lograr que se 

22
00:01:20,846 --> 00:01:24,020
puedan corregir los errores cediendo el menor espacio posible.

23
00:01:24,520 --> 00:01:28,273
Por ejemplo, usando el método que se aprenderá en este video, 

24
00:01:28,273 --> 00:01:33,360
se podrían almacenar datos en bloques de 256 bits, donde cada bloque usa 9 bits, ¡9!

25
00:01:33,760 --> 00:01:36,895
para actuar como una especie de redundancia, y los otros 247 bits son 

26
00:01:36,895 --> 00:01:40,300
libres para transportar cualquier mensaje o dato significativo que se desee.

27
00:01:40,900 --> 00:01:44,242
Y seguirá siendo el caso de que si se voltea algún bit, 

28
00:01:44,242 --> 00:01:48,361
con solo mirar este bloque y nada más, una máquina podrá identificar 

29
00:01:48,361 --> 00:01:52,660
que hubo un error y exactamente dónde estaba para saber cómo corregirlo.

30
00:01:52,660 --> 00:01:54,620
Y, sinceramente, eso parece magia.

31
00:01:55,440 --> 00:01:58,398
Y para este esquema en particular, si se invierten dos bits, 

32
00:01:58,398 --> 00:02:01,162
la máquina al menos podrá detectar que hubo dos errores, 

33
00:02:01,162 --> 00:02:02,860
aunque no sabrá cómo solucionarlos.

34
00:02:03,520 --> 00:02:05,245
Hablaremos un poco más adelante sobre cómo esto 

35
00:02:05,245 --> 00:02:06,900
se escala para bloques con diferentes tamaños.

36
00:02:07,860 --> 00:02:10,593
Los métodos que permiten corregir errores como este se conocen, 

37
00:02:10,593 --> 00:02:12,900
razonablemente, como códigos de corrección de errores.

38
00:02:13,660 --> 00:02:16,363
Durante la mayor parte del siglo pasado, este campo ha sido una 

39
00:02:16,363 --> 00:02:19,109
fuente realmente rica de matemáticas sorprendentemente profundas 

40
00:02:19,109 --> 00:02:21,940
que se incorporan a los dispositivos que utilizamos todos los días.

41
00:02:22,840 --> 00:02:27,217
El objetivo aquí es brindarle una comprensión profunda de uno de los primeros ejemplos, 

42
00:02:27,217 --> 00:02:28,660
conocido como código Hamming.

43
00:02:29,520 --> 00:02:32,953
Y, por cierto, la forma en que pienso sobre la estructura de este video 

44
00:02:32,953 --> 00:02:35,719
se trata menos de explicarlo lo más directamente posible, 

45
00:02:35,719 --> 00:02:39,820
y más de incitarte a inventarlo vos mismo, con un poco de guía amable por aquí y allá.

46
00:02:40,120 --> 00:02:42,796
Entonces, cuando sientas que ves hacia dónde se dirige en algún momento, 

47
00:02:42,796 --> 00:02:46,060
tómate ese momento para hacer una pausa y predice activamente cuál será el esquema antes 

48
00:02:46,060 --> 00:02:46,720
de que te lo diga.

49
00:02:47,240 --> 00:02:50,730
Además, si desea que su comprensión llegue al nivel del hardware, 

50
00:02:50,730 --> 00:02:54,062
Ben Eater ha hecho un video junto con este que le muestra cómo 

51
00:02:54,062 --> 00:02:58,240
implementar códigos Hamming en placas, lo cual es extremadamente satisfactorio.

52
00:02:59,300 --> 00:03:02,666
Debes saber que los códigos Hamming no se utilizan tan ampliamente como 

53
00:03:02,666 --> 00:03:05,378
los códigos más modernos, como el algoritmo Reed-Solomon, 

54
00:03:05,378 --> 00:03:08,791
pero hay cierta magia en el contraste entre lo imposible que parece esta 

55
00:03:08,791 --> 00:03:13,000
tarea al principio y lo absolutamente razonable que parece una vez aprendes sobre Hamming.

56
00:03:13,720 --> 00:03:17,870
El principio básico de la corrección de errores es que en un vasto espacio de 

57
00:03:17,870 --> 00:03:22,180
todos los mensajes posibles, sólo un subconjunto se considerará mensajes válidos.

58
00:03:22,800 --> 00:03:25,207
Como analogía, piense en palabras escritas correctamente 

59
00:03:25,207 --> 00:03:26,940
versus palabras escritas incorrectamente.

60
00:03:28,900 --> 00:03:33,095
Siempre que se modifica un mensaje válido, el receptor es responsable de corregir lo 

61
00:03:33,095 --> 00:03:37,340
que ve hasta al vecino válido más cercano, como podría hacer con un error tipográfico.

62
00:03:38,220 --> 00:03:41,140
Sin embargo, idear un algoritmo concreto para categorizar 

63
00:03:41,140 --> 00:03:44,060
eficientemente mensajes como este requiere cierta astucia.

64
00:03:46,780 --> 00:03:50,486
La historia comienza en la década de 1940, cuando un joven Richard Hamming trabajaba 

65
00:03:50,486 --> 00:03:54,236
para los Laboratorios Bell, y parte de su trabajo implicaba el uso de una computadora 

66
00:03:54,236 --> 00:03:57,420
de tarjeta perforada muy grande y costosa a la que tenía acceso limitado.

67
00:03:57,800 --> 00:04:00,392
Y los programas que seguía poniendo en ella seguían fallando, 

68
00:04:00,392 --> 00:04:02,400
porque de vez en cuando se malinterpretaba algo.

69
00:04:03,120 --> 00:04:05,148
Siendo la frustración el crisol de la invención, 

70
00:04:05,148 --> 00:04:08,420
se hartó tanto que inventó el primer código de corrección de errores del mundo.

71
00:04:09,060 --> 00:04:11,667
Hay muchas maneras diferentes de enmarcar los códigos de Hamming, 

72
00:04:11,667 --> 00:04:14,906
pero como primer paso vamos a verlos de la forma en que el propio Hamming pensaba 

73
00:04:14,906 --> 00:04:15,380
sobre ellos.

74
00:04:16,519 --> 00:04:20,940
Usemos un ejemplo que es simple, pero no demasiado simple, un bloque de 16 bits.

75
00:04:21,820 --> 00:04:24,740
Numeraremos las posiciones de estos bits del 0 al 15.

76
00:04:25,620 --> 00:04:29,145
Los datos reales que queremos almacenar solo conformarán 12 de estos bits, 

77
00:04:29,145 --> 00:04:33,000
mientras que 4 de las posiciones están reservadas como una especie de redundancia.

78
00:04:33,900 --> 00:04:37,051
La palabra redundante aquí no significa simplemente copiar; después de todo, 

79
00:04:37,051 --> 00:04:40,040
esos 4 bits no nos dan suficiente espacio para copiar los datos a ciegas.

80
00:04:40,720 --> 00:04:44,713
En cambio, tendrán que ser un tipo de redundancia mucho más matizada e inteligente, 

81
00:04:44,713 --> 00:04:47,280
que no agregue información nueva, pero sí resiliencia.

82
00:04:48,600 --> 00:04:52,521
Se podría esperar que estos 4 bits especiales vengan bien empaquetados juntos, 

83
00:04:52,521 --> 00:04:56,244
tal vez al final o algo así, pero como verás, colocarlos en posiciones que 

84
00:04:56,244 --> 00:04:59,620
son potencias de 2 permite obtener algo realmente elegante al final.

85
00:05:00,200 --> 00:05:03,540
También podría darle una pequeña pista sobre cómo se adapta esto a bloques más grandes.

86
00:05:04,900 --> 00:05:07,751
Además, técnicamente termina siendo solo 11 bits de datos, 

87
00:05:07,751 --> 00:05:11,375
encontrarás que hay una leve diferencia en lo que sucede en la posición 0, 

88
00:05:11,375 --> 00:05:13,260
pero no te preocupes por eso por ahora.

89
00:05:14,140 --> 00:05:17,900
Como cualquier algoritmo de corrección de errores, esto involucrará a dos jugadores, 

90
00:05:17,900 --> 00:05:21,616
un remitente que es responsable de configurar estos 4 bits especiales y un receptor 

91
00:05:21,616 --> 00:05:25,200
que es responsable de realizar algún tipo de verificación y corregir los errores.

92
00:05:25,200 --> 00:05:28,282
Por supuesto, las palabras remitente y receptor en realidad se refieren a 

93
00:05:28,282 --> 00:05:30,740
máquinas o software que realizan todas las comprobaciones, 

94
00:05:30,740 --> 00:05:32,990
y la idea de mensaje tiene un significado muy amplio, 

95
00:05:32,990 --> 00:05:34,740
para incluir cosas como el almacenamiento.

96
00:05:35,340 --> 00:05:38,483
Después de todo, almacenar datos es lo mismo que enviar un 

97
00:05:38,483 --> 00:05:41,680
mensaje del pasado al futuro en lugar de de un lugar a otro.

98
00:05:42,560 --> 00:05:45,839
Así que esa es la idea, pero antes de que podamos profundizar necesitamos 

99
00:05:45,839 --> 00:05:49,297
hablar sobre una idea relacionada que estaba fresca en la mente de Hamming en 

100
00:05:49,297 --> 00:05:53,197
el momento de su descubrimiento, un método que permite detectar errores de un solo bit, 

101
00:05:53,197 --> 00:05:56,300
pero no corregirlos, conocido en la industria como control de paridad.

102
00:05:56,880 --> 00:06:00,301
Para un control de paridad, separamos solo un bit que el remitente es 

103
00:06:00,301 --> 00:06:03,820
responsable de ajustar, y el resto son libres de transportar un mensaje.

104
00:06:04,880 --> 00:06:07,940
El único trabajo de este bit especial es asegurarse de 

105
00:06:07,940 --> 00:06:11,280
que el número total de unos en el mensaje sea un número par.

106
00:06:12,080 --> 00:06:14,802
Entonces, por ejemplo, ahora mismo, el número total de unos es 7, 

107
00:06:14,802 --> 00:06:17,443
eso es impar, por lo que el remitente necesita invertir ese bit 

108
00:06:17,443 --> 00:06:19,960
especial para que sea un 1, haciendo que el recuento sea par.

109
00:06:20,800 --> 00:06:23,943
Pero si el bloque ya hubiera comenzado con un número par de unos, 

110
00:06:23,943 --> 00:06:26,420
entonces este bit especial se habría mantenido en 0.

111
00:06:27,340 --> 00:06:29,536
Esto es bastante simple, engañosamente simple, 

112
00:06:29,536 --> 00:06:32,574
pero es una forma increíblemente elegante de destilar la idea de 

113
00:06:32,574 --> 00:06:36,780
cambio en cualquier parte de un mensaje para que se refleje en un solo bit de información.

114
00:06:37,500 --> 00:06:41,374
Observe que si alguna parte de este mensaje se invierte, 

115
00:06:41,374 --> 00:06:46,540
ya sea de 0 a 1 o de 1 a 0, cambia el recuento total de unos de par a impar.

116
00:06:47,980 --> 00:06:52,396
Entonces, si tú eres el receptor, miras el mensaje y ves un número impar de unos, 

117
00:06:52,396 --> 00:06:55,413
puedes estar seguro de que se ha producido algún error, 

118
00:06:55,413 --> 00:06:57,460
aunque no tengas idea de dónde estaba.

119
00:06:58,500 --> 00:07:01,077
En la jerga, si un grupo de bits tiene un número 

120
00:07:01,077 --> 00:07:03,340
par o impar de unos se conoce como paridad.

121
00:07:04,860 --> 00:07:07,431
También puedes usar números y decir que la paridad es 0 o 1, 

122
00:07:07,431 --> 00:07:10,720
lo que suele ser más útil una vez que empiezas a hacer cálculos con esta idea.

123
00:07:11,220 --> 00:07:13,483
Y este bit especial que utiliza el remitente para 

124
00:07:13,483 --> 00:07:15,520
controlar la paridad se llama bit de paridad.

125
00:07:17,560 --> 00:07:21,105
Y, de hecho, debemos ser claros: si el receptor ve una paridad impar, 

126
00:07:21,105 --> 00:07:25,258
no significa necesariamente que hubo solo un error, puede haber habido 3 errores, 

127
00:07:25,258 --> 00:07:29,260
o 5, o cualquier otro número impar, pero puede estar seguro de que no fueron 0.

128
00:07:29,980 --> 00:07:33,666
Por otro lado, si hubiera habido 2 errores, o cualquier número par de errores, 

129
00:07:33,666 --> 00:07:37,820
ese recuento final de 1 seguiría siendo par, por lo que el receptor no puede tener plena 

130
00:07:37,820 --> 00:07:41,926
confianza en que un recuento par necesariamente signifique que el mensaje está libre de 

131
00:07:41,926 --> 00:07:42,300
errores.

132
00:07:42,840 --> 00:07:45,934
Podrías quejarte de que un mensaje que se estropea sólo con 

133
00:07:45,934 --> 00:07:49,080
cambios en 2 bits es bastante débil, y estarías en lo cierto.

134
00:07:49,700 --> 00:07:52,693
Sin embargo, hay que tener en cuenta que no existe ningún método de 

135
00:07:52,693 --> 00:07:55,598
detección o corrección de errores que pueda brindarte un 100 % de 

136
00:07:55,598 --> 00:07:58,900
confianza de que el mensaje que se recibe es el que pretendía el remitente.

137
00:07:59,580 --> 00:08:02,510
Después de todo, suficiente ruido aleatorio siempre podría cambiar un 

138
00:08:02,510 --> 00:08:05,440
mensaje válido en otro mensaje válido simplemente por pura casualidad.

139
00:08:06,240 --> 00:08:10,726
En cambio, el objetivo es idear un esquema que sea sólido hasta un cierto número 

140
00:08:10,726 --> 00:08:15,380
máximo de errores, o tal vez reducir la probabilidad de un falso positivo como este.

141
00:08:16,260 --> 00:08:19,330
Los controles de paridad por sí solos son bastante débiles, 

142
00:08:19,330 --> 00:08:23,219
pero al resumir la idea de cambio en un mensaje completo hasta un solo bit, 

143
00:08:23,219 --> 00:08:27,160
esto nos brinda un poderoso componente básico para esquemas más sofisticados.

144
00:08:27,940 --> 00:08:32,175
Por ejemplo, mientras Hamming buscaba una manera de identificar dónde ocurrió un error, 

145
00:08:32,175 --> 00:08:35,784
no solo que sucedió, su idea clave fue que si se aplican algunos controles 

146
00:08:35,784 --> 00:08:39,538
de paridad no al mensaje completo, sino a ciertos subconjuntos cuidadosamente 

147
00:08:39,538 --> 00:08:43,148
seleccionados, se pueden preguntar una serie más refinada de preguntas que 

148
00:08:43,148 --> 00:08:45,940
determinan la ubicación de cualquier error de un solo bit.

149
00:08:46,680 --> 00:08:49,762
La sensación general es un poco como jugar un juego de 20 preguntas, 

150
00:08:49,762 --> 00:08:53,380
haciendo preguntas de sí o no que reducen el espacio de posibilidades a la mitad.

151
00:08:54,160 --> 00:08:57,951
Por ejemplo, digamos que hacemos un control de paridad solo en estos 8 bits, 

152
00:08:57,951 --> 00:08:59,380
todas las posiciones impares.

153
00:09:00,100 --> 00:09:04,271
Luego, si se detecta un error, le da al receptor un poco más de información sobre 

154
00:09:04,271 --> 00:09:08,240
dónde está específicamente el error, es decir, que está en una posición impar.

155
00:09:08,940 --> 00:09:11,476
Si no se detecta ningún error entre esos 8 bits, 

156
00:09:11,476 --> 00:09:15,152
significa que no hay ningún error o que se encuentra en algún lugar de 

157
00:09:15,152 --> 00:09:16,240
las posiciones pares.

158
00:09:17,180 --> 00:09:20,475
Se podría pensar que limitar un control de paridad a la mitad de los bits 

159
00:09:20,475 --> 00:09:23,815
lo hace menos efectivo, pero cuando se hace junto con otras comprobaciones 

160
00:09:23,815 --> 00:09:27,200
bien seleccionadas, contraintuitivamente nos brinda algo mucho más poderoso.

161
00:09:29,240 --> 00:09:32,001
Para realmente realizar ese control de paridad, recuerda, 

162
00:09:32,001 --> 00:09:35,715
es necesario asignar algún bit especial que tenga control sobre la paridad de 

163
00:09:35,715 --> 00:09:36,620
ese grupo completo.

164
00:09:37,480 --> 00:09:39,180
Aquí elijamos la posición 1.

165
00:09:39,720 --> 00:09:43,101
Para el ejemplo mostrado, la paridad de estos 8 bits es actualmente impar, 

166
00:09:43,101 --> 00:09:46,980
por lo que el remitente es responsable de alternar ese bit de paridad, y ahora es par.

167
00:09:47,940 --> 00:09:50,680
Este es sólo 1 de los 4 controles de paridad que haremos.

168
00:09:50,920 --> 00:09:53,481
La segunda comprobación se encuentra entre los 8 bits de la 

169
00:09:53,481 --> 00:09:56,300
mitad derecha de la cuadrícula, al menos como se ha dibujado aquí.

170
00:09:56,680 --> 00:09:59,720
Esta vez podríamos usar la posición 2 como bit de paridad, 

171
00:09:59,720 --> 00:10:02,349
por lo que estos 8 bits ya tienen una paridad par, 

172
00:10:02,349 --> 00:10:06,060
y el remitente puede sentirse bien dejando ese bit número 2 sin cambios.

173
00:10:07,020 --> 00:10:11,248
Luego, en el otro extremo, si el receptor verifica la paridad de este grupo y encuentra 

174
00:10:11,248 --> 00:10:15,380
que es impar, sabrá que el error está en algún lugar entre estos 8 bits de la derecha.

175
00:10:15,820 --> 00:10:18,176
De lo contrario, significa que no hay error o que 

176
00:10:18,176 --> 00:10:20,580
el error está en algún lugar de la mitad izquierda.

177
00:10:21,120 --> 00:10:23,185
O supongo que podrían haber habido dos errores, 

178
00:10:23,185 --> 00:10:26,500
pero por ahora vamos a asumir que hay como máximo un error en todo el bloque.

179
00:10:26,940 --> 00:10:28,740
Las cosas se rompen por completo por más que eso.

180
00:10:29,160 --> 00:10:31,127
Aquí, antes de ver las dos comprobaciones siguientes, 

181
00:10:31,127 --> 00:10:33,970
tómate un momento para pensar en lo que estas dos primeras nos permiten hacer 

182
00:10:33,970 --> 00:10:35,100
cuando las consideramos juntas.

183
00:10:35,800 --> 00:10:39,660
Digamos que detectas un error en las columnas impares y en la mitad derecha.

184
00:10:40,200 --> 00:10:43,040
Esto significa necesariamente que el error está en algún lugar de la última columna.

185
00:10:43,820 --> 00:10:47,441
Si no hubiese ningún error en la columna impar pero hubiese uno en la mitad derecha, 

186
00:10:47,441 --> 00:10:49,700
eso indica que el error está en la penúltima columna.

187
00:10:50,440 --> 00:10:54,209
Del mismo modo, si hay un error en las columnas impares pero no en la mitad derecha, 

188
00:10:54,209 --> 00:10:56,560
sabrás que está en algún lugar de la segunda columna.

189
00:10:56,560 --> 00:10:59,132
Y si ninguno de esos dos controles de paridad detecta algo, 

190
00:10:59,132 --> 00:11:02,305
significa que el único lugar donde podría haber un error es en la columna 

191
00:11:02,305 --> 00:11:03,120
más a la izquierda.

192
00:11:03,340 --> 00:11:06,120
Pero también podría significar simplemente que no hay ningún error.

193
00:11:06,300 --> 00:11:08,590
Lo cual es una forma bastante elaborada de decir que dos 

194
00:11:08,590 --> 00:11:10,840
controles de paridad nos permiten determinar la columna.

195
00:11:11,480 --> 00:11:13,640
A partir de aquí, probablemente puedas adivinar lo que sigue.

196
00:11:13,800 --> 00:11:16,140
Básicamente hacemos lo mismo pero para las filas.

197
00:11:16,440 --> 00:11:18,890
Habrá un control de paridad en las filas impares, 

198
00:11:18,890 --> 00:11:20,900
usando la posición 4 como bit de paridad.

199
00:11:21,380 --> 00:11:23,883
En este ejemplo, ese grupo ya tiene una paridad par, 

200
00:11:23,883 --> 00:11:25,820
por lo que el bit 4 se establecería en 0.

201
00:11:26,560 --> 00:11:29,691
Y finalmente hay un control de paridad en las dos filas inferiores, 

202
00:11:29,691 --> 00:11:31,580
usando la posición 8 como bit de paridad.

203
00:11:32,120 --> 00:11:34,329
En este caso, parece que el remitente necesita 

204
00:11:34,329 --> 00:11:36,820
activar el bit 8 para darle al grupo una paridad par.

205
00:11:37,700 --> 00:11:40,247
Así como las dos primeras comprobaciones nos permiten fijar la columna, 

206
00:11:40,247 --> 00:11:41,840
las dos siguientes le permiten fijar la fila.

207
00:11:42,880 --> 00:11:46,375
Como ejemplo, imaginemos que durante la transmisión hay un error en, 

208
00:11:46,375 --> 00:11:47,540
digamos, la posición 3.

209
00:11:48,180 --> 00:11:50,748
Bueno, esto afecta al primer grupo de paridad y también afecta 

210
00:11:50,748 --> 00:11:53,235
al segundo grupo de paridad, por lo que el receptor sabe que 

211
00:11:53,235 --> 00:11:55,560
hay un error en algún lugar de esa columna de la derecha.

212
00:11:56,100 --> 00:12:00,540
Pero no afecta al tercer grupo ni al cuarto grupo.

213
00:12:01,240 --> 00:12:04,250
Y eso permite al receptor identificar el error hasta la primera fila, 

214
00:12:04,250 --> 00:12:07,520
lo que necesariamente significa la posición 3, para poder corregir el error.

215
00:12:08,580 --> 00:12:11,323
Quizás disfrutes tomándote un momento para convencerte de que las 

216
00:12:11,323 --> 00:12:14,149
respuestas a estas cuatro preguntas realmente siempre te permitirán 

217
00:12:14,149 --> 00:12:17,100
identificar una ubicación específica, sin importar dónde se encuentren.

218
00:12:17,720 --> 00:12:20,415
De hecho, los más astutos podrían incluso notar una 

219
00:12:20,415 --> 00:12:23,060
conexión entre estas preguntas y el conteo binario.

220
00:12:23,500 --> 00:12:26,017
Y si lo haces, déjame enfatizar nuevamente, haz una pausa, 

221
00:12:26,017 --> 00:12:28,920
intenta por ti mismo establecer la conexión antes de que te la diga.

222
00:12:30,500 --> 00:12:36,060
Si te preguntas qué sucede si un bit de paridad se ve afectado, puedes intentarlo.

223
00:12:36,440 --> 00:12:40,139
Tómate un momento para pensar en cómo localizar cualquier error entre estos 

224
00:12:40,139 --> 00:12:44,180
cuatro bits especiales como cualquier otro, con el mismo grupo de cuatro preguntas.

225
00:12:47,060 --> 00:12:50,041
Realmente no importa, ya que al final del día lo que queremos es proteger los 

226
00:12:50,041 --> 00:12:53,100
bits del mensaje, los bits de corrección de errores simplemente siguen adelante.

227
00:12:53,600 --> 00:12:57,820
Pero proteger también esos bits es algo que termina siendo secundario en nuestro esquema.

228
00:12:59,200 --> 00:13:01,760
También puedes disfrutar anticipando cómo evoluciona esto.

229
00:13:02,300 --> 00:13:05,286
Si usamos un bloque de tamaño 256 bits, por ejemplo, 

230
00:13:05,286 --> 00:13:08,723
para determinar una ubicación, solo necesitas ocho preguntas 

231
00:13:08,723 --> 00:13:12,780
de sí o no para realizar una búsqueda binaria hasta un lugar específico.

232
00:13:15,640 --> 00:13:18,021
Y recuerda, cada pregunta requiere ceder solo un 

233
00:13:18,021 --> 00:13:20,500
bit para establecer el control de paridad adecuado.

234
00:13:23,160 --> 00:13:26,184
Es posible que algunos ya lo hayan visto, pero hablaremos más adelante sobre la 

235
00:13:26,184 --> 00:13:29,360
forma sistemática de encontrar cuáles son estas preguntas en solo uno o dos minutos.

236
00:13:29,880 --> 00:13:31,604
Ojalá este boceto sea suficiente para apreciar la 

237
00:13:31,604 --> 00:13:33,260
eficiencia de lo que aquí estamos desarrollando.

238
00:13:33,260 --> 00:13:36,992
Lo primero, excepto esos ocho bits de paridad resaltados, 

239
00:13:36,992 --> 00:13:41,820
puede ser lo que quieras, transportando el mensaje o los datos que quieras.

240
00:13:41,820 --> 00:13:44,594
Los 8 bits son redundantes en el sentido de que están completamente 

241
00:13:44,594 --> 00:13:47,327
determinados por el resto del mensaje, pero es de una manera mucho 

242
00:13:47,327 --> 00:13:50,020
más inteligente que simplemente copiar el mensaje en su totalidad.

243
00:13:53,600 --> 00:13:56,310
Y aún así, por tan poco entregado, podrías identificar 

244
00:13:56,310 --> 00:13:58,380
y corregir cualquier error de un solo bit.

245
00:13:59,200 --> 00:14:00,400
Bueno, casi.

246
00:14:00,960 --> 00:14:05,050
Bien, entonces el único problema aquí es que si ninguno de los cuatro controles 

247
00:14:05,050 --> 00:14:08,628
de paridad detecta un error, es decir, que los subconjuntos de 8 bits 

248
00:14:08,628 --> 00:14:13,127
especialmente seleccionados tienen paridades pares, tal como lo pretendía el remitente, 

249
00:14:13,127 --> 00:14:16,860
entonces significa que no hubo ningún error o nos reduce a la posición 0.

250
00:14:17,740 --> 00:14:22,477
Como se ve, con cuatro preguntas de sí o no, tenemos 16 resultados posibles para nuestros 

251
00:14:22,477 --> 00:14:26,846
controles de paridad y, al principio, eso parece perfecto para identificar 1 de 16 

252
00:14:26,846 --> 00:14:30,899
posiciones en el bloque, pero también debe comunicar un resultado número 17, 

253
00:14:30,899 --> 00:14:31,900
el de ningún error.

254
00:14:33,020 --> 00:14:37,300
La solución aquí es bastante simple, simplemente olvidarse por completo del bit 0.

255
00:14:37,840 --> 00:14:40,630
Entonces, cuando hacemos nuestros cuatro controles de paridad y vemos 

256
00:14:40,630 --> 00:14:43,460
que todos son pares, significa inequívocamente que no hay ningún error.

257
00:14:44,240 --> 00:14:47,101
Eso significa que en lugar de trabajar con un bloque de 16 bits, 

258
00:14:47,101 --> 00:14:50,226
trabajamos con un bloque de 15 bits, donde 11 de los bits están libres 

259
00:14:50,226 --> 00:14:53,220
para transportar un mensaje y 4 de ellos están ahí para redundancia.

260
00:14:53,780 --> 00:15:00,200
Y con eso, ahora tenemos lo que la gente en la industria llamaría un código Hamming 15-11.

261
00:15:00,460 --> 00:15:03,804
Dicho esto, es bueno tener un tamaño de bloque que sea una potencia limpia de 2, 

262
00:15:03,804 --> 00:15:06,364
y hay una forma inteligente de mantener ese bit 0 y hacer que 

263
00:15:06,364 --> 00:15:08,140
haga un poco de trabajo extra por nosotros.

264
00:15:08,700 --> 00:15:11,664
Si lo usamos como bit de paridad en todo el bloque, 

265
00:15:11,664 --> 00:15:15,540
nos permite detectar, aunque no podamos corregir, errores de 2 bits.

266
00:15:16,160 --> 00:15:16,820
Así es como funciona.

267
00:15:17,180 --> 00:15:20,350
Después de configurar esos cuatro bits especiales de corrección de errores, 

268
00:15:20,350 --> 00:15:23,146
configuramos el 0 para que la paridad del bloque completo sea par, 

269
00:15:23,146 --> 00:15:24,940
como en una verificación de paridad normal.

270
00:15:25,700 --> 00:15:28,361
Ahora, si hay un error de un solo bit, entonces la paridad del 

271
00:15:28,361 --> 00:15:30,980
bloque completo cambia a impar, pero lo detectaremos de todos 

272
00:15:30,980 --> 00:15:33,600
modos gracias a los cuatro controles de corrección de errores.

273
00:15:34,160 --> 00:15:38,260
Sin embargo, si hay dos errores, entonces la paridad general volverá a ser par, 

274
00:15:38,260 --> 00:15:41,848
pero el receptor aún verá que ha habido al menos algún error debido a 

275
00:15:41,848 --> 00:15:45,180
lo que está sucediendo con esas cuatro verificaciones de paridad.

276
00:15:45,180 --> 00:15:47,490
Entonces, si notan una paridad par en general, 

277
00:15:47,490 --> 00:15:50,635
pero sucede algo distinto de cero con las otras verificaciones, 

278
00:15:50,635 --> 00:15:52,700
esto indica que hubo al menos dos errores.

279
00:15:53,520 --> 00:15:54,000
¿No es eso inteligente?

280
00:15:54,300 --> 00:15:56,731
Aunque no podemos corregir esos errores de 2 bits, 

281
00:15:56,731 --> 00:16:00,115
simplemente volviendo a poner a funcionar a ese pequeño molesto bit 0, 

282
00:16:00,115 --> 00:16:01,260
nos permite detectarlos.

283
00:16:02,260 --> 00:16:05,220
Esto es bastante estándar, se conoce como código Hamming extendido.

284
00:16:06,540 --> 00:16:09,665
Técnicamente hablando, ahora tienes una descripción completa de lo que 

285
00:16:09,665 --> 00:16:12,880
hace un código Hamming, al menos para el ejemplo de un bloque de 16 bits.

286
00:16:12,880 --> 00:16:17,229
Pero creo que te resultará más satisfactorio comprobar tu comprensión y solidificar 

287
00:16:17,229 --> 00:16:21,320
todo hasta este punto haciendo tú mismo un ejemplo completo de principio a fin.

288
00:16:22,080 --> 00:16:24,300
Lo revisaré contigo para que puedas comprobarlo tú mismo.

289
00:16:25,120 --> 00:16:28,127
Para configurar un mensaje, ya sea un mensaje literal que estás 

290
00:16:28,127 --> 00:16:32,169
traduciendo en el espacio o algunos datos que deseas almacenar a lo largo del tiempo, 

291
00:16:32,169 --> 00:16:34,660
el primer paso es dividirlo en fragmentos de 11 bits.

292
00:16:35,580 --> 00:16:39,760
Cada fragmento se empaquetará en un bloque de 16 bits resistente a errores.

293
00:16:39,760 --> 00:16:43,220
Así que tomemos este como ejemplo y resolvámoslo.

294
00:16:43,740 --> 00:16:44,740
¡Adelante, hazlo de verdad!

295
00:16:44,740 --> 00:16:47,020
Hagamos una pausa e intentemos armar este bloque.

296
00:16:52,720 --> 00:16:53,680
Bien, ¿estás listo?

297
00:16:54,240 --> 00:16:57,063
Recuerda, la posición 0 junto con las otras potencias de 2 están 

298
00:16:57,063 --> 00:16:59,279
reservadas para la tarea de corrección de errores, 

299
00:16:59,279 --> 00:17:02,928
por lo que comienzas colocando los bits del mensaje en todos los lugares restantes, 

300
00:17:02,928 --> 00:17:03,320
en orden.

301
00:17:05,339 --> 00:17:08,339
Necesitas que este grupo tenga una paridad par, la cual ya tiene, 

302
00:17:08,339 --> 00:17:12,339
por lo que debería haber configurado ese bit de paridad en la posición 1 para que sea 0.

303
00:17:13,020 --> 00:17:15,233
El siguiente grupo comienza con una paridad impar, 

304
00:17:15,233 --> 00:17:17,880
por lo que deberías haber establecido su bit de paridad en 1.

305
00:17:19,160 --> 00:17:21,266
El grupo posterior comienza con una paridad impar, 

306
00:17:21,266 --> 00:17:24,240
por lo que nuevamente deberías haber establecido su bit de paridad en 1.

307
00:17:24,780 --> 00:17:26,909
Y el grupo final también tiene una paridad impar, 

308
00:17:26,909 --> 00:17:30,060
lo que significa que configuramos ese bit en la posición 8 para que sea 1.

309
00:17:31,300 --> 00:17:35,394
Y luego, como paso final, el bloque completo ahora tiene una paridad par, 

310
00:17:35,394 --> 00:17:40,320
lo que significa que puedes establecer ese bit número 0, el bit de paridad general, en 0.

311
00:17:41,340 --> 00:17:44,740
Entonces, cuando este bloque sea enviado, la paridad de los cuatro 

312
00:17:44,740 --> 00:17:48,140
subconjuntos especiales y el bloque en su conjunto serán pares o 0.

313
00:17:48,820 --> 00:17:52,180
Como segunda parte del ejercicio, hagamos que tú seas el receptor.

314
00:17:53,480 --> 00:17:56,630
Por supuesto, eso significaría que aún no sabes cuál es este mensaje, 

315
00:17:56,630 --> 00:17:59,780
tal vez alguno lo haya memorizado, pero supongamos que tú no lo sabes.

316
00:18:00,020 --> 00:18:03,947
Lo que voy a hacer es cambiar 0, 1 o 2 de los bits de ese 

317
00:18:03,947 --> 00:18:07,740
bloque y luego pedirte que averigües qué es lo que hice.

318
00:18:08,260 --> 00:18:10,810
Así que nuevamente, haz una pausa e intenta resolverlo.

319
00:18:18,790 --> 00:18:23,377
Bien, ahora tú, como receptor, verifica el primer grupo de paridad y puedes ver que 

320
00:18:23,377 --> 00:18:27,910
es par, por lo que cualquier error que exista tendría que estar en una columna par.

321
00:18:29,690 --> 00:18:32,449
La siguiente verificación nos da un número impar, 

322
00:18:32,449 --> 00:18:37,030
lo que nos indica que hay al menos un error y nos limita a esta columna específica.

323
00:18:38,550 --> 00:18:41,790
El tercer control es par, lo que reduce aún más las posibilidades.

324
00:18:42,650 --> 00:18:46,110
Y la última verificación de paridad es impar, lo que nos dice que hay un error en algún 

325
00:18:46,110 --> 00:18:49,650
lugar en la parte inferior, que ahora podemos ver que debe estar en la posición número 10.

326
00:18:51,490 --> 00:18:54,143
Es más, la paridad de todo el bloque es impar, 

327
00:18:54,143 --> 00:18:57,530
lo que nos da confianza de que hubo un solo cambio y no dos.

328
00:18:58,070 --> 00:18:59,970
Si son tres o más, no podremos saber que ocurrió.

329
00:19:01,310 --> 00:19:05,802
Después de corregir el bit número 10, extraer los 11 bits que no se utilizaron 

330
00:19:05,802 --> 00:19:09,783
para la corrección nos da el segmento relevante del mensaje original, 

331
00:19:09,783 --> 00:19:14,390
que si rebobinamos y comparamos, es exactamente con lo que comenzamos el ejemplo.

332
00:19:15,710 --> 00:19:17,760
Y ahora que sabes cómo hacer todo esto a mano, 

333
00:19:17,760 --> 00:19:21,468
me gustaría mostrarte cómo puedes llevar a cabo la parte central de toda esta lógica 

334
00:19:21,468 --> 00:19:23,170
con una sola línea de código en Python.

335
00:19:23,870 --> 00:19:27,882
Verás, lo que aún no te he dicho es cuán elegante es realmente este algoritmo, 

336
00:19:27,882 --> 00:19:31,487
cuán simple es hacer que una máquina apunte a la posición de un error, 

337
00:19:31,487 --> 00:19:35,093
cómo escalarlo sistemáticamente y cómo podemos enmarcar todo esto como 

338
00:19:35,093 --> 00:19:38,750
una sola operación en lugar de múltiples controles de paridad separados.

339
00:19:39,430 --> 00:19:41,310
Para ver a qué me refiero, únete a mí en la parte 2.

