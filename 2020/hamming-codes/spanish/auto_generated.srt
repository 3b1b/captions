1
00:00:03,620 --> 00:00:06,830
¿Alguna vez te has preguntado cómo es posible rayar un 

2
00:00:06,830 --> 00:00:10,100
CD o un DVD y aún así reproducir lo que esté almacenado?

3
00:00:10,900 --> 00:00:13,665
El rayado realmente afecta los 1 y 0 en el disco, 

4
00:00:13,665 --> 00:00:17,206
por lo que lee datos diferentes de los que estaban almacenados, 

5
00:00:17,206 --> 00:00:21,189
pero a menos que esté realmente rayado, los bits que lee se decodifican 

6
00:00:21,189 --> 00:00:25,780
exactamente en el mismo archivo que estaba codificado en él, un copia bit por bit, 

7
00:00:25,780 --> 00:00:27,440
a pesar de todos esos errores.

8
00:00:27,440 --> 00:00:31,845
Existe una gran cantidad de inteligencia matemática que nos permite almacenar datos y, 

9
00:00:31,845 --> 00:00:36,200
lo que es igualmente importante, transmitirlos de una manera resistente a los errores.

10
00:00:36,200 --> 00:00:38,495
Bueno, está bien, en realidad no se necesita mucha 

11
00:00:38,495 --> 00:00:40,880
inteligencia para encontrar una manera de hacer esto.

12
00:00:40,880 --> 00:00:45,470
Cualquier archivo, ya sea un vídeo, un sonido o un texto, algún código, 

13
00:00:45,470 --> 00:00:50,380
una imagen, lo que sea, es en última instancia una secuencia de unos y ceros.

14
00:00:50,680 --> 00:00:53,291
Y una estrategia sencilla para corregir cualquier bit 

15
00:00:53,291 --> 00:00:56,000
que se invierta sería almacenar tres copias de cada bit.

16
00:00:57,580 --> 00:01:00,679
Luego, la máquina que lea este archivo podría comparar estas tres 

17
00:01:00,679 --> 00:01:04,060
copias y siempre tomará las 2 mejores de 3 cuando haya una discrepancia.

18
00:01:07,160 --> 00:01:10,860
Pero lo que eso significa es utilizar dos tercios de su espacio para redundancia.

19
00:01:11,480 --> 00:01:13,942
E incluso entonces, a pesar de todo ese espacio cedido, 

20
00:01:13,942 --> 00:01:17,240
no hay una garantía sólida de lo que sucederá si se invierte más de un bit.

21
00:01:17,980 --> 00:01:20,846
La pregunta mucho más interesante es cómo lograr que se 

22
00:01:20,846 --> 00:01:24,020
puedan corregir los errores ocupando el menor espacio posible.

23
00:01:24,520 --> 00:01:28,167
Por ejemplo, usando el método que aprenderá en este video, 

24
00:01:28,167 --> 00:01:33,360
podría almacenar sus datos en bloques de 256 bits, donde cada bloque usa 9 bits, ¡9!

25
00:01:33,760 --> 00:01:36,961
para actuar como una especie de redundancia, y los otros 247 bits son 

26
00:01:36,961 --> 00:01:40,300
libres para transportar cualquier mensaje o dato significativo que desee.

27
00:01:40,900 --> 00:01:44,242
Y seguirá siendo así que si aquí se voltea algún bit, 

28
00:01:44,242 --> 00:01:47,770
con solo mirar este bloque y nada más, una máquina podrá 

29
00:01:47,770 --> 00:01:52,660
identificar que hubo un error y exactamente dónde estaba para saber corregirlo.

30
00:01:52,660 --> 00:01:54,620
Y, sinceramente, eso parece magia.

31
00:01:55,440 --> 00:01:58,398
Y para este esquema en particular, si se invierten dos bits, 

32
00:01:58,398 --> 00:02:01,162
la máquina al menos podrá detectar que hubo dos errores, 

33
00:02:01,162 --> 00:02:02,860
aunque no sabrá cómo solucionarlos.

34
00:02:03,520 --> 00:02:05,245
Hablaremos un poco más adelante sobre cómo esto 

35
00:02:05,245 --> 00:02:06,900
se escala para bloques con diferentes tamaños.

36
00:02:07,860 --> 00:02:10,650
Los métodos que le permiten corregir errores como este se conocen, 

37
00:02:10,650 --> 00:02:12,900
razonablemente, como códigos de corrección de errores.

38
00:02:13,660 --> 00:02:16,363
Durante la mayor parte del siglo pasado, este campo ha sido una 

39
00:02:16,363 --> 00:02:19,109
fuente realmente rica de matemáticas sorprendentemente profundas 

40
00:02:19,109 --> 00:02:21,940
que se incorporan a los dispositivos que utilizamos todos los días.

41
00:02:22,840 --> 00:02:27,217
El objetivo aquí es brindarle una comprensión profunda de uno de los primeros ejemplos, 

42
00:02:27,217 --> 00:02:28,660
conocido como código Hamming.

43
00:02:29,520 --> 00:02:32,985
Y, por cierto, la forma en que pienso sobre la estructura de este video 

44
00:02:32,985 --> 00:02:35,777
se trata menos de explicarlo lo más directamente posible, 

45
00:02:35,777 --> 00:02:39,820
y más de incitarlo a inventarlo usted mismo, con un poco de guía amable aquí y allá.

46
00:02:40,120 --> 00:02:42,796
Entonces, cuando sientas que ves hacia dónde se dirige en algún momento, 

47
00:02:42,796 --> 00:02:46,060
tómate ese momento para hacer una pausa y predice activamente cuál será el esquema antes 

48
00:02:46,060 --> 00:02:46,720
de que te lo diga.

49
00:02:47,240 --> 00:02:50,730
Además, si desea que su comprensión llegue al nivel del hardware, 

50
00:02:50,730 --> 00:02:54,062
Ben Eater ha hecho un video junto con este que le muestra cómo 

51
00:02:54,062 --> 00:02:58,240
implementar códigos Hamming en placas, lo cual es extremadamente satisfactorio.

52
00:02:59,300 --> 00:03:02,655
Debes saber que los códigos Hamming no se utilizan tan ampliamente como 

53
00:03:02,655 --> 00:03:05,357
los códigos más modernos, como el algoritmo Reed-Solomon, 

54
00:03:05,357 --> 00:03:08,759
pero hay cierta magia en el contraste entre lo imposible que parece esta 

55
00:03:08,759 --> 00:03:11,928
tarea al principio y lo absolutamente razonable que parece una vez. 

56
00:03:11,928 --> 00:03:13,000
aprendes sobre Hamming.

57
00:03:13,720 --> 00:03:17,870
El principio básico de la corrección de errores es que en un vasto espacio de 

58
00:03:17,870 --> 00:03:22,180
todos los mensajes posibles, sólo un subconjunto se considerará mensajes válidos.

59
00:03:22,800 --> 00:03:25,207
Como analogía, piense en palabras escritas correctamente 

60
00:03:25,207 --> 00:03:26,940
versus palabras escritas incorrectamente.

61
00:03:28,900 --> 00:03:33,094
Siempre que se modifica un mensaje válido, el receptor es responsable de corregir 

62
00:03:33,094 --> 00:03:37,340
lo que ve al vecino válido más cercano, como podría hacer con un error tipográfico.

63
00:03:38,220 --> 00:03:41,140
Sin embargo, idear un algoritmo concreto para categorizar 

64
00:03:41,140 --> 00:03:44,060
eficientemente mensajes como este requiere cierta astucia.

65
00:03:46,780 --> 00:03:50,486
La historia comienza en la década de 1940, cuando un joven Richard Hamming trabajaba 

66
00:03:50,486 --> 00:03:54,236
para los Laboratorios Bell, y parte de su trabajo implicaba el uso de una computadora 

67
00:03:54,236 --> 00:03:57,420
de tarjeta perforada muy grande y costosa a la que tenía acceso limitado.

68
00:03:57,800 --> 00:04:00,355
Y los programas que seguía poniendo en él seguían fallando, 

69
00:04:00,355 --> 00:04:02,400
porque de vez en cuando se malinterpretaba algo.

70
00:04:03,120 --> 00:04:05,148
Siendo la frustración el crisol de la invención, 

71
00:04:05,148 --> 00:04:08,420
se hartó tanto que inventó el primer código de corrección de errores del mundo.

72
00:04:09,060 --> 00:04:11,603
Hay muchas maneras diferentes de enmarcar los códigos de Hamming, 

73
00:04:11,603 --> 00:04:14,609
pero como primer paso vamos a repasarlos de la forma en que el propio Hamming 

74
00:04:14,609 --> 00:04:15,380
pensaba sobre ellos.

75
00:04:16,519 --> 00:04:20,940
Usemos un ejemplo que es simple, pero no demasiado simple, un bloque de 16 bits.

76
00:04:21,820 --> 00:04:24,740
Numeraremos las posiciones de estos bits del 0 al 15.

77
00:04:25,620 --> 00:04:29,145
Los datos reales que queremos almacenar solo conformarán 12 de estos bits, 

78
00:04:29,145 --> 00:04:33,000
mientras que 4 de las posiciones están reservadas como una especie de redundancia.

79
00:04:33,900 --> 00:04:37,051
La palabra redundante aquí no significa simplemente copiar; después de todo, 

80
00:04:37,051 --> 00:04:40,040
esos 4 bits no nos dan suficiente espacio para copiar los datos a ciegas.

81
00:04:40,720 --> 00:04:44,713
En cambio, tendrán que ser un tipo de redundancia mucho más matizada e inteligente, 

82
00:04:44,713 --> 00:04:47,280
que no agregue información nueva, pero sí resiliencia.

83
00:04:48,600 --> 00:04:52,521
Se podría esperar que estos 4 bits especiales vengan bien empaquetados juntos, 

84
00:04:52,521 --> 00:04:56,244
tal vez al final o algo así, pero como verás, colocarlos en posiciones que 

85
00:04:56,244 --> 00:04:59,620
son potencias de 2 permite obtener algo realmente elegante al final.

86
00:05:00,200 --> 00:05:03,540
También podría darle una pequeña pista sobre cómo se adapta esto a bloques más grandes.

87
00:05:04,900 --> 00:05:07,889
Además, técnicamente termina siendo solo 11 bits de datos, 

88
00:05:07,889 --> 00:05:11,334
encontrará que hay un leve matiz en lo que sucede en la posición 0, 

89
00:05:11,334 --> 00:05:13,260
pero no se preocupe por eso por ahora.

90
00:05:14,140 --> 00:05:17,900
Como cualquier algoritmo de corrección de errores, esto involucrará a dos jugadores, 

91
00:05:17,900 --> 00:05:21,616
un remitente que es responsable de configurar estos 4 bits especiales y un receptor 

92
00:05:21,616 --> 00:05:25,200
que es responsable de realizar algún tipo de verificación y corregir los errores.

93
00:05:25,200 --> 00:05:28,282
Por supuesto, las palabras remitente y receptor en realidad se refieren a 

94
00:05:28,282 --> 00:05:30,740
máquinas o software que realizan todas las comprobaciones, 

95
00:05:30,740 --> 00:05:32,990
y la idea de mensaje tiene un significado muy amplio, 

96
00:05:32,990 --> 00:05:34,740
para incluir cosas como el almacenamiento.

97
00:05:35,340 --> 00:05:38,483
Después de todo, almacenar datos es lo mismo que enviar un 

98
00:05:38,483 --> 00:05:41,680
mensaje del pasado al futuro en lugar de de un lugar a otro.

99
00:05:42,560 --> 00:05:46,079
Así que esa es la configuración, pero antes de que podamos profundizar necesitamos 

100
00:05:46,079 --> 00:05:49,514
hablar sobre una idea relacionada que estaba fresca en la mente de Hamming en el 

101
00:05:49,514 --> 00:05:53,119
momento de su descubrimiento, un método que permite detectar errores de un solo bit, 

102
00:05:53,119 --> 00:05:56,300
pero no corregirlos, como se conoce. en el negocio como control de paridad.

103
00:05:56,880 --> 00:06:00,350
Para una verificación de paridad, separamos solo un bit que el remitente 

104
00:06:00,350 --> 00:06:03,820
es responsable de ajustar, y el resto es libre de transportar un mensaje.

105
00:06:04,880 --> 00:06:07,940
El único trabajo de este bit especial es asegurarse de 

106
00:06:07,940 --> 00:06:11,280
que el número total de unos en el mensaje sea un número par.

107
00:06:12,080 --> 00:06:14,802
Entonces, por ejemplo, ahora mismo, el número total de unos es 7, 

108
00:06:14,802 --> 00:06:17,443
eso es impar, por lo que el remitente necesita invertir ese bit 

109
00:06:17,443 --> 00:06:19,960
especial para que sea un 1, haciendo que el recuento sea par.

110
00:06:20,800 --> 00:06:23,943
Pero si el bloque ya hubiera comenzado con un número par de unos, 

111
00:06:23,943 --> 00:06:26,420
entonces este bit especial se habría mantenido en 0.

112
00:06:27,340 --> 00:06:29,473
Esto es bastante simple, engañosamente simple, 

113
00:06:29,473 --> 00:06:32,740
pero es una forma increíblemente elegante de destilar la idea de cambio 

114
00:06:32,740 --> 00:06:36,780
en cualquier parte de un mensaje para que se refleje en un solo fragmento de información.

115
00:06:37,500 --> 00:06:41,374
Observe que si alguna parte de este mensaje se invierte, 

116
00:06:41,374 --> 00:06:46,540
ya sea de 0 a 1 o de 1 a 0, cambia el recuento total de unos de par a impar.

117
00:06:47,980 --> 00:06:52,476
Entonces, si usted es el receptor, mira este mensaje y ve un número impar de unos, 

118
00:06:52,476 --> 00:06:55,455
puede estar seguro de que se ha producido algún error, 

119
00:06:55,455 --> 00:06:57,460
aunque no tenga idea de dónde estaba.

120
00:06:58,500 --> 00:07:01,077
En la jerga, si un grupo de bits tiene un número 

121
00:07:01,077 --> 00:07:03,340
par o impar de unos se conoce como paridad.

122
00:07:04,860 --> 00:07:07,469
También puedes usar números y decir que la paridad es 0 o 1, 

123
00:07:07,469 --> 00:07:10,720
lo que suele ser más útil una vez que empiezas a hacer cálculos con la idea.

124
00:07:11,220 --> 00:07:13,483
Y este bit especial que utiliza el remitente para 

125
00:07:13,483 --> 00:07:15,520
controlar la paridad se llama bit de paridad.

126
00:07:17,560 --> 00:07:21,152
Y, de hecho, debemos ser claros: si el receptor ve una paridad impar, 

127
00:07:21,152 --> 00:07:25,360
no significa necesariamente que hubo solo un error, puede haber habido 3 errores, 

128
00:07:25,360 --> 00:07:29,260
o 5, o cualquier otro número impar, pero pueden estar seguros. que no era 0.

129
00:07:29,980 --> 00:07:33,666
Por otro lado, si hubiera habido 2 errores, o cualquier número par de errores, 

130
00:07:33,666 --> 00:07:37,820
ese recuento final de 1 seguiría siendo par, por lo que el receptor no puede tener plena 

131
00:07:37,820 --> 00:07:41,926
confianza en que un recuento par necesariamente signifique que el mensaje está libre de 

132
00:07:41,926 --> 00:07:42,300
errores.

133
00:07:42,840 --> 00:07:46,088
Podrías quejarte de que un mensaje que se estropea con cambios 

134
00:07:46,088 --> 00:07:49,080
de sólo 2 bits es bastante débil, y estarías en lo cierto.

135
00:07:49,700 --> 00:07:52,952
Sin embargo, tenga en cuenta que no existe ningún método de detección 

136
00:07:52,952 --> 00:07:56,019
o corrección de errores que pueda brindarle un 100 % de confianza 

137
00:07:56,019 --> 00:07:58,900
de que el mensaje que recibe es el que pretendía el remitente.

138
00:07:59,580 --> 00:08:02,510
Después de todo, suficiente ruido aleatorio siempre podría cambiar un 

139
00:08:02,510 --> 00:08:05,440
mensaje válido en otro mensaje válido simplemente por pura casualidad.

140
00:08:06,240 --> 00:08:10,726
En cambio, el objetivo es idear un esquema que sea sólido hasta un cierto número 

141
00:08:10,726 --> 00:08:15,380
máximo de errores, o tal vez reducir la probabilidad de un falso positivo como este.

142
00:08:16,260 --> 00:08:19,246
Los controles de paridad por sí solos son bastante débiles, 

143
00:08:19,246 --> 00:08:23,028
pero al resumir la idea de cambio en un mensaje completo hasta un solo bit, 

144
00:08:23,028 --> 00:08:27,160
lo que nos brindan es un poderoso componente básico para esquemas más sofisticados.

145
00:08:27,940 --> 00:08:32,232
Por ejemplo, mientras Hamming buscaba una manera de identificar dónde ocurrió un error, 

146
00:08:32,232 --> 00:08:35,940
no solo que sucedió, su idea clave fue que si aplica algunas comprobaciones 

147
00:08:35,940 --> 00:08:39,744
de paridad no al mensaje completo, sino a ciertos subconjuntos cuidadosamente 

148
00:08:39,744 --> 00:08:43,208
seleccionados, puede preguntar una serie más refinada de preguntas que 

149
00:08:43,208 --> 00:08:45,940
precisan la ubicación de cualquier error de un solo bit.

150
00:08:46,680 --> 00:08:49,762
La sensación general es un poco como jugar un juego de 20 preguntas, 

151
00:08:49,762 --> 00:08:53,380
haciendo preguntas de sí o no que reducen el espacio de posibilidades a la mitad.

152
00:08:54,160 --> 00:08:58,028
Por ejemplo, digamos que hacemos una verificación de paridad solo en estos 8 bits, 

153
00:08:58,028 --> 00:08:59,380
todas las posiciones impares.

154
00:09:00,100 --> 00:09:04,220
Luego, si se detecta un error, le da al receptor un poco más de información sobre 

155
00:09:04,220 --> 00:09:08,240
dónde está específicamente el error, es decir, que está en una posición extraña.

156
00:09:08,940 --> 00:09:11,476
Si no se detecta ningún error entre esos 8 bits, 

157
00:09:11,476 --> 00:09:15,152
significa que no hay ningún error o que se encuentra en algún lugar de 

158
00:09:15,152 --> 00:09:16,240
las posiciones pares.

159
00:09:17,180 --> 00:09:20,505
Se podría pensar que limitar una verificación de paridad a la mitad de los 

160
00:09:20,505 --> 00:09:24,052
bits la hace menos efectiva, pero cuando se hace junto con otras comprobaciones 

161
00:09:24,052 --> 00:09:27,200
bien elegidas, contraintuitivamente nos brinda algo mucho más poderoso.

162
00:09:29,240 --> 00:09:32,201
Para configurar realmente esa verificación de paridad, recuerde, 

163
00:09:32,201 --> 00:09:35,936
es necesario asignar algún bit especial que tenga control sobre la paridad de ese 

164
00:09:35,936 --> 00:09:36,620
grupo completo.

165
00:09:37,480 --> 00:09:39,180
Aquí elijamos la posición 1.

166
00:09:39,720 --> 00:09:43,101
Para el ejemplo mostrado, la paridad de estos 8 bits es actualmente impar, 

167
00:09:43,101 --> 00:09:46,980
por lo que el remitente es responsable de alternar ese bit de paridad, y ahora es par.

168
00:09:47,940 --> 00:09:50,680
Esta es sólo 1 de cada 4 comprobaciones de paridad que haremos.

169
00:09:50,920 --> 00:09:53,672
La segunda comprobación se encuentra entre los 8 bits de la mitad 

170
00:09:53,672 --> 00:09:56,300
derecha de la cuadrícula, al menos como la hemos dibujado aquí.

171
00:09:56,680 --> 00:09:59,720
Esta vez podríamos usar la posición 2 como bit de paridad, 

172
00:09:59,720 --> 00:10:02,349
por lo que estos 8 bits ya tienen una paridad par, 

173
00:10:02,349 --> 00:10:06,060
y el remitente puede sentirse bien dejando ese bit número 2 sin cambios.

174
00:10:07,020 --> 00:10:11,248
Luego, en el otro extremo, si el receptor verifica la paridad de este grupo y encuentra 

175
00:10:11,248 --> 00:10:15,380
que es impar, sabrá que el error está en algún lugar entre estos 8 bits de la derecha.

176
00:10:15,820 --> 00:10:18,176
De lo contrario, significa que no hay error o que 

177
00:10:18,176 --> 00:10:20,580
el error está en algún lugar de la mitad izquierda.

178
00:10:21,120 --> 00:10:23,185
O supongo que podrían haber habido dos errores, 

179
00:10:23,185 --> 00:10:26,500
pero por ahora vamos a asumir que hay como máximo un error en todo el bloque.

180
00:10:26,940 --> 00:10:28,740
Las cosas se estropean por completo por más que eso.

181
00:10:29,160 --> 00:10:31,127
Aquí, antes de ver las dos comprobaciones siguientes, 

182
00:10:31,127 --> 00:10:33,970
tómate un momento para pensar en lo que estas dos primeras nos permiten hacer 

183
00:10:33,970 --> 00:10:35,100
cuando las consideramos juntas.

184
00:10:35,800 --> 00:10:39,660
Digamos que detecta un error entre las columnas impares y entre la mitad derecha.

185
00:10:40,200 --> 00:10:43,040
Necesariamente significa que el error está en algún lugar de la última columna.

186
00:10:43,820 --> 00:10:47,506
Si no hubo ningún error en la columna impar pero hubo uno en la mitad derecha, 

187
00:10:47,506 --> 00:10:49,700
eso le indica que está en la penúltima columna.

188
00:10:50,440 --> 00:10:54,209
Del mismo modo, si hay un error en las columnas impares pero no en la mitad derecha, 

189
00:10:54,209 --> 00:10:56,560
sabrás que está en algún lugar de la segunda columna.

190
00:10:56,560 --> 00:10:59,258
Y si ninguna de esas dos comprobaciones de paridad detecta nada, 

191
00:10:59,258 --> 00:11:02,497
significa que el único lugar donde podría haber un error es en la columna más 

192
00:11:02,497 --> 00:11:03,120
a la izquierda.

193
00:11:03,340 --> 00:11:06,120
Pero también podría significar simplemente que no hay ningún error.

194
00:11:06,300 --> 00:11:08,467
Lo cual es una forma bastante elaborada de decir que 

195
00:11:08,467 --> 00:11:10,840
dos controles de paridad nos permiten precisar la columna.

196
00:11:11,480 --> 00:11:13,640
A partir de aquí, probablemente puedas adivinar lo que sigue.

197
00:11:13,800 --> 00:11:16,140
Básicamente hacemos lo mismo pero para las filas.

198
00:11:16,440 --> 00:11:19,014
Habrá una verificación de paridad en las filas impares, 

199
00:11:19,014 --> 00:11:20,900
usando la posición 4 como bit de paridad.

200
00:11:21,380 --> 00:11:24,069
Entonces, en este ejemplo, ese grupo ya tiene una paridad par, 

201
00:11:24,069 --> 00:11:25,820
por lo que el bit 4 se establecería en 0.

202
00:11:26,560 --> 00:11:29,790
Y finalmente hay una verificación de paridad en las dos filas inferiores, 

203
00:11:29,790 --> 00:11:31,580
usando la posición 8 como bit de paridad.

204
00:11:32,120 --> 00:11:34,581
En este caso, parece que el remitente necesita activar 

205
00:11:34,581 --> 00:11:36,820
el bit 8 para darle al grupo una paridad uniforme.

206
00:11:37,700 --> 00:11:40,247
Así como las dos primeras comprobaciones nos permiten fijar la columna, 

207
00:11:40,247 --> 00:11:41,840
las dos siguientes le permiten fijar la fila.

208
00:11:42,880 --> 00:11:46,375
Como ejemplo, imaginemos que durante la transmisión hay un error en, 

209
00:11:46,375 --> 00:11:47,540
digamos, la posición 3.

210
00:11:48,180 --> 00:11:50,748
Bueno, esto afecta al primer grupo de paridad y también afecta 

211
00:11:50,748 --> 00:11:53,235
al segundo grupo de paridad, por lo que el receptor sabe que 

212
00:11:53,235 --> 00:11:55,560
hay un error en algún lugar de esa columna de la derecha.

213
00:11:56,100 --> 00:12:00,540
Pero no afecta al tercer grupo ni al cuarto grupo.

214
00:12:01,240 --> 00:12:04,250
Y eso permite al receptor identificar el error hasta la primera fila, 

215
00:12:04,250 --> 00:12:07,520
lo que necesariamente significa la posición 3, para poder corregir el error.

216
00:12:08,580 --> 00:12:11,323
Quizás disfrutes tomándote un momento para convencerte de que las 

217
00:12:11,323 --> 00:12:14,149
respuestas a estas cuatro preguntas realmente siempre te permitirán 

218
00:12:14,149 --> 00:12:17,100
identificar una ubicación específica, sin importar dónde se encuentren.

219
00:12:17,720 --> 00:12:20,415
De hecho, los más astutos podrían incluso notar una 

220
00:12:20,415 --> 00:12:23,060
conexión entre estas preguntas y el conteo binario.

221
00:12:23,500 --> 00:12:25,998
Y si lo haces, déjame enfatizar nuevamente, haz una pausa, 

222
00:12:25,998 --> 00:12:28,920
intenta por ti mismo establecer la conexión antes de que la estropee.

223
00:12:30,500 --> 00:12:36,060
Si se pregunta qué sucede si un bit de paridad se ve afectado, puede intentarlo.

224
00:12:36,440 --> 00:12:40,238
Tómese un momento para pensar en cómo se localizará cualquier error entre estos 

225
00:12:40,238 --> 00:12:44,180
cuatro bits especiales como cualquier otro, con el mismo grupo de cuatro preguntas.

226
00:12:47,060 --> 00:12:50,041
Realmente no importa, ya que al final del día lo que queremos es proteger los 

227
00:12:50,041 --> 00:12:53,100
bits del mensaje, los bits de corrección de errores simplemente siguen adelante.

228
00:12:53,600 --> 00:12:56,054
Pero proteger también esos bits es algo que naturalmente 

229
00:12:56,054 --> 00:12:57,820
queda fuera del esquema como subproducto.

230
00:12:59,200 --> 00:13:01,760
También puede disfrutar anticipando cómo evoluciona esto.

231
00:13:02,300 --> 00:13:05,302
Si usamos un bloque de tamaño 256 bits, por ejemplo, 

232
00:13:05,302 --> 00:13:08,701
para determinar una ubicación, solo necesita ocho preguntas 

233
00:13:08,701 --> 00:13:12,780
de sí o no para realizar una búsqueda binaria hasta un lugar específico.

234
00:13:15,640 --> 00:13:18,093
Y recuerde, cada pregunta requiere ceder solo un bit 

235
00:13:18,093 --> 00:13:20,500
para establecer la verificación de paridad adecuada.

236
00:13:23,160 --> 00:13:25,037
Es posible que algunos de ustedes ya lo hayan visto, 

237
00:13:25,037 --> 00:13:28,084
pero hablaremos más adelante sobre la forma sistemática de encontrar cuáles son estas 

238
00:13:28,084 --> 00:13:29,360
preguntas en solo uno o dos minutos.

239
00:13:29,880 --> 00:13:31,604
Ojalá este boceto sea suficiente para apreciar la 

240
00:13:31,604 --> 00:13:33,260
eficiencia de lo que aquí estamos desarrollando.

241
00:13:33,260 --> 00:13:36,992
Lo primero, excepto esos ocho bits de paridad resaltados, 

242
00:13:36,992 --> 00:13:41,820
puede ser lo que quieras, transportando el mensaje o los datos que quieras.

243
00:13:41,820 --> 00:13:44,594
Los 8 bits son redundantes en el sentido de que están completamente 

244
00:13:44,594 --> 00:13:47,327
determinados por el resto del mensaje, pero es de una manera mucho 

245
00:13:47,327 --> 00:13:50,020
más inteligente que simplemente copiar el mensaje en su totalidad.

246
00:13:53,600 --> 00:13:55,898
Y aún así, por tan poco dinero entregado, podrías 

247
00:13:55,898 --> 00:13:58,380
identificar y corregir cualquier error de un solo bit.

248
00:13:59,200 --> 00:14:00,400
Bueno, casi.

249
00:14:00,960 --> 00:14:05,105
Bien, entonces el único problema aquí es que si ninguna de las cuatro comprobaciones 

250
00:14:05,105 --> 00:14:08,861
de paridad detecta un error, lo que significa que los subconjuntos de 8 bits 

251
00:14:08,861 --> 00:14:13,153
especialmente seleccionados tienen paridades pares, tal como lo pretendía el remitente, 

252
00:14:13,153 --> 00:14:16,860
entonces significa que no hubo ningún error. , o nos reduce a la posición 0.

253
00:14:17,740 --> 00:14:21,344
Verá, con cuatro preguntas de sí o no, tenemos 16 resultados posibles 

254
00:14:21,344 --> 00:14:24,279
para nuestras comprobaciones de paridad y, al principio, 

255
00:14:24,279 --> 00:14:27,883
eso parece perfecto para identificar 1 de 16 posiciones en el bloque, 

256
00:14:27,883 --> 00:14:31,900
pero también debe comunicar un resultado número 17, el de no error. condición.

257
00:14:33,020 --> 00:14:37,300
La solución aquí es bastante simple, simplemente olvídate por completo del bit 0.

258
00:14:37,840 --> 00:14:40,650
Entonces, cuando hacemos nuestras cuatro comprobaciones de paridad y vemos 

259
00:14:40,650 --> 00:14:43,460
que todas están iguales, significa inequívocamente que no hay ningún error.

260
00:14:44,240 --> 00:14:47,387
Lo que eso significa es que en lugar de trabajar con un bloque de 16 bits, 

261
00:14:47,387 --> 00:14:50,366
trabajamos con un bloque de 15 bits, donde 11 de los bits están libres 

262
00:14:50,366 --> 00:14:53,220
para transportar un mensaje y 4 de ellos están ahí para redundancia.

263
00:14:53,780 --> 00:15:00,200
Y con eso, ahora tenemos lo que la gente en el negocio llamaría un código Hamming 15-11.

264
00:15:00,460 --> 00:15:03,804
Dicho esto, es bueno tener un tamaño de bloque que sea una potencia limpia de 2, 

265
00:15:03,804 --> 00:15:06,364
y hay una forma inteligente de mantener ese bit 0 y hacer que 

266
00:15:06,364 --> 00:15:08,140
haga un poco de trabajo extra por nosotros.

267
00:15:08,700 --> 00:15:11,664
Si lo usamos como bit de paridad en todo el bloque, 

268
00:15:11,664 --> 00:15:15,540
nos permite detectar, aunque no podamos corregir, errores de 2 bits.

269
00:15:16,160 --> 00:15:16,820
Así es como funciona.

270
00:15:17,180 --> 00:15:20,350
Después de configurar esos cuatro bits especiales de corrección de errores, 

271
00:15:20,350 --> 00:15:23,146
configuramos el 0 para que la paridad del bloque completo sea par, 

272
00:15:23,146 --> 00:15:24,940
como en una verificación de paridad normal.

273
00:15:25,700 --> 00:15:28,292
Ahora, si hay un error de un solo bit, entonces la paridad del 

274
00:15:28,292 --> 00:15:30,843
bloque completo cambia a impar, pero lo detectaremos de todos 

275
00:15:30,843 --> 00:15:33,600
modos gracias a las cuatro comprobaciones de corrección de errores.

276
00:15:34,160 --> 00:15:38,417
Sin embargo, si hay dos errores, entonces la paridad general volverá a ser uniforme, 

277
00:15:38,417 --> 00:15:42,074
pero el receptor aún verá que ha habido al menos algún error debido a lo 

278
00:15:42,074 --> 00:15:45,180
que está sucediendo con esas cuatro comprobaciones de paridad.

279
00:15:45,180 --> 00:15:47,670
Entonces, si notan una paridad uniforme en general, 

280
00:15:47,670 --> 00:15:50,736
pero sucede algo distinto de cero con las otras comprobaciones, 

281
00:15:50,736 --> 00:15:52,700
les indica que hubo al menos dos errores.

282
00:15:53,520 --> 00:15:54,000
¿No es eso inteligente?

283
00:15:54,300 --> 00:15:56,872
Aunque no podemos corregir esos errores de 2 bits, 

284
00:15:56,872 --> 00:16:01,260
simplemente volviendo a funcionar ese pequeño y molesto bit 0, nos permite detectarlos.

285
00:16:02,260 --> 00:16:05,220
Esto es bastante estándar, se conoce como código Hamming extendido.

286
00:16:06,540 --> 00:16:09,665
Técnicamente hablando, ahora tienes una descripción completa de lo que 

287
00:16:09,665 --> 00:16:12,880
hace un código Hamming, al menos para el ejemplo de un bloque de 16 bits.

288
00:16:12,880 --> 00:16:17,150
Pero creo que le resultará más satisfactorio comprobar su comprensión y solidificar 

289
00:16:17,150 --> 00:16:21,320
todo hasta este punto haciendo usted mismo un ejemplo completo de principio a fin.

290
00:16:22,080 --> 00:16:24,300
Lo revisaré contigo para que puedas comprobarlo tú mismo.

291
00:16:25,120 --> 00:16:28,127
Para configurar un mensaje, ya sea un mensaje literal que estás 

292
00:16:28,127 --> 00:16:32,169
traduciendo en el espacio o algunos datos que deseas almacenar a lo largo del tiempo, 

293
00:16:32,169 --> 00:16:34,660
el primer paso es dividirlo en fragmentos de 11 bits.

294
00:16:35,580 --> 00:16:39,760
Cada fragmento se empaquetará en un bloque de 16 bits resistente a errores.

295
00:16:39,760 --> 00:16:43,220
Así que tomemos este como ejemplo y resolvámoslo.

296
00:16:43,740 --> 00:16:44,740
¡Adelante, hazlo de verdad!

297
00:16:44,740 --> 00:16:47,020
Hagamos una pausa e intentemos armar este bloque.

298
00:16:52,720 --> 00:16:53,680
Bien, ¿estás listo?

299
00:16:54,240 --> 00:16:57,077
Recuerde, la posición 0 junto con las otras potencias de 2 están 

300
00:16:57,077 --> 00:16:59,303
reservadas para la tarea de corrección de errores, 

301
00:16:59,303 --> 00:17:02,927
por lo que comienza colocando los bits del mensaje en todos los lugares restantes, 

302
00:17:02,927 --> 00:17:03,320
en orden.

303
00:17:05,339 --> 00:17:08,513
Necesita que este grupo tenga una paridad uniforme, lo cual ya la tiene, 

304
00:17:08,513 --> 00:17:12,339
por lo que debería haber configurado ese bit de paridad en la posición 1 para que sea 0.

305
00:17:13,020 --> 00:17:15,252
El siguiente grupo comienza con una paridad impar, 

306
00:17:15,252 --> 00:17:17,880
por lo que debería haber establecido su bit de paridad en 1.

307
00:17:19,160 --> 00:17:21,283
El grupo posterior comienza con una paridad impar, 

308
00:17:21,283 --> 00:17:24,240
por lo que nuevamente debería haber establecido su bit de paridad en 1.

309
00:17:24,780 --> 00:17:26,909
Y el grupo final también tiene una paridad impar, 

310
00:17:26,909 --> 00:17:30,060
lo que significa que configuramos ese bit en la posición 8 para que sea 1.

311
00:17:31,300 --> 00:17:35,420
Y luego, como paso final, el bloque completo ahora tiene una paridad par, 

312
00:17:35,420 --> 00:17:40,320
lo que significa que puede establecer ese bit número 0, el bit de paridad general, en 0.

313
00:17:41,340 --> 00:17:44,764
Entonces, cuando este bloque sea expulsado, la paridad de los cuatro 

314
00:17:44,764 --> 00:17:48,140
subconjuntos especiales y el bloque en su conjunto serán pares, o 0.

315
00:17:48,820 --> 00:17:52,180
Como segunda parte del ejercicio, hagamos que usted desempeñe el papel de receptor.

316
00:17:53,480 --> 00:17:56,521
Por supuesto, eso significaría que aún no saben cuál es este mensaje, 

317
00:17:56,521 --> 00:17:59,780
tal vez algunos de ustedes lo memorizaron, pero supongamos que no lo saben.

318
00:18:00,020 --> 00:18:03,947
Lo que voy a hacer es cambiar 0, 1 o 2 de los bits de ese 

319
00:18:03,947 --> 00:18:07,740
bloque y luego pedirte que averigües qué es lo que hice.

320
00:18:08,260 --> 00:18:10,810
Así que nuevamente, haz una pausa e intenta resolverlo.

321
00:18:18,790 --> 00:18:23,215
Bien, ahora usted, como receptor, verifica el primer grupo de paridad y puede ver 

322
00:18:23,215 --> 00:18:27,910
que es par, por lo que cualquier error que exista tendría que estar en una columna par.

323
00:18:29,690 --> 00:18:32,449
La siguiente verificación nos da un número impar, 

324
00:18:32,449 --> 00:18:37,030
lo que nos indica que hay al menos un error y nos limita a esta columna específica.

325
00:18:38,550 --> 00:18:41,790
El tercer control es parejo, lo que reduce aún más las posibilidades.

326
00:18:42,650 --> 00:18:46,190
Y la última verificación de paridad es impar, lo que nos dice que hay un error en algún 

327
00:18:46,190 --> 00:18:49,650
lugar en la parte inferior, que ahora podemos ver debe estar en la posición número 10.

328
00:18:51,490 --> 00:18:54,143
Es más, la paridad de todo el bloque es impar, 

329
00:18:54,143 --> 00:18:57,530
lo que nos da confianza de que hubo un lanzamiento y no dos.

330
00:18:58,070 --> 00:18:59,970
Si son tres o más, todas las apuestas están canceladas.

331
00:19:01,310 --> 00:19:05,822
Después de corregir el bit número 10, extraer los 11 bits que no se utilizaron 

332
00:19:05,822 --> 00:19:09,820
para la corrección nos da el segmento relevante del mensaje original, 

333
00:19:09,820 --> 00:19:14,390
que si rebobinamos y comparamos es exactamente con lo que comenzamos el ejemplo.

334
00:19:15,710 --> 00:19:17,797
Y ahora que sabes cómo hacer todo esto a mano, 

335
00:19:17,797 --> 00:19:21,571
me gustaría mostrarte cómo puedes llevar a cabo la parte central de toda esta lógica 

336
00:19:21,571 --> 00:19:23,170
con una sola línea de código Python.

337
00:19:23,870 --> 00:19:27,764
Verá, lo que aún no le he dicho es cuán elegante es realmente este algoritmo, 

338
00:19:27,764 --> 00:19:31,310
cuán simple es hacer que una máquina apunte a la posición de un error, 

339
00:19:31,310 --> 00:19:34,405
cómo escalarlo sistemáticamente y cómo podemos enmarcar todo. 

340
00:19:34,405 --> 00:19:38,750
esto como una sola operación en lugar de múltiples comprobaciones de paridad separadas.

341
00:19:39,430 --> 00:19:41,310
Para ver a qué me refiero, únete a mí en la parte 2.

