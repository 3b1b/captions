1
00:00:00,000 --> 00:00:03,120
Tôi cho rằng mọi người ở đây đều đến từ phần 1.

2
00:00:03,120 --> 00:00:06,920
Chúng ta đang nói về mã Hamming, một cách để tạo ra một khối dữ liệu trong đó

3
00:00:06,920 --> 00:00:11,640
hầu hết các bit mang một thông điệp có ý nghĩa, trong khi một số bit khác hoạt

4
00:00:11,640 --> 00:00:15,800
động như một loại dự phòng, theo cách mà nếu bất kỳ bit nào bị đảo lộn,

5
00:00:15,800 --> 00:00:20,560
thì đó sẽ là một thông báo. bit hoặc bit dự phòng, bất kỳ thứ gì trong khối

6
00:00:20,560 --> 00:00:21,920
này, bộ thu sẽ có thể xác định rằng đã xảy ra lỗi và cách khắc phục.

7
00:00:21,920 --> 00:00:25,900
Ý tưởng cơ bản được trình bày ở đó là cách sử dụng nhiều biện pháp kiểm

8
00:00:25,900 --> 00:00:29,800
tra chẵn lẻ để tìm kiếm nhị phân theo cách của bạn để tìm ra lỗi.

9
00:00:29,800 --> 00:00:33,920
Trong video đó, mục tiêu là làm cho mã Hamming có cảm

10
00:00:33,920 --> 00:00:35,420
giác thực tế và dễ khám phá lại nhất có thể.

11
00:00:35,420 --> 00:00:40,040
Nhưng khi bạn bắt đầu nghĩ đến việc thực sự triển khai điều này, dù bằng phần mềm hay phần cứng, thì

12
00:00:40,040 --> 00:00:44,120
việc đóng khung đó thực sự có thể đánh giá thấp mức độ trang nhã thực sự của những mã này.

13
00:00:44,120 --> 00:00:47,620
Bạn có thể nghĩ rằng mình cần phải viết một thuật toán theo dõi tất cả

14
00:00:47,620 --> 00:00:52,320
các vị trí lỗi có thể xảy ra và cắt nhóm đó làm đôi sau

15
00:00:52,320 --> 00:00:54,160
mỗi lần kiểm tra, nhưng thực tế thì cách này đơn giản hơn thế nhiều.

16
00:00:54,160 --> 00:00:58,720
Nếu bạn đọc to câu trả lời cho bốn phép kiểm tra tính chẵn lẻ mà chúng tôi đã thực hiện trong video trước, tất cả đều

17
00:00:58,760 --> 00:01:04,800
là 1 và 0 thay vì có và không, thì nó sẽ chỉ ra vị trí của lỗi ở dạng nhị phân theo đúng nghĩa đen.

18
00:01:04,800 --> 00:01:10,160
Ví dụ: số 7 trong hệ nhị phân trông giống như 0111,

19
00:01:10,160 --> 00:01:12,640
về cơ bản nó có nghĩa là 4 cộng 2 cộng 1.

20
00:01:12,640 --> 00:01:17,960
Và hãy để ý xem vị trí số 7 nằm ở đâu, nó ảnh hưởng đến nhóm đầu tiên trong số các

21
00:01:17,960 --> 00:01:22,280
nhóm ngang bằng của chúng ta, nhóm thứ hai và nhóm thứ ba, nhưng không ảnh hưởng đến nhóm cuối cùng.

22
00:01:22,280 --> 00:01:26,560
Vì vậy, việc đọc kết quả của bốn lần kiểm tra đó từ

23
00:01:26,560 --> 00:01:28,000
dưới lên trên thực sự sẽ chỉ ra vị trí của lỗi.

24
00:01:28,520 --> 00:01:32,240
Không có gì đặc biệt về ví dụ 7, nhìn chung nó hoạt động tốt và điều này làm

25
00:01:32,240 --> 00:01:37,440
cho logic triển khai toàn bộ sơ đồ trong phần cứng trở nên đơn giản đến kinh ngạc.

26
00:01:37,440 --> 00:01:43,380
Bây giờ nếu bạn muốn biết tại sao điều kỳ diệu này lại xảy ra, hãy lấy 16

27
00:01:43,380 --> 00:01:48,480
nhãn chỉ mục này cho các vị trí của chúng ta, nhưng thay vì viết chúng ở

28
00:01:48,480 --> 00:01:50,720
cơ số 10, hãy viết tất cả chúng ở dạng nhị phân, chạy từ 0000 đến 1111.

29
00:01:50,720 --> 00:01:55,880
Khi chúng ta đặt các nhãn nhị phân này trở lại hộp của chúng, hãy

30
00:01:56,080 --> 00:01:58,440
để tôi nhấn mạnh rằng chúng khác biệt với dữ liệu thực sự được gửi.

31
00:01:58,440 --> 00:02:02,200
Chúng không gì khác hơn là một nhãn hiệu khái niệm để

32
00:02:02,200 --> 00:02:04,200
giúp bạn và tôi hiểu bốn nhóm ngang bằng đến từ đâu.

33
00:02:04,200 --> 00:02:08,840
Sự sang trọng của việc mọi thứ chúng ta đang xem xét được mô tả ở dạng nhị phân có thể bị

34
00:02:08,840 --> 00:02:13,160
giảm bớt do sự nhầm lẫn khi mọi thứ chúng ta đang xem xét được mô tả ở dạng nhị phân.

35
00:02:13,160 --> 00:02:15,040
Tuy nhiên, nó đáng giá.

36
00:02:15,040 --> 00:02:20,740
Hãy tập trung sự chú ý của bạn vào phần cuối cùng của tất cả các

37
00:02:20,740 --> 00:02:24,280
nhãn này, sau đó đánh dấu các vị trí mà bit cuối cùng đó là 1.

38
00:02:24,280 --> 00:02:28,800
Những gì chúng tôi nhận được là nhóm đầu tiên trong số bốn nhóm chẵn lẻ, có

39
00:02:28,800 --> 00:02:34,480
nghĩa là bạn có thể hiểu lần kiểm tra đầu tiên đó là hỏi, này, nếu

40
00:02:34,480 --> 00:02:36,680
có lỗi, bit cuối cùng ở vị trí của lỗi đó có phải là 1 không?

41
00:02:36,680 --> 00:02:42,600
Tương tự, nếu bạn tập trung vào bit thứ hai đến bit cuối cùng và đánh dấu tất cả các

42
00:02:42,600 --> 00:02:47,040
vị trí có số 1, bạn sẽ có được nhóm chẵn lẻ thứ hai từ sơ đồ của chúng tôi.

43
00:02:47,040 --> 00:02:51,960
Nói cách khác, lần kiểm tra thứ hai đó đang hỏi, này, tôi lại nói, nếu có

44
00:02:51,960 --> 00:02:56,160
lỗi, bit thứ hai đến bit cuối cùng của vị trí đó có phải là 1 không?

45
00:02:56,160 --> 00:02:57,160
Và như thế.

46
00:02:57,160 --> 00:03:03,320
Kiểm tra tính chẵn lẻ thứ ba bao gồm mọi vị trí có bit thứ ba đến bit cuối cùng được bật và

47
00:03:03,320 --> 00:03:10,120
vị trí cuối cùng bao gồm tám vị trí cuối cùng, những vị trí có bit thứ tự cao nhất là 1.

48
00:03:10,120 --> 00:03:15,680
Mọi điều chúng ta đã làm trước đó cũng giống như việc trả lời bốn câu hỏi này,

49
00:03:15,680 --> 00:03:18,800
những câu hỏi này cũng giống như việc đánh vần một vị trí trong hệ nhị phân.

50
00:03:19,800 --> 00:03:22,080
Tôi hy vọng điều này làm cho hai điều rõ ràng hơn.

51
00:03:22,080 --> 00:03:27,140
Đầu tiên là làm thế nào để khái quát hóa một cách có hệ thống các kích thước khối có lũy thừa lớn hơn bằng 2.

52
00:03:27,140 --> 00:03:33,180
Nếu cần nhiều bit hơn để mô tả từng vị trí, chẳng hạn như sáu bit để mô tả 64 điểm,

53
00:03:33,180 --> 00:03:38,640
thì mỗi bit đó sẽ cung cấp cho bạn một trong các nhóm chẵn lẻ mà chúng ta cần kiểm tra.

54
00:03:38,640 --> 00:03:42,060
Những ai đã xem trò chơi xếp hình trên bàn cờ mà tôi

55
00:03:42,060 --> 00:03:43,400
làm với Matt Parker có thể thấy điều này cực kỳ quen thuộc.

56
00:03:43,400 --> 00:03:48,200
Đó là logic cốt lõi tương tự, nhưng giải quyết một vấn

57
00:03:48,200 --> 00:03:49,880
đề khác và được áp dụng cho bàn cờ 64 ô vuông.

58
00:03:49,880 --> 00:03:54,000
Điều thứ hai tôi hy vọng điều này làm rõ là tại sao các bit chẵn lẻ của chúng

59
00:03:54,000 --> 00:03:58,320
ta lại nằm ở các vị trí lũy thừa của 2, ví dụ 1, 2, 4 và 8.

60
00:03:58,320 --> 00:04:03,640
Đây là những vị trí mà biểu diễn nhị phân chỉ được bật một bit.

61
00:04:03,640 --> 00:04:09,000
Điều đó có nghĩa là mỗi bit chẵn lẻ đó nằm

62
00:04:09,000 --> 00:04:12,640
bên trong một và chỉ một trong bốn nhóm chẵn lẻ.

63
00:04:12,640 --> 00:04:16,840
Bạn cũng có thể thấy điều này trong các ví dụ lớn hơn, trong đó dù bạn có

64
00:04:16,840 --> 00:04:25,920
lớn đến đâu, mỗi bit chẵn lẻ chỉ chạm vào một trong các nhóm một cách thuận tiện.

65
00:04:25,920 --> 00:04:29,680
Một khi bạn hiểu rằng việc kiểm tra tính chẵn lẻ mà chúng ta đã dành rất nhiều

66
00:04:29,680 --> 00:04:34,320
thời gian vào đó không gì khác hơn là một cách thông minh để đánh vần vị trí

67
00:04:34,320 --> 00:04:37,880
của một lỗi trong hệ nhị phân, khi đó chúng ta có thể rút ra mối liên hệ

68
00:04:37,880 --> 00:04:42,160
bằng một cách nghĩ khác về hamming. mã, một mã được cho là đơn giản và thanh lịch

69
00:04:42,160 --> 00:04:43,880
hơn rất nhiều và về cơ bản có thể được viết ra chỉ bằng một dòng mã.

70
00:04:43,920 --> 00:04:46,200
Nó dựa trên hàm XOR.

71
00:04:46,200 --> 00:04:50,960
XOR, dành cho những ai chưa biết, là viết tắt của độc quyền hoặc.

72
00:04:50,960 --> 00:04:55,440
Khi bạn lấy XOR của hai bit, nó sẽ trả về 1 nếu một trong hai

73
00:04:55,440 --> 00:05:00,200
bit đó được bật, nhưng không trả về nếu cả hai bit được bật hoặc tắt.

74
00:05:00,200 --> 00:05:03,760
Nói cách khác, đó là tính chẵn lẻ của hai bit này.

75
00:05:03,760 --> 00:05:07,840
Là một người làm toán, tôi thích coi nó như phép cộng mod 2 hơn.

76
00:05:07,840 --> 00:05:12,000
Chúng ta cũng thường nói về XOR của hai chuỗi bit khác

77
00:05:12,040 --> 00:05:14,040
nhau, về cơ bản thực hiện việc này theo từng thành phần.

78
00:05:14,040 --> 00:05:16,280
Nó giống như sự bổ sung, nhưng bạn không bao giờ mang theo.

79
00:05:16,280 --> 00:05:21,240
Một lần nữa, những người thiên về toán học hơn có thể thích

80
00:05:21,240 --> 00:05:23,520
coi điều này như việc cộng hai vectơ và rút gọn mod 2.

81
00:05:23,520 --> 00:05:28,720
Nếu bạn mở một số Python ngay bây giờ và áp dụng thao tác dấu mũ giữa hai số nguyên, thì đây

82
00:05:28,720 --> 00:05:35,400
chính là những gì nó đang làm nhưng đối với các biểu diễn bit của các số đó ở phần bên dưới.

83
00:05:35,400 --> 00:05:40,920
Điểm mấu chốt đối với bạn và tôi là việc lấy XOR của nhiều chuỗi bit

84
00:05:40,960 --> 00:05:45,960
khác nhau thực sự là một cách để tính toán các bản nhại của một loạt

85
00:05:45,960 --> 00:05:51,320
các nhóm riêng biệt, giống như với các cột, tất cả trong một cú trượt.

86
00:05:51,320 --> 00:05:54,520
Điều này mang lại cho chúng ta một cách khá thú vị để suy nghĩ về nhiều lần kiểm tra tính chẵn

87
00:05:54,520 --> 00:05:59,680
lẻ từ thuật toán mã Hamming của chúng ta khi tất cả được gói gọn lại thành một thao tác duy nhất.

88
00:05:59,680 --> 00:06:02,800
Mặc dù thoạt nhìn nó trông rất khác.

89
00:06:02,800 --> 00:06:08,360
Cụ thể là viết ra 16 vị trí trong hệ nhị phân, giống như chúng ta đã

90
00:06:08,640 --> 00:06:14,800
làm trước đây và bây giờ đánh dấu các vị trí mà bit thông báo được bật

91
00:06:14,800 --> 00:06:19,400
thành 1, sau đó thu thập các vị trí này thành một cột lớn và lấy XOR.

92
00:06:19,400 --> 00:06:23,480
Bạn có thể đoán rằng kết quả là 4 bit nằm ở dưới cùng giống với

93
00:06:23,480 --> 00:06:27,480
4 kiểm tra tính chẵn lẻ mà chúng ta đã biết và yêu thích, nhưng hãy

94
00:06:27,480 --> 00:06:32,720
dành chút thời gian để thực sự suy nghĩ chính xác lý do tại sao.

95
00:06:32,720 --> 00:06:37,880
Ví dụ: cột cuối cùng này đang đếm tất cả các vị trí có bit cuối cùng là

96
00:06:38,400 --> 00:06:42,400
1, nhưng chúng tôi chỉ giới hạn ở các vị trí được đánh dấu, do đó, nó đếm

97
00:06:42,400 --> 00:06:45,960
một cách hiệu quả số lượng vị trí được đánh dấu đến từ nhóm chẵn lẻ đầu tiên.

98
00:06:45,960 --> 00:06:48,520
Điều đó có ý nghĩa?

99
00:06:48,520 --> 00:06:53,600
Tương tự, cột tiếp theo đếm số lượng vị trí trong nhóm

100
00:06:53,600 --> 00:06:59,640
chẵn lẻ thứ hai, các vị trí có bit thứ hai đến

101
00:06:59,640 --> 00:07:00,640
bit cuối cùng là 1 và cũng được đánh dấu, v.v.

102
00:07:00,640 --> 00:07:06,640
Đó thực sự chỉ là một sự thay đổi nhỏ trong quan điểm về điều tương tự mà chúng tôi đang làm.

103
00:07:07,640 --> 00:07:10,000
Và vì vậy bạn biết nó sẽ đi đâu từ đây.

104
00:07:10,000 --> 00:07:14,400
Người gửi chịu trách nhiệm chuyển đổi một số bit

105
00:07:14,400 --> 00:07:19,640
chẵn lẻ đặc biệt để đảm bảo tổng bằng 0000.

106
00:07:19,640 --> 00:07:23,600
Bây giờ khi chúng ta đã có nó như thế này, điều này mang lại cho chúng ta một cách thực sự hay để

107
00:07:23,600 --> 00:07:28,720
suy nghĩ về lý do tại sao bốn bit kết quả ở phía dưới này trực tiếp đánh vần vị trí của một lỗi.

108
00:07:28,720 --> 00:07:32,680
Giả sử một số bit trong khối này được chuyển từ 0 sang 1.

109
00:07:32,720 --> 00:07:37,320
Điều đó có nghĩa là vị trí của bit đó hiện sẽ được

110
00:07:37,320 --> 00:07:42,960
bao gồm trong tổng XOR, làm thay đổi tổng từ 0 thành thay

111
00:07:42,960 --> 00:07:44,800
vào đó là giá trị mới được đưa vào, vị trí của lỗi.

112
00:07:44,800 --> 00:07:48,800
Ít rõ ràng hơn một chút, điều tương tự cũng

113
00:07:48,800 --> 00:07:49,800
đúng nếu có lỗi thay đổi từ 1 thành 0.

114
00:07:49,800 --> 00:07:54,720
Bạn thấy đấy, nếu bạn cộng một chuỗi bit lại với nhau hai lần, thì cũng giống như không

115
00:07:54,720 --> 00:07:59,000
có nó ở đó, về cơ bản là vì trong thế giới này 1 cộng 1 bằng 0.

116
00:07:59,000 --> 00:08:03,720
Vì vậy, việc thêm một bản sao của vị trí này vào tổng số

117
00:08:03,720 --> 00:08:05,400
tiền có tác dụng tương tự như việc chúng ta di chuyển nó.

118
00:08:05,400 --> 00:08:10,080
Và một lần nữa, hiệu ứng đó là kết quả tổng thể

119
00:08:10,080 --> 00:08:13,480
ở phía dưới ở đây cho biết vị trí của lỗi.

120
00:08:13,480 --> 00:08:17,720
Để minh họa mức độ tinh tế của điều này, hãy để tôi chỉ ra một dòng mã Python mà

121
00:08:17,720 --> 00:08:22,120
tôi đã tham chiếu trước đó, nó sẽ nắm bắt gần như toàn bộ logic ở đầu máy thu.

122
00:08:22,120 --> 00:08:27,160
Chúng ta sẽ bắt đầu bằng cách tạo một mảng ngẫu nhiên gồm 16 số 1 và 0

123
00:08:27,160 --> 00:08:31,160
để mô phỏng khối dữ liệu và tôi sẽ đặt tên cho nó là các bit, nhưng

124
00:08:31,160 --> 00:08:36,160
tất nhiên trong thực tế đây sẽ là thứ chúng tôi nhận được từ người gửi và

125
00:08:36,160 --> 00:08:38,600
thay vì ngẫu nhiên nó sẽ mang 11 bit dữ liệu cùng với 5 bit chẵn lẻ.

126
00:08:38,600 --> 00:08:43,160
Nếu tôi gọi hàm enumerateBits, nhiệm vụ của nó là ghép từng bit đó lại với

127
00:08:43,160 --> 00:08:48,240
nhau bằng một chỉ mục tương ứng, trong trường hợp này là từ 0 đến 15.

128
00:08:48,240 --> 00:08:53,200
Vì vậy, nếu sau đó chúng ta tạo một danh sách lặp lại tất cả các cặp này, các

129
00:08:53,200 --> 00:08:59,160
cặp trông giống i và sau đó chúng ta chỉ lấy ra giá trị i, chỉ số, thì điều

130
00:08:59,160 --> 00:09:01,920
đó không thú vị lắm, chúng ta chỉ lấy lại các chỉ số đó từ 0 đến 15 .

131
00:09:01,920 --> 00:09:07,520
Nhưng nếu chúng ta thêm vào điều kiện chỉ thực hiện điều này nếu bit, nghĩa là nếu bit đó

132
00:09:07,520 --> 00:09:13,400
là 1 chứ không phải 0, thì nó chỉ lấy ra các vị trí mà bit tương ứng được bật.

133
00:09:13,400 --> 00:09:20,320
Trong trường hợp này, có vẻ như các vị trí đó là 0, 4, 6, 9, v.v.

134
00:09:20,720 --> 00:09:24,640
Điều chúng tôi muốn là tập hợp tất cả các vị trí đó lại với nhau,

135
00:09:24,640 --> 00:09:29,960
vị trí của các bit được bật và sau đó XOR chúng lại với nhau.

136
00:09:29,960 --> 00:09:33,960
Để thực hiện điều này bằng Python, trước tiên tôi hãy nhập một vài hàm hữu ích.

137
00:09:33,960 --> 00:09:39,140
Bằng cách đó, chúng ta có thể gọi hàm less() trong danh sách này và sử dụng hàm XOR để giảm nó.

138
00:09:39,140 --> 00:09:44,840
Về cơ bản, điều này sẽ xuyên suốt danh sách, mang theo XOR trong suốt quá trình.

139
00:09:44,840 --> 00:09:48,760
Nếu muốn, bạn có thể viết rõ ràng hàm XOR đó

140
00:09:48,800 --> 00:09:52,200
mà không cần phải nhập nó từ bất kỳ đâu.

141
00:09:52,200 --> 00:09:56,880
Vì vậy, hiện tại, có vẻ như nếu chúng ta thực hiện điều này trên khối

142
00:09:56,880 --> 00:10:02,080
16 bit ngẫu nhiên, nó sẽ trả về 9, có biểu diễn nhị phân 1001.

143
00:10:02,080 --> 00:10:05,960
Chúng tôi sẽ không làm điều đó ở đây, nhưng bạn có thể viết một hàm trong đó người gửi

144
00:10:05,960 --> 00:10:11,560
sử dụng biểu diễn nhị phân đó để đặt bốn bit chẵn lẻ nếu cần, cuối cùng đưa khối này

145
00:10:11,560 --> 00:10:16,200
về trạng thái chạy dòng mã này trên danh sách đầy đủ các bit trả về một số 0.

146
00:10:17,200 --> 00:10:20,200
Đây sẽ được coi là một khối được chuẩn bị tốt.

147
00:10:20,200 --> 00:10:24,640
Điều thú vị là nếu chúng ta chuyển đổi bất kỳ bit nào trong danh sách này, mô phỏng một

148
00:10:24,640 --> 00:10:30,600
lỗi ngẫu nhiên do nhiễu, thì nếu bạn chạy cùng dòng mã này, nó sẽ in ra lỗi đó.

149
00:10:30,600 --> 00:10:31,920
Không phải là gọn gàng sao?

150
00:10:31,920 --> 00:10:37,200
Bạn có thể lấy khối này bất ngờ, chạy dòng đơn này trên đó và nó

151
00:10:37,200 --> 00:10:42,920
sẽ tự động đưa ra vị trí của lỗi hoặc số 0 nếu không có.

152
00:10:42,920 --> 00:10:45,520
Và cũng không có gì đặc biệt về size 16 ở đây.

153
00:10:45,520 --> 00:10:52,280
Dòng mã tương tự sẽ hoạt động nếu bạn có một danh sách 256 bit.

154
00:10:52,280 --> 00:10:56,280
Không cần phải nói, có nhiều mã hơn để viết ở đây, chẳng hạn như thực hiện kiểm

155
00:10:56,280 --> 00:11:01,440
tra tính chẵn lẻ meta để phát hiện lỗi 2 bit, nhưng ý tưởng là hầu như tất

156
00:11:01,440 --> 00:11:05,080
cả logic cốt lõi từ sơ đồ của chúng tôi đều giảm xuống một XOR duy nhất.

157
00:11:05,080 --> 00:11:10,600
Bây giờ, tùy thuộc vào sự thoải mái của bạn với nhị phân, XOR và phần mềm nói chung,

158
00:11:10,600 --> 00:11:15,880
bạn có thể thấy quan điểm này hơi khó hiểu hoặc thanh lịch và đơn giản hơn nhiều đến

159
00:11:15,880 --> 00:11:19,320
mức bạn đang tự hỏi tại sao chúng ta không bắt đầu với nó ngay từ đầu. -đi.

160
00:11:19,320 --> 00:11:22,880
Nói một cách lỏng lẻo, phối cảnh kiểm tra tính chẵn lẻ sẽ dễ nghĩ đến hơn

161
00:11:22,880 --> 00:11:27,560
khi triển khai mã Hamming trong phần cứng một cách trực tiếp và phối cảnh XOR là

162
00:11:27,560 --> 00:11:31,380
dễ nghĩ đến nhất khi thực hiện nó trong phần mềm, từ cấp độ cao hơn.

163
00:11:31,380 --> 00:11:35,640
Cách đầu tiên thực sự dễ thực hiện nhất bằng tay và tôi nghĩ nó thực hiện công việc tốt

164
00:11:35,640 --> 00:11:40,720
hơn khi thấm nhuần trực giác cốt lõi làm nền tảng cho tất cả những điều này, đó là

165
00:11:40,720 --> 00:11:46,840
thông tin cần thiết để xác định một lỗi duy nhất có liên quan đến nhật ký kích thước của

166
00:11:46,840 --> 00:11:51,020
khối , hay nói cách khác, nó tăng lên từng chút một khi kích thước khối tăng gấp đôi.

167
00:11:51,020 --> 00:11:55,440
Thực tế có liên quan ở đây là thông tin đó tương

168
00:11:55,440 --> 00:11:56,440
ứng trực tiếp với mức độ dư thừa mà chúng ta cần.

169
00:11:56,440 --> 00:12:00,320
Đó thực sự là điều khiến hầu hết mọi người phải phản ứng tức thời khi lần đầu

170
00:12:00,320 --> 00:12:05,280
tiên họ nghĩ đến việc tạo ra một thông điệp có khả năng chống lại lỗi, trong đó

171
00:12:05,280 --> 00:12:07,520
việc sao chép toàn bộ thông điệp là bản năng đầu tiên hiện lên trong đầu bạn.

172
00:12:07,520 --> 00:12:11,120
Và sau đó, nhân tiện, có một cách hoàn toàn khác mà đôi khi bạn thấy

173
00:12:11,120 --> 00:12:14,800
mã Hamming được trình bày, trong đó bạn nhân thông điệp với một ma trận lớn.

174
00:12:14,800 --> 00:12:18,580
Điều này khá hay vì nó liên quan đến họ mã tuyến tính rộng hơn, nhưng tôi nghĩ điều đó hầu

175
00:12:18,580 --> 00:12:25,160
như không mang lại trực giác nào về nguồn gốc của nó hoặc quy mô của nó như thế nào.

176
00:12:25,160 --> 00:12:29,340
Và nói về việc chia tỷ lệ, bạn có thể nhận thấy rằng hiệu quả của

177
00:12:29,340 --> 00:12:32,200
sơ đồ này chỉ trở nên tốt hơn khi chúng tôi tăng kích thước khối.

178
00:12:32,200 --> 00:12:40,560
Ví dụ: chúng tôi thấy rằng với 256 bit, bạn chỉ sử dụng 3% dung

179
00:12:40,560 --> 00:12:43,480
lượng đó để dự phòng và nó sẽ ngày càng tốt hơn từ đó.

180
00:12:43,480 --> 00:12:49,040
Khi số lượng bit chẵn lẻ tăng lên từng cái một, kích thước khối tiếp tục tăng gấp đôi.

181
00:12:49,040 --> 00:12:53,840
Và nếu bạn coi điều đó đến mức cực đoan, bạn có thể có một khối

182
00:12:53,840 --> 00:12:58,800
với một triệu bit, trong đó bạn thực sự sẽ chơi 20 câu hỏi với các

183
00:12:58,800 --> 00:13:00,800
kiểm tra chẵn lẻ của mình và nó chỉ sử dụng 21 bit chẵn lẻ.

184
00:13:00,800 --> 00:13:05,760
Và nếu bạn lùi lại để nghĩ về việc xem xét một triệu bit và tìm

185
00:13:05,760 --> 00:13:08,640
ra một lỗi duy nhất, điều đó thực sự khiến bạn cảm thấy điên rồ.

186
00:13:08,640 --> 00:13:12,680
Tất nhiên, vấn đề là với khối lớn hơn, xác suất nhìn thấy nhiều hơn một hoặc hai bit

187
00:13:12,680 --> 00:13:18,360
lỗi sẽ tăng lên và mã Hamming không xử lý được bất kỳ điều gì ngoài điều đó.

188
00:13:18,360 --> 00:13:22,020
Vì vậy, trong thực tế, điều bạn muốn là tìm kích thước phù hợp

189
00:13:22,020 --> 00:13:25,520
để xác suất xảy ra quá nhiều bit bị lật không quá cao.

190
00:13:26,520 --> 00:13:30,920
Ngoài ra, trong thực tế, lỗi có xu hướng xảy ra theo từng đợt nhỏ, điều này sẽ làm hỏng hoàn toàn

191
00:13:30,920 --> 00:13:35,680
một khối đơn lẻ, do đó, một chiến thuật phổ biến để giúp dàn trải một loạt lỗi trên nhiều khối

192
00:13:35,680 --> 00:13:41,720
khác nhau là xen kẽ các khối đó, như thế này, trước khi chúng xuất hiện. gửi đi hoặc lưu trữ.

193
00:13:45,480 --> 00:13:49,920
Sau đó, một lần nữa, phần lớn trong số này được hiển thị hoàn toàn bằng các mã hiện đại hơn, như

194
00:13:49,920 --> 00:13:55,060
thuật toán Reed-Solomon được sử dụng phổ biến hơn nhiều, xử lý các lỗi bùng phát một cách đặc biệt tốt và

195
00:13:55,100 --> 00:13:59,580
nó có thể được điều chỉnh để có khả năng phục hồi với số lượng lỗi lớn hơn trên mỗi khối. .

196
00:13:59,580 --> 00:14:03,000
Nhưng đó là một chủ đề cho một thời điểm khác.

197
00:14:03,000 --> 00:14:07,660
Trong cuốn sách Nghệ thuật thực hiện khoa học và kỹ thuật, Hamming đã thẳng thắn một cách

198
00:14:07,660 --> 00:14:10,700
tuyệt vời về việc khám phá ra mật mã này của ông đã quanh co như thế nào.

199
00:14:10,700 --> 00:14:15,180
Đầu tiên anh ấy thử tất cả các loại kế hoạch khác nhau liên quan đến việc tổ chức

200
00:14:15,180 --> 00:14:18,420
các bit thành các phần của mạng nhiều chiều hơn và những thứ kỳ lạ như thế này.

201
00:14:18,420 --> 00:14:22,520
Ý tưởng rằng có thể sử dụng các biện pháp kiểm tra tính chẵn lẻ để thông

202
00:14:22,520 --> 00:14:26,360
đồng theo cách xác định vị trí của lỗi chỉ đến với Hamming khi anh ấy

203
00:14:26,360 --> 00:14:30,800
lùi lại sau một loạt các phân tích khác và hỏi, được rồi, cách hiệu quả

204
00:14:30,800 --> 00:14:32,860
nhất mà tôi có thể làm là gì có thể hình dung được về điều này?

205
00:14:32,860 --> 00:14:36,760
Ông cũng thẳng thắn về tầm quan trọng của việc kiểm tra tính chẵn lẻ đã nằm trong tâm

206
00:14:36,760 --> 00:14:42,040
trí ông, điều này có lẽ ít phổ biến hơn vào những năm 1940 so với ngày nay.

207
00:14:42,040 --> 00:14:46,040
Có khoảng nửa tá lần trong suốt cuốn sách này ông đề cập đến câu nói

208
00:14:46,040 --> 00:14:49,640
của Louis Pasteur, may mắn sẽ đến với một tâm trí đã chuẩn bị sẵn sàng.

209
00:14:49,640 --> 00:14:55,120
Những ý tưởng thông minh thường có vẻ đơn giản khi nhìn lại, điều này khiến chúng dễ bị đánh giá thấp.

210
00:14:55,120 --> 00:14:59,680
Hiện tại, hy vọng thực sự của tôi là các mã Hamming, hoặc ít nhất

211
00:14:59,680 --> 00:15:01,820
là khả năng có các mã như vậy, gần như hiển nhiên đối với bạn.

212
00:15:01,820 --> 00:15:05,440
Nhưng bạn không nên tự lừa dối mình rằng chúng thực

213
00:15:05,440 --> 00:15:08,000
sự hiển nhiên, bởi vì chúng chắc chắn không phải vậy.

214
00:15:08,000 --> 00:15:12,080
Một phần lý do khiến những ý tưởng thông minh có vẻ dễ dàng bị đánh lừa là vì

215
00:15:12,080 --> 00:15:17,360
chúng ta chỉ nhìn thấy kết quả cuối cùng, dọn dẹp những thứ lộn xộn, không bao giờ đề

216
00:15:17,360 --> 00:15:22,400
cập đến tất cả những bước rẽ sai lầm, đánh giá thấp tầm quan trọng của những khả năng

217
00:15:22,400 --> 00:15:23,980
có thể khám phá khi bắt đầu một vấn đề. quá trình giải quyết, tất cả điều đó.

218
00:15:23,980 --> 00:15:25,280
Nhưng điều này nói chung là đúng.

219
00:15:25,280 --> 00:15:29,880
Tôi nghĩ đối với một số phát minh đặc biệt, còn có lý

220
00:15:29,880 --> 00:15:31,040
do thứ hai sâu xa hơn khiến chúng ta đánh giá thấp chúng.

221
00:15:31,040 --> 00:15:35,040
Việc suy nghĩ về thông tin dưới dạng bit chỉ thực sự kết hợp thành một lý thuyết

222
00:15:35,040 --> 00:15:39,400
đầy đủ vào năm 1948, với bài báo chuyên đề về lý thuyết thông tin của Claude Shannon.

223
00:15:39,400 --> 00:15:43,400
Điều này về cơ bản xảy ra đồng thời với thời điểm Hamming phát triển thuật toán của mình.

224
00:15:43,440 --> 00:15:47,300
Theo một nghĩa nào đó, đây cũng chính là bài báo nền tảng

225
00:15:47,300 --> 00:15:52,080
đã chỉ ra rằng luôn có thể sửa lỗi hiệu quả, bất kể

226
00:15:52,080 --> 00:15:53,920
xác suất lật bit cao đến đâu, ít nhất là trên lý thuyết.

227
00:15:53,920 --> 00:15:58,120
Nhân tiện, Shannon và Hamming chia sẻ một văn phòng ở Bell Labs, mặc dù làm việc trên

228
00:15:58,120 --> 00:16:02,400
những lĩnh vực rất khác nhau, điều này hầu như không có vẻ trùng hợp ở đây.

229
00:16:02,400 --> 00:16:06,960
Nhiều thập kỷ trôi qua nhanh chóng, và ngày nay, nhiều người trong chúng ta quá đắm chìm trong việc suy nghĩ về

230
00:16:06,960 --> 00:16:13,080
các bit và thông tin đến mức chúng ta dễ dàng bỏ qua cách suy nghĩ này khác biệt như thế nào.

231
00:16:13,080 --> 00:16:17,920
Trớ trêu thay, những ý tưởng định hình sâu sắc nhất cách suy nghĩ của thế hệ tương

232
00:16:17,920 --> 00:16:22,640
lai cuối cùng lại khiến thế hệ tương lai nhìn nhận nó đơn giản hơn thực tế.

