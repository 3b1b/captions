1
00:00:03,620 --> 00:00:10,100
మీరు ఎప్పుడైనా CD లేదా DVDని స్క్రాచ్ చేయడం ఎలా సాధ్యమని ఆలోచించారా?

2
00:00:10,900 --> 00:00:14,674
స్క్రాచ్ నిజంగా డిస్క్‌లోని 1 సె మరియు 0 సెలను ప్రభావితం చేస్తుంది, 

3
00:00:14,674 --> 00:00:18,503
కాబట్టి ఇది నిల్వ చేయబడిన దాని నుండి భిన్నమైన డేటాను రీడ్ చేస్తుంది, 

4
00:00:18,503 --> 00:00:22,666
కానీ అది నిజంగా స్క్రాచ్ చేయబడితే తప్ప, అది చదివిన బిట్‌లు దానిలో ఎన్‌కోడ్ 

5
00:00:22,666 --> 00:00:27,440
చేయబడిన అదే ఫైల్‌గా డీకోడ్ చేయబడతాయి, a బిట్ కాపీ కోసం బిట్, అన్ని లోపాలు ఉన్నప్పటికీ.

6
00:00:27,440 --> 00:00:31,532
డేటాను నిల్వ చేయడానికి మరియు ముఖ్యంగా డేటాను ప్రసారం చేయడానికి, 

7
00:00:31,532 --> 00:00:36,200
లోపాలను ఎదుర్కొనేందుకు వీలు కల్పించే గణిత తెలివి యొక్క మొత్తం కుప్ప ఉంది.

8
00:00:36,200 --> 00:00:38,845
బాగా, సరే, వాస్తవానికి దీన్ని చేయడానికి ఒక మార్గంతో 

9
00:00:38,845 --> 00:00:40,880
ముందుకు రావడానికి అంత తెలివి అవసరం లేదు.

10
00:00:40,880 --> 00:00:45,872
ఏదైనా ఫైల్, అది వీడియో లేదా సౌండ్ లేదా టెక్స్ట్ అయినా, కొంత కోడ్ అయినా, 

11
00:00:45,872 --> 00:00:50,380
ఒక ఇమేజ్ అయినా, ఏదైనా సరే, చివరికి 1సె మరియు 0ల శ్రేణిలో ఉంటుంది.

12
00:00:50,680 --> 00:00:53,284
మరియు తిప్పబడిన బిట్‌ను సరిచేయడానికి ఒక సాధారణ 

13
00:00:53,284 --> 00:00:56,000
వ్యూహం ప్రతి బిట్ యొక్క మూడు కాపీలను నిల్వ చేయడం.

14
00:00:57,580 --> 00:01:00,732
అప్పుడు ఈ ఫైల్‌ని చదివే యంత్రం ఈ మూడు కాపీలను పోల్చి, 

15
00:01:00,732 --> 00:01:04,060
వ్యత్యాసం ఉన్నప్పుడల్లా 3లో 2 ఉత్తమమైన వాటిని తీసుకోగలదు.

16
00:01:07,160 --> 00:01:10,860
కానీ దాని అర్థం ఏమిటంటే, రిడెండెన్సీ కోసం మీ స్పేస్‌లో మూడింట రెండు వంతులను ఉపయోగించడం.

17
00:01:11,480 --> 00:01:14,360
ఆపై కూడా, ఆ స్థలం మొత్తం వదులుకోవడానికి, ఒకటి కంటే ఎక్కువ 

18
00:01:14,360 --> 00:01:17,240
బిట్‌లు తిప్పబడితే ఏమి జరుగుతుందనే దానిపై బలమైన హామీ లేదు.

19
00:01:17,980 --> 00:01:20,851
చాలా ఆసక్తికరమైన ప్రశ్న ఏమిటంటే, వీలైనంత తక్కువ స్థలాన్ని 

20
00:01:20,851 --> 00:01:24,020
వదిలివేసేటప్పుడు లోపాలను సరిదిద్దడానికి దీన్ని ఎలా తయారు చేయాలి.

21
00:01:24,520 --> 00:01:27,979
ఉదాహరణకు, మీరు ఈ వీడియో గురించి నేర్చుకునే పద్ధతిని ఉపయోగించి, 

22
00:01:27,979 --> 00:01:30,779
మీరు మీ డేటాను 256-బిట్ బ్లాక్‌లలో నిల్వ చేయవచ్చు, 

23
00:01:30,779 --> 00:01:33,360
ఇక్కడ ప్రతి బ్లాక్ 9 బిట్‌లను ఉపయోగిస్తుంది, 9!

24
00:01:33,760 --> 00:01:37,108
ఒక రకమైన రిడెండెన్సీగా పని చేయడానికి మరియు ఇతర 247 బిట్‌లు మీకు 

25
00:01:37,108 --> 00:01:40,300
కావలసిన అర్థవంతమైన సందేశం లేదా డేటాను ఉచితంగా తీసుకెళ్లవచ్చు.

26
00:01:40,900 --> 00:01:46,053
మరియు ఇక్కడ ఏదైనా బిట్ తిప్పబడితే, ఈ బ్లాక్‌ని చూడటం ద్వారా మరియు మరేమీ లేదు, 

27
00:01:46,053 --> 00:01:50,149
ఒక యంత్రం లోపం ఉందని మరియు ఖచ్చితంగా ఎక్కడ ఉందో గుర్తించగలదు, 

28
00:01:50,149 --> 00:01:52,660
తద్వారా దానిని ఎలా సరిదిద్దాలో తెలుసు.

29
00:01:52,660 --> 00:01:54,620
మరియు నిజాయితీగా, ఇది మేజిక్ లాగా అనిపిస్తుంది.

30
00:01:55,440 --> 00:01:58,436
మరియు ఈ నిర్దిష్ట స్కీమ్ కోసం, రెండు బిట్‌లు తిప్పబడినట్లయితే, 

31
00:01:58,436 --> 00:02:02,241
వాటిని ఎలా పరిష్కరించాలో తెలియకపోయినప్పటికీ, యంత్రం కనీసం రెండు లోపాలు ఉన్నాయని 

32
00:02:02,241 --> 00:02:02,860
గుర్తించగలదు.

33
00:02:03,520 --> 00:02:05,162
వివిధ పరిమాణాలు కలిగిన బ్లాక్‌ల కోసం ఇది ఎలా స్కేల్ 

34
00:02:05,162 --> 00:02:06,900
అవుతుందనే దాని గురించి మేము కొంచెం తర్వాత మాట్లాడుతాము.

35
00:02:07,860 --> 00:02:10,171
ఇలాంటి లోపాలను సరిదిద్దడానికి మిమ్మల్ని అనుమతించే 

36
00:02:10,171 --> 00:02:12,900
పద్ధతులు దోష దిద్దుబాటు కోడ్‌లుగా సమంజసంగా తగినంతగా తెలుసు.

37
00:02:13,660 --> 00:02:17,885
గత శతాబ్దంలో చాలా కాలం పాటు, ఈ ఫీల్డ్ ఆశ్చర్యకరంగా లోతైన గణితానికి నిజంగా 

38
00:02:17,885 --> 00:02:21,940
గొప్ప మూలంగా ఉంది, అది మనం ప్రతిరోజూ ఉపయోగించే పరికరాలలో చేర్చబడుతుంది.

39
00:02:22,840 --> 00:02:25,661
హామింగ్ కోడ్ అని పిలువబడే తొలి ఉదాహరణలలో ఒకదాని 

40
00:02:25,661 --> 00:02:28,660
గురించి మీకు పూర్తి అవగాహన కల్పించడం ఇక్కడ లక్ష్యం.

41
00:02:29,520 --> 00:02:32,786
ఇంకా చెప్పాలంటే, ఈ వీడియో నిర్మాణం గురించి నేను ఆలోచించే విధానం వీలైనంత 

42
00:02:32,786 --> 00:02:36,144
సూటిగా వివరించడం గురించి తక్కువగా ఉంది మరియు ఇక్కడ మరియు అక్కడక్కడ కొంచెం 

43
00:02:36,144 --> 00:02:39,820
సున్నితమైన మార్గదర్శకత్వంతో మీ కోసం దీన్ని కనిపెట్టమని మిమ్మల్ని ప్రేరేపిస్తుంది.

44
00:02:40,120 --> 00:02:43,010
కాబట్టి ఏదో ఒక సమయంలో అది ఎక్కడికి వెళుతుందో మీకు అనిపించినప్పుడు, 

45
00:02:43,010 --> 00:02:46,720
ఆ క్షణం పాజ్ చేయండి, నేను మీకు చెప్పే ముందు పథకం ఎలా ఉండబోతుందో చురుకుగా అంచనా వేయండి.

46
00:02:47,240 --> 00:02:50,581
అలాగే, మీ అవగాహన హార్డ్‌వేర్ స్థాయికి దిగజారాలని మీరు కోరుకుంటే, 

47
00:02:50,581 --> 00:02:53,099
బెన్ ఈటర్ దీనితో కలిపి ఒక వీడియోను రూపొందించారు, 

48
00:02:53,099 --> 00:02:56,800
బ్రెడ్‌బోర్డ్‌లపై హామింగ్ కోడ్‌లను వాస్తవంగా ఎలా అమలు చేయాలో చూపుతుంది, 

49
00:02:56,800 --> 00:02:58,240
ఇది చాలా సంతృప్తికరంగా ఉంది.

50
00:02:59,300 --> 00:03:02,809
రీడ్-సోలమన్ అల్గారిథమ్ వంటి ఆధునిక కోడ్‌ల వలె హామింగ్ కోడ్‌లు విస్తృతంగా 

51
00:03:02,809 --> 00:03:06,174
ఉపయోగించబడవని మీరు తెలుసుకోవాలి, అయితే ఈ పని ప్రారంభంలో ఎంత అసాధ్యమని 

52
00:03:06,174 --> 00:03:09,442
అనిపిస్తుంది మరియు ఇది ఎంతవరకు సహేతుకమైనదిగా అనిపిస్తుంది అనేదానికి 

53
00:03:09,442 --> 00:03:13,000
విరుద్ధంగా ఒక నిర్దిష్ట మ్యాజిక్ ఉంది. మీరు హామింగ్ గురించి నేర్చుకుంటారు.

54
00:03:13,720 --> 00:03:16,158
ఎర్రర్ దిద్దుబాటు యొక్క ప్రాథమిక సూత్రం ఏమిటంటే, 

55
00:03:16,158 --> 00:03:18,796
సాధ్యమయ్యే అన్ని సందేశాల యొక్క విస్తారమైన ప్రదేశంలో, 

56
00:03:18,796 --> 00:03:22,180
కొన్ని ఉపసమితులు మాత్రమే చెల్లుబాటు అయ్యే సందేశాలుగా పరిగణించబడతాయి.

57
00:03:22,800 --> 00:03:24,892
సారూప్యతగా, సరిగ్గా స్పెల్లింగ్ చేయబడిన పదాలు 

58
00:03:24,892 --> 00:03:26,940
vs తప్పుగా వ్రాయబడిన పదాల గురించి ఆలోచించండి.

59
00:03:28,900 --> 00:03:32,662
చెల్లుబాటు అయ్యే సందేశం మార్చబడినప్పుడల్లా, మీరు అక్షరదోషంతో చేసే విధంగా, 

60
00:03:32,662 --> 00:03:36,831
సమీప చెల్లుబాటు అయ్యే పొరుగువారికి వారు చూసే వాటిని సరిదిద్దడానికి రిసీవర్ బాధ్యత 

61
00:03:36,831 --> 00:03:37,340
వహిస్తారు.

62
00:03:38,220 --> 00:03:42,536
ఇలాంటి సందేశాలను సమర్ధవంతంగా వర్గీకరించడానికి కాంక్రీట్ అల్గారిథమ్‌తో ముందుకు రావడం, 

63
00:03:42,536 --> 00:03:44,060
అయితే, కొంత తెలివితేటలు అవసరం.

64
00:03:46,780 --> 00:03:50,518
1940వ దశకంలో రిచర్డ్ హామింగ్ అనే యువకుడు బెల్ ల్యాబ్స్‌లో పని చేస్తున్నప్పుడు 

65
00:03:50,518 --> 00:03:54,160
కథ మొదలవుతుంది మరియు అతని పనిలో కొంత భాగం అతనికి పరిమితమైన యాక్సెస్ మాత్రమే 

66
00:03:54,160 --> 00:03:57,420
ఉన్న చాలా పెద్ద ఖరీదైన పంచ్ కార్డ్ కంప్యూటర్‌ను ఉపయోగించడం జరిగింది.

67
00:03:57,800 --> 00:04:00,476
మరియు అతను దాని ద్వారా ఉంచిన ప్రోగ్రామ్‌లు విఫలమవుతూనే ఉన్నాయి, 

68
00:04:00,476 --> 00:04:02,400
ఎందుకంటే ప్రతిసారీ కొంచెం తప్పుగా చదవబడుతుంది.

69
00:04:03,120 --> 00:04:05,698
ఆవిష్కారానికి మూలమైన నిరాశ, అతను చాలా విసుగు చెందాడు, 

70
00:04:05,698 --> 00:04:08,420
అతను ప్రపంచంలోని మొట్టమొదటి దోష సవరణ కోడ్‌ను కనుగొన్నాడు.

71
00:04:09,060 --> 00:04:11,580
హామింగ్ కోడ్‌లను ఫ్రేమ్ చేయడానికి అనేక విభిన్న మార్గాలు ఉన్నాయి, 

72
00:04:11,580 --> 00:04:14,643
కానీ మొదటి పాస్‌గా హామింగ్ స్వయంగా వాటి గురించి ఆలోచించిన విధంగానే మేము దానిని 

73
00:04:14,643 --> 00:04:15,380
అనుసరించబోతున్నాము.

74
00:04:16,519 --> 00:04:20,940
16 బిట్‌ల బ్లాక్‌ని సరళమైన, కానీ చాలా సరళంగా లేని ఉదాహరణను ఉపయోగించుకుందాం.

75
00:04:21,820 --> 00:04:24,740
మేము ఈ బిట్‌ల స్థానాలను 0 నుండి 15 వరకు సంఖ్య చేస్తాము.

76
00:04:25,620 --> 00:04:29,624
మేము నిల్వ చేయాలనుకుంటున్న వాస్తవ డేటా ఈ బిట్‌లలో 12 మాత్రమే ఉంటుంది, 

77
00:04:29,624 --> 00:04:33,000
అయితే 4 స్థానాలు ఒక రకమైన రిడెండెన్సీగా రిజర్వ్ చేయబడ్డాయి.

78
00:04:33,900 --> 00:04:36,789
ఇక్కడ రిడెండెంట్ అనే పదానికి కాపీ అని అర్థం కాదు, అన్నింటికంటే, 

79
00:04:36,789 --> 00:04:40,040
ఆ 4 బిట్‌లు డేటాను గుడ్డిగా కాపీ చేయడానికి మాకు తగినంత స్థలాన్ని ఇవ్వవు.

80
00:04:40,720 --> 00:04:43,822
బదులుగా, వారు కొత్త సమాచారాన్ని జోడించకుండా, స్థితిస్థాపకతను 

81
00:04:43,822 --> 00:04:47,280
జోడించడం ద్వారా మరింత సూక్ష్మంగా మరియు తెలివైన రీడెండెన్సీగా ఉండాలి.

82
00:04:48,600 --> 00:04:51,741
మీరు ఈ 4 ప్రత్యేక బిట్‌లు చక్కగా ప్యాక్ చేయబడతాయని ఆశించవచ్చు, 

83
00:04:51,741 --> 00:04:54,533
బహుశా చివరలో లేదా అలాంటిదే కావచ్చు, కానీ మీరు చూస్తారు, 

84
00:04:54,533 --> 00:04:58,273
2 యొక్క అధికారాలు ఉన్న స్థానాల్లో వాటిని కూర్చోబెట్టడం చివరి నాటికి నిజంగా 

85
00:04:58,273 --> 00:04:59,620
సొగసైనదాన్ని అనుమతిస్తుంది.

86
00:05:00,200 --> 00:05:01,957
పెద్ద బ్లాక్‌ల కోసం ఇది ఎలా స్కేల్ అవుతుందనే దాని 

87
00:05:01,957 --> 00:05:03,540
గురించి ఇది మీకు చిన్న సూచనను కూడా ఇవ్వవచ్చు.

88
00:05:04,900 --> 00:05:07,384
సాంకేతికంగా ఇది కేవలం 11 బిట్‌ల డేటాగా ముగుస్తుంది, 

89
00:05:07,384 --> 00:05:11,158
0 స్థానం వద్ద ఏమి జరుగుతుందనే దాని కోసం మీరు స్వల్ప స్వల్పభేదాన్ని కనుగొంటారు, 

90
00:05:11,158 --> 00:05:13,260
కానీ ప్రస్తుతానికి దాని గురించి చింతించకండి.

91
00:05:14,140 --> 00:05:17,875
ఏదైనా ఎర్రర్ కరెక్షన్ అల్గారిథమ్ లాగా, ఇది ఇద్దరు ప్లేయర్‌లను కలిగి ఉంటుంది, 

92
00:05:17,875 --> 00:05:21,561
ఈ 4 ప్రత్యేక బిట్‌లను సెట్ చేయడానికి బాధ్యత వహించే పంపినవారు మరియు ఒక రకమైన 

93
00:05:21,561 --> 00:05:25,200
తనిఖీని నిర్వహించడానికి మరియు లోపాలను సరిదిద్దడానికి బాధ్యత వహించే రిసీవర్.

94
00:05:25,200 --> 00:05:28,380
వాస్తవానికి, పంపినవారు మరియు రిసీవర్ అనే పదాలు నిజంగా అన్ని తనిఖీలను 

95
00:05:28,380 --> 00:05:31,421
చేసే యంత్రాలు లేదా సాఫ్ట్‌వేర్‌లను సూచిస్తాయి మరియు స్టోరేజ్ వంటి 

96
00:05:31,421 --> 00:05:34,740
వాటిని చేర్చడానికి సందేశం యొక్క ఆలోచన నిజంగా విస్తృతంగా ఉద్దేశించబడింది.

97
00:05:35,340 --> 00:05:38,337
అన్నింటికంటే, డేటాను నిల్వ చేయడం అనేది ఒక ప్రదేశం నుండి మరొక 

98
00:05:38,337 --> 00:05:41,680
ప్రదేశానికి బదులుగా గతం నుండి భవిష్యత్తుకు సందేశాన్ని పంపడం లాంటిదే.

99
00:05:42,560 --> 00:05:47,193
కాబట్టి అది సెటప్, కానీ మనం డైవ్ చేయడానికి ముందు హామింగ్ కనుగొన్న సమయంలో అతని మనస్సులో 

100
00:05:47,193 --> 00:05:51,826
తాజాగా ఉన్న సంబంధిత ఆలోచన గురించి మాట్లాడాలి, ఇది ఏదైనా ఒక బిట్ లోపాలను గుర్తించడానికి 

101
00:05:51,826 --> 00:05:56,300
మిమ్మల్ని అనుమతిస్తుంది, కానీ వాటిని సరిదిద్దడానికి కాదు. పారిటీ చెక్‌గా వ్యాపారంలో.

102
00:05:56,880 --> 00:06:00,193
సమానత్వ తనిఖీ కోసం, పంపినవారు ట్యూనింగ్‌కు బాధ్యత వహించే ఒకే ఒక్క బిట్‌ను 

103
00:06:00,193 --> 00:06:03,820
మాత్రమే మేము వేరు చేస్తాము మరియు మిగిలిన వారు సందేశాన్ని తీసుకువెళ్లడానికి ఉచితం.

104
00:06:04,880 --> 00:06:11,280
ఈ ప్రత్యేక బిట్ యొక్క ఏకైక పని సందేశంలోని మొత్తం 1ల సంఖ్య సరి సంఖ్య అని నిర్ధారించుకోవడం.

105
00:06:12,080 --> 00:06:15,812
కాబట్టి ఉదాహరణకు ప్రస్తుతం, 1ల యొక్క మొత్తం సంఖ్య 7, అది బేసి, 

106
00:06:15,812 --> 00:06:19,960
కాబట్టి పంపినవారు ఆ ప్రత్యేక బిట్‌ను 1గా తిప్పి, గణనను సమానంగా చేయాలి.

107
00:06:20,800 --> 00:06:26,420
అయితే బ్లాక్ ఇప్పటికే 1ల సరి సంఖ్యతో ప్రారంభమై ఉంటే, ఈ ప్రత్యేక బిట్ 0 వద్ద ఉంచబడుతుంది.

108
00:06:27,340 --> 00:06:31,932
ఇది చాలా సరళమైనది, మోసపూరితమైనది, కానీ సందేశంలో ఎక్కడైనా మార్పు చేయాలనే 

109
00:06:31,932 --> 00:06:36,780
ఆలోచనను ఒకే బిట్ సమాచారంలో ప్రతిబింబించేలా చేయడానికి ఇది చాలా సొగసైన మార్గం.

110
00:06:37,500 --> 00:06:42,609
ఈ సందేశంలోని ఏదైనా బిట్ 0 నుండి 1కి లేదా 1 నుండి 0కి తిప్పబడితే, 

111
00:06:42,609 --> 00:06:46,540
అది 1సె మొత్తం గణనను సరి నుండి బేసిగా మారుస్తుంది.

112
00:06:47,980 --> 00:06:52,447
మీరు రిసీవర్ అయితే, మీరు ఈ సందేశాన్ని చూడండి మరియు మీకు బేసి సంఖ్య 1లు కనిపిస్తే, 

113
00:06:52,447 --> 00:06:56,697
అది ఎక్కడ ఉందో మీకు తెలియకపోయినప్పటికీ, కొంత లోపం సంభవించిందని మీరు ఖచ్చితంగా 

114
00:06:56,697 --> 00:06:57,460
తెలుసుకోవచ్చు.

115
00:06:58,500 --> 00:07:01,052
పరిభాషలో, బిట్‌ల సమూహం 1ల సరి లేదా బేసి సంఖ్యను 

116
00:07:01,052 --> 00:07:03,340
కలిగి ఉందా లేదా అనేది దాని సమానత్వం అంటారు.

117
00:07:04,860 --> 00:07:07,619
మీరు సంఖ్యలను కూడా ఉపయోగించవచ్చు మరియు సమానత్వం 0 లేదా 1 అని చెప్పవచ్చు, 

118
00:07:07,619 --> 00:07:10,720
మీరు ఆలోచనతో గణితాన్ని ప్రారంభించిన తర్వాత ఇది సాధారణంగా మరింత ఉపయోగకరంగా ఉంటుంది.

119
00:07:11,220 --> 00:07:15,520
మరియు పంపినవారు పారిటీని నియంత్రించడానికి ఉపయోగించే ఈ ప్రత్యేక బిట్‌ని పారిటీ బిట్ అంటారు.

120
00:07:17,560 --> 00:07:21,660
వాస్తవానికి, మనం స్పష్టంగా ఉండాలి, రిసీవర్ బేసి సమానత్వాన్ని చూసినట్లయితే, 

121
00:07:21,660 --> 00:07:25,651
అది కేవలం ఒక లోపం మాత్రమే ఉందని అర్థం కాదు, 3 లోపాలు లేదా 5 లేదా మరేదైనా 

122
00:07:25,651 --> 00:07:29,260
బేసి సంఖ్య ఉండవచ్చు, కానీ వారు ఖచ్చితంగా తెలుసుకోగలరు అది 0 కాదని.

123
00:07:29,980 --> 00:07:33,891
మరోవైపు, 2 ఎర్రర్‌లు లేదా ఏవైనా సరి సంఖ్యలో ఎర్రర్‌లు ఉంటే, 

124
00:07:33,891 --> 00:07:37,932
ఆ చివరి 1 సె గణన ఇప్పటికీ సమానంగా ఉంటుంది, కాబట్టి రిసీవర్‌కి 

125
00:07:37,932 --> 00:07:42,300
పూర్తి నమ్మకం ఉండదు కాబట్టి సరి గణన అంటే సందేశం లోపం లేనిదని అర్థం.

126
00:07:42,840 --> 00:07:46,029
కేవలం 2 బిట్ ఫ్లిప్‌ల ద్వారా గందరగోళానికి గురైన సందేశం చాలా బలహీనంగా 

127
00:07:46,029 --> 00:07:49,080
ఉందని మీరు ఫిర్యాదు చేయవచ్చు మరియు మీరు చెప్పేది ఖచ్చితంగా సరైనది.

128
00:07:49,700 --> 00:07:54,157
గుర్తుంచుకోండి, అయితే, మీరు స్వీకరించే సందేశం పంపినవారు ఉద్దేశించినదేనని మీకు 

129
00:07:54,157 --> 00:07:58,900
100% విశ్వాసం కలిగించే లోపాన్ని గుర్తించడం లేదా సరిదిద్దడం కోసం ఎలాంటి పద్ధతి లేదు.

130
00:07:59,580 --> 00:08:02,607
అన్నింటికంటే, తగినంత యాదృచ్ఛిక శబ్దం ఎల్లప్పుడూ ఒక చెల్లుబాటు 

131
00:08:02,607 --> 00:08:05,440
అయ్యే సందేశాన్ని మరొక చెల్లుబాటు అయ్యే సందేశంగా మార్చగలదు.

132
00:08:06,240 --> 00:08:10,841
బదులుగా, నిర్దిష్ట గరిష్ట సంఖ్యలో ఎర్రర్‌ల వరకు పటిష్టంగా ఉండే స్కీమ్‌తో 

133
00:08:10,841 --> 00:08:15,380
ముందుకు రావడం లేదా ఇలాంటి తప్పుడు పాజిటివ్ సంభావ్యతను తగ్గించడం లక్ష్యం.

134
00:08:16,260 --> 00:08:19,079
వారి స్వంతంగా పారిటీ తనిఖీలు చాలా బలహీనంగా ఉన్నాయి, 

135
00:08:19,079 --> 00:08:22,659
కానీ పూర్తి సందేశంలో మార్పు ఆలోచనను ఒకే బిట్‌కు తగ్గించడం ద్వారా, 

136
00:08:22,659 --> 00:08:27,160
అవి మనకు అందించేవి మరింత అధునాతన పథకాల కోసం శక్తివంతమైన బిల్డింగ్ బ్లాక్‌గా ఉంటాయి.

137
00:08:27,940 --> 00:08:32,452
ఉదాహరణకు, హ్యామింగ్ లోపం ఎక్కడ జరిగిందో గుర్తించడానికి ఒక మార్గం కోసం వెతుకుతున్నందున, 

138
00:08:32,452 --> 00:08:35,305
అది జరిగిందనే కాకుండా, అతని ముఖ్య అంతర్దృష్టి ఏమిటంటే, 

139
00:08:35,305 --> 00:08:38,210
మీరు కొన్ని సమానత్వ తనిఖీలను పూర్తి సందేశానికి కాకుండా, 

140
00:08:38,210 --> 00:08:41,012
జాగ్రత్తగా ఎంచుకున్న కొన్ని ఉపసమితులకు వర్తింపజేస్తే, 

141
00:08:41,012 --> 00:08:45,576
మీరు అడగవచ్చు ఏదైనా ఒక బిట్ ఎర్రర్ ఉన్న లొకేషన్‌ను పిన్ చేసే మరింత శుద్ధి చేసిన ప్రశ్నల 

142
00:08:45,576 --> 00:08:45,940
శ్రేణి.

143
00:08:46,680 --> 00:08:49,405
మొత్తం ఫీలింగ్ 20 ప్రశ్నల గేమ్‌ను ఆడటం లాంటిది, 

144
00:08:49,405 --> 00:08:53,380
అవునా లేదా కాదు అనే ప్రశ్నలను అడగడం, అవకాశాల ఖాళీని సగానికి తగ్గించడం.

145
00:08:54,160 --> 00:08:56,987
ఉదాహరణకు, ఈ 8 బిట్‌లలో, అన్ని బేసి సంఖ్యల స్థానాలపై 

146
00:08:56,987 --> 00:08:59,380
మాత్రమే మనం సమానత్వ తనిఖీ చేశామని అనుకుందాం.

147
00:09:00,100 --> 00:09:04,038
అప్పుడు ఒక లోపం గుర్తించబడితే, అది రిసీవర్‌కు నిర్దిష్టంగా లోపం ఎక్కడ ఉందో 

148
00:09:04,038 --> 00:09:08,240
దాని గురించి కొంచెం ఎక్కువ సమాచారాన్ని అందిస్తుంది, అంటే అది బేసి స్థానంలో ఉంది.

149
00:09:08,940 --> 00:09:13,139
ఆ 8 బిట్‌లలో ఎటువంటి లోపం కనుగొనబడకపోతే, అది ఏ లోపం లేదని అర్థం, 

150
00:09:13,139 --> 00:09:16,240
లేదా అది సరి స్థానాల్లో ఎక్కడో కూర్చుని ఉంటుంది.

151
00:09:17,180 --> 00:09:20,616
సమానత్వ తనిఖీని సగం బిట్‌లకు పరిమితం చేయడం వలన అది తక్కువ ప్రభావవంతంగా 

152
00:09:20,616 --> 00:09:24,634
ఉంటుందని మీరు అనుకోవచ్చు, అయితే ఇది ఇతర బాగా ఎంచుకున్న చెక్‌లతో కలిపి చేసినప్పుడు, 

153
00:09:24,634 --> 00:09:27,200
ఇది ప్రతికూలంగా మనకు చాలా శక్తివంతమైనదాన్ని ఇస్తుంది.

154
00:09:29,240 --> 00:09:32,081
వాస్తవానికి ఆ పారిటీ చెక్‌ను సెటప్ చేయడానికి, గుర్తుంచుకోండి, 

155
00:09:32,081 --> 00:09:35,840
ఆ పూర్తి సమూహం యొక్క సమానత్వం కోసం నియంత్రణను కలిగి ఉన్న కొన్ని ప్రత్యేక బిట్‌లను 

156
00:09:35,840 --> 00:09:36,620
కేటాయించడం అవసరం.

157
00:09:37,480 --> 00:09:39,180
ఇక్కడ కేవలం స్థానం 1ని ఎంచుకుందాం.

158
00:09:39,720 --> 00:09:42,498
చూపిన ఉదాహరణ కోసం, ఈ 8 బిట్‌ల సమానత్వం ప్రస్తుతం బేసిగా ఉంది, 

159
00:09:42,498 --> 00:09:46,218
కాబట్టి ఆ పారిటీ బిట్‌ను టోగుల్ చేయడానికి పంపినవారు బాధ్యత వహిస్తారు మరియు ఇప్పుడు 

160
00:09:46,218 --> 00:09:46,980
అది సమానంగా ఉంది.

161
00:09:47,940 --> 00:09:50,680
ఇది మేము చేసే 4 పారిటీ తనిఖీలలో 1 మాత్రమే.

162
00:09:50,920 --> 00:09:56,300
రెండవ చెక్ గ్రిడ్ యొక్క కుడి భాగంలో ఉన్న 8 బిట్‌లలో ఒకటి, కనీసం మేము దానిని ఇక్కడ గీసాము.

163
00:09:56,680 --> 00:09:59,388
ఈసారి మనం పొజిషన్ 2ని ప్యారిటీ బిట్‌గా ఉపయోగించవచ్చు, 

164
00:09:59,388 --> 00:10:02,448
కాబట్టి ఈ 8 బిట్‌లు ఇప్పటికే సరి సమానతను కలిగి ఉన్నాయి మరియు 

165
00:10:02,448 --> 00:10:06,060
పంపినవారు ఆ బిట్ నంబర్ 2ని మార్చకుండా ఉంచడం మంచి అనుభూతిని కలిగిస్తుంది.

166
00:10:07,020 --> 00:10:11,781
మరొక వైపు, రిసీవర్ ఈ సమూహం యొక్క సమానత్వాన్ని తనిఖీ చేసి, అది బేసి అని వారు కనుగొంటే, 

167
00:10:11,781 --> 00:10:15,380
కుడివైపున ఉన్న ఈ 8 బిట్‌లలో ఎక్కడో లోపం ఉందని వారికి తెలుస్తుంది.

168
00:10:15,820 --> 00:10:20,580
లేకుంటే లోపం లేదని అర్థం, లేదా లోపం ఎడమ భాగంలో ఎక్కడో ఉంది.

169
00:10:21,120 --> 00:10:23,106
లేదా రెండు లోపాలు ఉండవచ్చని నేను ఊహిస్తున్నాను, 

170
00:10:23,106 --> 00:10:26,500
కానీ ప్రస్తుతానికి మేము మొత్తం బ్లాక్‌లో గరిష్టంగా ఒక లోపం ఉందని భావించబోతున్నాము.

171
00:10:26,940 --> 00:10:28,740
అంతకు మించి విషయాలు పూర్తిగా విచ్ఛిన్నమవుతాయి.

172
00:10:29,160 --> 00:10:31,999
ఇక్కడ, మేము తదుపరి రెండు తనిఖీలను చూసే ముందు, ఈ మొదటి రెండింటిని మీరు కలిసి 

173
00:10:31,999 --> 00:10:35,100
పరిగణించినప్పుడు మనం ఏమి చేయడానికి అనుమతిస్తాము అనే దాని గురించి కొంచెం ఆలోచించండి.

174
00:10:35,800 --> 00:10:39,660
మీరు బేసి నిలువు వరుసలలో మరియు కుడి సగం మధ్య లోపాన్ని గుర్తించారని అనుకుందాం.

175
00:10:40,200 --> 00:10:43,040
ఇది తప్పనిసరిగా లోపం చివరి కాలమ్‌లో ఎక్కడో ఉందని అర్థం.

176
00:10:43,820 --> 00:10:46,473
బేసి కాలమ్‌లో లోపం లేకపోయినా కుడి సగంలో ఒకటి ఉంటే, 

177
00:10:46,473 --> 00:10:49,700
అది రెండవ నుండి చివరి నిలువు వరుసలో ఉందని మీకు తెలియజేస్తుంది.

178
00:10:50,440 --> 00:10:53,952
అదే విధంగా బేసి నిలువు వరుసలలో లోపం ఉంటే కానీ కుడి సగంలో లేకపోతే, 

179
00:10:53,952 --> 00:10:56,560
అది రెండవ నిలువు వరుసలో ఎక్కడో ఉందని మీకు తెలుసు.

180
00:10:56,560 --> 00:10:59,670
మరియు ఆ రెండు సమానత్వ తనిఖీలలో దేనినీ గుర్తించలేకపోతే, 

181
00:10:59,670 --> 00:11:03,120
ఆ ఎడమవైపున ఉన్న నిలువు వరుసలో లోపం ఉన్న ఏకైక స్థలం అని అర్థం.

182
00:11:03,340 --> 00:11:06,120
కానీ ఇది కేవలం ఏ లోపం లేదని అర్థం కావచ్చు.

183
00:11:06,300 --> 00:11:10,840
రెండు సమాన తనిఖీలు కాలమ్‌ను పిన్ చేద్దాం అని చెప్పడానికి ఇది చాలా కష్టమైన మార్గం.

184
00:11:11,480 --> 00:11:13,640
ఇక్కడ నుండి, మీరు బహుశా ఈ క్రింది వాటిని ఊహించవచ్చు.

185
00:11:13,800 --> 00:11:16,140
మేము ప్రాథమికంగా అదే పని చేస్తాము కానీ వరుసల కోసం.

186
00:11:16,440 --> 00:11:20,900
స్థానం 4ని సమాన బిట్‌గా ఉపయోగించి, బేసి అడ్డు వరుసలలో సమాన తనిఖీ జరగబోతోంది.

187
00:11:21,380 --> 00:11:24,252
కాబట్టి ఈ ఉదాహరణలో ఆ సమూహం ఇప్పటికే సమాన సమానత్వాన్ని కలిగి ఉంది, 

188
00:11:24,252 --> 00:11:25,820
కాబట్టి బిట్ 4 0కి సెట్ చేయబడుతుంది.

189
00:11:26,560 --> 00:11:29,331
మరియు చివరగా దిగువ రెండు అడ్డు వరుసలలో 8వ స్థానాన్ని 

190
00:11:29,331 --> 00:11:31,580
సమాన బిట్‌గా ఉపయోగిస్తూ సమానత్వ తనిఖీ ఉంది.

191
00:11:32,120 --> 00:11:34,319
ఈ సందర్భంలో, పంపినవారు సమూహానికి సమాన సమానత్వాన్ని 

192
00:11:34,319 --> 00:11:36,820
అందించడానికి ఆ బిట్ 8ని ఆన్ చేయవలసి ఉన్నట్లు కనిపిస్తోంది.

193
00:11:37,700 --> 00:11:39,844
మొదటి రెండు చెక్‌లు నిలువు వరుసను పిన్ చేయడానికి వీలు కల్పిస్తున్నట్లే, 

194
00:11:39,844 --> 00:11:41,840
ఈ తర్వాతి రెండు అడ్డు వరుసను పిన్ చేయడానికి మిమ్మల్ని అనుమతిస్తాయి.

195
00:11:42,880 --> 00:11:47,540
ఉదాహరణగా, ప్రసార సమయంలో 3వ స్థానం వద్ద లోపం ఉందని ఊహించండి.

196
00:11:48,180 --> 00:11:52,568
ఇది మొదటి సమూహాన్ని ప్రభావితం చేస్తుంది మరియు రెండవ సమూహాన్ని కూడా ప్రభావితం చేస్తుంది, 

197
00:11:52,568 --> 00:11:55,560
కాబట్టి ఆ కుడి కాలమ్‌లో ఎక్కడో లోపం ఉందని రిసీవర్‌కు తెలుసు.

198
00:11:56,100 --> 00:12:00,540
కానీ ఇది మూడవ సమూహాన్ని ప్రభావితం చేయదు మరియు ఇది నాల్గవ సమూహాన్ని ప్రభావితం చేయదు.

199
00:12:01,240 --> 00:12:04,421
మరియు ఇది మొదటి వరుస వరకు లోపాన్ని గుర్తించడానికి రిసీవర్‌ని అనుమతిస్తుంది, 

200
00:12:04,421 --> 00:12:07,520
అంటే తప్పనిసరిగా స్థానం 3 అని అర్థం, కాబట్టి వారు లోపాన్ని పరిష్కరించగలరు.

201
00:12:08,580 --> 00:12:11,573
ఈ నాలుగు ప్రశ్నలకు సమాధానాలు మీరు ఎక్కడికి వెళ్లినా ఒక నిర్దిష్ట 

202
00:12:11,573 --> 00:12:14,520
లొకేషన్‌ను పిన్ చేయడానికి మిమ్మల్ని అనుమతిస్తుంది అని మిమ్మల్ని 

203
00:12:14,520 --> 00:12:17,100
మీరు ఒప్పించుకోవడానికి కొంత సమయం కేటాయించి ఆనందించవచ్చు.

204
00:12:17,720 --> 00:12:20,466
వాస్తవానికి, మీలో ఉన్న తెలివిగలవారు ఈ ప్రశ్నలకు మరియు 

205
00:12:20,466 --> 00:12:23,060
బైనరీ లెక్కింపుకు మధ్య సంబంధాన్ని కూడా గమనించవచ్చు.

206
00:12:23,500 --> 00:12:26,152
మరియు మీరు అలా చేస్తే, మళ్లీ నేను నొక్కి చెప్పనివ్వండి, పాజ్ చేయండి, 

207
00:12:26,152 --> 00:12:28,920
నేను కనెక్షన్‌ను పాడు చేసే ముందు దాన్ని గీయడానికి మీ కోసం ప్రయత్నించండి.

208
00:12:30,500 --> 00:12:34,591
ఒకవేళ పారిటీ బిట్ కూడా ప్రభావితమైతే ఏమి జరుగుతుందని మీరు ఆలోచిస్తున్నట్లయితే, 

209
00:12:34,591 --> 00:12:36,060
మీరు దీన్ని ప్రయత్నించవచ్చు.

210
00:12:36,440 --> 00:12:40,478
ఈ నాలుగు ప్రత్యేక బిట్‌లలోని ఏదైనా లోపం, అదే నాలుగు ప్రశ్నల 

211
00:12:40,478 --> 00:12:44,180
సమూహంతో ఇతర వాటిలాగే ఎలా ట్రాక్ చేయబడుతుందో ఆలోచించండి.

212
00:12:47,060 --> 00:12:50,970
ఇది నిజంగా పట్టింపు లేదు, ఎందుకంటే రోజు చివరిలో మనకు కావలసినది మెసేజ్ బిట్‌లను రక్షించడం, 

213
00:12:50,970 --> 00:12:53,100
ఎర్రర్ కరెక్షన్ బిట్‌లు కేవలం సవారీ చేస్తున్నాయి.

214
00:12:53,600 --> 00:12:57,820
కానీ ఆ బిట్‌లను కూడా రక్షించడం అనేది సహజంగానే ఉప ఉత్పత్తిగా పథకం నుండి బయటకు వస్తుంది.

215
00:12:59,200 --> 00:13:01,760
ఇది ఎలా స్కేల్ అవుతుందో కూడా మీరు ఊహించి ఆనందించవచ్చు.

216
00:13:02,300 --> 00:13:06,492
మేము 256 బిట్‌ల పరిమాణం గల బ్లాక్‌ని ఉపయోగించినట్లయితే, ఉదాహరణకు, 

217
00:13:06,492 --> 00:13:11,890
లొకేషన్‌ను పిన్ చేయడానికి, బైనరీ శోధన కోసం మీకు ఎనిమిది అవును లేదా కాదు అనే ప్రశ్నలు 

218
00:13:11,890 --> 00:13:12,780
మాత్రమే అవసరం.

219
00:13:15,640 --> 00:13:17,907
మరియు గుర్తుంచుకోండి, ప్రతి ప్రశ్నకు తగిన పారిటీ 

220
00:13:17,907 --> 00:13:20,500
చెక్‌ని సెట్ చేయడానికి ఒక్క బిట్‌ను మాత్రమే వదిలివేయాలి.

221
00:13:23,160 --> 00:13:26,198
మీలో కొందరికి ఇది ఇప్పటికే కనిపించవచ్చు, అయితే ఈ ప్రశ్నలు ఏమిటో ఒకటి లేదా 

222
00:13:26,198 --> 00:13:29,360
రెండు నిమిషాల్లో కనుగొనే క్రమబద్ధమైన మార్గం గురించి మేము తర్వాత మాట్లాడుతాము.

223
00:13:29,880 --> 00:13:31,553
మేము ఇక్కడ అభివృద్ధి చేస్తున్న వాటి సామర్థ్యాన్ని 

224
00:13:31,553 --> 00:13:33,260
అభినందించడానికి ఈ స్కెచ్ సరిపోతుందని ఆశిస్తున్నాము.

225
00:13:33,260 --> 00:13:36,981
మొదటి విషయం, ఆ ఎనిమిది హైలైట్ చేయబడిన పారిటీ బిట్‌లు మినహా, 

226
00:13:36,981 --> 00:13:41,820
మీరు కోరుకున్నది ఏదైనా కావచ్చు, మీకు కావలసిన సందేశం లేదా డేటాను కలిగి ఉంటుంది.

227
00:13:41,820 --> 00:13:46,399
8 బిట్‌లు మిగిలిన సందేశం ద్వారా పూర్తిగా నిర్ణయించబడతాయి అనే అర్థంలో అనవసరంగా ఉంటాయి, 

228
00:13:46,399 --> 00:13:50,020
అయితే ఇది సందేశాన్ని మొత్తంగా కాపీ చేయడం కంటే చాలా తెలివిగా ఉంటుంది.

229
00:13:53,600 --> 00:13:56,040
మరియు ఇప్పటికీ, చాలా తక్కువగా ఇచ్చినందుకు, మీరు 

230
00:13:56,040 --> 00:13:58,380
ఏ ఒక్క బిట్ లోపాన్ని గుర్తించి పరిష్కరించగలరు.

231
00:13:59,200 --> 00:14:00,400
బాగా, దాదాపు.

232
00:14:00,960 --> 00:14:05,502
సరే, ఇక్కడ ఒక సమస్య ఏమిటంటే, నాలుగు పారిటీ తనిఖీలలో ఏదీ లోపాన్ని గుర్తించకపోతే, 

233
00:14:05,502 --> 00:14:09,591
అంటే 8 బిట్‌ల యొక్క ప్రత్యేకంగా ఎంపిక చేయబడిన ఉపసమితులు అన్నింటికీ సమాన 

234
00:14:09,591 --> 00:14:14,475
సమానతలను కలిగి ఉంటాయి, పంపినవారు ఉద్దేశించినట్లుగా, అప్పుడు ఎటువంటి లోపం లేదని అర్థం. 

235
00:14:14,475 --> 00:14:16,860
, లేదా అది మనల్ని స్థానం 0కి తగ్గిస్తుంది.

236
00:14:17,740 --> 00:14:20,493
మీరు చూస్తారు, నాలుగు అవును లేదా కాదు ప్రశ్నలతో, 

237
00:14:20,493 --> 00:14:25,325
మా సమానత్వ తనిఖీల కోసం మేము 16 సాధ్యమైన ఫలితాలను కలిగి ఉన్నాము మరియు మొదట బ్లాక్‌లోని 

238
00:14:25,325 --> 00:14:28,416
16 స్థానాల్లో 1ని గుర్తించడానికి ఇది సరైనదనిపిస్తుంది, 

239
00:14:28,416 --> 00:14:31,900
కానీ మీరు 17వ ఫలితాన్ని కూడా తెలియజేయాలి, లోపం లేదు పరిస్థితి.

240
00:14:33,020 --> 00:14:37,300
ఇక్కడ పరిష్కారం నిజానికి చాలా సులభం, ఆ 0వ బిట్ గురించి పూర్తిగా మరచిపోండి.

241
00:14:37,840 --> 00:14:40,775
కాబట్టి మేము మా నాలుగు సమాన తనిఖీలను చేసినప్పుడు మరియు అవన్నీ సమానంగా 

242
00:14:40,775 --> 00:14:43,460
ఉన్నాయని మనం చూసినప్పుడు, ఎటువంటి లోపం లేదని నిస్సందేహంగా అర్థం.

243
00:14:44,240 --> 00:14:46,919
దీని అర్థం ఏమిటంటే, 16-బిట్ బ్లాక్‌తో పని చేయడం కంటే, 

244
00:14:46,919 --> 00:14:50,143
మేము 15-బిట్ బ్లాక్‌తో పని చేస్తాము, ఇక్కడ 11 బిట్‌లు సందేశాన్ని 

245
00:14:50,143 --> 00:14:53,220
తీసుకెళ్లడానికి ఉచితం మరియు వాటిలో 4 రిడెండెన్సీ కోసం ఉన్నాయి.

246
00:14:53,780 --> 00:14:57,300
దానితో, వ్యాపారంలో వ్యక్తులు 15-11 హామింగ్ కోడ్‌గా 

247
00:14:57,300 --> 00:15:00,200
సూచించే వాటిని ఇప్పుడు మేము కలిగి ఉన్నాము.

248
00:15:00,460 --> 00:15:04,300
2 యొక్క క్లీన్ పవర్ ఉన్న బ్లాక్ సైజును కలిగి ఉండటం చాలా ఆనందంగా ఉంది మరియు మేము ఆ 0వ 

249
00:15:04,300 --> 00:15:08,140
బిట్‌ను చుట్టూ ఉంచుకుని, మన కోసం కొంచెం అదనపు పనిని చేయడానికి ఒక తెలివైన మార్గం ఉంది.

250
00:15:08,700 --> 00:15:11,319
మేము దానిని మొత్తం బ్లాక్‌లో సమాన బిట్‌గా ఉపయోగిస్తే, 

251
00:15:11,319 --> 00:15:15,540
అది మనం 2-బిట్ ఎర్రర్‌లను సరిదిద్దలేనప్పటికీ, వాస్తవానికి గుర్తించడానికి అనుమతిస్తుంది.

252
00:15:16,160 --> 00:15:16,820
ఇది ఎలా పని చేస్తుందో ఇక్కడ ఉంది.

253
00:15:17,180 --> 00:15:20,017
ఆ నాలుగు ప్రత్యేక ఎర్రర్-కరెక్టింగ్ బిట్‌లను సెట్ చేసిన తర్వాత, 

254
00:15:20,017 --> 00:15:23,787
మేము దానిని 0వదాన్ని సెట్ చేసాము, తద్వారా పూర్తి బ్లాక్ యొక్క సమానత్వం సాధారణ పారిటీ 

255
00:15:23,787 --> 00:15:24,940
తనిఖీ వలె సమానంగా ఉంటుంది.

256
00:15:25,700 --> 00:15:30,116
ఇప్పుడు, ఒక బిట్ ఎర్రర్ ఉన్నట్లయితే, పూర్తి బ్లాక్ యొక్క సమానత్వం బేసిగా టోగుల్ అవుతుంది, 

257
00:15:30,116 --> 00:15:33,600
అయితే నాలుగు ఎర్రర్-కరెక్టింగ్ చెక్‌ల కారణంగా మేము దానిని పట్టుకుంటాము.

258
00:15:34,160 --> 00:15:37,761
అయితే, రెండు ఎర్రర్‌లు ఉన్నట్లయితే, మొత్తం సమానత్వం తిరిగి సమానంగా 

259
00:15:37,761 --> 00:15:41,685
ఉండేలా టోగుల్ అవుతుంది, అయితే ఆ నాలుగు ప్యారిటీ చెక్‌లతో ఏమి జరుగుతోందనే 

260
00:15:41,685 --> 00:15:45,180
దాని కారణంగా రిసీవర్ ఇప్పటికీ కనీసం కొంత లోపం ఉన్నట్లు చూస్తుంది.

261
00:15:45,180 --> 00:15:47,777
కాబట్టి వారు మొత్తంగా సమాన సమానత్వాన్ని గమనించినట్లయితే, 

262
00:15:47,777 --> 00:15:50,284
కానీ ఇతర తనిఖీలతో సున్నా కాని ఏదైనా జరుగుతున్నట్లయితే, 

263
00:15:50,284 --> 00:15:52,700
కనీసం రెండు ఎర్రర్‌లు ఉన్నాయని వారికి తెలియజేస్తుంది.

264
00:15:53,520 --> 00:15:54,000
అది తెలివైనది కాదా?

265
00:15:54,300 --> 00:15:57,754
మేము ఆ 2-బిట్ లోపాలను సరిదిద్దలేనప్పటికీ, ఒక చిన్న ఇబ్బందికరమైన 0వ 

266
00:15:57,754 --> 00:16:01,260
బిట్‌ను తిరిగి పనిలో ఉంచడం ద్వారా, అది వాటిని గుర్తించేలా చేస్తుంది.

267
00:16:02,260 --> 00:16:05,220
ఇది చాలా ప్రామాణికమైనది, దీనిని పొడిగించిన హామింగ్ కోడ్ అని పిలుస్తారు.

268
00:16:06,540 --> 00:16:09,865
సాంకేతికంగా చెప్పాలంటే, కనీసం 16-బిట్ బ్లాక్ యొక్క ఉదాహరణ కోసం, 

269
00:16:09,865 --> 00:16:12,880
హామింగ్ కోడ్ ఏమి చేస్తుందో మీకు ఇప్పుడు పూర్తి వివరణ ఉంది.

270
00:16:12,880 --> 00:16:15,799
కానీ మీ అవగాహనను తనిఖీ చేయడం మరియు మొదటి నుండి పూర్తి చేయడానికి 

271
00:16:15,799 --> 00:16:18,582
ఒక పూర్తి ఉదాహరణ చేయడం ద్వారా ఈ పాయింట్ వరకు ప్రతిదీ పటిష్టం 

272
00:16:18,582 --> 00:16:21,320
చేయడం మీకు మరింత సంతృప్తికరంగా ఉంటుందని నేను భావిస్తున్నాను.

273
00:16:22,080 --> 00:16:24,300
నేను మీతో కలిసి అడుగు పెడతాను కాబట్టి మీరు మీరే తనిఖీ చేసుకోవచ్చు.

274
00:16:25,120 --> 00:16:28,282
సందేశాన్ని సెటప్ చేయడానికి, అది మీరు స్పేస్‌లో అనువదిస్తున్న 

275
00:16:28,282 --> 00:16:32,430
అక్షరార్థ సందేశమైనా లేదా కాలక్రమేణా మీరు నిల్వ చేయాలనుకుంటున్న కొంత డేటా అయినా, 

276
00:16:32,430 --> 00:16:34,660
మొదటి దశ దానిని 11-బిట్ భాగాలుగా విభజించడం.

277
00:16:35,580 --> 00:16:39,760
ప్రతి భాగం ఎర్రర్-రెసిస్టెంట్ 16-బిట్ బ్లాక్‌లోకి ప్యాక్ చేయబడుతుంది.

278
00:16:39,760 --> 00:16:43,220
కాబట్టి దీనిని ఒక ఉదాహరణగా తీసుకుందాం మరియు వాస్తవానికి దాన్ని పని చేద్దాం.

279
00:16:43,740 --> 00:16:44,740
ముందుకు సాగండి, వాస్తవానికి దీన్ని చేయండి!

280
00:16:44,740 --> 00:16:47,020
పాజ్ చేసి, ఈ బ్లాక్‌ని కలపడానికి ప్రయత్నిద్దాం.

281
00:16:52,720 --> 00:16:53,680
సరే, మీరు సిద్ధంగా ఉన్నారా?

282
00:16:54,240 --> 00:16:58,298
గుర్తుంచుకోండి, 2 యొక్క ఇతర అధికారాలతో పాటు స్థానం 0 దోష సవరణ విధి కోసం రిజర్వ్ 

283
00:16:58,298 --> 00:17:02,609
చేయబడింది, కాబట్టి మీరు సందేశ బిట్‌లను మిగిలిన అన్ని స్పాట్‌లలో క్రమంలో ఉంచడం ద్వారా 

284
00:17:02,609 --> 00:17:03,320
ప్రారంభించండి.

285
00:17:05,339 --> 00:17:08,692
మీకు ఈ సమూహానికి సమాన సమానత్వం అవసరం, ఇది ఇప్పటికే ఉంది, 

286
00:17:08,692 --> 00:17:12,339
కాబట్టి మీరు ఆ పారిటీ బిట్‌ను స్థానం 1లో 0గా సెట్ చేసి ఉండాలి.

287
00:17:13,020 --> 00:17:15,301
తదుపరి సమూహం బేసి సమానత్వంతో ప్రారంభమవుతుంది, 

288
00:17:15,301 --> 00:17:17,880
కాబట్టి మీరు దాని సమాన బిట్‌ను 1కి సెట్ చేసి ఉండాలి.

289
00:17:19,160 --> 00:17:21,460
ఆ తర్వాత సమూహం బేసి సమానత్వంతో ప్రారంభమవుతుంది, 

290
00:17:21,460 --> 00:17:24,240
కాబట్టి మీరు మళ్లీ దాని సమాన బిట్‌ను 1కి సెట్ చేసి ఉండాలి.

291
00:17:24,780 --> 00:17:27,420
మరియు చివరి సమూహానికి కూడా బేసి సమానత్వం ఉంది, 

292
00:17:27,420 --> 00:17:30,060
అంటే మనం ఆ బిట్‌ను 8వ స్థానంలో 1గా సెట్ చేసాము.

293
00:17:31,300 --> 00:17:35,308
ఆపై చివరి దశగా, ఫుల్ బ్లాక్ ఇప్పుడు సరి సమానతను కలిగి ఉంది, 

294
00:17:35,308 --> 00:17:40,320
అంటే మీరు ఆ బిట్ నంబర్ 0ని, ఓవర్ ఆర్చింగ్ పారిటీ బిట్‌ని 0గా సెట్ చేయవచ్చు.

295
00:17:41,340 --> 00:17:44,770
కాబట్టి ఈ బ్లాక్ పంపబడినందున, నాలుగు ప్రత్యేక ఉపసమితులు 

296
00:17:44,770 --> 00:17:48,140
మరియు మొత్తం బ్లాక్ యొక్క సమానత్వం సమం లేదా 0 అవుతుంది.

297
00:17:48,820 --> 00:17:52,180
వ్యాయామం యొక్క రెండవ భాగం, మీరు రిసీవర్ పాత్రను పోషిస్తారు.

298
00:17:53,480 --> 00:17:56,120
అయితే, ఈ సందేశం ఏమిటో మీకు ఇప్పటికే తెలియదని దీని అర్థం, 

299
00:17:56,120 --> 00:17:59,780
మీలో కొందరు దీన్ని గుర్తుపెట్టుకుని ఉండవచ్చు, కానీ మీరు అలా చేయలేదని అనుకుందాం.

300
00:18:00,020 --> 00:18:03,120
నేను ఏమి చేయబోతున్నాను ఆ బ్లాక్‌లోని బిట్‌లలో 0, 

301
00:18:03,120 --> 00:18:07,740
1 లేదా 2 గాని మార్చండి, ఆపై నేను ఏమి చేశానో గుర్తించమని మిమ్మల్ని అడగండి.

302
00:18:08,260 --> 00:18:10,810
కాబట్టి మళ్ళీ, పాజ్ చేసి, దాన్ని పని చేయడానికి ప్రయత్నించండి.

303
00:18:18,790 --> 00:18:23,237
సరే, కాబట్టి మీరు రిసీవర్‌గా ఇప్పుడు మొదటి పారిటీ సమూహాన్ని తనిఖీ చేయండి మరియు 

304
00:18:23,237 --> 00:18:27,910
అది సమంగా ఉన్నట్లు మీరు చూడవచ్చు, కాబట్టి ఉన్న ఏదైనా లోపం సరి నిలువు వరుసలో ఉండాలి.

305
00:18:29,690 --> 00:18:33,241
తదుపరి చెక్ మాకు బేసి సంఖ్యను ఇస్తుంది, కనీసం ఒక లోపం ఉందని 

306
00:18:33,241 --> 00:18:37,030
మాకు చెబుతుంది మరియు ఈ నిర్దిష్ట కాలమ్‌లోకి మమ్మల్ని కుదించింది.

307
00:18:38,550 --> 00:18:41,790
మూడవ చెక్ కూడా, అవకాశాలను మరింత తగ్గించడం.

308
00:18:42,650 --> 00:18:46,908
మరియు చివరి పారీటీ చెక్ బేసిగా ఉంది, దిగువన ఎక్కడో లోపం ఉందని చెబుతుంది, 

309
00:18:46,908 --> 00:18:49,650
ఇది ఇప్పుడు మనం చూడగలిగేది 10వ స్థానంలో ఉండాలి.

310
00:18:51,490 --> 00:18:54,483
ఇంకా ఏమిటంటే, మొత్తం బ్లాక్ యొక్క సమానత్వం బేసిగా ఉంది, 

311
00:18:54,483 --> 00:18:57,530
ఇది ఒకటి కాదు మరియు రెండు కాదు అనే విశ్వాసాన్ని ఇస్తుంది.

312
00:18:58,070 --> 00:18:59,970
ఇది మూడు లేదా అంతకంటే ఎక్కువ ఉంటే, అన్ని పందాలు నిలిపివేయబడతాయి.

313
00:19:01,310 --> 00:19:05,828
ఆ బిట్ నంబర్ 10ని సరిదిద్దిన తర్వాత, దిద్దుబాటు కోసం ఉపయోగించని 11 బిట్‌లను 

314
00:19:05,828 --> 00:19:10,109
బయటకు తీయడం వలన అసలు సందేశం యొక్క సంబంధిత విభాగాన్ని మాకు అందజేస్తుంది, 

315
00:19:10,109 --> 00:19:14,390
మీరు రివైండ్ చేసి సరిపోల్చినట్లయితే మేము ఉదాహరణను సరిగ్గా ప్రారంభించాము.

316
00:19:15,710 --> 00:19:18,253
మరియు ఇప్పుడు ఇవన్నీ చేతితో ఎలా చేయాలో మీకు తెలుసు కాబట్టి, 

317
00:19:18,253 --> 00:19:22,025
పైథాన్ కోడ్ యొక్క ఒకే లైన్‌తో మీరు ఈ తర్కం యొక్క ప్రధాన భాగాన్ని ఎలా నిర్వహించవచ్చో నేను 

318
00:19:22,025 --> 00:19:23,170
మీకు చూపించాలనుకుంటున్నాను.

319
00:19:23,870 --> 00:19:28,172
మీరు చూడండి, ఈ అల్గారిథమ్ నిజంగా ఎంత సొగసైనదో నేను మీకు ఇంకా చెప్పలేదు, 

320
00:19:28,172 --> 00:19:31,100
లోపం ఉన్న స్థానానికి మెషిన్‌ని చూపడం ఎంత సులభమో, 

321
00:19:31,100 --> 00:19:36,060
దాన్ని క్రమపద్ధతిలో ఎలా స్కేల్ చేయాలో మరియు మనం అన్నింటినీ ఎలా ఫ్రేమ్ చేయవచ్చు ఇది 

322
00:19:36,060 --> 00:19:38,750
బహుళ ప్రత్యేక పారిటీ తనిఖీల కంటే ఒకే ఆపరేషన్.

323
00:19:39,430 --> 00:19:41,310
నా ఉద్దేశ్యం ఏమిటో చూడటానికి, పార్ట్ 2లో నాతో చేరండి.

