1
00:00:00,000 --> 00:00:03,120
Я припускаю, що всі тут походять із частини 1.

2
00:00:03,120 --> 00:00:07,888
Ми говорили про коди Хеммінга, спосіб створення блоку даних, де більшість бітів несуть

3
00:00:07,888 --> 00:00:12,492
значуще повідомлення, тоді як кілька інших діють як свого роду надлишковість, таким

4
00:00:12,492 --> 00:00:17,370
чином, що якщо будь-який біт перевертається, або повідомлення біт або біт надлишковості,

5
00:00:17,370 --> 00:00:21,920
будь-що в цьому блоці, приймач зможе визначити, що була помилка, і як її виправити.

6
00:00:21,920 --> 00:00:25,802
Основна ідея, представлена там, полягала в тому, як використовувати

7
00:00:25,802 --> 00:00:29,800
кілька перевірок на парність для бінарного пошуку на шляху до помилки.

8
00:00:29,800 --> 00:00:32,583
У цьому відео мета полягала в тому, щоб зробити коди

9
00:00:32,583 --> 00:00:35,420
Хеммінга максимально практичними та відкритими заново.

10
00:00:35,420 --> 00:00:39,903
Але коли ви починаєте думати про те, щоб реалізувати це в програмному чи апаратному

11
00:00:39,903 --> 00:00:44,120
забезпеченні, таке фреймування може фактично знизити вартість елегантного коду.

12
00:00:44,120 --> 00:00:47,225
Ви можете подумати, що вам потрібно написати алгоритм, який

13
00:00:47,225 --> 00:00:50,485
відстежує всі можливі місця помилок і скорочує цю групу навпіл

14
00:00:50,485 --> 00:00:54,160
під час кожної перевірки, але насправді це набагато, набагато простіше.

15
00:00:54,160 --> 00:00:57,550
Якщо ви зачитаєте відповіді на чотири перевірки парності,

16
00:00:57,550 --> 00:01:01,116
які ми робили в останньому відео, усі як 1 і 0 замість «так»

17
00:01:01,116 --> 00:01:04,800
і «ні», це буквально вказує місце помилки в двійковому вигляді.

18
00:01:04,800 --> 00:01:08,761
Наприклад, число 7 у двійковій системі виглядає

19
00:01:08,761 --> 00:01:12,640
як 0111, по суті кажучи, що це 4 плюс 2 плюс 1.

20
00:01:12,640 --> 00:01:17,533
І зауважте, де знаходиться позиція 7, вона дійсно впливає на першу

21
00:01:17,533 --> 00:01:22,280
з наших груп парності, і на другу, і на третю, але не на останню.

22
00:01:22,280 --> 00:01:25,640
Отже, читання результатів цих чотирьох перевірок

23
00:01:25,640 --> 00:01:28,520
знизу вгору справді пояснює місце помилки.

24
00:01:28,520 --> 00:01:33,163
У прикладі 7 немає нічого особливого, загалом це працює, і це робить логіку

25
00:01:33,163 --> 00:01:37,440
реалізації всієї схеми на апаратному забезпеченні надзвичайно простою.

26
00:01:37,440 --> 00:01:41,886
Тепер, якщо ви хочете зрозуміти, чому відбувається ця магія, візьміть ці 16

27
00:01:41,886 --> 00:01:46,156
індексних міток для наших позицій, але замість того, щоб записувати їх у

28
00:01:46,156 --> 00:01:50,720
базі 10, давайте запишемо їх у двійковому вигляді, починаючи від 0000 до 1111.

29
00:01:50,720 --> 00:01:54,606
Коли ми повертаємо ці двійкові мітки назад у свої коробки, дозвольте мені

30
00:01:54,606 --> 00:01:58,440
підкреслити, що вони відрізняються від даних, які насправді надсилаються.

31
00:01:58,440 --> 00:02:01,220
Вони не що інше, як концептуальний ярлик, який допоможе

32
00:02:01,220 --> 00:02:04,200
вам і мені зрозуміти, звідки взялися чотири паритетні групи.

33
00:02:04,200 --> 00:02:06,982
Елегантність того, що все, на що ми дивимося, описується у

34
00:02:06,982 --> 00:02:10,047
двійковому форматі, можливо, підривається плутаниною, пов’язаною

35
00:02:10,047 --> 00:02:13,160
з тим, що все, на що ми дивимося, описується у двійковому форматі.

36
00:02:13,160 --> 00:02:15,040
Проте воно того варте.

37
00:02:15,040 --> 00:02:19,619
Зосередьте свою увагу лише на останньому фрагменті всіх

38
00:02:19,619 --> 00:02:24,280
цих міток, а потім виділіть позиції, де останній біт є 1.

39
00:02:24,280 --> 00:02:28,261
Що ми отримуємо, це перша з наших чотирьох груп парності, що

40
00:02:28,261 --> 00:02:32,111
означає, що ви можете інтерпретувати цю першу перевірку як

41
00:02:32,111 --> 00:02:36,680
запитання: якщо є помилка, чи є останній біт у позиції цієї помилки 1?

42
00:02:36,680 --> 00:02:41,746
Так само, якщо ви зосередитеся на передостанньому біті та виділите

43
00:02:41,746 --> 00:02:47,040
всі позиції, де це 1, ви отримаєте другу групу парності з нашої схеми.

44
00:02:47,040 --> 00:02:51,437
Іншими словами, ця друга перевірка запитує, привіт, я

45
00:02:51,437 --> 00:02:56,160
знову, якщо є помилка, передостанній біт цієї позиції є 1?

46
00:02:56,160 --> 00:02:57,160
І так далі.

47
00:02:57,160 --> 00:03:03,174
Третя перевірка парності охоплює кожну позицію, передостанній біт якої

48
00:03:03,174 --> 00:03:10,120
ввімкнено, а остання охоплює останні вісім позицій, у яких старший біт дорівнює 1.

49
00:03:10,120 --> 00:03:15,282
Усе, що ми робили раніше, те саме, що відповіді на ці чотири запитання,

50
00:03:15,282 --> 00:03:19,800
що, у свою чергу, те саме, що виклад позиції в двійковому коді.

51
00:03:19,800 --> 00:03:22,080
Сподіваюся, це зрозуміє дві речі.

52
00:03:22,080 --> 00:03:27,140
По-перше, як систематично узагальнювати розміри блоків, які є більшими степенями двійки.

53
00:03:27,140 --> 00:03:32,922
Якщо для опису кожної позиції потрібно більше бітів, наприклад, шість бітів для опису 64

54
00:03:32,922 --> 00:03:38,640
плям, тоді кожен із цих бітів дає вам одну з груп парності, яку нам потрібно перевірити.

55
00:03:38,640 --> 00:03:41,056
Тим із вас, хто дивився головоломку на шахівниці, яку я розгадував

56
00:03:41,056 --> 00:03:43,400
із Метом Паркером, можливо, все це здасться надзвичайно знайомим.

57
00:03:43,400 --> 00:03:46,860
Це та сама основна логіка, але розв’язує іншу проблему

58
00:03:46,860 --> 00:03:49,880
та застосована до шахової дошки з 64 квадратами.

59
00:03:49,880 --> 00:03:53,933
Друге, що, я сподіваюся, це пояснює, чому наші біти парності

60
00:03:53,933 --> 00:03:58,320
сидять у позиціях, які є степенями двійки, наприклад, 1, 2, 4 і 8.

61
00:03:58,320 --> 00:04:03,640
Це позиції, двійкове представлення яких має лише один біт.

62
00:04:03,640 --> 00:04:08,492
Це означає, що кожен із цих бітів парності знаходиться

63
00:04:08,492 --> 00:04:12,640
в одній і лише одній із чотирьох груп парності.

64
00:04:12,640 --> 00:04:19,572
Ви також можете побачити це на більших прикладах, де незалежно від того, наскільки

65
00:04:19,572 --> 00:04:25,920
великим ви станете, кожен біт парності зручно стосується лише однієї з груп.

66
00:04:25,920 --> 00:04:30,394
Як тільки ви зрозумієте, що ці перевірки парності, на яких ми зосередили стільки нашого

67
00:04:30,394 --> 00:04:34,767
часу, є не що інше, як розумний спосіб виразити позицію помилки в двійковому форматі,

68
00:04:34,767 --> 00:04:39,343
тоді ми зможемо провести зв’язок з іншим способом уявлення про хемінг коди, який, мабуть,

69
00:04:39,343 --> 00:04:43,920
є набагато простішим і елегантнішим, і який можна записати за допомогою одного рядка коду.

70
00:04:43,920 --> 00:04:46,200
Він заснований на функції XOR.

71
00:04:46,200 --> 00:04:50,960
XOR, для тих із вас, хто не знає, означає ексклюзивне або.

72
00:04:50,960 --> 00:04:55,580
Коли ви використовуєте XOR двох бітів, він повертає 1, якщо один

73
00:04:55,580 --> 00:05:00,200
із цих бітів увімкнено, але не якщо обидва увімкнено чи вимкнено.

74
00:05:00,200 --> 00:05:03,760
Іншими словами, це парність цих двох бітів.

75
00:05:03,760 --> 00:05:07,840
Як математик я вважаю за краще думати про це як про додавання 2.

76
00:05:07,840 --> 00:05:10,805
Ми також зазвичай говоримо про XOR двох різних бітових

77
00:05:10,805 --> 00:05:14,040
рядків, що в основному виконує цей компонент за компонентом.

78
00:05:14,040 --> 00:05:16,280
Це як доповнення, але куди ніколи не понесеш.

79
00:05:16,280 --> 00:05:19,984
Знову ж таки, більш схильні до математики можуть вважати за краще

80
00:05:19,984 --> 00:05:23,520
думати про це як про додавання двох векторів і зменшення mod 2.

81
00:05:23,520 --> 00:05:27,668
Якщо ви прямо зараз відкриєте якийсь Python і застосуєте операцію

82
00:05:27,668 --> 00:05:31,817
каретки між двома цілими числами, це буде саме те, що він робить,

83
00:05:31,817 --> 00:05:35,400
але лише до розрядних представлень цих чисел під капотом.

84
00:05:35,400 --> 00:05:40,563
Ключовим моментом для нас із вами є те, що використання XOR

85
00:05:40,563 --> 00:05:46,070
багатьох різних бітових рядків є ефективним способом обчислення

86
00:05:46,070 --> 00:05:51,320
пародії на купу окремих груп, як і зі стовпцями, одним махом.

87
00:05:51,320 --> 00:05:55,307
Це дає нам досить хитрий спосіб уявити, що численні перевірки

88
00:05:55,307 --> 00:05:59,680
парності з нашого алгоритму коду Хеммінга об’єднані в одну операцію.

89
00:05:59,680 --> 00:06:02,800
Хоча на перший погляд виглядає зовсім інакше.

90
00:06:02,800 --> 00:06:08,251
Зокрема, запишіть 16 позицій у двійковому вигляді, як ми це робили

91
00:06:08,251 --> 00:06:13,703
раніше, а тепер виділіть позиції, де біт повідомлення ввімкнуто на

92
00:06:13,703 --> 00:06:19,400
1, а потім зберіть ці позиції в один великий стовпець і виконайте XOR.

93
00:06:19,400 --> 00:06:23,863
Ви, напевно, можете здогадатися, що 4 біти, які лежать у нижній

94
00:06:23,863 --> 00:06:28,326
частині в результаті, такі ж, як і 4 перевірки парності, які ми

95
00:06:28,326 --> 00:06:32,720
знали і любимо, але знайдіть хвилинку, щоб подумати, чому саме.

96
00:06:32,720 --> 00:06:37,172
Цей останній стовпець, наприклад, підраховує всі позиції, останній біт яких

97
00:06:37,172 --> 00:06:41,449
дорівнює 1, але ми вже обмежені лише виділеними позиціями, тому фактично

98
00:06:41,449 --> 00:06:45,960
підраховується, скільки виділених позицій походить від першої групи парності.

99
00:06:45,960 --> 00:06:48,520
Чи має це сенс?

100
00:06:48,520 --> 00:06:54,355
Подібним чином у наступному стовпці підраховується кількість позицій у другій

101
00:06:54,355 --> 00:07:00,640
групі парності, позиції, передостанній біт яких дорівнює 1, які також виділені тощо.

102
00:07:00,640 --> 00:07:07,640
Насправді це лише невелика зміна погляду на те саме, що ми робили.

103
00:07:07,640 --> 00:07:10,000
І ви знаєте, куди це йде.

104
00:07:10,000 --> 00:07:14,820
Відправник відповідає за перемикання деяких спеціальних

105
00:07:14,820 --> 00:07:19,640
бітів парності, щоб переконатися, що сума дорівнює 0000.

106
00:07:19,640 --> 00:07:24,152
Тепер, коли ми маємо це таким чином, це дає нам дійсно гарний спосіб подумати про

107
00:07:24,152 --> 00:07:28,720
те, чому ці чотири результуючих біта внизу безпосередньо вказують на місце помилки.

108
00:07:28,720 --> 00:07:32,720
Припустимо, якийсь біт у цьому блоці перемикається з 0 на 1.

109
00:07:32,720 --> 00:07:38,937
Це означає, що позиція цього біта тепер буде включена в загальне XOR,

110
00:07:38,937 --> 00:07:44,800
яке змінює суму з 0 на це нове включене значення, позицію помилки.

111
00:07:44,800 --> 00:07:49,800
Трохи менш очевидно, те ж саме вірно, якщо є помилка, яка змінює 1 на 0.

112
00:07:49,800 --> 00:07:54,473
Розумієте, якщо ви двічі додаєте бітовий рядок, це все одно, що

113
00:07:54,473 --> 00:07:59,000
його взагалі немає, тому що в цьому світі 1 плюс 1 дорівнює 0.

114
00:07:59,000 --> 00:08:02,200
Тож додавання копії цієї позиції до загальної

115
00:08:02,200 --> 00:08:05,400
суми має той самий ефект, що й її переміщення.

116
00:08:05,400 --> 00:08:09,116
І цей ефект, знову ж таки, полягає в тому, що

117
00:08:09,116 --> 00:08:13,480
загальний результат унизу тут вказує на місце помилки.

118
00:08:13,480 --> 00:08:17,698
Щоб проілюструвати, наскільки це елегантно, дозвольте мені показати той рядок коду

119
00:08:17,698 --> 00:08:22,120
Python, на який я посилався раніше, який захопить майже всю логіку на стороні приймача.

120
00:08:22,120 --> 00:08:27,655
Ми почнемо зі створення випадкового масиву з 16 1 і 0 для імітації блоку даних, і я дам

121
00:08:27,655 --> 00:08:32,561
йому біти назви, але, звичайно, на практиці це буде щось, що ми отримуємо від

122
00:08:32,561 --> 00:08:38,033
відправника, а замість будучи випадковим, він містив би 11 біт даних разом із 5 бітами

123
00:08:38,033 --> 00:08:38,600
парності.

124
00:08:38,600 --> 00:08:43,381
Якщо я викликаю функцію enumerateBits, вона об’єднає кожен із

125
00:08:43,381 --> 00:08:48,240
цих бітів із відповідним індексом, у цьому випадку від 0 до 15.

126
00:08:48,240 --> 00:08:52,777
Отже, якщо ми створимо список, який циклічно перебирає всі ці пари,

127
00:08:52,777 --> 00:08:57,248
пари, які виглядають як i, а потім витягуємо лише значення i, лише

128
00:08:57,248 --> 00:09:01,920
індекс, це не так цікаво, ми просто повертаємо ті індекси від 0 до 15.

129
00:09:01,920 --> 00:09:07,585
Але якщо ми додамо умову робити це тільки якщо біт, тобто якщо цей біт є 1,

130
00:09:07,585 --> 00:09:13,400
а не 0, добре, тоді він вилучає лише ті позиції, де відповідний біт увімкнено.

131
00:09:13,400 --> 00:09:20,720
У цьому випадку виглядає так, ніби ці позиції 0, 4, 6, 9 тощо.

132
00:09:20,720 --> 00:09:25,340
Те, що ми хочемо, це зібрати разом усі ці позиції,

133
00:09:25,340 --> 00:09:29,960
позиції бітів, які ввімкнено, а потім XOR їх разом.

134
00:09:29,960 --> 00:09:33,960
Щоб зробити це в Python, дозвольте мені спочатку імпортувати кілька корисних функцій.

135
00:09:33,960 --> 00:09:36,696
Таким чином ми можемо викликати reduce() у цьому списку

136
00:09:36,696 --> 00:09:39,140
та використовувати функцію XOR, щоб зменшити його.

137
00:09:39,140 --> 00:09:44,840
Це в основному з&#39;їдає собі шлях через список, використовуючи по дорозі XOR.

138
00:09:44,840 --> 00:09:48,416
Якщо ви бажаєте, ви можете явно написати цю функцію

139
00:09:48,416 --> 00:09:52,200
XOR без необхідності імпортувати її з будь-якого місця.

140
00:09:52,200 --> 00:09:56,739
Отже, на даний момент виглядає так, що якщо ми зробимо це на нашому

141
00:09:56,739 --> 00:10:02,080
випадковому блоці з 16 біт, він поверне 9, який має двійкове представлення 1001.

142
00:10:02,080 --> 00:10:05,956
Ми не будемо цього робити тут, але ви можете написати функцію, у якій

143
00:10:05,956 --> 00:10:09,612
відправник використовує це двійкове представлення, щоб за потреби

144
00:10:09,612 --> 00:10:13,433
встановити чотири біти парності, зрештою переводячи цей блок у стан,

145
00:10:13,433 --> 00:10:17,200
коли виконання цього рядка коду з повним списком бітів повертає а 0.

146
00:10:17,200 --> 00:10:20,200
Це буде вважатися добре підготовленим блоком.

147
00:10:20,200 --> 00:10:25,429
Цікаво те, що якщо ми перемикаємо будь-який із бітів у цьому списку, імітуючи випадкову

148
00:10:25,429 --> 00:10:30,600
помилку через шум, тоді, якщо ви запустите цей самий рядок коду, він виведе цю помилку.

149
00:10:30,600 --> 00:10:31,920
Хіба це не гарно?

150
00:10:31,920 --> 00:10:37,302
Ви можете отримати цей блок зненацька, запустити на ньому цей єдиний

151
00:10:37,302 --> 00:10:42,920
рядок, і він автоматично видасть позицію помилки або 0, якщо її не було.

152
00:10:42,920 --> 00:10:45,520
І нічого особливого в 16 розмірі тут немає.

153
00:10:45,520 --> 00:10:52,280
Той самий рядок коду спрацював би, якби у вас був список із, скажімо, 256 біт.

154
00:10:52,280 --> 00:10:56,683
Зайве говорити, що тут потрібно написати більше коду, як-от мета-перевірку

155
00:10:56,683 --> 00:11:00,793
парності для виявлення 2-бітових помилок, але ідея полягає в тому, що

156
00:11:00,793 --> 00:11:05,080
майже вся основна логіка нашої схеми зводиться до єдиного скорочення XOR.

157
00:11:05,080 --> 00:11:10,009
Тепер, залежно від вашого комфорту з двійковими кодами та XOR та програмним забезпеченням

158
00:11:10,009 --> 00:11:14,609
загалом, ви можете або вважати цю перспективу трохи заплутаною, або настільки більш

159
00:11:14,609 --> 00:11:19,320
елегантною та простою, що ви дивуєтеся, чому ми не почали з неї з самого початку -іди.

160
00:11:19,320 --> 00:11:23,016
Грубо кажучи, про перспективу множинної перевірки парності легше подумати, якщо

161
00:11:23,016 --> 00:11:26,713
реалізовувати коди Хеммінга в апаратному забезпеченні дуже безпосередньо, а про

162
00:11:26,713 --> 00:11:30,686
перспективу XOR найпростіше подумати, роблячи це в програмному забезпеченні, на більш

163
00:11:30,686 --> 00:11:31,380
високому рівні.

164
00:11:31,380 --> 00:11:36,047
Перший з них найлегше зробити вручну, і я думаю, що він краще справляється з

165
00:11:36,047 --> 00:11:41,018
прищепленням основної інтуїції, яка лежить в основі всього цього, а саме того, що

166
00:11:41,018 --> 00:11:45,746
інформація, необхідна для пошуку однієї помилки, пов’язана з журналом розміру

167
00:11:45,746 --> 00:11:51,020
блоку. , або іншими словами, він зростає по одному біту, коли розмір блоку подвоюється.

168
00:11:51,020 --> 00:11:53,949
Релевантним фактом тут є те, що ця інформація безпосередньо

169
00:11:53,949 --> 00:11:56,440
відповідає тому, скільки резервування нам потрібно.

170
00:11:56,440 --> 00:12:00,067
Це насправді суперечить реагування більшості людей на колінах, коли вони

171
00:12:00,067 --> 00:12:03,594
вперше думають про те, щоб зробити повідомлення стійким до помилок, де

172
00:12:03,594 --> 00:12:07,520
зазвичай скопіювати все повідомлення є першим інстинктом, який спадає на думку.

173
00:12:07,520 --> 00:12:11,239
І, до речі, є цілий інший спосіб, у який ви іноді бачите представлені

174
00:12:11,239 --> 00:12:14,800
коди Хеммінга, коли ви множите повідомлення на одну велику матрицю.

175
00:12:14,800 --> 00:12:19,893
Це начебто добре, тому що це пов’язує його з більш широкою сім’єю лінійних кодів, але я

176
00:12:19,893 --> 00:12:24,349
думаю, що це майже не дає інтуїції щодо того, звідки він походить або як він

177
00:12:24,349 --> 00:12:25,160
масштабується.

178
00:12:25,160 --> 00:12:28,764
Говорячи про масштабування, ви можете помітити, що ефективність

179
00:12:28,764 --> 00:12:32,200
цієї схеми стає лише кращою, коли ми збільшуємо розмір блоку.

180
00:12:32,200 --> 00:12:37,753
Наприклад, ми бачили, що з 256 бітами ви використовуєте лише 3%

181
00:12:37,753 --> 00:12:43,480
цього простору для резервування, і з цього моменту все стає краще.

182
00:12:43,480 --> 00:12:46,289
Оскільки кількість бітів парності зростає один

183
00:12:46,289 --> 00:12:49,040
за одним, розмір блоку продовжує подвоюватися.

184
00:12:49,040 --> 00:12:53,165
І якщо ви доведете це до крайності, у вас може бути блок, скажімо,

185
00:12:53,165 --> 00:12:57,044
з мільйоном біт, де ви б буквально відтворювали 20 запитань із

186
00:12:57,044 --> 00:13:00,800
перевіркою парності, і він використовує лише 21 біт парності.

187
00:13:00,800 --> 00:13:04,751
І якщо ви відступите назад, щоб подумати про перегляд мільйона

188
00:13:04,751 --> 00:13:08,640
бітів і пошук однієї помилки, це справді виглядає божевільним.

189
00:13:08,640 --> 00:13:13,330
Проблема, звісно, полягає в тому, що з більшим блоком зростає ймовірність побачити

190
00:13:13,330 --> 00:13:18,360
більше однієї або двох бітових помилок, а коди Хеммінга не обробляють нічого, крім цього.

191
00:13:18,360 --> 00:13:22,588
Тож на практиці вам потрібно знайти правильний розмір, щоб ймовірність

192
00:13:22,588 --> 00:13:26,520
занадто великої кількості перевертань бітів не була надто високою.

193
00:13:26,520 --> 00:13:31,228
Крім того, на практиці помилки, як правило, виникають невеликими пакетами,

194
00:13:31,228 --> 00:13:36,062
які повністю знищують один блок, тому одна з поширених тактик, щоб допомогти

195
00:13:36,062 --> 00:13:40,645
розподілити сплеск помилок між багатьма різними блоками, полягає в тому,

196
00:13:40,645 --> 00:13:45,480
щоб переплести ці блоки, як це, перш ніж вони будуть розіслано або збережено.

197
00:13:45,480 --> 00:13:48,992
Знову ж таки, багато чого з цього стає абсолютно спірним через більш

198
00:13:48,992 --> 00:13:52,199
сучасні коди, як-от набагато частіше використовуваний алгоритм

199
00:13:52,199 --> 00:13:55,660
Ріда-Соломона, який особливо добре обробляє пакетні помилки, і його

200
00:13:55,660 --> 00:13:59,580
можна налаштувати так, щоб бути стійким до більшої кількості помилок на блок.

201
00:13:59,580 --> 00:14:03,000
Але це тема іншого разу.

202
00:14:03,000 --> 00:14:06,750
У своїй книзі «Мистецтво займатися наукою та технікою» Хеммінг надзвичайно

203
00:14:06,750 --> 00:14:10,700
відверто розповідає про те, наскільки звивистим було його відкриття цього коду.

204
00:14:10,700 --> 00:14:14,813
Спочатку він випробував усілякі різні схеми, що передбачають організацію

205
00:14:14,813 --> 00:14:18,420
бітів у частини решітки вищого виміру та такі дивні речі, як ця.

206
00:14:18,420 --> 00:14:22,964
Ідея про те, що можна змусити перевірку парності конспірувати таким чином, щоб

207
00:14:22,964 --> 00:14:27,624
визначити місце помилки, прийшла до Геммінга лише тоді, коли він відступив після

208
00:14:27,624 --> 00:14:32,457
купи інших аналізів і запитав: гаразд, що є найефективнішим, що я можу можливо бути

209
00:14:32,457 --> 00:14:32,860
про це?

210
00:14:32,860 --> 00:14:37,511
Він також був відвертим, наскільки важливо, щоб він уже думав про перевірку

211
00:14:37,511 --> 00:14:42,040
парності, яка була б набагато менш поширеною в 1940-х роках, ніж сьогодні.

212
00:14:42,040 --> 00:14:46,063
У цій книзі він півдюжини разів посилається на цитату

213
00:14:46,063 --> 00:14:49,640
Луї Пастера: удача сприяє підготовленому розуму.

214
00:14:49,640 --> 00:14:55,120
Розумні ідеї часто виглядають оманливо простими, тому їх легко недооцінити.

215
00:14:55,120 --> 00:14:58,591
Наразі я щиро сподіваюся, що коди Хеммінга або принаймні

216
00:14:58,591 --> 00:15:01,820
можливість таких кодів здаються вам майже очевидними.

217
00:15:01,820 --> 00:15:04,845
Але ви не повинні обманювати себе, думаючи, що

218
00:15:04,845 --> 00:15:08,000
вони насправді очевидні, тому що це точно не так.

219
00:15:08,000 --> 00:15:11,995
Однією з причин того, що розумні ідеї виглядають оманливо легко, є те, що ми

220
00:15:11,995 --> 00:15:15,938
завжди бачимо лише кінцевий результат, очищаємо те, що було брудним, ніколи

221
00:15:15,938 --> 00:15:19,829
не згадуємо всі неправильні повороти, недооцінюючи, наскільки величезним є

222
00:15:19,829 --> 00:15:23,980
простір досліджуваних можливостей на початку проблеми. процес вирішення, все це.

223
00:15:23,980 --> 00:15:25,280
Але в цілому це вірно.

224
00:15:25,280 --> 00:15:28,535
Я думаю, що для деяких особливих винаходів є друга,

225
00:15:28,535 --> 00:15:31,040
глибша причина, чому ми їх недооцінюємо.

226
00:15:31,040 --> 00:15:35,194
Розуміння інформації в термінах бітів справді об’єдналося в повну теорію лише до

227
00:15:35,194 --> 00:15:39,400
1948 року, коли Клод Шеннон опублікував фундаментальну статтю з теорії інформації.

228
00:15:39,400 --> 00:15:43,440
Це практично збігалося з тим, коли Хеммінг розробив свій алгоритм.

229
00:15:43,440 --> 00:15:46,749
Це був той самий основоположний документ, який показав, у певному

230
00:15:46,749 --> 00:15:50,259
сенсі, що ефективне виправлення помилок завжди можливе, незалежно від

231
00:15:50,259 --> 00:15:53,920
того, наскільки висока ймовірність перевертань бітів, принаймні в теорії.

232
00:15:53,920 --> 00:15:58,131
Шеннон і Хеммінг, до речі, ділилися офісом у Bell Labs, незважаючи на те,

233
00:15:58,131 --> 00:16:02,400
що працювали над дуже різними речами, що навряд чи здається тут випадковим.

234
00:16:02,400 --> 00:16:05,940
Перемотуємо вперед на кілька десятиліть, і сьогодні багато з

235
00:16:05,940 --> 00:16:09,423
нас настільки занурені в роздуми про біти та інформацію, що

236
00:16:09,423 --> 00:16:13,080
легко не помітити, наскільки відмінним був цей спосіб мислення.

237
00:16:13,080 --> 00:16:15,531
За іронією долі, ідеї, які найглибше формують уявлення майбутнього покоління,

238
00:16:15,531 --> 00:16:17,920
зрештою виглядатимуть це майбутнє покоління простішим, ніж воно є насправді.

