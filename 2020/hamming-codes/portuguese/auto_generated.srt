1
00:00:03,620 --> 00:00:06,770
Você já se perguntou como é possível riscar um CD ou 

2
00:00:06,770 --> 00:00:10,100
DVD e ainda assim reproduzir tudo o que está armazenado?

3
00:00:10,900 --> 00:00:13,647
O arranhão realmente afeta os 1s e 0s no disco, 

4
00:00:13,647 --> 00:00:17,195
então ele lê dados diferentes daqueles que foram armazenados, 

5
00:00:17,195 --> 00:00:21,430
mas a menos que esteja realmente riscado, os bits lidos são decodificados 

6
00:00:21,430 --> 00:00:25,837
precisamente no mesmo arquivo que foi codificado nele, um cópia bit por bit, 

7
00:00:25,837 --> 00:00:27,440
apesar de todos esses erros.

8
00:00:27,440 --> 00:00:32,143
Há toda uma pilha de inteligência matemática que nos permite armazenar dados e, 

9
00:00:32,143 --> 00:00:36,200
igualmente importante, transmiti-los de uma forma resistente a erros.

10
00:00:36,200 --> 00:00:38,838
Bem, ok, na verdade não é preciso muita inteligência 

11
00:00:38,838 --> 00:00:40,880
para descobrir uma maneira de fazer isso.

12
00:00:40,880 --> 00:00:45,979
Qualquer arquivo, seja um vídeo, som ou texto, algum código, uma imagem, 

13
00:00:45,979 --> 00:00:50,380
seja o que for, é, em última análise, uma sequência de 1s e 0s.

14
00:00:50,680 --> 00:00:53,392
E uma estratégia simples para corrigir qualquer bit 

15
00:00:53,392 --> 00:00:56,000
invertido seria armazenar três cópias de cada bit.

16
00:00:57,580 --> 00:01:00,938
Então a máquina que lê este arquivo poderia comparar essas três cópias 

17
00:01:00,938 --> 00:01:04,060
e sempre tirar a melhor 2 de 3 sempre que houver uma discrepância.

18
00:01:07,160 --> 00:01:10,860
Mas o que isso significa é usar dois terços do seu espaço para redundância.

19
00:01:11,480 --> 00:01:13,613
E mesmo assim, apesar de todo esse espaço cedido, 

20
00:01:13,613 --> 00:01:17,240
não há nenhuma garantia forte sobre o que acontecerá se mais de um bit for invertido.

21
00:01:17,980 --> 00:01:22,085
A questão muito mais interessante é como fazer com que os erros possam ser corrigidos, 

22
00:01:22,085 --> 00:01:24,020
abrindo mão do mínimo de espaço possível.

23
00:01:24,520 --> 00:01:28,163
Por exemplo, usando o método que você aprenderá neste vídeo, 

24
00:01:28,163 --> 00:01:33,360
você poderia armazenar seus dados em blocos de 256 bits, onde cada bloco usa 9 bits, 9!

25
00:01:33,760 --> 00:01:37,073
para atuar como uma espécie de redundância, e os outros 247 bits são livres 

26
00:01:37,073 --> 00:01:40,300
para transportar qualquer mensagem ou dado significativo que você desejar.

27
00:01:40,900 --> 00:01:44,251
E ainda vai acontecer que se algum bit for invertido aqui, 

28
00:01:44,251 --> 00:01:48,455
só de olhar esse bloco e nada mais, uma máquina vai conseguir identificar 

29
00:01:48,455 --> 00:01:52,660
que houve um erro e exatamente onde ele estava para saber como corrigi-lo.

30
00:01:52,660 --> 00:01:54,620
E honestamente, isso parece mágico.

31
00:01:55,440 --> 00:01:58,307
E para este esquema específico, se dois bits forem invertidos, 

32
00:01:58,307 --> 00:02:01,312
a máquina será pelo menos capaz de detectar que houve dois erros, 

33
00:02:01,312 --> 00:02:02,860
embora não saiba como corrigi-los.

34
00:02:03,520 --> 00:02:05,192
Falaremos um pouco mais tarde sobre como isso é 

35
00:02:05,192 --> 00:02:06,900
dimensionado para blocos com tamanhos diferentes.

36
00:02:07,860 --> 00:02:10,675
Métodos que permitem corrigir erros como esse são conhecidos, 

37
00:02:10,675 --> 00:02:12,900
razoavelmente, como códigos de correção de erros.

38
00:02:13,660 --> 00:02:16,346
Durante a maior parte do século passado, este campo tem sido 

39
00:02:16,346 --> 00:02:18,901
uma fonte realmente rica de matemática surpreendentemente 

40
00:02:18,901 --> 00:02:21,940
profunda que é incorporada aos dispositivos que usamos todos os dias.

41
00:02:22,840 --> 00:02:26,989
O objetivo aqui é fornecer uma compreensão completa de um dos primeiros exemplos, 

42
00:02:26,989 --> 00:02:28,660
conhecido como código de Hamming.

43
00:02:29,520 --> 00:02:32,953
E, a propósito, a maneira como estou pensando na estrutura deste vídeo tem menos 

44
00:02:32,953 --> 00:02:36,217
a ver com explicá-lo da forma mais direta possível e mais com uma questão de 

45
00:02:36,217 --> 00:02:39,820
incentivá-lo a inventá-lo por si mesmo, com um pouco de orientação gentil aqui e ali.

46
00:02:40,120 --> 00:02:43,104
Então, quando você sentir que está vendo onde as coisas estão indo em algum momento, 

47
00:02:43,104 --> 00:02:45,210
reserve um momento para fazer uma pausa, preveja ativamente 

48
00:02:45,210 --> 00:02:46,720
qual será o esquema antes que eu lhe conte.

49
00:02:47,240 --> 00:02:50,939
Além disso, se você quiser que sua compreensão chegue ao nível do hardware, 

50
00:02:50,939 --> 00:02:54,297
Ben Eater fez um vídeo em conjunto com este mostrando como realmente 

51
00:02:54,297 --> 00:02:58,240
implementar códigos de Hamming em protoboards, o que é extremamente satisfatório.

52
00:02:59,300 --> 00:03:02,577
Você deve saber que os códigos de Hamming não são tão amplamente usados 

53
00:03:02,577 --> 00:03:05,490
quanto os códigos mais modernos, como o algoritmo Reed-Solomon, 

54
00:03:05,490 --> 00:03:08,767
mas há uma certa magia no contraste entre o quão impossível essa tarefa 

55
00:03:08,767 --> 00:03:11,771
parece no início e o quão totalmente razoável ela parece uma vez. 

56
00:03:11,771 --> 00:03:13,000
você aprende sobre Hamming.

57
00:03:13,720 --> 00:03:16,159
O princípio básico da correção de erros é que, 

58
00:03:16,159 --> 00:03:18,858
em um vasto espaço de todas as mensagens possíveis, 

59
00:03:18,858 --> 00:03:22,180
apenas alguns subconjuntos serão considerados mensagens válidas.

60
00:03:22,800 --> 00:03:25,196
Como analogia, pense em palavras escritas corretamente 

61
00:03:25,196 --> 00:03:26,940
versus palavras escritas incorretamente.

62
00:03:28,900 --> 00:03:33,169
Sempre que uma mensagem válida é alterada, o receptor é responsável por corrigir o que 

63
00:03:33,169 --> 00:03:37,340
vê de volta ao vizinho válido mais próximo, como você faria com um erro de digitação.

64
00:03:38,220 --> 00:03:41,288
Porém, criar um algoritmo concreto para categorizar mensagens 

65
00:03:41,288 --> 00:03:44,060
como essa de maneira eficiente exige certa inteligência.

66
00:03:46,780 --> 00:03:50,497
A história começa na década de 1940, quando um jovem Richard Hamming trabalhava 

67
00:03:50,497 --> 00:03:54,074
para o Bell Labs, e parte de seu trabalho envolvia o uso de um computador de 

68
00:03:54,074 --> 00:03:57,420
cartão perfurado muito grande e caro, ao qual ele tinha acesso limitado.

69
00:03:57,800 --> 00:04:00,078
E os programas que ele colocava continuavam falhando, 

70
00:04:00,078 --> 00:04:02,400
porque de vez em quando um trecho era mal interpretado.

71
00:04:03,120 --> 00:04:05,791
Sendo a frustração o cadinho da invenção, ele ficou tão farto 

72
00:04:05,791 --> 00:04:08,420
que inventou o primeiro código de correção de erros do mundo.

73
00:04:09,060 --> 00:04:11,763
Há muitas maneiras diferentes de enquadrar os códigos de Hamming, mas, 

74
00:04:11,763 --> 00:04:14,961
numa primeira passagem, vamos analisá-los da maneira como o próprio Hamming pensava 

75
00:04:14,961 --> 00:04:15,380
sobre eles.

76
00:04:16,519 --> 00:04:20,940
Vamos usar um exemplo simples, mas não muito simples, um bloco de 16 bits.

77
00:04:21,820 --> 00:04:24,740
Numeraremos as posições desses bits de 0 a 15.

78
00:04:25,620 --> 00:04:29,411
Os dados reais que queremos armazenar representarão apenas 12 desses bits, 

79
00:04:29,411 --> 00:04:33,000
enquanto 4 das posições são reservadas como uma espécie de redundância.

80
00:04:33,900 --> 00:04:36,862
A palavra redundante aqui não significa simplesmente copiar, afinal, 

81
00:04:36,862 --> 00:04:40,040
esses 4 bits não nos dão espaço suficiente para copiar cegamente os dados.

82
00:04:40,720 --> 00:04:44,415
Em vez disso, eles precisarão ser um tipo de redundância muito mais sutil e inteligente, 

83
00:04:44,415 --> 00:04:47,280
não adicionando nenhuma informação nova, mas adicionando resiliência.

84
00:04:48,600 --> 00:04:52,289
Você pode esperar que esses 4 bits especiais venham bem embalados juntos, 

85
00:04:52,289 --> 00:04:54,982
talvez no final ou algo parecido, mas como você verá, 

86
00:04:54,982 --> 00:04:58,722
colocá-los em posições que são potências de 2 permite algo que é realmente 

87
00:04:58,722 --> 00:04:59,620
elegante no final.

88
00:05:00,200 --> 00:05:03,540
Também pode lhe dar uma pequena dica sobre como isso é dimensionado para blocos maiores.

89
00:05:04,900 --> 00:05:07,875
Além disso, tecnicamente, acaba sendo apenas 11 bits de dados. 

90
00:05:07,875 --> 00:05:11,276
Você descobrirá que há uma pequena nuance no que acontece na posição 0, 

91
00:05:11,276 --> 00:05:13,260
mas não se preocupe com isso por enquanto.

92
00:05:14,140 --> 00:05:17,976
Como qualquer algoritmo de correção de erros, isso envolverá dois jogadores, 

93
00:05:17,976 --> 00:05:21,662
um remetente responsável por definir esses 4 bits especiais e um receptor 

94
00:05:21,662 --> 00:05:25,200
responsável por realizar algum tipo de verificação e corrigir os erros.

95
00:05:25,200 --> 00:05:28,336
É claro que as palavras remetente e destinatário realmente se referem a 

96
00:05:28,336 --> 00:05:30,688
máquinas ou software que fazem todas as verificações, 

97
00:05:30,688 --> 00:05:33,041
e a ideia de mensagem tem um significado muito amplo, 

98
00:05:33,041 --> 00:05:34,740
para incluir coisas como armazenamento.

99
00:05:35,340 --> 00:05:38,461
Afinal, armazenar dados é a mesma coisa que enviar uma mensagem 

100
00:05:38,461 --> 00:05:41,680
apenas do passado para o futuro, em vez de de um lugar para outro.

101
00:05:42,560 --> 00:05:46,017
Então essa é a configuração, mas antes de começarmos precisamos falar sobre 

102
00:05:46,017 --> 00:05:50,112
uma ideia relacionada que estava fresca na mente de Hamming no momento de sua descoberta, 

103
00:05:50,112 --> 00:05:53,843
um método que permite detectar quaisquer erros de bit único, mas não corrigi-los, 

104
00:05:53,843 --> 00:05:56,300
conhecido no negócio como uma verificação de paridade.

105
00:05:56,880 --> 00:06:00,282
Para uma verificação de paridade, separamos apenas um bit que o remetente é 

106
00:06:00,282 --> 00:06:03,820
responsável pelo ajuste, e o restante fica livre para transportar uma mensagem.

107
00:06:04,880 --> 00:06:07,984
A única função deste bit especial é garantir que 

108
00:06:07,984 --> 00:06:11,280
o número total de 1s na mensagem seja um número par.

109
00:06:12,080 --> 00:06:15,549
Então, por exemplo, agora, esse número total de 1s é 7, isso é ímpar, 

110
00:06:15,549 --> 00:06:19,960
então o remetente precisa inverter esse bit especial para ser 1, tornando a contagem par.

111
00:06:20,800 --> 00:06:23,922
Mas se o bloco já tivesse começado com um número par de 1s, 

112
00:06:23,922 --> 00:06:26,420
então esse bit especial teria sido mantido em 0.

113
00:06:27,340 --> 00:06:30,405
Isso é muito simples, aparentemente simples, mas é uma maneira 

114
00:06:30,405 --> 00:06:33,617
incrivelmente elegante de destilar a ideia de mudança em qualquer 

115
00:06:33,617 --> 00:06:36,780
lugar de uma mensagem para ser refletida em uma única informação.

116
00:06:37,500 --> 00:06:41,141
Observe que se qualquer bit desta mensagem for invertido, 

117
00:06:41,141 --> 00:06:46,540
seja de 0 para 1 ou de 1 para 0, isso altera a contagem total de 1s de par para ímpar.

118
00:06:47,980 --> 00:06:52,583
Portanto, se você é o receptor, olha para esta mensagem e vê um número ímpar de 1s, 

119
00:06:52,583 --> 00:06:57,460
pode ter certeza de que ocorreu algum erro, mesmo que não tenha ideia de onde ele estava.

120
00:06:58,500 --> 00:07:03,340
No jargão, se um grupo de bits tem um número par ou ímpar de 1s é conhecido como paridade.

121
00:07:04,860 --> 00:07:07,515
Você também pode usar números e dizer que a paridade é 0 ou 1, 

122
00:07:07,515 --> 00:07:10,720
o que normalmente é mais útil quando você começa a fazer contas com a ideia.

123
00:07:11,220 --> 00:07:13,709
E esse bit especial que o remetente usa para controlar 

124
00:07:13,709 --> 00:07:15,520
a paridade é chamado de bit de paridade.

125
00:07:17,560 --> 00:07:21,114
E, na verdade, devemos ser claros, se o receptor vê uma paridade ímpar, 

126
00:07:21,114 --> 00:07:25,360
isso não significa necessariamente que houve apenas um erro, pode ter havido 3 erros, 

127
00:07:25,360 --> 00:07:29,260
ou 5, ou qualquer outro número ímpar, mas eles podem ter certeza que não era 0.

128
00:07:29,980 --> 00:07:33,471
Por outro lado, se houvesse 2 erros, ou qualquer número par de erros, 

129
00:07:33,471 --> 00:07:37,561
a contagem final de 1s ainda seria par, de modo que o receptor não pode ter total 

130
00:07:37,561 --> 00:07:41,551
confiança de que uma contagem par significa necessariamente que a mensagem está 

131
00:07:41,551 --> 00:07:42,300
livre de erros.

132
00:07:42,840 --> 00:07:45,820
Você pode reclamar que uma mensagem que fica confusa com apenas 

133
00:07:45,820 --> 00:07:49,080
inversões de 2 bits é muito fraca, e você estaria absolutamente certo.

134
00:07:49,700 --> 00:07:52,798
Tenha em mente, porém, que não existe nenhum método de detecção 

135
00:07:52,798 --> 00:07:55,897
ou correção de erros que possa lhe dar 100% de confiança de que 

136
00:07:55,897 --> 00:07:58,900
a mensagem que você recebe é aquela que o remetente pretendia.

137
00:07:59,580 --> 00:08:02,396
Afinal, ruído aleatório suficiente sempre poderia transformar 

138
00:08:02,396 --> 00:08:05,440
uma mensagem válida em outra mensagem válida apenas por puro acaso.

139
00:08:06,240 --> 00:08:10,781
Em vez disso, o objetivo é criar um esquema que seja robusto até um certo número 

140
00:08:10,781 --> 00:08:15,380
máximo de erros, ou talvez reduzir a probabilidade de um falso positivo como este.

141
00:08:16,260 --> 00:08:19,412
As verificações de paridade por si só são bastante fracas, 

142
00:08:19,412 --> 00:08:23,473
mas ao destilar a ideia de mudança numa mensagem completa até um único bit, 

143
00:08:23,473 --> 00:08:27,160
o que nos dão é um poderoso alicerce para esquemas mais sofisticados.

144
00:08:27,940 --> 00:08:32,090
Por exemplo, enquanto Hamming procurava uma maneira de identificar onde ocorreu um erro, 

145
00:08:32,090 --> 00:08:34,655
não apenas que ocorreu, seu principal insight foi que, 

146
00:08:34,655 --> 00:08:38,105
se você aplicar algumas verificações de paridade não à mensagem completa, 

147
00:08:38,105 --> 00:08:40,670
mas a certos subconjuntos cuidadosamente selecionados, 

148
00:08:40,670 --> 00:08:43,981
poderá perguntar uma série mais refinada de perguntas que determinam a 

149
00:08:43,981 --> 00:08:45,940
localização de qualquer erro de bit único.

150
00:08:46,680 --> 00:08:49,430
A sensação geral é como jogar um jogo de 20 perguntas, 

151
00:08:49,430 --> 00:08:53,380
fazendo perguntas sim ou não que cortam o espaço de possibilidades pela metade.

152
00:08:54,160 --> 00:08:58,134
Por exemplo, digamos que fazemos uma verificação de paridade apenas nesses 8 bits, 

153
00:08:58,134 --> 00:08:59,380
todas as posições ímpares.

154
00:09:00,100 --> 00:09:04,146
Então, se um erro for detectado, ele fornece ao receptor um pouco mais de informação 

155
00:09:04,146 --> 00:09:08,240
sobre onde especificamente está o erro, ou seja, que ele está em uma posição estranha.

156
00:09:08,940 --> 00:09:11,649
Se nenhum erro for detectado entre esses 8 bits, 

157
00:09:11,649 --> 00:09:16,240
isso significa que não há erro algum ou que está em algum lugar nas posições pares.

158
00:09:17,180 --> 00:09:20,595
Você pode pensar que limitar uma verificação de paridade a metade dos bits 

159
00:09:20,595 --> 00:09:24,011
a torna menos eficaz, mas quando feita em conjunto com outras verificações 

160
00:09:24,011 --> 00:09:27,200
bem escolhidas, contra-intuitivamente nos dá algo muito mais poderoso.

161
00:09:29,240 --> 00:09:31,839
Para realmente configurar essa verificação de paridade, 

162
00:09:31,839 --> 00:09:35,645
lembre-se de que é necessário reservar algum bit especial que controle a paridade 

163
00:09:35,645 --> 00:09:36,620
desse grupo completo.

164
00:09:37,480 --> 00:09:39,180
Aqui vamos apenas escolher a posição 1.

165
00:09:39,720 --> 00:09:42,893
No exemplo mostrado, a paridade desses 8 bits é atualmente ímpar, 

166
00:09:42,893 --> 00:09:46,980
então o remetente é responsável por alternar esse bit de paridade, e agora ele é par.

167
00:09:47,940 --> 00:09:50,680
Esta é apenas 1 das 4 verificações de paridade que faremos.

168
00:09:50,920 --> 00:09:54,628
A segunda verificação está entre os 8 bits na metade direita da grade, 

169
00:09:54,628 --> 00:09:56,300
pelo menos como desenhamos aqui.

170
00:09:56,680 --> 00:09:59,806
Desta vez, podemos usar a posição 2 como um bit de paridade, 

171
00:09:59,806 --> 00:10:02,523
de modo que esses 8 bits já tenham uma paridade par, 

172
00:10:02,523 --> 00:10:06,060
e o remetente pode se sentir bem em deixar o bit número 2 inalterado.

173
00:10:07,020 --> 00:10:11,252
Então, do outro lado, se o receptor verificar a paridade deste grupo e achar que 

174
00:10:11,252 --> 00:10:15,380
é estranho, saberá que o erro está em algum lugar entre esses 8 bits à direita.

175
00:10:15,820 --> 00:10:18,275
Caso contrário, significa que não há erro ou que 

176
00:10:18,275 --> 00:10:20,580
o erro está em algum lugar na metade esquerda.

177
00:10:21,120 --> 00:10:23,926
Ou acho que poderia ter havido dois erros, mas por enquanto 

178
00:10:23,926 --> 00:10:26,500
vamos assumir que há no máximo um erro em todo o bloco.

179
00:10:26,940 --> 00:10:28,740
As coisas quebram completamente por mais do que isso.

180
00:10:29,160 --> 00:10:31,196
Aqui, antes de olharmos para as próximas duas verificações, 

181
00:10:31,196 --> 00:10:34,149
pare um momento para pensar sobre o que estas duas primeiras nos permitem fazer quando 

182
00:10:34,149 --> 00:10:35,100
as consideramos em conjunto.

183
00:10:35,800 --> 00:10:39,660
Digamos que você detecte um erro entre as colunas ímpares e entre a metade direita.

184
00:10:40,200 --> 00:10:43,040
Significa necessariamente que o erro está em algum lugar na última coluna.

185
00:10:43,820 --> 00:10:47,467
Se não houve erro na coluna ímpar, mas houve um na metade direita, 

186
00:10:47,467 --> 00:10:49,700
isso indica que está na penúltima coluna.

187
00:10:50,440 --> 00:10:52,951
Da mesma forma, se houver um erro nas colunas ímpares, 

188
00:10:52,951 --> 00:10:56,560
mas não na metade direita, você sabe que está em algum lugar da segunda coluna.

189
00:10:56,560 --> 00:10:59,500
E se nenhuma dessas duas verificações de paridade detectar nada, 

190
00:10:59,500 --> 00:11:03,120
significa que o único lugar onde um erro pode estar é na coluna mais à esquerda.

191
00:11:03,340 --> 00:11:06,120
Mas também pode significar simplesmente que não há erro algum.

192
00:11:06,300 --> 00:11:08,569
O que é uma forma bastante elaborada de dizer que duas 

193
00:11:08,569 --> 00:11:10,840
verificações de paridade nos permitem definir a coluna.

194
00:11:11,480 --> 00:11:13,640
A partir daqui, você provavelmente pode adivinhar o que se segue.

195
00:11:13,800 --> 00:11:16,140
Fazemos basicamente a mesma coisa, mas para as linhas.

196
00:11:16,440 --> 00:11:19,022
Haverá uma verificação de paridade nas linhas ímpares, 

197
00:11:19,022 --> 00:11:20,900
usando a posição 4 como bit de paridade.

198
00:11:21,380 --> 00:11:24,172
Portanto, neste exemplo, esse grupo já tem uma paridade par, 

199
00:11:24,172 --> 00:11:25,820
então o bit 4 seria definido como 0.

200
00:11:26,560 --> 00:11:29,787
E finalmente há uma verificação de paridade nas duas linhas inferiores, 

201
00:11:29,787 --> 00:11:31,580
usando a posição 8 como bit de paridade.

202
00:11:32,120 --> 00:11:34,620
Nesse caso, parece que o remetente precisa ativar 

203
00:11:34,620 --> 00:11:36,820
o bit 8 para dar paridade uniforme ao grupo.

204
00:11:37,700 --> 00:11:40,328
Assim como as duas primeiras verificações nos permitem definir a coluna, 

205
00:11:40,328 --> 00:11:41,840
as próximas duas permitem definir a linha.

206
00:11:42,880 --> 00:11:47,540
Por exemplo, imagine que durante a transmissão ocorre um erro, digamos, na posição 3.

207
00:11:48,180 --> 00:11:52,254
Bem, isso afeta o primeiro grupo de paridade, e também afeta o segundo grupo de paridade, 

208
00:11:52,254 --> 00:11:55,560
então o receptor sabe que há um erro em algum lugar na coluna da direita.

209
00:11:56,100 --> 00:12:00,540
Mas isso não afeta o terceiro grupo e não afeta o quarto grupo.

210
00:12:01,240 --> 00:12:04,273
E isso permite que o receptor identifique o erro até a primeira linha, 

211
00:12:04,273 --> 00:12:07,520
o que significa necessariamente a posição 3, para que possa corrigir o erro.

212
00:12:08,580 --> 00:12:11,301
Você pode gostar de reservar um momento para se convencer de 

213
00:12:11,301 --> 00:12:14,155
que as respostas a essas quatro perguntas sempre permitirão que 

214
00:12:14,155 --> 00:12:17,100
você identifique um local específico, não importa onde ele esteja.

215
00:12:17,720 --> 00:12:20,313
Na verdade, os astutos entre vocês podem até notar 

216
00:12:20,313 --> 00:12:23,060
uma conexão entre essas questões e a contagem binária.

217
00:12:23,500 --> 00:12:26,250
E se você fizer isso, novamente deixe-me enfatizar, faça uma pausa, 

218
00:12:26,250 --> 00:12:28,920
tente você mesmo estabelecer a conexão antes que eu estrague tudo.

219
00:12:30,500 --> 00:12:34,337
Se você está se perguntando o que acontece se um bit de paridade for afetado, 

220
00:12:34,337 --> 00:12:36,060
bem, você pode simplesmente tentar.

221
00:12:36,440 --> 00:12:40,141
Reserve um momento para pensar em como qualquer erro entre esses quatro bits 

222
00:12:40,141 --> 00:12:44,180
especiais será rastreado como qualquer outro, com o mesmo grupo de quatro perguntas.

223
00:12:47,060 --> 00:12:50,061
Isso realmente não importa, já que no final das contas o que queremos é proteger 

224
00:12:50,061 --> 00:12:53,100
os bits da mensagem, os bits de correção de erros estão apenas seguindo em frente.

225
00:12:53,600 --> 00:12:57,820
Mas proteger também esses bits é algo que naturalmente sai do esquema como subproduto.

226
00:12:59,200 --> 00:13:01,760
Você também pode gostar de antecipar como isso será dimensionado.

227
00:13:02,300 --> 00:13:06,605
Se usarmos um bloco de 256 bits, por exemplo, para definir uma localização, 

228
00:13:06,605 --> 00:13:09,947
você precisará apenas de oito perguntas de sim ou não para 

229
00:13:09,947 --> 00:13:12,780
pesquisar binariamente até algum ponto específico.

230
00:13:15,640 --> 00:13:18,004
E lembre-se, cada pergunta exige a renúncia de apenas 

231
00:13:18,004 --> 00:13:20,500
um bit para definir a verificação de paridade apropriada.

232
00:13:23,160 --> 00:13:26,090
Alguns de vocês já devem ter percebido isso, mas falaremos mais tarde sobre a 

233
00:13:26,090 --> 00:13:29,360
maneira sistemática de descobrir quais são essas questões em apenas um ou dois minutos.

234
00:13:29,880 --> 00:13:31,437
Esperamos que este esboço seja suficiente para 

235
00:13:31,437 --> 00:13:33,260
avaliar a eficiência do que estamos desenvolvendo aqui.

236
00:13:33,260 --> 00:13:37,058
A primeira coisa, exceto aqueles oito bits de paridade destacados, 

237
00:13:37,058 --> 00:13:41,820
pode ser o que você quiser, transportando qualquer mensagem ou dado que você quiser.

238
00:13:41,820 --> 00:13:44,613
Os 8 bits são redundantes no sentido de que são completamente 

239
00:13:44,613 --> 00:13:47,136
determinados pelo resto da mensagem, mas são muito mais 

240
00:13:47,136 --> 00:13:50,020
inteligentes do que simplesmente copiar a mensagem como um todo.

241
00:13:53,600 --> 00:13:56,076
E ainda assim, por tão pouco desistido, você seria capaz 

242
00:13:56,076 --> 00:13:58,380
de identificar e corrigir qualquer erro de bit único.

243
00:13:59,200 --> 00:14:00,400
Bem, quase.

244
00:14:00,960 --> 00:14:04,748
Ok, então o único problema aqui é que se nenhuma das quatro verificações de 

245
00:14:04,748 --> 00:14:08,885
paridade detectar um erro, o que significa que todos os subconjuntos especialmente 

246
00:14:08,885 --> 00:14:13,022
selecionados de 8 bits têm paridades pares, exatamente como o remetente pretendia, 

247
00:14:13,022 --> 00:14:16,860
então isso significa que não houve erro algum , ou nos restringe à posição 0.

248
00:14:17,740 --> 00:14:22,262
Veja, com quatro perguntas de sim ou não, temos 16 resultados possíveis para nossas 

249
00:14:22,262 --> 00:14:26,946
verificações de paridade e, a princípio, isso parece perfeito para identificar 1 entre 

250
00:14:26,946 --> 00:14:30,930
16 posições no bloco, mas você também precisa comunicar um 17º resultado, 

251
00:14:30,930 --> 00:14:31,900
o sem erro doença.

252
00:14:33,020 --> 00:14:37,300
A solução aqui é realmente muito simples, basta esquecer completamente o 0º bit.

253
00:14:37,840 --> 00:14:40,669
Portanto, quando fazemos nossas quatro verificações de paridade e vemos 

254
00:14:40,669 --> 00:14:43,460
que estão todas iguais, isso significa inequivocamente que não há erro.

255
00:14:44,240 --> 00:14:47,393
O que isso significa é que em vez de trabalhar com um bloco de 16 bits, 

256
00:14:47,393 --> 00:14:50,328
trabalhamos com um bloco de 15 bits, onde 11 dos bits estão livres 

257
00:14:50,328 --> 00:14:53,220
para transportar uma mensagem e 4 deles estão lá para redundância.

258
00:14:53,780 --> 00:15:00,200
E com isso, agora temos o que as pessoas do ramo chamariam de código de Hamming 15-11.

259
00:15:00,460 --> 00:15:03,291
Dito isso, é bom ter um tamanho de bloco com potência limpa de 2, 

260
00:15:03,291 --> 00:15:07,110
e há uma maneira inteligente de manter esse 0º bit por perto e fazer com que ele faça um 

261
00:15:07,110 --> 00:15:08,140
trabalho extra para nós.

262
00:15:08,700 --> 00:15:11,519
Se o usarmos como um bit de paridade em todo o bloco, 

263
00:15:11,519 --> 00:15:15,540
ele nos permitirá detectar, mesmo que não possamos corrigir, erros de 2 bits.

264
00:15:16,160 --> 00:15:16,820
Veja como funciona.

265
00:15:17,180 --> 00:15:20,195
Depois de definir esses quatro bits especiais de correção de erros, 

266
00:15:20,195 --> 00:15:23,166
definimos aquele 0 para que a paridade do bloco completo seja par, 

267
00:15:23,166 --> 00:15:24,940
como uma verificação de paridade normal.

268
00:15:25,700 --> 00:15:29,311
Agora, se houver um erro de bit único, a paridade do bloco completo será ímpar, 

269
00:15:29,311 --> 00:15:33,193
mas detectaríamos isso de qualquer maneira, graças às quatro verificações de correção 

270
00:15:33,193 --> 00:15:33,600
de erros.

271
00:15:34,160 --> 00:15:38,114
No entanto, se houver dois erros, a paridade geral voltará a ser uniforme, 

272
00:15:38,114 --> 00:15:41,700
mas o receptor ainda verá que houve pelo menos algum erro por causa 

273
00:15:41,700 --> 00:15:45,180
do que está acontecendo com essas quatro verificações de paridade.

274
00:15:45,180 --> 00:15:47,671
Portanto, se eles notarem uma paridade geral uniforme, 

275
00:15:47,671 --> 00:15:50,706
mas algo diferente de zero acontecendo com as outras verificações, 

276
00:15:50,706 --> 00:15:52,700
isso indica que houve pelo menos dois erros.

277
00:15:53,520 --> 00:15:54,000
Isso não é inteligente?

278
00:15:54,300 --> 00:15:56,939
Mesmo que não possamos corrigir esses erros de 2 bits, 

279
00:15:56,939 --> 00:16:01,260
apenas colocando aquele bit 0 incômodo de volta ao trabalho, isso nos permite detectá-los.

280
00:16:02,260 --> 00:16:05,220
Isso é bastante padrão, é conhecido como código de Hamming estendido.

281
00:16:06,540 --> 00:16:09,755
Tecnicamente falando, agora você tem uma descrição completa do que um 

282
00:16:09,755 --> 00:16:12,880
código de Hamming faz, pelo menos no exemplo de um bloco de 16 bits.

283
00:16:12,880 --> 00:16:16,800
Mas acho que você achará mais satisfatório verificar seu entendimento e 

284
00:16:16,800 --> 00:16:21,320
solidificar tudo até agora fazendo você mesmo um exemplo completo do início ao fim.

285
00:16:22,080 --> 00:16:24,300
Vou explicar isso com você para que você possa verificar por si mesmo.

286
00:16:25,120 --> 00:16:28,251
Para configurar uma mensagem, seja uma mensagem literal que você 

287
00:16:28,251 --> 00:16:32,202
está traduzindo no espaço ou alguns dados que deseja armazenar ao longo do tempo, 

288
00:16:32,202 --> 00:16:34,660
a primeira etapa é dividi-la em pedaços de 11 bits.

289
00:16:35,580 --> 00:16:39,760
Cada pedaço será empacotado em um bloco de 16 bits resistente a erros.

290
00:16:39,760 --> 00:16:43,220
Então, vamos tomar este como exemplo e realmente resolver isso.

291
00:16:43,740 --> 00:16:44,740
Vá em frente, realmente faça isso!

292
00:16:44,740 --> 00:16:47,020
Vamos fazer uma pausa e tentar montar este bloco.

293
00:16:52,720 --> 00:16:53,680
Ok, você está pronto?

294
00:16:54,240 --> 00:16:57,299
Lembre-se, a posição 0 junto com as outras potências de 2 são 

295
00:16:57,299 --> 00:17:00,408
reservadas para correção de erros, então você começa colocando 

296
00:17:00,408 --> 00:17:03,320
os bits da mensagem em todos os pontos restantes, em ordem.

297
00:17:05,339 --> 00:17:08,864
Você precisa que este grupo tenha uma paridade par, o que já acontece, 

298
00:17:08,864 --> 00:17:12,339
então você deveria ter definido o bit de paridade na posição 1 como 0.

299
00:17:13,020 --> 00:17:15,174
O próximo grupo começa com uma paridade ímpar, 

300
00:17:15,174 --> 00:17:17,880
então você deveria ter definido seu bit de paridade como 1.

301
00:17:19,160 --> 00:17:21,343
O grupo depois disso começa com uma paridade ímpar, 

302
00:17:21,343 --> 00:17:24,240
então novamente você deveria ter definido seu bit de paridade como 1.

303
00:17:24,780 --> 00:17:27,121
E o grupo final também tem uma paridade ímpar, 

304
00:17:27,121 --> 00:17:30,060
o que significa que definimos esse bit na posição 8 como 1.

305
00:17:31,300 --> 00:17:35,212
E então, como etapa final, o bloco completo agora tem uma paridade par, 

306
00:17:35,212 --> 00:17:39,939
o que significa que você pode definir o número do bit 0, o bit de paridade abrangente, 

307
00:17:39,939 --> 00:17:40,320
como 0.

308
00:17:41,340 --> 00:17:44,793
Assim, à medida que este bloco é enviado, a paridade dos quatro 

309
00:17:44,793 --> 00:17:48,140
subconjuntos especiais e do bloco como um todo será par, ou 0.

310
00:17:48,820 --> 00:17:52,180
Na segunda parte do exercício, vamos fazer com que você desempenhe o papel de receptor.

311
00:17:53,480 --> 00:17:56,719
Claro, isso significaria que você ainda não sabe o que é esta mensagem, 

312
00:17:56,719 --> 00:17:59,780
talvez alguns de vocês a tenham memorizado, mas vamos supor que não.

313
00:18:00,020 --> 00:18:03,842
O que vou fazer é alterar 0, 1 ou 2 dos bits desse 

314
00:18:03,842 --> 00:18:07,740
bloco e depois pedir que você descubra o que eu fiz.

315
00:18:08,260 --> 00:18:10,810
Então, novamente, faça uma pausa e tente resolver isso.

316
00:18:18,790 --> 00:18:23,406
Ok, então você, como receptor, agora verifica o primeiro grupo de paridade e pode 

317
00:18:23,406 --> 00:18:27,910
ver que é par, então qualquer erro que exista teria que estar em uma coluna par.

318
00:18:29,690 --> 00:18:33,388
A próxima verificação nos dá um número ímpar, informando que há 

319
00:18:33,388 --> 00:18:37,030
pelo menos um erro e nos restringindo a esta coluna específica.

320
00:18:38,550 --> 00:18:41,790
A terceira verificação é par, reduzindo ainda mais as possibilidades.

321
00:18:42,650 --> 00:18:44,631
E a última verificação de paridade é estranha, 

322
00:18:44,631 --> 00:18:47,204
nos dizendo que há um erro em algum lugar na parte inferior, 

323
00:18:47,204 --> 00:18:49,650
que agora podemos ver que deve estar na posição número 10.

324
00:18:51,490 --> 00:18:54,400
Além do mais, a paridade de todo o bloco é estranha, 

325
00:18:54,400 --> 00:18:57,530
dando-nos a confiança de que houve uma virada e não duas.

326
00:18:58,070 --> 00:18:59,970
Se forem três ou mais, todas as apostas serão canceladas.

327
00:19:01,310 --> 00:19:05,469
Depois de corrigir o bit número 10, retirar os 11 bits que não foram 

328
00:19:05,469 --> 00:19:09,748
usados para correção nos dá o segmento relevante da mensagem original, 

329
00:19:09,748 --> 00:19:14,390
que se você retroceder e comparar é exatamente com o que iniciamos o exemplo.

330
00:19:15,710 --> 00:19:18,124
E agora que você sabe como fazer tudo isso manualmente, 

331
00:19:18,124 --> 00:19:21,746
gostaria de mostrar como você pode realizar a parte central de toda essa lógica com 

332
00:19:21,746 --> 00:19:23,170
uma única linha de código Python.

333
00:19:23,870 --> 00:19:27,950
Veja, o que eu ainda não lhe contei é o quão elegante esse algoritmo realmente é, 

334
00:19:27,950 --> 00:19:31,334
como é simples fazer uma máquina apontar para a posição de um erro, 

335
00:19:31,334 --> 00:19:34,718
como escalá-lo sistematicamente e como podemos enquadrar tudo isso. 

336
00:19:34,718 --> 00:19:38,750
isso como uma única operação em vez de várias verificações de paridade separadas.

337
00:19:39,430 --> 00:19:41,310
Para entender o que quero dizer, junte-se a mim na parte 2.

