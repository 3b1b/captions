1
00:00:03,620 --> 00:00:05,963
Haben Sie sich jemals gefragt, wie es möglich ist, 

2
00:00:05,963 --> 00:00:10,100
eine CD oder DVD zu zerkratzen und trotzdem den darauf gespeicherten Inhalt wiederzugeben?

3
00:00:10,900 --> 00:00:14,951
Der Kratzer wirkt sich tatsächlich auf die Einsen und Nullen auf der Festplatte aus, 

4
00:00:14,951 --> 00:00:18,145
sodass andere Daten als die gespeicherten Daten ausgelesen werden. 

5
00:00:18,145 --> 00:00:20,909
Wenn die Festplatte jedoch nicht wirklich zerkratzt wird, 

6
00:00:20,909 --> 00:00:25,199
werden die ausgelesenen Bits in genau dieselbe Datei dekodiert, die darauf kodiert wurde, 

7
00:00:25,199 --> 00:00:27,440
a Bit für Bit kopiert, trotz all dieser Fehler.

8
00:00:27,440 --> 00:00:31,877
Es gibt eine ganze Reihe mathematischer Raffinessen, die es uns ermöglichen, 

9
00:00:31,877 --> 00:00:36,200
Daten fehlersicher zu speichern und, was noch wichtiger ist, zu übertragen.

10
00:00:36,200 --> 00:00:38,800
Na gut, eigentlich braucht es gar nicht so viel Cleverness, 

11
00:00:38,800 --> 00:00:40,880
um einen Weg zu finden, dies zu bewerkstelligen.

12
00:00:40,880 --> 00:00:45,065
Jede Datei, sei es ein Video, ein Ton oder ein Text, ein Code, 

13
00:00:45,065 --> 00:00:50,380
ein Bild oder was auch immer, ist letztendlich eine Folge von Einsen und Nullen.

14
00:00:50,680 --> 00:00:54,210
Und eine einfache Strategie zur Korrektur jedes umgedrehten Bits wäre, 

15
00:00:54,210 --> 00:00:56,000
drei Kopien jedes Bits zu speichern.

16
00:00:57,580 --> 00:00:59,769
Dann könnte die Maschine, die diese Datei liest, 

17
00:00:59,769 --> 00:01:02,764
diese drei Kopien vergleichen und immer die besten 2 von 3 nehmen, 

18
00:01:02,764 --> 00:01:04,060
wenn es eine Diskrepanz gibt.

19
00:01:07,160 --> 00:01:10,860
Das bedeutet jedoch, dass zwei Drittel Ihres Platzes für Redundanz genutzt werden.

20
00:01:11,480 --> 00:01:15,141
Und selbst dann gibt es trotz all des verschenkten Platzes keine sichere Garantie dafür, 

21
00:01:15,141 --> 00:01:17,240
was passiert, wenn mehr als ein Bit umgedreht wird.

22
00:01:17,980 --> 00:01:20,632
Die viel interessantere Frage ist, wie man es so gestalten kann, 

23
00:01:20,632 --> 00:01:24,020
dass Fehler korrigiert werden können und dabei möglichst wenig Platz verloren geht.

24
00:01:24,520 --> 00:01:27,539
Mit der Methode, die Sie in diesem Video kennenlernen, 

25
00:01:27,539 --> 00:01:31,273
könnten Sie beispielsweise Ihre Daten in 256-Bit-Blöcken speichern, 

26
00:01:31,273 --> 00:01:33,360
wobei jeder Block 9 Bits verwendet, 9!

27
00:01:33,760 --> 00:01:37,164
um als eine Art Redundanz zu fungieren, und die anderen 247 Bits sind frei, 

28
00:01:37,164 --> 00:01:40,300
um jede gewünschte aussagekräftige Nachricht oder Daten zu übertragen.

29
00:01:40,900 --> 00:01:42,972
Und es wird immer noch so sein, dass eine Maschine, 

30
00:01:42,972 --> 00:01:46,002
wenn hier irgendein Bit umgedreht wird, allein durch einen Blick auf diesen 

31
00:01:46,002 --> 00:01:48,394
Block und nichts weiter in der Lage sein wird, zu erkennen, 

32
00:01:48,394 --> 00:01:51,503
dass ein Fehler aufgetreten ist und wo er sich genau befand, sodass sie weiß, 

33
00:01:51,503 --> 00:01:52,660
wie sie ihn korrigieren kann.

34
00:01:52,660 --> 00:01:54,620
Und ehrlich gesagt, das fühlt sich wie Magie an.

35
00:01:55,440 --> 00:01:58,087
Und wenn bei diesem speziellen Schema zwei Bits umgedreht werden, 

36
00:01:58,087 --> 00:02:01,015
kann die Maschine zumindest erkennen, dass zwei Fehler aufgetreten sind, 

37
00:02:01,015 --> 00:02:02,860
weiß jedoch nicht, wie sie diese beheben kann.

38
00:02:03,520 --> 00:02:05,243
Wir werden etwas später darüber sprechen, wie dies 

39
00:02:05,243 --> 00:02:06,900
für Blöcke unterschiedlicher Größe skaliert wird.

40
00:02:07,860 --> 00:02:10,316
Methoden, mit denen Sie solche Fehler korrigieren können, 

41
00:02:10,316 --> 00:02:12,900
werden vernünftigerweise als Fehlerkorrekturcodes bezeichnet.

42
00:02:13,660 --> 00:02:16,337
Über den größten Teil des letzten Jahrhunderts hinweg war dieses 

43
00:02:16,337 --> 00:02:19,674
Gebiet eine wirklich reichhaltige Quelle überraschend tiefgreifender Mathematik, 

44
00:02:19,674 --> 00:02:21,940
die in die Geräte einfließt, die wir täglich verwenden.

45
00:02:22,840 --> 00:02:25,615
Ziel ist es, Ihnen ein sehr umfassendes Verständnis eines der 

46
00:02:25,615 --> 00:02:28,660
frühesten Beispiele zu vermitteln, das als Hamming-Code bekannt ist.

47
00:02:29,520 --> 00:02:32,605
Übrigens geht es mir beim Aufbau dieses Videos weniger darum, 

48
00:02:32,605 --> 00:02:36,486
es so direkt wie möglich zu erklären, als vielmehr darum, Sie dazu anzuregen, 

49
00:02:36,486 --> 00:02:39,820
es selbst zu erfinden, mit ein wenig sanfter Anleitung hier und da.

50
00:02:40,120 --> 00:02:42,420
Wenn Sie also das Gefühl haben, irgendwann zu sehen, wohin es führt, 

51
00:02:42,420 --> 00:02:44,986
nehmen Sie sich diesen Moment Zeit, um innezuhalten und aktiv vorherzusagen, 

52
00:02:44,986 --> 00:02:46,720
wie der Plan aussehen wird, bevor ich es Ihnen sage.

53
00:02:47,240 --> 00:02:50,659
Wenn Sie außerdem möchten, dass Ihr Verständnis bis auf die Hardware-Ebene reicht, 

54
00:02:50,659 --> 00:02:54,037
hat Ben Eater in Verbindung mit diesem Video ein Video erstellt, das Ihnen zeigt, 

55
00:02:54,037 --> 00:02:56,839
wie Sie Hamming-Codes tatsächlich auf Steckbrettern implementieren, 

56
00:02:56,839 --> 00:02:58,240
was äußerst zufriedenstellend ist.

57
00:02:59,300 --> 00:03:02,503
Sie sollten wissen, dass Hamming-Codes nicht so häufig verwendet werden wie 

58
00:03:02,503 --> 00:03:04,611
modernere Codes wie der Reed-Solomon-Algorithmus, 

59
00:03:04,611 --> 00:03:08,320
aber der Kontrast zwischen der Unmöglichkeit, die sich diese Aufgabe am Anfang anfühlt, 

60
00:03:08,320 --> 00:03:10,808
und der völligen Vernünftigkeit, die sie einmal erscheint, 

61
00:03:10,808 --> 00:03:13,000
hat etwas Magisches Sie erfahren etwas über Hamming.

62
00:03:13,720 --> 00:03:16,402
Das Grundprinzip der Fehlerkorrektur besteht darin, 

63
00:03:16,402 --> 00:03:20,580
dass in einem riesigen Bereich aller möglichen Nachrichten nur einige Teilmengen 

64
00:03:20,580 --> 00:03:22,180
als gültige Nachrichten gelten.

65
00:03:22,800 --> 00:03:26,940
Denken Sie als Analogie an richtig geschriebene Wörter und falsch geschriebene Wörter.

66
00:03:28,900 --> 00:03:30,967
Immer wenn eine gültige Nachricht geändert wird, 

67
00:03:30,967 --> 00:03:33,457
ist der Empfänger dafür verantwortlich, das, was er sieht, 

68
00:03:33,457 --> 00:03:35,567
an den nächsten gültigen Nachbarn zu korrigieren, 

69
00:03:35,567 --> 00:03:37,340
wie es bei einem Tippfehler der Fall wäre.

70
00:03:38,220 --> 00:03:40,777
Die Entwicklung eines konkreten Algorithmus zur effizienten 

71
00:03:40,777 --> 00:03:44,060
Kategorisierung solcher Nachrichten erfordert jedoch eine gewisse Cleverness.

72
00:03:46,780 --> 00:03:50,342
Die Geschichte beginnt in den 1940er Jahren, als der junge Richard Hamming 

73
00:03:50,342 --> 00:03:53,904
für Bell Labs arbeitete und bei einigen seiner Arbeiten einen sehr großen, 

74
00:03:53,904 --> 00:03:57,420
teuren Lochkartencomputer benutzte, zu dem er nur begrenzten Zugang hatte.

75
00:03:57,800 --> 00:04:00,465
Und die Programme, die er ständig durchführte, scheiterten immer wieder, 

76
00:04:00,465 --> 00:04:02,400
weil hin und wieder ein Teil falsch verstanden wurde.

77
00:04:03,120 --> 00:04:05,355
Da Frustration der Schmelztiegel der Erfindungen war, 

78
00:04:05,355 --> 00:04:08,420
hatte er die Nase voll und erfand den weltweit ersten Fehlerkorrekturcode.

79
00:04:09,060 --> 00:04:12,113
Es gibt viele verschiedene Möglichkeiten, Hamming-Codes zu formulieren, 

80
00:04:12,113 --> 00:04:15,380
aber zunächst werden wir es so durchgehen, wie Hamming selbst darüber dachte.

81
00:04:16,519 --> 00:04:20,940
Nehmen wir ein einfaches, aber nicht zu einfaches Beispiel: einen Block mit 16 Bit.

82
00:04:21,820 --> 00:04:24,740
Wir nummerieren die Positionen dieser Bits von 0 bis 15.

83
00:04:25,620 --> 00:04:29,892
Die eigentlichen Daten, die wir speichern möchten, werden nur 12 dieser Bits ausmachen, 

84
00:04:29,892 --> 00:04:33,000
während 4 der Positionen als eine Art Redundanz reserviert sind.

85
00:04:33,900 --> 00:04:36,465
Das Wort „redundant“ bedeutet hier nicht einfach „kopieren“, 

86
00:04:36,465 --> 00:04:40,040
schließlich geben uns diese 4 Bits nicht genug Platz, um die Daten blind zu kopieren.

87
00:04:40,720 --> 00:04:44,000
Stattdessen müssen sie eine viel differenziertere und intelligentere Art der Redundanz 

88
00:04:44,000 --> 00:04:47,280
sein, die keine neuen Informationen hinzufügt, sondern die Widerstandsfähigkeit erhöht.

89
00:04:48,600 --> 00:04:52,035
Man könnte erwarten, dass diese 4 besonderen Teile schön verpackt zusammenkommen, 

90
00:04:52,035 --> 00:04:55,304
vielleicht am Ende oder so ähnlich, aber wie Sie sehen werden, ermöglicht es, 

91
00:04:55,304 --> 00:04:57,734
sie in Positionen zu platzieren, die Zweierpotenzen sind, 

92
00:04:57,734 --> 00:04:59,620
am Ende etwas wirklich Elegantes zu schaffen.

93
00:05:00,200 --> 00:05:01,996
Es könnte Ihnen auch einen kleinen Hinweis darauf geben, 

94
00:05:01,996 --> 00:05:03,540
wie sich dies auf größere Blöcke skalieren lässt.

95
00:05:04,900 --> 00:05:07,247
Auch technisch gesehen sind es am Ende nur 11 Datenbits. 

96
00:05:07,247 --> 00:05:09,965
Sie werden feststellen, dass es eine leichte Nuance für das gibt, 

97
00:05:09,965 --> 00:05:13,260
was an Position 0 passiert, aber machen Sie sich darüber im Moment keine Sorgen.

98
00:05:14,140 --> 00:05:17,478
Wie bei jedem Fehlerkorrekturalgorithmus sind auch hier zwei Spieler beteiligt: 

99
00:05:17,478 --> 00:05:20,609
ein Sender, der für das Setzen dieser vier Spezialbits verantwortlich ist, 

100
00:05:20,609 --> 00:05:22,654
und ein Empfänger, der dafür verantwortlich ist, 

101
00:05:22,654 --> 00:05:25,200
eine Art Prüfung durchzuführen und die Fehler zu korrigieren.

102
00:05:25,200 --> 00:05:28,422
Natürlich beziehen sich die Wörter „Sender“ und „Empfänger“ in Wirklichkeit 

103
00:05:28,422 --> 00:05:31,008
auf Maschinen oder Software, die alle Prüfungen durchführen, 

104
00:05:31,008 --> 00:05:34,740
und der Begriff „Nachricht“ ist sehr weit gefasst und umfasst Dinge wie die Speicherung.

105
00:05:35,340 --> 00:05:38,628
Schließlich ist das Speichern von Daten dasselbe wie das Versenden einer Nachricht 

106
00:05:38,628 --> 00:05:41,680
nur von der Vergangenheit in die Zukunft und nicht von einem Ort zum anderen.

107
00:05:42,560 --> 00:05:45,550
Das ist also der Aufbau, aber bevor wir uns darauf einlassen können, 

108
00:05:45,550 --> 00:05:48,974
müssen wir über eine verwandte Idee sprechen, die Hamming zum Zeitpunkt seiner 

109
00:05:48,974 --> 00:05:51,228
Entdeckung noch frisch im Kopf hatte: eine Methode, 

110
00:05:51,228 --> 00:05:54,262
mit der man einzelne Bitfehler erkennen, aber nicht korrigieren kann, 

111
00:05:54,262 --> 00:05:56,300
wie man weiß im Geschäft als Paritätskontrolle.

112
00:05:56,880 --> 00:05:59,705
Bei einer Paritätsprüfung trennen wir nur ein einzelnes Bit heraus, 

113
00:05:59,705 --> 00:06:01,991
für dessen Abstimmung der Absender verantwortlich ist, 

114
00:06:01,991 --> 00:06:03,820
und der Rest kann eine Nachricht übertragen.

115
00:06:04,880 --> 00:06:08,213
Die einzige Aufgabe dieses speziellen Bits besteht darin, sicherzustellen, 

116
00:06:08,213 --> 00:06:11,280
dass die Gesamtzahl der Einsen in der Nachricht eine gerade Zahl ist.

117
00:06:12,080 --> 00:06:15,621
Im Moment beträgt die Gesamtzahl der Einsen beispielsweise 7, das ist ungerade, 

118
00:06:15,621 --> 00:06:18,543
daher muss der Absender dieses spezielle Bit auf eine 1 umdrehen, 

119
00:06:18,543 --> 00:06:19,960
um die Zählung gerade zu machen.

120
00:06:20,800 --> 00:06:24,376
Hätte der Block jedoch bereits mit einer geraden Anzahl von Einsen begonnen, 

121
00:06:24,376 --> 00:06:26,420
wäre dieses Sonderbit auf 0 gehalten worden.

122
00:06:27,340 --> 00:06:30,529
Das ist ziemlich einfach, täuschend einfach, aber es ist eine unglaublich 

123
00:06:30,529 --> 00:06:33,762
elegante Möglichkeit, die Idee der Veränderung irgendwo in einer Nachricht 

124
00:06:33,762 --> 00:06:36,780
zu destillieren, um sie in einer einzigen Information widerzuspiegeln.

125
00:06:37,500 --> 00:06:41,965
Beachten Sie, dass sich die Gesamtzahl der Einsen von gerade auf ungerade ändert, 

126
00:06:41,965 --> 00:06:46,540
wenn ein Bit dieser Nachricht umgedreht wird, entweder von 0 auf 1 oder von 1 auf 0.

127
00:06:47,980 --> 00:06:51,251
Wenn Sie also der Empfänger sind, sich diese Nachricht ansehen und eine ungerade Anzahl 

128
00:06:51,251 --> 00:06:54,411
von Einsen sehen, können Sie mit Sicherheit wissen, dass ein Fehler aufgetreten ist, 

129
00:06:54,411 --> 00:06:57,460
auch wenn Sie möglicherweise keine Ahnung haben, wo dieser Fehler aufgetreten ist.

130
00:06:58,500 --> 00:07:01,572
Ob eine Gruppe von Bits eine gerade oder ungerade Anzahl von Einsen hat, 

131
00:07:01,572 --> 00:07:03,340
wird im Fachjargon als Parität bezeichnet.

132
00:07:04,860 --> 00:07:07,751
Sie könnten auch Zahlen verwenden und sagen, dass die Parität 0 oder 1 ist, 

133
00:07:07,751 --> 00:07:10,720
was normalerweise hilfreicher ist, wenn Sie anfangen, mit der Idee zu rechnen.

134
00:07:11,220 --> 00:07:14,496
Und dieses spezielle Bit, das der Absender zur Steuerung der Parität verwendet, 

135
00:07:14,496 --> 00:07:15,520
wird Paritätsbit genannt.

136
00:07:17,560 --> 00:07:19,669
Und eigentlich sollten wir uns darüber im Klaren sein: 

137
00:07:19,669 --> 00:07:22,661
Wenn der Empfänger eine ungerade Parität sieht, bedeutet das nicht unbedingt, 

138
00:07:22,661 --> 00:07:25,500
dass nur ein Fehler aufgetreten ist, es könnten auch 3 Fehler oder 5 oder 

139
00:07:25,500 --> 00:07:28,492
eine andere ungerade Zahl gewesen sein, aber er kann es mit Sicherheit wissen 

140
00:07:28,492 --> 00:07:29,260
dass es nicht 0 war.

141
00:07:29,980 --> 00:07:33,623
Wenn es andererseits zwei Fehler oder eine gerade Anzahl von Fehlern gegeben hätte, 

142
00:07:33,623 --> 00:07:36,096
wäre die endgültige Anzahl von Einsen immer noch gerade, 

143
00:07:36,096 --> 00:07:38,786
sodass der Empfänger nicht vollständig darauf vertrauen kann, 

144
00:07:38,786 --> 00:07:42,300
dass eine gerade Anzahl zwangsläufig bedeutet, dass die Nachricht fehlerfrei ist.

145
00:07:42,840 --> 00:07:45,074
Sie könnten sich darüber beschweren, dass eine Nachricht, 

146
00:07:45,074 --> 00:07:48,039
die durch nur 2-Bit-Flips durcheinander gebracht wird, ziemlich schwach ist, 

147
00:07:48,039 --> 00:07:49,080
und Sie haben völlig Recht.

148
00:07:49,700 --> 00:07:53,270
Bedenken Sie jedoch, dass es keine Methode zur Fehlererkennung oder -korrektur gibt, 

149
00:07:53,270 --> 00:07:56,337
die Ihnen hundertprozentige Sicherheit geben könnte, dass die Nachricht, 

150
00:07:56,337 --> 00:07:58,900
die Sie erhalten, die ist, die der Absender beabsichtigt hat.

151
00:07:59,580 --> 00:08:02,364
Schließlich könnte genügend zufälliges Rauschen immer eine gültige 

152
00:08:02,364 --> 00:08:05,440
Nachricht durch reinen Zufall in eine andere gültige Nachricht verwandeln.

153
00:08:06,240 --> 00:08:09,031
Stattdessen besteht das Ziel darin, ein Schema zu entwickeln, 

154
00:08:09,031 --> 00:08:11,868
das bis zu einer bestimmten maximalen Fehleranzahl robust ist, 

155
00:08:11,868 --> 00:08:15,380
oder vielleicht die Wahrscheinlichkeit eines solchen Fehlalarms zu verringern.

156
00:08:16,260 --> 00:08:18,671
Paritätsprüfungen allein sind ziemlich schwach, 

157
00:08:18,671 --> 00:08:22,187
aber indem sie die Idee der Änderung einer gesamten Nachricht auf ein 

158
00:08:22,187 --> 00:08:25,803
einzelnes Bit reduzieren, geben sie uns einen leistungsstarken Baustein 

159
00:08:25,803 --> 00:08:27,160
für ausgefeiltere Schemata.

160
00:08:27,940 --> 00:08:31,149
Als Hamming beispielsweise nach einer Möglichkeit suchte, herauszufinden, 

161
00:08:31,149 --> 00:08:34,185
wo ein Fehler aufgetreten ist und nicht nur, dass er aufgetreten ist, 

162
00:08:34,185 --> 00:08:36,571
war seine wichtigste Erkenntnis, dass man fragen kann, 

163
00:08:36,571 --> 00:08:39,477
wenn man einige Paritätsprüfungen nicht auf die gesamte Nachricht, 

164
00:08:39,477 --> 00:08:43,033
sondern auf bestimmte sorgfältig ausgewählte Teilmengen anwendet eine verfeinerte 

165
00:08:43,033 --> 00:08:45,940
Reihe von Fragen, die den Ort eines einzelnen Bitfehlers bestimmen.

166
00:08:46,680 --> 00:08:49,991
Das Gesamtgefühl ist ein bisschen so, als würde man ein Spiel mit 20 Fragen spielen, 

167
00:08:49,991 --> 00:08:53,380
bei dem Ja- oder Nein-Fragen gestellt werden, die den Raum der Möglichkeiten halbieren.

168
00:08:54,160 --> 00:08:57,834
Nehmen wir zum Beispiel an, wir führen eine Paritätsprüfung nur für diese 8 Bits durch, 

169
00:08:57,834 --> 00:08:59,380
also alle ungeradzahligen Positionen.

170
00:09:00,100 --> 00:09:04,103
Wenn dann ein Fehler erkannt wird, erhält der Empfänger etwas mehr Informationen darüber, 

171
00:09:04,103 --> 00:09:06,727
wo genau sich der Fehler befindet, nämlich dass er sich an 

172
00:09:06,727 --> 00:09:08,240
einer ungeraden Position befindet.

173
00:09:08,940 --> 00:09:12,062
Wenn unter diesen 8 Bits kein Fehler erkannt wird, bedeutet das entweder, 

174
00:09:12,062 --> 00:09:15,860
dass überhaupt kein Fehler vorliegt, oder dass er sich irgendwo in den geraden Positionen 

175
00:09:15,860 --> 00:09:16,240
befindet.

176
00:09:17,180 --> 00:09:20,432
Man könnte denken, dass die Beschränkung einer Paritätsprüfung auf die Hälfte der Bits 

177
00:09:20,432 --> 00:09:23,386
sie weniger effektiv macht, aber wenn sie in Verbindung mit anderen sorgfältig 

178
00:09:23,386 --> 00:09:26,489
ausgewählten Prüfungen durchgeführt wird, ergibt sie uns kontraintuitiv etwas viel 

179
00:09:26,489 --> 00:09:27,200
Leistungsfähigeres.

180
00:09:29,240 --> 00:09:32,480
Um diese Paritätsprüfung tatsächlich einzurichten, müssen Sie bedenken, 

181
00:09:32,480 --> 00:09:34,640
dass ein spezielles Bit reserviert werden muss, 

182
00:09:34,640 --> 00:09:36,620
das die Parität der gesamten Gruppe steuert.

183
00:09:37,480 --> 00:09:39,180
Hier wählen wir einfach Position 1.

184
00:09:39,720 --> 00:09:42,657
Im gezeigten Beispiel ist die Parität dieser 8 Bits derzeit ungerade, 

185
00:09:42,657 --> 00:09:45,972
sodass der Absender dafür verantwortlich ist, dieses Paritätsbit umzuschalten, 

186
00:09:45,972 --> 00:09:46,980
und jetzt ist es gerade.

187
00:09:47,940 --> 00:09:50,680
Dies ist nur eine von vier Paritätsprüfungen, die wir durchführen werden.

188
00:09:50,920 --> 00:09:54,227
Das zweite Häkchen gehört zu den 8 Bits in der rechten Hälfte des Rasters, 

189
00:09:54,227 --> 00:09:56,300
zumindest so, wie wir es hier gezeichnet haben.

190
00:09:56,680 --> 00:09:59,791
Dieses Mal verwenden wir möglicherweise Position 2 als Paritätsbit, 

191
00:09:59,791 --> 00:10:03,040
sodass diese 8 Bits bereits eine gerade Parität haben und der Absender 

192
00:10:03,040 --> 00:10:06,060
beruhigt sein kann, wenn er dieses Bit Nummer 2 unverändert lässt.

193
00:10:07,020 --> 00:10:10,677
Wenn der Empfänger andererseits die Parität dieser Gruppe überprüft und feststellt, 

194
00:10:10,677 --> 00:10:13,551
dass sie ungerade ist, weiß er, dass der Fehler irgendwo zwischen 

195
00:10:13,551 --> 00:10:15,380
diesen 8 Bits auf der rechten Seite liegt.

196
00:10:15,820 --> 00:10:18,225
Andernfalls liegt entweder kein Fehler vor oder 

197
00:10:18,225 --> 00:10:20,580
der Fehler liegt irgendwo in der linken Hälfte.

198
00:10:21,120 --> 00:10:23,113
Oder ich denke, es könnte zwei Fehler gegeben haben, 

199
00:10:23,113 --> 00:10:26,500
aber im Moment gehen wir davon aus, dass es höchstens einen Fehler im gesamten Block gibt.

200
00:10:26,940 --> 00:10:28,740
Darüber hinaus brechen die Dinge völlig zusammen.

201
00:10:29,160 --> 00:10:30,908
Bevor wir uns die nächsten beiden Prüfungen ansehen, 

202
00:10:30,908 --> 00:10:32,657
nehmen Sie sich einen Moment Zeit und überlegen Sie, 

203
00:10:32,657 --> 00:10:35,100
was uns diese ersten beiden ermöglichen, wenn Sie sie zusammen betrachten.

204
00:10:35,800 --> 00:10:37,833
Nehmen wir an, Sie entdecken einen Fehler in den 

205
00:10:37,833 --> 00:10:39,660
ungeraden Spalten und in der rechten Hälfte.

206
00:10:40,200 --> 00:10:43,040
Das bedeutet zwangsläufig, dass der Fehler irgendwo in der letzten Spalte liegt.

207
00:10:43,820 --> 00:10:46,034
Wenn in der ungeraden Spalte kein Fehler aufgetreten ist, 

208
00:10:46,034 --> 00:10:47,981
in der rechten Hälfte jedoch einer, bedeutet dies, 

209
00:10:47,981 --> 00:10:49,700
dass es sich um die vorletzte Spalte handelt.

210
00:10:50,440 --> 00:10:53,691
Wenn in den ungeraden Spalten, aber nicht in der rechten Hälfte ein Fehler auftritt, 

211
00:10:53,691 --> 00:10:56,560
wissen Sie ebenfalls, dass er sich irgendwo in der zweiten Spalte befindet.

212
00:10:56,560 --> 00:10:59,697
Und wenn keine dieser beiden Paritätsprüfungen etwas erkennt, bedeutet dies, 

213
00:10:59,697 --> 00:11:03,120
dass der einzige Ort, an dem ein Fehler auftreten könnte, die Spalte ganz links ist.

214
00:11:03,340 --> 00:11:06,120
Es könnte aber auch einfach bedeuten, dass überhaupt kein Fehler vorliegt.

215
00:11:06,300 --> 00:11:08,297
Das ist alles eine ziemlich umständliche Art zu sagen, 

216
00:11:08,297 --> 00:11:10,840
dass wir mit zwei Paritätsprüfungen die Spalte genau bestimmen können.

217
00:11:11,480 --> 00:11:13,640
Von hier aus können Sie wahrscheinlich erraten, was folgt.

218
00:11:13,800 --> 00:11:16,140
Wir machen im Grunde das Gleiche, außer für die Zeilen.

219
00:11:16,440 --> 00:11:18,988
In den ungeraden Zeilen wird eine Paritätsprüfung durchgeführt, 

220
00:11:18,988 --> 00:11:20,900
wobei Position 4 als Paritätsbit verwendet wird.

221
00:11:21,380 --> 00:11:24,427
In diesem Beispiel hat diese Gruppe also bereits eine gerade Parität, 

222
00:11:24,427 --> 00:11:25,820
sodass Bit 4 auf 0 gesetzt wäre.

223
00:11:26,560 --> 00:11:29,620
Und schließlich gibt es eine Paritätsprüfung in den unteren beiden Zeilen, 

224
00:11:29,620 --> 00:11:31,580
wobei Position 8 als Paritätsbit verwendet wird.

225
00:11:32,120 --> 00:11:34,974
In diesem Fall sieht es so aus, als ob der Absender dieses Bit 8 aktivieren muss, 

226
00:11:34,974 --> 00:11:36,820
um der Gruppe eine gleichmäßige Parität zu verleihen.

227
00:11:37,700 --> 00:11:39,875
So wie wir mit den ersten beiden Prüfungen die Spalte festlegen können, 

228
00:11:39,875 --> 00:11:41,840
können Sie mit den nächsten beiden Prüfungen die Zeile festlegen.

229
00:11:42,880 --> 00:11:45,024
Stellen Sie sich als Beispiel vor, dass während der 

230
00:11:45,024 --> 00:11:47,540
Übertragung ein Fehler beispielsweise an Position 3 auftritt.

231
00:11:48,180 --> 00:11:51,778
Nun, das betrifft die erste Paritätsgruppe und auch die zweite Paritätsgruppe, 

232
00:11:51,778 --> 00:11:55,560
sodass der Empfänger weiß, dass irgendwo in der rechten Spalte ein Fehler vorliegt.

233
00:11:56,100 --> 00:12:00,540
Aber es hat keine Auswirkungen auf die dritte Gruppe und auch nicht auf die vierte Gruppe.

234
00:12:01,240 --> 00:12:04,025
Und so kann der Empfänger den Fehler bis zur ersten Zeile, 

235
00:12:04,025 --> 00:12:07,520
was zwangsläufig Position 3 bedeutet, lokalisieren und den Fehler beheben.

236
00:12:08,580 --> 00:12:11,511
Nehmen Sie sich vielleicht einen Moment Zeit, um sich davon zu überzeugen, 

237
00:12:11,511 --> 00:12:14,246
dass Sie mit den Antworten auf diese vier Fragen wirklich immer einen 

238
00:12:14,246 --> 00:12:17,100
bestimmten Ort bestimmen können, ganz gleich, wo er sich gerade befindet.

239
00:12:17,720 --> 00:12:20,272
Tatsächlich bemerken die klugen Köpfe unter Ihnen möglicherweise 

240
00:12:20,272 --> 00:12:23,060
sogar einen Zusammenhang zwischen diesen Fragen und dem binären Zählen.

241
00:12:23,500 --> 00:12:25,381
Und wenn ja, lassen Sie mich noch einmal betonen: 

242
00:12:25,381 --> 00:12:28,054
Halten Sie inne und versuchen Sie selbst, die Verbindung herzustellen, 

243
00:12:28,054 --> 00:12:28,920
bevor ich sie verderbe.

244
00:12:30,500 --> 00:12:34,457
Wenn Sie sich fragen, was passiert, wenn ein Paritätsbit selbst betroffen ist, 

245
00:12:34,457 --> 00:12:36,060
können Sie es einfach versuchen.

246
00:12:36,440 --> 00:12:38,923
Nehmen Sie sich einen Moment Zeit, um darüber nachzudenken, 

247
00:12:38,923 --> 00:12:41,406
wie jeder Fehler in diesen vier Spezialbits genau wie jeder 

248
00:12:41,406 --> 00:12:44,180
andere mit derselben Gruppe von vier Fragen aufgespürt werden kann.

249
00:12:47,060 --> 00:12:49,617
Das spielt keine Rolle, denn letzten Endes geht es darum, 

250
00:12:49,617 --> 00:12:53,100
die Nachrichtenbits zu schützen, während die Fehlerkorrekturbits nur mitlaufen.

251
00:12:53,600 --> 00:12:57,820
Aber auch der Schutz dieser Teile fällt natürlich als Nebenprodukt aus dem Plan.

252
00:12:59,200 --> 00:13:01,760
Es könnte Ihnen auch Spaß machen, vorherzusehen, wie sich dies skalieren wird.

253
00:13:02,300 --> 00:13:06,436
Wenn wir beispielsweise einen Block mit einer Größe von 256 Bit verwenden, 

254
00:13:06,436 --> 00:13:10,408
um einen Ort zu bestimmen, benötigen Sie nur acht Ja- oder Nein-Fragen, 

255
00:13:10,408 --> 00:13:12,780
um binär zu einem bestimmten Ort zu suchen.

256
00:13:15,640 --> 00:13:18,761
Und denken Sie daran, dass bei jeder Frage nur ein einziges Bit aufgegeben werden muss, 

257
00:13:18,761 --> 00:13:20,500
um die entsprechende Paritätsprüfung festzulegen.

258
00:13:23,160 --> 00:13:24,991
Einige von Ihnen haben es vielleicht schon gesehen, 

259
00:13:24,991 --> 00:13:27,246
aber wir werden später über die systematische Methode sprechen, 

260
00:13:27,246 --> 00:13:29,360
um diese Fragen in nur ein oder zwei Minuten herauszufinden.

261
00:13:29,880 --> 00:13:31,996
Hoffentlich reicht diese Skizze aus, um die Effizienz dessen, 

262
00:13:31,996 --> 00:13:33,260
was wir hier entwickeln, zu würdigen.

263
00:13:33,260 --> 00:13:37,400
Das erste Ding kann, abgesehen von den acht hervorgehobenen Paritätsbits, 

264
00:13:37,400 --> 00:13:41,820
alles sein, was Sie wollen, und jede gewünschte Nachricht oder Daten enthalten.

265
00:13:41,820 --> 00:13:44,592
Die 8 Bits sind in dem Sinne redundant, dass sie vollständig vom Rest 

266
00:13:44,592 --> 00:13:48,078
der Nachricht bestimmt werden, aber es geht auf eine viel intelligentere Art und Weise, 

267
00:13:48,078 --> 00:13:50,020
als einfach die Nachricht als Ganzes zu kopieren.

268
00:13:53,600 --> 00:13:55,906
Und dennoch wäre man mit so wenig Aufwand in der Lage, 

269
00:13:55,906 --> 00:13:58,380
jeden einzelnen Bitfehler zu identifizieren und zu beheben.

270
00:13:59,200 --> 00:14:00,400
Naja fast.

271
00:14:00,960 --> 00:14:03,225
Okay, das einzige Problem besteht hier darin, dass, 

272
00:14:03,225 --> 00:14:06,448
wenn keine der vier Paritätsprüfungen einen Fehler erkennt, was bedeutet, 

273
00:14:06,448 --> 00:14:10,020
dass die speziell ausgewählten Teilmengen von 8 Bits alle gerade Paritäten haben, 

274
00:14:10,020 --> 00:14:13,157
genau wie der Absender es beabsichtigt hat, dann bedeutet das entweder, 

275
00:14:13,157 --> 00:14:16,860
dass überhaupt kein Fehler aufgetreten ist , oder es schränkt uns auf Position 0 ein.

276
00:14:17,740 --> 00:14:22,214
Sie sehen, mit vier Ja- oder Nein-Fragen haben wir 16 mögliche Ergebnisse für unsere 

277
00:14:22,214 --> 00:14:25,320
Paritätsprüfungen, und das fühlt sich zunächst perfekt an, 

278
00:14:25,320 --> 00:14:29,425
um eine von 16 Positionen im Block zu bestimmen, aber Sie müssen auch ein 17. 

279
00:14:29,425 --> 00:14:31,900
Ergebnis mitteilen, das „Kein Fehler“. Zustand.

280
00:14:33,020 --> 00:14:37,300
Die Lösung hier ist eigentlich ziemlich einfach: Vergessen Sie einfach das 0. Bit ganz.

281
00:14:37,840 --> 00:14:40,575
Wenn wir also unsere vier Paritätsprüfungen durchführen und feststellen, 

282
00:14:40,575 --> 00:14:43,460
dass sie alle gerade sind, bedeutet das eindeutig, dass kein Fehler vorliegt.

283
00:14:44,240 --> 00:14:47,154
Das bedeutet, dass wir nicht mit einem 16-Bit-Block arbeiten, 

284
00:14:47,154 --> 00:14:50,116
sondern mit einem 15-Bit-Block, bei dem 11 der Bits frei sind, 

285
00:14:50,116 --> 00:14:53,220
um eine Nachricht zu übertragen, und 4 davon der Redundanz dienen.

286
00:14:53,780 --> 00:14:56,831
Und damit haben wir jetzt das, was die Leute in 

287
00:14:56,831 --> 00:15:00,200
der Branche als 15-11-Hamming-Code bezeichnen würden.

288
00:15:00,460 --> 00:15:02,041
Trotzdem ist es schön, eine Blockgröße zu haben, 

289
00:15:02,041 --> 00:15:04,687
die einer sauberen Potenz von 2 entspricht, und es gibt eine clevere Möglichkeit, 

290
00:15:04,687 --> 00:15:06,526
dieses 0-te Bit beizubehalten und es so dazu zu bringen, 

291
00:15:06,526 --> 00:15:08,140
ein wenig zusätzliche Arbeit für uns zu erledigen.

292
00:15:08,700 --> 00:15:11,370
Wenn wir es als Paritätsbit im gesamten Block verwenden, 

293
00:15:11,370 --> 00:15:15,540
können wir 2-Bit-Fehler tatsächlich erkennen, auch wenn wir sie nicht korrigieren können.

294
00:15:16,160 --> 00:15:16,820
So funktioniert das.

295
00:15:17,180 --> 00:15:20,028
Nachdem wir diese vier speziellen Fehlerkorrekturbits gesetzt haben, 

296
00:15:20,028 --> 00:15:23,082
setzen wir das nullte, sodass die Parität des gesamten Blocks gerade ist, 

297
00:15:23,082 --> 00:15:24,940
genau wie bei einer normalen Paritätsprüfung.

298
00:15:25,700 --> 00:15:28,346
Wenn es nun einen einzelnen Bitfehler gibt, wechselt die Parität 

299
00:15:28,346 --> 00:15:30,993
des gesamten Blocks in den ungeraden Zustand, aber dank der vier 

300
00:15:30,993 --> 00:15:33,600
fehlerkorrigierenden Prüfungen würden wir das trotzdem erkennen.

301
00:15:34,160 --> 00:15:38,746
Wenn es jedoch zwei Fehler gibt, wird die Gesamtparität wieder ausgeglichen, 

302
00:15:38,746 --> 00:15:43,095
aber der Empfänger sieht aufgrund der vier Paritätsprüfungen immer noch, 

303
00:15:43,095 --> 00:15:45,180
dass zumindest ein Fehler vorliegt.

304
00:15:45,180 --> 00:15:47,975
Wenn sie also feststellen, dass die Parität insgesamt gleichmäßig ist, 

305
00:15:47,975 --> 00:15:50,377
aber bei den anderen Prüfungen etwas ungleich Null passiert, 

306
00:15:50,377 --> 00:15:52,700
bedeutet das, dass mindestens zwei Fehler aufgetreten sind.

307
00:15:53,520 --> 00:15:54,000
Ist das nicht klug?

308
00:15:54,300 --> 00:15:56,788
Auch wenn wir diese 2-Bit-Fehler nicht korrigieren können, 

309
00:15:56,788 --> 00:16:00,036
können wir sie einfach dadurch erkennen, dass wir das eine kleine lästige 0. 

310
00:16:00,036 --> 00:16:01,260
Bit wieder in Betrieb nehmen.

311
00:16:02,260 --> 00:16:05,220
Das ist ziemlich normal und wird als erweiterter Hamming-Code bezeichnet.

312
00:16:06,540 --> 00:16:09,625
Technisch gesehen haben Sie jetzt eine vollständige Beschreibung dessen, 

313
00:16:09,625 --> 00:16:12,880
was ein Hamming-Code bewirkt, zumindest für das Beispiel eines 16-Bit-Blocks.

314
00:16:12,880 --> 00:16:15,280
Ich denke jedoch, dass es für Sie befriedigender sein wird, 

315
00:16:15,280 --> 00:16:18,200
Ihr Verständnis zu überprüfen und alles bis zu diesem Punkt zu festigen, 

316
00:16:18,200 --> 00:16:21,320
indem Sie selbst ein vollständiges Beispiel von Anfang bis Ende durcharbeiten.

317
00:16:22,080 --> 00:16:24,300
Ich werde es jedoch mit Ihnen durchgehen, damit Sie es selbst überprüfen können.

318
00:16:25,120 --> 00:16:26,835
Um eine Nachricht einzurichten, unabhängig davon, 

319
00:16:26,835 --> 00:16:28,483
ob es sich um eine wörtliche Nachricht handelt, 

320
00:16:28,483 --> 00:16:30,473
die Sie über den Speicherplatz übersetzen, oder um Daten, 

321
00:16:30,473 --> 00:16:32,395
die Sie über einen längeren Zeitraum speichern möchten, 

322
00:16:32,395 --> 00:16:34,660
besteht der erste Schritt darin, sie in 11-Bit-Blöcke aufzuteilen.

323
00:16:35,580 --> 00:16:39,760
Jeder Block wird in einen fehlerresistenten 16-Bit-Block verpackt.

324
00:16:39,760 --> 00:16:43,220
Nehmen wir also dieses als Beispiel und arbeiten wir es tatsächlich aus.

325
00:16:43,740 --> 00:16:44,740
Machen Sie es tatsächlich!

326
00:16:44,740 --> 00:16:47,020
Lassen Sie uns innehalten und versuchen, diesen Block zusammenzusetzen.

327
00:16:52,720 --> 00:16:53,680
Okay, bist du bereit?

328
00:16:54,240 --> 00:16:57,198
Denken Sie daran, dass Position 0 zusammen mit den anderen Potenzen von 

329
00:16:57,198 --> 00:17:00,033
2 für Fehlerkorrekturzwecke reserviert ist. Sie beginnen also damit, 

330
00:17:00,033 --> 00:17:03,320
die Nachrichtenbits der Reihe nach an allen verbleibenden Stellen zu platzieren.

331
00:17:05,339 --> 00:17:09,101
Diese Gruppe muss über eine gerade Parität verfügen, was bereits der Fall ist. 

332
00:17:09,101 --> 00:17:12,339
Daher sollten Sie das Paritätsbit in Position 1 auf 0 gesetzt haben.

333
00:17:13,020 --> 00:17:15,494
Die nächste Gruppe beginnt mit einer ungeraden Parität, 

334
00:17:15,494 --> 00:17:17,880
daher sollten Sie ihr Paritätsbit auf 1 gesetzt haben.

335
00:17:19,160 --> 00:17:21,548
Die Gruppe danach beginnt mit einer ungeraden Parität, 

336
00:17:21,548 --> 00:17:24,240
daher hätten Sie ihr Paritätsbit wiederum auf 1 setzen sollen.

337
00:17:24,780 --> 00:17:27,156
Und die letzte Gruppe hat auch eine ungerade Parität, 

338
00:17:27,156 --> 00:17:30,060
was bedeutet, dass wir dieses Bit in Position 8 auf eine 1 setzen.

339
00:17:31,300 --> 00:17:36,003
Und als letzten Schritt hat der gesamte Block nun eine gerade Parität, was bedeutet, 

340
00:17:36,003 --> 00:17:40,320
dass Sie das Bit Nummer 0, das übergeordnete Paritätsbit, auf 0 setzen können.

341
00:17:41,340 --> 00:17:44,626
Wenn dieser Block gesendet wird, ist die Parität der vier 

342
00:17:44,626 --> 00:17:48,140
speziellen Teilmengen und des Blocks als Ganzes gerade oder 0.

343
00:17:48,820 --> 00:17:52,180
Lassen Sie uns im zweiten Teil der Übung die Rolle des Empfängers übernehmen.

344
00:17:53,480 --> 00:17:56,128
Das würde natürlich bedeuten, dass Sie diese Nachricht noch nicht kennen. 

345
00:17:56,128 --> 00:17:58,885
Vielleicht haben einige von Ihnen sie auswendig gelernt, aber nehmen wir an, 

346
00:17:58,885 --> 00:17:59,780
dass Sie es nicht wissen.

347
00:18:00,020 --> 00:18:05,469
Ich werde entweder 0, 1 oder 2 der Bits in diesem Block ändern und Sie dann bitten, 

348
00:18:05,469 --> 00:18:07,740
herauszufinden, was ich getan habe.

349
00:18:08,260 --> 00:18:10,810
Halten Sie also noch einmal inne und versuchen Sie, es herauszufinden.

350
00:18:18,790 --> 00:18:23,192
Okay, Sie als Empfänger überprüfen jetzt die erste Paritätsgruppe und können sehen, 

351
00:18:23,192 --> 00:18:27,910
dass sie gerade ist, sodass jeder vorhandene Fehler in einer geraden Spalte stehen müsste.

352
00:18:29,690 --> 00:18:33,121
Bei der nächsten Prüfung erhalten wir eine ungerade Zahl, die uns sagt, 

353
00:18:33,121 --> 00:18:37,030
dass mindestens ein Fehler vorliegt, und uns auf diese bestimmte Spalte eingrenzt.

354
00:18:38,550 --> 00:18:41,790
Die dritte Prüfung ist ausgeglichen und schränkt die Möglichkeiten noch weiter ein.

355
00:18:42,650 --> 00:18:44,930
Und die letzte Paritätsprüfung ist seltsam und sagt uns, 

356
00:18:44,930 --> 00:18:48,210
dass irgendwo unten ein Fehler vorliegt, der sich, wie wir jetzt erkennen können, 

357
00:18:48,210 --> 00:18:49,650
an Position Nummer 10 befinden muss.

358
00:18:51,490 --> 00:18:54,368
Darüber hinaus ist die Parität des gesamten Blocks ungerade, 

359
00:18:54,368 --> 00:18:57,530
was uns die Gewissheit gibt, dass es einen Flip und nicht zwei gab.

360
00:18:58,070 --> 00:18:59,970
Bei drei oder mehr sind alle Wetten ungültig.

361
00:19:01,310 --> 00:19:05,060
Nach der Korrektur von Bit Nummer 10 erhalten wir durch Herausziehen der 11 Bits, 

362
00:19:05,060 --> 00:19:08,307
die nicht zur Korrektur verwendet wurden, den relevanten Abschnitt der 

363
00:19:08,307 --> 00:19:11,417
ursprünglichen Nachricht, der, wenn man zurückspult und vergleicht, 

364
00:19:11,417 --> 00:19:14,390
tatsächlich genau das ist, womit wir das Beispiel begonnen haben.

365
00:19:15,710 --> 00:19:19,127
Und da Sie nun wissen, wie man das alles von Hand macht, möchte ich Ihnen zeigen, 

366
00:19:19,127 --> 00:19:22,878
wie Sie den Kernteil dieser gesamten Logik mit einer einzigen Zeile Python-Code ausführen 

367
00:19:22,878 --> 00:19:23,170
können.

368
00:19:23,870 --> 00:19:26,261
Sehen Sie, was ich Ihnen noch nicht gesagt habe, ist, 

369
00:19:26,261 --> 00:19:29,139
wie elegant dieser Algorithmus wirklich ist, wie einfach es ist, 

370
00:19:29,139 --> 00:19:32,372
eine Maschine dazu zu bringen, auf die Position eines Fehlers zu zeigen, 

371
00:19:32,372 --> 00:19:36,004
wie man ihn systematisch skaliert und wie wir alles einordnen können Dies ist ein 

372
00:19:36,004 --> 00:19:38,750
einziger Vorgang und nicht mehrere separate Paritätsprüfungen.

373
00:19:39,430 --> 00:19:41,310
Um zu sehen, was ich meine, kommen Sie zu Teil 2.

