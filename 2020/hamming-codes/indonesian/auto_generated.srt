1
00:00:00,000 --> 00:00:02,560
Saya berasumsi bahwa semua orang di sini berasal dari bagian 1.

2
00:00:03,060 --> 00:00:06,524
Kita berbicara tentang kode Hamming, suatu cara untuk membuat blok data yang 

3
00:00:06,524 --> 00:00:08,820
sebagian besar bitnya membawa pesan yang bermakna, 

4
00:00:08,820 --> 00:00:11,925
sementara beberapa bit lainnya bertindak sebagai semacam redundansi, 

5
00:00:11,925 --> 00:00:15,345
sedemikian rupa sehingga jika ada bit yang dibalik, maka akan muncul pesan. 

6
00:00:15,345 --> 00:00:19,080
bit atau bit redundansi, apa pun di blok ini, penerima akan dapat mengidentifikasi 

7
00:00:19,080 --> 00:00:21,240
kesalahan yang terjadi, dan cara memperbaikinya.

8
00:00:21,880 --> 00:00:24,596
Ide dasar yang disajikan di sana adalah bagaimana menggunakan beberapa 

9
00:00:24,596 --> 00:00:27,160
pemeriksaan paritas untuk mencari biner hingga menemukan kesalahan.

10
00:00:28,980 --> 00:00:31,763
Dalam video tersebut, tujuannya adalah untuk membuat 

11
00:00:31,763 --> 00:00:34,600
kode Hamming terasa mudah dan mudah ditemukan kembali.

12
00:00:35,180 --> 00:00:37,925
Namun saat Anda mulai berpikir untuk mengimplementasikannya, 

13
00:00:37,925 --> 00:00:40,220
baik dalam perangkat lunak maupun perangkat keras, 

14
00:00:40,220 --> 00:00:43,460
pembingkaian tersebut mungkin meremehkan betapa elegannya kode-kode ini.

15
00:00:43,920 --> 00:00:46,989
Anda mungkin berpikir bahwa Anda perlu menulis algoritma yang melacak 

16
00:00:46,989 --> 00:00:50,191
semua kemungkinan lokasi kesalahan dan memotong kelompok itu menjadi dua 

17
00:00:50,191 --> 00:00:53,480
dengan setiap pemeriksaan, tetapi sebenarnya jauh lebih sederhana dari itu.

18
00:00:53,940 --> 00:00:57,288
Jika Anda membacakan jawaban atas empat pemeriksaan paritas yang kami 

19
00:00:57,288 --> 00:01:00,971
lakukan di video terakhir, semuanya dalam angka 1 dan 0, bukan ya dan tidak, 

20
00:01:00,971 --> 00:01:04,080
maka secara harfiah posisi kesalahan akan dijabarkan dalam biner.

21
00:01:04,780 --> 00:01:08,082
Misalnya, angka 7 dalam biner terlihat seperti 0111, 

22
00:01:08,082 --> 00:01:11,260
yang pada dasarnya berarti 4 ditambah 2 ditambah 1.

23
00:01:12,540 --> 00:01:17,197
Dan perhatikan di mana posisi 7 berada, itu memang mempengaruhi kelompok paritas 

24
00:01:17,197 --> 00:01:21,740
pertama kita, dan kelompok paritas kedua, dan ketiga, tapi bukan yang terakhir.

25
00:01:22,220 --> 00:01:24,880
Jadi membaca hasil keempat pemeriksaan tersebut dari 

26
00:01:24,880 --> 00:01:27,540
bawah ke atas memang menunjukkan posisi kesalahannya.

27
00:01:28,320 --> 00:01:31,085
Tidak ada yang istimewa dari contoh 7, ini berfungsi secara umum, 

28
00:01:31,085 --> 00:01:34,772
dan ini membuat logika untuk mengimplementasikan keseluruhan skema pada perangkat keras 

29
00:01:34,772 --> 00:01:35,820
menjadi sangat sederhana.

30
00:01:37,240 --> 00:01:40,933
Sekarang jika Anda ingin melihat mengapa keajaiban ini terjadi, 

31
00:01:40,933 --> 00:01:46,070
ambil 16 label indeks ini untuk posisi kita, tapi daripada menuliskannya dalam basis 10, 

32
00:01:46,070 --> 00:01:49,880
mari kita tulis semuanya dalam biner, mulai dari 0000 hingga 1111.

33
00:01:50,559 --> 00:01:53,485
Saat kita mengembalikan label biner ini ke dalam kotaknya, 

34
00:01:53,485 --> 00:01:57,800
izinkan saya menekankan bahwa label tersebut berbeda dari data yang sebenarnya dikirim.

35
00:01:58,320 --> 00:02:00,950
Itu tidak lebih dari sebuah label konseptual untuk membantu Anda 

36
00:02:00,950 --> 00:02:03,500
dan saya memahami dari mana empat kelompok paritas itu berasal.

37
00:02:04,140 --> 00:02:08,131
Keanggunan dalam mendeskripsikan segala sesuatu yang kita lihat dalam biner mungkin 

38
00:02:08,131 --> 00:02:12,360
dilemahkan oleh kebingungan karena segala sesuatu yang kita lihat dijelaskan dalam biner.

39
00:02:13,020 --> 00:02:14,120
Tapi itu sepadan.

40
00:02:14,800 --> 00:02:19,421
Fokuskan perhatian Anda hanya pada bagian terakhir dari semua label ini, 

41
00:02:19,421 --> 00:02:23,220
lalu sorot posisi di mana bagian terakhir tersebut adalah 1.

42
00:02:24,240 --> 00:02:27,808
Apa yang kita dapatkan adalah yang pertama dari empat kelompok paritas, 

43
00:02:27,808 --> 00:02:31,774
yang berarti Anda dapat menafsirkan pemeriksaan pertama itu sebagai pertanyaan, 

44
00:02:31,774 --> 00:02:35,740
hei, jika ada kesalahan, apakah bit terakhir pada posisi kesalahan itu adalah 1?

45
00:02:38,200 --> 00:02:41,373
Demikian pula, jika Anda fokus pada bit kedua hingga terakhir, 

46
00:02:41,373 --> 00:02:45,353
dan menyorot semua posisi yang bernilai 1, Anda mendapatkan grup paritas kedua 

47
00:02:45,353 --> 00:02:46,160
dari skema kami.

48
00:02:46,740 --> 00:02:50,564
Dengan kata lain, pengecekan kedua itu menanyakan, hai, sekali lagi, 

49
00:02:50,564 --> 00:02:54,500
jika ada kesalahan, apakah bit kedua dari posisi terakhir itu adalah 1?

50
00:02:55,760 --> 00:02:56,900
Dan seterusnya.

51
00:02:57,220 --> 00:03:01,021
Pemeriksaan paritas ketiga mencakup setiap posisi yang bit ketiga 

52
00:03:01,021 --> 00:03:05,802
hingga terakhirnya diaktifkan, dan yang terakhir mencakup delapan posisi terakhir, 

53
00:03:05,802 --> 00:03:08,740
yaitu posisi yang bit urutan tertingginya adalah 1.

54
00:03:09,740 --> 00:03:14,429
Semua yang kita lakukan sebelumnya sama dengan menjawab keempat pertanyaan tersebut, 

55
00:03:14,429 --> 00:03:17,740
yang pada gilirannya sama dengan mengeja posisi dalam biner.

56
00:03:19,620 --> 00:03:21,480
Saya harap ini membuat dua hal menjadi lebih jelas.

57
00:03:22,040 --> 00:03:24,356
Yang pertama adalah bagaimana menggeneralisasi secara sistematis 

58
00:03:24,356 --> 00:03:26,460
ke ukuran blok yang merupakan pangkat dua yang lebih besar.

59
00:03:26,960 --> 00:03:30,279
Jika diperlukan lebih banyak bit untuk mendeskripsikan setiap posisi, 

60
00:03:30,279 --> 00:03:32,602
seperti enam bit untuk mendeskripsikan 64 titik, 

61
00:03:32,602 --> 00:03:36,680
maka setiap bit tersebut memberi Anda salah satu grup paritas yang perlu kita periksa.

62
00:03:38,400 --> 00:03:40,714
Bagi Anda yang menonton teka-teki papan catur yang saya buat 

63
00:03:40,714 --> 00:03:43,180
bersama Matt Parker mungkin menganggap semua ini sangat familiar.

64
00:03:43,660 --> 00:03:46,448
Logika intinya sama, tetapi memecahkan masalah yang berbeda, 

65
00:03:46,448 --> 00:03:48,780
dan diterapkan pada papan catur berukuran 64 kotak.

66
00:03:49,880 --> 00:03:53,401
Hal kedua yang saya harap dapat dijelaskan adalah mengapa bit 

67
00:03:53,401 --> 00:03:57,320
paritas kita berada pada posisi pangkat dua, misalnya 1, 2, 4, dan 8.

68
00:03:58,000 --> 00:04:03,000
Ini adalah posisi yang representasi binernya hanya diaktifkan satu bit.

69
00:04:03,600 --> 00:04:06,473
Artinya, masing-masing bit paritas tersebut berada 

70
00:04:06,473 --> 00:04:09,460
di dalam satu dan hanya satu dari empat grup paritas.

71
00:04:12,040 --> 00:04:14,634
Anda juga dapat melihat ini dalam contoh yang lebih besar, 

72
00:04:14,634 --> 00:04:17,097
di mana tidak peduli seberapa besar yang Anda dapatkan, 

73
00:04:17,097 --> 00:04:19,339
setiap bit paritas hanya menyentuh salah satu grup.

74
00:04:25,600 --> 00:04:29,052
Setelah Anda memahami bahwa pemeriksaan paritas yang telah kita fokuskan 

75
00:04:29,052 --> 00:04:32,504
sebagian besar waktu kita tidak lebih dari cara cerdas untuk menguraikan 

76
00:04:32,504 --> 00:04:36,051
posisi kesalahan dalam biner, maka kita dapat menghubungkannya dengan cara 

77
00:04:36,051 --> 00:04:39,598
berpikir yang berbeda tentang hamming. kode, yang bisa dibilang jauh lebih 

78
00:04:39,598 --> 00:04:43,240
sederhana dan elegan, dan pada dasarnya dapat ditulis dengan satu baris kode.

79
00:04:43,660 --> 00:04:45,500
Ini didasarkan pada fungsi XOR.

80
00:04:46,940 --> 00:04:50,220
XOR bagi anda yang belum tahu, singkatan dari Exclusive or.

81
00:04:50,780 --> 00:04:55,121
Saat Anda mengambil XOR dari dua bit, itu akan mengembalikan 1 jika salah satu dari 

82
00:04:55,121 --> 00:04:59,360
bit tersebut diaktifkan, tetapi tidak jika keduanya diaktifkan atau dinonaktifkan.

83
00:05:00,100 --> 00:05:02,980
Dengan kata lain, ini adalah paritas dari dua bit ini.

84
00:05:03,540 --> 00:05:06,760
Sebagai orang matematika, saya lebih suka menganggapnya sebagai mod penjumlahan 2.

85
00:05:07,360 --> 00:05:10,890
Kita juga biasa berbicara tentang XOR dari dua string bit yang berbeda, 

86
00:05:10,890 --> 00:05:13,440
yang pada dasarnya melakukan komponen demi komponen.

87
00:05:13,680 --> 00:05:15,720
Ini seperti tambahan, tetapi Anda tidak pernah membawanya.

88
00:05:16,500 --> 00:05:19,533
Sekali lagi, mereka yang lebih cenderung matematis mungkin lebih suka 

89
00:05:19,533 --> 00:05:22,480
menganggap ini sebagai penjumlahan dua vektor dan pengurangan mod 2.

90
00:05:23,500 --> 00:05:26,491
Jika Anda membuka beberapa Python sekarang dan menerapkan 

91
00:05:26,491 --> 00:05:29,019
operasi tanda sisipan antara dua bilangan bulat, 

92
00:05:29,019 --> 00:05:32,940
inilah yang dilakukannya kecuali representasi bit dari angka-angka tersebut.

93
00:05:34,960 --> 00:05:39,002
Poin kuncinya bagi Anda dan saya adalah bahwa mengambil XOR dari banyak string 

94
00:05:39,002 --> 00:05:42,892
bit yang berbeda secara efektif merupakan cara untuk menghitung parodi dari 

95
00:05:42,892 --> 00:05:47,140
sekelompok grup terpisah, seperti halnya dengan kolom, semuanya dalam satu gerakan.

96
00:05:51,260 --> 00:05:53,602
Ini memberi kita cara yang agak menarik untuk memikirkan 

97
00:05:53,602 --> 00:05:55,944
tentang beberapa pemeriksaan paritas dari algoritma kode 

98
00:05:55,944 --> 00:05:58,780
Hamming karena semuanya dikemas bersama menjadi satu operasi tunggal.

99
00:05:59,479 --> 00:06:02,180
Meski sekilas memang terlihat sangat berbeda.

100
00:06:02,820 --> 00:06:08,297
Secara khusus tuliskan 16 posisi dalam biner, seperti yang kita lakukan sebelumnya, 

101
00:06:08,297 --> 00:06:12,340
dan sekarang sorot posisi di mana bit pesan diubah menjadi 1, 

102
00:06:12,340 --> 00:06:17,100
lalu kumpulkan posisi-posisi ini ke dalam satu kolom besar dan ambil XOR.

103
00:06:19,260 --> 00:06:22,711
Anda mungkin dapat menebak bahwa 4 bit yang berada di bagian bawah sebagai 

104
00:06:22,711 --> 00:06:26,208
hasilnya sama dengan 4 pemeriksaan paritas yang telah kita kenal dan sukai, 

105
00:06:26,208 --> 00:06:29,200
tetapi luangkan waktu sejenak untuk memikirkan alasan sebenarnya.

106
00:06:32,220 --> 00:06:36,805
Kolom terakhir ini, misalnya, menghitung semua posisi yang bit terakhirnya adalah 1, 

107
00:06:36,805 --> 00:06:39,934
namun kita sudah dibatasi hanya pada posisi yang disorot, 

108
00:06:39,934 --> 00:06:44,357
sehingga secara efektif menghitung berapa banyak posisi yang disorot yang berasal 

109
00:06:44,357 --> 00:06:45,760
dari grup paritas pertama.

110
00:06:46,240 --> 00:06:46,800
Apakah itu masuk akal?

111
00:06:49,080 --> 00:06:54,570
Demikian pula, kolom berikutnya menghitung berapa banyak posisi dalam grup paritas kedua, 

112
00:06:54,570 --> 00:07:00,000
posisi yang bit kedua hingga terakhirnya adalah 1, dan yang juga disorot, dan seterusnya.

113
00:07:00,260 --> 00:07:02,090
Ini hanyalah perubahan kecil dalam perspektif 

114
00:07:02,090 --> 00:07:03,960
terhadap hal yang sama yang telah kita lakukan.

115
00:07:07,760 --> 00:07:09,600
Jadi Anda tahu ke mana perginya setelah ini.

116
00:07:10,000 --> 00:07:12,860
Pengirim bertanggung jawab untuk mengubah beberapa bit 

117
00:07:12,860 --> 00:07:15,720
paritas khusus untuk memastikan jumlahnya menjadi 0000.

118
00:07:15,720 --> 00:07:18,535
Sekarang setelah kita memilikinya seperti ini, 

119
00:07:18,535 --> 00:07:22,428
ini memberi kita cara yang sangat bagus untuk memikirkan mengapa 

120
00:07:22,428 --> 00:07:27,580
keempat bit yang dihasilkan di bawah ini secara langsung menguraikan posisi kesalahan.

121
00:07:28,460 --> 00:07:31,860
Katakanlah beberapa bit di blok ini diubah dari 0 menjadi 1.

122
00:07:32,600 --> 00:07:38,067
Artinya adalah posisi bit tersebut sekarang akan dimasukkan dalam total XOR, 

123
00:07:38,067 --> 00:07:43,820
yang mengubah jumlah dari 0 menjadi nilai yang baru dimasukkan, posisi kesalahan.

124
00:07:44,460 --> 00:07:47,014
Sedikit kurang jelas, hal yang sama juga berlaku 

125
00:07:47,014 --> 00:07:49,360
jika ada kesalahan yang mengubah 1 menjadi 0.

126
00:07:50,180 --> 00:07:52,661
Soalnya, jika Anda menambahkan sedikit string dua kali, 

127
00:07:52,661 --> 00:07:54,965
itu sama saja dengan tidak memilikinya sama sekali, 

128
00:07:54,965 --> 00:07:57,580
pada dasarnya karena di dunia ini 1 tambah 1 sama dengan 0.

129
00:07:57,580 --> 00:08:00,940
Jadi menambahkan salinan posisi ini ke jumlah total 

130
00:08:00,940 --> 00:08:04,300
memiliki efek yang sama seperti kita memindahkannya.

131
00:08:05,160 --> 00:08:10,700
Dan efeknya, sekali lagi, adalah hasil total di bawah ini menjelaskan posisi kesalahannya.

132
00:08:13,039 --> 00:08:15,206
Untuk mengilustrasikan betapa elegannya hal ini, 

133
00:08:15,206 --> 00:08:18,875
izinkan saya menunjukkan satu baris kode Python yang saya referensikan sebelumnya, 

134
00:08:18,875 --> 00:08:21,440
yang akan menangkap hampir semua logika di pihak penerima.

135
00:08:22,080 --> 00:08:26,408
Kita akan mulai dengan membuat array acak 16 1 dan 0 untuk mensimulasikan blok data, 

136
00:08:26,408 --> 00:08:30,074
dan saya akan memberinya nama bit, tapi tentu saja dalam praktiknya ini 

137
00:08:30,074 --> 00:08:34,097
akan menjadi sesuatu yang kita terima dari pengirim, dan bukannya karena acak, 

138
00:08:34,097 --> 00:08:37,000
ia akan membawa 11 bit data bersama dengan 5 bit paritas.

139
00:08:37,000 --> 00:08:41,566
Jika saya memanggil fungsi enumerateBits, yang dilakukannya adalah memasangkan 

140
00:08:41,566 --> 00:08:44,687
masing-masing bit tersebut dengan indeks yang sesuai, 

141
00:08:44,687 --> 00:08:47,000
dalam hal ini berjalan dari 0 hingga 15.

142
00:08:48,180 --> 00:08:51,969
Jadi jika kita kemudian membuat daftar yang mengulang semua pasangan ini, 

143
00:08:51,969 --> 00:08:56,065
pasangan yang terlihat seperti i, dan kemudian kita hanya mengeluarkan nilai i, 

144
00:08:56,065 --> 00:09:00,264
hanya indeksnya, itu tidak terlalu menarik, kita hanya mendapatkan kembali indeks 

145
00:09:00,264 --> 00:09:01,340
tersebut 0 sampai 15.

146
00:09:01,680 --> 00:09:05,533
Tetapi jika kita menambahkan kondisi untuk hanya melakukan ini jika bit, 

147
00:09:05,533 --> 00:09:08,331
yang berarti jika bit tersebut adalah 1 dan bukan 0, 

148
00:09:08,331 --> 00:09:12,660
maka bit tersebut hanya akan menarik keluar posisi di mana bit terkait diaktifkan.

149
00:09:13,380 --> 00:09:20,360
Dalam hal ini sepertinya posisi tersebut adalah 0, 4, 6, 9, dst.

150
00:09:20,720 --> 00:09:23,838
Apa yang kita inginkan adalah mengumpulkan semua posisi tersebut, 

151
00:09:23,838 --> 00:09:27,240
posisi bit-bit yang diaktifkan, dan kemudian melakukan XOR bersama-sama.

152
00:09:29,180 --> 00:09:31,099
Untuk melakukan ini dengan Python, izinkan saya 

153
00:09:31,099 --> 00:09:33,220
mengimpor beberapa fungsi bermanfaat terlebih dahulu.

154
00:09:33,900 --> 00:09:36,685
Dengan begitu kita bisa memanggil pengurangan() pada daftar ini, 

155
00:09:36,685 --> 00:09:38,700
dan menggunakan fungsi XOR untuk menguranginya.

156
00:09:39,100 --> 00:09:42,680
Ini pada dasarnya memakan seluruh daftar, mengambil XOR di sepanjang jalan.

157
00:09:44,800 --> 00:09:46,965
Jika mau, Anda dapat menulis fungsi XOR tersebut 

158
00:09:46,965 --> 00:09:49,440
secara eksplisit tanpa harus mengimpornya dari mana pun.

159
00:09:51,940 --> 00:09:56,921
Jadi saat ini sepertinya jika kita melakukan ini pada blok acak 16 bit, 

160
00:09:56,921 --> 00:10:01,280
ia akan mengembalikan 9, yang memiliki representasi biner 1001.

161
00:10:01,980 --> 00:10:05,229
Kami tidak akan melakukannya di sini, tetapi Anda dapat menulis fungsi di 

162
00:10:05,229 --> 00:10:08,522
mana pengirim menggunakan representasi biner tersebut untuk mengatur empat 

163
00:10:08,522 --> 00:10:11,903
bit paritas sesuai kebutuhan, yang pada akhirnya membuat blok ini ke keadaan 

164
00:10:11,903 --> 00:10:15,460
di mana menjalankan baris kode ini pada daftar bit lengkap akan kembali sebuah 0.

165
00:10:16,080 --> 00:10:20,100
Ini akan dianggap sebagai blok yang dipersiapkan dengan baik.

166
00:10:20,100 --> 00:10:23,803
Yang keren adalah jika kita mengganti salah satu bit dalam daftar ini, 

167
00:10:23,803 --> 00:10:27,403
menyimulasikan kesalahan acak dari noise, lalu jika Anda menjalankan 

168
00:10:27,403 --> 00:10:30,220
baris kode yang sama, kesalahan tersebut akan dicetak.

169
00:10:30,960 --> 00:10:31,520
Bukankah itu rapi?

170
00:10:31,820 --> 00:10:36,748
Anda bisa mendapatkan blok ini secara tiba-tiba, menjalankan satu baris ini di atasnya, 

171
00:10:36,748 --> 00:10:41,060
dan secara otomatis akan memunculkan posisi kesalahan, atau 0 jika tidak ada.

172
00:10:42,500 --> 00:10:44,840
Dan tidak ada yang istimewa dari ukuran 16 di sini.

173
00:10:44,840 --> 00:10:49,860
Baris kode yang sama akan berfungsi jika Anda memiliki daftar, katakanlah, 256 bit.

174
00:10:51,880 --> 00:10:55,106
Tak perlu dikatakan, ada lebih banyak kode untuk ditulis di sini, 

175
00:10:55,106 --> 00:10:58,871
seperti melakukan pemeriksaan meta paritas untuk mendeteksi kesalahan 2-bit, 

176
00:10:58,871 --> 00:11:02,586
namun idenya adalah bahwa hampir semua logika inti dari skema kita turun ke 

177
00:11:02,586 --> 00:11:03,760
pengurangan XOR tunggal.

178
00:11:06,120 --> 00:11:09,217
Sekarang, tergantung pada kenyamanan Anda dengan biner dan XOR serta 

179
00:11:09,217 --> 00:11:12,270
perangkat lunak secara umum, Anda mungkin menganggap perspektif ini 

180
00:11:12,270 --> 00:11:15,367
sedikit membingungkan, atau jauh lebih elegan dan sederhana sehingga 

181
00:11:15,367 --> 00:11:18,420
Anda bertanya-tanya mengapa kami tidak memulainya dari awal. -pergi.

182
00:11:19,140 --> 00:11:21,840
Secara longgar, perspektif pemeriksaan paritas berganda lebih mudah 

183
00:11:21,840 --> 00:11:24,700
untuk dipikirkan ketika mengimplementasikan kode Hamming pada perangkat 

184
00:11:24,700 --> 00:11:27,560
keras secara langsung, dan perspektif XOR paling mudah untuk dipikirkan 

185
00:11:27,560 --> 00:11:30,500
ketika melakukannya dalam perangkat lunak, dari tingkat yang lebih tinggi.

186
00:11:31,360 --> 00:11:34,164
Yang pertama paling mudah dilakukan dengan tangan, 

187
00:11:34,164 --> 00:11:39,002
dan menurut saya ini lebih baik dalam menanamkan intuisi inti yang mendasari semua ini, 

188
00:11:39,002 --> 00:11:43,621
yaitu bahwa informasi yang diperlukan untuk menemukan satu kesalahan terkait dengan 

189
00:11:43,621 --> 00:11:48,240
log ukuran blok. , atau dengan kata lain, ia bertambah sedikit demi sedikit seiring 

190
00:11:48,240 --> 00:11:50,000
dengan bertambahnya ukuran blok.

191
00:11:51,020 --> 00:11:53,396
Fakta yang relevan di sini adalah bahwa informasi tersebut secara 

192
00:11:53,396 --> 00:11:56,060
langsung berhubungan dengan seberapa banyak redundansi yang kita butuhkan.

193
00:11:56,660 --> 00:11:59,926
Hal itulah yang bertentangan dengan reaksi spontan kebanyakan orang ketika mereka 

194
00:11:59,926 --> 00:12:02,914
pertama kali berpikir untuk membuat sebuah pesan tahan terhadap kesalahan, 

195
00:12:02,914 --> 00:12:06,221
di mana biasanya menyalin seluruh pesan adalah naluri pertama yang terlintas dalam 

196
00:12:06,221 --> 00:12:06,540
pikiran.

197
00:12:07,500 --> 00:12:11,367
Lalu, ada cara lain yang terkadang Anda lihat menampilkan kode Hamming, 

198
00:12:11,367 --> 00:12:14,000
yaitu mengalikan pesan dengan satu matriks besar.

199
00:12:14,670 --> 00:12:18,240
Agak bagus karena menghubungkannya dengan kelompok kode linier yang lebih luas, 

200
00:12:18,240 --> 00:12:20,828
tapi menurut saya hal itu hampir tidak memberikan intuisi 

201
00:12:20,828 --> 00:12:23,060
tentang dari mana asalnya atau bagaimana skalanya.

202
00:12:25,200 --> 00:12:28,072
Dan berbicara tentang penskalaan, Anda mungkin memperhatikan bahwa 

203
00:12:28,072 --> 00:12:31,160
efisiensi skema ini semakin baik seiring dengan peningkatan ukuran blok.

204
00:12:35,000 --> 00:12:38,901
Misalnya, kita melihat bahwa dengan 256 bit, Anda hanya menggunakan 3% dari ruang 

205
00:12:38,901 --> 00:12:42,660
tersebut untuk redundansi, dan hal tersebut terus menjadi lebih baik dari sana.

206
00:12:43,300 --> 00:12:47,340
Ketika jumlah bit paritas bertambah satu per satu, ukuran blok terus berlipat ganda.

207
00:12:49,000 --> 00:12:52,814
Dan jika Anda menganggapnya ekstrem, Anda bisa memiliki blok dengan, katakanlah, 

208
00:12:52,814 --> 00:12:56,393
satu juta bit, di mana Anda benar-benar akan memainkan 20 pertanyaan dengan 

209
00:12:56,393 --> 00:13:00,020
pemeriksaan paritas Anda, dan blok tersebut hanya menggunakan 21 bit paritas.

210
00:13:00,740 --> 00:13:04,022
Dan jika Anda mundur sejenak untuk berpikir tentang melihat sejuta 

211
00:13:04,022 --> 00:13:07,060
bit dan menemukan satu kesalahan, itu benar-benar terasa gila.

212
00:13:08,199 --> 00:13:10,931
Masalahnya, tentu saja, dengan blok yang lebih besar, 

213
00:13:10,931 --> 00:13:14,725
kemungkinan melihat lebih dari satu atau dua kesalahan bit akan meningkat, 

214
00:13:14,725 --> 00:13:17,660
dan kode Hamming tidak dapat menangani apa pun selain itu.

215
00:13:18,320 --> 00:13:21,290
Jadi dalam praktiknya, yang Anda inginkan adalah menemukan ukuran yang tepat 

216
00:13:21,290 --> 00:13:24,300
sehingga kemungkinan terjadinya terlalu banyak bit flips tidak terlalu tinggi.

217
00:13:26,600 --> 00:13:30,183
Selain itu, dalam praktiknya, kesalahan cenderung terjadi dalam beberapa saat, 

218
00:13:30,183 --> 00:13:33,721
yang akan merusak total satu blok, jadi salah satu taktik umum untuk membantu 

219
00:13:33,721 --> 00:13:37,396
menyebarkan ledakan kesalahan ke banyak blok yang berbeda adalah dengan menjalin 

220
00:13:37,396 --> 00:13:40,980
blok-blok tersebut, seperti ini, sebelum mereka terjadi. dikirim atau disimpan.

221
00:13:45,580 --> 00:13:48,979
Selain itu, banyak dari hal ini yang dianggap sepenuhnya diperdebatkan oleh 

222
00:13:48,979 --> 00:13:52,378
kode-kode yang lebih modern, seperti algoritma Reed-Solomon yang jauh lebih 

223
00:13:52,378 --> 00:13:55,196
umum digunakan, yang menangani error burst dengan sangat baik, 

224
00:13:55,196 --> 00:13:58,820
dan dapat disesuaikan agar tahan terhadap jumlah error yang lebih besar per blok.

225
00:13:59,360 --> 00:14:01,340
Tapi itu topik untuk lain waktu.

226
00:14:02,500 --> 00:14:05,632
Dalam bukunya The Art of Doing Science and Engineering, 

227
00:14:05,632 --> 00:14:09,940
Hamming sangat berterus terang tentang betapa berliku-liku penemuan kode ini.

228
00:14:10,620 --> 00:14:14,097
Dia pertama kali mencoba segala macam skema berbeda yang melibatkan pengorganisasian 

229
00:14:14,097 --> 00:14:17,780
bit-bit menjadi bagian-bagian kisi dimensi yang lebih tinggi dan hal-hal aneh seperti ini.

230
00:14:18,300 --> 00:14:21,651
Gagasan bahwa mungkin saja pemeriksaan paritas berkonspirasi sedemikian 

231
00:14:21,651 --> 00:14:25,049
rupa sehingga menjelaskan posisi kesalahan hanya muncul di benak Hamming 

232
00:14:25,049 --> 00:14:28,354
ketika dia mundur setelah serangkaian analisis lain dan bertanya, oke, 

233
00:14:28,354 --> 00:14:31,520
apa cara paling efisien yang bisa saya lakukan? mungkin tentang ini?

234
00:14:32,620 --> 00:14:35,471
Dia juga berterus terang tentang betapa pentingnya pemeriksaan 

235
00:14:35,471 --> 00:14:38,368
paritas yang sudah ada dalam pikirannya, yang mana hal ini jauh 

236
00:14:38,368 --> 00:14:41,220
lebih jarang dilakukan pada tahun 1940an dibandingkan saat ini.

237
00:14:41,920 --> 00:14:45,901
Ada setengah lusin kali dalam buku ini dia merujuk pada kutipan Louis Pasteur, 

238
00:14:45,901 --> 00:14:48,220
keberuntungan berpihak pada pikiran yang siap.

239
00:14:49,320 --> 00:14:52,511
Ide-ide cerdas sering kali terlihat sederhana jika dipikir-pikir, 

240
00:14:52,511 --> 00:14:54,300
sehingga mudah untuk kurang dihargai.

241
00:14:54,960 --> 00:14:57,684
Saat ini harapan jujur saya adalah bahwa kode Hamming, 

242
00:14:57,684 --> 00:15:01,300
atau setidaknya kemungkinan kode tersebut, terasa hampir jelas bagi Anda.

243
00:15:01,660 --> 00:15:04,140
Namun Anda tidak boleh membodohi diri sendiri dengan berpikir 

244
00:15:04,140 --> 00:15:06,820
bahwa hal tersebut sebenarnya sudah jelas, karena sebenarnya tidak.

245
00:15:07,880 --> 00:15:11,504
Salah satu alasan mengapa ide-ide cerdas terlihat mudah adalah karena kita 

246
00:15:11,504 --> 00:15:14,548
hanya melihat hasil akhirnya, membereskan apa yang berantakan, 

247
00:15:14,548 --> 00:15:16,819
tidak pernah menyebutkan semua hal yang salah, 

248
00:15:16,819 --> 00:15:20,588
meremehkan betapa luasnya ruang kemungkinan yang dapat dieksplorasi pada awal 

249
00:15:20,588 --> 00:15:22,860
sebuah masalah. proses penyelesaian, semua itu.

250
00:15:23,820 --> 00:15:24,900
Namun hal ini berlaku secara umum.

251
00:15:24,900 --> 00:15:27,378
Saya pikir untuk beberapa penemuan khusus, ada alasan 

252
00:15:27,378 --> 00:15:30,040
kedua yang lebih dalam sehingga kita kurang menghargainya.

253
00:15:30,840 --> 00:15:34,607
Memikirkan informasi dalam bentuk potongan-potongan baru benar-benar menyatu menjadi 

254
00:15:34,607 --> 00:15:38,196
teori penuh pada tahun 1948, dengan makalah penting Claude Shannon tentang teori 

255
00:15:38,196 --> 00:15:38,640
informasi.

256
00:15:39,280 --> 00:15:42,540
Hal ini pada dasarnya bersamaan dengan ketika Hamming mengembangkan algoritmanya.

257
00:15:43,300 --> 00:15:46,558
Ini adalah makalah dasar yang sama yang menunjukkan, dalam arti tertentu, 

258
00:15:46,558 --> 00:15:49,333
bahwa koreksi kesalahan yang efisien selalu mungkin dilakukan, 

259
00:15:49,333 --> 00:15:52,900
tidak peduli seberapa tinggi kemungkinan pembalikan bit, setidaknya secara teori.

260
00:15:53,700 --> 00:15:56,627
Omong-omong, Shannon dan Hamming berbagi kantor di Bell Labs, 

261
00:15:56,627 --> 00:15:58,988
meskipun mengerjakan hal-hal yang sangat berbeda, 

262
00:15:58,988 --> 00:16:01,160
yang sepertinya bukan suatu kebetulan di sini.

263
00:16:02,380 --> 00:16:05,816
Beberapa dekade kemudian, dan saat ini, banyak dari kita yang begitu 

264
00:16:05,816 --> 00:16:08,903
tenggelam dalam pemikiran tentang hal-hal kecil dan informasi 

265
00:16:08,903 --> 00:16:12,340
sehingga mudah untuk mengabaikan betapa berbedanya cara berpikir ini.

266
00:16:13,100 --> 00:16:17,707
Ironisnya, ide-ide yang secara mendalam membentuk cara berpikir generasi masa depan 

267
00:16:17,707 --> 00:16:22,260
akan membuat generasi masa depan terlihat lebih sederhana daripada yang sebenarnya.

