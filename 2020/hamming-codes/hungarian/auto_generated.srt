1
00:00:03,620 --> 00:00:06,748
Gondolkodott már azon, hogyan lehetséges, hogy egy CD-t 

2
00:00:06,748 --> 00:00:10,100
vagy DVD-t megkarcolva mégis lejátsszon mindent, amit tárol?

3
00:00:10,900 --> 00:00:14,788
A karcolás valóban hatással van a lemezen lévő 1-esekre és 0-akra, 

4
00:00:14,788 --> 00:00:17,980
így a lemez más adatokat olvas ki, mint amiket tárolt, 

5
00:00:17,980 --> 00:00:22,332
de hacsak nem nagyon karcos a lemez, a kiolvasott bitek pontosan ugyanabba 

6
00:00:22,332 --> 00:00:27,440
a fájlba dekódolódnak, mint ami rá volt kódolva, bitről bitre másolva, a hibák ellenére.

7
00:00:27,440 --> 00:00:31,997
Van egy csomó matematikai okosság, amely lehetővé teszi számunkra az adatok tárolását, 

8
00:00:31,997 --> 00:00:36,660
és ami ugyanilyen fontos, az adatok továbbítását, olyan módon, amely ellenáll a hibáknak.

9
00:00:37,520 --> 00:00:41,600
Nos, valójában nem kell túl sok okosság ahhoz, hogy kitaláljuk, hogyan lehet ezt megtenni.

10
00:00:42,060 --> 00:00:46,176
Bármilyen fájl, legyen az videó, hang, szöveg, 

11
00:00:46,176 --> 00:00:50,380
kód, kép, bármi, végső soron 1ek és 0k sorozata.

12
00:00:50,680 --> 00:00:54,099
És egy egyszerű stratégia a felcserélődött bitek kijavítására az lenne, 

13
00:00:54,099 --> 00:00:56,000
ha minden bit három példányát tárolnánk.

14
00:00:57,580 --> 00:01:01,007
Ezután a fájlt olvasó gép össze tudná hasonlítani ezt a három másolatot, 

15
00:01:01,007 --> 00:01:04,060
és mindig a háromból a legjobb kettőt választaná, ha eltérés van.

16
00:01:07,160 --> 00:01:10,860
De ez azt jelenti, hogy a hely kétharmadát redundanciára használja.

17
00:01:11,480 --> 00:01:14,792
És még így is, a feláldozott hely ellenére sincs erős garancia arra, 

18
00:01:14,792 --> 00:01:17,240
hogy mi történik, ha egynél több bit felcserélődik.

19
00:01:17,980 --> 00:01:20,420
Sokkal érdekesebb kérdés, hogy hogyan lehet úgy alakítani, 

20
00:01:20,420 --> 00:01:24,020
hogy a hibák javíthatók legyenek, miközben a lehető legkevesebb helyet kelljen feladni.

21
00:01:24,520 --> 00:01:30,679
Például a videóban megismert módszerrel 256 bites blokkokban tárolhatod az adatokat, 

22
00:01:30,679 --> 00:01:33,360
ahol minden blokk 9 bitet használ, 9!

23
00:01:33,760 --> 00:01:37,111
hogy egyfajta redundanciaként működjön, a többi 247 bit pedig 

24
00:01:37,111 --> 00:01:40,300
szabadon hordozhat bármilyen értelmes üzenetet vagy adatot.

25
00:01:40,900 --> 00:01:44,674
És még mindig az lesz a helyzet, hogy ha bármelyik bit itt felborul, 

26
00:01:44,674 --> 00:01:48,776
csak ezt a blokkot megnézve és semmi mást, egy gép képes lesz azonosítani, 

27
00:01:48,776 --> 00:01:52,660
hogy hiba történt, és pontosan hol, hogy tudja, hogyan kell korrigálni.

28
00:01:52,660 --> 00:01:54,620
És őszintén szólva, ez olyan, mint a varázslat.

29
00:01:55,440 --> 00:01:57,992
És ennél a konkrét sémánál, ha két bit felcserélődik, 

30
00:01:57,992 --> 00:02:01,772
a gép legalább képes lesz felismerni, hogy két hiba történt, bár azt nem tudja, 

31
00:02:01,772 --> 00:02:02,860
hogyan kell kijavítani.

32
00:02:03,520 --> 00:02:05,262
Kicsit később még beszélünk arról, hogy ez hogyan 

33
00:02:05,262 --> 00:02:06,900
skálázódik a különböző méretű blokkok esetében.

34
00:02:07,860 --> 00:02:10,671
Az ilyen hibák kijavítását lehetővé tevő módszereket 

35
00:02:10,671 --> 00:02:12,900
- ésszerűen - hibajavító kódoknak nevezik.

36
00:02:13,660 --> 00:02:17,851
Az elmúlt évszázad nagy részében ez a terület a meglepően mély matematika igazán 

37
00:02:17,851 --> 00:02:21,940
gazdag forrása volt, amelyet a mindennapokban használt eszközökbe építettek be.

38
00:02:22,840 --> 00:02:26,955
A cél az, hogy nagyon alaposan megismerje az egyik legkorábbi példát, 

39
00:02:26,955 --> 00:02:28,660
az úgynevezett Hamming-kódot.

40
00:02:29,520 --> 00:02:32,789
És egyébként, ahogyan a videó felépítéséről gondolkodom, az kevésbé arról szól, 

41
00:02:32,789 --> 00:02:35,569
hogy a lehető legközvetlenebbül elmagyarázzam, sokkal inkább arról, 

42
00:02:35,569 --> 00:02:38,307
hogy arra ösztönözzelek benneteket, hogy találjátok ki magatoknak, 

43
00:02:38,307 --> 00:02:39,820
egy kis gyengéd útmutatással itt-ott.

44
00:02:40,120 --> 00:02:42,900
Tehát amikor úgy érzed, hogy látod, hova fog ez a dolog menni egy bizonyos ponton, 

45
00:02:42,900 --> 00:02:45,178
akkor vedd ki azt a pillanatot, hogy megállj, és aktívan megjósold, 

46
00:02:45,178 --> 00:02:46,720
hogy mi lesz a séma, mielőtt elmondanám neked.

47
00:02:47,240 --> 00:02:50,382
Továbbá, ha szeretnéd, hogy a megértésed leérjen a hardver szintjére, 

48
00:02:50,382 --> 00:02:53,929
Ben Eater készített egy videót ezzel a videóval kapcsolatban, amely bemutatja, 

49
00:02:53,929 --> 00:02:57,162
hogyan lehet a Hamming-kódokat ténylegesen megvalósítani kenyérlapokon, 

50
00:02:57,162 --> 00:02:58,240
ami rendkívül kielégítő.

51
00:02:59,300 --> 00:03:02,378
Tudni kell, hogy a Hamming-kódokat nem használják olyan széles körben, 

52
00:03:02,378 --> 00:03:05,066
mint a modernebb kódokat, például a Reed-Solomon algoritmust, 

53
00:03:05,066 --> 00:03:07,103
de van egyfajta varázslatos kontraszt aközött, 

54
00:03:07,103 --> 00:03:09,618
hogy mennyire lehetetlennek tűnik ez a feladat az elején, 

55
00:03:09,618 --> 00:03:13,000
és mennyire teljesen ésszerűnek tűnik, amint megismerkedsz a Hamming-kódokkal.

56
00:03:13,720 --> 00:03:18,018
A hibajavítás alapelve az, hogy a lehetséges üzenetek hatalmas 

57
00:03:18,018 --> 00:03:22,180
terében csak néhány részhalmaz tekinthető érvényes üzenetnek.

58
00:03:22,800 --> 00:03:26,940
Analógia gyanánt gondoljon a helyesen és a helytelenül írt szavakra.

59
00:03:28,900 --> 00:03:32,224
Amikor egy érvényes üzenet megváltozik, a címzett felelős azért, 

60
00:03:32,224 --> 00:03:35,549
hogy a látottakat a legközelebbi érvényes szomszédra korrigálja, 

61
00:03:35,549 --> 00:03:37,340
ahogyan egy elírás esetén is tenné.

62
00:03:38,220 --> 00:03:41,140
Az ilyen üzenetek hatékony kategorizálására alkalmas konkrét 

63
00:03:41,140 --> 00:03:44,060
algoritmus kidolgozásához azonban szükség van némi okosságra.

64
00:03:46,780 --> 00:03:50,372
A történet az 1940-es években kezdődik, amikor a fiatal Richard Hamming a Bell 

65
00:03:50,372 --> 00:03:53,145
Labs-nél dolgozott, és munkájának egy része egy nagyon nagy, 

66
00:03:53,145 --> 00:03:55,373
drága lyukkártyás számítógép használatával járt, 

67
00:03:55,373 --> 00:03:57,420
amelyhez csak korlátozottan volt hozzáférése.

68
00:03:57,800 --> 00:03:59,766
És a programok, amelyeket folyamatosan átküldött rajta, 

69
00:03:59,766 --> 00:04:02,400
folyamatosan kudarcot vallottak, mert időnként egy-egy bitet félreolvasott.

70
00:04:03,120 --> 00:04:05,410
Mivel a frusztráció a találmányok olvasztótégelye, 

71
00:04:05,410 --> 00:04:08,420
annyira elege lett, hogy feltalálta a világ első hibajavító kódját.

72
00:04:09,060 --> 00:04:11,846
A Hamming-kódokat sokféleképpen lehet keretbe foglalni, 

73
00:04:11,846 --> 00:04:15,380
de első körben úgy fogjuk végigvenni, ahogy maga Hamming gondolta őket.

74
00:04:16,519 --> 00:04:20,940
Használjunk egy egyszerű, de nem túl egyszerű példát, egy 16 bites blokkot.

75
00:04:21,820 --> 00:04:24,740
A bitek pozícióit 0-tól 15-ig számozzuk.

76
00:04:25,620 --> 00:04:30,123
A tárolni kívánt tényleges adatok csak 12 bitet fognak kitenni ezekből a bitekből, 

77
00:04:30,123 --> 00:04:33,000
míg 4 pozíciót egyfajta redundanciaként foglalunk le.

78
00:04:33,900 --> 00:04:36,375
A redundáns szó itt nem egyszerűen másolást jelent, 

79
00:04:36,375 --> 00:04:40,040
elvégre ez a 4 bit nem ad elég helyet ahhoz, hogy vakon másoljuk az adatokat.

80
00:04:40,720 --> 00:04:44,129
Ehelyett sokkal árnyaltabb és okosabb redundanciára lesz szükség, 

81
00:04:44,129 --> 00:04:47,280
amely nem ad hozzá új információt, de növeli a rugalmasságot.

82
00:04:48,600 --> 00:04:52,209
Azt várhatnánk, hogy ez a 4 különleges darab szépen össze lesz csomagolva, 

83
00:04:52,209 --> 00:04:56,395
talán a végén, vagy valami ilyesmi, de mint látni fogjuk, ha olyan pozíciókban vannak, 

84
00:04:56,395 --> 00:04:59,620
amelyek 2 hatványai, akkor a végére valami igazán elegánsat kapunk.

85
00:05:00,200 --> 00:05:01,852
Ez egy kis támpontot adhat arra vonatkozóan is, 

86
00:05:01,852 --> 00:05:03,540
hogy ez hogyan skálázódik nagyobb blokkok esetén.

87
00:05:04,900 --> 00:05:08,256
Továbbá, technikailag csak 11 bitnyi adatot tartalmaz, 

88
00:05:08,256 --> 00:05:13,260
és egy enyhe árnyalatnyi eltérés van a 0. pozícióban, de ez most ne aggódj emiatt.

89
00:05:14,140 --> 00:05:17,922
Mint minden hibajavító algoritmusban, ebben is két szereplő vesz részt: 

90
00:05:17,922 --> 00:05:21,599
egy feladó, aki felelős a 4 speciális bit beállításáért, és egy vevő, 

91
00:05:21,599 --> 00:05:25,540
aki felelős valamilyen ellenőrzés elvégzéséért, majd a hibák kijavításáért.

92
00:05:26,300 --> 00:05:29,126
Természetesen a feladó és a címzett szavak valójában az ellenőrzéseket 

93
00:05:29,126 --> 00:05:32,470
végző gépekre vagy szoftverekre utalnak, és az üzenet fogalma nagyon tágan értendő, 

94
00:05:32,470 --> 00:05:34,740
hogy olyan dolgokat is magában foglaljon, mint a tárolás.

95
00:05:35,340 --> 00:05:38,588
Végül is az adatok tárolása ugyanaz, mint egy üzenet küldése, 

96
00:05:38,588 --> 00:05:41,680
csak a múltból a jövőbe, nem pedig egyik helyről a másikra.

97
00:05:42,560 --> 00:05:45,000
Ez tehát a felállás, de mielőtt belevetnénk magunkat, 

98
00:05:45,000 --> 00:05:48,390
beszélnünk kell egy kapcsolódó ötletről, amely Hamming fejében még frissen 

99
00:05:48,390 --> 00:05:51,825
élt felfedezése idején, egy olyan módszerről, amely lehetővé teszi az egyes 

100
00:05:51,825 --> 00:05:54,853
bithibák észlelését, de nem javítja azokat, és amelyet a szakmában 

101
00:05:54,853 --> 00:05:56,300
paritás-ellenőrzésként ismerünk.

102
00:05:56,880 --> 00:05:59,796
A paritásellenőrzésnél csak egyetlen bitet különítünk el, 

103
00:05:59,796 --> 00:06:03,820
amelynek hangolásáért a küldő felelős, a többi szabadon hordozhatja az üzenetet.

104
00:06:04,880 --> 00:06:08,454
Ennek a speciális bitnek csak az a feladata, hogy biztosítsa, 

105
00:06:08,454 --> 00:06:11,280
hogy az üzenetben lévő 1-esek száma páros legyen.

106
00:06:12,080 --> 00:06:14,848
Tehát például most az 1-esek száma 7, ami páratlan, 

107
00:06:14,848 --> 00:06:18,415
ezért a küldőnek meg kell fordítania ezt a speciális bitet 1-esre, 

108
00:06:18,415 --> 00:06:19,960
hogy a számolás páros legyen.

109
00:06:20,800 --> 00:06:23,976
De ha a blokk már páros számú 1-essel indult volna, 

110
00:06:23,976 --> 00:06:26,420
akkor ez a speciális bit 0 maradt volna.

111
00:06:27,340 --> 00:06:31,184
Ez elég egyszerű, megtévesztően egyszerű, de hihetetlenül elegáns módja annak, 

112
00:06:31,184 --> 00:06:34,444
hogy a változás gondolatát bárhol egy üzenetben úgy desztilláljuk, 

113
00:06:34,444 --> 00:06:36,780
hogy az egyetlen információdarabban tükröződjön.

114
00:06:37,500 --> 00:06:42,481
Figyeljük meg, hogy ha az üzenet bármelyik bitje felcserélődik, akár 0-ról 1-re, 

115
00:06:42,481 --> 00:06:46,540
akár 1-ről 0-ra, akkor az 1-ek száma párosról páratlanra változik.

116
00:06:47,980 --> 00:06:52,313
Tehát ha a címzettként megnézed ezt az üzenetet, és páratlan számú 1-est látsz, 

117
00:06:52,313 --> 00:06:56,539
akkor biztosan tudhatod, hogy valamilyen hiba történt, még ha fogalmad sincs, 

118
00:06:56,539 --> 00:06:57,460
hogy hol volt az.

119
00:06:58,500 --> 00:07:01,018
A szakzsargonban a bitek páros vagy páratlan számú 

120
00:07:01,018 --> 00:07:03,340
1-est tartalmazó csoportját paritásnak nevezik.

121
00:07:04,860 --> 00:07:07,771
Használhatsz számokat is, és mondhatod, hogy a paritás 0 vagy 1, 

122
00:07:07,771 --> 00:07:11,085
ami általában hasznosabb, ha egyszer elkezdesz matematikázni az ötlettel, 

123
00:07:11,085 --> 00:07:14,489
és ezt a speciális bitet, amelyet a feladó a paritás ellenőrzésére használ, 

124
00:07:14,489 --> 00:07:15,520
paritásbitnek nevezzük.

125
00:07:17,560 --> 00:07:20,878
És valójában, tisztázzuk, ha a vevő páratlan paritást lát, 

126
00:07:20,878 --> 00:07:25,041
az nem feltétlenül jelenti azt, hogy csak egy hiba volt, lehetett 3 hiba, 

127
00:07:25,041 --> 00:07:29,260
5 vagy bármilyen más páratlan szám, de biztosan tudhatják, hogy nem 0 volt.

128
00:07:29,980 --> 00:07:33,719
Másrészt, ha 2 hiba történt volna, vagy bármilyen páros számú hiba, 

129
00:07:33,719 --> 00:07:38,450
akkor is páros lenne a végső 1-es szám, így a vevő nem bízhat teljes mértékben abban, 

130
00:07:38,450 --> 00:07:42,300
hogy a páros szám szükségszerűen azt jelenti, hogy az üzenet hibátlan.

131
00:07:42,840 --> 00:07:47,035
Panaszkodhatsz, hogy egy olyan üzenet, amelyet csak 2 bit felcserélése zavar, 

132
00:07:47,035 --> 00:07:49,080
elég gyenge, és teljesen igazad lenne.

133
00:07:49,700 --> 00:07:53,954
Ne feledje azonban, hogy nincs olyan hibafelderítési vagy hibajavítási módszer, 

134
00:07:53,954 --> 00:07:58,474
amely 100%-os biztonságot adna abban, hogy a kapott üzenet a feladó szándéka szerint 

135
00:07:58,474 --> 00:07:58,900
érkezik.

136
00:07:59,580 --> 00:08:02,554
Elvégre elég véletlenszerű zaj mindig megváltoztathat egy érvényes 

137
00:08:02,554 --> 00:08:05,440
üzenetet egy másik érvényes üzenetté, pusztán a véletlen folytán.

138
00:08:06,240 --> 00:08:08,812
Ehelyett a cél egy olyan rendszer kidolgozása, 

139
00:08:08,812 --> 00:08:11,603
amely egy bizonyos maximális hibaszámig robusztus, 

140
00:08:11,603 --> 00:08:15,380
vagy esetleg az ilyen hamis pozitívumok valószínűségének csökkentése.

141
00:08:16,260 --> 00:08:19,733
A paritásellenőrzés önmagában elég gyenge, de a teljes üzenetben 

142
00:08:19,733 --> 00:08:23,847
bekövetkező változás gondolatának egyetlen bitre történő leegyszerűsítésével 

143
00:08:23,847 --> 00:08:27,160
egy erőteljes építőelemet adnak a kifinomultabb rendszerekhez.

144
00:08:27,940 --> 00:08:32,101
Például, mivel Hamming azt kereste, hogyan lehet azonosítani, hogy hol történt egy hiba, 

145
00:08:32,101 --> 00:08:35,233
nem csak azt, hogy megtörtént, a legfontosabb felismerése az volt, 

146
00:08:35,233 --> 00:08:39,114
hogy ha nem a teljes üzenetre, hanem bizonyos gondosan kiválasztott részhalmazokra 

147
00:08:39,114 --> 00:08:43,181
alkalmazunk paritásellenőrzést, akkor egy olyan kifinomultabb kérdéssort tehetünk fel, 

148
00:08:43,181 --> 00:08:45,940
amely pontosan meghatározza bármelyik bit hibájának helyét.

149
00:08:46,680 --> 00:08:49,968
Az általános érzés egy kicsit olyan, mintha egy 20 kérdéses játékot játszanánk, 

150
00:08:49,968 --> 00:08:53,380
ahol igen vagy nem kérdéseket teszünk fel, amelyek kettévágják a lehetőségek terét.

151
00:08:54,160 --> 00:08:56,746
Tegyük fel, hogy például csak ezen a 8 biten, az összes 

152
00:08:56,746 --> 00:08:59,380
páratlan számozott pozícióban paritásellenőrzést végzünk.

153
00:09:00,100 --> 00:09:04,142
Ezután, ha hibát észlel, a vevőnek egy kicsit több információt ad arról, 

154
00:09:04,142 --> 00:09:08,240
hogy pontosan hol van a hiba, nevezetesen, hogy egy furcsa pozícióban van.

155
00:09:08,940 --> 00:09:12,335
Ha a 8 bit között nem észlelünk hibát, az vagy azt jelenti, 

156
00:09:12,335 --> 00:09:16,240
hogy egyáltalán nincs hiba, vagy valahol a páros pozíciók között van.

157
00:09:17,180 --> 00:09:20,624
Azt gondolhatnánk, hogy a paritás-ellenőrzés a bitek felére való korlátozása 

158
00:09:20,624 --> 00:09:24,024
csökkenti annak hatékonyságát, de ha más, jól megválasztott ellenőrzésekkel 

159
00:09:24,024 --> 00:09:27,200
együtt végezzük, akkor az intuitív módon sokkal hatékonyabbá teszi azt.

160
00:09:29,240 --> 00:09:31,919
A paritásellenőrzés tényleges beállításához, ne feledje, 

161
00:09:31,919 --> 00:09:34,363
hogy ehhez meg kell jelölni néhány speciális bitet, 

162
00:09:34,363 --> 00:09:36,620
amely az adott teljes csoport paritását vezérli.

163
00:09:37,480 --> 00:09:39,180
Itt csak az 1-es pozíciót válasszuk.

164
00:09:39,720 --> 00:09:43,200
A bemutatott példában a 8 bit paritása jelenleg páratlan, 

165
00:09:43,200 --> 00:09:46,980
így a feladó feladata a paritásbit átkapcsolása, és most páros.

166
00:09:47,940 --> 00:09:50,680
Ez csak 1 a 4 paritás-ellenőrzésből, amelyet elvégezünk.

167
00:09:50,920 --> 00:09:54,323
A második ellenőrzés a rács jobb felén lévő 8 bit között van, 

168
00:09:54,323 --> 00:09:56,300
legalábbis ahogyan itt megrajzoltuk.

169
00:09:56,680 --> 00:09:59,580
Ezúttal a 2. pozíciót használhatjuk paritásbitként.

170
00:10:00,020 --> 00:10:04,774
Tehát ez a 8 bit már páros paritású, és a feladó nyugodtan hagyhatja a 2. 

171
00:10:04,774 --> 00:10:06,060
bitet változatlanul.

172
00:10:07,020 --> 00:10:11,127
A másik oldalon, ha a vevő ellenőrzi ennek a csoportnak a paritását, és azt találja, 

173
00:10:11,127 --> 00:10:15,380
hogy az páratlan, akkor tudni fogja, hogy a hiba valahol a jobb oldali 8 bit között van.

174
00:10:15,820 --> 00:10:18,655
Ellenkező esetben ez azt jelenti, hogy vagy nincs hiba, 

175
00:10:18,655 --> 00:10:20,580
vagy a hiba valahol a bal oldalon van.

176
00:10:21,120 --> 00:10:24,375
Vagy azt hiszem, lehetett volna két hiba is, de egyelőre feltételezzük, 

177
00:10:24,375 --> 00:10:26,500
hogy az egész blokkban legfeljebb egy hiba van.

178
00:10:26,940 --> 00:10:28,740
Ennél többre teljesen összeomlanak a dolgok.

179
00:10:29,160 --> 00:10:31,773
Mielőtt megnézzük a következő két ellenőrzést, szánjunk egy pillanatot arra, 

180
00:10:31,773 --> 00:10:33,945
hogy átgondoljuk, mit tesz lehetővé számunkra ez az első kettő, 

181
00:10:33,945 --> 00:10:35,100
ha együtt vesszük őket figyelembe.

182
00:10:35,800 --> 00:10:39,660
Tegyük fel, hogy a páratlan oszlopok között és a jobb oldali felénél hibát észlel.

183
00:10:40,200 --> 00:10:43,040
Ez szükségszerűen azt jelenti, hogy a hiba valahol az utolsó oszlopban van.

184
00:10:43,820 --> 00:10:46,881
Ha a páratlan oszlopban nem volt hiba, de a jobb felében volt, 

185
00:10:46,881 --> 00:10:49,700
akkor az azt jelenti, hogy az utolsó előtti oszlopban van.

186
00:10:50,440 --> 00:10:53,628
Hasonlóképpen, ha a páratlan oszlopokban van hiba, de a jobb felében nincs, 

187
00:10:53,628 --> 00:10:56,020
akkor tudja, hogy valahol a második oszlopban van a hiba.

188
00:10:56,020 --> 00:10:59,947
És ha a két paritásellenőrzés egyike sem észlel semmit, akkor ez azt jelenti, 

189
00:10:59,947 --> 00:11:03,120
hogy az egyetlen hely, ahol hiba lehet, az a bal szélső oszlop.

190
00:11:03,340 --> 00:11:06,120
De az is lehet, hogy egyszerűen csak azt jelenti, hogy egyáltalán nincs hiba.

191
00:11:06,300 --> 00:11:08,457
Mindez eléggé elnagyoltan azt jelenti, hogy két 

192
00:11:08,457 --> 00:11:10,840
paritás-ellenőrzéssel le tudjuk szögezni az oszlopot.

193
00:11:11,480 --> 00:11:13,640
Innen valószínűleg kitalálhatod, mi következik.

194
00:11:13,800 --> 00:11:16,140
Alapvetően ugyanezt tesszük, de a sorok esetében.

195
00:11:16,440 --> 00:11:20,900
A páratlan sorokban paritásellenőrzés lesz, a 4-es pozíciót használva paritásbitként.

196
00:11:21,380 --> 00:11:25,820
Ebben a példában tehát a csoport már páros paritású, így a 4. bit 0-ra lesz állítva.

197
00:11:26,560 --> 00:11:31,580
Végül az alsó két sorban paritásellenőrzés van, a 8-as pozíciót használva paritásbitként.

198
00:11:32,120 --> 00:11:35,239
Ebben az esetben úgy tűnik, hogy a küldőnek be kell kapcsolnia a 8-as bitet, 

199
00:11:35,239 --> 00:11:36,820
hogy a csoportnak páros paritást adjon.

200
00:11:37,700 --> 00:11:39,813
Ahogy az első két ellenőrzéssel az oszlopot, úgy 

201
00:11:39,813 --> 00:11:41,840
a következő kettővel a sort lehet meghatározni.

202
00:11:42,880 --> 00:11:47,540
Képzeljük el, hogy az átvitel során hiba lép fel, mondjuk a 3. pozícióban.

203
00:11:48,180 --> 00:11:52,324
Nos, ez érinti az első paritáscsoportot, és érinti a második paritáscsoportot is, 

204
00:11:52,324 --> 00:11:55,560
így a vevő tudja, hogy valahol a jobb oldali oszlopban hiba van.

205
00:11:56,100 --> 00:12:00,540
De nem érinti a harmadik csoportot, és nem érinti a negyedik csoportot.

206
00:12:01,240 --> 00:12:04,061
Ez lehetővé teszi a vevő számára, hogy a hibát az első sorig, 

207
00:12:04,061 --> 00:12:07,520
azaz szükségszerűen a 3. pozícióig lokalizálja, és így kijavíthassa a hibát.

208
00:12:08,580 --> 00:12:11,527
Egy pillanatra meggyőződhet arról, hogy az erre a négy kérdésre 

209
00:12:11,527 --> 00:12:15,349
adott válaszok valóban mindig lehetővé teszik egy konkrét helyszín meghatározását, 

210
00:12:15,349 --> 00:12:17,100
függetlenül attól, hogy hová kerülnek.

211
00:12:17,720 --> 00:12:20,169
Sőt, az éles eszűek talán még azt is észreveszik, 

212
00:12:20,169 --> 00:12:23,060
hogy van kapcsolat e kérdések és a bináris számolás között.

213
00:12:23,500 --> 00:12:25,959
És ha mégis, még egyszer hangsúlyozom, tartsatok szünetet, 

214
00:12:25,959 --> 00:12:28,920
próbáljátok meg magatoknak felidézni az összefüggést, mielőtt elrontom.

215
00:12:30,500 --> 00:12:36,060
Ha kíváncsi vagy, mi történik, ha egy paritásbit maga is sérül, nos, csak próbáld ki.

216
00:12:36,440 --> 00:12:40,288
Gondoljon egy pillanatra arra, hogy e négy különleges bit között bármilyen hiba ugyanúgy 

217
00:12:40,288 --> 00:12:44,180
nyomon követhető, mint bármelyik másik, ugyanannak a négy kérdéscsoportnak a segítségével.

218
00:12:47,060 --> 00:12:50,815
Ez nem igazán számít, mivel végső soron az üzenet bitjeit akarjuk védeni, 

219
00:12:50,815 --> 00:12:53,100
a hibajavító bitek csak kísérik a folyamatot.

220
00:12:53,600 --> 00:12:55,569
De ezeknek a részeknek a védelme is olyan dolog, 

221
00:12:55,569 --> 00:12:57,820
ami természetesen melléktermékként kiesik a rendszerből.

222
00:12:59,200 --> 00:13:01,760
Azt is élvezheted, hogy előre láthatod, hogyan skálázódik.

223
00:13:02,300 --> 00:13:06,547
Ha például egy 256 bit méretű blokkot használnánk egy hely meghatározásához, 

224
00:13:06,547 --> 00:13:10,077
akkor csak nyolc igen vagy nem kérdésre lenne szükségünk ahhoz, 

225
00:13:10,077 --> 00:13:12,780
hogy binárisan keressük az utat egy adott pontig.

226
00:13:15,640 --> 00:13:18,069
És ne feledje, hogy minden kérdésnél csak egyetlen bitet 

227
00:13:18,069 --> 00:13:20,500
kell feladni a megfelelő paritásellenőrzés beállításához.

228
00:13:23,160 --> 00:13:25,707
Néhányan talán már látják, de később beszélni fogunk arról, 

229
00:13:25,707 --> 00:13:29,360
hogyan lehet szisztematikusan megtalálni, hogy mik ezek a kérdések egy-két perc múlva.

230
00:13:29,880 --> 00:13:32,824
Remélhetőleg ez a vázlat elég ahhoz, hogy értékeljük annak hatékonyságát, 

231
00:13:32,824 --> 00:13:33,660
amit itt fejlesztünk.

232
00:13:33,660 --> 00:13:37,096
A nyolc kiemelt paritásbit kivételével minden olyan lehet, 

233
00:13:37,096 --> 00:13:41,000
amilyennek csak akarod, bármilyen üzenetet vagy adatot hordozhatsz.

234
00:13:41,720 --> 00:13:44,456
A nyolc bit redundáns abban az értelemben, hogy teljesen az 

235
00:13:44,456 --> 00:13:47,922
üzenet többi része határozza meg őket, de ez sokkal okosabb módon történik, 

236
00:13:47,922 --> 00:13:50,020
mintha egyszerűen az üzenet egészét másolnánk.

237
00:13:53,600 --> 00:13:56,106
És mégis, ilyen kevésért, amit feladtál, képes lennél 

238
00:13:56,106 --> 00:13:58,380
azonosítani és kijavítani minden egyes bit hibát.

239
00:13:59,200 --> 00:14:00,400
Nos, majdnem.

240
00:14:00,960 --> 00:14:04,935
Oké, tehát az egyetlen probléma itt az, hogy ha a négy paritásellenőrzés egyike 

241
00:14:04,935 --> 00:14:08,760
sem észlel hibát, ami azt jelenti, hogy a nyolc bit speciálisan kiválasztott 

242
00:14:08,760 --> 00:14:13,232
részhalmazai mind páros paritásúak, ahogyan a feladó tervezte, akkor ez vagy azt jelenti, 

243
00:14:13,232 --> 00:14:16,860
hogy egyáltalán nem volt hiba, vagy leszűkít minket a nulladik pozícióra.

244
00:14:17,740 --> 00:14:22,382
Négy igen vagy nem kérdéssel 16 lehetséges kimenetelű paritásellenőrzésünk van, 

245
00:14:22,382 --> 00:14:27,199
és ez elsőre tökéletesnek tűnik ahhoz, hogy a blokk 16 pozíciójából egyet pontosan 

246
00:14:27,199 --> 00:14:31,900
meghatározzunk, de egy 17. kimenetet is közölnünk kell, a hiba nélküli állapotot.

247
00:14:33,020 --> 00:14:34,860
A megoldás itt valójában nagyon egyszerű.

248
00:14:35,280 --> 00:14:37,300
Felejtsd el teljesen a nulladik részt.

249
00:14:37,840 --> 00:14:40,363
Amikor tehát elvégezzük a négy paritásellenőrzést, és azt látjuk, 

250
00:14:40,363 --> 00:14:43,460
hogy mindegyiket párosnak találjuk, az egyértelműen azt jelenti, hogy nincs hiba.

251
00:14:44,240 --> 00:14:47,632
Ez azt jelenti, hogy ahelyett, hogy 16 bites blokkokkal dolgoznánk, 

252
00:14:47,632 --> 00:14:51,473
15 bites blokkokkal dolgozunk, ahol 11 bit szabadon hordozhatja az üzenetet, 

253
00:14:51,473 --> 00:14:53,220
négy pedig a redundancia miatt van.

254
00:14:53,780 --> 00:14:58,800
És ezzel megvan az, amit a szakmában 15-11-es Hamming-kódnak neveznek.

255
00:14:59,860 --> 00:15:03,180
Ennek ellenére jó, ha van egy olyan blokkméretünk, amely tiszta kettes hatványa, 

256
00:15:03,180 --> 00:15:05,762
és van egy okos módja annak, hogy a nulladik bitet megtartsuk, 

257
00:15:05,762 --> 00:15:08,140
és rávegyük, hogy egy kis extra munkát végezzen el nekünk.

258
00:15:08,700 --> 00:15:11,024
Ha ezt paritásbitként használjuk az egész blokkban, 

259
00:15:11,024 --> 00:15:13,796
akkor lehetővé teszi számunkra a kétbites hibák felismerését, 

260
00:15:13,796 --> 00:15:15,540
még ha nem is tudjuk kijavítani azokat.

261
00:15:16,160 --> 00:15:16,820
Így működik.

262
00:15:17,180 --> 00:15:21,060
A négy speciális hibajavító bit beállítása után a nulladik bitet úgy állítjuk be, 

263
00:15:21,060 --> 00:15:24,940
hogy a teljes blokk paritása páros legyen, akárcsak a normál paritásellenőrzésnél.

264
00:15:25,700 --> 00:15:29,772
Most, ha egyetlen bit hiba van, akkor a teljes blokk paritása páratlanná változik, 

265
00:15:29,772 --> 00:15:33,600
de a négy hibajavító ellenőrzésnek köszönhetően ezt mindenképpen észrevennénk.

266
00:15:34,160 --> 00:15:38,448
Ha azonban két hiba van, akkor a teljes paritás visszaváltozik párosra, 

267
00:15:38,448 --> 00:15:42,082
de a vevő még mindig látja, hogy legalább némi hiba történt, 

268
00:15:42,082 --> 00:15:45,180
mivel a négy szokásos paritásellenőrzéssel történik.

269
00:15:45,180 --> 00:15:48,159
Ha tehát azt veszik észre, hogy a paritás összességében páros, 

270
00:15:48,159 --> 00:15:51,233
de a többi ellenőrzésnél valami nem nulla, akkor ez azt jelenti, 

271
00:15:51,233 --> 00:15:52,700
hogy legalább két hiba történt.

272
00:15:53,520 --> 00:15:54,000
Hát nem okos?

273
00:15:54,300 --> 00:15:56,568
Még ha nem is tudjuk kijavítani ezeket a kétbites hibákat, 

274
00:15:56,568 --> 00:15:59,414
csak azáltal, hogy azt a kis zavaró nulladik bitet újra munkába állítjuk, 

275
00:15:59,414 --> 00:16:01,260
lehetővé teszi számunkra, hogy felismerjük őket.

276
00:16:02,260 --> 00:16:05,220
Ez eléggé szabványos, kiterjesztett Hamming-kódként ismert.

277
00:16:06,540 --> 00:16:10,468
Technikailag most már teljes leírást kaptál arról, hogy mit csinál egy Hamming-kód, 

278
00:16:10,468 --> 00:16:12,994
legalábbis a 16 bites blokk példájára, de azt hiszem, 

279
00:16:12,994 --> 00:16:16,970
sokkal kielégítőbbnek fogod találni, ha ellenőrzöd a megértésedet és megszilárdítasz 

280
00:16:16,970 --> 00:16:20,478
mindent, amit eddig a pontig megértettél, ha egy teljes példát csinálsz az 

281
00:16:20,478 --> 00:16:21,320
elejétől a végéig.

282
00:16:22,080 --> 00:16:24,300
De azért végigmegyek veled, hogy te magad is ellenőrizhesd.

283
00:16:25,120 --> 00:16:28,147
Egy üzenet beállításához, legyen szó akár szó szerinti üzenetről, 

284
00:16:28,147 --> 00:16:30,899
amelyet a térben kell lefordítani, vagy valamilyen adatról, 

285
00:16:30,899 --> 00:16:34,660
amelyet időben akarunk tárolni, az első lépés az, hogy 11 bites darabokra osztjuk.

286
00:16:35,580 --> 00:16:39,760
Minden egyes darabot egy hibaálló 16 bites blokkba csomagolunk.

287
00:16:39,760 --> 00:16:43,220
Vegyük tehát ezt az egyet példának, és dolgozzuk ki.

288
00:16:43,740 --> 00:16:44,940
Gyerünk, csináld meg!

289
00:16:45,220 --> 00:16:47,020
Állj meg, és próbáld meg összerakni ezt a blokkot.

290
00:16:52,720 --> 00:16:53,680
Oké, készen állsz?

291
00:16:54,240 --> 00:16:58,726
Ne feledjük, hogy a 0. pozíció és a többi 2-es hatvány a hibajavítási feladatra van 

292
00:16:58,726 --> 00:17:03,320
fenntartva, ezért az üzenetbiteket az összes többi helyre kell elhelyezni, sorrendben.

293
00:17:05,339 --> 00:17:08,712
Ennek a csoportnak páros paritásúnak kell lennie, ami már megvan, 

294
00:17:08,712 --> 00:17:12,339
ezért az 1-es pozícióban lévő paritásbitet 0-ra kellett volna állítani.

295
00:17:13,020 --> 00:17:15,632
A következő csoport páratlan paritással kezdődik, 

296
00:17:15,632 --> 00:17:17,880
ezért a paritásbitjét 1-esre kell állítani.

297
00:17:19,160 --> 00:17:21,855
Az ezt követő csoport páratlan paritással kezdődik, 

298
00:17:21,855 --> 00:17:24,240
ezért a paritásbitet ismét 1-re kell állítani.

299
00:17:24,780 --> 00:17:27,659
És az utolsó csoport is páratlan paritású, ami azt jelenti, 

300
00:17:27,659 --> 00:17:30,060
hogy a 8-as pozícióban lévő bitet 1-esre állítjuk.

301
00:17:31,300 --> 00:17:36,225
Az utolsó lépésként a teljes blokk most már páros paritású, ami azt jelenti, 

302
00:17:36,225 --> 00:17:40,320
hogy a 0-s számú bitet, az átfogó paritásbitet 0-ra állíthatjuk.

303
00:17:41,340 --> 00:17:44,597
Így amikor ez a blokk elküldésre kerül, a négy speciális 

304
00:17:44,597 --> 00:17:48,140
részhalmaz és a blokk egésze paritása mind páros, azaz 0 lesz.

305
00:17:48,820 --> 00:17:52,180
A gyakorlat második részeként játsszuk el a befogadó szerepét.

306
00:17:53,480 --> 00:17:56,820
Ez persze azt jelentené, hogy még nem tudod, mi ez az üzenet.

307
00:17:57,080 --> 00:17:59,780
Talán néhányan közületek megjegyezték, de tegyük fel, hogy nem.

308
00:18:00,020 --> 00:18:03,358
Azt fogom tenni, hogy megváltoztatom a blokk 0, 

309
00:18:03,358 --> 00:18:07,740
1 vagy 2 bitjét, majd megkérlek, hogy találd ki, mit csináltam.

310
00:18:08,260 --> 00:18:10,810
Tehát ismét szünet, és próbáld meg kidolgozni.

311
00:18:18,790 --> 00:18:23,714
Oké, tehát a vevőként most ellenőrizheted az első paritáscsoportot, és láthatod, 

312
00:18:23,714 --> 00:18:27,910
hogy az páros, tehát bármilyen hibának a páros oszlopban kell lennie.

313
00:18:29,690 --> 00:18:32,946
A következő ellenőrzés páratlan számot ad, ami egyrészt azt jelzi, 

314
00:18:32,946 --> 00:18:37,030
hogy legalább egy hiba van, másrészt pedig leszűkíti a kört erre a konkrét oszlopra.

315
00:18:38,550 --> 00:18:41,790
A harmadik csekk páros, ami még tovább csökkenti a lehetőségeket.

316
00:18:42,650 --> 00:18:45,191
Az utolsó paritásellenőrzés pedig furcsa, és azt mondja, 

317
00:18:45,191 --> 00:18:48,044
hogy valahol az alján van egy hiba, aminek mostanra már látjuk, 

318
00:18:48,044 --> 00:18:49,650
hogy a 10-es pozícióban kell lennie.

319
00:18:51,490 --> 00:18:55,554
Ráadásul az egész blokk paritása páratlan, így biztosak lehetünk benne, 

320
00:18:55,554 --> 00:18:57,530
hogy egy szaltó volt, és nem kettő.

321
00:18:58,070 --> 00:18:59,970
Ha három vagy több, minden tétnek vége.

322
00:19:01,310 --> 00:19:05,612
Miután kijavítottuk a 10-es számú bitet, a korrekcióra nem használt 11 bit 

323
00:19:05,612 --> 00:19:09,571
kihúzásával megkapjuk az eredeti üzenet megfelelő szegmensét, amely, 

324
00:19:09,571 --> 00:19:14,390
ha visszatekerjük és összehasonlítjuk, valóban pontosan az, amivel a példát kezdtük.

325
00:19:15,710 --> 00:19:19,332
És most, hogy már tudod, hogyan kell mindezt kézzel csinálni, szeretném megmutatni, 

326
00:19:19,332 --> 00:19:23,170
hogyan tudod egyetlen sor Python kóddal végrehajtani ennek a logikának a központi részét.

327
00:19:23,870 --> 00:19:28,128
Látod, amit még nem mondtam el neked, az az, hogy mennyire elegáns ez az algoritmus, 

328
00:19:28,128 --> 00:19:31,485
milyen egyszerű rávenni egy gépet, hogy rámutasson a hiba helyére, 

329
00:19:31,485 --> 00:19:35,192
hogyan lehet szisztematikusan skálázni, és hogyan tudjuk mindezt egyetlen 

330
00:19:35,192 --> 00:19:38,750
műveletként keretezni, nem pedig több különálló paritás-ellenőrzésként.

331
00:19:39,430 --> 00:19:41,310
Hogy lásd, mire gondolok, gyere velem a második részbe.

