1
00:00:03,620 --> 00:00:06,037
Elgondolkodtál már azon, hogyan lehetséges az, 

2
00:00:06,037 --> 00:00:10,100
hogy ha egy CD vagy DVD megkarcolódik, még mindig le lehet játszani amit tárol?

3
00:00:10,900 --> 00:00:14,440
A karcolás valóban hatással van a lemezen lévő 1-ekre és 0-kra, 

4
00:00:14,440 --> 00:00:17,040
tehát a tárolttól eltérő adatok olvasódnak ki. 

5
00:00:17,040 --> 00:00:19,640
Viszont hacsak nem teljesen karcolódott össze, 

6
00:00:19,640 --> 00:00:22,903
a kiolvasott bitek pontosan ugyanazon fájllá dekódolódnak, 

7
00:00:22,903 --> 00:00:27,440
amelyik eredetileg rá volt égetve. Egy tökéletes másolat, mindezen hibák ellenére.

8
00:00:27,440 --> 00:00:31,968
Számtalan ötletes matematikai trükk van, amely lehetővé teszi az adatok tárolását, 

9
00:00:31,968 --> 00:00:36,660
és ami ugyanilyen fontos, az adatok továbbítását oly módon, amely ellenáll a hibáknak.

10
00:00:37,520 --> 00:00:41,600
Nos, oké, valójában nincs szükség akkora ötletre, hogy kitaláljunk erre egy módszert.

11
00:00:42,060 --> 00:00:46,754
Bármely fájl, legyen szó videóról, hangról, szövegről, vagy valamilyen kódról, 

12
00:00:46,754 --> 00:00:50,380
képről vagy bármi másról, végső soron 1-esek és 0-k sorozata.

13
00:00:50,680 --> 00:00:53,881
Az átbillent bitek kijavítására egy egyszerű stratégia az lenne, 

14
00:00:53,881 --> 00:00:56,000
ha minden bitből három másolatot tárolnánk.

15
00:00:57,580 --> 00:01:01,010
Ekkor a fájlt olvasó gép össze tudja hasonlítani ezt a három másolatot, 

16
00:01:01,010 --> 00:01:04,060
és eltéréskor a legtöbbször előforduló értéket tartja helyesnek.

17
00:01:07,160 --> 00:01:10,860
De ez azt jelenti, hogy a hely kétharmadát redundanciára használjuk.

18
00:01:11,480 --> 00:01:15,500
És még ennyi hely feladása sem garantálja a helyes működést akkor, 

19
00:01:15,500 --> 00:01:17,240
ha egynél több bit billen át.

20
00:01:17,980 --> 00:01:20,858
Mégis hogyan lehet olyan módszert találni, amellyel a lehető 

21
00:01:20,858 --> 00:01:24,020
legkevesebb hely felhasználása mellett ki lehet javítani a hibákat?

22
00:01:24,520 --> 00:01:30,202
Például az a módszer, amit hamarosan bemutatok, 256 bites blokkokban tárolja az adatokat, 

23
00:01:30,202 --> 00:01:33,360
ahol minden blokk csak kilenc bitet használ. 9-et!

24
00:01:33,760 --> 00:01:37,111
Ezek egyfajta redundanciaként működnek, a többi 247 bit pedig 

25
00:01:37,111 --> 00:01:40,300
szabadon hordozhat bármilyen értelmes üzenetet vagy adatot.

26
00:01:40,900 --> 00:01:44,368
Ez azt fogja eredményezni, hogy ha itt bármelyik bit megfordul, 

27
00:01:44,368 --> 00:01:48,324
csak erre a blokkra nézve, és semmi másra, a gép képes lesz azonosítani, 

28
00:01:48,324 --> 00:01:52,660
hogy hiba történt, és hogy pontosan hol volt, így tudja, hogyan kell kijavítani.

29
00:01:52,660 --> 00:01:54,620
És őszintén szólva, ez olyan, mint egy varázslat.

30
00:01:55,440 --> 00:01:58,272
És ennél a konkrét sémánál, ha két bit billen át, 

31
00:01:58,272 --> 00:02:02,860
a gép legalább észlelni fogja a két hibát, bár nem tudja, hogyan javítsa ki őket.

32
00:02:03,520 --> 00:02:06,900
Később még beszélünk arról, hogy ez hogyan skálázódik nagyobb méretű blokkokra.

33
00:02:07,860 --> 00:02:12,900
Az ehhez hasonló módszereket - talán nem meglepő módon - hibajavító kódoknak nevezik.

34
00:02:13,660 --> 00:02:17,748
Ez a terület meglepően komoly matematikai eredmények gazdag forrása volt a múlt 

35
00:02:17,748 --> 00:02:21,940
században, melyek nagy része beépült az általunk nap mint nap használt eszközökbe.

36
00:02:22,840 --> 00:02:26,759
A célom az, hogy segítsek alaposan megérteni az egyik legkorábbi, 

37
00:02:26,759 --> 00:02:28,660
Hamming-kódként ismert módszert.

38
00:02:29,520 --> 00:02:32,783
És mellesleg, ahogyan ennek a videónak a felépítésére gondolok, 

39
00:02:32,783 --> 00:02:36,811
nem szájbarágósan szeretném elmagyarázni, ezért inkább arra foglak ösztönözni, 

40
00:02:36,811 --> 00:02:39,820
hogy jöjj rá magadtól, itt-ott egy kis célzott segítséggel.

41
00:02:40,120 --> 00:02:43,517
Tehát amikor úgy érzed egy ponton, hogy látod mire akarok kilyukadni, 

42
00:02:43,517 --> 00:02:46,720
nyugodtan állítsd meg a videót és próbálj te rájönni a megoldásra.

43
00:02:47,240 --> 00:02:50,534
Továbbá, ha meg szeretnéd érteni a hardver szintű működését , 

44
00:02:50,534 --> 00:02:54,041
Ben Eater készített egy ehhez kapcsolódó videót, amely bemutatja, 

45
00:02:54,041 --> 00:02:58,240
hogyan kell próbapanelen alkalmazni a Hamming-kódokat, ami rendkívül kielégítő.

46
00:02:59,300 --> 00:03:03,900
Érdemes tudni, hogy a Hamming-kódok használata visszaszorult a modernebb kódokhoz képest, 

47
00:03:03,900 --> 00:03:07,019
mint a Reed-Solomon algoritmus, mégis van egy varázsa annak, 

48
00:03:07,019 --> 00:03:09,983
hogy mennyire lehetetlennek tűnik ez a feladat az elején, 

49
00:03:09,983 --> 00:03:13,000
és mennyire ésszerűnek miután megismered a Hamming-kódokat.

50
00:03:13,720 --> 00:03:17,832
A hibajavítás alapelve, hogy az összes lehetséges üzenetet tartalmazó 

51
00:03:17,832 --> 00:03:22,180
hatalmas térnek csak egy részhalmazát fogunk érvényes üzenetnek tekinteni.

52
00:03:22,800 --> 00:03:26,940
Analógiaként gondolhatunk a helyesen és a helytelenül írt szavakra.

53
00:03:28,900 --> 00:03:32,811
Amikor egy elküldött üzenet módosul, a fogadó felelős azért, hogy amit lát, 

54
00:03:32,811 --> 00:03:37,340
a legközelebbi értelmes üzenetté alakítsa, pont ahogy azt mi az elírások esetén tesszük.

55
00:03:38,220 --> 00:03:41,140
Az ilyen üzenetek hatékony kategorizálására alkalmas konkrét 

56
00:03:41,140 --> 00:03:44,060
algoritmus kidolgozásához azonban szükség van némi okosságra.

57
00:03:46,780 --> 00:03:51,056
A sztorink hőse a fiatal Richard Hamming, aki 1940 körül a Bell Labs-nél dolgozott. 

58
00:03:51,056 --> 00:03:55,230
Feladatai egy nagyon nagy és drága lyukkártyás számítógép használatát igényelték, 

59
00:03:55,230 --> 00:03:57,420
amelyhez csak korlátozott hozzáférése volt.

60
00:03:57,800 --> 00:04:00,381
Ám a programjainak futását folyton hibák akadályozták, 

61
00:04:00,381 --> 00:04:02,400
mert a gép időnként félreolvasta a biteket.

62
00:04:03,120 --> 00:04:06,215
Mivel a frusztráció a találékonyság bölcsője, annyira elege lett, 

63
00:04:06,215 --> 00:04:08,420
hogy feltalálta a világ első hibajavító kódját.

64
00:04:09,060 --> 00:04:11,430
A Hamming-kód értelmezésének sokféle módja van, 

65
00:04:11,430 --> 00:04:15,380
de érdemes azt a gondolatmenetet követni, amellyel Hamming is rájött a nyitjára.

66
00:04:16,519 --> 00:04:20,940
Használjunk egy egyszerű, de nem túl egyszerű példát, egy 16 bites blokkot.

67
00:04:21,820 --> 00:04:24,740
Számozzuk meg a bitek pozícióit 0-tól 15-ig.

68
00:04:25,620 --> 00:04:29,455
A tényleges tárolni kívánt adatok ebből csak 12 bitet tesznek ki, 

69
00:04:29,455 --> 00:04:33,000
míg a maradék 4 helyet egyfajta redundanciaként tartjuk fenn.

70
00:04:33,900 --> 00:04:36,384
A redundáncia szó itt nem egyszerű másolatot jelent, 

71
00:04:36,384 --> 00:04:40,040
elvégre az a 4 bit nem elegendő az adatok gondolkodás nélküli többszörözésére.

72
00:04:40,720 --> 00:04:43,706
Ehelyett sokkal fondorlatosabb redundanciát kell alkalmazni. 

73
00:04:43,706 --> 00:04:47,280
Nem új információ hozzáadásával, hanem az ellenálló képesség növelésével.

74
00:04:48,600 --> 00:04:53,448
Számíthatnál arra, hogy ez a 4 speciális bit szépen össze van csomagolva a blokk végén, 

75
00:04:53,448 --> 00:04:57,746
vagy valami hasonló, de amint látni fogod, sokkal elegánsabb megoldás adódik, 

76
00:04:57,746 --> 00:04:59,620
ha a 2 hatványainak helyén vannak.

77
00:05:00,200 --> 00:05:03,540
Ez egy kis támpontot ad arra is, hogy hogyan kell nagyobb blokkokra használni.

78
00:05:04,900 --> 00:05:08,876
Még korai ezzel foglalkozni, de a gyakorlatban csak 11 bit hasznos adat lesz, 

79
00:05:08,876 --> 00:05:13,260
mert ahogy később látni fogod van egy apróság ami a 0. pozíció tartalmát meghatározza.

80
00:05:14,140 --> 00:05:17,957
Mint minden hibajavító algoritmusban, ebben is két szereplő vesz részt: 

81
00:05:17,957 --> 00:05:21,669
egy feladó, aki a 4 speciális bit beállításáért felelős, és egy vevő, 

82
00:05:21,669 --> 00:05:25,540
aki valamilyen ellenőrzés elvégzéséért, és a hibák kijavításáért felelős.

83
00:05:26,300 --> 00:05:30,349
Valójában a feladó és címzett szavak az ellenőrzéseket végző gépre vagy szoftverre 

84
00:05:30,349 --> 00:05:34,740
utalnak és az üzenet fogalma nagyon tágan értendő, hogy még a tárolást is magába foglalja.

85
00:05:35,340 --> 00:05:38,588
Végül is az adatok tárolása ugyanaz, mint egy üzenet küldése, 

86
00:05:38,588 --> 00:05:41,680
csak a múltból a jövőbe, nem pedig egyik helyről a másikra.

87
00:05:42,560 --> 00:05:45,841
Mielőtt továbbmegyünk, beszélnünk kell egy kapcsolódó ötletről, 

88
00:05:45,841 --> 00:05:50,147
amely komoly szerepet játszott Hamming felfedezésében. Ez a módszer lehetővé teszi, 

89
00:05:50,147 --> 00:05:53,890
hogy bármilyen egy bites hibát észleljünk, ám a kijavításában nem segít. 

90
00:05:53,890 --> 00:05:56,300
A szakmában ez paritásellenőrzésként ismeretes.

91
00:05:56,880 --> 00:05:59,838
A paritásellenőrzéshez csak egyetlen bit szükséges, 

92
00:05:59,838 --> 00:06:03,820
amely értékét a küldő állítja be a többi üzenetet hordozó bit alapján.

93
00:06:04,880 --> 00:06:07,591
Ennek a speciális bitnek az az egyetlen feladata, 

94
00:06:07,591 --> 00:06:11,280
hogy vele együtt az üzenetben szereplő 1-ek száma páros szám legyen.

95
00:06:12,080 --> 00:06:15,015
Ebben a példában jelenleg 7 darab 1-es van. Ez páratlan, 

96
00:06:15,015 --> 00:06:18,208
tehát a küldőnek 0-ról 1-re kell állítania a speciális bitet, 

97
00:06:18,208 --> 00:06:19,960
hogy az 1-esek száma páros legyen.

98
00:06:20,800 --> 00:06:23,976
De ha a blokk már páros számú 1-essel indult volna, 

99
00:06:23,976 --> 00:06:26,420
akkor ez a speciális bit 0 maradt volna.

100
00:06:27,340 --> 00:06:30,872
Ez roppant egyszerű, de hihetetlenül elegáns módja annak, 

101
00:06:30,872 --> 00:06:34,222
hogy az üzenetben bárhol végbemenő változás eredménye, 

102
00:06:34,222 --> 00:06:36,780
egyetlen bitnyi információban tükröződjön.

103
00:06:37,500 --> 00:06:42,481
Figyeljük meg, hogy ha az üzenet bármelyik bitje felcserélődik, akár 0-ról 1-re, 

104
00:06:42,481 --> 00:06:46,540
akár 1-ről 0-ra, akkor az 1-ek száma párosról páratlanra változik.

105
00:06:47,980 --> 00:06:52,313
Tehát ha a címzettként megnézed ezt az üzenetet, és páratlan számú 1-est látsz, 

106
00:06:52,313 --> 00:06:56,539
akkor biztosan tudhatod, hogy valamilyen hiba történt, még ha fogalmad sincs, 

107
00:06:56,539 --> 00:06:57,460
hogy hol volt az.

108
00:06:58,500 --> 00:07:01,018
A szakzsargonban a bitek páros vagy páratlan számú 

109
00:07:01,018 --> 00:07:03,340
1-est tartalmazó csoportját paritásnak nevezik.

110
00:07:04,860 --> 00:07:08,813
A 0 vagy 1 számokkal is jelölhetjük a paritást, ami akkor lesz nagyon hasznos, 

111
00:07:08,813 --> 00:07:12,417
amint matekosan kezdünk ezzel foglalkozni. Ezt a speciális bitet pedig, 

112
00:07:12,417 --> 00:07:15,520
amellyel a küldő beállítja a paritást, paritásbitnek nevezzük.

113
00:07:17,560 --> 00:07:20,948
Azzal érdemes tisztában lenni, ha a vevő páratlan paritást lát, 

114
00:07:20,948 --> 00:07:24,336
az nem feltétlenül azt jelenti, hogy csak egy hiba volt, lehet, 

115
00:07:24,336 --> 00:07:27,512
hogy 3 hiba volt, vagy 5, vagy bármilyen más páratlan szám, 

116
00:07:27,512 --> 00:07:29,260
de biztosan tudhatjuk hogy nem 0.

117
00:07:29,980 --> 00:07:35,138
Másrészt, ha 2 vagy páros számú hiba történt, az 1-ek száma továbbra is páros marad, 

118
00:07:35,138 --> 00:07:39,022
így a fogadó nem lehet teljesen biztos abban, hogy a páros szám 

119
00:07:39,022 --> 00:07:42,300
szükségszerűen azt jelenti, hogy az üzenet hibamentes.

120
00:07:42,840 --> 00:07:45,779
Mondhatnád, hogy csekély annak az esélye, hogy az üzenet 

121
00:07:45,779 --> 00:07:49,080
pontosan 2 bitje módosuljon egyszerre, és teljesen igazad lenne.

122
00:07:49,700 --> 00:07:53,967
De ne feledd azonban, hogy nincs olyan hibaészlelési vagy -javítási módszer, 

123
00:07:53,967 --> 00:07:58,900
amellyel 100%-ban meggyőződhetnél afelől, hogy a kapott üzenet a küldő szándéka szerinti.

124
00:07:59,580 --> 00:08:02,612
Végtére is, a véletlenszerű zaj megváltoztathatja az egyik 

125
00:08:02,612 --> 00:08:05,440
érvényes üzenetet akár épp egy másik érvényes üzenetté.

126
00:08:06,240 --> 00:08:10,501
Ehelyett az a cél, hogy egy bizonyos maximális számú hibáig robusztus sémát 

127
00:08:10,501 --> 00:08:15,380
dolgozzunk ki, vagy csökkentsük az ehhez hasonló téves pozitív eredmény valószínűségét.

128
00:08:16,260 --> 00:08:19,334
A paritásellenőrzések önmagukban meglehetősen gyengék, 

129
00:08:19,334 --> 00:08:22,576
ellenben kifejezetten hasznosak, ha ezt az üzeneten belül 

130
00:08:22,576 --> 00:08:27,160
bekövetkezett változás érzékelésének gondolatát építőelemként tudjuk felhasználni.

131
00:08:27,940 --> 00:08:32,562
Hamming kulcsfontosságú meglátása az volt, hogy ha a paritásellenőrzést nem a teljes 

132
00:08:32,562 --> 00:08:36,586
üzenetre, hanem bizonyos gondosan kiválasztott részhalmazokra alkalmazza, 

133
00:08:36,586 --> 00:08:41,480
akkor a hiba létezésének detekcióján felül a hiba helyét is könnyebben azonosítani lehet. 

134
00:08:41,480 --> 00:08:45,940
Egy kifinomult kérdéssort tehetünk fel, amely meghatározza bármely bithiba helyét.

135
00:08:46,680 --> 00:08:49,551
Úgy is fel lehet fogni, mint egy 20 kérdésből álló játékot, 

136
00:08:49,551 --> 00:08:53,380
ahol eldöntendő kérdéseket teszünk fel, amelyek kettévágják a lehetőségek terét.

137
00:08:54,160 --> 00:08:57,136
Tegyük fel, hogy csak ezen a 8 biten végzünk paritásellenőrzést, 

138
00:08:57,136 --> 00:08:59,380
vagyis az összes páratlanul számozott pozícióban.

139
00:09:00,100 --> 00:09:04,141
Ezután, ha a vevő hibát észlel, egy kicsit több információt kap arról, 

140
00:09:04,141 --> 00:09:08,240
hogy pontosan hol van a hiba, nevezetesen, hogy egy páratlan pozícióban.

141
00:09:08,940 --> 00:09:12,335
Ha a 8 bit között nem észlelünk hibát, az vagy azt jelenti, 

142
00:09:12,335 --> 00:09:16,240
hogy egyáltalán nincs hiba, vagy valahol a páros pozíciók között van.

143
00:09:17,180 --> 00:09:20,603
Gondolhatnád, hogy a paritás-ellenőrzés hatásossága csökken a bitek 

144
00:09:20,603 --> 00:09:24,883
felére való korlátozásával, de más jól megválasztott ellenőrzésekkel együtt végezve, 

145
00:09:24,883 --> 00:09:27,200
ellentmondásos módon sokkal hasznosabbá válik.

146
00:09:29,240 --> 00:09:32,780
Ne feledjük, hogy a paritásellenőrzés tényleges használatához meg kell 

147
00:09:32,780 --> 00:09:36,620
jelölni egy speciális bitet, amely az adott teljes csoport paritását vezérli.

148
00:09:37,480 --> 00:09:39,180
Itt most válasszuk az 1-es pozíciót.

149
00:09:39,720 --> 00:09:43,061
A bemutatott példában a 8 bit paritása jelenleg páratlan, 

150
00:09:43,061 --> 00:09:46,980
így a feladó feladata a paritásbit átkapcsolása. Így most már páros.

151
00:09:47,940 --> 00:09:50,680
Ez csak 1 a 4 paritás-ellenőrzésből, amelyet elvégzünk.

152
00:09:50,920 --> 00:09:56,300
A második ellenőrzés a rács jobb felén lévő 8 bitet nézi, legalábbis itt így rajzoltuk.

153
00:09:56,680 --> 00:09:59,580
Ezúttal a 2. pozíciót használhatjuk paritásbitként.

154
00:10:00,020 --> 00:10:04,774
Tehát ez a 8 bit már páros paritású, és a feladó nyugodtan hagyhatja a 2. 

155
00:10:04,774 --> 00:10:06,060
bitet változatlanul.

156
00:10:07,020 --> 00:10:11,102
A másik oldalon, ha a vevő ellenőrzi ennek a csoportnak a paritását és azt találja, 

157
00:10:11,102 --> 00:10:15,380
hogy az páratlan, akkor tudni fogja, hogy a hiba valahol a jobb oldali 8 bit között van.

158
00:10:15,820 --> 00:10:18,525
Ellenkező esetben ez jelentheti azt, hogy nincs hiba, 

159
00:10:18,525 --> 00:10:20,580
vagy a hibának a bal oldalon kell lennie.

160
00:10:21,120 --> 00:10:24,301
Vagy persze, lehetett volna két hiba is, de egyelőre feltételezzük, 

161
00:10:24,301 --> 00:10:26,500
hogy az egész blokkban legfeljebb egy hiba van.

162
00:10:26,940 --> 00:10:28,740
Ennél több hibánál teljesen összeomlanak a dolgok.

163
00:10:29,160 --> 00:10:33,388
Először gondoljuk át, hogy mit tesz lehetővé számunkra ez az első kettő ellenőrzés, 

164
00:10:33,388 --> 00:10:35,100
ha együtt vesszük őket figyelembe.

165
00:10:35,800 --> 00:10:39,660
Tegyük fel, hogy a páratlan oszlopok között és a jobb oldali felénél észlelünk hibát.

166
00:10:40,200 --> 00:10:43,040
Ez azt jelenti számunkra, hogy a hiba valahol az utolsó oszlopban van.

167
00:10:43,820 --> 00:10:46,881
Ha a páratlan oszlopban nem volt hiba, de a jobb felében volt, 

168
00:10:46,881 --> 00:10:49,700
akkor az azt jelenti, hogy az utolsó előtti oszlopban van.

169
00:10:50,440 --> 00:10:52,936
Hasonlóképpen, ha a páratlan oszlopokban van hiba, 

170
00:10:52,936 --> 00:10:56,020
de a jobb felében nincs, akkor a második oszlopban kell lennie.

171
00:10:56,020 --> 00:10:59,947
És ha a két paritásellenőrzés egyike sem észlel semmit, akkor ez azt jelenti, 

172
00:10:59,947 --> 00:11:03,120
hogy az egyetlen hely, ahol hiba lehet, az a bal szélső oszlop.

173
00:11:03,340 --> 00:11:06,120
De könnyen lehet, hogy egyáltalán nincs hiba.

174
00:11:06,300 --> 00:11:08,546
Mindez eléggé elnagyoltan azt jelenti, hogy két 

175
00:11:08,546 --> 00:11:10,840
paritás-ellenőrzéssel be tudjuk lőni az oszlopot.

176
00:11:11,480 --> 00:11:13,640
Innen valószínűleg ki tudod találni, mi következik.

177
00:11:13,800 --> 00:11:16,140
Alapvetően ugyanezt tesszük, csak a sorokra.

178
00:11:16,440 --> 00:11:20,900
Lesz egy paritásellenőrzés a páratlan sorokra, a 4-es pozíciót használva paritásbitként.

179
00:11:21,380 --> 00:11:25,820
Ebben a példában tehát a csoport már páros paritású, így a 4. bit 0-ra lesz állítva.

180
00:11:26,560 --> 00:11:29,366
Végül az alsó két sorra végzünk paritásellenőrzést, 

181
00:11:29,366 --> 00:11:31,580
a 8-as pozíciót használva paritásbitként.

182
00:11:32,120 --> 00:11:34,968
Úgy tűnik, hogy a küldőnek be kell kapcsolnia a 8-as bitet, 

183
00:11:34,968 --> 00:11:36,820
hogy a csoportnak páros paritást adjon.

184
00:11:37,700 --> 00:11:39,905
Ahogy az első két ellenőrzéssel az oszlopot, úgy 

185
00:11:39,905 --> 00:11:41,840
a másik kettővel a sort lehet meghatározni.

186
00:11:42,880 --> 00:11:47,540
Képzeljük el, hogy az átvitel során hiba lép fel, mondjuk a 3. pozícióban.

187
00:11:48,180 --> 00:11:52,268
Nos, ez érinti az első paritáscsoportot, és érinti a második paritáscsoportot is, 

188
00:11:52,268 --> 00:11:55,560
így a vevő tudja, hogy valahol a jobb oldali oszlopban van a hiba.

189
00:11:56,100 --> 00:12:00,540
De nem érinti a harmadik csoportot, és nem érinti a negyedik csoportot.

190
00:12:01,240 --> 00:12:04,808
Ez lehetővé teszi a vevő számára, hogy a hibát az első sorban lokalizálja, 

191
00:12:04,808 --> 00:12:07,520
ami most a 3. pozícióit jelenti, és így kijavíthassa azt.

192
00:12:08,580 --> 00:12:12,964
Magad számára is meggyőződhetsz arról, hogy erre a négy kérdésre adott válaszok valóban 

193
00:12:12,964 --> 00:12:17,100
mindig lehetővé teszik egy konkrét hely meghatározását, bármelyikről is legyen szó.

194
00:12:17,720 --> 00:12:20,169
Sőt, az éles eszűek talán még azt is észreveszik, 

195
00:12:20,169 --> 00:12:23,060
hogy van kapcsolat e kérdések és a bináris számolás között.

196
00:12:23,500 --> 00:12:26,092
És még egyszer hangsúlyozom. Nyugodtan tarts szünetet, 

197
00:12:26,092 --> 00:12:28,920
próbáld meg felfedezni az összefüggést, mielőtt spoilerezem.

198
00:12:30,500 --> 00:12:36,060
Ha kíváncsi vagy, mi történik, ha egy paritásbit maga is sérül, nos, csak próbáld ki.

199
00:12:36,440 --> 00:12:40,363
Gondold végig, hogy miért lehetséges e négy különleges bit bármelyikében 

200
00:12:40,363 --> 00:12:44,180
előforduló hibát ugyanannak a négy kérdésnek a segítségével megtalálni!

201
00:12:47,060 --> 00:12:50,993
De mindez nem is igazán számít, mivel végső soron az üzenet bitjeit akarjuk védeni, 

202
00:12:50,993 --> 00:12:53,100
a hibajavító bitek csak kísérik a folyamatot.

203
00:12:53,600 --> 00:12:57,820
Ezen bitek védelme csak természetesen melléktermékként esik ki a módszerből.

204
00:12:59,200 --> 00:13:01,760
Azt is izgalmasnak találhatod, hogy mindez hogyan skálázódik.

205
00:13:02,300 --> 00:13:06,597
Ha például egy 256 bit méretű blokkban akarjunk egy helyet meghatározni, 

206
00:13:06,597 --> 00:13:10,189
akkor csak nyolc eldöntendő kérdésre lenne szükségünk ahhoz, 

207
00:13:10,189 --> 00:13:12,780
hogy ezzel a bináris kereséssel célt érjünk.

208
00:13:15,640 --> 00:13:18,069
És ne feledjük, hogy minden kérdésnél csak egyetlen 

209
00:13:18,069 --> 00:13:20,500
bitet kell feladni a megfelelő paritásellenőrzéshez.

210
00:13:23,160 --> 00:13:25,952
Néhányan talán már látják, de hamarosan beszélek arról is, 

211
00:13:25,952 --> 00:13:29,360
hogy hogyan lehet szisztematikusan megtalálni, hogy mik ezek a kérdések.

212
00:13:29,880 --> 00:13:33,660
Remélem mindez elég jól szemlélteti a közösen kifejlesztett módszerünk hatékonyságát.

213
00:13:33,660 --> 00:13:37,487
Ezen nyolc kiemelt paritásbiten kívül az összes többit arra használhatod 

214
00:13:37,487 --> 00:13:41,000
amire csak akarod. Bármilyen üzenetet vagy adatot tárolhatsz benne.

215
00:13:41,720 --> 00:13:44,402
Ez a nyolc bit persze redundáns abban az értelemben, 

216
00:13:44,402 --> 00:13:48,299
hogy az üzenet többi része határozza meg őket, de ez sokkal okosabb módszer, 

217
00:13:48,299 --> 00:13:50,020
mint az egész üzenetet lemásolása.

218
00:13:53,600 --> 00:13:56,035
És még ilyen csekély áldozat ellenébe is képes leszel 

219
00:13:56,035 --> 00:13:58,380
megtalálni és kijavítani minden egyszeres bit hibát.

220
00:13:59,200 --> 00:14:00,400
Nos, majdnem.

221
00:14:00,960 --> 00:14:05,436
Az egyetlen probléma itt az, hogy ha a négy paritásellenőrzés egyike sem észlel hibát, 

222
00:14:05,436 --> 00:14:09,398
ami azt jelenti, hogy a nyolc bit speciálisan kiválasztott részhalmazai mind 

223
00:14:09,398 --> 00:14:13,103
páros paritásúak, ahogyan a feladó tervezte, akkor ez vagy azt jelenti, 

224
00:14:13,103 --> 00:14:16,860
hogy egyáltalán nem volt hiba, vagy leszűkít minket a nulladik pozícióra.

225
00:14:17,740 --> 00:14:22,321
Négy eldöntendő kérdéssel 16 lehetséges kimenetelű paritásellenőrzésünk van, 

226
00:14:22,321 --> 00:14:27,140
és ez elsőre tökéletesnek tűnhet ahhoz, hogy a blokk 16 pozíciójából mindegyikre 

227
00:14:27,140 --> 00:14:31,900
mutathassunk, de sajnos egy 17. kimenet is kell, a hiba nélküli állapot jelzése.

228
00:14:33,020 --> 00:14:34,860
A megoldás itt valójában nagyon egyszerű.

229
00:14:35,280 --> 00:14:37,300
Egyelőre ne foglalkozzunk a nulladik bittel.

230
00:14:37,840 --> 00:14:41,352
A négy paritásellenőrzés elvégzése után, ha mindegyiket párosnak találjuk, 

231
00:14:41,352 --> 00:14:43,460
az egyértelműen azt jelenti, hogy nincs hiba.

232
00:14:44,240 --> 00:14:48,645
Ehhez az kell, hogy 16 bites blokkok helyett, 15 bites blokkokkal dolgozzunk, 

233
00:14:48,645 --> 00:14:53,220
ahol 11 bit szabadon hordozhatja az üzenetet, négy pedig a redundancia miatt van.

234
00:14:53,780 --> 00:14:58,800
És ezzel el is jutottunk ahhoz, amit a szakértők 15-11-es Hamming-kódnak neveznek.

235
00:14:59,860 --> 00:15:03,123
Ennek ellenére jó, ha olyan a blokkméretünk, amely kettő hatványa, 

236
00:15:03,123 --> 00:15:07,409
és meg tudjuk tartani a nulladik bitet úgy, hogy valami trükkös módon kis extra hasznot 

237
00:15:07,409 --> 00:15:08,140
húzzunk belőle.

238
00:15:08,700 --> 00:15:11,445
Ha az egész blokkra vonatkozó paritásbitként használjuk, 

239
00:15:11,445 --> 00:15:15,540
akkor lehetővé teszi számunkra a kétbites hibák felismerését, azok kijavítása nélkül.

240
00:15:16,160 --> 00:15:16,820
Így működik.

241
00:15:17,180 --> 00:15:21,422
A négy speciális hibajavító bit beállítása után a nulladik bitet úgy állítjuk be, 

242
00:15:21,422 --> 00:15:24,940
hogy a teljes blokk paritása páros legyen, akárcsak a többi esetben.

243
00:15:25,700 --> 00:15:29,772
Most, ha egyetlen bit hiba van, akkor a teljes blokk paritása páratlanná változik, 

244
00:15:29,772 --> 00:15:33,600
de a négy hibajavító ellenőrzésnek köszönhetően ezt mindenképpen észrevennénk.

245
00:15:34,160 --> 00:15:38,592
Ha azonban két hiba van, akkor a teljes paritás visszaváltozik párosra, 

246
00:15:38,592 --> 00:15:42,286
de a vevő még mindig látja, hogy valami hiba történt abból, 

247
00:15:42,286 --> 00:15:45,180
ami a négy másik paritásellenőrzéssel történik.

248
00:15:45,180 --> 00:15:48,642
Ha tehát azt vesszük észre, hogy a paritás összességében páros, 

249
00:15:48,642 --> 00:15:52,700
de a többi ellenőrzésnél valami nem nulla, akkor legalább két hiba történt.

250
00:15:53,520 --> 00:15:54,000
Okos, nem?

251
00:15:54,300 --> 00:15:57,132
Még ha nem is tudjuk kijavítani ezeket a kétbites hibákat, 

252
00:15:57,132 --> 00:16:01,260
a kis zavaró nulladik bit munkába állításával elértük, hogy legalább felismerjük őket.

253
00:16:02,260 --> 00:16:05,220
Ez a szabványos, kiterjesztett Hamming-kódként ismert.

254
00:16:06,540 --> 00:16:10,118
Most már teljes rálátásod van arra, hogy mit csinál egy Hamming-kód, 

255
00:16:10,118 --> 00:16:14,007
legalábbis a 16 bites blokk példájában. De azt hiszem, úgy a legteljesebb, 

256
00:16:14,007 --> 00:16:16,963
ha ellenőrzöd a megértésedet és megszilárdítasz mindent, 

257
00:16:16,963 --> 00:16:21,320
amit eddig a pontig megértettél, egy teljes példa megoldásával az elejétől a végéig.

258
00:16:22,080 --> 00:16:24,300
De azért végigkísérlek, hogy ellenőrizhesd magadat.

259
00:16:25,120 --> 00:16:28,653
Egy üzenet létrehozásához amit kódoltan szeretnénk küldeni, 

260
00:16:28,653 --> 00:16:32,775
vagy bármilyen adat tároláshoz való felkészítéséhez az első lépés az, 

261
00:16:32,775 --> 00:16:34,660
hogy 11 bites darabokra osztjuk.

262
00:16:35,580 --> 00:16:39,760
Minden egyes darabot egy hibaálló 16 bites blokkba csomagolunk.

263
00:16:39,760 --> 00:16:43,220
Vegyük tehát ezt példaként, és dolgozzuk ki.

264
00:16:43,740 --> 00:16:44,940
Gyerünk, csináld csak meg!

265
00:16:45,220 --> 00:16:47,020
Állj meg, és próbáld meg összerakni ezt a blokkot.

266
00:16:52,720 --> 00:16:53,680
Oké, készen állsz?

267
00:16:54,240 --> 00:16:58,726
Ne feledjük, hogy a 0. pozíció és a többi 2-es hatvány a hibajavítási feladatra van 

268
00:16:58,726 --> 00:17:03,320
fenntartva, ezért az üzenetbiteket az összes többi helyre kell elhelyezni, sorrendben.

269
00:17:05,339 --> 00:17:08,866
Ennek a csoportnak páros paritásúnak kell lennie, ami már megvan, 

270
00:17:08,866 --> 00:17:12,339
ezért az 1-es pozícióban lévő paritásbitet 0-ra kellett állítani.

271
00:17:13,020 --> 00:17:15,632
A következő csoport páratlan paritással kezdődik, 

272
00:17:15,632 --> 00:17:17,880
ezért a paritásbitjét 1-esre kell állítani.

273
00:17:19,160 --> 00:17:21,855
Az ezt követő csoport páratlan paritással kezdődik, 

274
00:17:21,855 --> 00:17:24,240
ezért a paritásbitet ismét 1-re kell állítani.

275
00:17:24,780 --> 00:17:27,659
És az utolsó csoport is páratlan paritású, ami azt jelenti, 

276
00:17:27,659 --> 00:17:30,060
hogy a 8-as pozícióban lévő bitet 1-esre állítjuk.

277
00:17:31,300 --> 00:17:36,225
Az utolsó lépésként a teljes blokk most már páros paritású, ami azt jelenti, 

278
00:17:36,225 --> 00:17:40,320
hogy a 0-s számú bitet, az átfogó paritásbitet 0-ra állíthatjuk.

279
00:17:41,340 --> 00:17:44,517
Így amikor ez a blokk elküldésre kerül, a négy speciális 

280
00:17:44,517 --> 00:17:48,140
részhalmaz és a blokk egészének paritása mind páros, azaz 0 lesz.

281
00:17:48,820 --> 00:17:52,180
A gyakorlat második részeként játsszuk el a fogadó szerepét.

282
00:17:53,480 --> 00:17:56,820
Ez persze azt jelenti, hogy nem tudod, mi volt az eredeti üzenet.

283
00:17:57,080 --> 00:17:59,780
Talán néhányan közületek megjegyezték, de tegyük fel, hogy nem.

284
00:18:00,020 --> 00:18:03,358
Azt fogom tenni, hogy megváltoztatom a blokk 0, 

285
00:18:03,358 --> 00:18:07,740
1 vagy 2 bitjét, majd megkérlek, hogy találd ki, mit csináltam.

286
00:18:08,260 --> 00:18:10,810
Tehát ismét szünet, és próbáld meg kidolgozni.

287
00:18:18,790 --> 00:18:22,990
Oké, tehát a fogadóként most ellenőrizheted az első paritáscsoportot, 

288
00:18:22,990 --> 00:18:27,910
és láthatod, hogy az páros, tehát bármilyen hibának a páros oszlopban kell lennie.

289
00:18:29,690 --> 00:18:32,946
A következő ellenőrzés páratlan számot ad, ami egyrészt azt jelzi, 

290
00:18:32,946 --> 00:18:37,030
hogy legalább egy hiba van, másrészt pedig leszűkíti a kört erre a konkrét oszlopra.

291
00:18:38,550 --> 00:18:41,790
A harmadik csekkolás páros, ami még tovább csökkenti a lehetőségeket.

292
00:18:42,650 --> 00:18:46,697
Az utolsó ellenőrzés pedig páratlan és azt mondja, hogy valahol az alján van a hiba, 

293
00:18:46,697 --> 00:18:49,650
amit mostanra már tudjuk, hogy a 10-es pozícióban kell lennie.

294
00:18:51,490 --> 00:18:55,407
Ráadásul az egész blokk paritása páratlan, így biztosak lehetünk benne, 

295
00:18:55,407 --> 00:18:57,530
hogy csak egy bit hiba volt, nem kettő.

296
00:18:58,070 --> 00:18:59,970
Ha három vagy több volt, akkor fogalmunk sincs.

297
00:19:01,310 --> 00:19:05,612
Miután kijavítottuk a 10-es számú bitet, a korrekcióra nem használt 11 bit 

298
00:19:05,612 --> 00:19:09,571
kihúzásával megkapjuk az eredeti üzenet megfelelő szegmensét, amely, 

299
00:19:09,571 --> 00:19:14,390
ha visszatekerjük és összehasonlítjuk, valóban pontosan az, amivel a példát kezdtük.

300
00:19:15,710 --> 00:19:18,967
És most, hogy már tudod, hogyan kell mindezt kézzel csinálni, 

301
00:19:18,967 --> 00:19:23,170
szeretném megmutatni, hogy hogyan tudod egyetlen sor Python kóddal végrehajtani.

302
00:19:23,870 --> 00:19:27,989
Amit még nem mutattam meg neked, az az, hogy mennyire elegáns ez az algoritmus, 

303
00:19:27,989 --> 00:19:31,026
és milyen egyszerű rávenni egy gépet a hiba megtalálására. 

304
00:19:31,026 --> 00:19:33,498
Hogyan lehet nagyobb adatmennyiségeket kezelni, 

305
00:19:33,498 --> 00:19:37,411
és hogyan tudjuk mindezt több különálló paritás-ellenőrzés helyett egyetlen 

306
00:19:37,411 --> 00:19:38,750
műveletként megvalósítani.

307
00:19:39,430 --> 00:19:41,310
Csatlakozz hozzám a következő videóban!

