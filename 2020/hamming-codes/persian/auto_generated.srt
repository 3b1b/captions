1
00:00:00,000 --> 00:00:08,620
آیا تا به حال به این فکر کرده اید که چگونه می توان یک سی دی یا

2
00:00:08,620 --> 00:00:10,900
دی وی دی را خراش داد و همچنان هر آنچه را که ذخیره می کند پخش کرد؟

3
00:00:10,900 --> 00:00:15,280
خراش واقعاً روی 1s و 0s روی دیسک تأثیر می‌گذارد، بنابراین داده‌های متفاوتی

4
00:00:15,280 --> 00:00:20,500
را از آنچه که ذخیره شده است می‌خواند، اما اگر واقعاً خراشیده نشده

5
00:00:20,500 --> 00:00:26,540
باشد، بیت‌هایی که می‌خواند دقیقاً در همان فایلی رمزگشایی می‌شوند که روی آن

6
00:00:26,540 --> 00:00:28,400
کدگذاری شده است. با وجود تمام آن خطاها، کپی بیت به بیت.

7
00:00:28,400 --> 00:00:32,800
انبوهی از هوشمندی ریاضی وجود دارد که به ما امکان می‌دهد داده‌ها را ذخیره کنیم،

8
00:00:32,800 --> 00:00:36,840
و مهمتر از همه، داده‌ها را به روشی مقاوم در برابر خطاها منتقل کنیم.

9
00:00:36,840 --> 00:00:41,480
خوب، خوب، در واقع آنقدر هوشمندی لازم نیست

10
00:00:41,480 --> 00:00:42,480
تا راهی برای انجام این کار پیدا کنید.

11
00:00:42,480 --> 00:00:47,660
هر فایلی، خواه ویدیو باشد یا صدا یا متن، کد، تصویر، هر

12
00:00:47,660 --> 00:00:50,960
چه باشد، در نهایت دنباله ای از 1 و 0 است.

13
00:00:50,960 --> 00:00:55,340
و یک استراتژی ساده برای تصحیح هر بیتی که برگردانده

14
00:00:55,340 --> 00:00:57,780
می شود، ذخیره سه نسخه از هر بیت است.

15
00:00:57,780 --> 00:01:02,240
سپس دستگاهی که این فایل را می‌خواند می‌تواند این سه نسخه را با هم مقایسه

16
00:01:02,240 --> 00:01:07,440
کند و هر زمان که مغایرتی وجود داشت، همیشه از 3 بهترین 2 را بگیرد.

17
00:01:07,440 --> 00:01:11,560
اما این به معنای استفاده از دو سوم فضای خود برای افزونگی است.

18
00:01:11,560 --> 00:01:15,360
و حتی پس از آن، با وجود تمام این فضای خالی، هیچ تضمین قوی در

19
00:01:15,360 --> 00:01:18,120
مورد اینکه اگر بیش از یک بیت ورق بخورد چه اتفاقی می افتد وجود ندارد.

20
00:01:18,120 --> 00:01:21,960
سوال بسیار جالب تر این است که چگونه آن را بسازیم تا بتوان خطاها

21
00:01:21,960 --> 00:01:24,740
را تصحیح کرد و در عین حال فضای کمتری را از دست داد.

22
00:01:24,740 --> 00:01:28,500
به عنوان مثال، با استفاده از روشی که در مورد این ویدیو خواهید آموخت، می توانید داده های خود را در بلوک های 256 بیتی

23
00:01:28,500 --> 00:01:35,840
ذخیره کنید، جایی که هر بلوک از 9 بیت استفاده می کند، 9 بیت! به عنوان نوعی افزونگی عمل می کند، و

24
00:01:35,840 --> 00:01:41,000
247 بیت دیگر آزاد هستند تا هر پیام یا داده معناداری را که می خواهید حمل کنند.

25
00:01:41,000 --> 00:01:44,740
و همچنان اینطور خواهد بود که اگر بیتی در اینجا برگردانده شود، فقط با نگاه کردن

26
00:01:44,740 --> 00:01:49,640
به این بلوک و هیچ چیز دیگر، یک ماشین می تواند تشخیص دهد که یک خطا

27
00:01:49,640 --> 00:01:53,120
وجود داشته است و دقیقاً کجا بوده است تا بداند چگونه آن را اصلاح کند. .

28
00:01:53,140 --> 00:01:55,540
و صادقانه بگویم، این یک جادو است.

29
00:01:55,540 --> 00:01:59,400
و برای این طرح خاص، اگر دو بیت برگردانده شوند، دستگاه حداقل می‌تواند تشخیص

30
00:01:59,400 --> 00:02:03,180
دهد که دو خطا وجود داشته است، اگرچه نمی‌داند چگونه آنها را برطرف کند.

31
00:02:03,180 --> 00:02:08,140
ما کمی بعد در مورد اینکه چگونه این مقیاس برای بلوک های با اندازه های مختلف صحبت خواهیم کرد.

32
00:02:08,140 --> 00:02:12,620
روش هایی که به شما امکان می دهند چنین خطاهایی را تصحیح

33
00:02:12,620 --> 00:02:13,880
کنید، به اندازه کافی به عنوان کدهای تصحیح خطا شناخته می شوند.

34
00:02:13,880 --> 00:02:18,220
در بخش بهتری از قرن گذشته، این رشته منبع واقعاً غنی از ریاضیات عمیق و

35
00:02:18,220 --> 00:02:23,000
شگفت‌آوری بوده است که در دستگاه‌هایی که ما هر روز استفاده می‌کنیم گنجانده می‌شود.

36
00:02:23,000 --> 00:02:27,740
هدف در اینجا این است که به شما درک کاملی از

37
00:02:27,740 --> 00:02:29,660
یکی از اولین نمونه ها، معروف به کد همینگ، بدهد.

38
00:02:29,660 --> 00:02:32,620
و اتفاقاً، طرز فکر من در مورد ساختار این ویدیو، کمتر به توضیح

39
00:02:32,620 --> 00:02:37,060
مستقیم آن می‌پردازد، و بیشتر این است که شما را ترغیب کند تا

40
00:02:37,060 --> 00:02:40,220
آن را برای خودتان اختراع کنید، با کمی راهنمایی ملایم اینجا و آنجا.

41
00:02:40,220 --> 00:02:44,100
بنابراین زمانی که احساس می‌کنید می‌بینید در نقطه‌ای به کجا می‌رود، آن لحظه را به مکث اختصاص دهید،

42
00:02:44,100 --> 00:02:47,180
قبل از اینکه به شما بگویم، به طور فعال پیش‌بینی کنید که طرح قرار است چگونه باشد.

43
00:02:47,180 --> 00:02:51,500
همچنین، اگر می‌خواهید درک شما به سطح سخت‌افزار برسد، Ben Eater ویدیویی را

44
00:02:51,500 --> 00:02:55,160
در ارتباط با این ویدیو تهیه کرده است که به شما نشان می‌دهد

45
00:02:55,160 --> 00:02:59,520
چگونه کدهای Hamming را روی تخته‌های پخت پیاده‌سازی کنید، که بسیار رضایت‌بخش است.

46
00:02:59,520 --> 00:03:03,120
باید بدانید، کدهای همینگ به اندازه کدهای مدرن تر مانند الگوریتم Reed-Solomon به طور گسترده مورد استفاده قرار نمی گیرند،

47
00:03:03,120 --> 00:03:08,040
اما یک جادوی خاصی در تضاد بین اینکه چقدر این کار در ابتدا غیرممکن به نظر می رسد و

48
00:03:08,040 --> 00:03:14,240
زمانی که یک بار کاملاً منطقی به نظر می رسد وجود دارد. شما در مورد Hamming یاد می گیرید.

49
00:03:14,240 --> 00:03:19,080
اصل اساسی تصحیح خطا این است که در فضای وسیعی از همه پیام‌های

50
00:03:19,300 --> 00:03:22,860
ممکن، فقط برخی از زیر مجموعه‌ها پیام‌های معتبر در نظر گرفته می‌شوند.

51
00:03:22,860 --> 00:03:29,100
به عنوان یک قیاس، به کلماتی که املای صحیح دارند در مقابل کلماتی که املای نادرست دارند فکر کنید.

52
00:03:29,100 --> 00:03:33,340
هر زمان که یک پیام معتبر تغییر می کند، گیرنده مسئول تصحیح آنچه می بیند به

53
00:03:33,340 --> 00:03:38,380
نزدیکترین همسایه معتبر برمی گردد، همانطور که ممکن است با یک اشتباه تایپی انجام دهید.

54
00:03:38,380 --> 00:03:43,100
با این حال، ارائه یک الگوریتم مشخص برای دسته‌بندی

55
00:03:43,100 --> 00:03:47,160
مؤثر پیام‌هایی مانند این، هوشمندی خاصی را می‌طلبد.

56
00:03:47,160 --> 00:03:52,060
داستان در دهه 1940 آغاز می شود، زمانی که ریچارد همینگ جوان برای آزمایشگاه

57
00:03:52,060 --> 00:03:55,900
بل کار می کرد و برخی از کارهای او شامل استفاده از یک

58
00:03:55,900 --> 00:03:57,420
کامپیوتر کارت پانچ بسیار گران قیمت بود که دسترسی محدودی به آن داشت.

59
00:03:57,420 --> 00:04:01,200
و برنامه‌هایی که او مدام اجرا می‌کرد با شکست

60
00:04:01,200 --> 00:04:03,140
مواجه می‌شد، زیرا هرازگاهی مقداری اشتباه خوانده می‌شد.

61
00:04:03,140 --> 00:04:07,140
ناامیدی که بوته اختراع بود، آنقدر خسته شد که

62
00:04:07,140 --> 00:04:09,280
اولین کد تصحیح خطا در جهان را اختراع کرد.

63
00:04:09,280 --> 00:04:13,020
راه‌های مختلفی برای قاب‌بندی کدهای همینگ وجود دارد، اما به عنوان اولین گذر،

64
00:04:13,020 --> 00:04:16,620
همان‌طور که خود همینگ درباره آن‌ها فکر می‌کرد، آن را مرور می‌کنیم.

65
00:04:16,620 --> 00:04:21,400
بیایید از یک مثال ساده، اما نه خیلی ساده، یک بلوک 16 بیتی استفاده کنیم.

66
00:04:21,400 --> 00:04:25,700
ما موقعیت های این بیت ها را از 0 تا 15 شماره گذاری می کنیم.

67
00:04:25,700 --> 00:04:30,520
داده‌های واقعی که می‌خواهیم ذخیره کنیم تنها 12 بیت از این بیت‌ها را تشکیل

68
00:04:30,520 --> 00:04:33,920
می‌دهند، در حالی که 4 مورد از موقعیت‌ها به عنوان نوعی افزونگی رزرو شده‌اند.

69
00:04:33,920 --> 00:04:38,120
کلمه زاید در اینجا به سادگی به معنای کپی نیست، بالاخره آن 4

70
00:04:38,120 --> 00:04:40,200
بیت فضای کافی برای کپی کورکورانه داده ها را به ما نمی دهد.

71
00:04:40,200 --> 00:04:44,880
در عوض، آنها باید یک نوع افزونگی بسیار ظریف‌تر و

72
00:04:44,880 --> 00:04:48,740
هوشمندانه‌تر باشند، نه اطلاعات جدیدی، بلکه انعطاف‌پذیری را اضافه کنند.

73
00:04:48,740 --> 00:04:52,620
ممکن است انتظار داشته باشید که این 4 بیت خاص به خوبی در کنار هم قرار گیرند،

74
00:04:52,620 --> 00:04:56,400
شاید در انتها یا چیزی شبیه به آن، اما همانطور که خواهید دید، نشستن آنها در موقعیت

75
00:04:56,400 --> 00:05:00,320
هایی که توان 2 هستند، امکان چیزی را فراهم می کند که در پایان واقعاً زیبا باشد.

76
00:05:00,320 --> 00:05:05,420
همچنین ممکن است به شما راهنمایی کوچکی در مورد اینکه چگونه این مقیاس برای بلوک‌های بزرگ‌تر انجام می‌شود، به شما بدهد.

77
00:05:05,420 --> 00:05:09,220
همچنین از نظر فنی تنها 11 بیت داده است، متوجه خواهید شد که تفاوت

78
00:05:09,220 --> 00:05:14,260
جزئی برای آنچه در موقعیت 0 می‌گذرد وجود دارد، اما فعلاً نگران آن نباشید.

79
00:05:14,280 --> 00:05:18,640
مانند هر الگوریتم تصحیح خطا، این شامل دو بازیکن است، یک

80
00:05:18,640 --> 00:05:23,200
فرستنده که مسئول تنظیم این 4 بیت ویژه است و یک

81
00:05:23,200 --> 00:05:26,360
گیرنده که مسئول انجام نوعی بررسی و تصحیح خطاها است.

82
00:05:26,360 --> 00:05:30,040
البته، واژه‌های فرستنده و گیرنده واقعاً به ماشین‌ها یا نرم‌افزارهایی اشاره

83
00:05:30,040 --> 00:05:34,040
می‌کنند که همه بررسی‌ها را انجام می‌دهند، و ایده یک پیام

84
00:05:34,040 --> 00:05:35,480
واقعاً به طور گسترده به معنای شامل مواردی مانند ذخیره‌سازی است.

85
00:05:35,480 --> 00:05:39,320
پس از همه، ذخیره داده ها همان چیزی است که پیامی را فقط از

86
00:05:39,320 --> 00:05:42,640
گذشته به آینده به جای ارسال از یک مکان به مکان دیگر ارسال کنید.

87
00:05:42,640 --> 00:05:46,700
بنابراین این تنظیمات است، اما قبل از اینکه بتوانیم وارد آن شویم، باید در

88
00:05:46,700 --> 00:05:51,080
مورد یک ایده مرتبط صحبت کنیم که در زمان کشف همینگ در ذهن

89
00:05:51,080 --> 00:05:55,520
او تازه بود، روشی که به شما امکان می‌دهد خطاهای تک بیتی را

90
00:05:55,520 --> 00:05:57,300
تشخیص دهید، اما آنها را اصلاح نکنید. در تجارت به عنوان چک برابری

91
00:05:57,300 --> 00:06:01,300
برای بررسی برابری، ما تنها یک بیت را که فرستنده مسئول تنظیم

92
00:06:01,300 --> 00:06:04,940
آن است، جدا می کنیم و بقیه برای حمل پیام آزاد هستند.

93
00:06:04,940 --> 00:06:10,380
تنها کار این بیت ویژه این است که مطمئن

94
00:06:10,380 --> 00:06:12,100
شود مجموع 1 های پیام یک عدد زوج است.

95
00:06:12,100 --> 00:06:16,920
بنابراین برای مثال در حال حاضر، تعداد کل 1ها 7 است، که فرد است، بنابراین فرستنده

96
00:06:16,920 --> 00:06:20,960
باید آن بیت خاص را برگرداند تا عدد 1 باشد و تعداد را زوج کند.

97
00:06:20,960 --> 00:06:25,320
اما اگر بلوک قبلاً با عدد زوج 1 شروع شده

98
00:06:25,320 --> 00:06:27,480
بود، این بیت ویژه روی 0 نگه داشته می شد.

99
00:06:27,480 --> 00:06:31,640
این بسیار ساده، به طرز فریبنده ای ساده است، اما روشی فوق العاده زیبا برای تقطیر

100
00:06:31,640 --> 00:06:37,760
ایده تغییر در هر جایی از پیام است تا در یک بیت اطلاعات منعکس شود.

101
00:06:37,760 --> 00:06:43,680
توجه کنید که اگر هر بیتی از این پیام از 0 به 1 یا 1 به

102
00:06:43,680 --> 00:06:48,140
0 برگردانده شود، تعداد کل 1 ها را از زوج به فرد تغییر می دهد.

103
00:06:48,140 --> 00:06:52,000
بنابراین اگر شما گیرنده هستید، به این پیام نگاه می کنید و

104
00:06:52,000 --> 00:06:56,580
عدد فرد 1 را می بینید، می توانید مطمئن باشید که برخی

105
00:06:56,580 --> 00:06:58,700
از خطاها رخ داده است، حتی اگر نمی دانید کجا بوده است.

106
00:06:58,700 --> 00:07:02,820
در اصطلاح، اینکه گروهی از بیت ها دارای عدد زوج یا

107
00:07:02,820 --> 00:07:04,940
فرد 1 باشند، به عنوان برابری آن شناخته می شود.

108
00:07:04,940 --> 00:07:09,140
همچنین می توانید از اعداد استفاده کنید و بگویید که برابری 0 یا 1 است،

109
00:07:09,140 --> 00:07:11,320
که معمولاً زمانی که شروع به انجام ریاضیات با این ایده می کنید مفیدتر است.

110
00:07:11,320 --> 00:07:15,200
و این بیت ویژه ای که فرستنده برای کنترل

111
00:07:15,200 --> 00:07:18,020
برابری استفاده می کند بیت برابری نامیده می شود.

112
00:07:18,020 --> 00:07:22,460
و در واقع، ما باید روشن باشیم، اگر گیرنده برابری فرد را ببیند، لزوماً به این معنی

113
00:07:22,460 --> 00:07:26,920
نیست که فقط یک خطا وجود داشته است، ممکن است 3 خطا، یا 5، یا هر

114
00:07:26,920 --> 00:07:29,560
عدد فرد دیگری وجود داشته باشد، اما آنها می توانند با اطمینان بدانند. که 0 نبود

115
00:07:29,560 --> 00:07:34,880
از سوی دیگر، اگر 2 خطا یا هر تعداد زوج خطا وجود داشته باشد، آن

116
00:07:34,880 --> 00:07:39,560
شمارش نهایی 1 ها همچنان زوج خواهد بود، بنابراین گیرنده نمی تواند اطمینان کامل داشته

117
00:07:39,560 --> 00:07:43,360
باشد که شمارش زوج لزوماً به این معنی است که پیام بدون خطا است. .

118
00:07:43,360 --> 00:07:47,860
ممکن است شکایت کنید که پیامی که تنها با 2 بیت

119
00:07:47,860 --> 00:07:49,760
ورق می خورد بسیار ضعیف است و کاملاً درست می گویید.

120
00:07:49,760 --> 00:07:54,480
به خاطر داشته باشید، هرچند، هیچ روشی برای تشخیص یا تصحیح خطا وجود ندارد که به شما

121
00:07:54,480 --> 00:07:59,720
اطمینان 100٪ بدهد که پیامی که دریافت می‌کنید همان پیامی است که فرستنده در نظر گرفته است.

122
00:07:59,720 --> 00:08:03,760
به هر حال، نویز تصادفی کافی همیشه می تواند یک پیام معتبر

123
00:08:03,760 --> 00:08:05,920
را به یک پیام معتبر دیگر فقط به طور تصادفی تغییر دهد.

124
00:08:05,920 --> 00:08:10,520
در عوض، هدف ارائه طرحی است که تا حداکثر تعداد معینی از

125
00:08:10,520 --> 00:08:16,480
خطاها قوی باشد، یا شاید کاهش احتمال مثبت کاذب مانند این.

126
00:08:16,480 --> 00:08:20,940
بررسی‌های برابری به خودی خود بسیار ضعیف هستند، اما با تقطیر

127
00:08:20,940 --> 00:08:25,640
ایده تغییر در یک پیام کامل تا یک بیت، چیزی که

128
00:08:25,640 --> 00:08:28,000
به ما می‌دهند یک بلوک ساختمانی قدرتمند برای طرح‌های پیچیده‌تر است.

129
00:08:28,000 --> 00:08:32,880
به عنوان مثال، وقتی همینگ به دنبال راهی برای شناسایی محل وقوع یک خطا بود، نه

130
00:08:32,880 --> 00:08:37,160
فقط اینکه خطا رخ داده است، دیدگاه کلیدی او این بود که اگر برخی از بررسی‌های

131
00:08:37,160 --> 00:08:42,040
برابری را نه برای پیام کامل، بلکه برای زیر مجموعه‌هایی که با دقت انتخاب شده‌اند اعمال

132
00:08:42,040 --> 00:08:46,840
کنید، می‌توانید بپرسید. مجموعه‌ای دقیق‌تر از سوالات که محل هر خطای بیتی را مشخص می‌کند.

133
00:08:46,840 --> 00:08:51,280
احساس کلی کمی شبیه انجام یک بازی 20 سوالی است، پرسیدن

134
00:08:51,280 --> 00:08:54,300
سوالات بله یا خیر که فضای احتمالات را نصف می کند.

135
00:08:54,300 --> 00:08:58,840
به عنوان مثال، فرض کنید ما فقط روی این 8

136
00:08:58,840 --> 00:08:59,840
بیت، همه موقعیت‌های اعداد فرد، یک بررسی برابری انجام می‌دهیم.

137
00:09:00,400 --> 00:09:04,560
سپس اگر خطایی تشخیص داده شود، اطلاعات کمی بیشتر در مورد اینکه خطا دقیقاً

138
00:09:04,560 --> 00:09:09,160
کجاست، به گیرنده می دهد، یعنی اینکه در موقعیتی عجیب و غریب است.

139
00:09:09,160 --> 00:09:14,360
اگر هیچ خطایی در بین آن 8 بیت تشخیص داده نشد، به این معنی است

140
00:09:14,360 --> 00:09:17,240
که اصلا خطایی وجود ندارد، یا جایی در موقعیت های زوج قرار می گیرد.

141
00:09:17,240 --> 00:09:21,560
ممکن است فکر کنید که محدود کردن یک بررسی برابری به نیمی از بیت‌ها باعث

142
00:09:21,560 --> 00:09:25,460
می‌شود که کارایی آن کمتر شود، اما زمانی که آن را همراه با سایر

143
00:09:25,460 --> 00:09:29,720
چک‌های به‌خوبی انتخاب‌شده انجام می‌دهد، به طور غیرمستقیم چیزی بسیار قدرتمندتر به ما می‌دهد.

144
00:09:29,720 --> 00:09:34,440
برای راه‌اندازی آن بررسی برابری، به یاد داشته باشید، نیاز به تخصیص

145
00:09:34,440 --> 00:09:37,600
بیت خاصی دارد که کنترل برابری آن گروه کامل را دارد.

146
00:09:37,600 --> 00:09:39,920
در اینجا بیایید فقط موقعیت 1 را انتخاب کنیم.

147
00:09:39,920 --> 00:09:43,960
برای مثال نشان داده شده، برابری این 8 بیت در حال حاضر فرد

148
00:09:43,960 --> 00:09:48,220
است، بنابراین فرستنده مسئول تغییر بیت برابری است، و اکنون آن زوج است.

149
00:09:48,220 --> 00:09:51,040
این تنها 1 مورد از 4 بررسی برابری است که ما انجام خواهیم داد.

150
00:09:51,040 --> 00:09:55,560
بررسی دوم در میان 8 بیت در نیمه سمت راست شبکه

151
00:09:55,560 --> 00:09:56,880
است، حداقل همانطور که ما آن را در اینجا ترسیم کردیم.

152
00:09:56,880 --> 00:10:02,520
این بار ممکن است از موقعیت 2 به عنوان بیت برابری استفاده کنیم، بنابراین این 8 بیت از قبل دارای

153
00:10:02,520 --> 00:10:07,160
برابری زوج هستند و فرستنده می تواند احساس خوبی داشته باشد که بیت شماره 2 را بدون تغییر باقی بگذارد.

154
00:10:07,160 --> 00:10:11,040
سپس از طرف دیگر، اگر گیرنده برابری این گروه را بررسی کند و متوجه شود که

155
00:10:11,040 --> 00:10:15,960
عجیب و غریب است، می‌دانند که خطا جایی در بین این 8 بیت سمت راست است.

156
00:10:15,960 --> 00:10:21,260
در غیر این صورت به این معنی است که یا خطایی وجود ندارد، یا خطا جایی در نیمه چپ است.

157
00:10:21,260 --> 00:10:24,040
یا حدس می‌زنم ممکن است دو خطا وجود داشته باشد، اما فعلاً

158
00:10:24,040 --> 00:10:27,080
فرض می‌کنیم که حداکثر یک خطا در کل بلوک وجود دارد.

159
00:10:27,080 --> 00:10:29,160
همه چیز برای بیش از این به طور کامل خراب می شود.

160
00:10:29,160 --> 00:10:32,920
در اینجا، قبل از اینکه به دو بررسی بعدی نگاه کنیم، لحظه ای به این فکر کنید که این دو

161
00:10:32,920 --> 00:10:35,880
مورد اول وقتی آنها را با هم در نظر می گیریم به ما اجازه می دهند چه کار کنیم.

162
00:10:35,880 --> 00:10:40,240
فرض کنید در بین ستون های فرد و در نیمه سمت راست خطایی را تشخیص داده اید.

163
00:10:40,240 --> 00:10:43,940
لزوماً به این معنی است که خطا جایی در آخرین ستون است.

164
00:10:43,940 --> 00:10:48,280
اگر در ستون فرد خطایی وجود نداشت اما در نیمه سمت راست خطایی

165
00:10:48,280 --> 00:10:50,520
وجود داشت، به شما می گوید که در ستون دوم تا آخر است.

166
00:10:50,520 --> 00:10:54,640
به همین ترتیب اگر خطایی در ستون های فرد وجود داشته باشد اما در نیمه

167
00:10:54,640 --> 00:10:56,560
سمت راست خطایی وجود نداشته باشد، می دانید که در جایی در ستون دوم است.

168
00:10:56,560 --> 00:11:00,560
و اگر هیچ یک از این دو بررسی برابری چیزی را شناسایی نکرد، به این معنی

169
00:11:00,560 --> 00:11:03,760
است که تنها جایی که ممکن است خطا باشد در همان ستون سمت چپ است.

170
00:11:03,760 --> 00:11:06,480
اما همچنین ممکن است به این معنی باشد که اصلا خطایی وجود ندارد.

171
00:11:06,480 --> 00:11:10,800
که همگی روشی نسبتاً پیچیده برای گفتن این است که دو

172
00:11:10,800 --> 00:11:11,800
بررسی برابری به ما امکان می دهد ستون را مشخص کنیم.

173
00:11:11,800 --> 00:11:14,000
از اینجا، احتمالاً می توانید حدس بزنید که چه چیزی در ادامه می آید.

174
00:11:14,000 --> 00:11:16,240
ما اساساً همان کار را انجام می دهیم اما برای ردیف ها.

175
00:11:16,240 --> 00:11:21,040
با استفاده از موقعیت 4 به عنوان بیت برابری، یک بررسی برابری روی ردیف های فرد انجام می شود.

176
00:11:21,040 --> 00:11:25,480
بنابراین در این مثال آن گروه از قبل دارای برابری

177
00:11:25,480 --> 00:11:26,480
زوج است، بنابراین بیت 4 روی 0 تنظیم می شود.

178
00:11:26,480 --> 00:11:31,280
و در نهایت یک بررسی برابری در دو ردیف پایین، با

179
00:11:31,280 --> 00:11:32,280
استفاده از موقعیت 8 به عنوان بیت برابری وجود دارد.

180
00:11:32,280 --> 00:11:35,840
در این حالت، به نظر می رسد که فرستنده باید آن

181
00:11:35,840 --> 00:11:37,840
بیت 8 را روشن کند تا به گروه برابری یکنواخت بدهد.

182
00:11:37,840 --> 00:11:41,360
همانطور که دو چک اول به ما اجازه می دهد ستون را مشخص کنیم،

183
00:11:41,360 --> 00:11:43,000
این دو بررسی بعدی نیز به شما امکان می دهد ردیف را پین کنید.

184
00:11:43,000 --> 00:11:48,400
به عنوان مثال، تصور کنید که در حین انتقال، مثلاً در موقعیت 3 خطایی وجود دارد.

185
00:11:48,400 --> 00:11:52,620
خوب این روی گروه برابری اول تأثیر می گذارد، و همچنین روی گروه برابری دوم تأثیر

186
00:11:52,620 --> 00:11:56,340
می گذارد، بنابراین گیرنده می داند که در جایی در ستون سمت راست خطایی وجود دارد.

187
00:11:56,340 --> 00:12:01,380
اما گروه سوم را تحت تاثیر قرار نمی دهد و گروه چهارم را تحت تاثیر قرار نمی دهد.

188
00:12:01,380 --> 00:12:05,460
و این به گیرنده اجازه می دهد تا خطا را تا ردیف اول مشخص کند،

189
00:12:05,460 --> 00:12:08,660
که لزوماً به معنای موقعیت 3 است، بنابراین آنها می توانند خطا را برطرف کنند.

190
00:12:08,660 --> 00:12:12,640
ممکن است از صرف لحظه ای لذت ببرید و خود را متقاعد کنید که پاسخ به این چهار

191
00:12:12,680 --> 00:12:17,320
سوال واقعاً همیشه به شما امکان می دهد مکان خاصی را مشخص کنید، مهم نیست که کجا هستند.

192
00:12:17,320 --> 00:12:22,640
در واقع، افراد زیرک در میان شما ممکن است حتی

193
00:12:22,640 --> 00:12:23,640
متوجه ارتباط بین این سوالات و شمارش دودویی شوند.

194
00:12:23,640 --> 00:12:27,840
و اگر این کار را کردید، مجدداً اجازه دهید تأکید کنم، مکث کنید، خودتان

195
00:12:27,840 --> 00:12:30,880
سعی کنید قبل از اینکه من آن را خراب کنم، ارتباط را ترسیم کنید.

196
00:12:30,880 --> 00:12:35,560
اگر از خود می‌پرسید که چه اتفاقی می‌افتد اگر خود بیت

197
00:12:35,560 --> 00:12:36,560
برابری تحت تأثیر قرار گیرد، خوب، می‌توانید آن را امتحان کنید.

198
00:12:36,560 --> 00:12:40,720
لحظه ای به این فکر کنید که چگونه هر خطایی در بین این

199
00:12:40,720 --> 00:12:47,440
چهار بیت خاص، دقیقاً با همان گروه چهار سؤالی، ردیابی می شود.

200
00:12:47,440 --> 00:12:50,500
این واقعاً مهم نیست، زیرا در پایان روز چیزی که ما می‌خواهیم

201
00:12:50,500 --> 00:12:53,640
محافظت از بیت‌های پیام است، بیت‌های تصحیح خطا در حال حرکت هستند.

202
00:12:53,640 --> 00:12:57,120
اما محافظت از آن بیت ها نیز چیزی است که به طور

203
00:12:57,120 --> 00:12:59,260
طبیعی به عنوان یک محصول جانبی از این طرح خارج می شود.

204
00:12:59,260 --> 00:13:02,380
همچنین ممکن است از پیش بینی چگونگی این مقیاس لذت ببرید.

205
00:13:02,380 --> 00:13:08,040
اگر از یک بلوک با اندازه 256 بیت استفاده کنیم، برای مثال، برای مشخص کردن یک مکان، شما فقط به

206
00:13:08,040 --> 00:13:15,680
هشت سوال بله یا خیر نیاز دارید تا مسیر خود را به صورت دودویی در یک نقطه خاص جستجو کنید.

207
00:13:15,680 --> 00:13:19,680
و به یاد داشته باشید، برای هر سوال فقط

208
00:13:19,680 --> 00:13:23,340
یک بیت برای تنظیم بررسی برابری مناسب لازم است.

209
00:13:23,340 --> 00:13:26,960
ممکن است برخی از شما قبلاً آن را دیده باشید، اما ما بعداً در مورد

210
00:13:26,960 --> 00:13:29,960
روش سیستماتیک برای یافتن این سؤالات تنها در یک یا دو دقیقه صحبت خواهیم کرد.

211
00:13:29,960 --> 00:13:33,440
امیدواریم این طرح برای قدردانی از کارایی آنچه

212
00:13:33,440 --> 00:13:34,440
در اینجا در حال توسعه هستیم کافی باشد.

213
00:13:34,440 --> 00:13:38,440
اولین چیز، به جز آن هشت بیت برابری برجسته، می‌تواند هر چیزی باشد

214
00:13:38,440 --> 00:13:41,720
که می‌خواهید باشد و هر پیام یا داده‌ای را که می‌خواهید حمل کند.

215
00:13:41,720 --> 00:13:45,480
8 بیت زائد هستند به این معنا که به طور کامل توسط بقیه پیام تعیین می

216
00:13:45,480 --> 00:13:53,640
شوند، اما به روشی بسیار هوشمندانه تر از کپی کردن پیام به عنوان یک کل است.

217
00:13:53,640 --> 00:13:58,000
و با این حال، برای تسلیم شدن بسیار اندک، می‌توانید

218
00:13:58,000 --> 00:13:59,000
هر خطای تک بیتی را شناسایی و برطرف کنید.

219
00:13:59,000 --> 00:14:00,400
خب تقریبا

220
00:14:00,400 --> 00:14:05,920
بسیار خوب، بنابراین یک مشکل اینجاست که اگر هیچ یک از چهار بررسی برابری خطایی را

221
00:14:05,920 --> 00:14:10,240
شناسایی نکرد، به این معنی که زیرمجموعه های انتخاب شده ویژه 8 بیت، همگی دارای برابری

222
00:14:10,240 --> 00:14:15,520
زوج هستند، دقیقاً همانطور که فرستنده در نظر گرفته است، یا به این معنی است که

223
00:14:15,520 --> 00:14:17,760
اصلا خطایی وجود نداشته است. ، یا ما را به موقعیت 0 محدود می کند.

224
00:14:17,760 --> 00:14:23,040
ببینید، با چهار سوال بله یا خیر، ما 16 نتیجه ممکن برای بررسی برابری خود داریم،

225
00:14:23,040 --> 00:14:28,000
و در ابتدا برای مشخص کردن 1 از 16 موقعیت در بلوک عالی به نظر می

226
00:14:28,000 --> 00:14:33,000
رسد، اما شما همچنین باید یک نتیجه هفدهم، یعنی خطای بدون، را اعلام کنید. وضعیت.

227
00:14:33,000 --> 00:14:37,860
راه حل در اینجا در واقع بسیار ساده است، فقط آن بیت 0 را به طور کامل فراموش کنید.

228
00:14:37,860 --> 00:14:41,920
بنابراین وقتی ما چهار بررسی برابری خود را انجام می دهیم و می بینیم که

229
00:14:41,920 --> 00:14:44,320
همه آنها یکسان هستند، بدون ابهام به این معنی است که هیچ خطایی وجود ندارد.

230
00:14:44,320 --> 00:14:49,240
این بدان معناست که به جای کار با یک بلوک 16 بیتی، ما با یک بلوک 15 بیتی کار می

231
00:14:49,240 --> 00:14:54,040
کنیم، که در آن 11 بیت برای حمل پیام آزاد هستند و 4 تا از آنها برای افزونگی وجود دارد.

232
00:14:54,080 --> 00:14:58,400
و با آن، ما اکنون چیزی را داریم که افراد در کسب

233
00:14:58,400 --> 00:14:59,400
و کار به عنوان کد 15-11 Hamming از آن یاد می کنند.

234
00:14:59,400 --> 00:15:03,920
با این اوصاف، داشتن اندازه بلوک با توان تمیز 2 خوب است، و یک راه هوشمندانه وجود دارد که بتوانیم

235
00:15:03,920 --> 00:15:08,880
آن بیت 0 را در اطراف نگه داریم و کاری کنیم که کمی کار اضافی برای ما انجام دهد.

236
00:15:08,880 --> 00:15:13,600
اگر از آن به‌عنوان بیت برابری در کل بلوک استفاده کنیم، به ما امکان می‌دهد

237
00:15:13,600 --> 00:15:16,320
در واقع خطاهای ۲ بیتی را تشخیص دهیم، حتی اگر نمی‌توانیم آن‌ها را اصلاح کنیم.

238
00:15:16,320 --> 00:15:17,440
در اینجا نحوه عملکرد آن آمده است.

239
00:15:17,440 --> 00:15:21,740
پس از تنظیم آن چهار بیت ویژه تصحیح خطا، آن 0 را طوری تنظیم

240
00:15:21,740 --> 00:15:25,540
می کنیم که برابری بلوک کامل برابر باشد، درست مانند یک بررسی برابری معمولی.

241
00:15:25,540 --> 00:15:29,780
اکنون، اگر یک خطای تک بیتی وجود داشته باشد، برابری بلوک کامل به صورت عجیب و غریب تغییر

242
00:15:29,780 --> 00:15:33,940
می کند، اما به هر حال به لطف چهار بررسی تصحیح خطا، آن را دریافت می کنیم.

243
00:15:33,940 --> 00:15:38,100
با این حال، اگر دو خطا وجود داشته باشد، برابری کلی به

244
00:15:38,100 --> 00:15:42,660
یکنواخت شدن برمی‌گردد، اما گیرنده همچنان می‌بیند که حداقل مقداری خطا

245
00:15:42,660 --> 00:15:45,820
وجود داشته است، زیرا در آن چهار بررسی برابری اتفاق می‌افتد.

246
00:15:45,820 --> 00:15:49,780
بنابراین اگر در کل متوجه برابری یکنواخت شوند، اما اتفاقی غیر صفر در

247
00:15:49,820 --> 00:15:52,980
بررسی‌های دیگر رخ دهد، به آنها می‌گوید حداقل دو خطا وجود داشته است.

248
00:15:52,980 --> 00:15:54,420
این هوشمندانه نیست؟

249
00:15:54,420 --> 00:15:58,500
حتی اگر نمی‌توانیم آن خطاهای 2 بیتی را اصلاح کنیم، فقط با برگرداندن آن

250
00:15:58,500 --> 00:16:02,340
یک بیت 0 آزاردهنده کوچک، به ما امکان می‌دهد آنها را شناسایی کنیم.

251
00:16:02,340 --> 00:16:06,540
این بسیار استاندارد است، آن را به عنوان یک کد Hamming توسعه یافته شناخته می شود.

252
00:16:06,540 --> 00:16:10,860
از نظر فنی، اکنون شرح کاملی از کاری که یک کد Hamming

253
00:16:10,860 --> 00:16:13,580
انجام می دهد، حداقل برای مثال یک بلوک 16 بیتی، دارید.

254
00:16:13,580 --> 00:16:17,300
اما فکر می‌کنم با انجام یک مثال کامل از ابتدا تا انتها، بررسی درک

255
00:16:17,300 --> 00:16:21,980
خود و استحکام بخشیدن به همه چیز تا این مرحله، رضایت‌بخش‌تر خواهد بود.

256
00:16:21,980 --> 00:16:25,100
من آن را با شما انجام خواهم داد تا بتوانید خودتان را بررسی کنید.

257
00:16:25,100 --> 00:16:29,180
برای تنظیم یک پیام، خواه یک پیام تحت اللفظی باشد که در فضا

258
00:16:29,180 --> 00:16:34,100
ترجمه می‌کنید یا برخی از داده‌هایی که می‌خواهید در طول زمان ذخیره کنید،

259
00:16:34,100 --> 00:16:35,700
اولین قدم این است که آن را به تکه‌های 11 بیتی تقسیم کنید.

260
00:16:35,700 --> 00:16:40,340
هر قطعه در یک بلوک 16 بیتی مقاوم در برابر خطا بسته بندی می شود.

261
00:16:40,340 --> 00:16:43,740
بنابراین بیایید این مورد را به عنوان مثال در نظر بگیریم و در واقع آن را حل کنیم.

262
00:16:43,740 --> 00:16:45,340
برو، در واقع این کار را انجام بده!

263
00:16:45,380 --> 00:16:47,380
بیایید مکث کنیم و سعی کنیم این بلوک را کنار هم قرار دهیم.

264
00:16:52,980 --> 00:16:53,980
باشه، آماده ای؟

265
00:16:53,980 --> 00:16:58,500
به یاد داشته باشید، موقعیت 0 به همراه سایر توان های 2 برای وظیفه تصحیح خطا محفوظ است،

266
00:16:58,500 --> 00:17:05,700
بنابراین شما با قرار دادن بیت های پیام در تمام نقاط باقی مانده به ترتیب شروع می کنید.

267
00:17:05,700 --> 00:17:09,700
شما به این گروه نیاز دارید که یک برابری زوج داشته باشد، که قبلاً هم

268
00:17:09,700 --> 00:17:13,140
دارد، بنابراین باید آن بیت برابری را در موقعیت 1 روی 0 قرار دهید.

269
00:17:13,140 --> 00:17:17,700
گروه بعدی با یک برابری فرد شروع می شود، بنابراین

270
00:17:17,700 --> 00:17:19,260
شما باید بیت برابری آن را 1 تنظیم می کردید.

271
00:17:19,260 --> 00:17:23,740
گروه بعد از آن با یک برابری فرد شروع می شود،

272
00:17:23,740 --> 00:17:24,740
بنابراین دوباره باید بیت برابری آن را 1 تنظیم می کردید.

273
00:17:24,740 --> 00:17:29,500
و گروه نهایی نیز دارای یک برابری فرد است، به این معنی که

274
00:17:29,500 --> 00:17:31,500
ما آن بیت را در موقعیت 8 برابر با 1 قرار می دهیم.

275
00:17:31,500 --> 00:17:36,460
و سپس به عنوان مرحله آخر، بلوک کامل اکنون دارای یک برابری زوج است، به این

276
00:17:36,460 --> 00:17:41,500
معنی که می توانید آن بیت شماره 0، بیت برابری فراگیر، را 0 تنظیم کنید.

277
00:17:41,500 --> 00:17:45,660
بنابراین با حذف این بلوک، برابری چهار زیرمجموعه ویژه و

278
00:17:45,660 --> 00:17:48,980
بلوک به عنوان یک کل زوج یا 0 خواهد بود.

279
00:17:48,980 --> 00:17:53,620
به عنوان قسمت دوم تمرین، اجازه دهید شما نقش گیرنده را بازی کنید.

280
00:17:53,620 --> 00:17:57,580
البته، این بدان معناست که شما از قبل نمی دانید این پیام چیست، شاید برخی

281
00:17:57,580 --> 00:18:00,180
از شما آن را حفظ کرده باشید، اما فرض کنیم که این پیام را ندانید.

282
00:18:00,180 --> 00:18:05,820
کاری که می‌خواهم انجام دهم این است که 0، 1 یا 2 بیت‌های آن بلوک

283
00:18:05,820 --> 00:18:08,340
را تغییر دهم و سپس از شما بخواهم بفهمید که چه کاری انجام دادم.

284
00:18:08,340 --> 00:18:13,460
پس دوباره مکث کنید و سعی کنید آن را حل کنید.

285
00:18:13,460 --> 00:18:23,960
خوب، بنابراین شما به عنوان گیرنده اکنون اولین گروه برابری را بررسی کنید و می توانید

286
00:18:23,960 --> 00:18:29,820
ببینید که زوج است، بنابراین هر خطایی که وجود دارد باید در یک ستون زوج باشد.

287
00:18:29,820 --> 00:18:34,620
بررسی بعدی یک عدد فرد به ما می دهد و به هر دوی ما می گوید

288
00:18:34,620 --> 00:18:38,760
که حداقل یک خطا وجود دارد و ما را به این ستون خاص محدود می کند.

289
00:18:38,760 --> 00:18:42,900
سومین بررسی یکنواخت است و احتمالات را حتی بیشتر کاهش می دهد.

290
00:18:42,900 --> 00:18:46,780
و آخرین بررسی برابری عجیب است، به ما می گوید خطایی در قسمت پایین وجود

291
00:18:46,780 --> 00:18:51,700
دارد، که تا به حال می توانیم ببینیم که باید در موقعیت شماره 10 باشد.

292
00:18:51,700 --> 00:18:56,140
علاوه بر این، برابری کل بلوک عجیب است و به ما

293
00:18:56,140 --> 00:18:58,220
اطمینان می دهد که یک تلنگر وجود دارد و نه دو.

294
00:18:58,220 --> 00:19:01,600
اگر سه یا بیشتر باشد، همه شرط‌ها لغو می‌شوند.

295
00:19:01,600 --> 00:19:06,520
پس از تصحیح بیت شماره 10، بیرون کشیدن 11 بیتی که برای تصحیح استفاده نشده اند،

296
00:19:06,520 --> 00:19:11,620
بخش مربوطه از پیام اصلی را به ما می دهد، که اگر به عقب برگردانید و

297
00:19:11,620 --> 00:19:16,160
مقایسه کنید، در واقع دقیقاً همان چیزی است که مثال را با آن شروع کردیم.

298
00:19:16,160 --> 00:19:19,260
و اکنون که می دانید چگونه همه این کارها را با دست انجام دهید، می خواهم به شما نشان

299
00:19:19,260 --> 00:19:23,940
دهم که چگونه می توانید بخش اصلی همه این منطق را با یک خط کد پایتون انجام دهید.

300
00:19:23,940 --> 00:19:28,400
می بینید، چیزی که من هنوز به شما نگفته ام این است که این الگوریتم واقعاً

301
00:19:28,400 --> 00:19:32,380
چقدر ظریف است، چقدر ساده است که یک ماشین را به موقعیت خطا نشان دهد، چگونه

302
00:19:32,380 --> 00:19:37,680
به طور سیستماتیک آن را مقیاس بندی کنیم، و چگونه می توانیم همه موارد را چارچوب

303
00:19:37,680 --> 00:19:39,580
بندی کنیم. این به عنوان یک عملیات واحد به جای چندین بررسی برابری جداگانه است.

304
00:19:39,580 --> 00:19:41,680
برای اینکه بفهمید منظورم چیست، در قسمت 2 با من همراه شوید.

