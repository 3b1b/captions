1
00:00:03,620 --> 00:00:06,989
Vous êtes-vous déjà demandé comment il était possible de gratter 

2
00:00:06,989 --> 00:00:10,100
un CD ou un DVD tout en continuant à lire ce qu'il contient?

3
00:00:10,900 --> 00:00:14,163
La rayure affecte réellement les 1 et les 0 sur le disque, 

4
00:00:14,163 --> 00:00:17,925
donc il lit des données différentes de celles qui ont été stockées, 

5
00:00:17,925 --> 00:00:22,018
mais à moins qu'il ne soit vraiment rayé, les bits qu'il lit sont décodés 

6
00:00:22,018 --> 00:00:26,001
exactement dans le même fichier qui y a été codé, un copie bit par bit, 

7
00:00:26,001 --> 00:00:27,440
malgré toutes ces erreurs.

8
00:00:27,440 --> 00:00:32,050
Il existe tout un tas d’intelligence mathématique qui nous permet de stocker des données, 

9
00:00:32,050 --> 00:00:36,200
et tout aussi important de les transmettre, d’une manière résiliente aux erreurs.

10
00:00:36,200 --> 00:00:38,609
Eh bien, d'accord, en fait, il ne faut pas beaucoup 

11
00:00:38,609 --> 00:00:40,880
d'intelligence pour trouver un moyen de procéder.

12
00:00:40,880 --> 00:00:45,756
Tout fichier, qu'il s'agisse d'une vidéo, d'un son ou d'un texte, d'un code, 

13
00:00:45,756 --> 00:00:50,380
d'une image, peu importe, est en fin de compte une séquence de 1 et de 0.

14
00:00:50,680 --> 00:00:53,155
Et une stratégie simple pour corriger tout bit 

15
00:00:53,155 --> 00:00:56,000
retourné serait de stocker trois copies de chaque bit.

16
00:00:57,580 --> 00:01:00,748
Ensuite, la machine lisant ce fichier pourrait comparer ces trois 

17
00:01:00,748 --> 00:01:04,060
copies et toujours prendre la meilleure 2 sur 3 en cas de divergence.

18
00:01:07,160 --> 00:01:10,860
Mais cela signifie que vous utilisez les deux tiers de votre espace pour la redondance.

19
00:01:11,480 --> 00:01:13,710
Et même dans ce cas, malgré tout cet espace abandonné, 

20
00:01:13,710 --> 00:01:17,240
il n'y a aucune garantie solide quant à ce qui se passera si plus d'un bit est inversé.

21
00:01:17,980 --> 00:01:21,040
La question bien plus intéressante est de savoir comment faire en sorte que 

22
00:01:21,040 --> 00:01:24,020
les erreurs puissent être corrigées en perdant le moins de place possible.

23
00:01:24,520 --> 00:01:28,448
Par exemple, en utilisant la méthode que vous découvrirez dans cette vidéo, 

24
00:01:28,448 --> 00:01:31,654
vous pourriez stocker vos données dans des blocs de 256 bits, 

25
00:01:31,654 --> 00:01:33,360
où chaque bloc utilise 9 bits, 9!

26
00:01:33,760 --> 00:01:37,073
pour agir comme une sorte de redondance, et les 247 autres bits sont libres 

27
00:01:37,073 --> 00:01:40,300
de transporter le message ou les données significatifs que vous souhaitez.

28
00:01:40,900 --> 00:01:43,714
Et il sera toujours vrai que si un bit est inversé ici, 

29
00:01:43,714 --> 00:01:47,935
rien qu'en regardant ce bloc et rien de plus, une machine sera capable d'identifier 

30
00:01:47,935 --> 00:01:51,654
qu'il y a eu une erreur et précisément où elle se trouvait afin de savoir 

31
00:01:51,654 --> 00:01:52,660
comment la corriger.

32
00:01:52,660 --> 00:01:54,620
Et honnêtement, cela semble magique.

33
00:01:55,440 --> 00:01:57,899
Et pour ce schéma particulier, si deux bits sont inversés, 

34
00:01:57,899 --> 00:02:00,900
la machine sera au moins capable de détecter qu'il y a eu deux erreurs, 

35
00:02:00,900 --> 00:02:02,860
même si elle ne saura pas comment les corriger.

36
00:02:03,520 --> 00:02:05,243
Nous parlerons un peu plus tard de la manière dont 

37
00:02:05,243 --> 00:02:06,900
cela s'adapte à des blocs de différentes tailles.

38
00:02:07,860 --> 00:02:10,692
Les méthodes qui vous permettent de corriger de telles erreurs sont connues, 

39
00:02:10,692 --> 00:02:12,900
à juste titre, sous le nom de codes de correction d'erreurs.

40
00:02:13,660 --> 00:02:16,306
Pendant la majeure partie du siècle dernier, ce domaine a été 

41
00:02:16,306 --> 00:02:19,037
une source très riche de mathématiques étonnamment approfondies 

42
00:02:19,037 --> 00:02:21,940
qui sont intégrées aux appareils que nous utilisons quotidiennement.

43
00:02:22,840 --> 00:02:25,771
L’objectif ici est de vous donner une compréhension très approfondie 

44
00:02:25,771 --> 00:02:28,660
de l’un des premiers exemples, connu sous le nom de code de Hamming.

45
00:02:29,520 --> 00:02:32,801
Et d'ailleurs, la façon dont je réfléchis à la structure de cette vidéo 

46
00:02:32,801 --> 00:02:35,581
consiste moins à l'expliquer aussi directement que possible, 

47
00:02:35,581 --> 00:02:38,088
mais plutôt à vous inciter à l'inventer par vous-même, 

48
00:02:38,088 --> 00:02:39,820
avec quelques conseils doux ici et là.

49
00:02:40,120 --> 00:02:42,730
Alors, quand vous sentez que vous voyez où cela va à un moment donné, 

50
00:02:42,730 --> 00:02:45,974
prenez ce moment pour faire une pause, prédisez activement ce que sera le projet avant 

51
00:02:45,974 --> 00:02:46,720
que je vous le dise.

52
00:02:47,240 --> 00:02:50,624
De plus, si vous souhaitez que votre compréhension descende au niveau matériel, 

53
00:02:50,624 --> 00:02:54,051
Ben Eater a réalisé une vidéo en conjonction avec celle-ci vous montrant comment 

54
00:02:54,051 --> 00:02:56,716
implémenter réellement les codes de Hamming sur des maquettes, 

55
00:02:56,716 --> 00:02:58,240
ce qui est extrêmement satisfaisant.

56
00:02:59,300 --> 00:03:02,623
Vous devriez le savoir, les codes de Hamming ne sont pas aussi largement utilisés 

57
00:03:02,623 --> 00:03:05,258
que les codes plus modernes, comme l'algorithme de Reed-Solomon, 

58
00:03:05,258 --> 00:03:08,744
mais il y a une certaine magie dans le contraste entre le fait que cette tâche semble 

59
00:03:08,744 --> 00:03:12,067
impossible au début et à quel point elle semble tout à fait raisonnable une fois. 

60
00:03:12,067 --> 00:03:13,000
vous découvrez Hamming.

61
00:03:13,720 --> 00:03:17,851
Le principe de base de la correction d’erreurs est que dans un vaste espace de tous 

62
00:03:17,851 --> 00:03:22,180
les messages possibles, seul un sous-ensemble sera considéré comme des messages valides.

63
00:03:22,800 --> 00:03:26,940
Par analogie, pensez aux mots correctement orthographiés et aux mots mal orthographiés.

64
00:03:28,900 --> 00:03:31,639
Chaque fois qu'un message valide est modifié, le destinataire 

65
00:03:31,639 --> 00:03:34,953
est responsable de corriger ce qu'il voit au voisin valide le plus proche, 

66
00:03:34,953 --> 00:03:37,340
comme vous pourriez le faire avec une faute de frappe.

67
00:03:38,220 --> 00:03:41,361
Cependant, trouver un algorithme concret pour catégoriser efficacement 

68
00:03:41,361 --> 00:03:44,060
des messages comme celui-ci demande une certaine ingéniosité.

69
00:03:46,780 --> 00:03:50,467
L'histoire commence dans les années 1940, lorsque le jeune Richard Hamming travaillait 

70
00:03:50,467 --> 00:03:53,901
pour les Bell Labs et qu'une partie de son travail impliquait l'utilisation d'un 

71
00:03:53,901 --> 00:03:57,420
très gros ordinateur à carte perforée coûteux auquel il n'avait qu'un accès limité.

72
00:03:57,800 --> 00:03:59,998
Et les programmes qu’il continuait à mettre en place échouaient, 

73
00:03:59,998 --> 00:04:02,400
parce que de temps en temps, certains éléments étaient mal interprétés.

74
00:04:03,120 --> 00:04:05,018
La frustration étant le creuset de l'invention, 

75
00:04:05,018 --> 00:04:08,420
il en eut tellement marre qu'il inventa le premier code correcteur d'erreurs au monde.

76
00:04:09,060 --> 00:04:11,719
Il existe de nombreuses façons différentes de formuler les codes de Hamming, 

77
00:04:11,719 --> 00:04:13,791
mais dans un premier temps, nous allons les parcourir de la 

78
00:04:13,791 --> 00:04:15,380
manière dont Hamming lui-même les considérait.

79
00:04:16,519 --> 00:04:20,940
Prenons un exemple simple, mais pas trop simple, un bloc de 16 bits.

80
00:04:21,820 --> 00:04:24,740
Nous numéroterons les positions de ces bits de 0 à 15.

81
00:04:25,620 --> 00:04:29,615
Les données réelles que nous souhaitons stocker ne constitueront que 12 de ces bits, 

82
00:04:29,615 --> 00:04:33,000
tandis que 4 des positions sont réservées comme une sorte de redondance.

83
00:04:33,900 --> 00:04:36,665
Le mot redondant ici ne signifie pas simplement copier, après tout, 

84
00:04:36,665 --> 00:04:40,040
ces 4 bits ne nous laissent pas assez de place pour copier aveuglément les données.

85
00:04:40,720 --> 00:04:44,018
Au lieu de cela, ils devront constituer une sorte de redondance beaucoup plus nuancée et 

86
00:04:44,018 --> 00:04:47,280
intelligente, sans ajouter de nouvelles informations, mais en ajoutant de la résilience.

87
00:04:48,600 --> 00:04:52,063
Vous pourriez vous attendre à ce que ces 4 bits spéciaux soient bien emballés ensemble, 

88
00:04:52,063 --> 00:04:54,936
peut-être à la fin ou quelque chose comme ça, mais comme vous le verrez, 

89
00:04:54,936 --> 00:04:57,534
les placer dans des positions qui sont des puissances de 2 permet 

90
00:04:57,534 --> 00:04:59,620
d'obtenir quelque chose de vraiment élégant à la fin.

91
00:05:00,200 --> 00:05:01,900
Cela pourrait également vous donner un petit indice sur 

92
00:05:01,900 --> 00:05:03,540
la manière dont cela s'adapte à des blocs plus grands.

93
00:05:04,900 --> 00:05:07,730
De plus, techniquement, il ne s'agit que de 11 bits de données, 

94
00:05:07,730 --> 00:05:11,402
vous constaterez qu'il y a une légère nuance pour ce qui se passe à la position 0, 

95
00:05:11,402 --> 00:05:13,260
mais ne vous inquiétez pas pour l'instant.

96
00:05:14,140 --> 00:05:18,157
Comme tout algorithme de correction d'erreurs, celui-ci impliquera deux joueurs, 

97
00:05:18,157 --> 00:05:21,877
un expéditeur chargé de définir ces 4 bits spéciaux et un récepteur chargé 

98
00:05:21,877 --> 00:05:25,200
d'effectuer une sorte de vérification et de correction des erreurs.

99
00:05:25,200 --> 00:05:28,421
Bien sûr, les mots expéditeur et destinataire font en réalité référence à des 

100
00:05:28,421 --> 00:05:31,270
machines ou à des logiciels qui effectuent toutes les vérifications, 

101
00:05:31,270 --> 00:05:34,740
et la notion de message est très large, pour inclure des éléments comme le stockage.

102
00:05:35,340 --> 00:05:38,314
Après tout, stocker des données revient à envoyer un message 

103
00:05:38,314 --> 00:05:41,680
uniquement du passé vers le futur plutôt que d’un endroit à un autre.

104
00:05:42,560 --> 00:05:45,912
Voilà donc la configuration, mais avant de pouvoir plonger dans le vif du sujet, 

105
00:05:45,912 --> 00:05:49,388
nous devons parler d'une idée connexe qui était fraîche dans l'esprit de Hamming au 

106
00:05:49,388 --> 00:05:52,865
moment de sa découverte, une méthode qui vous permet de détecter des erreurs sur un 

107
00:05:52,865 --> 00:05:56,300
seul bit, mais pas de les corriger, connu dans l'entreprise comme chèque de parité.

108
00:05:56,880 --> 00:06:00,327
Pour un contrôle de parité, nous séparons un seul bit que l'expéditeur est 

109
00:06:00,327 --> 00:06:03,820
responsable du réglage, et les autres sont libres de transporter un message.

110
00:06:04,880 --> 00:06:08,021
La seule tâche de ce bit spécial est de s'assurer que 

111
00:06:08,021 --> 00:06:11,280
le nombre total de 1 dans le message est un nombre pair.

112
00:06:12,080 --> 00:06:15,171
Ainsi, par exemple, à l'heure actuelle, ce nombre total de 1 est de 7, 

113
00:06:15,171 --> 00:06:18,784
c'est impair, donc l'expéditeur doit inverser ce bit spécial pour qu'il soit un 1, 

114
00:06:18,784 --> 00:06:19,960
ce qui rend le compte pair.

115
00:06:20,800 --> 00:06:24,056
Mais si le bloc avait déjà commencé avec un nombre pair de 1, 

116
00:06:24,056 --> 00:06:26,420
alors ce bit spécial aurait été maintenu à 0.

117
00:06:27,340 --> 00:06:29,497
C'est assez simple, d'une simplicité trompeuse, 

118
00:06:29,497 --> 00:06:32,644
mais c'est une manière incroyablement élégante de distiller l'idée de 

119
00:06:32,644 --> 00:06:35,791
changement n'importe où dans un message pour la refléter dans un seul 

120
00:06:35,791 --> 00:06:36,780
élément d'information.

121
00:06:37,500 --> 00:06:42,054
Remarquez que si un bit de ce message est inversé, soit de 0 à 1, 

122
00:06:42,054 --> 00:06:46,540
soit de 1 à 0, cela change le nombre total de 1 de pair à impair.

123
00:06:47,980 --> 00:06:51,082
Donc, si vous êtes le destinataire, que vous regardez ce message et que 

124
00:06:51,082 --> 00:06:54,745
vous voyez un nombre impair de 1, vous pouvez être sûr qu'une erreur s'est produite, 

125
00:06:54,745 --> 00:06:57,460
même si vous n'avez aucune idée de l'endroit où elle se trouve.

126
00:06:58,500 --> 00:07:00,871
Dans le jargon, le fait qu'un groupe de bits ait 

127
00:07:00,871 --> 00:07:03,340
un nombre pair ou impair de 1 est appelé sa parité.

128
00:07:04,860 --> 00:07:07,450
Vous pouvez également utiliser des nombres et dire que la parité est de 0 ou 1, 

129
00:07:07,450 --> 00:07:09,489
ce qui est généralement plus utile une fois que vous commencez 

130
00:07:09,489 --> 00:07:10,720
à faire des mathématiques avec l'idée.

131
00:07:11,220 --> 00:07:13,439
Et ce bit spécial que l’expéditeur utilise pour 

132
00:07:13,439 --> 00:07:15,520
contrôler la parité est appelé bit de parité.

133
00:07:17,560 --> 00:07:20,781
Et en fait, soyons clairs, si le récepteur voit une parité impaire, 

134
00:07:20,781 --> 00:07:23,954
cela ne signifie pas nécessairement qu'il y a eu une seule erreur, 

135
00:07:23,954 --> 00:07:28,217
il peut y avoir eu 3 erreurs, ou 5, ou tout autre nombre impair, mais il peut en être sûr.

136
00:07:28,217 --> 00:07:29,260
 que ce n'était pas 0.

137
00:07:29,980 --> 00:07:33,635
D'un autre côté, s'il y avait eu 2 erreurs, ou un nombre pair d'erreurs, 

138
00:07:33,635 --> 00:07:37,792
ce décompte final de 1 serait toujours pair, donc le destinataire ne peut pas être 

139
00:07:37,792 --> 00:07:42,300
pleinement sûr qu'un décompte pair signifie nécessairement que le message est sans erreur.

140
00:07:42,840 --> 00:07:45,742
Vous pourriez vous plaindre qu'un message qui est gâché par 

141
00:07:45,742 --> 00:07:49,080
seulement 2 bits est assez faible, et vous auriez tout à fait raison.

142
00:07:49,700 --> 00:07:52,810
Gardez toutefois à l’esprit qu’il n’existe aucune méthode de détection 

143
00:07:52,810 --> 00:07:55,789
ou de correction des erreurs qui puisse vous donner une certitude à 

144
00:07:55,789 --> 00:07:58,900
100 % que le message que vous recevez est celui prévu par l’expéditeur.

145
00:07:59,580 --> 00:08:02,271
Après tout, suffisamment de bruit aléatoire pourrait toujours 

146
00:08:02,271 --> 00:08:05,440
transformer un message valide en un autre message valide, par pur hasard.

147
00:08:06,240 --> 00:08:10,759
Au lieu de cela, l’objectif est de proposer un système robuste jusqu’à un certain nombre 

148
00:08:10,759 --> 00:08:14,923
maximum d’erreurs, ou peut-être de réduire la probabilité d’un faux positif comme 

149
00:08:14,923 --> 00:08:15,380
celui-ci.

150
00:08:16,260 --> 00:08:18,903
Les contrôles de parité en eux-mêmes sont assez faibles, 

151
00:08:18,903 --> 00:08:22,475
mais en distillant l'idée de changement à travers un message complet jusqu'à 

152
00:08:22,475 --> 00:08:25,954
un seul élément, ils nous fournissent un élément de base puissant pour des 

153
00:08:25,954 --> 00:08:27,160
schémas plus sophistiqués.

154
00:08:27,940 --> 00:08:31,523
Par exemple, alors que Hamming cherchait un moyen d'identifier l'endroit où une erreur 

155
00:08:31,523 --> 00:08:34,200
s'est produite, et pas seulement le fait qu'elle s'est produite, 

156
00:08:34,200 --> 00:08:37,660
son idée clé était que si vous appliquez des contrôles de parité non pas au message 

157
00:08:37,660 --> 00:08:40,461
complet, mais à certains sous-ensembles soigneusement sélectionnés, 

158
00:08:40,461 --> 00:08:44,045
vous pouvez demander une série de questions plus raffinées qui permettent de localiser 

159
00:08:44,045 --> 00:08:45,940
l'emplacement de toute erreur sur un seul bit.

160
00:08:46,680 --> 00:08:49,686
Le sentiment général est un peu comme jouer à un jeu de 20 questions, 

161
00:08:49,686 --> 00:08:53,380
poser des requêtes par oui ou par non qui divisent par deux l’espace des possibilités.

162
00:08:54,160 --> 00:08:58,064
Par exemple, disons que nous effectuons un contrôle de parité uniquement sur ces 8 bits, 

163
00:08:58,064 --> 00:08:59,380
toutes les positions impaires.

164
00:09:00,100 --> 00:09:02,784
Ensuite, si une erreur est détectée, cela donne au récepteur 

165
00:09:02,784 --> 00:09:05,908
un peu plus d'informations sur l'endroit précis où se trouve l'erreur, 

166
00:09:05,908 --> 00:09:08,240
à savoir qu'elle se trouve dans une position étrange.

167
00:09:08,940 --> 00:09:11,264
Si aucune erreur n'est détectée parmi ces 8 bits, 

168
00:09:11,264 --> 00:09:14,798
cela signifie soit qu'il n'y a aucune erreur, soit qu'elle se situe quelque 

169
00:09:14,798 --> 00:09:16,240
part dans les positions paires.

170
00:09:17,180 --> 00:09:20,442
Vous pourriez penser que limiter un contrôle de parité à la moitié des bits le rend 

171
00:09:20,442 --> 00:09:23,860
moins efficace, mais lorsqu'il est effectué en conjonction avec d'autres contrôles bien 

172
00:09:23,860 --> 00:09:27,200
choisis, cela nous donne contre-intuitivement quelque chose de beaucoup plus puissant.

173
00:09:29,240 --> 00:09:31,820
Pour configurer réellement ce contrôle de parité, 

174
00:09:31,820 --> 00:09:35,536
n'oubliez pas qu'il faut réserver un bit spécial qui contrôle la parité 

175
00:09:35,536 --> 00:09:36,620
de ce groupe complet.

176
00:09:37,480 --> 00:09:39,180
Ici, choisissons simplement la position 1.

177
00:09:39,720 --> 00:09:42,904
Pour l'exemple présenté, la parité de ces 8 bits est actuellement impaire, 

178
00:09:42,904 --> 00:09:45,876
donc l'expéditeur est responsable du basculement de ce bit de parité, 

179
00:09:45,876 --> 00:09:46,980
et maintenant il est pair.

180
00:09:47,940 --> 00:09:50,680
Il ne s'agit que d'un contrôle de parité sur quatre que nous effectuerons.

181
00:09:50,920 --> 00:09:54,451
La deuxième vérification se situe parmi les 8 bits sur la moitié droite de la grille, 

182
00:09:54,451 --> 00:09:56,300
du moins telle que nous l'avons dessinée ici.

183
00:09:56,680 --> 00:10:00,241
Cette fois, nous pourrions utiliser la position 2 comme bit de parité, 

184
00:10:00,241 --> 00:10:03,451
donc ces 8 bits ont déjà une parité paire, et l'expéditeur peut 

185
00:10:03,451 --> 00:10:06,060
se sentir bien en laissant ce bit numéro 2 inchangé.

186
00:10:07,020 --> 00:10:11,124
Puis à l'autre bout, si le récepteur vérifie la parité de ce groupe et trouve que 

187
00:10:11,124 --> 00:10:15,380
c'est étrange, il saura que l'erreur se situe quelque part parmi ces 8 bits à droite.

188
00:10:15,820 --> 00:10:18,010
Sinon, cela signifie soit qu'il n'y a pas d'erreur, 

189
00:10:18,010 --> 00:10:20,580
soit que l'erreur se situe quelque part sur la moitié gauche.

190
00:10:21,120 --> 00:10:23,905
Ou je suppose qu'il aurait pu y avoir deux erreurs, mais pour l'instant, 

191
00:10:23,905 --> 00:10:26,500
nous allons supposer qu'il y a au plus une erreur dans tout le bloc.

192
00:10:26,940 --> 00:10:28,740
Les choses s'effondrent complètement pour plus que ça.

193
00:10:29,160 --> 00:10:30,921
Ici, avant d’examiner les deux contrôles suivants, 

194
00:10:30,921 --> 00:10:33,822
prenez un moment pour réfléchir à ce que ces deux premiers nous permettent de faire 

195
00:10:33,822 --> 00:10:35,100
lorsque vous les considérez ensemble.

196
00:10:35,800 --> 00:10:39,660
Disons que vous détectez une erreur parmi les colonnes impaires et parmi la moitié droite.

197
00:10:40,200 --> 00:10:43,040
Cela signifie nécessairement que l'erreur se situe quelque part dans la dernière colonne.

198
00:10:43,820 --> 00:10:46,740
S'il n'y a pas d'erreur dans la colonne impaire mais qu'il y en a une dans 

199
00:10:46,740 --> 00:10:49,700
la moitié droite, cela vous indique que c'est dans l'avant-dernière colonne.

200
00:10:50,440 --> 00:10:53,914
De même, s'il y a une erreur dans les colonnes impaires mais pas dans la moitié droite, 

201
00:10:53,914 --> 00:10:56,560
vous savez qu'elle se trouve quelque part dans la deuxième colonne.

202
00:10:56,560 --> 00:10:59,250
Et si aucun de ces deux contrôles de parité ne détecte quoi que ce soit, 

203
00:10:59,250 --> 00:11:02,493
cela signifie que le seul endroit où une erreur pourrait se trouver est dans la colonne 

204
00:11:02,493 --> 00:11:03,120
la plus à gauche.

205
00:11:03,340 --> 00:11:06,120
Mais cela peut aussi simplement signifier qu’il n’y a aucune erreur.

206
00:11:06,300 --> 00:11:08,549
Ce qui est une façon un peu compliquée de dire que deux 

207
00:11:08,549 --> 00:11:10,840
contrôles de parité nous permettent de cerner la colonne.

208
00:11:11,480 --> 00:11:13,640
À partir de là, vous pouvez probablement deviner ce qui suit.

209
00:11:13,800 --> 00:11:16,140
Nous faisons essentiellement la même chose mais pour les lignes.

210
00:11:16,440 --> 00:11:18,884
Il y aura un contrôle de parité sur les lignes impaires, 

211
00:11:18,884 --> 00:11:20,900
en utilisant la position 4 comme bit de parité.

212
00:11:21,380 --> 00:11:24,214
Ainsi, dans cet exemple, ce groupe a déjà une parité paire, 

213
00:11:24,214 --> 00:11:25,820
donc le bit 4 serait défini sur 0.

214
00:11:26,560 --> 00:11:29,528
Et enfin, il y a un contrôle de parité sur les deux rangées du bas, 

215
00:11:29,528 --> 00:11:31,580
en utilisant la position 8 comme bit de parité.

216
00:11:32,120 --> 00:11:34,537
Dans ce cas, il semble que l'expéditeur doive activer 

217
00:11:34,537 --> 00:11:36,820
ce bit 8 afin de donner au groupe une parité égale.

218
00:11:37,700 --> 00:11:40,196
Tout comme les deux premières vérifications nous permettent de cerner la colonne, 

219
00:11:40,196 --> 00:11:41,840
les deux suivantes vous permettent de cerner la ligne.

220
00:11:42,880 --> 00:11:45,536
À titre d'exemple, imaginez que lors de la transmission, 

221
00:11:45,536 --> 00:11:47,540
il y ait une erreur, disons, en position 3.

222
00:11:48,180 --> 00:11:50,130
Eh bien, cela affecte le premier groupe de parité, 

223
00:11:50,130 --> 00:11:52,271
et cela affecte également le deuxième groupe de parité, 

224
00:11:52,271 --> 00:11:55,560
donc le récepteur sait qu'il y a une erreur quelque part dans cette colonne de droite.

225
00:11:56,100 --> 00:12:00,540
Mais cela n’affecte pas le troisième groupe, ni le quatrième groupe.

226
00:12:01,240 --> 00:12:04,319
Et cela permet au récepteur de localiser l'erreur jusqu'à la première ligne, 

227
00:12:04,319 --> 00:12:07,520
ce qui signifie nécessairement la position 3, afin de pouvoir corriger l'erreur.

228
00:12:08,580 --> 00:12:11,331
Vous aimerez peut-être prendre un moment pour vous convaincre 

229
00:12:11,331 --> 00:12:14,260
que les réponses à ces quatre questions vous permettront toujours 

230
00:12:14,260 --> 00:12:17,100
de localiser un endroit spécifique, peu importe où il se trouve.

231
00:12:17,720 --> 00:12:20,568
En fait, les plus astucieux d’entre vous remarqueront peut-être 

232
00:12:20,568 --> 00:12:23,060
même un lien entre ces questions et le comptage binaire.

233
00:12:23,500 --> 00:12:25,977
Et si c’est le cas, permettez-moi encore une fois de souligner, 

234
00:12:25,977 --> 00:12:28,920
faites une pause, essayez par vous-même de faire le lien avant de le gâcher.

235
00:12:30,500 --> 00:12:34,436
Si vous vous demandez ce qui se passe si un bit de parité lui-même est affecté, 

236
00:12:34,436 --> 00:12:36,060
vous pouvez simplement l'essayer.

237
00:12:36,440 --> 00:12:39,119
Prenez un moment pour réfléchir à la manière dont toute erreur 

238
00:12:39,119 --> 00:12:42,478
parmi ces quatre éléments spéciaux sera détectée comme n'importe quelle autre, 

239
00:12:42,478 --> 00:12:44,180
avec le même groupe de quatre questions.

240
00:12:47,060 --> 00:12:49,990
Cela n'a pas vraiment d'importance, puisqu'en fin de compte, ce que nous voulons, 

241
00:12:49,990 --> 00:12:53,100
c'est protéger les bits de message, les bits de correction d'erreur ne font que suivre.

242
00:12:53,600 --> 00:12:55,587
Mais la protection de ces éléments est également quelque 

243
00:12:55,587 --> 00:12:57,820
chose qui sort naturellement du schéma en tant que sous-produit.

244
00:12:59,200 --> 00:13:01,760
Vous pourriez également aimer anticiper l’évolution de cette situation.

245
00:13:02,300 --> 00:13:06,531
Si nous utilisons un bloc de 256 bits, par exemple, afin de localiser un emplacement, 

246
00:13:06,531 --> 00:13:10,221
vous n'avez besoin que de huit questions par oui ou par non pour effectuer 

247
00:13:10,221 --> 00:13:12,780
une recherche binaire jusqu'à un endroit spécifique.

248
00:13:15,640 --> 00:13:18,069
Et rappelez-vous que chaque question nécessite de renoncer 

249
00:13:18,069 --> 00:13:20,500
à un seul bit pour définir le contrôle de parité approprié.

250
00:13:23,160 --> 00:13:24,841
Certains d'entre vous le voient peut-être déjà, 

251
00:13:24,841 --> 00:13:27,888
mais nous parlerons plus tard de la manière systématique de découvrir quelles sont ces 

252
00:13:27,888 --> 00:13:29,360
questions en seulement une minute ou deux.

253
00:13:29,880 --> 00:13:31,487
Espérons que cette esquisse soit suffisante pour 

254
00:13:31,487 --> 00:13:33,260
apprécier l’efficacité de ce que nous développons ici.

255
00:13:33,260 --> 00:13:37,353
La première chose, à l'exception de ces huit bits de parité en surbrillance, 

256
00:13:37,353 --> 00:13:41,820
peut être ce que vous voulez, transportant le message ou les données de votre choix.

257
00:13:41,820 --> 00:13:44,367
Les 8 bits sont redondants dans le sens où ils sont entièrement 

258
00:13:44,367 --> 00:13:47,153
déterminés par le reste du message, mais c'est d'une manière beaucoup 

259
00:13:47,153 --> 00:13:50,020
plus intelligente que de simplement copier le message dans son ensemble.

260
00:13:53,600 --> 00:13:55,800
Et pourtant, pour si peu d’abandon, vous seriez en mesure 

261
00:13:55,800 --> 00:13:58,380
d’identifier et de corriger n’importe quelle erreur sur un seul bit.

262
00:13:59,200 --> 00:14:00,400
Enfin presque.

263
00:14:00,960 --> 00:14:04,817
D'accord, le seul problème ici est que si aucun des quatre contrôles de parité ne 

264
00:14:04,817 --> 00:14:08,674
détecte une erreur, ce qui signifie que les sous-ensembles de 8 bits spécialement 

265
00:14:08,674 --> 00:14:12,344
sélectionnés ont tous des parités paires, tout comme l'expéditeur le voulait, 

266
00:14:12,344 --> 00:14:15,166
alors cela signifie qu'il n'y a eu aucune erreur du tout. , 

267
00:14:15,166 --> 00:14:16,860
ou cela nous réduit à la position 0.

268
00:14:17,740 --> 00:14:20,470
Vous voyez, avec quatre questions par oui ou par non, 

269
00:14:20,470 --> 00:14:23,707
nous avons 16 résultats possibles pour nos contrôles de parité, 

270
00:14:23,707 --> 00:14:27,753
et au début cela semble parfait pour identifier 1 position sur 16 dans le bloc, 

271
00:14:27,753 --> 00:14:31,900
mais vous devez également communiquer un 17ème résultat, le non erreur. condition.

272
00:14:33,020 --> 00:14:37,300
La solution ici est en fait assez simple, oubliez complètement ce 0ème bit.

273
00:14:37,840 --> 00:14:40,770
Ainsi, lorsque nous effectuons nos quatre contrôles de parité et que nous constatons 

274
00:14:40,770 --> 00:14:43,460
qu’ils sont tous égaux, cela signifie sans ambiguïté qu’il n’y a pas d’erreur.

275
00:14:44,240 --> 00:14:47,189
Cela signifie que plutôt que de travailler avec un bloc de 16 bits, 

276
00:14:47,189 --> 00:14:50,183
nous travaillons avec un bloc de 15 bits, où 11 des bits sont libres 

277
00:14:50,183 --> 00:14:53,220
de transporter un message et 4 d'entre eux sont là pour la redondance.

278
00:14:53,780 --> 00:14:57,052
Et avec cela, nous avons maintenant ce que les gens 

279
00:14:57,052 --> 00:15:00,200
du secteur appelleraient un code de Hamming 15-11.

280
00:15:00,460 --> 00:15:03,569
Cela dit, c'est bien d'avoir une taille de bloc qui est une puissance propre de 2, 

281
00:15:03,569 --> 00:15:06,079
et il existe un moyen astucieux de conserver ce 0ème bit et de lui 

282
00:15:06,079 --> 00:15:08,140
faire faire un peu de travail supplémentaire pour nous.

283
00:15:08,700 --> 00:15:11,580
Si nous l'utilisons comme bit de parité sur l'ensemble du bloc, 

284
00:15:11,580 --> 00:15:15,540
il nous permet de détecter, même si nous ne pouvons pas corriger, les erreurs de 2 bits.

285
00:15:16,160 --> 00:15:16,820
Voici comment cela fonctionne.

286
00:15:17,180 --> 00:15:20,074
Après avoir défini ces quatre bits spéciaux de correction d'erreurs, 

287
00:15:20,074 --> 00:15:23,262
nous définissons ce 0ème de sorte que la parité du bloc complet soit paire, 

288
00:15:23,262 --> 00:15:24,940
tout comme un contrôle de parité normal.

289
00:15:25,700 --> 00:15:27,748
Maintenant, s'il y a une erreur sur un seul bit, 

290
00:15:27,748 --> 00:15:29,796
alors la parité du bloc complet devient impaire, 

291
00:15:29,796 --> 00:15:32,220
mais nous la détecterions de toute façon grâce aux quatre 

292
00:15:32,220 --> 00:15:33,600
contrôles de correction d'erreur.

293
00:15:34,160 --> 00:15:38,279
Cependant, s'il y a deux erreurs, alors la parité globale redeviendra paire, 

294
00:15:38,279 --> 00:15:41,916
mais le récepteur verra toujours qu'il y a eu au moins une erreur à 

295
00:15:41,916 --> 00:15:45,180
cause de ce qui se passe avec ces quatre contrôles de parité.

296
00:15:45,180 --> 00:15:47,328
Ainsi, s’ils remarquent une parité globale égale, 

297
00:15:47,328 --> 00:15:50,422
mais que quelque chose de non nul se produit avec les autres contrôles, 

298
00:15:50,422 --> 00:15:52,700
cela leur indique qu’il y a eu au moins deux erreurs.

299
00:15:53,520 --> 00:15:54,000
N'est-ce pas intelligent?

300
00:15:54,300 --> 00:15:57,065
Même si nous ne pouvons pas corriger ces erreurs de 2 bits, 

301
00:15:57,065 --> 00:15:59,738
simplement en remettant au travail ce petit bit 0 gênant, 

302
00:15:59,738 --> 00:16:01,260
cela nous permet de les détecter.

303
00:16:02,260 --> 00:16:05,220
C'est assez standard, c'est ce qu'on appelle un code de Hamming étendu.

304
00:16:06,540 --> 00:16:09,731
Techniquement parlant, vous avez maintenant une description complète de ce 

305
00:16:09,731 --> 00:16:12,880
que fait un code de Hamming, du moins pour l'exemple d'un bloc de 16 bits.

306
00:16:12,880 --> 00:16:17,076
Mais je pense que vous trouverez plus satisfaisant de vérifier votre compréhension et de 

307
00:16:17,076 --> 00:16:21,320
tout consolider jusqu'à présent en faisant vous-même un exemple complet du début à la fin.

308
00:16:22,080 --> 00:16:24,300
Je vais cependant le parcourir avec vous afin que vous puissiez vérifier par vous-même.

309
00:16:25,120 --> 00:16:28,343
Pour configurer un message, qu'il s'agisse d'un message littéral que vous 

310
00:16:28,343 --> 00:16:31,915
traduisez dans l'espace ou de données que vous souhaitez stocker au fil du temps, 

311
00:16:31,915 --> 00:16:34,660
la première étape consiste à le diviser en morceaux de 11 bits.

312
00:16:35,580 --> 00:16:39,760
Chaque morceau sera regroupé dans un bloc de 16 bits résistant aux erreurs.

313
00:16:39,760 --> 00:16:43,220
Prenons donc celui-ci comme exemple et résolvons-le réellement.

314
00:16:43,740 --> 00:16:44,740
Allez-y, faites-le!

315
00:16:44,740 --> 00:16:47,020
Faisons une pause et essayons de constituer ce bloc.

316
00:16:52,720 --> 00:16:53,680
OK, tu es prêt?

317
00:16:54,240 --> 00:16:57,237
N'oubliez pas que la position 0 ainsi que les autres puissances de 2 

318
00:16:57,237 --> 00:17:00,105
sont réservées à la correction d'erreurs. Vous commencez donc par 

319
00:17:00,105 --> 00:17:03,320
placer les bits de message à tous les emplacements restants, dans l'ordre.

320
00:17:05,339 --> 00:17:08,773
Vous avez besoin que ce groupe ait une parité paire, ce qui est déjà le cas, 

321
00:17:08,773 --> 00:17:12,339
vous devriez donc avoir défini ce bit de parité en position 1 pour qu'il soit 0.

322
00:17:13,020 --> 00:17:15,450
Le groupe suivant commence avec une parité impaire, 

323
00:17:15,450 --> 00:17:17,880
vous auriez donc dû définir son bit de parité sur 1.

324
00:17:19,160 --> 00:17:21,398
Le groupe suivant commence avec une parité impaire, 

325
00:17:21,398 --> 00:17:24,240
vous devriez donc encore une fois définir son bit de parité sur 1.

326
00:17:24,780 --> 00:17:26,969
Et le groupe final a également une parité impaire, 

327
00:17:26,969 --> 00:17:30,060
ce qui signifie que nous mettons ce bit en position 8 pour qu'il soit 1.

328
00:17:31,300 --> 00:17:35,538
Et puis, comme dernière étape, le bloc complet a maintenant une parité paire, 

329
00:17:35,538 --> 00:17:40,320
ce qui signifie que vous pouvez définir ce bit numéro 0, le bit de parité global, sur 0.

330
00:17:41,340 --> 00:17:45,111
Ainsi, lorsque ce bloc est envoyé, la parité des quatre sous-ensembles 

331
00:17:45,111 --> 00:17:48,140
spéciaux et du bloc dans son ensemble sera paire, soit 0.

332
00:17:48,820 --> 00:17:52,180
Dans la deuxième partie de l'exercice, nous vous ferons jouer le rôle du récepteur.

333
00:17:53,480 --> 00:17:56,367
Bien sûr, cela voudrait dire que vous ne savez pas déjà quel est ce message, 

334
00:17:56,367 --> 00:17:58,317
peut-être que certains d'entre vous l'ont mémorisé, 

335
00:17:58,317 --> 00:17:59,780
mais supposons que ce n'est pas le cas.

336
00:18:00,020 --> 00:18:04,440
Ce que je vais faire, c'est changer 0, 1 ou 2 des bits de ce bloc, 

337
00:18:04,440 --> 00:18:07,740
puis vous demander de comprendre ce que j'ai fait.

338
00:18:08,260 --> 00:18:10,810
Encore une fois, faites une pause et essayez de trouver une solution.

339
00:18:18,790 --> 00:18:21,814
D'accord, donc en tant que récepteur, vous vérifiez maintenant 

340
00:18:21,814 --> 00:18:24,886
le premier groupe de parité et vous pouvez voir qu'il est pair, 

341
00:18:24,886 --> 00:18:27,910
donc toute erreur existant devrait être dans une colonne paire.

342
00:18:29,690 --> 00:18:32,280
La vérification suivante nous donne un nombre impair, 

343
00:18:32,280 --> 00:18:35,830
nous indiquant à la fois qu'il y a au moins une erreur et nous limitant à 

344
00:18:35,830 --> 00:18:37,030
cette colonne spécifique.

345
00:18:38,550 --> 00:18:41,790
Le troisième contrôle est égal, réduisant encore plus les possibilités.

346
00:18:42,650 --> 00:18:45,967
Et le dernier contrôle de parité est étrange, nous indiquant qu'il y a une erreur 

347
00:18:45,967 --> 00:18:48,355
quelque part en bas, qui, nous pouvons maintenant le voir, 

348
00:18:48,355 --> 00:18:49,650
doit être en position numéro 10.

349
00:18:51,490 --> 00:18:54,099
De plus, la parité de l'ensemble du bloc est étrange, 

350
00:18:54,099 --> 00:18:57,530
ce qui nous donne l'assurance qu'il y a eu un retournement et non deux.

351
00:18:58,070 --> 00:18:59,970
S'il y en a trois ou plus, tous les paris sont ouverts.

352
00:19:01,310 --> 00:19:05,553
Après avoir corrigé ce bit numéro 10, retirer les 11 bits qui n'ont pas été utilisés 

353
00:19:05,553 --> 00:19:09,447
pour la correction nous donne le segment pertinent du message d'origine, qui, 

354
00:19:09,447 --> 00:19:13,890
si vous rembobinez et comparez, est en effet exactement ce avec quoi nous avons commencé 

355
00:19:13,890 --> 00:19:14,390
l'exemple.

356
00:19:15,710 --> 00:19:18,422
Et maintenant que vous savez comment faire tout cela à la main, 

357
00:19:18,422 --> 00:19:22,025
j'aimerais vous montrer comment réaliser l'essentiel de toute cette logique avec une 

358
00:19:22,025 --> 00:19:23,170
seule ligne de code Python.

359
00:19:23,870 --> 00:19:25,845
Vous voyez, ce que je ne vous ai pas encore dit, 

360
00:19:25,845 --> 00:19:27,741
c'est à quel point cet algorithme est élégant, 

361
00:19:27,741 --> 00:19:31,249
à quel point il est simple de faire pointer une machine vers la position d'une erreur, 

362
00:19:31,249 --> 00:19:34,112
comment la mettre à l'échelle systématiquement et comment nous pouvons 

363
00:19:34,112 --> 00:19:36,975
encadrer l'ensemble des erreurs. ceci comme une seule opération plutôt 

364
00:19:36,975 --> 00:19:38,750
que plusieurs contrôles de parité distincts.

365
00:19:39,430 --> 00:19:41,310
Pour voir ce que je veux dire, venez me rejoindre dans la partie 2.

