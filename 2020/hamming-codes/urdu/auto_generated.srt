1
00:00:00,000 --> 00:00:08,620
کیا آپ نے کبھی سوچا ہے کہ کسی سی ڈی یا ڈی وی ڈی کو سکریچ کرنا کیسے ممکن

2
00:00:08,620 --> 00:00:10,900
ہے اور پھر بھی اسے جو کچھ بھی اسٹور کیا جا رہا ہے اسے پلے بیک کرنا ہے؟

3
00:00:10,900 --> 00:00:15,280
سکریچ واقعی ڈسک پر موجود 1s اور 0s کو متاثر کرتی ہے، اس لیے یہ ذخیرہ کیے

4
00:00:15,280 --> 00:00:20,500
گئے ڈیٹا سے مختلف ڈیٹا کو پڑھتا ہے، لیکن جب تک اسے واقعی سکریچ نہ کیا

5
00:00:20,500 --> 00:00:26,540
جائے، اس کے پڑھنے والے بٹس کو بالکل اسی فائل میں ڈی کوڈ کیا جاتا ہے

6
00:00:26,540 --> 00:00:28,400
جو اس پر انکوڈ کی گئی تھی۔ ان تمام غلطیوں کے باوجود بٹ برائے بٹ کاپی۔

7
00:00:28,400 --> 00:00:32,800
ریاضی کی ہوشیاری کا ایک پورا ڈھیر ہے جو ہمیں ڈیٹا کو ذخیرہ کرنے کی اجازت دیتا ہے، اور بالکل اسی

8
00:00:32,800 --> 00:00:36,840
طرح اہم بات یہ ہے کہ ڈیٹا کو منتقل کرنے کے لیے، اس طریقے سے جو غلطیوں کے لیے لچکدار ہو۔

9
00:00:36,840 --> 00:00:41,480
ٹھیک ہے، ٹھیک ہے، درحقیقت ایسا کرنے کا کوئی

10
00:00:41,480 --> 00:00:42,480
طریقہ نکالنے میں اتنی چالاکی کی ضرورت نہیں ہے۔

11
00:00:42,480 --> 00:00:47,660
کوئی بھی فائل، چاہے وہ ویڈیو ہو یا آواز یا ٹیکسٹ، کچھ کوڈ، کوئی

12
00:00:47,660 --> 00:00:50,960
تصویر، جو بھی ہو، بالآخر 1s اور 0s کی کچھ ترتیب ہوتی ہے۔

13
00:00:50,960 --> 00:00:55,340
اور پلٹ جانے والے کسی بھی بٹ کو درست کرنے کی ایک سادہ

14
00:00:55,340 --> 00:00:57,780
حکمت عملی یہ ہوگی کہ ہر بٹ کی تین کاپیاں اسٹور کی جائیں۔

15
00:00:57,780 --> 00:01:02,240
پھر اس فائل کو پڑھنے والی مشین ان تین کاپیوں کا موازنہ کر سکتی ہے اور

16
00:01:02,240 --> 00:01:07,440
جب بھی کوئی تضاد ہو تو ہمیشہ 3 میں سے بہترین 2 لے سکتی ہے۔

17
00:01:07,440 --> 00:01:11,560
لیکن اس کا مطلب یہ ہے کہ آپ کی جگہ کا دو تہائی فالتو پن کے لیے استعمال کرنا ہے۔

18
00:01:11,560 --> 00:01:15,360
اور پھر بھی، اس ساری جگہ کے لیے، اس بات کی کوئی مضبوط گارنٹی

19
00:01:15,360 --> 00:01:18,120
نہیں ہے کہ اگر ایک سے زیادہ بٹ پلٹ جائیں تو کیا ہوتا ہے۔

20
00:01:18,120 --> 00:01:21,960
زیادہ دلچسپ سوال یہ ہے کہ اسے کیسے بنایا جائے تاکہ کم

21
00:01:21,960 --> 00:01:24,740
سے کم جگہ چھوڑتے ہوئے غلطیوں کو درست کیا جا سکے۔

22
00:01:24,740 --> 00:01:28,500
مثال کے طور پر، اس ویڈیو کے بارے میں جو طریقہ آپ سیکھیں گے اس کو استعمال کرتے ہوئے، آپ اپنا ڈیٹا 256 بٹ بلاکس

23
00:01:28,500 --> 00:01:35,840
میں محفوظ کر سکتے ہیں، جہاں ہر بلاک 9 بٹس استعمال کرتا ہے، 9! ایک قسم کی فالتو پن کے طور پر کام

24
00:01:35,840 --> 00:01:41,000
کرنے کے لیے، اور دیگر 247 بٹس جو بھی بامعنی پیغام یا ڈیٹا آپ چاہتے ہیں لے جانے کے لیے آزاد ہیں۔

25
00:01:41,000 --> 00:01:44,740
اور پھر بھی یہ صورت رہے گی کہ اگر یہاں کوئی بٹ پلٹ جائے تو صرف اس

26
00:01:44,740 --> 00:01:49,640
بلاک کو دیکھ کر اور کچھ نہیں، ایک مشین اس بات کی نشاندہی کر سکے گی کہ

27
00:01:49,640 --> 00:01:53,120
غلطی کہاں تھی اور ٹھیک کہاں تھی تاکہ اسے درست کرنے کا طریقہ معلوم ہو جائے۔ .

28
00:01:53,140 --> 00:01:55,540
اور ایمانداری سے، یہ جادو کی طرح محسوس ہوتا ہے.

29
00:01:55,540 --> 00:01:59,400
اور اس مخصوص اسکیم کے لیے، اگر دو بٹس پلٹ جاتے ہیں، تو مشین کم از کم اس بات کا پتہ لگانے

30
00:01:59,400 --> 00:02:03,180
کے قابل ہو جائے گی کہ دو خرابیاں تھیں، حالانکہ اسے یہ نہیں معلوم ہوگا کہ انہیں کیسے ٹھیک کیا جائے۔

31
00:02:03,180 --> 00:02:08,140
ہم تھوڑی دیر بعد اس بارے میں بات کریں گے کہ یہ مختلف سائز والے بلاکس کے لیے کیسے پیمانہ بناتا ہے۔

32
00:02:08,140 --> 00:02:12,620
وہ طریقے جو آپ کو اس طرح کی غلطیوں کو درست کرنے دیتے ہیں، کافی

33
00:02:12,620 --> 00:02:13,880
حد تک، غلطی کو درست کرنے والے کوڈز کے طور پر جانا جاتا ہے۔

34
00:02:13,880 --> 00:02:18,220
پچھلی صدی کے بہتر حصے کے لیے، یہ فیلڈ حیرت انگیز طور پر گہری ریاضی کا ایک بہت بڑا

35
00:02:18,220 --> 00:02:23,000
ذریعہ رہا ہے جو ان آلات میں شامل ہو جاتا ہے جنہیں ہم ہر روز استعمال کرتے ہیں۔

36
00:02:23,000 --> 00:02:27,740
یہاں مقصد یہ ہے کہ آپ کو ابتدائی مثالوں میں سے ایک، جسے ہیمنگ

37
00:02:27,740 --> 00:02:29,660
کوڈ کے نام سے جانا جاتا ہے، کی مکمل تفہیم فراہم کی جائے۔

38
00:02:29,660 --> 00:02:32,620
اور ویسے، میں اس ویڈیو کی ساخت کے بارے میں جس طرح سے سوچ رہا ہوں، اس

39
00:02:32,620 --> 00:02:37,060
کی براہ راست وضاحت کرنے کے بارے میں کم ہے، اور یہاں اور وہاں تھوڑی سی نرم

40
00:02:37,060 --> 00:02:40,220
رہنمائی کے ساتھ، آپ کو اپنے لیے اسے ایجاد کرنے کی ترغیب دینے کا معاملہ ہے۔

41
00:02:40,220 --> 00:02:44,100
لہذا جب آپ کو لگتا ہے کہ آپ دیکھتے ہیں کہ یہ کسی وقت کہاں جا رہا ہے، تو اس لمحے کو توقف

42
00:02:44,100 --> 00:02:47,180
کریں، فعال طور پر پیش گوئی کریں کہ اس سے پہلے کہ میں آپ کو بتاؤں کہ اسکیم کیا ہونے والی ہے۔

43
00:02:47,180 --> 00:02:51,500
اس کے علاوہ، اگر آپ چاہتے ہیں کہ آپ کی سمجھ بوجھ ہارڈ ویئر کی سطح تک پہنچ جائے، تو

44
00:02:51,500 --> 00:02:55,160
بین ایٹر نے اس کے ساتھ مل کر ایک ویڈیو بنائی ہے جس میں آپ کو دکھایا گیا ہے

45
00:02:55,160 --> 00:02:59,520
کہ بریڈ بورڈز پر ہیمنگ کوڈز کو حقیقت میں کیسے نافذ کیا جائے، جو کہ انتہائی اطمینان بخش ہے۔

46
00:02:59,520 --> 00:03:03,120
آپ کو معلوم ہونا چاہیے، ہیمنگ کوڈز زیادہ جدید کوڈز کی طرح وسیع پیمانے پر استعمال نہیں کیے جاتے

47
00:03:03,120 --> 00:03:08,040
ہیں، جیسا کہ ریڈ-سلومن الگورتھم، لیکن اس کام کے آغاز میں کتنا ناممکن محسوس ہوتا ہے، اور یہ ایک

48
00:03:08,040 --> 00:03:14,240
بار کتنا معقول لگتا ہے اس کے برعکس ایک خاص جادو ہے۔ آپ ہیمنگ کے بارے میں سیکھتے ہیں۔

49
00:03:14,240 --> 00:03:19,080
غلطی کی تصحیح کا بنیادی اصول یہ ہے کہ تمام ممکنہ پیغامات کی ایک

50
00:03:19,300 --> 00:03:22,860
وسیع جگہ میں، صرف کچھ ذیلی سیٹ کو درست پیغامات سمجھا جائے گا۔

51
00:03:22,860 --> 00:03:29,100
تشبیہ کے طور پر، صحیح ہجے والے الفاظ بمقابلہ غلط ہجے والے الفاظ کے بارے میں سوچیں۔

52
00:03:29,100 --> 00:03:33,340
جب بھی کسی درست پیغام میں ردوبدل کیا جاتا ہے، وصول کنندہ کی ذمہ داری ہے کہ وہ اسے درست کرے

53
00:03:33,340 --> 00:03:38,380
جو وہ قریب ترین درست پڑوسی کو دیکھتا ہے، جیسا کہ آپ ٹائپنگ کی غلطی کے ساتھ کر سکتے ہیں۔

54
00:03:38,380 --> 00:03:43,100
اس طرح کے پیغامات کو مؤثر طریقے سے درجہ بندی کرنے کے لیے

55
00:03:43,100 --> 00:03:47,160
ایک ٹھوس الگورتھم کے ساتھ آنا، اگرچہ، ایک خاص ہوشیاری کی ضرورت ہے۔

56
00:03:47,160 --> 00:03:52,060
کہانی 1940 کی دہائی میں شروع ہوتی ہے، جب ایک نوجوان رچرڈ ہیمنگ بیل لیبز

57
00:03:52,060 --> 00:03:55,900
کے لیے کام کر رہا تھا، اور اس کے کچھ کاموں میں ایک بہت بڑا

58
00:03:55,900 --> 00:03:57,420
مہنگا پنچ کارڈ کمپیوٹر استعمال کرنا شامل تھا جس تک اس کی رسائی محدود تھی۔

59
00:03:57,420 --> 00:04:01,200
اور جو پروگرام وہ اس کے ذریعے ڈالتے رہے وہ ناکام ہوتے

60
00:04:01,200 --> 00:04:03,140
رہے، کیونکہ ہر وقت اور پھر تھوڑا سا غلط پڑھا جاتا تھا۔

61
00:04:03,140 --> 00:04:07,140
فرسٹریشن ایجاد کا سنگ میل ہونے کی وجہ سے وہ اتنا تنگ آ گیا

62
00:04:07,140 --> 00:04:09,280
کہ اس نے دنیا کا پہلا غلطی کو درست کرنے والا کوڈ ایجاد کیا۔

63
00:04:09,280 --> 00:04:13,020
ہیمنگ کوڈز کو فریم کرنے کے بہت سے مختلف طریقے ہیں، لیکن پہلے پاس کے طور پر

64
00:04:13,020 --> 00:04:16,620
ہم اس سے گزریں گے جس طرح سے ہیمنگ نے خود ان کے بارے میں سوچا تھا۔

65
00:04:16,620 --> 00:04:21,400
آئیے ایک مثال استعمال کرتے ہیں جو سادہ ہے، لیکن بہت آسان نہیں، 16 بٹس کا ایک بلاک۔

66
00:04:21,400 --> 00:04:25,700
ہم ان بٹس کی پوزیشن کو 0 سے 15 تک نمبر دیں گے۔

67
00:04:25,700 --> 00:04:30,520
اصل ڈیٹا جو ہم ذخیرہ کرنا چاہتے ہیں وہ ان بٹس میں سے صرف 12 پر

68
00:04:30,520 --> 00:04:33,920
مشتمل ہے، جبکہ 4 پوزیشنیں ایک قسم کی فالتو پن کے طور پر محفوظ ہیں۔

69
00:04:33,920 --> 00:04:38,120
یہاں فالتو لفظ کا مطلب صرف کاپی نہیں ہے، آخر کار، وہ 4 بٹس

70
00:04:38,120 --> 00:04:40,200
ہمیں اتنی گنجائش نہیں دیتے کہ ڈیٹا کو آنکھیں بند کرکے کاپی کر سکیں۔

71
00:04:40,200 --> 00:04:44,880
اس کے بجائے، انہیں بہت زیادہ نفیس اور ہوشیار قسم کی فالتو پن کی

72
00:04:44,880 --> 00:04:48,740
ضرورت ہوگی، کوئی نئی معلومات شامل نہیں کرنا، بلکہ لچک کا اضافہ کرنا ہوگا۔

73
00:04:48,740 --> 00:04:52,620
آپ توقع کر سکتے ہیں کہ یہ 4 خصوصی بٹس اچھی طرح سے ایک ساتھ پیک کیے جائیں گے، شاید

74
00:04:52,620 --> 00:04:56,400
آخر میں یا اس طرح کی کوئی چیز، لیکن جیسا کہ آپ دیکھیں گے، ان کو پوزیشنوں پر بیٹھنے

75
00:04:56,400 --> 00:05:00,320
سے جو کہ 2 کی طاقتیں ہیں آخر تک ایسی چیز کی اجازت دیتی ہے جو واقعی خوبصورت ہو۔

76
00:05:00,320 --> 00:05:05,420
یہ آپ کو اس بارے میں تھوڑا سا اشارہ بھی دے سکتا ہے کہ یہ بڑے بلاکس کے لیے کس طرح ترازو کرتا ہے۔

77
00:05:05,420 --> 00:05:09,220
نیز تکنیکی طور پر یہ صرف 11 بٹس ڈیٹا پر ختم ہوتا ہے، آپ کو معلوم ہوگا کہ پوزیشن 0

78
00:05:09,220 --> 00:05:14,260
پر کیا ہوتا ہے اس کے لیے ایک ہلکی اہمیت ہے، لیکن فی الحال اس کی فکر نہ کریں۔

79
00:05:14,280 --> 00:05:18,640
کسی بھی غلطی کو درست کرنے والے الگورتھم کی طرح، اس میں دو کھلاڑی شامل ہوں گے، ایک

80
00:05:18,640 --> 00:05:23,200
بھیجنے والا جو ان 4 خصوصی بٹس کو ترتیب دینے کا ذمہ دار ہے، اور ایک وصول

81
00:05:23,200 --> 00:05:26,360
کنندہ جو کسی قسم کی جانچ پڑتال کرنے اور غلطیوں کو درست کرنے کا ذمہ دار ہے۔

82
00:05:26,360 --> 00:05:30,040
بلاشبہ، بھیجنے والے اور وصول کنندہ کے الفاظ واقعی ان مشینوں یا سافٹ ویئر

83
00:05:30,040 --> 00:05:34,040
کا حوالہ دیتے ہیں جو تمام چیک کر رہے ہیں، اور پیغام کے خیال

84
00:05:34,040 --> 00:05:35,480
کا مطلب واقعی وسیع پیمانے پر ہے، اسٹوریج جیسی چیزوں کو شامل کرنا۔

85
00:05:35,480 --> 00:05:39,320
بہر حال، ڈیٹا کو ذخیرہ کرنا وہی چیز ہے جو ایک جگہ

86
00:05:39,320 --> 00:05:42,640
سے دوسری جگہ کی بجائے ماضی سے مستقبل کو پیغام بھیجنا ہے۔

87
00:05:42,640 --> 00:05:46,700
تو یہ سیٹ اپ ہے، لیکن اس سے پہلے کہ ہم اس میں غوطہ لگا سکیں ہمیں ایک متعلقہ

88
00:05:46,700 --> 00:05:51,080
آئیڈیا کے بارے میں بات کرنے کی ضرورت ہے جو ہیمنگ کے ذہن میں اس کی دریافت کے

89
00:05:51,080 --> 00:05:55,520
وقت تازہ تھا، ایک ایسا طریقہ جو آپ کو کسی بھی چھوٹی غلطی کا پتہ لگانے دیتا ہے،

90
00:05:55,520 --> 00:05:57,300
لیکن ان کو درست کرنے کے لیے نہیں، معلوم ہے۔ کاروبار میں برابری کی جانچ کے طور پر۔

91
00:05:57,300 --> 00:06:01,300
برابری کی جانچ کے لیے، ہم صرف ایک ہی بٹ کو الگ کرتے ہیں کہ بھیجنے

92
00:06:01,300 --> 00:06:04,940
والا ٹیوننگ کے لیے ذمہ دار ہے، اور باقی پیغام لے جانے کے لیے آزاد ہیں۔

93
00:06:04,940 --> 00:06:10,380
اس خاص بٹ کا واحد کام اس بات کو یقینی بنانا ہے

94
00:06:10,380 --> 00:06:12,100
کہ پیغام میں 1s کی کل تعداد ایک ہموار نمبر ہے۔

95
00:06:12,100 --> 00:06:16,920
تو مثال کے طور پر اس وقت، 1s کی کل تعداد 7 ہے، یہ عجیب ہے، لہذا بھیجنے

96
00:06:16,920 --> 00:06:20,960
والے کو اس خاص بٹ کو 1 ہونے کے لیے پلٹنا ہوگا، جس سے گنتی برابر ہوجائے گی۔

97
00:06:20,960 --> 00:06:25,320
لیکن اگر بلاک پہلے ہی 1s کے یکساں نمبر کے ساتھ شروع

98
00:06:25,320 --> 00:06:27,480
ہو چکا ہوتا، تو اس خاص بٹ کو 0 پر رکھا جاتا۔

99
00:06:27,480 --> 00:06:31,640
یہ بہت آسان ہے، دھوکہ دہی سے آسان ہے، لیکن یہ ایک ناقابل یقین حد تک خوبصورت طریقہ

100
00:06:31,640 --> 00:06:37,760
ہے کہ کسی پیغام میں کہیں بھی تبدیلی کے خیال کو کسی بھی معلومات میں جھلکنے کا۔

101
00:06:37,760 --> 00:06:43,680
نوٹ کریں کہ اگر اس پیغام کا کوئی حصہ پلٹ جاتا ہے، یا تو 0 سے 1 یا

102
00:06:43,680 --> 00:06:48,140
1 سے 0 تک، یہ 1s کی کل گنتی کو برابر سے طاق میں بدل دیتا ہے۔

103
00:06:48,140 --> 00:06:52,000
لہذا اگر آپ وصول کنندہ ہیں، آپ اس پیغام کو دیکھتے ہیں، اور آپ کو 1s

104
00:06:52,000 --> 00:06:56,580
کی ایک طاق تعداد نظر آتی ہے، آپ یقینی طور پر جان سکتے ہیں کہ

105
00:06:56,580 --> 00:06:58,700
کچھ خرابی واقع ہوئی ہے، حالانکہ آپ کو اندازہ نہیں ہوگا کہ یہ کہاں تھا۔

106
00:06:58,700 --> 00:07:02,820
جملے میں، چاہے بٹس کے ایک گروپ میں 1s کی

107
00:07:02,820 --> 00:07:04,940
یکساں یا طاق تعداد ہو اسے برابری کہا جاتا ہے۔

108
00:07:04,940 --> 00:07:09,140
آپ اعداد بھی استعمال کر سکتے ہیں اور کہہ سکتے ہیں کہ برابری 0 یا 1 ہے، جو عام

109
00:07:09,140 --> 00:07:11,320
طور پر زیادہ مددگار ثابت ہوتی ہے جب آپ خیال کے ساتھ ریاضی کرنا شروع کر دیتے ہیں۔

110
00:07:11,320 --> 00:07:15,200
اور یہ خاص بٹ جسے بھیجنے والا برابری کو کنٹرول کرنے

111
00:07:15,200 --> 00:07:18,020
کے لیے استعمال کرتا ہے اسے برابری بٹ کہا جاتا ہے۔

112
00:07:18,020 --> 00:07:22,460
اور درحقیقت، ہمیں واضح ہونا چاہیے، اگر وصول کنندہ کو عجیب برابری نظر آتی ہے، تو اس کا

113
00:07:22,460 --> 00:07:26,920
مطلب یہ نہیں ہے کہ صرف ایک غلطی تھی، ہو سکتا ہے 3 غلطیاں ہوں، یا 5، یا

114
00:07:26,920 --> 00:07:29,560
کوئی اور طاق عدد، لیکن وہ یقینی طور پر جان سکتے ہیں۔ کہ یہ 0 نہیں تھا۔

115
00:07:29,560 --> 00:07:34,880
دوسری طرف، اگر 2 غلطیاں ہوتیں، یا غلطیوں کی کوئی بھی تعداد ہوتی، تو 1s کی

116
00:07:34,880 --> 00:07:39,560
حتمی گنتی ابھی بھی برابر ہوتی، اس لیے وصول کنندہ کو مکمل اعتماد نہیں ہو

117
00:07:39,560 --> 00:07:43,360
سکتا کہ مساوی گنتی کا لازمی مطلب ہے کہ پیغام غلطی سے پاک ہے۔ .

118
00:07:43,360 --> 00:07:47,860
آپ شکایت کر سکتے ہیں کہ ایک پیغام جو صرف 2 بٹ پلٹنے سے

119
00:07:47,860 --> 00:07:49,760
گڑبڑ ہو جاتا ہے وہ کافی کمزور ہے، اور آپ بالکل درست ہوں گے۔

120
00:07:49,760 --> 00:07:54,480
ذہن میں رکھیں، اگرچہ، غلطی کا پتہ لگانے یا درست کرنے کا کوئی طریقہ نہیں ہے جو آپ کو

121
00:07:54,480 --> 00:07:59,720
100% یقین دلا سکے کہ آپ کو جو پیغام موصول ہوتا ہے وہی بھیجنے والے کا ارادہ ہے۔

122
00:07:59,720 --> 00:08:03,760
سب کے بعد، کافی بے ترتیب شور ہمیشہ ایک درست پیغام کو

123
00:08:03,760 --> 00:08:05,920
صرف خالص موقع سے دوسرے درست پیغام میں بدل سکتا ہے۔

124
00:08:05,920 --> 00:08:10,520
اس کے بجائے، مقصد ایک ایسی اسکیم کے ساتھ آنا ہے جو غلطیوں کی ایک خاص زیادہ سے

125
00:08:10,520 --> 00:08:16,480
زیادہ تعداد تک مضبوط ہو، یا شاید اس طرح کے غلط مثبت ہونے کے امکان کو کم کرنا۔

126
00:08:16,480 --> 00:08:20,940
اپنے طور پر برابری کی جانچ پڑتال کافی کمزور ہیں، لیکن ایک مکمل پیغام

127
00:08:20,940 --> 00:08:25,640
میں تبدیلی کے خیال کو ایک ہی جگہ تک پھیلانے سے، وہ ہمیں جو

128
00:08:25,640 --> 00:08:28,000
کچھ دیتے ہیں وہ زیادہ نفیس سکیموں کے لیے ایک طاقتور عمارت ہے۔

129
00:08:28,000 --> 00:08:32,880
مثال کے طور پر، جیسا کہ ہیمنگ یہ شناخت کرنے کا طریقہ تلاش کر رہا تھا کہ غلطی کہاں ہوئی،

130
00:08:32,880 --> 00:08:37,160
نہ صرف یہ کہ یہ ہوا، اس کی اہم بصیرت یہ تھی کہ اگر آپ کچھ برابری کی جانچ

131
00:08:37,160 --> 00:08:42,040
پڑتال پورے پیغام پر نہیں، بلکہ احتیاط سے منتخب کردہ کچھ ذیلی سیٹوں پر کرتے ہیں، تو آپ پوچھ سکتے

132
00:08:42,040 --> 00:08:46,840
ہیں۔ سوالات کی ایک مزید بہتر سیریز جو کسی ایک بٹ کی غلطی کے مقام کو پن کرتی ہے۔

133
00:08:46,840 --> 00:08:51,280
مجموعی احساس کچھ ایسا ہی ہے جیسے 20 سوالات کا کھیل کھیلنا، ہاں یا نہیں

134
00:08:51,280 --> 00:08:54,300
کے سوالات پوچھنا جو امکانات کی جگہ کو آدھے حصے میں کاٹ دیتے ہیں۔

135
00:08:54,300 --> 00:08:58,840
مثال کے طور پر، ہم کہتے ہیں کہ ہم صرف ان 8 بٹس

136
00:08:58,840 --> 00:08:59,840
پر برابری کی جانچ کرتے ہیں، تمام طاق نمبر والی پوزیشنوں پر۔

137
00:09:00,400 --> 00:09:04,560
پھر اگر کسی غلطی کا پتہ چل جاتا ہے، تو یہ وصول کنندہ کو اس بارے میں تھوڑی زیادہ معلومات

138
00:09:04,560 --> 00:09:09,160
فراہم کرتا ہے کہ خاص طور پر خرابی کہاں ہے، یعنی یہ کہ یہ ایک عجیب پوزیشن میں ہے۔

139
00:09:09,160 --> 00:09:14,360
اگر ان 8 بٹس میں کوئی خرابی نہیں پائی جاتی ہے، تو اس کا مطلب ہے

140
00:09:14,360 --> 00:09:17,240
کہ یا تو کوئی غلطی نہیں ہے، یا یہ یکساں پوزیشنوں میں کہیں بیٹھا ہے۔

141
00:09:17,240 --> 00:09:21,560
آپ سوچ سکتے ہیں کہ برابری کی جانچ کو آدھے بٹس تک محدود کرنے سے یہ کم

142
00:09:21,560 --> 00:09:25,460
موثر ہو جاتا ہے، لیکن جب یہ دوسرے اچھی طرح سے منتخب کردہ چیکوں کے ساتھ مل

143
00:09:25,460 --> 00:09:29,720
کر کیا جاتا ہے، تو یہ جوابی طور پر ہمیں بہت زیادہ طاقتور چیز فراہم کرتا ہے۔

144
00:09:29,720 --> 00:09:34,440
حقیقت میں اس برابری کی جانچ کو ترتیب دینے کے لیے، یاد رکھیں، اس کے لیے کچھ خاص بٹ

145
00:09:34,440 --> 00:09:37,600
کو نشان زد کرنے کی ضرورت ہوتی ہے جس میں اس پورے گروپ کی برابری کے لیے کنٹرول ہو۔

146
00:09:37,600 --> 00:09:39,920
یہاں آئیے صرف پوزیشن 1 کا انتخاب کرتے ہیں۔

147
00:09:39,920 --> 00:09:43,960
مثال کے طور پر، ان 8 بٹس کی برابری فی الحال عجیب ہے، لہذا بھیجنے والا

148
00:09:43,960 --> 00:09:48,220
اس برابری بٹ کو ٹوگل کرنے کا ذمہ دار ہے، اور اب یہ برابر ہے۔

149
00:09:48,220 --> 00:09:51,040
یہ 4 میں سے صرف 1 برابری چیک ہے جو ہم کریں گے۔

150
00:09:51,040 --> 00:09:55,560
دوسرا چیک گرڈ کے دائیں نصف پر 8 بٹس میں سے ہے،

151
00:09:55,560 --> 00:09:56,880
کم از کم جیسا کہ ہم نے اسے یہاں کھینچا ہے۔

152
00:09:56,880 --> 00:10:02,520
اس بار ہم پوزیشن 2 کو برابری بٹ کے طور پر استعمال کر سکتے ہیں، اس لیے ان 8 بٹس میں پہلے سے ہی

153
00:10:02,520 --> 00:10:07,160
برابر برابری موجود ہے، اور بھیجنے والا اس بٹ نمبر 2 کو بغیر کسی تبدیلی کے چھوڑ کر اچھا محسوس کر سکتا ہے۔

154
00:10:07,160 --> 00:10:11,040
پھر دوسرے سرے پر، اگر وصول کنندہ اس گروپ کی برابری کو چیک کرتا ہے اور اسے معلوم ہوتا ہے

155
00:10:11,040 --> 00:10:15,960
کہ یہ عجیب ہے، تو وہ جان لیں گے کہ غلطی دائیں جانب ان 8 بٹس میں کہیں ہے۔

156
00:10:15,960 --> 00:10:21,260
بصورت دیگر اس کا مطلب ہے کہ یا تو کوئی خرابی نہیں ہے، یا غلطی بائیں آدھے حصے میں کہیں ہے۔

157
00:10:21,260 --> 00:10:24,040
یا میرا اندازہ ہے کہ دو غلطیاں ہو سکتی ہیں، لیکن ابھی کے لیے ہم یہ

158
00:10:24,040 --> 00:10:27,080
فرض کرنے جا رہے ہیں کہ پورے بلاک میں زیادہ سے زیادہ ایک غلطی ہے۔

159
00:10:27,080 --> 00:10:29,160
اس سے زیادہ چیزیں مکمل طور پر ٹوٹ جاتی ہیں۔

160
00:10:29,160 --> 00:10:32,920
یہاں، اس سے پہلے کہ ہم اگلے دو چیکوں کو دیکھیں، اس کے بارے میں سوچنے کے لیے ایک لمحہ نکالیں

161
00:10:32,920 --> 00:10:35,880
کہ جب آپ ان کو ایک ساتھ دیکھتے ہیں تو یہ پہلے دو ہمیں کیا کرنے کی اجازت دیتے ہیں۔

162
00:10:35,880 --> 00:10:40,240
ہم کہتے ہیں کہ آپ کو طاق کالموں کے درمیان اور دائیں نصف کے درمیان ایک خرابی کا پتہ چلا ہے۔

163
00:10:40,240 --> 00:10:43,940
اس کا لازمی مطلب یہ ہے کہ غلطی آخری کالم میں کہیں ہے۔

164
00:10:43,940 --> 00:10:48,280
اگر طاق کالم میں کوئی خرابی نہیں تھی لیکن دائیں نصف میں ایک

165
00:10:48,280 --> 00:10:50,520
تھی، تو یہ بتاتا ہے کہ یہ دوسرے سے آخری کالم میں ہے۔

166
00:10:50,520 --> 00:10:54,640
اسی طرح اگر طاق کالموں میں کوئی خرابی ہے لیکن دائیں نصف میں

167
00:10:54,640 --> 00:10:56,560
نہیں، تو آپ جانتے ہیں کہ یہ دوسرے کالم میں کہیں ہے۔

168
00:10:56,560 --> 00:11:00,560
اور اگر ان دونوں برابری کی جانچ پڑتال میں سے کوئی بھی چیز کا پتہ نہیں لگاتا ہے،

169
00:11:00,560 --> 00:11:03,760
تو اس کا مطلب ہے کہ ایک ہی جگہ غلطی ہوسکتی ہے جو اس بائیں کالم میں ہے۔

170
00:11:03,760 --> 00:11:06,480
لیکن اس کا سیدھا مطلب یہ بھی ہو سکتا ہے کہ کوئی غلطی نہیں ہے۔

171
00:11:06,480 --> 00:11:10,800
جو کہ یہ کہنے کا سب سے زیادہ پیچیدہ طریقہ ہے کہ

172
00:11:10,800 --> 00:11:11,800
دو برابری کی جانچ ہمیں کالم کو پن کرنے دیتی ہے۔

173
00:11:11,800 --> 00:11:14,000
یہاں سے، آپ شاید اندازہ لگا سکتے ہیں کہ کیا ہوتا ہے۔

174
00:11:14,000 --> 00:11:16,240
ہم بنیادی طور پر ایک ہی کام کرتے ہیں لیکن قطاروں کے لیے۔

175
00:11:16,240 --> 00:11:21,040
پوزیشن 4 کو برابری بٹ کے طور پر استعمال کرتے ہوئے، طاق قطاروں پر برابری کی جانچ کی جائے گی۔

176
00:11:21,040 --> 00:11:25,480
تو اس مثال میں اس گروپ میں پہلے سے ہی برابر برابری

177
00:11:25,480 --> 00:11:26,480
ہے، لہذا بٹ 4 کو 0 پر سیٹ کیا جائے گا۔

178
00:11:26,480 --> 00:11:31,280
اور آخر میں نچلی دو قطاروں پر برابری کی جانچ پڑتال ہے،

179
00:11:31,280 --> 00:11:32,280
پوزیشن 8 کو برابری بٹ کے طور پر استعمال کرتے ہوئے۔

180
00:11:32,280 --> 00:11:35,840
اس معاملے میں، ایسا لگتا ہے کہ بھیجنے والے کو اس بٹ کو

181
00:11:35,840 --> 00:11:37,840
8 کو آن کرنے کی ضرورت ہے تاکہ گروپ کو برابری مل سکے۔

182
00:11:37,840 --> 00:11:41,360
جس طرح پہلے دو چیک ہمیں کالم کو نیچے کرنے دیتے ہیں،

183
00:11:41,360 --> 00:11:43,000
یہ اگلے دو آپ کو قطار کو پن کرنے دیتے ہیں۔

184
00:11:43,000 --> 00:11:48,400
مثال کے طور پر، تصور کریں کہ ٹرانسمیشن کے دوران پوزیشن 3 پر ایک خرابی ہے۔

185
00:11:48,400 --> 00:11:52,620
ٹھیک ہے یہ پہلے برابری گروپ کو متاثر کرتا ہے، اور یہ دوسرے برابری گروپ کو بھی

186
00:11:52,620 --> 00:11:56,340
متاثر کرتا ہے، لہذا وصول کنندہ جانتا ہے کہ اس دائیں کالم میں کہیں غلطی ہے۔

187
00:11:56,340 --> 00:12:01,380
لیکن یہ تیسرے گروپ کو متاثر نہیں کرتا ہے، اور یہ چوتھے گروپ کو متاثر نہیں کرتا ہے۔

188
00:12:01,380 --> 00:12:05,460
اور یہ وصول کنندہ کو پہلی قطار تک غلطی کی نشاندہی کرنے دیتا ہے،

189
00:12:05,460 --> 00:12:08,660
جس کا لازمی مطلب ہے پوزیشن 3، تاکہ وہ غلطی کو ٹھیک کر سکیں۔

190
00:12:08,660 --> 00:12:12,640
آپ اپنے آپ کو یہ باور کرانے کے لیے ایک لمحہ نکال کر لطف اندوز ہو سکتے ہیں کہ ان چار سوالوں

191
00:12:12,680 --> 00:12:17,320
کے جوابات واقعی آپ کو ہمیشہ ایک مخصوص جگہ کو پن کرنے دیں گے، چاہے وہ کہیں بھی کیوں نہ ہوں۔

192
00:12:17,320 --> 00:12:22,640
درحقیقت، آپ میں سے ہوشیار ان سوالات اور بائنری گنتی

193
00:12:22,640 --> 00:12:23,640
کے درمیان تعلق کو بھی محسوس کر سکتے ہیں۔

194
00:12:23,640 --> 00:12:27,840
اور اگر آپ ایسا کرتے ہیں، تو مجھے دوبارہ زور دینے دیں، توقف کریں،

195
00:12:27,840 --> 00:12:30,880
اپنے لیے کوشش کریں کہ اس سے پہلے کہ میں اسے خراب کروں۔

196
00:12:30,880 --> 00:12:35,560
اگر آپ سوچ رہے ہیں کہ کیا ہوتا ہے اگر ایک برابری بٹ

197
00:12:35,560 --> 00:12:36,560
خود متاثر ہو جاتا ہے، ٹھیک ہے، آپ اسے آزما سکتے ہیں۔

198
00:12:36,560 --> 00:12:40,720
اس بارے میں سوچنے کے لیے ایک لمحہ نکالیں کہ ان چار خصوصی بٹس میں سے کسی بھی غلطی

199
00:12:40,720 --> 00:12:47,440
کو کسی دوسرے کی طرح چار سوالات کے ایک ہی گروپ کے ساتھ کیسے ٹریک کیا جائے گا۔

200
00:12:47,440 --> 00:12:50,500
اس سے کوئی فرق نہیں پڑتا، کیوں کہ دن کے اختتام پر ہم پیغام بٹس کی

201
00:12:50,500 --> 00:12:53,640
حفاظت کرنا چاہتے ہیں، غلطی کو درست کرنے والے بٹس صرف ساتھ چل رہے ہیں۔

202
00:12:53,640 --> 00:12:57,120
لیکن ان بٹس کی حفاظت بھی ایک ایسی چیز ہے جو

203
00:12:57,120 --> 00:12:59,260
قدرتی طور پر اسکیم سے بطور پروڈکٹ خارج ہوجاتی ہے۔

204
00:12:59,260 --> 00:13:02,380
آپ یہ اندازہ لگا کر بھی لطف اندوز ہو سکتے ہیں کہ یہ ترازو کیسے ہوتا ہے۔

205
00:13:02,380 --> 00:13:08,040
اگر ہم نے سائز 256 بٹس کا ایک بلاک استعمال کیا ہے، مثال کے طور پر، کسی مقام کو پن کرنے کے

206
00:13:08,040 --> 00:13:15,680
لیے، آپ کو کسی مخصوص جگہ پر بائنری تلاش کرنے کے لیے صرف آٹھ ہاں یا نہیں سوالات کی ضرورت ہے۔

207
00:13:15,680 --> 00:13:19,680
اور یاد رکھیں، ہر سوال کے لیے مناسب برابری کی جانچ پڑتال

208
00:13:19,680 --> 00:13:23,340
کے لیے صرف ایک بٹ کو ترک کرنے کی ضرورت ہوتی ہے۔

209
00:13:23,340 --> 00:13:26,960
آپ میں سے کچھ لوگ اسے پہلے ہی دیکھ سکتے ہیں، لیکن ہم بعد میں ایک یا

210
00:13:26,960 --> 00:13:29,960
دو منٹ میں یہ سوالات تلاش کرنے کے منظم طریقے کے بارے میں بات کریں گے۔

211
00:13:29,960 --> 00:13:33,440
امید ہے کہ یہ خاکہ اس کی کارکردگی کی تعریف کرنے

212
00:13:33,440 --> 00:13:34,440
کے لیے کافی ہے جو ہم یہاں تیار کر رہے ہیں۔

213
00:13:34,440 --> 00:13:38,440
پہلی چیز، ان آٹھ ہائی لائٹ کردہ برابری بٹس کے علاوہ، جو بھی آپ چاہتے ہیں

214
00:13:38,440 --> 00:13:41,720
ہو سکتا ہے، جو بھی پیغام یا ڈیٹا آپ چاہتے ہیں لے کر جا سکتے ہیں۔

215
00:13:41,720 --> 00:13:45,480
8 بٹس اس لحاظ سے بے کار ہیں کہ ان کا بقیہ پیغام سے مکمل طور پر تعین کیا

216
00:13:45,480 --> 00:13:53,640
جاتا ہے، لیکن یہ پیغام کو مجموعی طور پر کاپی کرنے سے کہیں زیادہ ہوشیار طریقے سے ہے۔

217
00:13:53,640 --> 00:13:58,000
اور پھر بھی، بہت کم ترک کرنے کے لیے، آپ کسی ایک بھی

218
00:13:58,000 --> 00:13:59,000
غلطی کی شناخت اور اسے ٹھیک کرنے کے قابل ہو جائیں گے۔

219
00:13:59,000 --> 00:14:00,400
ٹھیک ہے، تقریبا.

220
00:14:00,400 --> 00:14:05,920
ٹھیک ہے، تو یہاں ایک مسئلہ یہ ہے کہ اگر چار برابری چیک میں سے کوئی بھی

221
00:14:05,920 --> 00:14:10,240
خرابی کا پتہ نہیں لگاتا، یعنی 8 بٹس کے خصوصی طور پر منتخب کردہ سب سیٹس میں

222
00:14:10,240 --> 00:14:15,520
برابری ہوتی ہے، بالکل اسی طرح جیسے بھیجنے والے کا ارادہ ہے، تو اس کا مطلب ہے

223
00:14:15,520 --> 00:14:17,760
کہ کوئی غلطی نہیں تھی۔ ، یا یہ ہمیں پوزیشن 0 تک محدود کر دیتا ہے۔

224
00:14:17,760 --> 00:14:23,040
آپ نے دیکھا، ہاں یا نہیں کے چار سوالات کے ساتھ، ہمارے پاس اپنے برابری کی جانچ کے 16 ممکنہ

225
00:14:23,040 --> 00:14:28,000
نتائج ہیں، اور سب سے پہلے جو بلاک میں 16 میں سے 1 پوزیشن کی نشاندہی کرنے کے لیے بہترین

226
00:14:28,000 --> 00:14:33,000
محسوس ہوتا ہے، لیکن آپ کو 17 ویں نتیجے کے بارے میں بھی بتانا ہوگا، کوئی غلطی نہیں حالت.

227
00:14:33,000 --> 00:14:37,860
یہاں کا حل دراصل بہت آسان ہے، بس اس 0 ویں بٹ کو مکمل طور پر بھول جائیں۔

228
00:14:37,860 --> 00:14:41,920
لہذا جب ہم اپنے چار برابری کی جانچ پڑتال کرتے ہیں اور ہم دیکھتے ہیں کہ

229
00:14:41,920 --> 00:14:44,320
وہ سب برابر ہیں، تو اس کا غیر مبہم مطلب ہے کہ کوئی غلطی نہیں ہے۔

230
00:14:44,320 --> 00:14:49,240
اس کا مطلب یہ ہے کہ 16 بٹ بلاک کے ساتھ کام کرنے کے بجائے، ہم 15 بٹ بلاک کے ساتھ کام

231
00:14:49,240 --> 00:14:54,040
کرتے ہیں، جہاں 11 بٹس پیغام لے جانے کے لیے آزاد ہیں اور ان میں سے 4 فالتو پن کے لیے ہیں۔

232
00:14:54,080 --> 00:14:58,400
اور اس کے ساتھ، اب ہمارے پاس وہ ہے جسے کاروبار

233
00:14:58,400 --> 00:14:59,400
میں لوگ 15-11 ہیمنگ کوڈ کے طور پر حوالہ دیتے ہیں۔

234
00:14:59,400 --> 00:15:03,920
اس نے کہا، یہ اچھی بات ہے کہ بلاک کا سائز 2 کی کلین پاور ہے، اور ایک ہوشیار طریقہ ہے کہ ہم اس

235
00:15:03,920 --> 00:15:08,880
0 ویں حصے کو اپنے پاس رکھ سکتے ہیں اور اسے ہمارے لیے تھوڑا سا اضافی کام کرنے کے لیے حاصل کر سکتے ہیں۔

236
00:15:08,880 --> 00:15:13,600
اگر ہم اسے پورے بلاک میں برابری بٹ کے طور پر استعمال کرتے ہیں، تو یہ ہمیں

237
00:15:13,600 --> 00:15:16,320
حقیقت میں پتہ لگانے دیتا ہے، اگرچہ ہم 2 بٹ کی غلطیوں کو درست نہیں کر سکتے۔

238
00:15:16,320 --> 00:15:17,440
یہ کیسے کام کرتا ہے۔

239
00:15:17,440 --> 00:15:21,740
ان چار خصوصی غلطیوں کو درست کرنے والے بٹس کو ترتیب دینے کے بعد، ہم نے وہ 0

240
00:15:21,740 --> 00:15:25,540
واں سیٹ کیا تاکہ پورے بلاک کی برابری برابر ہو، بالکل عام برابری کی جانچ کی طرح۔

241
00:15:25,540 --> 00:15:29,780
اب، اگر ایک بھی چھوٹی غلطی ہے، تو پورے بلاک کی برابری طاق ہو جائے گی،

242
00:15:29,780 --> 00:15:33,940
لیکن ہم اسے بہرحال پکڑ لیں گے چار غلطی کو درست کرنے والے چیکس کی بدولت۔

243
00:15:33,940 --> 00:15:38,100
تاہم، اگر دو غلطیاں ہیں، تو مجموعی برابری دوبارہ برابر ہونے والی ہو جائے گی،

244
00:15:38,100 --> 00:15:42,660
لیکن وصول کنندہ پھر بھی دیکھے گا کہ ان چار برابری چیک کے ساتھ کیا

245
00:15:42,660 --> 00:15:45,820
ہو رہا ہے اس کی وجہ سے کم از کم کچھ خرابی ہوئی ہے۔

246
00:15:45,820 --> 00:15:49,780
لہذا اگر وہ مجموعی طور پر یکساں برابری دیکھتے ہیں، لیکن دوسرے چیک کے ساتھ کچھ

247
00:15:49,820 --> 00:15:52,980
غیر صفر ہوتا ہے، تو یہ انہیں بتاتا ہے کہ کم از کم دو غلطیاں تھیں۔

248
00:15:52,980 --> 00:15:54,420
کیا یہ ہوشیار نہیں ہے؟

249
00:15:54,420 --> 00:15:58,500
اگرچہ ہم ان 2 بٹ کی غلطیوں کو درست نہیں کر سکتے ہیں، صرف ایک چھوٹی سی پریشان

250
00:15:58,500 --> 00:16:02,340
کن 0 ویں بٹ کو کام پر ڈال کر، یہ ہمیں ان کا پتہ لگانے دیتا ہے۔

251
00:16:02,340 --> 00:16:06,540
یہ کافی معیاری ہے، اسے ایک توسیعی ہیمنگ کوڈ کے نام سے جانا جاتا ہے۔

252
00:16:06,540 --> 00:16:10,860
تکنیکی طور پر، اب آپ کے پاس ہیمنگ کوڈ کی مکمل تفصیل

253
00:16:10,860 --> 00:16:13,580
ہے، کم از کم 16 بٹ بلاک کی مثال کے طور پر۔

254
00:16:13,580 --> 00:16:17,300
لیکن مجھے لگتا ہے کہ آپ کو اپنی سمجھ کی جانچ کرنا اور اپنے آپ کو شروع سے ختم

255
00:16:17,300 --> 00:16:21,980
کرنے تک ایک مکمل مثال دے کر اس مقام تک ہر چیز کو مستحکم کرنا زیادہ اطمینان بخش ہوگا۔

256
00:16:21,980 --> 00:16:25,100
اگرچہ میں آپ کے ساتھ اس کے ذریعے قدم اٹھاؤں گا تاکہ آپ خود کو چیک کر سکیں۔

257
00:16:25,100 --> 00:16:29,180
کسی پیغام کو ترتیب دینے کے لیے، چاہے وہ لفظی پیغام ہو جس کا آپ

258
00:16:29,180 --> 00:16:34,100
جگہ پر ترجمہ کر رہے ہیں یا کچھ ڈیٹا جسے آپ وقت کے ساتھ

259
00:16:34,100 --> 00:16:35,700
ذخیرہ کرنا چاہتے ہیں، پہلا قدم اسے 11 بٹ حصوں میں تقسیم کرنا ہے۔

260
00:16:35,700 --> 00:16:40,340
ہر ٹکڑا غلطی سے بچنے والے 16 بٹ بلاک میں پیک کیا جائے گا۔

261
00:16:40,340 --> 00:16:43,740
تو آئیے اسے ایک مثال کے طور پر لیتے ہیں اور حقیقت میں اس پر کام کرتے ہیں۔

262
00:16:43,740 --> 00:16:45,340
آگے بڑھو، اصل میں یہ کرو!

263
00:16:45,380 --> 00:16:47,380
آئیے توقف کریں اور اس بلاک کو اکٹھا کرنے کی کوشش کریں۔

264
00:16:52,980 --> 00:16:53,980
ٹھیک ہے، آپ تیار ہیں؟

265
00:16:53,980 --> 00:16:58,500
یاد رکھیں، پوزیشن 0 کے ساتھ ساتھ 2 کے دیگر اختیارات بھی غلطی کی اصلاح کے لیے مخصوص

266
00:16:58,500 --> 00:17:05,700
ہیں، اس لیے آپ پیغام بٹس کو باقی تمام جگہوں پر ترتیب سے رکھ کر شروع کریں۔

267
00:17:05,700 --> 00:17:09,700
آپ کو اس گروپ کے پاس برابر برابری کی ضرورت ہے، جو یہ پہلے سے ہی کرتا

268
00:17:09,700 --> 00:17:13,140
ہے، لہذا آپ کو اس برابری بٹ کو پوزیشن 1 میں 0 پر سیٹ کرنا چاہیے تھا۔

269
00:17:13,140 --> 00:17:17,700
اگلا گروپ ایک عجیب برابری کے ساتھ شروع ہوتا ہے، لہذا آپ

270
00:17:17,700 --> 00:17:19,260
کو اس کی برابری بٹ کو 1 پر سیٹ کرنا چاہیے تھا۔

271
00:17:19,260 --> 00:17:23,740
اس کے بعد گروپ ایک عجیب برابری کے ساتھ شروع ہوتا ہے، لہذا آپ

272
00:17:23,740 --> 00:17:24,740
کو دوبارہ اس کی برابری بٹ کو 1 پر سیٹ کرنا چاہیے تھا۔

273
00:17:24,740 --> 00:17:29,500
اور فائنل گروپ میں بھی ایک عجیب برابری ہے، یعنی ہم

274
00:17:29,500 --> 00:17:31,500
اس بٹ کو پوزیشن 8 میں 1 پر سیٹ کرتے ہیں۔

275
00:17:31,500 --> 00:17:36,460
اور پھر آخری مرحلے کے طور پر، پورے بلاک میں اب ایک برابر برابری ہے، یعنی

276
00:17:36,460 --> 00:17:41,500
آپ اس بٹ نمبر 0، اوور آرچنگ برابری بٹ کو 0 پر سیٹ کر سکتے ہیں۔

277
00:17:41,500 --> 00:17:45,660
تو جیسے ہی اس بلاک کو بھیجا جائے گا، چار خصوصی ذیلی سیٹوں

278
00:17:45,660 --> 00:17:48,980
کی برابری اور مجموعی طور پر بلاک سبھی برابر ہوں گے، یا 0۔

279
00:17:48,980 --> 00:17:53,620
مشق کے دوسرے حصے کے طور پر، آئیے آپ کو وصول کنندہ کا کردار ادا کرنے دیں۔

280
00:17:53,620 --> 00:17:57,580
یقیناً، اس کا مطلب یہ ہوگا کہ آپ پہلے سے نہیں جانتے کہ یہ پیغام کیا ہے، ہوسکتا ہے کہ

281
00:17:57,580 --> 00:18:00,180
آپ میں سے کچھ لوگوں نے اسے یاد کیا ہو، لیکن مان لیتے ہیں کہ آپ نے ایسا نہیں کیا۔

282
00:18:00,180 --> 00:18:05,820
میں کیا کرنے جا رہا ہوں یا تو اس بلاک میں بٹس میں سے 0، 1،

283
00:18:05,820 --> 00:18:08,340
یا 2 کو تبدیل کریں، اور پھر آپ سے پوچھیں کہ میں نے کیا کیا ہے۔

284
00:18:08,340 --> 00:18:13,460
تو ایک بار پھر، روکیں اور اس پر کام کرنے کی کوشش کریں۔

285
00:18:13,460 --> 00:18:23,960
ٹھیک ہے، لہذا آپ بطور وصول کنندہ اب پہلے برابری والے گروپ کو چیک کریں اور آپ دیکھ

286
00:18:23,960 --> 00:18:29,820
سکتے ہیں کہ یہ برابر ہے، لہذا جو بھی خامی موجود ہے اسے برابر کالم میں ہونا چاہیے۔

287
00:18:29,820 --> 00:18:34,620
اگلا چیک ہمیں ایک طاق نمبر دیتا ہے، جو ہم دونوں کو بتاتا ہے کہ کم

288
00:18:34,620 --> 00:18:38,760
از کم ایک خرابی ہے، اور ہمیں اس مخصوص کالم تک محدود کر دیتی ہے۔

289
00:18:38,760 --> 00:18:42,900
تیسرا چیک برابر ہے، امکانات کو مزید کاٹتا ہے۔

290
00:18:42,900 --> 00:18:46,780
اور آخری برابری کی جانچ عجیب ہے، ہمیں بتاتی ہے کہ نیچے میں کہیں ایک خرابی

291
00:18:46,780 --> 00:18:51,700
ہے، جسے اب تک ہم دیکھ سکتے ہیں کہ پوزیشن نمبر 10 میں ہونا چاہیے۔

292
00:18:51,700 --> 00:18:56,140
مزید یہ کہ پورے بلاک کی برابری عجیب ہے، جس سے ہمیں

293
00:18:56,140 --> 00:18:58,220
یہ اعتماد ملتا ہے کہ ایک پلٹنا تھا دو نہیں تھا۔

294
00:18:58,220 --> 00:19:01,600
اگر یہ تین یا اس سے زیادہ ہے تو، تمام شرطیں بند ہیں۔

295
00:19:01,600 --> 00:19:06,520
اس بٹ نمبر 10 کو درست کرنے کے بعد، 11 بٹس کو نکالنے سے جو درست کرنے کے لیے

296
00:19:06,520 --> 00:19:11,620
استعمال نہیں کیے گئے تھے، ہمیں اصل پیغام کا متعلقہ سیگمنٹ فراہم کرتا ہے، جسے اگر آپ ریوائنڈ

297
00:19:11,620 --> 00:19:16,160
اور موازنہ کرتے ہیں تو حقیقت میں وہی ہے جس کے ساتھ ہم نے مثال شروع کی تھی۔

298
00:19:16,160 --> 00:19:19,260
اور اب جب کہ آپ یہ سب کچھ ہاتھ سے کرنا جانتے ہیں، میں آپ کو دکھانا چاہوں گا کہ

299
00:19:19,260 --> 00:19:23,940
آپ Python کوڈ کی ایک لائن کے ساتھ اس تمام منطق کے بنیادی حصے کو کیسے انجام دے سکتے ہیں۔

300
00:19:23,940 --> 00:19:28,400
آپ نے دیکھا کہ میں نے آپ کو ابھی تک جو کچھ نہیں بتایا وہ یہ ہے کہ یہ

301
00:19:28,400 --> 00:19:32,380
الگورتھم واقعی کتنا خوبصورت ہے، کسی مشین کو غلطی کی پوزیشن کی طرف اشارہ کرنے کے لیے حاصل کرنا

302
00:19:32,380 --> 00:19:37,680
کتنا آسان ہے، اسے منظم طریقے سے کیسے پیمانہ کیا جائے، اور ہم کس طرح ان تمام چیزوں کو

303
00:19:37,680 --> 00:19:39,580
ترتیب دے سکتے ہیں۔ یہ متعدد الگ الگ برابری چیک کے بجائے ایک واحد آپریشن کے طور پر ہے۔

304
00:19:39,580 --> 00:19:41,680
یہ دیکھنے کے لیے کہ میرا کیا مطلب ہے، حصہ 2 میں میرے ساتھ شامل ہوں۔

