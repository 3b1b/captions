1
00:00:00,000 --> 00:00:03,120
Feltételezem, hogy itt mindenki az 1. részből jön.

2
00:00:03,120 --> 00:00:06,920
Hamming-kódokról beszéltünk, egy olyan adatblokk létrehozásának módszeréről, amelyben a bitek

3
00:00:06,920 --> 00:00:11,640
többsége értelmes üzenetet hordoz, míg néhány másik egyfajta redundanciaként működik,

4
00:00:11,640 --> 00:00:15,800
oly módon, hogy ha bármelyik bit megfordul, akkor vagy üzenet

5
00:00:15,800 --> 00:00:20,560
bit vagy redundancia bit, bármi ebben a blokkban, a vevő

6
00:00:20,560 --> 00:00:21,920
képes lesz azonosítani, hogy hiba történt, és hogyan lehet kijavítani.

7
00:00:21,920 --> 00:00:25,900
Az ott bemutatott alapötlet az volt, hogyan lehet

8
00:00:25,900 --> 00:00:29,800
többszörös paritásellenőrzést használni a bináris kereséshez a hibáig.

9
00:00:29,800 --> 00:00:33,920
Ebben a videóban az volt a cél, hogy a

10
00:00:33,920 --> 00:00:35,420
Hamming-kódok a lehető leggyakrabban és újra felfedezhetővé váljanak.

11
00:00:35,420 --> 00:00:40,040
De ahogy elkezd gondolkodni ennek tényleges megvalósításán, akár szoftverben, akár hardverben,

12
00:00:40,040 --> 00:00:44,120
ez a keretezés valójában alááshatja, mennyire elegánsak ezek a kódok.

13
00:00:44,120 --> 00:00:47,620
Azt gondolhatnánk, hogy olyan algoritmust kell írnia, amely nyomon követi

14
00:00:47,620 --> 00:00:52,320
az összes lehetséges hibahelyet, és minden egyes ellenőrzéssel kettévágja azt

15
00:00:52,320 --> 00:00:54,160
a csoportot, de valójában sokkal, de sokkal egyszerűbb ennél.

16
00:00:54,160 --> 00:00:58,720
Ha felolvasod a négy paritásellenőrzésre adott válaszokat, amelyeket az előző videóban végeztünk, 1-es és

17
00:00:58,760 --> 00:01:04,800
0-s formában igen és nem helyett, akkor szó szerint kiírja a hiba helyzetét binárisan.

18
00:01:04,800 --> 00:01:10,160
Például a 7-es szám binárisan úgy néz ki, mint 0111,

19
00:01:10,160 --> 00:01:12,640
lényegében azt mondva, hogy 4 plusz 2 plusz 1.

20
00:01:12,640 --> 00:01:17,960
És figyeld meg, hogy a 7-es pozíció hol helyezkedik el, ez érinti

21
00:01:17,960 --> 00:01:22,280
az első paritáscsoportunkat, a másodikat és a harmadikat, de nem az utolsót.

22
00:01:22,280 --> 00:01:26,560
Tehát e négy ellenőrzés eredményének alulról felfelé

23
00:01:26,560 --> 00:01:28,000
történő elolvasása valóban meghatározza a hiba helyzetét.

24
00:01:28,520 --> 00:01:32,240
A 7-es példában nincs semmi különös, ez általában működik, és

25
00:01:32,240 --> 00:01:37,440
ez megdöbbentően egyszerűvé teszi az egész séma hardveres megvalósításának logikáját.

26
00:01:37,440 --> 00:01:43,380
Ha szeretnéd látni, miért történik ez a varázslat, vegyük

27
00:01:43,380 --> 00:01:48,480
ezt a 16 indexcímkét a pozícióinkhoz, de ahelyett, hogy

28
00:01:48,480 --> 00:01:50,720
10-es alapba írnánk, írjuk őket binárisan, 0000-től 1111-ig.

29
00:01:50,720 --> 00:01:55,880
Miközben ezeket a bináris címkéket visszahelyezzük a dobozukba,

30
00:01:56,080 --> 00:01:58,440
hadd hangsúlyozzam, hogy különböznek a ténylegesen elküldött adatoktól.

31
00:01:58,440 --> 00:02:02,200
Nem mások, mint egy fogalmi címke, amely segít neked

32
00:02:02,200 --> 00:02:04,200
és nekem megérteni, honnan jött a négy paritásos csoport.

33
00:02:04,200 --> 00:02:08,840
Azt az eleganciát, hogy mindent, amit nézünk, binárisan írunk le, talán

34
00:02:08,840 --> 00:02:13,160
aláássa az a zavar, hogy mindent, amit nézünk, binárisan írunk le.

35
00:02:13,160 --> 00:02:15,040
Pedig megéri.

36
00:02:15,040 --> 00:02:20,740
A címkék közül csak az utolsó bitre összpontosítsa figyelmét, majd

37
00:02:20,740 --> 00:02:24,280
jelölje ki azokat a helyeket, ahol az utolsó bit 1.

38
00:02:24,280 --> 00:02:28,800
A négy paritáscsoport közül az elsőt kapjuk, ami azt jelenti,

39
00:02:28,800 --> 00:02:34,480
hogy az első ellenőrzést úgy értelmezheti, hogy azt kérdezi, hé,

40
00:02:34,480 --> 00:02:36,680
ha hiba van, akkor a hiba helyének utolsó bitje 1?

41
00:02:36,680 --> 00:02:42,600
Hasonlóképpen, ha a másodiktól az utolsóig fókuszál, és kiemeli az összes olyan

42
00:02:42,600 --> 00:02:47,040
pozíciót, ahol ez 1, akkor megkapja a második paritáscsoportot a rendszerünkből.

43
00:02:47,040 --> 00:02:51,960
Más szóval, a második ellenőrzés azt kérdezi, hé, megint én, ha

44
00:02:51,960 --> 00:02:56,160
hiba van, akkor a pozíció második és utolsó bitje 1?

45
00:02:56,160 --> 00:02:57,160
Stb.

46
00:02:57,160 --> 00:03:03,320
A harmadik paritásellenőrzés minden olyan pozícióra kiterjed, amelynek harmadik bitje be van kapcsolva, az utolsó

47
00:03:03,320 --> 00:03:10,120
pedig az utolsó nyolc pozíciót fedi le, azokat, amelyeknek a legmagasabb sorrendű bitje 1.

48
00:03:10,120 --> 00:03:15,680
Minden, amit korábban tettünk, ugyanaz, mint ennek a négy kérdésnek

49
00:03:15,680 --> 00:03:18,800
a megválaszolása, ami viszont ugyanaz, mint egy pozíció kiírása binárisan.

50
00:03:19,800 --> 00:03:22,080
Remélem, ez két dolgot tisztáz.

51
00:03:22,080 --> 00:03:27,140
Az első az, hogyan lehet szisztematikusan általánosítani olyan blokkméretekre, amelyek kettőnél nagyobb hatványok.

52
00:03:27,140 --> 00:03:33,180
Ha több bitre van szükség az egyes pozíciók leírásához, például hat bitre van szükség 64

53
00:03:33,180 --> 00:03:38,640
folt leírásához, akkor ezek a bitek mindegyike megadja az egyik paritáscsoportot, amelyet ellenőriznünk kell.

54
00:03:38,640 --> 00:03:42,060
Azok, akik megnézték azt a sakktábla-rejtvényt, amit

55
00:03:42,060 --> 00:03:43,400
Matt Parkerrel csináltam, mindezt rendkívül ismerősnek találhatták.

56
00:03:43,400 --> 00:03:48,200
Ugyanaz az alapvető logika, de más problémát old

57
00:03:48,200 --> 00:03:49,880
meg, és egy 64 négyzetes sakktáblára alkalmazzák.

58
00:03:49,880 --> 00:03:54,000
A második dolog, remélem, ez világossá teszi, hogy a paritásbitjeink miért vannak

59
00:03:54,000 --> 00:03:58,320
olyan pozíciókban, amelyek kettő hatványai, például 1, 2, 4 és 8.

60
00:03:58,320 --> 00:04:03,640
Ezek azok a pozíciók, amelyek bináris reprezentációjában csak egyetlen bit van bekapcsolva.

61
00:04:03,640 --> 00:04:09,000
Ez azt jelenti, hogy a paritásbitek mindegyike

62
00:04:09,000 --> 00:04:12,640
a négy paritáscsoport egyikén belül található.

63
00:04:12,640 --> 00:04:16,840
Ezt láthatod nagyobb példákon is, ahol akármekkora is leszel,

64
00:04:16,840 --> 00:04:25,920
minden paritásbit kényelmesen csak az egyik csoportot érinti.

65
00:04:25,920 --> 00:04:29,680
Ha megértjük, hogy ezek a paritásellenőrzések, amelyekre az időnk

66
00:04:29,680 --> 00:04:34,320
nagy részét összpontosítottuk, nem más, mint egy okos módszer

67
00:04:34,320 --> 00:04:37,880
a hiba helyének binárisban történő megfogalmazására, akkor összefüggést vonhatunk

68
00:04:37,880 --> 00:04:42,160
le a hamming másfajta gondolkodásmódjával. kódokat, amelyek vitathatatlanul sokkal

69
00:04:42,160 --> 00:04:43,880
egyszerűbbek és elegánsabbak, és alapvetően egyetlen kódsorral leírhatók.

70
00:04:43,920 --> 00:04:46,200
Az XOR függvényen alapul.

71
00:04:46,200 --> 00:04:50,960
Az XOR azoknak, akik nem ismerik, az exkluzív ill.

72
00:04:50,960 --> 00:04:55,440
Ha két bit XOR-jét veszed, akkor 1-et ad vissza, ha az egyik bit

73
00:04:55,440 --> 00:05:00,200
be van kapcsolva, de nem, ha mindkettő be vagy ki van kapcsolva.

74
00:05:00,200 --> 00:05:03,760
Másképpen fogalmazva ez a két bit paritása.

75
00:05:03,760 --> 00:05:07,840
Matematikusként szívesebben gondolok rá, mint 2. kiegészítésre.

76
00:05:07,840 --> 00:05:12,000
Gyakran beszélünk két különböző bitsor XOR-járól is,

77
00:05:12,040 --> 00:05:14,040
amely alapvetően komponensenként hajtja végre ezt.

78
00:05:14,040 --> 00:05:16,280
Ez olyan, mint egy kiegészítés, de ahol soha nem viszed magaddal.

79
00:05:16,280 --> 00:05:21,240
Ismét a matematikailag hajlamosabbak ezt inkább úgy gondolhatják, mintha

80
00:05:21,240 --> 00:05:23,520
két vektort adnának hozzá, és csökkentenék a mod 2-t.

81
00:05:23,520 --> 00:05:28,720
Ha most megnyit egy Pythont, és alkalmazza a caret műveletet két egész szám

82
00:05:28,720 --> 00:05:35,400
között, akkor ez az, amit csinál, csak a tető alatti számok bitreprezentációira.

83
00:05:35,400 --> 00:05:40,920
Számodra és nekem az a kulcsfontosságú, hogy a sok különböző bitsor

84
00:05:40,960 --> 00:05:45,960
XOR-értékének vétele hatékony módja annak, hogy egy csomó különálló csoport paródiáit

85
00:05:45,960 --> 00:05:51,320
számítsuk ki, mint ahogyan az oszlopoknál is, mindezt egy csapásra.

86
00:05:51,320 --> 00:05:54,520
Ez egy meglehetősen pofás módot ad arra, hogy elgondolkodjunk a Hamming-kód

87
00:05:54,520 --> 00:05:59,680
algoritmusunkból származó többszörös paritásellenőrzéseken, mivel mindez egyetlen műveletbe van csomagolva.

88
00:05:59,680 --> 00:06:02,800
Bár első pillantásra nagyon másképp néz ki.

89
00:06:02,800 --> 00:06:08,360
Konkrétan írja fel a 16 pozíciót binárisan, mint korábban, és most jelölje

90
00:06:08,640 --> 00:06:14,800
ki azokat a pozíciókat, ahol az üzenetbit 1-re van kapcsolva, majd gyűjtse

91
00:06:14,800 --> 00:06:19,400
össze ezeket a pozíciókat egy nagy oszlopba, és vegye fel az XOR-t.

92
00:06:19,400 --> 00:06:23,480
Valószínűleg sejtheti, hogy az eredményül kapott 4 bit

93
00:06:23,480 --> 00:06:27,480
megegyezik az általunk megismert és kedvelt 4 paritásellenőrzéssel,

94
00:06:27,480 --> 00:06:32,720
de szánjunk egy percet, hogy átgondoljuk, miért pontosan.

95
00:06:32,720 --> 00:06:37,880
Ez az utolsó oszlop például az összes olyan pozíciót számolja, amelynek

96
00:06:38,400 --> 00:06:42,400
utolsó bitje 1, de már csak a kiemelt pozíciókra korlátozódik, tehát

97
00:06:42,400 --> 00:06:45,960
gyakorlatilag azt számolja, hogy hány kiemelt pozíció származott az első paritáscsoportból.

98
00:06:45,960 --> 00:06:48,520
Ennek van értelme?

99
00:06:48,520 --> 00:06:53,600
Hasonlóképpen, a következő oszlop azt számolja, hogy hány pozíció van

100
00:06:53,600 --> 00:06:59,640
a második paritáscsoportban, azokat a pozíciókat, amelyek második és utolsó

101
00:06:59,640 --> 00:07:00,640
bitje 1, és amelyek szintén kiemelve vannak, és így tovább.

102
00:07:00,640 --> 00:07:06,640
Valójában ez csak egy kis perspektívaváltás ugyanabban a dologban, amit mi csináltunk.

103
00:07:07,640 --> 00:07:10,000
És hogy tudd, hová vezet innen.

104
00:07:10,000 --> 00:07:14,400
A küldő felelős néhány speciális paritásbit átkapcsolásáért, hogy

105
00:07:14,400 --> 00:07:19,640
megbizonyosodjon arról, hogy az összeg 0000 lesz.

106
00:07:19,640 --> 00:07:23,600
Ha már így van, akkor ez egy nagyon jó módot ad arra, hogy elgondolkodjunk azon, hogy

107
00:07:23,600 --> 00:07:28,720
ez a négy eredményül kapott bit az alján miért írja le közvetlenül a hiba helyzetét.

108
00:07:28,720 --> 00:07:32,680
Tegyük fel, hogy ebben a blokkban egy kicsit 0-ról 1-re vált.

109
00:07:32,720 --> 00:07:37,320
Ez azt jelenti, hogy ennek a bitnek a pozíciója

110
00:07:37,320 --> 00:07:42,960
bekerül a teljes XOR-be, ami 0-ról az összeget

111
00:07:42,960 --> 00:07:44,800
az újonnan hozzáadott értékre, a hiba helyére változtatja.

112
00:07:44,800 --> 00:07:48,800
Valamivel kevésbé nyilvánvaló, ugyanez igaz arra az esetre is,

113
00:07:48,800 --> 00:07:49,800
ha olyan hiba történik, amely 1-et 0-ra változtat.

114
00:07:49,800 --> 00:07:54,720
Tudod, ha kétszer összeadsz egy bites karakterláncot, az ugyanaz, mintha egyáltalán nem lenne

115
00:07:54,720 --> 00:07:59,000
ott, alapvetően azért, mert ebben a világban 1 plusz 1 egyenlő 0-val.

116
00:07:59,000 --> 00:08:03,720
Tehát ennek a pozíciónak a másolatának hozzáadása a

117
00:08:03,720 --> 00:08:05,400
végösszeghez ugyanazt a hatást eredményezi, mint ahogy mozgatjuk.

118
00:08:05,400 --> 00:08:10,080
És ez a hatás ismét az, hogy az

119
00:08:10,080 --> 00:08:13,480
összesített eredmény itt alul jelzi a hiba helyzetét.

120
00:08:13,480 --> 00:08:17,720
Annak szemléltetésére, hogy ez milyen elegáns, hadd mutassam meg azt a Python-kód egy sort,

121
00:08:17,720 --> 00:08:22,120
amelyre korábban hivatkoztam, és amely szinte az összes logikát rögzíti a vevő oldalán.

122
00:08:22,120 --> 00:08:27,160
Kezdjük azzal, hogy létrehozunk egy véletlenszerű 16 1-es és 0-s

123
00:08:27,160 --> 00:08:31,160
tömböt az adatblokk szimulálására, és megadom neki a névbiteket,

124
00:08:31,160 --> 00:08:36,160
de természetesen a gyakorlatban ezt a küldőtől kapjuk, és ahelyett,

125
00:08:36,160 --> 00:08:38,600
hogy véletlenszerű lévén 11 adatbitet hordozna 5 paritásbittel együtt.

126
00:08:38,600 --> 00:08:43,160
Ha az enumerateBits függvényt hívom, akkor azt csinálja, hogy ezeket a

127
00:08:43,160 --> 00:08:48,240
biteket párosítja a megfelelő indexszel, ebben az esetben 0-tól 15-ig.

128
00:08:48,240 --> 00:08:53,200
Tehát ha ezután létrehozunk egy listát, amely az összes ilyen páron áthurkol, olyan párokon, amelyek

129
00:08:53,200 --> 00:08:59,160
i-nek néznek ki, majd csak az i értéket vesszük ki, csak az indexet, akkor

130
00:08:59,160 --> 00:09:01,920
ez nem olyan izgalmas, csak visszakapjuk azokat az indexeket 0 és 15 között. .

131
00:09:01,920 --> 00:09:07,520
De ha hozzátesszük azt a feltételt, hogy ezt csak if bit, azaz ha ez a bit 1

132
00:09:07,520 --> 00:09:13,400
és nem 0, akkor csak azokat a pozíciókat húzza ki, ahol a megfelelő bit be van kapcsolva.

133
00:09:13,400 --> 00:09:20,320
Ebben az esetben úgy tűnik, hogy ezek a pozíciók 0, 4, 6, 9 stb.

134
00:09:20,720 --> 00:09:24,640
Azt akarjuk, hogy összegyűjtsük ezeket a pozíciókat, a

135
00:09:24,640 --> 00:09:29,960
bekapcsolt bitek pozícióit, majd együtt XOR-eljük őket.

136
00:09:29,960 --> 00:09:33,960
Ahhoz, hogy ezt Pythonban megtegye, először importáljak néhány hasznos funkciót.

137
00:09:33,960 --> 00:09:39,140
Így meghívhatjuk a redukció()-t ezen a listán, és az XOR függvény segítségével csökkenthetjük.

138
00:09:39,140 --> 00:09:44,840
Ez alapvetően átveszi a listát, és végigviszi az XOR-t.

139
00:09:44,840 --> 00:09:48,760
Ha úgy tetszik, kifejezetten kiírhatja az XOR

140
00:09:48,800 --> 00:09:52,200
függvényt anélkül, hogy bárhonnan importálnia kellene.

141
00:09:52,200 --> 00:09:56,880
Tehát jelenleg úgy néz ki, hogy ha ezt tesszük a 16 bites

142
00:09:56,880 --> 00:10:02,080
véletlenszerű blokkon, akkor 9-et ad vissza, aminek a bináris reprezentációja 1001.

143
00:10:02,080 --> 00:10:05,960
Itt nem fogjuk megtenni, de írhat egy függvényt, ahol a küldő ezt a bináris

144
00:10:05,960 --> 00:10:11,560
reprezentációt használja a négy paritásbit igény szerinti beállításához, így végül a blokk olyan állapotba

145
00:10:11,560 --> 00:10:16,200
kerül, ahol ennek a kódsornak a futtatása a teljes bitlistán visszatér. egy 0.

146
00:10:17,200 --> 00:10:20,200
Ez egy jól előkészített blokknak tekinthető.

147
00:10:20,200 --> 00:10:24,640
A jó dolog az, hogy ha a listában szereplő bitek bármelyikét átkapcsoljuk, véletlenszerű

148
00:10:24,640 --> 00:10:30,600
zajból eredő hibát szimulálva, akkor ha ugyanazt a kódsort futtatja, kiírja a hibát.

149
00:10:30,600 --> 00:10:31,920
Hát nem ügyes?

150
00:10:31,920 --> 00:10:37,200
Megkaphatja ezt a blokkot a semmiből, futtathatja rajta ezt az egyetlen sort,

151
00:10:37,200 --> 00:10:42,920
és automatikusan kiköpi a hiba pozícióját, vagy egy 0-t, ha nincs.

152
00:10:42,920 --> 00:10:45,520
A 16-os méretben pedig nincs itt semmi különös.

153
00:10:45,520 --> 00:10:52,280
Ugyanez a kódsor működne, ha mondjuk 256 bites listája lenne.

154
00:10:52,280 --> 00:10:56,280
Mondanunk sem kell, hogy több kódot kell ide írni, például a

155
00:10:56,280 --> 00:11:01,440
meta paritásellenőrzést a 2 bites hibák észlelésére, de az ötlet az,

156
00:11:01,440 --> 00:11:05,080
hogy a sémánk szinte minden alapvető logikája egyetlen XOR-csökkentésre vezethető vissza.

157
00:11:05,080 --> 00:11:10,600
A bináris és XOR-ok és általában a szoftverek kényelmétől függően előfordulhat,

158
00:11:10,600 --> 00:11:15,880
hogy ezt a perspektívát kissé zavarónak találja, vagy sokkal elegánsabbnak és

159
00:11:15,880 --> 00:11:19,320
egyszerűbbnek, hogy azon töpreng, miért nem kezdtük el vele. -megy.

160
00:11:19,320 --> 00:11:22,880
Lazán szólva, a többszörös paritásellenőrzési perspektíva könnyebben átgondolható, ha

161
00:11:22,880 --> 00:11:27,560
a Hamming-kódokat nagyon közvetlenül implementálják hardverben, az XOR perspektívára

162
00:11:27,560 --> 00:11:31,380
pedig akkor a legegyszerűbb, ha szoftveresen, valamivel magasabb szintről.

163
00:11:31,380 --> 00:11:35,640
Az elsőt a legegyszerűbb kézzel elvégezni, és úgy gondolom, hogy ez

164
00:11:35,640 --> 00:11:40,720
jobban beépíti a mindennek hátterében álló alapvető intuíciót, vagyis azt, hogy

165
00:11:40,720 --> 00:11:46,840
az egyetlen hiba megtalálásához szükséges információ a blokk méretének naplójához kapcsolódik.

166
00:11:46,840 --> 00:11:51,020
, vagy más szóval, a blokk méretének megduplázódásával egy kicsit növekszik.

167
00:11:51,020 --> 00:11:55,440
A lényeges tény itt az, hogy ez az információ

168
00:11:55,440 --> 00:11:56,440
közvetlenül megfelel annak, hogy mekkora redundanciára van szükségünk.

169
00:11:56,440 --> 00:12:00,320
Valójában ez az, ami ellentétes a legtöbb ember térdrángó reakciójával, amikor először

170
00:12:00,320 --> 00:12:05,280
arra gondol, hogy egy üzenetet tegyen ellenállóvá a hibákkal szemben, ahol

171
00:12:05,280 --> 00:12:07,520
általában a teljes üzenet lemásolása az első ösztön, ami eszébe jut.

172
00:12:07,520 --> 00:12:11,120
És akkor, egyébként, van egy egészen más mód, hogy néha

173
00:12:11,120 --> 00:12:14,800
Hamming-kódokat látunk bemutatva, ahol az üzenetet megszorozzuk egy nagy mátrixszal.

174
00:12:14,800 --> 00:12:18,580
Ez kedves, mert a lineáris kódok tágabb családjához kapcsolódik, de szerintem ez

175
00:12:18,580 --> 00:12:25,160
szinte semmilyen megérzést nem ad arról, honnan származik vagy hogyan skálázódik.

176
00:12:25,160 --> 00:12:29,340
És ha a skálázásról beszélünk, észreveheti, hogy ennek a sémának

177
00:12:29,340 --> 00:12:32,200
a hatékonysága csak javul, ha növeljük a blokk méretét.

178
00:12:32,200 --> 00:12:40,560
Például azt láttuk, hogy 256 bittel ennek a helynek csak 3%-át

179
00:12:40,560 --> 00:12:43,480
használjuk fel a redundanciára, és onnantól kezdve egyre jobb lesz.

180
00:12:43,480 --> 00:12:49,040
Ahogy a paritásbitek száma egyesével nő, a blokk mérete folyamatosan megduplázódik.

181
00:12:49,040 --> 00:12:53,840
És ha ezt túlzásba viszed, akkor lehet egy

182
00:12:53,840 --> 00:12:58,800
millió bites blokk, ahol szó szerint 20 kérdést

183
00:12:58,800 --> 00:13:00,800
játszanál a paritásellenőrzéssel, és csak 21 paritásbitet használ.

184
00:13:00,800 --> 00:13:05,760
És ha visszalép, és arra gondol, hogy megnézzen egymillió

185
00:13:05,760 --> 00:13:08,640
bitet, és megkeressen egyetlen hibát, az valóban őrültségnek tűnik.

186
00:13:08,640 --> 00:13:12,680
A probléma persze az, hogy egy nagyobb blokknál megnő annak a valószínűsége, hogy egy-két

187
00:13:12,680 --> 00:13:18,360
bitnél több hibát látunk, és a Hamming kódok ezen kívül semmit sem kezelnek.

188
00:13:18,360 --> 00:13:22,020
Tehát a gyakorlatban a megfelelő méretet szeretné megtalálni, hogy ne

189
00:13:22,020 --> 00:13:25,520
legyen túl nagy a valószínűsége a túl sok bitváltásnak.

190
00:13:26,520 --> 00:13:30,920
Ezenkívül a gyakorlatban a hibák általában kis sorozatokban érkeznek, ami teljesen tönkretesz egy

191
00:13:30,920 --> 00:13:35,680
blokkot, ezért az egyik gyakori taktika a hibák sorozatának szétosztására a különböző

192
00:13:35,680 --> 00:13:41,720
blokkok között az, hogy ezeket a blokkokat összefűzi, mielőtt kiküldve vagy tárolva.

193
00:13:45,480 --> 00:13:49,920
Viszont ennek nagy részét teljesen megkérdőjelezik a modernebb kódok, mint például

194
00:13:49,920 --> 00:13:55,060
a sokkal gyakrabban használt Reed-Solomon algoritmus, amely különösen jól kezeli a

195
00:13:55,100 --> 00:13:59,580
sorozathibákat, és blokkonként nagyobb számú hibával szemben is ellenállóra hangolható. .

196
00:13:59,580 --> 00:14:03,000
De ez egy másik alkalom témája.

197
00:14:03,000 --> 00:14:07,660
A tudomány és mérnöki tevékenység művészete című könyvében Hamming csodálatosan

198
00:14:07,660 --> 00:14:10,700
őszintén beszél arról, hogy milyen kanyargós volt a kód felfedezése.

199
00:14:10,700 --> 00:14:15,180
Először mindenféle különféle sémát próbált ki, beleértve a biteket egy

200
00:14:15,180 --> 00:14:18,420
magasabb dimenziós rács részeire rendezve, és ehhez hasonló furcsa dolgokat.

201
00:14:18,420 --> 00:14:22,520
Az ötlet, hogy a paritásellenőrzések összeesküvésre késztethetők oly módon, hogy

202
00:14:22,520 --> 00:14:26,360
kifejtsék a hiba helyzetét, csak akkor jutott Hamminghez, amikor

203
00:14:26,360 --> 00:14:30,800
egy csomó egyéb elemzés után visszalépett, és megkérdezte: oké, mi

204
00:14:30,800 --> 00:14:32,860
a leghatékonyabb, amit tudok. elképzelhető, hogy erről van szó?

205
00:14:32,860 --> 00:14:36,760
Arról is őszintén beszélt, mennyire fontos, hogy már a paritásellenőrzés járt a

206
00:14:36,760 --> 00:14:42,040
fejében, ami az 1940-es években sokkal kevésbé volt elterjedt, mint manapság.

207
00:14:42,040 --> 00:14:46,040
A könyvben vagy fél tucatszor hivatkozik Louis Pasteur

208
00:14:46,040 --> 00:14:49,640
idézetére, a szerencse a felkészült elmének kedvez.

209
00:14:49,640 --> 00:14:55,120
Az okos ötletek gyakran megtévesztően egyszerűnek tűnnek utólag visszagondolva, ami miatt könnyen alulértékelhetők.

210
00:14:55,120 --> 00:14:59,680
Jelenleg őszintén remélem, hogy a Hamming-kódok, vagy legalábbis az

211
00:14:59,680 --> 00:15:01,820
ilyen kódok lehetősége, szinte magától értetődőnek tűnik számodra.

212
00:15:01,820 --> 00:15:05,440
De nem szabad becsapnia magát azzal, hogy azt

213
00:15:05,440 --> 00:15:08,000
gondolja, hogy ezek valójában nyilvánvalóak, mert biztosan nem.

214
00:15:08,000 --> 00:15:12,080
Az okos ötletek megtévesztően egyszerűnek tűnnek, részben az az oka, hogy

215
00:15:12,080 --> 00:15:17,360
mindig csak a végeredményt látjuk, tisztázzuk azt, ami rendetlen volt, soha

216
00:15:17,360 --> 00:15:22,400
nem említjük meg az összes rossz fordulatot, alábecsüljük, hogy a felfedezhető

217
00:15:22,400 --> 00:15:23,980
lehetőségek mekkora tere van a probléma kezdetén. megoldási folyamat, mindez.

218
00:15:23,980 --> 00:15:25,280
De ez általánosságban igaz.

219
00:15:25,280 --> 00:15:29,880
Azt hiszem, néhány különleges találmánynak van egy másik,

220
00:15:29,880 --> 00:15:31,040
mélyebb oka is annak, hogy alulbecsüljük őket.

221
00:15:31,040 --> 00:15:35,040
Az információ bitekben való gondolkodása csak 1948-ra vált igazán

222
00:15:35,040 --> 00:15:39,400
teljes elméletté, Claude Shannon információelméletről szóló alapvető tanulmányával.

223
00:15:39,400 --> 00:15:43,400
Ez lényegében egybeesett azzal, amikor Hamming kidolgozta az algoritmusát.

224
00:15:43,440 --> 00:15:47,300
Ez ugyanaz az alapdolgozat, amely bizonyos értelemben megmutatta,

225
00:15:47,300 --> 00:15:52,080
hogy a hatékony hibajavítás mindig lehetséges, függetlenül attól,

226
00:15:52,080 --> 00:15:53,920
hogy mekkora a valószínűsége a bitváltásnak, legalábbis elméletben.

227
00:15:53,920 --> 00:15:58,120
Shannon és Hamming egyébként a Bell Labs-ban osztozott egy irodában, annak

228
00:15:58,120 --> 00:16:02,400
ellenére, hogy nagyon különböző dolgokon dolgoztak, ami itt aligha tűnik véletlennek.

229
00:16:02,400 --> 00:16:06,960
Gyorsan előre több évtizedet, és manapság sokan annyira elmerülünk a bitekről és információkról

230
00:16:06,960 --> 00:16:13,080
való gondolkodásban, hogy könnyű figyelmen kívül hagyni, mennyire eltérő volt ez a gondolkodásmód.

231
00:16:13,080 --> 00:16:17,920
Ironikus módon azok az ötletek, amelyek a legmélyebben alakítják a jövő

232
00:16:17,920 --> 00:16:22,640
nemzedékének gondolkodásmódját, végül egyszerűbbnek tekintik a jövő generációját, mint amilyenek valójában.

