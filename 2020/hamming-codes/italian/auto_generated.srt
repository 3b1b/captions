1
00:00:03,620 --> 00:00:06,859
Ti sei mai chiesto come sia possibile graffiare un CD o 

2
00:00:06,859 --> 00:00:10,100
un DVD e continuare a riprodurre tutto ciò che contiene?

3
00:00:10,900 --> 00:00:14,087
Il graffio influisce davvero sugli 1 e sugli 0 sul disco, 

4
00:00:14,087 --> 00:00:16,779
quindi legge dati diversi da quelli memorizzati, 

5
00:00:16,779 --> 00:00:20,955
ma a meno che non sia parecchio graffiato, i bit letti vengono decodificati 

6
00:00:20,955 --> 00:00:24,527
esattamente nello stesso file che è stato codificato su di esso, 

7
00:00:24,527 --> 00:00:27,440
un copia bit per bit, nonostante tutti quegli errori.

8
00:00:27,440 --> 00:00:32,106
C'è tutta una serie di trucchi matematici che ci consentono di archiviare dati e, 

9
00:00:32,106 --> 00:00:36,660
cosa altrettanto importante, di trasmetterli, in un modo resistente agli errori.

10
00:00:37,520 --> 00:00:41,600
Si, okay, in realtà non ci vuole molta intelligenza per trovare un modo per farlo.

11
00:00:42,060 --> 00:00:46,378
Qualsiasi file, sia esso un video, un suono o un testo, del codice, 

12
00:00:46,378 --> 00:00:50,380
un'immagine, qualunque cosa, alla fine è una sequenza di 1 e 0.

13
00:00:50,680 --> 00:00:53,798
E una strategia semplice per correggere un bit che viene invertito, 

14
00:00:53,798 --> 00:00:56,000
sarebbe di memorizzare tre copie di ciascun bit.

15
00:00:57,580 --> 00:01:00,770
Quindi la macchina che legge questo file potrebbe confrontare le 

16
00:01:00,770 --> 00:01:04,060
tre copie e prendere le migliori 2 su 3 quando c'è una discrepanza.

17
00:01:07,160 --> 00:01:10,860
Ma ciò significa utilizzare due terzi dello spazio per la ridondanza.

18
00:01:11,480 --> 00:01:14,288
E comunque, nonostante lo spazio sprecato, non è garantito 

19
00:01:14,288 --> 00:01:17,240
cosa accadrebbe se più di un bit alla volta venisse invertito.

20
00:01:17,980 --> 00:01:20,882
La domanda molto più interessante è come fare in modo che gli 

21
00:01:20,882 --> 00:01:24,020
errori possano essere corretti sprecando il minor spazio possibile.

22
00:01:24,520 --> 00:01:27,964
Ad esempio, usando il metodo che imparerai in questo video, 

23
00:01:27,964 --> 00:01:31,178
potresti memorizzare i tuoi dati in blocchi da 256 bit, 

24
00:01:31,178 --> 00:01:33,360
dove ciascun blocco utilizza 9 bit, 9!

25
00:01:33,760 --> 00:01:36,952
come una sorta di ridondanza, e gli altri 247 bit sono liberi 

26
00:01:36,952 --> 00:01:40,300
di trasportare qualunque messaggio o dato significativo desideri.

27
00:01:40,900 --> 00:01:43,789
E avverrà comunque che se qualche bit venisse invertito, 

28
00:01:43,789 --> 00:01:47,641
solo guardando questo blocco e niente di più, una macchina sarà in grado di 

29
00:01:47,641 --> 00:01:51,443
identificare che c'era un errore e precisamente dove si trovava in modo da 

30
00:01:51,443 --> 00:01:52,660
sapere come correggerlo.

31
00:01:52,660 --> 00:01:54,620
E onestamente, sembra una magia.

32
00:01:55,440 --> 00:01:58,066
E per questo particolare schema, se due bit vengono invertiti, 

33
00:01:58,066 --> 00:02:01,401
la macchina sarà almeno in grado di rilevare che si sono verificati due errori, 

34
00:02:01,401 --> 00:02:02,860
anche se non saprà come risolverli.

35
00:02:03,520 --> 00:02:06,900
Parleremo un po' più tardi di come questo si adatta a blocchi di dimensioni diverse.

36
00:02:07,860 --> 00:02:10,398
I metodi che consentono di correggere errori come questo sono noti, 

37
00:02:10,398 --> 00:02:12,900
abbastanza ragionevolmente, come codici di correzione degli errori.

38
00:02:13,660 --> 00:02:16,359
Per gran parte del secolo scorso, questo campo è stato una 

39
00:02:16,359 --> 00:02:19,149
fonte davvero ricca di matematica sorprendentemente profonda 

40
00:02:19,149 --> 00:02:21,940
che viene incorporata nei dispositivi che usiamo ogni giorno.

41
00:02:22,840 --> 00:02:27,337
L'obiettivo qui è darti una comprensione molto approfondita di uno dei primi esempi, 

42
00:02:27,337 --> 00:02:28,660
noto come codice Hamming.

43
00:02:29,520 --> 00:02:32,968
E comunque, il modo in cui penso alla struttura di questo video non è tanto 

44
00:02:32,968 --> 00:02:35,327
quello di spiegarlo nel modo più diretto possibile, 

45
00:02:35,327 --> 00:02:38,050
quanto più una questione di spingerti a inventarlo da solo, 

46
00:02:38,050 --> 00:02:39,820
con una piccola guida gentile qua e là.

47
00:02:40,120 --> 00:02:42,938
Quindi, quando hai la sensazione di vedere dove sta andando ad un certo punto, 

48
00:02:42,938 --> 00:02:45,221
prenditi quel momento per fare una pausa, prevedere attivamente 

49
00:02:45,221 --> 00:02:46,720
quale sarà lo schema prima che te lo dica.

50
00:02:47,240 --> 00:02:50,442
Inoltre, se vuoi che la tua comprensione scenda al livello hardware, 

51
00:02:50,442 --> 00:02:54,248
Ben Eater ha realizzato un video insieme a questo che ti mostra come implementare 

52
00:02:54,248 --> 00:02:58,240
effettivamente i codici Hamming sulle breadboard, il che è estremamente soddisfacente.

53
00:02:59,300 --> 00:03:03,419
Dovresti sapere che i codici di Hamming non sono così diffusi come i codici più moderni, 

54
00:03:03,419 --> 00:03:06,890
come l'algoritmo di Reed-Solomon, ma c'è una certa magia nel contrasto tra 

55
00:03:06,890 --> 00:03:10,037
quanto questo compito sembra impossibile all'inizio e quanto sembra 

56
00:03:10,037 --> 00:03:13,000
assolutamente ragionevole una volta. impari a conoscere Hamming.

57
00:03:13,720 --> 00:03:18,000
Il principio di base della correzione degli errori è che in un vasto spazio di tutti 

58
00:03:18,000 --> 00:03:22,180
i messaggi possibili, solo alcuni sottoinsiemi saranno considerati messaggi validi.

59
00:03:22,800 --> 00:03:25,256
Per analogia, pensa alle parole scritte correttamente 

60
00:03:25,256 --> 00:03:26,940
e alle parole scritte in modo errato.

61
00:03:28,900 --> 00:03:31,239
Ogni volta che un messaggio valido viene alterato, 

62
00:03:31,239 --> 00:03:35,230
il destinatario è responsabile di correggere ciò che vede al vicino valido più vicino, 

63
00:03:35,230 --> 00:03:37,340
come potresti fare con un errore di battitura.

64
00:03:38,220 --> 00:03:41,206
Tuttavia, elaborare un algoritmo concreto per classificare in modo 

65
00:03:41,206 --> 00:03:44,060
efficiente messaggi come questo richiede una certa intelligenza.

66
00:03:46,780 --> 00:03:50,358
La storia inizia negli anni '40, quando un giovane Richard Hamming lavorava 

67
00:03:50,358 --> 00:03:53,889
per i Bell Labs e parte del suo lavoro prevedeva l'utilizzo di un computer 

68
00:03:53,889 --> 00:03:57,420
a scheda perforata molto costoso e al quale aveva solo un accesso limitato.

69
00:03:57,800 --> 00:04:00,576
E i programmi che continuava a far passare continuavano a fallire, 

70
00:04:00,576 --> 00:04:02,400
perché ogni tanto qualcuno veniva frainteso.

71
00:04:03,120 --> 00:04:05,216
Essendo la frustrazione il crogiolo dell'invenzione, 

72
00:04:05,216 --> 00:04:08,420
ne fu così stufo che inventò il primo codice di correzione degli errori al mondo.

73
00:04:09,060 --> 00:04:11,854
Esistono molti modi diversi per strutturare i codici di Hamming, 

74
00:04:11,854 --> 00:04:15,380
ma come primo passo li esamineremo nel modo in cui Hamming stesso li ha concepiti.

75
00:04:16,519 --> 00:04:20,940
Usiamo un esempio semplice, ma non troppo semplice, un blocco di 16 bit.

76
00:04:21,820 --> 00:04:24,740
Numereremo le posizioni di questi bit da 0 a 15.

77
00:04:25,620 --> 00:04:29,702
I dati effettivi che vogliamo archiviare costituiranno solo 12 di questi bit, 

78
00:04:29,702 --> 00:04:33,000
mentre 4 posizioni sono riservate come una sorta di ridondanza.

79
00:04:33,900 --> 00:04:36,494
La parola ridondante qui non significa semplicemente copia, 

80
00:04:36,494 --> 00:04:40,040
dopotutto quei 4 bit non ci danno abbastanza spazio per copiare ciecamente i dati.

81
00:04:40,720 --> 00:04:44,506
Dovranno invece rappresentare un tipo di ridondanza molto più sfumata e intelligente, 

82
00:04:44,506 --> 00:04:47,280
senza aggiungere nuove informazioni, ma aggiungendo resilienza.

83
00:04:48,600 --> 00:04:52,273
Potresti aspettarti che questi 4 pezzi speciali siano ben confezionati insieme, 

84
00:04:52,273 --> 00:04:54,844
magari alla fine o qualcosa del genere, ma come vedrai, 

85
00:04:54,844 --> 00:04:58,288
averli in posizioni che sono potenze di 2 consente di ottenere qualcosa di 

86
00:04:58,288 --> 00:04:59,620
veramente elegante alla fine.

87
00:05:00,200 --> 00:05:01,942
Potrebbe anche darti un piccolo suggerimento su 

88
00:05:01,942 --> 00:05:03,540
come questo si adatta ai blocchi più grandi.

89
00:05:04,900 --> 00:05:07,842
Inoltre tecnicamente finiscono per essere solo 11 bit di dati, 

90
00:05:07,842 --> 00:05:11,485
scoprirai che c'è una leggera sfumatura per ciò che accade nella posizione 0, 

91
00:05:11,485 --> 00:05:13,260
ma per ora non preoccuparti di questo.

92
00:05:14,140 --> 00:05:17,587
Come ogni algoritmo di correzione degli errori, coinvolgerà due giocatori, 

93
00:05:17,587 --> 00:05:21,540
un mittente responsabile dell'impostazione di questi 4 bit speciali e un destinatario 

94
00:05:21,540 --> 00:05:25,540
responsabile dell'esecuzione di una sorta di controllo e della correzione degli errori.

95
00:05:26,300 --> 00:05:29,113
Naturalmente, le parole mittente e destinatario si riferiscono in realtà 

96
00:05:29,113 --> 00:05:31,194
a macchine o software che eseguono tutti i controlli, 

97
00:05:31,194 --> 00:05:33,198
e l'idea di messaggio è intesa in modo molto ampio, 

98
00:05:33,198 --> 00:05:34,740
per includere cose come l'archiviazione.

99
00:05:35,340 --> 00:05:38,619
Dopotutto, archiviare dati è come inviare un messaggio solo 

100
00:05:38,619 --> 00:05:41,680
dal passato al futuro invece che da un luogo a un altro.

101
00:05:42,560 --> 00:05:45,983
Questa è la configurazione, ma prima di approfondire dobbiamo parlare di 

102
00:05:45,983 --> 00:05:50,063
un'idea correlata che era fresca nella mente di Hamming al momento della sua scoperta, 

103
00:05:50,063 --> 00:05:53,251
un metodo che consente di rilevare eventuali errori di singoli bit, 

104
00:05:53,251 --> 00:05:56,300
ma non di correggerli, noto nel settore come controllo di parità.

105
00:05:56,880 --> 00:06:00,392
Per un controllo di parità, separiamo solo un singolo bit della cui ottimizzazione 

106
00:06:00,392 --> 00:06:03,820
il mittente è responsabile, mentre il resto è libero di trasportare un messaggio.

107
00:06:04,880 --> 00:06:08,137
L'unico compito di questo bit speciale è assicurarsi che 

108
00:06:08,137 --> 00:06:11,280
il numero totale di 1 nel messaggio sia un numero pari.

109
00:06:12,080 --> 00:06:15,521
Quindi, ad esempio, in questo momento, il numero totale di 1 è 7, è strano, 

110
00:06:15,521 --> 00:06:18,737
quindi il mittente deve invertire quel bit speciale in modo che sia 1, 

111
00:06:18,737 --> 00:06:19,960
rendendo il conteggio pari.

112
00:06:20,800 --> 00:06:23,732
Ma se il blocco fosse già iniziato con un numero pari di 1, 

113
00:06:23,732 --> 00:06:26,420
allora questo bit speciale sarebbe stato mantenuto a 0.

114
00:06:27,340 --> 00:06:29,572
È piuttosto semplice, ingannevolmente semplice, 

115
00:06:29,572 --> 00:06:32,501
ma è un modo incredibilmente elegante per distillare l'idea di 

116
00:06:32,501 --> 00:06:35,570
cambiamento ovunque in un messaggio per rifletterlo in un singolo 

117
00:06:35,570 --> 00:06:36,780
frammento di informazione.

118
00:06:37,500 --> 00:06:41,677
Nota se qualsiasi parte di questo messaggio viene invertita, 

119
00:06:41,677 --> 00:06:46,540
da 0 a 1 o da 1 a 0, cambia il conteggio totale di 1 da pari a dispari.

120
00:06:47,980 --> 00:06:52,209
Quindi, se sei il destinatario, guardi questo messaggio e vedi un numero dispari di 1, 

121
00:06:52,209 --> 00:06:55,175
puoi sapere con certezza che si è verificato qualche errore, 

122
00:06:55,175 --> 00:06:57,460
anche se potresti non avere idea di dove fosse.

123
00:06:58,500 --> 00:07:03,340
In gergo, se un gruppo di bit ha un numero pari o dispari di 1 è noto come parità.

124
00:07:04,860 --> 00:07:07,464
Potresti anche usare i numeri e dire che la parità è 0 o 1, 

125
00:07:07,464 --> 00:07:10,720
il che in genere è più utile una volta che inizi a fare calcoli con l'idea.

126
00:07:11,220 --> 00:07:13,282
E questo bit speciale che il mittente utilizza 

127
00:07:13,282 --> 00:07:15,520
per controllare la parità è chiamato bit di parità.

128
00:07:17,560 --> 00:07:21,128
E in realtà, dovremmo essere chiari, se il ricevitore vede una parità dispari, 

129
00:07:21,128 --> 00:07:23,839
non significa necessariamente che c'è stato un solo errore, 

130
00:07:23,839 --> 00:07:27,182
potrebbero esserci stati 3 errori, o 5, o qualsiasi altro numero dispari, 

131
00:07:27,182 --> 00:07:29,260
ma possono saperlo con certezza che non era 0.

132
00:07:29,980 --> 00:07:33,520
D'altra parte, se ci fossero stati 2 errori, o un numero pari di errori, 

133
00:07:33,520 --> 00:07:37,546
il conteggio finale di 1 sarebbe ancora pari, quindi il destinatario non può avere 

134
00:07:37,546 --> 00:07:41,523
piena fiducia che un conteggio pari significhi necessariamente che il messaggio è 

135
00:07:41,523 --> 00:07:42,300
privo di errori.

136
00:07:42,840 --> 00:07:45,875
Potresti lamentarti del fatto che un messaggio che viene incasinato con 

137
00:07:45,875 --> 00:07:49,080
solo 2 bit di inversione è piuttosto debole e avresti assolutamente ragione.

138
00:07:49,700 --> 00:07:52,985
Tieni presente, tuttavia, che non esiste un metodo per il rilevamento 

139
00:07:52,985 --> 00:07:56,036
o la correzione degli errori che possa darti la certezza al 100% 

140
00:07:56,036 --> 00:07:58,900
che il messaggio che ricevi sia quello previsto dal mittente.

141
00:07:59,580 --> 00:08:02,531
Dopotutto, un rumore casuale sufficiente potrebbe sempre trasformare 

142
00:08:02,531 --> 00:08:05,440
un messaggio valido in un altro messaggio valido solo per puro caso.

143
00:08:06,240 --> 00:08:10,627
L'obiettivo è invece quello di elaborare uno schema che sia robusto fino a un certo 

144
00:08:10,627 --> 00:08:15,014
numero massimo di errori, o magari ridurre la probabilità di un falso positivo come 

145
00:08:15,014 --> 00:08:15,380
questo.

146
00:08:16,260 --> 00:08:18,959
I controlli di parità da soli sono piuttosto deboli, 

147
00:08:18,959 --> 00:08:23,187
ma distillando l’idea di cambiamento in un intero messaggio fino a un singolo bit, 

148
00:08:23,187 --> 00:08:27,160
ciò che ci danno è un potente elemento costitutivo per schemi più sofisticati.

149
00:08:27,940 --> 00:08:31,370
Ad esempio, mentre Hamming stava cercando un modo per identificare dove si è 

150
00:08:31,370 --> 00:08:33,687
verificato un errore, non solo che si è verificato, 

151
00:08:33,687 --> 00:08:37,251
la sua intuizione chiave è stata che se si applicano alcuni controlli di parità 

152
00:08:37,251 --> 00:08:40,949
non all'intero messaggio, ma a determinati sottoinsiemi accuratamente selezionati, 

153
00:08:40,949 --> 00:08:44,291
è possibile chiedere una serie più raffinata di domande che individuano la 

154
00:08:44,291 --> 00:08:45,940
posizione di ogni singolo errore bit.

155
00:08:46,680 --> 00:08:50,152
La sensazione generale è un po’ come giocare a un gioco di 20 domande, 

156
00:08:50,152 --> 00:08:53,380
ponendo domande sì o no che dimezzano lo spazio delle possibilità.

157
00:08:54,160 --> 00:08:58,062
Ad esempio, supponiamo di eseguire un controllo di parità solo su questi 8 bit, 

158
00:08:58,062 --> 00:08:59,380
tutte le posizioni dispari.

159
00:09:00,100 --> 00:09:04,101
Quindi, se viene rilevato un errore, fornisce al ricevitore qualche informazione in più 

160
00:09:04,101 --> 00:09:07,921
su dove si trova specificamente l'errore, vale a dire che si trova in una posizione 

161
00:09:07,921 --> 00:09:08,240
strana.

162
00:09:08,940 --> 00:09:11,683
Se non viene rilevato alcun errore tra questi 8 bit, 

163
00:09:11,683 --> 00:09:16,240
significa che non c'è alcun errore o che si trova da qualche parte nelle posizioni pari.

164
00:09:17,180 --> 00:09:20,473
Potresti pensare che limitare un controllo di parità alla metà dei bit 

165
00:09:20,473 --> 00:09:24,555
lo renda meno efficace, ma quando viene eseguito insieme ad altri controlli ben scelti, 

166
00:09:24,555 --> 00:09:27,200
controintuitivamente ci dà qualcosa di molto più potente.

167
00:09:29,240 --> 00:09:32,013
Per impostare effettivamente il controllo di parità, ricorda, 

168
00:09:32,013 --> 00:09:35,725
è necessario destinare qualche bit speciale che abbia il controllo della parità di 

169
00:09:35,725 --> 00:09:36,620
quell'intero gruppo.

170
00:09:37,480 --> 00:09:39,180
Qui scegliamo semplicemente la posizione 1.

171
00:09:39,720 --> 00:09:42,987
Nell'esempio mostrato, la parità di questi 8 bit è attualmente dispari, 

172
00:09:42,987 --> 00:09:46,980
quindi il mittente è responsabile della commutazione di quel bit di parità e ora è pari.

173
00:09:47,940 --> 00:09:50,680
Questo è solo 1 dei 4 controlli di parità che faremo.

174
00:09:50,920 --> 00:09:54,472
Il secondo controllo è tra gli 8 bit nella metà destra della griglia, 

175
00:09:54,472 --> 00:09:56,300
almeno come l'abbiamo disegnato qui.

176
00:09:56,680 --> 00:09:59,840
Questa volta potremmo usare la posizione 2 come bit di parità, 

177
00:09:59,840 --> 00:10:02,849
quindi questi 8 bit hanno già una parità pari e il mittente 

178
00:10:02,849 --> 00:10:06,060
può sentirsi a proprio agio lasciando invariato il bit numero 2.

179
00:10:07,020 --> 00:10:11,173
D'altra parte, se il ricevitore controlla la parità di questo gruppo e scopre 

180
00:10:11,173 --> 00:10:15,380
che è dispari, saprà che l'errore è da qualche parte tra questi 8 bit a destra.

181
00:10:15,820 --> 00:10:18,176
Altrimenti significa che non ci sono errori oppure 

182
00:10:18,176 --> 00:10:20,580
che l'errore è da qualche parte nella metà sinistra.

183
00:10:21,120 --> 00:10:23,478
Oppure immagino che potrebbero esserci stati due errori, 

184
00:10:23,478 --> 00:10:26,500
ma per ora assumeremo che ci sia al massimo un errore nell'intero blocco.

185
00:10:26,940 --> 00:10:28,740
Le cose si guastano completamente per qualcosa di più.

186
00:10:29,160 --> 00:10:31,018
Ecco, prima di esaminare i prossimi due controlli, 

187
00:10:31,018 --> 00:10:33,970
prendiamoci un momento per pensare a cosa ci permettono di fare questi primi due 

188
00:10:33,970 --> 00:10:35,100
quando li consideriamo insieme.

189
00:10:35,800 --> 00:10:39,660
Supponiamo che rilevi un errore tra le colonne dispari e nella metà destra.

190
00:10:40,200 --> 00:10:43,040
Significa necessariamente che l'errore è da qualche parte nell'ultima colonna.

191
00:10:43,820 --> 00:10:47,723
Se non c'erano errori nella colonna dispari ma ce n'era uno nella metà destra, 

192
00:10:47,723 --> 00:10:49,700
significa che è nella penultima colonna.

193
00:10:50,440 --> 00:10:53,948
Allo stesso modo, se c'è un errore nelle colonne dispari ma non nella metà destra, 

194
00:10:53,948 --> 00:10:56,020
sai che è da qualche parte nella seconda colonna.

195
00:10:56,020 --> 00:10:58,640
E se nessuno dei due controlli di parità rileva nulla, 

196
00:10:58,640 --> 00:11:02,024
significa che l'unico posto in cui potrebbe trovarsi un errore è nella 

197
00:11:02,024 --> 00:11:03,120
colonna più a sinistra.

198
00:11:03,340 --> 00:11:06,120
Ma potrebbe anche semplicemente significare che non è presente alcun errore.

199
00:11:06,300 --> 00:11:08,508
Il che è un modo piuttosto elaborato per dire che due 

200
00:11:08,508 --> 00:11:10,840
controlli di parità ci permettono di definire la colonna.

201
00:11:11,480 --> 00:11:13,640
Da qui probabilmente puoi intuire cosa segue.

202
00:11:13,800 --> 00:11:16,140
Facciamo sostanzialmente la stessa cosa, ma per le righe.

203
00:11:16,440 --> 00:11:18,982
Verrà effettuato un controllo di parità sulle righe dispari, 

204
00:11:18,982 --> 00:11:20,900
utilizzando la posizione 4 come bit di parità.

205
00:11:21,380 --> 00:11:24,061
Quindi in questo esempio quel gruppo ha già una parità pari, 

206
00:11:24,061 --> 00:11:25,820
quindi il bit 4 verrebbe impostato su 0.

207
00:11:26,560 --> 00:11:29,461
E infine c'è un controllo di parità sulle due righe inferiori, 

208
00:11:29,461 --> 00:11:31,580
utilizzando la posizione 8 come bit di parità.

209
00:11:32,120 --> 00:11:34,608
In questo caso, sembra che il mittente debba attivare 

210
00:11:34,608 --> 00:11:36,820
il bit 8 per garantire la parità pari al gruppo.

211
00:11:37,700 --> 00:11:40,143
Proprio come i primi due controlli ci permettono di fissare la colonna, 

212
00:11:40,143 --> 00:11:41,840
i due successivi ti permettono di fissare la riga.

213
00:11:42,880 --> 00:11:46,182
Ad esempio, immagina che durante la trasmissione si verifichi un errore, 

214
00:11:46,182 --> 00:11:47,540
ad esempio, nella posizione 3.

215
00:11:48,180 --> 00:11:50,707
Bene, questo influisce sul primo gruppo di parità e influisce 

216
00:11:50,707 --> 00:11:53,154
anche sul secondo gruppo di parità, quindi il ricevitore sa 

217
00:11:53,154 --> 00:11:55,560
che c'è un errore da qualche parte nella colonna di destra.

218
00:11:56,100 --> 00:12:00,540
Ma non influisce sul terzo gruppo e non influisce sul quarto gruppo.

219
00:12:01,240 --> 00:12:04,221
E ciò consente al ricevitore di individuare l'errore fino alla prima riga, 

220
00:12:04,221 --> 00:12:07,520
che significa necessariamente la posizione 3, in modo da poter correggere l'errore.

221
00:12:08,580 --> 00:12:11,346
Potresti divertirti a prenderti un momento per convincerti che 

222
00:12:11,346 --> 00:12:14,157
le risposte a queste quattro domande ti permetteranno sempre di 

223
00:12:14,157 --> 00:12:17,100
individuare un luogo specifico, indipendentemente da dove si trovi.

224
00:12:17,720 --> 00:12:20,366
In effetti, i più astuti tra voi potrebbero anche notare 

225
00:12:20,366 --> 00:12:23,060
una connessione tra queste domande e il conteggio binario.

226
00:12:23,500 --> 00:12:26,210
E se lo fai, lasciami ancora una volta sottolineare, fare una pausa, 

227
00:12:26,210 --> 00:12:28,920
provare tu stesso a stabilire il collegamento prima che io lo rovini.

228
00:12:30,500 --> 00:12:34,436
Se ti stai chiedendo cosa succede se un bit di parità stesso viene influenzato, 

229
00:12:34,436 --> 00:12:36,060
beh, puoi semplicemente provarlo.

230
00:12:36,440 --> 00:12:40,288
Prenditi un momento per pensare a come qualsiasi errore tra questi quattro bit speciali 

231
00:12:40,288 --> 00:12:44,180
verrà rintracciato proprio come qualsiasi altro, con lo stesso gruppo di quattro domande.

232
00:12:47,060 --> 00:12:50,059
Non ha molta importanza, poiché alla fine ciò che vogliamo è proteggere i 

233
00:12:50,059 --> 00:12:53,100
bit del messaggio, i bit di correzione degli errori continuano a viaggiare.

234
00:12:53,600 --> 00:12:55,547
Ma proteggere anche quelle parti è qualcosa che 

235
00:12:55,547 --> 00:12:57,820
naturalmente cade fuori dallo schema come sottoprodotto.

236
00:12:59,200 --> 00:13:01,760
Potresti anche divertirti ad anticipare come tutto questo si espanderà.

237
00:13:02,300 --> 00:13:05,532
Se utilizzassimo un blocco di dimensione 256 bit, ad esempio, 

238
00:13:05,532 --> 00:13:09,182
per individuare una posizione, sarebbero necessarie solo otto domande 

239
00:13:09,182 --> 00:13:12,780
sì o no per effettuare una ricerca binaria fino a un punto specifico.

240
00:13:15,640 --> 00:13:18,136
E ricorda, ogni domanda richiede la rinuncia di un solo 

241
00:13:18,136 --> 00:13:20,500
bit per impostare il controllo di parità appropriato.

242
00:13:23,160 --> 00:13:26,112
Alcuni di voi potrebbero già vederlo, ma parleremo più tardi del modo 

243
00:13:26,112 --> 00:13:29,360
sistematico per scoprire quali sono queste domande in appena un minuto o due.

244
00:13:29,880 --> 00:13:31,591
Speriamo che questo schizzo sia sufficiente per 

245
00:13:31,591 --> 00:13:33,660
apprezzare l'efficienza di ciò che stiamo sviluppando qui.

246
00:13:33,660 --> 00:13:36,911
La prima cosa, ad eccezione degli otto bit di parità evidenziati, 

247
00:13:36,911 --> 00:13:41,000
può essere qualunque cosa tu voglia, portando qualunque messaggio o dato tu voglia.

248
00:13:41,720 --> 00:13:44,270
Gli 8 bit sono ridondanti nel senso che sono completamente 

249
00:13:44,270 --> 00:13:46,907
determinati dal resto del messaggio, ma in un modo molto più 

250
00:13:46,907 --> 00:13:50,020
intelligente rispetto alla semplice copia del messaggio nel suo insieme.

251
00:13:53,600 --> 00:13:56,013
Eppure, con così poco sacrificio, sarai in grado di 

252
00:13:56,013 --> 00:13:58,380
identificare e correggere qualsiasi singolo errore.

253
00:13:59,200 --> 00:14:00,400
Be 'quasi.

254
00:14:00,960 --> 00:14:04,935
Ok, quindi l'unico problema qui è che se nessuno dei quattro controlli di parità 

255
00:14:04,935 --> 00:14:08,713
rileva un errore, il che significa che i sottoinsiemi di 8 bit appositamente 

256
00:14:08,713 --> 00:14:12,296
selezionati hanno tutti parità pari, proprio come previsto dal mittente, 

257
00:14:12,296 --> 00:14:15,044
allora significa che non si è verificato alcun errore , 

258
00:14:15,044 --> 00:14:16,860
oppure ci restringe alla posizione 0.

259
00:14:17,740 --> 00:14:22,151
Vedete, con quattro domande sì o no, abbiamo 16 possibili risultati per i nostri 

260
00:14:22,151 --> 00:14:26,726
controlli di parità, e all'inizio sembra perfetto per individuare 1 posizione su 16 

261
00:14:26,726 --> 00:14:30,375
nel blocco, ma è necessario comunicare anche un 17esimo risultato, 

262
00:14:30,375 --> 00:14:31,900
il nessun errore condizione.

263
00:14:33,020 --> 00:14:37,300
La soluzione qui è in realtà piuttosto semplice, dimentica completamente lo 0° bit.

264
00:14:37,840 --> 00:14:40,630
Quindi, quando eseguiamo i nostri quattro controlli di parità e vediamo 

265
00:14:40,630 --> 00:14:43,460
che sono tutti pari, significa inequivocabilmente che non ci sono errori.

266
00:14:44,240 --> 00:14:47,217
Ciò significa che invece di lavorare con un blocco a 16 bit, 

267
00:14:47,217 --> 00:14:50,145
lavoriamo con un blocco a 15 bit, in cui 11 bit sono liberi 

268
00:14:50,145 --> 00:14:53,220
di trasportare un messaggio e 4 di essi sono lì per ridondanza.

269
00:14:53,780 --> 00:14:56,316
E con questo, ora abbiamo quello che le persone 

270
00:14:56,316 --> 00:14:58,800
del settore chiamerebbero codice Hamming 15-11.

271
00:14:59,860 --> 00:15:03,607
Detto questo, è bello avere una dimensione del blocco che sia una potenza netta di 2, 

272
00:15:03,607 --> 00:15:06,266
e c'è un modo intelligente per mantenere lo 0° bit in giro e 

273
00:15:06,266 --> 00:15:08,140
fargli fare un po' di lavoro extra per noi.

274
00:15:08,700 --> 00:15:11,222
Se lo usiamo come bit di parità nell'intero blocco, 

275
00:15:11,222 --> 00:15:15,540
ci consente effettivamente di rilevare, anche se non possiamo correggere, errori a 2 bit.

276
00:15:16,160 --> 00:15:16,820
Ecco come funziona.

277
00:15:17,180 --> 00:15:20,267
Dopo aver impostato questi quattro bit speciali di correzione degli errori, 

278
00:15:20,267 --> 00:15:23,152
impostiamo quello 0 in modo che la parità dell'intero blocco sia pari, 

279
00:15:23,152 --> 00:15:24,940
proprio come un normale controllo di parità.

280
00:15:25,700 --> 00:15:29,697
Ora, se c'è un errore di un solo bit, la parità dell'intero blocco diventa dispari, 

281
00:15:29,697 --> 00:15:33,600
ma lo rileveremmo comunque grazie ai quattro controlli di correzione degli errori.

282
00:15:34,160 --> 00:15:38,197
Tuttavia, se si verificano due errori, la parità complessiva tornerà ad essere pari, 

283
00:15:38,197 --> 00:15:41,854
ma il ricevitore vedrebbe comunque che si è verificato almeno qualche errore 

284
00:15:41,854 --> 00:15:45,180
a causa di ciò che sta accadendo con quei quattro controlli di parità.

285
00:15:45,180 --> 00:15:48,985
Quindi, se notano una parità nel complesso, ma succede qualcosa di diverso da zero 

286
00:15:48,985 --> 00:15:52,700
con gli altri controlli, significa loro che si sono verificati almeno due errori.

287
00:15:53,520 --> 00:15:54,000
Non è intelligente?

288
00:15:54,300 --> 00:15:56,988
Anche se non possiamo correggere quegli errori a 2 bit, 

289
00:15:56,988 --> 00:16:01,260
semplicemente rimettendo in funzione quel piccolo e fastidioso bit 0, possiamo rilevarli.

290
00:16:02,260 --> 00:16:05,220
Questo è piuttosto standard, è noto come codice Hamming esteso.

291
00:16:06,540 --> 00:16:10,766
Tecnicamente parlando, ora hai una descrizione completa di cosa fa un codice Hamming, 

292
00:16:10,766 --> 00:16:12,880
almeno per l'esempio di un blocco a 16 bit.

293
00:16:12,880 --> 00:16:17,075
Ma penso che troverai più soddisfacente verificare la tua comprensione e consolidare 

294
00:16:17,075 --> 00:16:21,320
tutto fino a questo punto facendo tu stesso un esempio completo dall'inizio alla fine.

295
00:16:22,080 --> 00:16:24,300
Lo esaminerò insieme a te, così potrai controllarti tu stesso.

296
00:16:25,120 --> 00:16:28,347
Per impostare un messaggio, che si tratti di un messaggio letterale 

297
00:16:28,347 --> 00:16:32,381
che stai traducendo nello spazio o di alcuni dati che desideri archiviare nel tempo, 

298
00:16:32,381 --> 00:16:34,660
il primo passo è dividerlo in blocchi da 11 bit.

299
00:16:35,580 --> 00:16:39,760
Ogni pezzo verrà impacchettato in un blocco a 16 bit resistente agli errori.

300
00:16:39,760 --> 00:16:43,220
Quindi prendiamo questo come esempio e risolviamolo davvero.

301
00:16:43,740 --> 00:16:44,940
Vai avanti, fallo davvero!

302
00:16:45,220 --> 00:16:47,020
Facciamo una pausa e proviamo a mettere insieme questo blocco.

303
00:16:52,720 --> 00:16:53,680
Ok, sei pronto?

304
00:16:54,240 --> 00:16:57,095
Ricorda, la posizione 0 insieme alle altre potenze di 2 sono 

305
00:16:57,095 --> 00:16:59,388
riservate al compito di correzione degli errori, 

306
00:16:59,388 --> 00:17:03,320
quindi inizi posizionando i bit del messaggio in tutti i punti rimanenti, in ordine.

307
00:17:05,339 --> 00:17:08,967
È necessario che questo gruppo abbia una parità pari, cosa che già ha, 

308
00:17:08,967 --> 00:17:12,339
quindi dovresti impostare il bit di parità nella posizione 1 su 0.

309
00:17:13,020 --> 00:17:15,547
Il gruppo successivo inizia con una parità dispari, 

310
00:17:15,547 --> 00:17:17,880
quindi dovresti impostare il bit di parità su 1.

311
00:17:19,160 --> 00:17:21,343
Il gruppo successivo inizia con una parità dispari, 

312
00:17:21,343 --> 00:17:24,240
quindi anche in questo caso dovresti impostare il bit di parità su 1.

313
00:17:24,780 --> 00:17:27,042
E anche il gruppo finale ha una parità dispari, 

314
00:17:27,042 --> 00:17:30,060
il che significa che impostiamo quel bit nella posizione 8 su 1.

315
00:17:31,300 --> 00:17:35,373
E poi, come passaggio finale, l'intero blocco ora ha una parità pari, 

316
00:17:35,373 --> 00:17:40,320
il che significa che puoi impostare il bit numero 0, il bit di parità generale, su 0.

317
00:17:41,340 --> 00:17:44,615
Quindi, quando questo blocco viene espulso, la parità dei quattro 

318
00:17:44,615 --> 00:17:48,140
sottoinsiemi speciali e del blocco nel suo insieme sarà pari, ovvero 0.

319
00:17:48,820 --> 00:17:52,180
Come seconda parte dell'esercizio, ti faremo interpretare il ruolo del ricevente.

320
00:17:53,480 --> 00:17:56,730
Naturalmente, ciò significherebbe che non sapete già quale sia questo messaggio, 

321
00:17:56,730 --> 00:17:59,780
forse alcuni di voi lo hanno memorizzato, ma supponiamo che non lo sappiate.

322
00:18:00,020 --> 00:18:03,685
Quello che farò è cambiare 0, 1 o 2 dei bit in 

323
00:18:03,685 --> 00:18:07,740
quel blocco e poi chiederti di capire cosa ho fatto.

324
00:18:08,260 --> 00:18:10,810
Quindi, ancora una volta, fai una pausa e prova a risolverlo.

325
00:18:18,790 --> 00:18:23,350
Ok, quindi tu come ricevitore ora controlli il primo gruppo di parità e puoi vedere 

326
00:18:23,350 --> 00:18:27,910
che è pari, quindi qualsiasi errore esistente dovrebbe trovarsi in una colonna pari.

327
00:18:29,690 --> 00:18:32,702
Il controllo successivo ci fornisce un numero dispari, 

328
00:18:32,702 --> 00:18:37,030
dicendoci che c'è almeno un errore e restringendoci a questa colonna specifica.

329
00:18:38,550 --> 00:18:41,790
Il terzo controllo è pari, riducendo ulteriormente le possibilità.

330
00:18:42,650 --> 00:18:45,999
E l'ultimo controllo di parità è strano, ci dice che c'è un errore da qualche 

331
00:18:45,999 --> 00:18:49,650
parte in fondo, che ormai come possiamo vedere deve essere nella posizione numero 10.

332
00:18:51,490 --> 00:18:53,886
Inoltre, la parità dell'intero blocco è strana, 

333
00:18:53,886 --> 00:18:57,530
il che ci dà la certezza che si sia verificato un ribaltamento e non due.

334
00:18:58,070 --> 00:18:59,970
Se sono tre o più, tutte le scommesse vengono annullate.

335
00:19:01,310 --> 00:19:05,877
Dopo aver corretto il bit numero 10, estraendo gli 11 bit che non sono stati utilizzati 

336
00:19:05,877 --> 00:19:09,822
per la correzione, otteniamo il segmento rilevante del messaggio originale, 

337
00:19:09,822 --> 00:19:14,390
che se lo riavvolgi e confronti è esattamente quello con cui abbiamo iniziato l'esempio.

338
00:19:15,710 --> 00:19:17,943
E ora che sai come fare tutto questo manualmente, 

339
00:19:17,943 --> 00:19:21,651
vorrei mostrarti come puoi realizzare la parte centrale di tutta questa logica con 

340
00:19:21,651 --> 00:19:23,170
una singola riga di codice Python.

341
00:19:23,870 --> 00:19:27,760
Vedi, quello che non ti ho ancora detto è quanto sia elegante questo algoritmo, 

342
00:19:27,760 --> 00:19:31,601
quanto sia semplice far sì che una macchina indichi la posizione di un errore, 

343
00:19:31,601 --> 00:19:35,394
come ridimensionarlo sistematicamente e come possiamo inquadrare tutto questo 

344
00:19:35,394 --> 00:19:38,750
come una singola operazione anziché più controlli di parità separati.

345
00:19:39,430 --> 00:19:41,310
Per capire cosa intendo, unisciti a me nella parte 2.

