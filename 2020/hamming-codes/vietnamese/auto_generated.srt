1
00:00:03,620 --> 00:00:06,935
Bạn đã bao giờ tự hỏi làm thế nào có thể làm xước một đĩa CD hoặc 

2
00:00:06,935 --> 00:00:10,100
DVD mà vẫn có thể phát lại bất cứ thứ gì nó đang lưu trữ không?

3
00:00:10,900 --> 00:00:13,956
Vết xước thực sự ảnh hưởng đến số 1 và 0 trên đĩa, 

4
00:00:13,956 --> 00:00:17,132
do đó nó đọc dữ liệu khác với những gì được lưu trữ, 

5
00:00:17,132 --> 00:00:21,327
nhưng trừ khi nó thực sự bị trầy xước, các bit mà nó đọc được sẽ được 

6
00:00:21,327 --> 00:00:25,702
giải mã thành cùng một tệp được mã hóa trên đó, một bit để sao chép bit, 

7
00:00:25,702 --> 00:00:27,440
bất chấp tất cả những lỗi đó.

8
00:00:27,440 --> 00:00:31,849
Có rất nhiều sự thông minh về toán học cho phép chúng ta lưu trữ dữ liệu và 

9
00:00:31,849 --> 00:00:36,200
quan trọng không kém là truyền dữ liệu theo cách có khả năng chống lại lỗi.

10
00:00:36,200 --> 00:00:40,880
Được rồi, thực ra không cần quá thông minh để nghĩ ra cách thực hiện việc này.

11
00:00:40,880 --> 00:00:45,242
Bất kỳ tập tin nào, cho dù đó là video, âm thanh hay văn bản, 

12
00:00:45,242 --> 00:00:50,380
một số mã, hình ảnh, bất cứ thứ gì, cuối cùng đều là một chuỗi số 1 và 0.

13
00:00:50,680 --> 00:00:53,453
Và một chiến lược đơn giản để sửa bất kỳ bit nào 

14
00:00:53,453 --> 00:00:56,000
bị đảo lộn là lưu trữ ba bản sao của mỗi bit.

15
00:00:57,580 --> 00:01:00,683
Sau đó, máy đọc tệp này có thể so sánh ba bản sao này và 

16
00:01:00,683 --> 00:01:04,060
luôn lấy 2 trên 3 bản tốt nhất bất cứ khi nào có sự khác biệt.

17
00:01:07,160 --> 00:01:10,860
Nhưng điều đó có nghĩa là sử dụng 2/3 dung lượng của bạn để dự phòng.

18
00:01:11,480 --> 00:01:13,735
Và thậm chí sau đó, đối với tất cả không gian bị bỏ đi, 

19
00:01:13,735 --> 00:01:17,240
không có gì đảm bảo chắc chắn về điều gì sẽ xảy ra nếu có nhiều hơn một bit bị đảo lộn.

20
00:01:17,980 --> 00:01:21,000
Câu hỏi thú vị hơn nhiều là làm thế nào để có thể 

21
00:01:21,000 --> 00:01:24,020
sửa lỗi trong khi chiếm ít không gian nhất có thể.

22
00:01:24,520 --> 00:01:28,176
Ví dụ: bằng cách sử dụng phương pháp bạn sẽ tìm hiểu về video này, 

23
00:01:28,176 --> 00:01:31,450
bạn có thể lưu trữ dữ liệu của mình trong các khối 256 bit, 

24
00:01:31,450 --> 00:01:33,360
trong đó mỗi khối sử dụng 9 bit, 9!

25
00:01:33,760 --> 00:01:36,977
hoạt động như một loại dự phòng và 247 bit còn lại có thể tự 

26
00:01:36,977 --> 00:01:40,300
do mang bất kỳ thông điệp hoặc dữ liệu có ý nghĩa nào bạn muốn.

27
00:01:40,900 --> 00:01:44,610
Và vẫn sẽ xảy ra trường hợp nếu bất kỳ bit nào bị đảo lộn ở đây, 

28
00:01:44,610 --> 00:01:47,350
chỉ cần nhìn vào khối này và không cần gì thêm, 

29
00:01:47,350 --> 00:01:51,175
máy sẽ có thể xác định rằng đã có lỗi và xác định chính xác lỗi đó 

30
00:01:51,175 --> 00:01:52,660
ở đâu để nó biết cách sửa.

31
00:01:52,660 --> 00:01:54,620
Và thành thật mà nói, điều đó giống như một phép thuật.

32
00:01:55,440 --> 00:01:58,170
Và đối với sơ đồ cụ thể này, nếu hai bit bị đảo lộn, 

33
00:01:58,170 --> 00:02:00,850
máy ít nhất sẽ có thể phát hiện ra rằng có hai lỗi, 

34
00:02:00,850 --> 00:02:02,860
mặc dù nó sẽ không biết cách sửa chúng.

35
00:02:03,520 --> 00:02:05,244
Chúng ta sẽ nói một lát sau về cách điều chỉnh tỷ 

36
00:02:05,244 --> 00:02:06,900
lệ này đối với các khối có kích thước khác nhau.

37
00:02:07,860 --> 00:02:10,428
Các phương pháp cho phép bạn sửa các lỗi như thế này 

38
00:02:10,428 --> 00:02:12,900
được biết đến một cách hợp lý dưới dạng mã sửa lỗi.

39
00:02:13,660 --> 00:02:17,772
Trong phần lớn thế kỷ trước, lĩnh vực này thực sự là một nguồn toán học sâu 

40
00:02:17,772 --> 00:02:21,940
sắc đáng kinh ngạc được tích hợp vào các thiết bị chúng ta sử dụng hàng ngày.

41
00:02:22,840 --> 00:02:27,280
Mục tiêu ở đây là giúp bạn hiểu rất kỹ về một trong những ví dụ sớm nhất, 

42
00:02:27,280 --> 00:02:28,660
được gọi là mã Hamming.

43
00:02:29,520 --> 00:02:33,033
Và nhân tiện, cách tôi nghĩ về cấu trúc của video này không phải là giải 

44
00:02:33,033 --> 00:02:36,402
thích nó một cách trực tiếp nhất có thể mà quan trọng hơn là thúc đẩy 

45
00:02:36,402 --> 00:02:39,820
bạn tự sáng tạo ra nó với một chút hướng dẫn nhẹ nhàng chỗ này chỗ kia.

46
00:02:40,120 --> 00:02:42,943
Vì vậy, khi bạn cảm thấy mình biết mọi chuyện sẽ đi đến đâu vào một thời điểm nào đó, 

47
00:02:42,943 --> 00:02:45,209
hãy dành thời gian đó để tạm dừng, chủ động dự đoán kế hoạch sẽ diễn 

48
00:02:45,209 --> 00:02:46,720
ra như thế nào trước khi tôi nói cho bạn biết.

49
00:02:47,240 --> 00:02:50,398
Ngoài ra, nếu bạn muốn hiểu sâu hơn ở cấp độ phần cứng, 

50
00:02:50,398 --> 00:02:53,952
Ben Eater đã tạo một video kết hợp với video này hướng dẫn bạn 

51
00:02:53,952 --> 00:02:58,240
cách thực sự triển khai mã Hamming trên bảng mạch, điều này cực kỳ thỏa mãn.

52
00:02:59,300 --> 00:03:03,185
Bạn nên biết, mã Hamming không được sử dụng rộng rãi như các mã hiện đại hơn, 

53
00:03:03,185 --> 00:03:06,473
như thuật toán Reed-Solomon, nhưng có một điều kỳ diệu nào đó đối 

54
00:03:06,473 --> 00:03:09,961
với sự tương phản giữa việc nhiệm vụ này có cảm giác bất khả thi ngay 

55
00:03:09,961 --> 00:03:13,000
từ đầu và nó có vẻ hoàn toàn hợp lý. bạn tìm hiểu về Hamming.

56
00:03:13,720 --> 00:03:17,897
Nguyên tắc cơ bản của việc sửa lỗi là trong một không gian rộng lớn gồm tất cả 

57
00:03:17,897 --> 00:03:22,180
các thông báo có thể có, chỉ một số tập hợp con được coi là các thông báo hợp lệ.

58
00:03:22,800 --> 00:03:26,940
Tương tự, hãy nghĩ về những từ viết đúng chính tả và những từ viết sai chính tả.

59
00:03:28,900 --> 00:03:31,150
Bất cứ khi nào một tin nhắn hợp lệ bị thay đổi, 

60
00:03:31,150 --> 00:03:35,183
người nhận có trách nhiệm sửa lại những gì họ nhìn thấy cho người hàng xóm hợp lệ gần 

61
00:03:35,183 --> 00:03:37,340
nhất, như bạn có thể làm với một lỗi đánh máy.

62
00:03:38,220 --> 00:03:41,211
Tuy nhiên, việc đưa ra một thuật toán cụ thể để phân loại hiệu 

63
00:03:41,211 --> 00:03:44,060
quả các tin nhắn như thế này cần có sự thông minh nhất định.

64
00:03:46,780 --> 00:03:50,311
Câu chuyện bắt đầu vào những năm 1940, khi chàng trai trẻ Richard Hamming đang 

65
00:03:50,311 --> 00:03:53,843
làm việc cho Bell Labs, và một số công việc của anh liên quan đến việc sử dụng 

66
00:03:53,843 --> 00:03:57,420
một chiếc máy tính thẻ đục lỗ rất đắt tiền mà anh chỉ có quyền truy cập hạn chế.

67
00:03:57,800 --> 00:04:00,422
Và các chương trình mà anh ấy thực hiện liên tục bị lỗi, 

68
00:04:00,422 --> 00:04:02,400
bởi vì thỉnh thoảng có một chút bị đọc sai.

69
00:04:03,120 --> 00:04:05,700
Sự thất vọng là lò thử thách của phát minh, anh ta chán 

70
00:04:05,700 --> 00:04:08,420
nản đến mức phát minh ra mã sửa lỗi đầu tiên trên thế giới.

71
00:04:09,060 --> 00:04:11,400
Có nhiều cách khác nhau để đóng khung mã Hamming, 

72
00:04:11,400 --> 00:04:15,380
nhưng bước đầu tiên chúng ta sẽ tìm hiểu nó theo cách mà chính Hamming nghĩ về chúng.

73
00:04:16,519 --> 00:04:20,940
Hãy sử dụng một ví dụ đơn giản nhưng không quá đơn giản, một khối 16 bit.

74
00:04:21,820 --> 00:04:24,740
Chúng ta sẽ đánh số vị trí của các bit này từ 0 đến 15.

75
00:04:25,620 --> 00:04:29,837
Dữ liệu thực tế mà chúng tôi muốn lưu trữ sẽ chỉ chiếm 12 bit trong số này, 

76
00:04:29,837 --> 00:04:33,000
trong khi 4 vị trí được dành riêng như một loại dự phòng.

77
00:04:33,900 --> 00:04:36,202
Từ dư thừa ở đây không đơn giản có nghĩa là sao chép, 

78
00:04:36,202 --> 00:04:40,040
xét cho cùng thì 4 bit đó không cho chúng ta đủ chỗ để sao chép dữ liệu một cách mù quáng.

79
00:04:40,720 --> 00:04:44,531
Thay vào đó, chúng sẽ cần phải là một loại dự phòng thông minh và sắc thái hơn nhiều, 

80
00:04:44,531 --> 00:04:47,280
không thêm bất kỳ thông tin mới nào mà thêm khả năng phục hồi.

81
00:04:48,600 --> 00:04:52,031
Bạn có thể mong đợi 4 bit đặc biệt này được kết hợp chặt chẽ với nhau, 

82
00:04:52,031 --> 00:04:55,028
có thể ở cuối hoặc thứ gì đó tương tự, nhưng như bạn sẽ thấy, 

83
00:04:55,028 --> 00:04:58,653
việc đặt chúng ở các vị trí có lũy thừa bằng 2 sẽ tạo ra thứ gì đó thực sự 

84
00:04:58,653 --> 00:04:59,620
thanh lịch vào cuối.

85
00:05:00,200 --> 00:05:03,540
Nó cũng có thể cung cấp cho bạn một gợi ý nhỏ về cách tỷ lệ này đối với các khối lớn hơn.

86
00:05:04,900 --> 00:05:07,722
Ngoài ra, về mặt kỹ thuật, nó chỉ có 11 bit dữ liệu, 

87
00:05:07,722 --> 00:05:11,183
bạn sẽ thấy có một sắc thái nhẹ cho những gì diễn ra ở vị trí 0, 

88
00:05:11,183 --> 00:05:13,260
nhưng hiện tại đừng lo lắng về điều đó.

89
00:05:14,140 --> 00:05:18,465
Giống như bất kỳ thuật toán sửa lỗi nào, điều này sẽ có sự tham gia của hai người chơi, 

90
00:05:18,465 --> 00:05:22,054
một người gửi chịu trách nhiệm thiết lập 4 bit đặc biệt này và một người 

91
00:05:22,054 --> 00:05:25,200
nhận chịu trách nhiệm thực hiện một số loại kiểm tra và sửa lỗi.

92
00:05:25,200 --> 00:05:28,311
Tất nhiên, từ người gửi và người nhận thực sự đề cập đến máy 

93
00:05:28,311 --> 00:05:31,577
móc hoặc phần mềm thực hiện tất cả các bước kiểm tra và ý tưởng 

94
00:05:31,577 --> 00:05:34,740
về tin nhắn được hiểu rất rộng, bao gồm những thứ như lưu trữ.

95
00:05:35,340 --> 00:05:38,510
Xét cho cùng, việc lưu trữ dữ liệu cũng giống như gửi một tin 

96
00:05:38,510 --> 00:05:41,680
nhắn từ quá khứ đến tương lai thay vì từ nơi này đến nơi khác.

97
00:05:42,560 --> 00:05:45,970
Đó là thiết lập, nhưng trước khi đi sâu vào chúng ta cần nói về một ý 

98
00:05:45,970 --> 00:05:49,527
tưởng liên quan mới mẻ trong đầu Hamming vào thời điểm ông phát hiện ra, 

99
00:05:49,527 --> 00:05:53,474
một phương pháp cho phép bạn phát hiện bất kỳ lỗi bit nào nhưng không sửa chúng, 

100
00:05:53,474 --> 00:05:56,300
đã biết trong kinh doanh như một sự kiểm tra tính chẵn lẻ.

101
00:05:56,880 --> 00:06:00,373
Để kiểm tra tính chẵn lẻ, chúng tôi chỉ tách ra một bit duy nhất mà người 

102
00:06:00,373 --> 00:06:03,820
gửi chịu trách nhiệm điều chỉnh và phần còn lại được tự do mang tin nhắn.

103
00:06:04,880 --> 00:06:08,046
Công việc duy nhất của bit đặc biệt này là đảm 

104
00:06:08,046 --> 00:06:11,280
bảo rằng tổng số số 1 trong tin nhắn là số chẵn.

105
00:06:12,080 --> 00:06:15,019
Vì vậy, ví dụ ngay bây giờ, tổng số 1 đó là 7, 

106
00:06:15,019 --> 00:06:19,960
là số lẻ nên người gửi cần lật bit đặc biệt đó thành 1, làm cho số đếm là chẵn.

107
00:06:20,800 --> 00:06:26,420
Nhưng nếu khối đã bắt đầu với số chẵn là 1 thì bit đặc biệt này sẽ được giữ ở mức 0.

108
00:06:27,340 --> 00:06:30,385
Điều này khá đơn giản, có vẻ đơn giản, nhưng đó là một cách 

109
00:06:30,385 --> 00:06:33,582
cực kỳ tinh tế để chắt lọc ý tưởng về sự thay đổi ở bất kỳ đâu 

110
00:06:33,582 --> 00:06:36,780
trong thông điệp để được phản ánh trong một thông tin duy nhất.

111
00:06:37,500 --> 00:06:41,525
Lưu ý nếu bất kỳ bit nào của thông báo này bị đảo ngược, 

112
00:06:41,525 --> 00:06:46,540
từ 0 thành 1 hoặc 1 thành 0, nó sẽ thay đổi tổng số 1 từ chẵn thành lẻ.

113
00:06:47,980 --> 00:06:52,223
Vì vậy, nếu bạn là người nhận, bạn nhìn vào tin nhắn này và thấy số lẻ là 1, 

114
00:06:52,223 --> 00:06:55,145
bạn có thể biết chắc chắn rằng đã xảy ra lỗi nào đó, 

115
00:06:55,145 --> 00:06:57,460
mặc dù bạn có thể không biết lỗi đó ở đâu.

116
00:06:58,500 --> 00:07:03,340
Trong thuật ngữ, việc một nhóm bit có số 1 chẵn hay lẻ được gọi là tính chẵn lẻ của nó.

117
00:07:04,860 --> 00:07:07,724
Bạn cũng có thể sử dụng các con số và nói số chẵn lẻ là 0 hoặc 1, 

118
00:07:07,724 --> 00:07:10,720
điều này thường hữu ích hơn khi bạn bắt đầu làm toán với ý tưởng này.

119
00:07:11,220 --> 00:07:13,535
Và bit đặc biệt này mà người gửi sử dụng để kiểm 

120
00:07:13,535 --> 00:07:15,520
soát tính chẵn lẻ được gọi là bit chẵn lẻ.

121
00:07:17,560 --> 00:07:21,444
Và trên thực tế, chúng ta nên nói rõ, nếu người nhận nhìn thấy một số chẵn lẻ lẻ, 

122
00:07:21,444 --> 00:07:24,760
điều đó không nhất thiết có nghĩa là chỉ có một lỗi, có thể có 3 lỗi, 

123
00:07:24,760 --> 00:07:28,123
hoặc 5 lỗi hoặc bất kỳ số lẻ nào khác, nhưng họ có thể biết chắc chắn. 

124
00:07:28,123 --> 00:07:29,260
rằng nó không phải là 0.

125
00:07:29,980 --> 00:07:35,527
Mặt khác, nếu có 2 lỗi hoặc bất kỳ số lỗi chẵn nào thì số 1 cuối cùng vẫn là số chẵn, 

126
00:07:35,527 --> 00:07:39,719
do đó người nhận không thể hoàn toàn tin tưởng rằng số chẵn nhất 

127
00:07:39,719 --> 00:07:42,300
thiết có nghĩa là tin nhắn không có lỗi.

128
00:07:42,840 --> 00:07:45,897
Bạn có thể phàn nàn rằng một tin nhắn bị lộn xộn 

129
00:07:45,897 --> 00:07:49,080
chỉ sau 2 lần lật là khá yếu và bạn hoàn toàn đúng.

130
00:07:49,700 --> 00:07:54,239
Tuy nhiên, hãy nhớ rằng không có phương pháp phát hiện hoặc sửa lỗi nào có 

131
00:07:54,239 --> 00:07:58,900
thể giúp bạn tin cậy 100% rằng thư bạn nhận được là thư mà người gửi dự định.

132
00:07:59,580 --> 00:08:02,466
Rốt cuộc, tiếng ồn ngẫu nhiên đủ lớn luôn có thể thay đổi một tin 

133
00:08:02,466 --> 00:08:05,440
nhắn hợp lệ thành một tin nhắn hợp lệ khác chỉ hoàn toàn là tình cờ.

134
00:08:06,240 --> 00:08:10,810
Thay vào đó, mục tiêu là đưa ra một sơ đồ mạnh mẽ với số lỗi tối đa nhất 

135
00:08:10,810 --> 00:08:15,380
định hoặc có thể giảm xác suất xảy ra kết quả dương tính giả như thế này.

136
00:08:16,260 --> 00:08:19,732
Bản thân việc kiểm tra tính chẵn lẻ khá yếu, nhưng bằng cách chắt lọc ý 

137
00:08:19,732 --> 00:08:22,529
tưởng thay đổi toàn bộ thông điệp thành một bit duy nhất, 

138
00:08:22,529 --> 00:08:26,098
những gì chúng mang lại cho chúng ta là một khối xây dựng mạnh mẽ cho các 

139
00:08:26,098 --> 00:08:27,160
kế hoạch phức tạp hơn.

140
00:08:27,940 --> 00:08:32,480
Ví dụ, khi Hamming đang tìm cách xác định lỗi đã xảy ra ở đâu, không chỉ lỗi xảy ra, 

141
00:08:32,480 --> 00:08:37,020
hiểu biết sâu sắc quan trọng của ông là nếu bạn áp dụng một số kiểm tra tính chẵn lẻ 

142
00:08:37,020 --> 00:08:41,239
không phải cho toàn bộ thông báo mà cho một số tập hợp con được chọn cẩn thận, 

143
00:08:41,239 --> 00:08:45,940
bạn có thể hỏi một loạt câu hỏi tinh tế hơn nhằm xác định vị trí của bất kỳ lỗi bit nào.

144
00:08:46,680 --> 00:08:50,057
Cảm giác tổng thể giống như chơi một trò chơi gồm 20 câu hỏi, 

145
00:08:50,057 --> 00:08:53,380
đặt các câu hỏi có hoặc không để cắt đôi không gian khả năng.

146
00:08:54,160 --> 00:08:57,766
Ví dụ: giả sử chúng tôi thực hiện kiểm tra tính chẵn lẻ chỉ trên 8 bit này, 

147
00:08:57,766 --> 00:08:59,380
tất cả các vị trí được đánh số lẻ.

148
00:09:00,100 --> 00:09:04,110
Sau đó, nếu phát hiện thấy lỗi, nó sẽ cung cấp cho người nhận thêm 

149
00:09:04,110 --> 00:09:08,240
một chút thông tin về lỗi cụ thể ở đâu, cụ thể là lỗi ở vị trí kỳ lạ.

150
00:09:08,940 --> 00:09:12,156
Nếu không phát hiện thấy lỗi nào trong số 8 bit đó, 

151
00:09:12,156 --> 00:09:16,240
điều đó có nghĩa là không có lỗi nào cả hoặc nó nằm ở vị trí chẵn.

152
00:09:17,180 --> 00:09:19,657
Bạn có thể nghĩ rằng việc giới hạn kiểm tra tính chẵn lẻ ở mức một 

153
00:09:19,657 --> 00:09:22,208
nửa số bit sẽ khiến nó kém hiệu quả hơn, nhưng khi nó được thực hiện 

154
00:09:22,208 --> 00:09:24,094
cùng với các kiểm tra được lựa chọn kỹ lưỡng khác, 

155
00:09:24,094 --> 00:09:27,200
nó sẽ mang lại cho chúng ta thứ gì đó mạnh mẽ hơn rất nhiều một cách phản trực giác.

156
00:09:29,240 --> 00:09:32,228
Để thực sự thiết lập việc kiểm tra tính chẵn lẻ đó, hãy nhớ rằng, 

157
00:09:32,228 --> 00:09:35,895
nó đòi hỏi phải đánh dấu một số bit đặc biệt có quyền kiểm soát tính chẵn lẻ của 

158
00:09:35,895 --> 00:09:36,620
toàn bộ nhóm đó.

159
00:09:37,480 --> 00:09:39,180
Ở đây chúng ta hãy chọn vị trí 1.

160
00:09:39,720 --> 00:09:43,089
Đối với ví dụ được hiển thị, tính chẵn lẻ của 8 bit này hiện là số lẻ, 

161
00:09:43,089 --> 00:09:46,980
do đó người gửi có trách nhiệm chuyển đổi bit chẵn lẻ đó và bây giờ nó là số chẵn.

162
00:09:47,940 --> 00:09:50,680
Đây chỉ là 1 trong 4 lần kiểm tra tính chẵn lẻ mà chúng tôi sẽ thực hiện.

163
00:09:50,920 --> 00:09:54,268
Kiểm tra thứ hai nằm trong số 8 bit ở nửa bên phải của lưới, 

164
00:09:54,268 --> 00:09:56,300
ít nhất là như chúng tôi đã vẽ ở đây.

165
00:09:56,680 --> 00:10:00,038
Lần này chúng ta có thể sử dụng vị trí 2 làm bit chẵn lẻ, 

166
00:10:00,038 --> 00:10:04,728
vì vậy 8 bit này đã có giá trị chẵn lẻ và người gửi có thể cảm thấy hài lòng khi 

167
00:10:04,728 --> 00:10:06,060
giữ nguyên bit số 2 đó.

168
00:10:07,020 --> 00:10:11,066
Sau đó, ở đầu bên kia, nếu người nhận kiểm tra tính chẵn lẻ của nhóm này và 

169
00:10:11,066 --> 00:10:15,380
thấy rằng nó kỳ lạ, họ sẽ biết rằng lỗi nằm ở đâu đó trong số 8 bit bên phải này.

170
00:10:15,820 --> 00:10:20,580
Ngược lại, điều đó có nghĩa là không có lỗi hoặc lỗi nằm ở đâu đó ở nửa bên trái.

171
00:10:21,120 --> 00:10:23,858
Hoặc tôi đoán có thể có hai lỗi, nhưng hiện tại chúng ta 

172
00:10:23,858 --> 00:10:26,500
giả định rằng có nhiều nhất một lỗi trong toàn bộ khối.

173
00:10:26,940 --> 00:10:28,740
Mọi thứ bị phá vỡ hoàn toàn vì nhiều hơn thế.

174
00:10:29,160 --> 00:10:31,119
Ở đây, trước khi chúng ta xem xét hai bước kiểm tra tiếp theo, 

175
00:10:31,119 --> 00:10:33,047
hãy dành chút thời gian để suy nghĩ xem hai bước kiểm tra đầu 

176
00:10:33,047 --> 00:10:35,100
tiên này cho phép chúng ta làm gì khi bạn xem xét chúng cùng nhau.

177
00:10:35,800 --> 00:10:39,660
Giả sử bạn phát hiện lỗi giữa các cột lẻ và giữa nửa bên phải.

178
00:10:40,200 --> 00:10:43,040
Nó nhất thiết có nghĩa là lỗi ở đâu đó trong cột cuối cùng.

179
00:10:43,820 --> 00:10:46,640
Nếu không có lỗi ở cột lẻ nhưng có một lỗi ở nửa bên phải, 

180
00:10:46,640 --> 00:10:49,700
điều đó cho bạn biết lỗi đó nằm ở cột thứ hai đến cột cuối cùng.

181
00:10:50,440 --> 00:10:54,479
Tương tự như vậy, nếu có lỗi ở cột lẻ nhưng không ở nửa bên phải, 

182
00:10:54,479 --> 00:10:56,560
bạn biết lỗi đó nằm ở cột thứ hai.

183
00:10:56,560 --> 00:10:59,621
Và nếu cả hai lần kiểm tra chẵn lẻ đó đều không phát hiện ra điều gì, 

184
00:10:59,621 --> 00:11:03,120
điều đó có nghĩa là nơi duy nhất có thể xảy ra lỗi là ở cột ngoài cùng bên trái.

185
00:11:03,340 --> 00:11:06,120
Nhưng nó cũng có thể đơn giản có nghĩa là không có lỗi nào cả.

186
00:11:06,300 --> 00:11:08,508
Đó hoàn toàn là một cách khá phức tạp để nói rằng hai 

187
00:11:08,508 --> 00:11:10,840
lần kiểm tra tính chẵn lẻ cho phép chúng ta xác định cột.

188
00:11:11,480 --> 00:11:13,640
Từ đây có lẽ bạn có thể đoán được điều gì sẽ xảy ra tiếp theo.

189
00:11:13,800 --> 00:11:16,140
Về cơ bản chúng tôi làm điều tương tự nhưng đối với các hàng.

190
00:11:16,440 --> 00:11:20,900
Sẽ có kiểm tra tính chẵn lẻ trên các hàng lẻ, sử dụng vị trí 4 làm bit chẵn lẻ.

191
00:11:21,380 --> 00:11:24,209
Vì vậy, trong ví dụ này, nhóm đó đã có tính chẵn lẻ chẵn, 

192
00:11:24,209 --> 00:11:25,820
vì vậy bit 4 sẽ được đặt thành 0.

193
00:11:26,560 --> 00:11:29,798
Và cuối cùng là kiểm tra tính chẵn lẻ ở hai hàng dưới cùng, 

194
00:11:29,798 --> 00:11:31,580
sử dụng vị trí 8 làm bit chẵn lẻ.

195
00:11:32,120 --> 00:11:34,495
Trong trường hợp này, có vẻ như người gửi cần 

196
00:11:34,495 --> 00:11:36,820
bật bit 8 đó để mang lại cho nhóm sự chẵn lẻ.

197
00:11:37,700 --> 00:11:40,019
Giống như hai bước kiểm tra đầu tiên cho phép chúng ta ghim cột, 

198
00:11:40,019 --> 00:11:41,840
hai bước kiểm tra tiếp theo cho phép bạn ghim hàng.

199
00:11:42,880 --> 00:11:47,540
Ví dụ, hãy tưởng tượng rằng trong quá trình truyền có một lỗi ở vị trí 3.

200
00:11:48,180 --> 00:11:51,802
Chà, điều này ảnh hưởng đến nhóm chẵn lẻ đầu tiên và nó cũng ảnh hưởng đến nhóm 

201
00:11:51,802 --> 00:11:55,560
chẵn lẻ thứ hai, vì vậy người nhận biết rằng có lỗi ở đâu đó trong cột bên phải đó.

202
00:11:56,100 --> 00:12:00,540
Nhưng nó không ảnh hưởng đến nhóm thứ ba, và nó không ảnh hưởng đến nhóm thứ tư.

203
00:12:01,240 --> 00:12:05,236
Và điều đó cho phép người nhận xác định chính xác lỗi cho đến hàng đầu tiên, 

204
00:12:05,236 --> 00:12:07,520
nghĩa là vị trí thứ 3, để họ có thể sửa lỗi.

205
00:12:08,580 --> 00:12:12,719
Bạn có thể thích dành chút thời gian để thuyết phục bản thân rằng câu trả lời cho bốn 

206
00:12:12,719 --> 00:12:16,185
câu hỏi này thực sự sẽ luôn giúp bạn xác định được một địa điểm cụ thể, 

207
00:12:16,185 --> 00:12:17,100
bất kể chúng ở đâu.

208
00:12:17,720 --> 00:12:20,390
Trên thực tế, những người tinh ý trong số các bạn thậm chí có thể 

209
00:12:20,390 --> 00:12:23,060
nhận thấy mối liên hệ giữa những câu hỏi này và việc đếm nhị phân.

210
00:12:23,500 --> 00:12:26,275
Và nếu bạn làm vậy, một lần nữa hãy để tôi nhấn mạnh, tạm dừng, 

211
00:12:26,275 --> 00:12:28,920
cố gắng tự mình rút ra mối liên hệ trước khi tôi làm hỏng nó.

212
00:12:30,500 --> 00:12:34,982
Nếu bạn đang thắc mắc điều gì sẽ xảy ra nếu bản thân bit chẵn lẻ bị ảnh hưởng, 

213
00:12:34,982 --> 00:12:36,060
thì bạn có thể thử.

214
00:12:36,440 --> 00:12:40,267
Hãy dành một chút thời gian để suy nghĩ xem làm thế nào bất kỳ lỗi nào trong số bốn phần 

215
00:12:40,267 --> 00:12:42,889
đặc biệt này sẽ được theo dõi giống như bất kỳ lỗi nào khác, 

216
00:12:42,889 --> 00:12:44,180
với cùng một nhóm bốn câu hỏi.

217
00:12:47,060 --> 00:12:50,034
Điều đó thực sự không quan trọng, vì cuối cùng điều chúng ta muốn 

218
00:12:50,034 --> 00:12:53,100
là bảo vệ các bit thông báo, các bit sửa lỗi vẫn tiếp tục hoạt động.

219
00:12:53,600 --> 00:12:55,797
Nhưng việc bảo vệ những bit đó cũng là điều đương 

220
00:12:55,797 --> 00:12:57,820
nhiên nằm ngoài kế hoạch như một sản phẩm phụ.

221
00:12:59,200 --> 00:13:01,760
Bạn cũng có thể thích dự đoán quy mô này như thế nào.

222
00:13:02,300 --> 00:13:06,933
Ví dụ: nếu chúng tôi sử dụng một khối có kích thước 256 bit để xác định một vị trí, 

223
00:13:06,933 --> 00:13:10,463
bạn chỉ cần tám câu hỏi có hoặc không để tìm kiếm nhị phân theo 

224
00:13:10,463 --> 00:13:12,780
cách của bạn đến một vị trí cụ thể nào đó.

225
00:13:15,640 --> 00:13:18,046
Và hãy nhớ rằng, mỗi câu hỏi chỉ yêu cầu bỏ đi một 

226
00:13:18,046 --> 00:13:20,500
bit duy nhất để đặt kiểm tra tính chẵn lẻ thích hợp.

227
00:13:23,160 --> 00:13:26,219
Một số bạn có thể đã nhìn thấy nó, nhưng sau này chúng ta sẽ nói về cách có 

228
00:13:26,219 --> 00:13:29,360
hệ thống để tìm ra nội dung của những câu hỏi này chỉ trong một hoặc hai phút.

229
00:13:29,880 --> 00:13:31,505
Hy vọng bản phác thảo này đủ để đánh giá cao tính 

230
00:13:31,505 --> 00:13:33,260
hiệu quả của những gì chúng tôi đang phát triển ở đây.

231
00:13:33,260 --> 00:13:36,816
Điều đầu tiên, ngoại trừ tám bit chẵn lẻ được đánh dấu đó, 

232
00:13:36,816 --> 00:13:41,820
có thể là bất cứ thứ gì bạn muốn, mang bất kỳ thông điệp hoặc dữ liệu nào bạn muốn.

233
00:13:41,820 --> 00:13:46,138
8 bit dư thừa theo nghĩa là chúng hoàn toàn được xác định bởi phần còn lại của tin nhắn, 

234
00:13:46,138 --> 00:13:50,020
nhưng đó là cách thông minh hơn nhiều so với việc chỉ sao chép toàn bộ tin nhắn.

235
00:13:53,600 --> 00:13:58,380
Tuy nhiên, với rất ít sự từ bỏ, bạn sẽ có thể xác định và sửa bất kỳ lỗi bit nào.

236
00:13:59,200 --> 00:14:00,400
Vâng, gần như vậy.

237
00:14:00,960 --> 00:14:04,829
Được rồi, vấn đề ở đây là nếu không có kiểm tra chẵn lẻ nào trong số bốn 

238
00:14:04,829 --> 00:14:08,857
kiểm tra chẵn lẻ phát hiện ra lỗi, nghĩa là các tập hợp con 8 bit được chọn 

239
00:14:08,857 --> 00:14:12,302
đặc biệt đều có các số chẵn lẻ, giống như dự định của người gửi, 

240
00:14:12,302 --> 00:14:16,860
thì điều đó có nghĩa là không có lỗi nào cả , hoặc nó thu hẹp chúng ta xuống vị trí 0.

241
00:14:17,740 --> 00:14:22,319
Bạn thấy đấy, với bốn câu hỏi có hoặc không, chúng tôi có 16 kết quả có thể xảy ra cho 

242
00:14:22,319 --> 00:14:24,846
việc kiểm tra tính chẵn lẻ của mình và lúc đầu, 

243
00:14:24,846 --> 00:14:28,267
điều đó có vẻ hoàn hảo để xác định 1 trong 16 vị trí trong khối, 

244
00:14:28,267 --> 00:14:31,900
nhưng bạn cũng cần thông báo kết quả thứ 17, không có lỗi tình trạng.

245
00:14:33,020 --> 00:14:37,300
Giải pháp ở đây thực sự khá đơn giản, chỉ cần quên hoàn toàn bit 0 đó đi.

246
00:14:37,840 --> 00:14:40,571
Vì vậy, khi chúng tôi thực hiện bốn lần kiểm tra tính chẵn lẻ và thấy 

247
00:14:40,571 --> 00:14:43,460
rằng tất cả chúng đều bằng nhau, điều đó rõ ràng có nghĩa là không có lỗi.

248
00:14:44,240 --> 00:14:49,108
Điều đó có nghĩa là thay vì làm việc với khối 16 bit, chúng tôi làm việc với khối 15 bit, 

249
00:14:49,108 --> 00:14:53,220
trong đó 11 bit được tự do mang tin nhắn và 4 trong số đó dành cho dự phòng.

250
00:14:53,780 --> 00:15:00,200
Và cùng với đó, giờ đây chúng ta có thứ mà mọi người trong ngành gọi là mã Hamming 15-11.

251
00:15:00,460 --> 00:15:02,946
Điều đó nói lên rằng, thật tuyệt khi có kích thước khối có lũy thừa 

252
00:15:02,946 --> 00:15:05,470
sạch là 2 và có một cách thông minh là chúng ta có thể giữ bit thứ 0 

253
00:15:05,470 --> 00:15:08,140
đó xung quanh và khiến nó thực hiện thêm một chút công việc cho chúng ta.

254
00:15:08,700 --> 00:15:11,618
Nếu chúng tôi sử dụng nó như một bit chẵn lẻ trên toàn bộ khối, 

255
00:15:11,618 --> 00:15:15,540
nó cho phép chúng tôi thực sự phát hiện các lỗi 2 bit, mặc dù chúng tôi không thể sửa.

256
00:15:16,160 --> 00:15:16,820
Đây là cách nó hoạt động.

257
00:15:17,180 --> 00:15:19,377
Sau khi thiết lập bốn bit sửa lỗi đặc biệt đó, 

258
00:15:19,377 --> 00:15:22,836
chúng tôi đặt bit thứ 0 đó sao cho tính chẵn lẻ của toàn bộ khối là chẵn, 

259
00:15:22,836 --> 00:15:24,940
giống như kiểm tra tính chẵn lẻ thông thường.

260
00:15:25,700 --> 00:15:29,583
Bây giờ, nếu có một lỗi bit nào đó thì tính chẵn lẻ của toàn bộ khối sẽ chuyển thành số 

261
00:15:29,583 --> 00:15:33,423
lẻ, nhưng dù sao thì chúng ta cũng sẽ phát hiện được điều đó nhờ bốn bước kiểm tra sửa 

262
00:15:33,423 --> 00:15:33,600
lỗi.

263
00:15:34,160 --> 00:15:38,614
Tuy nhiên, nếu có hai lỗi thì tổng số chẵn lẻ sẽ chuyển về trạng thái chẵn, 

264
00:15:38,614 --> 00:15:42,073
nhưng người nhận vẫn thấy rằng đã có ít nhất một số lỗi do 

265
00:15:42,073 --> 00:15:45,180
những gì đang xảy ra với bốn lần kiểm tra chẵn lẻ đó.

266
00:15:45,180 --> 00:15:47,608
Vì vậy, nếu họ nhận thấy có sự chẵn lẻ về tổng thể, 

267
00:15:47,608 --> 00:15:50,458
nhưng có điều gì đó khác 0 xảy ra với các lần kiểm tra khác, 

268
00:15:50,458 --> 00:15:52,700
thì điều đó cho họ biết rằng có ít nhất hai lỗi.

269
00:15:53,520 --> 00:15:54,000
Không phải là thông minh sao?

270
00:15:54,300 --> 00:15:56,604
Mặc dù chúng tôi không thể sửa các lỗi 2 bit đó, 

271
00:15:56,604 --> 00:15:59,190
nhưng chỉ cần đưa bit 0 khó chịu đó hoạt động trở lại, 

272
00:15:59,190 --> 00:16:01,260
nó sẽ cho phép chúng tôi phát hiện ra chúng.

273
00:16:02,260 --> 00:16:05,220
Đây là mã khá chuẩn, nó được gọi là mã Hamming mở rộng.

274
00:16:06,540 --> 00:16:10,712
Về mặt kỹ thuật, bây giờ bạn đã có mô tả đầy đủ về chức năng của mã Hamming, 

275
00:16:10,712 --> 00:16:12,880
ít nhất là đối với ví dụ về khối 16 bit.

276
00:16:12,880 --> 00:16:17,124
Nhưng tôi nghĩ bạn sẽ thấy hài lòng hơn khi kiểm tra sự hiểu biết của mình và củng cố 

277
00:16:17,124 --> 00:16:21,320
mọi thứ cho đến thời điểm này bằng cách tự mình làm một ví dụ đầy đủ từ đầu đến cuối.

278
00:16:22,080 --> 00:16:24,300
Tuy nhiên, tôi sẽ cùng bạn giải quyết vấn đề này để bạn có thể tự kiểm tra.

279
00:16:25,120 --> 00:16:28,235
Để thiết lập một tin nhắn, cho dù đó là tin nhắn theo nghĩa đen 

280
00:16:28,235 --> 00:16:32,372
mà bạn đang dịch theo không gian hay một số dữ liệu bạn muốn lưu trữ theo thời gian, 

281
00:16:32,372 --> 00:16:34,660
bước đầu tiên là chia nó thành các phần 11 bit.

282
00:16:35,580 --> 00:16:39,760
Mỗi đoạn sẽ được đóng gói thành một khối 16 bit chống lỗi.

283
00:16:39,760 --> 00:16:43,220
Vì vậy, hãy lấy ví dụ này làm ví dụ và thực sự giải quyết nó.

284
00:16:43,740 --> 00:16:44,740
Hãy tiếp tục, thực sự làm điều đó!

285
00:16:44,740 --> 00:16:47,020
Hãy tạm dừng và thử ghép khối này lại với nhau.

286
00:16:52,720 --> 00:16:53,680
Được rồi, bạn sẵn sàng chưa?

287
00:16:54,240 --> 00:16:58,654
Hãy nhớ rằng, vị trí 0 cùng với các lũy thừa khác của 2 được dành cho nhiệm vụ sửa lỗi, 

288
00:16:58,654 --> 00:17:01,614
vì vậy bạn bắt đầu bằng cách đặt các bit thông báo vào tất 

289
00:17:01,614 --> 00:17:03,320
cả các vị trí còn lại theo thứ tự.

290
00:17:05,339 --> 00:17:08,974
Bạn cần nhóm này có tính chẵn lẻ, điều này đã có sẵn, 

291
00:17:08,974 --> 00:17:12,339
vì vậy bạn nên đặt bit chẵn lẻ đó ở vị trí 1 là 0.

292
00:17:13,020 --> 00:17:17,880
Nhóm tiếp theo bắt đầu với số chẵn lẻ lẻ, vì vậy bạn nên đặt bit chẵn lẻ của nó là 1.

293
00:17:19,160 --> 00:17:21,751
Nhóm sau đó bắt đầu với số chẵn lẻ lẻ, vì vậy một 

294
00:17:21,751 --> 00:17:24,240
lần nữa bạn phải đặt bit chẵn lẻ của nó thành 1.

295
00:17:24,780 --> 00:17:30,060
Và nhóm cuối cùng cũng có tính chẵn lẻ lẻ, nghĩa là chúng ta đặt bit đó ở vị trí 8 là 1.

296
00:17:31,300 --> 00:17:35,706
Và ở bước cuối cùng, toàn bộ khối bây giờ có tính chẵn lẻ chẵn, 

297
00:17:35,706 --> 00:17:40,320
nghĩa là bạn có thể đặt số bit đó là 0, bit chẵn lẻ tổng thể, là 0.

298
00:17:41,340 --> 00:17:44,740
Vì vậy, khi khối này được gửi đi, tính chẵn lẻ của bốn tập 

299
00:17:44,740 --> 00:17:48,140
hợp con đặc biệt và toàn bộ khối sẽ là số chẵn hoặc bằng 0.

300
00:17:48,820 --> 00:17:52,180
Trong phần thứ hai của bài tập, bạn hãy đóng vai người nhận.

301
00:17:53,480 --> 00:17:56,583
Tất nhiên, điều đó có nghĩa là bạn chưa biết thông điệp này là gì, 

302
00:17:56,583 --> 00:17:59,780
có thể một số bạn đã ghi nhớ nó, nhưng hãy giả sử rằng bạn chưa biết.

303
00:18:00,020 --> 00:18:03,811
Những gì tôi sắp làm là thay đổi 0, 1 hoặc 2 bit trong 

304
00:18:03,811 --> 00:18:07,740
khối đó và sau đó yêu cầu bạn tìm hiểu xem tôi đã làm gì.

305
00:18:08,260 --> 00:18:10,810
Vì vậy, một lần nữa, hãy tạm dừng và thử giải quyết nó.

306
00:18:18,790 --> 00:18:21,830
Được rồi, bây giờ bạn với tư cách là người nhận hãy kiểm tra 

307
00:18:21,830 --> 00:18:24,870
nhóm chẵn lẻ đầu tiên và bạn có thể thấy rằng đó là số chẵn, 

308
00:18:24,870 --> 00:18:27,910
vì vậy bất kỳ lỗi nào tồn tại sẽ phải nằm trong một cột chẵn.

309
00:18:29,690 --> 00:18:32,550
Kiểm tra tiếp theo cung cấp cho chúng tôi một số lẻ, 

310
00:18:32,550 --> 00:18:37,030
cho chúng tôi biết rằng có ít nhất một lỗi và thu hẹp chúng tôi vào cột cụ thể này.

311
00:18:38,550 --> 00:18:41,790
Lần kiểm tra thứ ba là chẵn, cắt giảm các khả năng hơn nữa.

312
00:18:42,650 --> 00:18:44,732
Và lần kiểm tra chẵn lẻ cuối cùng rất kỳ quặc, 

313
00:18:44,732 --> 00:18:46,814
cho chúng ta biết có lỗi ở đâu đó ở phía dưới, 

314
00:18:46,814 --> 00:18:49,650
mà đến bây giờ chúng ta có thể thấy lỗi này phải ở vị trí số 10.

315
00:18:51,490 --> 00:18:53,998
Hơn nữa, tính chẵn lẻ của toàn bộ khối là số lẻ, 

316
00:18:53,998 --> 00:18:57,530
khiến chúng tôi tin tưởng rằng chỉ có một lần lật chứ không phải hai.

317
00:18:58,070 --> 00:18:59,970
Nếu là ba hoặc nhiều hơn, tất cả cược sẽ bị hủy.

318
00:19:01,310 --> 00:19:05,609
Sau khi sửa bit số 10 đó, việc rút ra 11 bit không được sử dụng để sửa 

319
00:19:05,609 --> 00:19:09,121
sẽ cho chúng ta phân đoạn có liên quan của thông báo gốc, 

320
00:19:09,121 --> 00:19:14,390
nếu bạn tua lại và so sánh thì thực sự chính xác là những gì chúng ta đã bắt đầu ví dụ.

321
00:19:15,710 --> 00:19:18,694
Và bây giờ bạn đã biết cách thực hiện tất cả những điều này bằng tay, 

322
00:19:18,694 --> 00:19:22,360
tôi muốn chỉ cho bạn cách bạn có thể thực hiện phần cốt lõi của tất cả logic này bằng 

323
00:19:22,360 --> 00:19:23,170
một dòng mã Python.

324
00:19:23,870 --> 00:19:27,877
Bạn thấy đấy, điều tôi chưa nói với bạn là thuật toán này thực sự tinh tế đến mức nào, 

325
00:19:27,877 --> 00:19:30,826
thật đơn giản để khiến một chiếc máy chỉ ra vị trí của một lỗi, 

326
00:19:30,826 --> 00:19:34,465
cách chia tỷ lệ nó một cách có hệ thống và cách chúng ta có thể đóng khung tất 

327
00:19:34,465 --> 00:19:38,105
cả các lỗi đó. đây là một thao tác đơn lẻ thay vì nhiều lần kiểm tra tính chẵn 

328
00:19:38,105 --> 00:19:38,750
lẻ riêng biệt.

329
00:19:39,430 --> 00:19:41,310
Để hiểu ý tôi, hãy cùng tôi tham gia phần 2 nhé.

