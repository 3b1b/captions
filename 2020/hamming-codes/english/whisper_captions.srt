1
00:00:03,620 --> 00:00:08,700
Have you ever wondered how it's possible to scratch a CD or a DVD and still have it

2
00:00:08,700 --> 00:00:10,100
play back whatever it's storing?

3
00:00:10,900 --> 00:00:15,240
The scratch really does affect the 1s and 0s on the disk, so it reads off different

4
00:00:15,240 --> 00:00:20,420
data from what was stored, but unless it's really scratched up, the bits it reads off

5
00:00:20,420 --> 00:00:26,400
are decoded into precisely the same file that was encoded onto it, a bit for bit copy, despite

6
00:00:26,400 --> 00:00:27,440
all those errors.

7
00:00:27,440 --> 00:00:32,900
There is a whole pile of mathematical cleverness that allows us to store data, and just as

8
00:00:32,900 --> 00:00:36,660
importantly to transmit data, in a way that's resilient to errors.

9
00:00:37,520 --> 00:00:41,600
Well, actually it doesn't take that much cleverness to come up with a way to do this.

10
00:00:42,060 --> 00:00:48,600
Any file, whether it's a video, sound, text, code, image, whatever, is ultimately some

11
00:00:48,600 --> 00:00:50,380
sequence of 1s and 0s.

12
00:00:50,680 --> 00:00:55,300
And a simple strategy to correct any bit that gets flipped would be to store three copies

13
00:00:55,300 --> 00:00:56,000
of each bit.

14
00:00:57,580 --> 00:01:02,140
Then the machine reading this file could compare these three copies and always take the best

15
00:01:02,140 --> 00:01:04,060
2 out of 3 whenever there's a discrepancy.

16
00:01:07,160 --> 00:01:10,860
But what that means is using two thirds of your space for redundancy.

17
00:01:11,480 --> 00:01:15,400
And even then, for all of that space given up, there's no strong guarantee about what

18
00:01:15,400 --> 00:01:17,240
happens if more than one bit gets flipped.

19
00:01:17,980 --> 00:01:21,580
The much more interesting question is how to make it so that errors can be corrected

20
00:01:21,580 --> 00:01:24,020
while giving up as little space as possible.

21
00:01:24,520 --> 00:01:28,560
For example, using the method you'll learn about this video, you could store your data

22
00:01:28,560 --> 00:01:35,220
in 256-bit blocks, where each block uses 9 bits, 9! to act as a kind of redundancy,

23
00:01:35,780 --> 00:01:40,300
and the other 247 bits are free to carry whatever meaningful message or data you want.

24
00:01:40,900 --> 00:01:44,740
And it will still be the case that if any bit gets flipped here, just by looking at

25
00:01:44,740 --> 00:01:49,380
this block and nothing more, a machine will be able to identify that there was an error

26
00:01:49,380 --> 00:01:52,660
and precisely where it was so that it knows how to correct it.

27
00:01:52,660 --> 00:01:54,620
And honestly, that feels like magic.

28
00:01:55,440 --> 00:01:59,460
And for this particular scheme, if two bits get flipped, the machine will at least be

29
00:01:59,460 --> 00:02:02,860
able to detect that there were two errors, though it won't know how to fix them.

30
00:02:03,520 --> 00:02:06,900
We'll talk a little bit later about how this scales for blocks with different sizes.

31
00:02:07,860 --> 00:02:12,420
Methods that let you correct errors like this are known, reasonably enough, as error correction

32
00:02:12,420 --> 00:02:12,900
codes.

33
00:02:13,660 --> 00:02:18,120
For the better part of the last century, this field has been a really rich source of surprisingly

34
00:02:18,120 --> 00:02:21,940
deep math that gets incorporated into devices we use every day.

35
00:02:22,840 --> 00:02:27,260
The goal here is to give you a very thorough understanding of one of the earliest examples,

36
00:02:27,660 --> 00:02:28,660
known as a Hamming code.

37
00:02:29,520 --> 00:02:32,620
And by the way, the way I'm thinking about the structure of this video is less about

38
00:02:32,620 --> 00:02:37,120
explaining it as directly as possible, and more a matter of prompting you to invent it

39
00:02:37,120 --> 00:02:39,820
for yourself, with a little gentle guidance here and there.

40
00:02:40,120 --> 00:02:43,620
So when you feel like you see where it's going at some point, take that moment to pause,

41
00:02:43,880 --> 00:02:46,720
actively predict what the scheme is going to be before I tell you.

42
00:02:47,240 --> 00:02:51,560
Also, if you want your understanding to get down to the hardware level, Ben Eater has

43
00:02:51,560 --> 00:02:55,240
made a video in conjunction with this one showing you how to actually implement Hamming

44
00:02:55,240 --> 00:02:58,240
codes on breadboards, which is extremely satisfying.

45
00:02:59,300 --> 00:03:03,180
You should know, Hamming codes are not as widely used as more modern codes, like the

46
00:03:03,180 --> 00:03:08,000
Reed-Solomon algorithm, but there is a certain magic to the contrast between just how impossible

47
00:03:08,000 --> 00:03:13,000
this task feels at the start, and how utterly reasonable it seems once you learn about Hamming.

48
00:03:13,720 --> 00:03:18,640
The basic principle of error correction is that in a vast space of all possible messages,

49
00:03:19,120 --> 00:03:22,180
only some subset are going to be considered valid messages.

50
00:03:22,800 --> 00:03:26,940
As an analogy, think about correctly spelled words versus incorrectly spelled words.

51
00:03:28,900 --> 00:03:33,360
Whenever a valid message gets altered, the receiver is responsible for correcting what

52
00:03:33,360 --> 00:03:37,340
they see back to the nearest valid neighbor, as you might do with a typo.

53
00:03:38,220 --> 00:03:42,980
Coming up with a concrete algorithm to efficiently categorize messages like this, though, take

54
00:03:42,980 --> 00:03:44,060
a certain cleverness.

55
00:03:46,780 --> 00:03:51,560
The story begins in the 1940s, when a young Richard Hamming was working for Bell Labs,

56
00:03:52,080 --> 00:03:55,960
and some of his work involved using a very big expensive punch card computer that he

57
00:03:55,960 --> 00:03:57,420
had only limited access to.

58
00:03:57,800 --> 00:04:01,320
And the programs he kept putting through it kept failing, because every now and then a

59
00:04:01,320 --> 00:04:02,400
bit would get misread.

60
00:04:03,120 --> 00:04:07,220
Frustration being the crucible of invention, he got so fed up that he invented the world's

61
00:04:07,220 --> 00:04:08,420
first error correction code.

62
00:04:09,060 --> 00:04:12,980
There are many different ways to frame Hamming codes, but as a first pass we're going to

63
00:04:12,980 --> 00:04:15,380
go through it the way Hamming himself thought about them.

64
00:04:16,520 --> 00:04:20,940
Let's use an example that's simple, but not too simple, a block of 16 bits.

65
00:04:21,820 --> 00:04:24,740
We'll number the positions of these bits from 0 up to 15.

66
00:04:25,620 --> 00:04:30,600
The actual data we want to store is only going to make up 12 of these bits, while 4 of the

67
00:04:30,600 --> 00:04:33,000
positions are going to be reserved as a kind of redundancy.

68
00:04:33,900 --> 00:04:38,140
The word redundant here doesn't simply mean copy, after all, those 4 bits don't give

69
00:04:38,140 --> 00:04:40,040
us enough room to blindly copy the data.

70
00:04:40,720 --> 00:04:44,920
Instead, they'll need to be a much more nuanced and clever kind of redundancy, not

71
00:04:44,920 --> 00:04:47,280
adding any new information, but adding resilience.

72
00:04:48,600 --> 00:04:52,620
You might expect these 4 special bits to come nicely packaged together, maybe at the end

73
00:04:52,620 --> 00:04:56,420
or something like that, but as you'll see, having them sit in positions which are powers

74
00:04:56,420 --> 00:04:59,620
of 2 allows for something that's really elegant by the end.

75
00:05:00,200 --> 00:05:03,540
It also might give you a little hint about how this scales for larger blocks.

76
00:05:04,900 --> 00:05:09,240
Also, technically it ends up being only 11 bits of data, you'll find there's a mild

77
00:05:09,240 --> 00:05:13,260
nuance for what goes on at position 0, but don't worry about that for now.

78
00:05:14,140 --> 00:05:18,560
Like any error correction algorithm, this will involve two players, a sender, who's

79
00:05:18,560 --> 00:05:22,820
responsible for setting these 4 special bits, and then a receiver, who's responsible for

80
00:05:22,820 --> 00:05:25,540
performing some kind of check and then correcting the errors.

81
00:05:26,300 --> 00:05:30,040
Of course, the words sender and receiver really refer to machines or software that's doing

82
00:05:30,040 --> 00:05:34,740
checks, and the idea of a message is meant really broadly, to include things like storage.

83
00:05:35,340 --> 00:05:39,400
After all, storing data is the same thing as sending a message, just from the past to

84
00:05:39,400 --> 00:05:41,680
the future, instead of from one place to another.

85
00:05:42,560 --> 00:05:46,960
So that's the setup, but before we can dive in, we need to talk about a related idea which

86
00:05:46,960 --> 00:05:51,260
was fresh on Hamming's mind in the time of his discovery, a method which lets you

87
00:05:51,260 --> 00:05:56,300
detect any single bit errors, but not to correct them, known in the business as a parity check.

88
00:05:56,880 --> 00:06:01,200
For a parity check, we separate out only one single bit that the sender is responsible

89
00:06:01,200 --> 00:06:03,820
for tuning, and the rest are free to carry a message.

90
00:06:04,880 --> 00:06:10,000
The only job of this special bit is to make sure that the total number of 1s in the message

91
00:06:10,000 --> 00:06:11,280
is an even number.

92
00:06:12,080 --> 00:06:16,920
So for example right now, that total number of 1s is 7, that's odd, so the sender needs

93
00:06:16,920 --> 00:06:19,960
to flip that special bit to be a 1, making the count even.

94
00:06:20,800 --> 00:06:25,340
But if the block had already started off with an even number of 1s, then this special bit

95
00:06:25,340 --> 00:06:26,420
would have been kept at a 0.

96
00:06:27,340 --> 00:06:31,680
This is pretty simple, deceptively simple, but it's an incredibly elegant way to distill

97
00:06:31,680 --> 00:06:36,780
the idea of change anywhere in a message to be reflected in a single bit of information.

98
00:06:37,500 --> 00:06:43,760
Notice if any bit of this message gets flipped, either from 0 to 1 or 1 to 0, it changes the

99
00:06:43,760 --> 00:06:46,540
total count of 1s from being even to being odd.

100
00:06:47,980 --> 00:06:51,820
So if you're the receiver, you look at this message, and you see an odd number of 1s,

101
00:06:51,820 --> 00:06:56,620
you can know for sure that some error has occurred, even though you might have no idea

102
00:06:56,620 --> 00:06:57,460
where it was.

103
00:06:58,500 --> 00:07:02,680
In the jargon, whether a group of bits has an even or an odd number of 1s is known as

104
00:07:02,680 --> 00:07:03,340
its parity.

105
00:07:04,860 --> 00:07:09,120
You could also use numbers and say the parity is 0 or 1, which is typically more helpful

106
00:07:09,120 --> 00:07:13,340
once you start doing math with the idea, and this special bit that the sender uses to control

107
00:07:13,340 --> 00:07:15,520
the parity is called the parity bit.

108
00:07:17,560 --> 00:07:21,960
And actually, we should be clear, if the receiver sees an odd parity, it doesn't

109
00:07:21,960 --> 00:07:26,200
necessarily mean there was just one error, there might have been 3 errors or 5 or any

110
00:07:26,200 --> 00:07:29,260
other odd number, but they can know for sure that it wasn't 0.

111
00:07:29,980 --> 00:07:35,140
On the other hand, if there had been 2 errors, or any even number of errors, that final count

112
00:07:35,140 --> 00:07:39,620
of 1s would still be even, so the receiver can't have full confidence that an even

113
00:07:39,620 --> 00:07:42,300
count necessarily means the message is error-free.

114
00:07:42,840 --> 00:07:47,400
You might complain that a message which gets messed up by only 2 bit flips is pretty weak,

115
00:07:47,540 --> 00:07:49,080
and you would be absolutely right.

116
00:07:49,700 --> 00:07:54,560
Keep in mind, though, there is no method for error detection or correction that could give

117
00:07:54,560 --> 00:07:58,900
you 100% confidence that the message you receive is the one the sender intended.

118
00:07:59,580 --> 00:08:03,840
After all, enough random noise could always change one valid message into another valid

119
00:08:03,840 --> 00:08:05,440
message just by pure chance.

120
00:08:06,240 --> 00:08:10,580
Instead, the goal is to come up with a scheme that's robust up to a certain maximum number

121
00:08:10,580 --> 00:08:15,380
of errors, or maybe to reduce the probability of a false positive like this.

122
00:08:16,260 --> 00:08:20,940
Parity checks on their own are pretty weak, but by distilling the idea of change across

123
00:08:20,940 --> 00:08:25,520
a full message down to a single bit, what they give us is a powerful building block

124
00:08:25,520 --> 00:08:27,160
for more sophisticated schemes.

125
00:08:27,940 --> 00:08:32,380
For example, as Hamming was searching for a way to identify where an error happened,

126
00:08:32,760 --> 00:08:37,200
not just that it happened, his key insight was that if you apply some parity checks not

127
00:08:37,200 --> 00:08:42,080
to the full message, but to certain carefully selected subsets, you can ask a more refined

128
00:08:42,080 --> 00:08:45,940
series of questions that pin down the location of any single bit error.

129
00:08:46,680 --> 00:08:51,200
The overall feeling is a bit like playing a game of 20 questions, asking yes or no queries

130
00:08:51,200 --> 00:08:53,380
that chop the space of possibilities in half.

131
00:08:54,160 --> 00:08:58,800
For example, let's say we do a parity check just on these 8 bits, all of the odd numbered

132
00:08:58,800 --> 00:08:59,380
positions.

133
00:09:00,100 --> 00:09:04,640
Then, if an error is detected, it gives the receiver a little more information about where

134
00:09:04,640 --> 00:09:08,240
specifically the error is, namely that it's in an odd position.

135
00:09:08,940 --> 00:09:13,900
If no error is detected among those 8 bits, it either means there's no error at all,

136
00:09:14,080 --> 00:09:16,240
or it sits somewhere in the even positions.

137
00:09:17,180 --> 00:09:20,980
You might think that limiting a parity check to half the bits makes it less effective,

138
00:09:21,180 --> 00:09:25,500
but when it's done in conjunction with other well-chosen checks, it counter-intuitively

139
00:09:25,500 --> 00:09:27,200
gives us something a lot more powerful.

140
00:09:29,240 --> 00:09:34,440
To actually set up that parity check, remember, it requires earmarking some special bit that

141
00:09:34,440 --> 00:09:36,620
has control for the parity of that full group.

142
00:09:37,480 --> 00:09:39,180
Here let's just choose position 1.

143
00:09:39,720 --> 00:09:44,060
For the example shown, the parity of these 8 bits is currently odd, so the sender is

144
00:09:44,060 --> 00:09:46,980
responsible for toggling that parity bit, and now it's even.

145
00:09:47,940 --> 00:09:50,680
This is only 1 out of 4 parity checks that we'll do.

146
00:09:50,920 --> 00:09:55,540
The second check is among the 8 bits on the right half of the grid, at least as we've

147
00:09:55,540 --> 00:09:56,300
drawn it here.

148
00:09:56,680 --> 00:09:59,580
This time we might use position 2 as a parity bit.

149
00:10:00,020 --> 00:10:04,540
So these 8 bits already have an even parity, and the sender can feel good leaving that

150
00:10:04,540 --> 00:10:06,060
bit number 2 unchanged.

151
00:10:07,020 --> 00:10:10,980
Then on the other end, if the receiver checks the parity of this group and they find that

152
00:10:10,980 --> 00:10:15,380
it's odd, they'll know that the error is somewhere among these 8 bits on the right.

153
00:10:15,820 --> 00:10:20,580
Otherwise, it means either there's no error, or the error is somewhere on the left half.

154
00:10:21,120 --> 00:10:24,060
Or I guess there could have been two errors, but for right now we're going to assume

155
00:10:24,060 --> 00:10:26,500
that there's at most one error in the entire block.

156
00:10:26,940 --> 00:10:28,740
Things break down completely for more than that.

157
00:10:29,160 --> 00:10:32,880
Here, before we look at the next two checks, take a moment to think about what these first

158
00:10:32,880 --> 00:10:35,100
two allow us to do when you consider them together.

159
00:10:35,800 --> 00:10:39,660
Let's say you detect an error among the odd columns and among the right half.

160
00:10:40,200 --> 00:10:43,040
It necessarily means the error is somewhere in the last column.

161
00:10:43,820 --> 00:10:48,300
If there was no error in the odd column but there was one in the right half, that tells

162
00:10:48,300 --> 00:10:49,700
you it's in the second to last column.

163
00:10:50,440 --> 00:10:54,640
Likewise, if there is an error in the odd columns but not in the right half, you know

164
00:10:54,640 --> 00:10:56,020
that it's somewhere in the second column.

165
00:10:56,020 --> 00:11:00,620
And then if neither of those two parity checks detects anything, it means the only place

166
00:11:00,620 --> 00:11:03,120
that an error could be is in that leftmost column.

167
00:11:03,340 --> 00:11:06,120
But it also might simply mean there's no error at all.

168
00:11:06,300 --> 00:11:10,840
Which is all a rather belabored way to say that two parity checks let us pin down the column.

169
00:11:11,480 --> 00:11:13,640
From here, you can probably guess what follows.

170
00:11:13,800 --> 00:11:16,140
We do basically the same thing but for the rows.

171
00:11:16,440 --> 00:11:20,900
There's going to be a parity check on the odd rows, using position 4 as a parity bit.

172
00:11:21,380 --> 00:11:25,820
So in this example, that group already has an even parity, so bit 4 would be set to a 0.

173
00:11:26,560 --> 00:11:31,580
And finally, there's a parity check on the bottom two rows, using position 8 as a parity bit.

174
00:11:32,120 --> 00:11:35,900
In this case, it looks like the sender needs to turn that bit 8 on in order to give the

175
00:11:35,900 --> 00:11:36,820
group even parity.

176
00:11:37,700 --> 00:11:41,840
Just as the first two checks let us pin down the column, these next two let you pin down the row.

177
00:11:42,880 --> 00:11:47,540
As an example, imagine that during the transmission there's an error at, say, position 3.

178
00:11:48,180 --> 00:11:52,180
Well, this affects the first parity group, and it also affects the second parity group,

179
00:11:52,460 --> 00:11:55,560
so the receiver knows that there's an error somewhere in that right column.

180
00:11:56,100 --> 00:12:00,540
But it doesn't affect the third group, and it doesn't affect the fourth group.

181
00:12:01,240 --> 00:12:05,480
And that lets the receiver pinpoint the error up to the first row, which necessarily means

182
00:12:05,480 --> 00:12:07,520
position 3, so they can fix the error.

183
00:12:08,580 --> 00:12:12,360
You might enjoy taking a moment to convince yourself that the answers to these four questions

184
00:12:12,360 --> 00:12:17,100
really will always let you pin down a specific location, no matter where they turn out to be.

185
00:12:17,720 --> 00:12:23,060
In fact, the astute among you might even notice a connection between these questions and binary counting.

186
00:12:23,500 --> 00:12:28,920
And if you do, again let me emphasize, pause, try for yourself to draw the connection before I spoil it.

187
00:12:30,500 --> 00:12:36,060
If you're wondering what happens if a parity bit itself gets affected, well, you can just try it.

188
00:12:36,440 --> 00:12:40,760
Take a moment to think about how any error among these four special bits is going to

189
00:12:40,760 --> 00:12:44,180
be tracked down just like any other, with the same group of four questions.

190
00:12:47,060 --> 00:12:51,160
It doesn't really matter, since at the end of the day what we want is to protect the message bits,

191
00:12:51,420 --> 00:12:53,100
the error correction bits are just riding along.

192
00:12:53,600 --> 00:12:57,820
But protecting those bits as well is something that naturally falls out of the scheme as a byproduct.

193
00:12:59,200 --> 00:13:01,760
You might also enjoy anticipating how this scales.

194
00:13:02,300 --> 00:13:08,100
If we used a block of size 256 bits, for example, in order to pin down a location, you need

195
00:13:08,100 --> 00:13:12,780
only eight yes or no questions to binary search your way down to some specific spot.

196
00:13:15,640 --> 00:13:20,500
And remember, each question requires giving up only a single bit to set the appropriate parity check.

197
00:13:23,160 --> 00:13:29,360
Some of you may already see it, but we'll talk later about the systematic way to find what these questions are in just a minute or two.

198
00:13:29,880 --> 00:13:33,660
Hopefully this sketch is enough to appreciate the efficiency of what we're developing here.

199
00:13:33,660 --> 00:13:38,720
Everything except for those eight highlighted parity bits can be whatever you want it to be,

200
00:13:38,960 --> 00:13:41,000
carrying whatever message or data you want.

201
00:13:41,720 --> 00:13:46,140
The eight bits are redundant in the sense that they're completely determined by the rest of the message,

202
00:13:46,420 --> 00:13:50,020
but it's in a much smarter way than simply copying the message as a whole.

203
00:13:53,600 --> 00:13:58,380
And still, for so little given up, you would be able to identify and fix any single bit error.

204
00:13:59,200 --> 00:14:00,400
Well, almost.

205
00:14:00,960 --> 00:14:05,400
Okay, so the one problem here is that if none of the four parity checks detect an error,

206
00:14:05,840 --> 00:14:11,180
meaning that the specially selected subsets of eight bits all have even parities, just like the sender intended,

207
00:14:11,880 --> 00:14:16,860
then it either means there was no error at all, or it narrows us down into position zero.

208
00:14:17,740 --> 00:14:22,560
You see, with four yes or no questions, we have 16 possible outcomes for our parity checks,

209
00:14:22,880 --> 00:14:27,320
and at first that feels perfect for pinpointing one out of 16 positions in the block,

210
00:14:27,320 --> 00:14:31,900
but you also need to communicate a 17th outcome, the no error condition.

211
00:14:33,020 --> 00:14:37,300
The solution here is actually pretty simple. Just forget about that zeroth bit entirely.

212
00:14:37,840 --> 00:14:40,560
So when we do our four parity checks and we see that they're all even,

213
00:14:41,000 --> 00:14:43,460
it unambiguously means that there is no error.

214
00:14:44,240 --> 00:14:48,920
What that means is rather than working with a 16-bit block, we work with a 15-bit block,

215
00:14:49,120 --> 00:14:53,220
where 11 of the bits are free to carry a message and four of them are there for redundancy.

216
00:14:53,780 --> 00:14:58,800
And with that, we now have what people in the business would refer to as a 15-11 Hamming code.

217
00:14:59,860 --> 00:15:03,220
That said, it is nice to have a block size that's a clean power of two,

218
00:15:03,520 --> 00:15:08,140
and there's a clever way that we can keep that zeroth bit around and get it to do a little extra work for us.

219
00:15:08,700 --> 00:15:13,060
If we use it as a parity bit across the whole block, it lets us actually detect,

220
00:15:13,180 --> 00:15:15,540
even though we can't correct, two-bit errors.

221
00:15:16,160 --> 00:15:19,480
Here's how it works. After setting those four special error correcting bits,

222
00:15:19,480 --> 00:15:24,940
we set that zeroth one so that the parity of the full block is even, just like a normal parity check.

223
00:15:25,700 --> 00:15:30,240
Now, if there's a single bit error, then the parity of the full block toggles to be odd,

224
00:15:30,320 --> 00:15:33,600
but we would catch that anyway, thanks to the four error correcting checks.

225
00:15:34,160 --> 00:15:38,840
However, if there's two errors, then the overall parity is going to toggle back to being even,

226
00:15:38,840 --> 00:15:42,280
but the receiver would still see that there's been at least some error

227
00:15:42,280 --> 00:15:45,180
because of what's going on with those four usual parity checks.

228
00:15:45,180 --> 00:15:50,360
So if they notice an even parity overall, but something non-zero happening with the other checks,

229
00:15:50,700 --> 00:15:54,000
it tells them there were at least two errors. Isn't that clever?

230
00:15:54,300 --> 00:15:56,200
Even though we can't correct those two-bit errors,

231
00:15:56,620 --> 00:16:01,260
just by putting that one little bothersome zeroth bit back to work, it lets us detect them.

232
00:16:02,260 --> 00:16:05,220
This is pretty standard, it's known as an extended Hamming code.

233
00:16:06,540 --> 00:16:10,500
Technically speaking, you now have a full description of what a Hamming code does,

234
00:16:10,760 --> 00:16:12,880
at least for the example of a 16-bit block,

235
00:16:12,880 --> 00:16:17,340
but I think you'll find it more satisfying to check your understanding and solidify everything

236
00:16:17,340 --> 00:16:21,320
up to this point by doing one full example from start to finish yourself.

237
00:16:22,080 --> 00:16:24,300
I'll step through it with you though so you can check yourself.

238
00:16:25,120 --> 00:16:28,960
To set up a message, whether that's a literal message that you're translating over space,

239
00:16:29,180 --> 00:16:34,660
or some data that you want to store over time, the first step is to divide it up into 11-bit chunks.

240
00:16:35,580 --> 00:16:39,760
Each chunk is going to get packaged into an error-resistant 16-bit block.

241
00:16:39,760 --> 00:16:43,220
So let's take this one as an example and actually work it out.

242
00:16:43,740 --> 00:16:47,020
Go ahead, actually do it! Pause and try putting together this block.

243
00:16:52,720 --> 00:16:58,020
Okay, you ready? Remember, position 0 along with the other powers of 2 are reserved for error

244
00:16:58,020 --> 00:17:02,860
correction duty, so you start by placing the message bits in all of the remaining spots, in

245
00:17:02,860 --> 00:17:10,140
order. You need this group to have an even parity, which it already does, so you should have set that

246
00:17:10,140 --> 00:17:16,300
parity bit in position 1 to be a 0. The next group starts off with an odd parity, so you should have

247
00:17:16,300 --> 00:17:22,820
set its parity bit to be 1. The group after that starts with an odd parity, so again you should

248
00:17:22,820 --> 00:17:28,660
have set its parity bit to 1. And the final group also has an odd parity, meaning we set that bit in

249
00:17:28,660 --> 00:17:36,080
position 8 to be a 1. And then as the final step, the full block now has an even parity, meaning that

250
00:17:36,080 --> 00:17:42,920
you can set that bit number 0, the overarching parity bit, to be 0. So as this block is sent off,

251
00:17:43,140 --> 00:17:49,140
the parity of the four special subsets and the block as a whole will all be even, or 0. As the

252
00:17:49,140 --> 00:17:54,320
second part of the exercise, let's have you play the role of the receiver. Of course, that would

253
00:17:54,320 --> 00:17:58,920
mean you don't already know what this message is. Maybe some of you memorized it, but let's assume

254
00:17:58,920 --> 00:18:04,960
that you haven't. What I'm going to do is change either 0, 1, or 2 of the bits in that block,

255
00:18:04,980 --> 00:18:10,810
and then ask you to figure out what it is that I did. So again, pause and try working it out.

256
00:18:18,790 --> 00:18:24,370
Okay, so you as the receiver now check the first parity group, and you can see that it's even,

257
00:18:24,790 --> 00:18:31,110
so any error that exists would have to be in an even column. The next check gives us an odd

258
00:18:31,110 --> 00:18:36,650
number, telling us both that there's at least one error, and narrowing us down into this specific

259
00:18:36,650 --> 00:18:43,230
column. The third check is even, chopping down the possibilities even further. And the last

260
00:18:43,230 --> 00:18:47,850
parity check is odd, telling us there's an error somewhere in the bottom, which by now we can see

261
00:18:47,850 --> 00:18:55,190
must be in position number 10. What's more, the parity of the whole block is odd, giving us

262
00:18:55,190 --> 00:19:01,630
confidence that there was one flip and not two. If it's three or more, all bets are off. After

263
00:19:01,630 --> 00:19:07,050
correcting that bit number 10, pulling out the 11 bits that were not used for correction gives us

264
00:19:07,050 --> 00:19:12,610
the relevant segment of the original message, which if you rewind and compare is indeed exactly

265
00:19:12,610 --> 00:19:18,490
what we started the example with. And now that you know how to do all this by hand, I'd like to show

266
00:19:18,490 --> 00:19:23,170
you how you can carry out the core part of all of this logic with a single line of Python code.

267
00:19:23,870 --> 00:19:28,870
You see, what I haven't told you yet is just how elegant this algorithm really is, how simple it

268
00:19:28,870 --> 00:19:33,550
is to get a machine to point to the position of an error, how to systematically scale it, and how

269
00:19:33,550 --> 00:19:38,750
we can frame all of this as one single operation rather than multiple separate parity checks.

270
00:19:39,430 --> 00:19:41,710
To see what I mean, come join me in part two.

