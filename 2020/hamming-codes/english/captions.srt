1
00:00:03,620 --> 00:00:06,804
Have you ever wondered how it's possible to scratch a CD 

2
00:00:06,804 --> 00:00:10,100
or a DVD and still have it play back whatever it's storing?

3
00:00:10,900 --> 00:00:14,301
The scratch really does affect the 1s and 0s on the disk, 

4
00:00:14,301 --> 00:00:17,410
so it reads off different data from what was stored, 

5
00:00:17,410 --> 00:00:21,574
but unless it's really scratched up, the bits it reads off are decoded 

6
00:00:21,574 --> 00:00:25,973
into precisely the same file that was encoded onto it, a bit for bit copy, 

7
00:00:25,973 --> 00:00:27,440
despite all those errors.

8
00:00:27,440 --> 00:00:32,079
There is a whole pile of mathematical cleverness that allows us to store data, 

9
00:00:32,079 --> 00:00:36,660
and just as importantly to transmit data, in a way that's resilient to errors.

10
00:00:37,520 --> 00:00:39,627
Well, okay, actually it doesn't take that much 

11
00:00:39,627 --> 00:00:41,600
cleverness to come up with a way to do this.

12
00:00:42,060 --> 00:00:46,185
Any file, whether it's a video or sound or text, some code, 

13
00:00:46,185 --> 00:00:50,380
an image, whatever, is ultimately some sequence of 1s and 0s.

14
00:00:50,680 --> 00:00:53,340
And a simple strategy to correct any bit that gets 

15
00:00:53,340 --> 00:00:56,000
flipped would be to store three copies of each bit.

16
00:00:57,580 --> 00:01:00,843
Then the machine reading this file could compare these three copies 

17
00:01:00,843 --> 00:01:04,060
and always take the best 2 out of 3 whenever there's a discrepancy.

18
00:01:07,160 --> 00:01:10,860
But what that means is using two thirds of your space for redundancy.

19
00:01:11,480 --> 00:01:13,595
And even then, for all of that space given up, 

20
00:01:13,595 --> 00:01:17,240
there's no strong guarantee about what happens if more than one bit gets flipped.

21
00:01:17,980 --> 00:01:20,836
The much more interesting question is how to make it so that 

22
00:01:20,836 --> 00:01:24,020
errors can be corrected while giving up as little space as possible.

23
00:01:24,520 --> 00:01:28,222
For example, using the method you'll learn about this video, 

24
00:01:28,222 --> 00:01:33,138
you could store your data in 256-bit blocks, where each block uses 9 bits, 9(!), 

25
00:01:33,138 --> 00:01:38,115
to act as a kind of redundancy, and the other 247 bits are free to carry whatever 

26
00:01:38,115 --> 00:01:40,300
meaningful message or data you want.

27
00:01:40,900 --> 00:01:44,166
And it will still be the case that if any bit gets flipped here, 

28
00:01:44,166 --> 00:01:46,578
just by looking at this block and nothing more, 

29
00:01:46,578 --> 00:01:50,549
a machine will be able to identify that there was an error and precisely where 

30
00:01:50,549 --> 00:01:52,660
it was so that it knows how to correct it.

31
00:01:52,660 --> 00:01:54,620
And honestly, that feels like magic.

32
00:01:55,440 --> 00:01:57,987
And for this particular scheme, if two bits get flipped, 

33
00:01:57,987 --> 00:02:01,206
the machine will at least be able to detect that there were two errors, 

34
00:02:01,206 --> 00:02:02,860
though it won't know how to fix them.

35
00:02:03,520 --> 00:02:06,900
We'll talk a little bit later about how this scales for blocks with different sizes.

36
00:02:07,860 --> 00:02:10,676
Methods that let you correct errors like this are known, 

37
00:02:10,676 --> 00:02:12,900
reasonably enough, as error correction codes.

38
00:02:13,660 --> 00:02:17,877
For the better part of the last century, this field has been a really rich source 

39
00:02:17,877 --> 00:02:21,940
of surprisingly deep math that gets incorporated into devices we use every day.

40
00:02:22,840 --> 00:02:25,800
The goal here is to give you a very thorough understanding 

41
00:02:25,800 --> 00:02:28,660
of one of the earliest examples, known as a Hamming code.

42
00:02:29,520 --> 00:02:33,042
And by the way, the way I'm thinking about the structure of this video is less 

43
00:02:33,042 --> 00:02:36,431
about explaining it as directly as possible, and more a matter of prompting 

44
00:02:36,431 --> 00:02:39,820
you to invent it for yourself, with a little gentle guidance here and there.

45
00:02:40,120 --> 00:02:43,909
So when you feel like you see where it's going at some point, take that moment to pause, 

46
00:02:43,909 --> 00:02:46,720
actively predict what the scheme is going to be before I tell you.

47
00:02:47,240 --> 00:02:50,744
Also, if you want your understanding to get down to the hardware level, 

48
00:02:50,744 --> 00:02:54,394
Ben Eater has made a video in conjunction with this one showing you how to 

49
00:02:54,394 --> 00:02:58,240
actually implement Hamming codes on breadboards, which is extremely satisfying.

50
00:02:59,300 --> 00:03:03,058
You should know, Hamming codes are not as widely used as more modern codes, 

51
00:03:03,058 --> 00:03:06,471
like the Reed-Solomon algorithm, but there is a certain magic to the 

52
00:03:06,471 --> 00:03:09,785
contrast between just how impossible this task feels at the start, 

53
00:03:09,785 --> 00:03:13,000
and how utterly reasonable it seems once you learn about Hamming.

54
00:03:13,720 --> 00:03:18,830
The basic principle of error correction is that in a vast space of all possible messages, 

55
00:03:18,830 --> 00:03:22,180
only some subset are going to be considered valid messages.

56
00:03:22,800 --> 00:03:26,940
As an analogy, think about correctly spelled words vs incorrectly spelled words.

57
00:03:28,900 --> 00:03:33,225
Whenever a valid message gets altered, the receiver is responsible for correcting 

58
00:03:33,225 --> 00:03:37,340
what they see back to the nearest valid neighbor, as you might do with a typo.

59
00:03:38,220 --> 00:03:42,312
Coming up with a concrete algorithm to efficiently categorize messages like this, 

60
00:03:42,312 --> 00:03:44,060
though, takes a certain cleverness.

61
00:03:46,780 --> 00:03:51,431
The story begins in the 1940s, when a young Richard Hamming was working for Bell Labs, 

62
00:03:51,431 --> 00:03:55,067
and some of his work involved using a very big expensive punch card 

63
00:03:55,067 --> 00:03:57,420
computer that he had only limited access to.

64
00:03:57,800 --> 00:04:00,247
And the programs he kept putting through it kept failing, 

65
00:04:00,247 --> 00:04:02,400
because every now and then a bit would get misread.

66
00:04:03,120 --> 00:04:05,747
Frustration being the crucible of invention, he got so fed 

67
00:04:05,747 --> 00:04:08,420
up that he invented the world's first error correction code.

68
00:04:09,060 --> 00:04:11,397
There are many different ways to frame Hamming codes, 

69
00:04:11,397 --> 00:04:14,557
but as a first pass we're going to go through it the way Hamming himself 

70
00:04:14,557 --> 00:04:15,380
thought about them.

71
00:04:16,519 --> 00:04:20,940
Let's use an example that's simple, but not too simple, a block of 16 bits.

72
00:04:21,820 --> 00:04:24,740
We'll number the positions of these bits from 0 up to 15.

73
00:04:25,620 --> 00:04:29,684
The actual data we want to store is only going to make up 12 of these bits, 

74
00:04:29,684 --> 00:04:33,000
while 4 of the positions are reserved as a kind of redundancy.

75
00:04:33,900 --> 00:04:36,896
The word redundant here doesn't simply mean copy, after all, 

76
00:04:36,896 --> 00:04:40,040
those 4 bits don't give us enough room to blindly copy the data.

77
00:04:40,720 --> 00:04:44,616
Instead, they'll need to be a much more nuanced and clever kind of redundancy, 

78
00:04:44,616 --> 00:04:47,280
not adding any new information, but adding resilience.

79
00:04:48,600 --> 00:04:51,947
You might expect these 4 special bits to come nicely packaged together, 

80
00:04:51,947 --> 00:04:54,737
maybe at the end or something like that, but as you'll see, 

81
00:04:54,737 --> 00:04:58,411
having them sit in positions which are powers of 2 allows for something that's 

82
00:04:58,411 --> 00:04:59,620
really elegant by the end.

83
00:05:00,200 --> 00:05:03,540
It also might give you a little hint about how this scales for larger blocks.

84
00:05:04,900 --> 00:05:07,881
Also technically it ends up being only 11 bits of data, 

85
00:05:07,881 --> 00:05:11,396
you'll find there's a mild nuance for what goes on at position 0, 

86
00:05:11,396 --> 00:05:13,260
but don't worry about that for now.

87
00:05:14,140 --> 00:05:17,631
Like any error correction algorithm, this will involve two players, 

88
00:05:17,631 --> 00:05:20,764
a sender who's responsible for setting these 4 special bits, 

89
00:05:20,764 --> 00:05:24,410
and a receiver who's responsible for performing some kind of check and 

90
00:05:24,410 --> 00:05:25,540
correcting the errors.

91
00:05:26,300 --> 00:05:29,247
Of course, the words sender and receiver really refer to machines 

92
00:05:29,247 --> 00:05:31,882
or software that's doing all the checks, and the idea of a 

93
00:05:31,882 --> 00:05:34,740
message is meant really broadly, to include things like storage.

94
00:05:35,340 --> 00:05:38,581
After all, storing data is the same thing as sending a message just 

95
00:05:38,581 --> 00:05:41,680
from the past to the future instead of from one place to another.

96
00:05:42,560 --> 00:05:47,191
So that's the setup, but before we can dive in we need to talk about a related idea which 

97
00:05:47,191 --> 00:05:50,176
was fresh on Hamming's mind in the time of his discovery, 

98
00:05:50,176 --> 00:05:54,241
a method which lets you detect any single bit errors, but not to correct them, 

99
00:05:54,241 --> 00:05:56,300
known in the business as a parity check.

100
00:05:56,880 --> 00:06:00,449
For a parity check, we separate out only one single bit that the sender 

101
00:06:00,449 --> 00:06:03,820
is responsible for tuning, and the rest are free to carry a message.

102
00:06:04,880 --> 00:06:08,021
The only job of this special bit is to make sure that 

103
00:06:08,021 --> 00:06:11,280
the total number of 1s in the message is an even number.

104
00:06:12,080 --> 00:06:15,750
So for example right now, that total number of 1s is 7, that's odd, 

105
00:06:15,750 --> 00:06:19,960
so the sender needs to flip that special bit to be a 1, making the count even.

106
00:06:20,800 --> 00:06:24,038
But if the block had already started off with an even number of 1s, 

107
00:06:24,038 --> 00:06:26,420
then this special bit would have been kept at a 0.

108
00:06:27,340 --> 00:06:32,086
This is pretty simple, deceptively simple, but it's an incredibly elegant way to distill 

109
00:06:32,086 --> 00:06:36,780
the idea of change anywhere in a message to be reflected in a single bit of information.

110
00:06:37,500 --> 00:06:42,536
Notice if any bit of this message gets flipped, either from 0 to 1 or 1 to 0, 

111
00:06:42,536 --> 00:06:46,540
it changes the total count of 1s from being even to being odd.

112
00:06:47,980 --> 00:06:50,681
So if you're the receiver, you look at this message, 

113
00:06:50,681 --> 00:06:55,013
and you see an odd number of 1s, you can know for sure that some error has occurred, 

114
00:06:55,013 --> 00:06:57,460
even though you might have no idea where it was.

115
00:06:58,500 --> 00:07:00,868
In the jargon, whether a group of bits has an 

116
00:07:00,868 --> 00:07:03,340
even or odd number of 1s is known as its parity.

117
00:07:04,860 --> 00:07:07,449
You could also use numbers and say the parity is 0 or 1, 

118
00:07:07,449 --> 00:07:10,720
which is typically more helpful once you start doing math with the idea.

119
00:07:11,220 --> 00:07:15,520
And this special bit that the sender uses to control the parity is called the parity bit.

120
00:07:17,560 --> 00:07:21,105
And actually, we should be clear, if the receiver sees an odd parity, 

121
00:07:21,105 --> 00:07:25,461
it doesn't necessarily mean there was just one error, there might have been 3 errors, 

122
00:07:25,461 --> 00:07:29,260
or 5, or any other odd number, but they can know for sure that it wasn't 0.

123
00:07:29,980 --> 00:07:34,159
On the other hand, if there had been 2 errors, or any even number of errors, 

124
00:07:34,159 --> 00:07:38,283
that final count of 1s would still be even, so the receiver can't have full 

125
00:07:38,283 --> 00:07:42,300
confidence that an even count necessarily means the message is error-free.

126
00:07:42,840 --> 00:07:45,984
You might complain that a message which gets messed up by only 

127
00:07:45,984 --> 00:07:49,080
2 bit flips is pretty weak, and you would be absolutely right.

128
00:07:49,700 --> 00:07:54,326
Keep in mind, though, there is no method for error detection or correction that could 

129
00:07:54,326 --> 00:07:58,900
give you 100% confidence that the message you receive is the one the sender intended.

130
00:07:59,580 --> 00:08:02,358
After all, enough random noise could always change one 

131
00:08:02,358 --> 00:08:05,440
valid message into another valid message just by pure chance.

132
00:08:06,240 --> 00:08:10,837
Instead, the goal is to come up with a scheme that's robust up to a certain maximum 

133
00:08:10,837 --> 00:08:15,380
number of errors, or maybe to reduce the probability of a false positive like this.

134
00:08:16,260 --> 00:08:19,803
Parity checks on their own are pretty weak, but by distilling the 

135
00:08:19,803 --> 00:08:22,971
idea of change across a full message down to a single bit, 

136
00:08:22,971 --> 00:08:27,160
what they give us is a powerful building block for more sophisticated schemes.

137
00:08:27,940 --> 00:08:32,507
For example, as Hamming was searching for a way to identify where an error happened, 

138
00:08:32,507 --> 00:08:37,020
not just that it happened, his key insight was that if you apply some parity checks 

139
00:08:37,020 --> 00:08:40,674
not to the full message, but to certain carefully selected subsets, 

140
00:08:40,674 --> 00:08:45,026
you can ask a more refined series of questions that pin down the location of any 

141
00:08:45,026 --> 00:08:45,940
single bit error.

142
00:08:46,680 --> 00:08:49,931
The overall feeling is a bit like playing a game of 20 questions, 

143
00:08:49,931 --> 00:08:53,380
asking yes or no queries that chop the space of possibilities in half.

144
00:08:54,160 --> 00:08:57,605
For example, let's say we do a parity check just on these 8 bits, 

145
00:08:57,605 --> 00:08:59,380
all of the odd numbered positions.

146
00:09:00,100 --> 00:09:04,249
Then if an error is detected, it gives the receiver a little more information 

147
00:09:04,249 --> 00:09:08,240
about where specifically the error is, namely that it's in an odd position.

148
00:09:08,940 --> 00:09:13,787
If no error is detected among those 8 bits, it either means there's no error at all, 

149
00:09:13,787 --> 00:09:16,240
or it sits somewhere in the even positions.

150
00:09:17,180 --> 00:09:21,272
You might think that limiting a parity check to half the bits makes it less effective, 

151
00:09:21,272 --> 00:09:24,330
but when it's done in conjunction with other well-chosen checks, 

152
00:09:24,330 --> 00:09:27,200
it counterintuitively gives us something a lot more powerful.

153
00:09:29,240 --> 00:09:31,788
To actually set up that parity check, remember, 

154
00:09:31,788 --> 00:09:35,611
it requires earmarking some special bit that has control for the parity 

155
00:09:35,611 --> 00:09:36,620
of that full group.

156
00:09:37,480 --> 00:09:39,180
Here let's just choose position 1.

157
00:09:39,720 --> 00:09:43,124
For the example shown, the parity of these 8 bits is currently odd, 

158
00:09:43,124 --> 00:09:46,980
so the sender is responsible for toggling that parity bit, and now it's even.

159
00:09:47,940 --> 00:09:50,680
This is only 1 out of 4 parity checks that we'll do.

160
00:09:50,920 --> 00:09:54,578
The second check is among the 8 bits on the right half of the grid, 

161
00:09:54,578 --> 00:09:56,300
at least as we've drawn it here.

162
00:09:56,680 --> 00:09:59,651
This time we might use position 2 as a parity bit, 

163
00:09:59,651 --> 00:10:04,428
so these 8 bits already have an even parity, and the sender can feel good leaving 

164
00:10:04,428 --> 00:10:06,060
that bit number 2 unchanged.

165
00:10:07,020 --> 00:10:11,127
Then on the other end, if the receiver checks the parity of this group and they find 

166
00:10:11,127 --> 00:10:15,380
that it's odd, they'll know that the error is somewhere among these 8 bits on the right.

167
00:10:15,820 --> 00:10:20,580
Otherwise it means either there's no error, or the error is somewhere on the left half.

168
00:10:21,120 --> 00:10:23,849
Or I guess there could have been two errors, but for right now we're 

169
00:10:23,849 --> 00:10:26,500
going to assume that there's at most one error in the entire block.

170
00:10:26,940 --> 00:10:28,740
Things break down completely for more than that.

171
00:10:29,160 --> 00:10:32,004
Here, before we look at the next two checks, take a moment to think 

172
00:10:32,004 --> 00:10:35,100
about what these first two allow us to do when you consider them together.

173
00:10:35,800 --> 00:10:39,660
Let's say you detect an error among the odd columns, and among the right half.

174
00:10:40,200 --> 00:10:43,040
It necessarily means the error is somewhere in the last column.

175
00:10:43,820 --> 00:10:47,413
If there was no error in the odd column but there was one in the right half, 

176
00:10:47,413 --> 00:10:49,700
that tells you it's in the second to last column.

177
00:10:50,440 --> 00:10:53,944
Likewise if there is an error in the odd columns but not in the right half, 

178
00:10:53,944 --> 00:10:56,020
you know it's somewhere in the second column.

179
00:10:56,020 --> 00:10:59,199
And if neither of those two parity checks detects anything, 

180
00:10:59,199 --> 00:11:03,120
it means the only place that an error could be is in that leftmost column.

181
00:11:03,340 --> 00:11:06,120
But it also might simply mean there's no error at all.

182
00:11:06,300 --> 00:11:08,643
Which is all a rather belabored way to say that 

183
00:11:08,643 --> 00:11:10,840
two parity checks let us pin down the column.

184
00:11:11,480 --> 00:11:13,640
From here, you can probably guess what follows.

185
00:11:13,800 --> 00:11:16,140
We do basically the same thing but for the rows.

186
00:11:16,440 --> 00:11:20,900
There's going to be a parity check on the odd rows, using position 4 as a parity bit.

187
00:11:21,380 --> 00:11:25,820
So in this example that group already has an even parity, so bit 4 would be set to a 0.

188
00:11:26,560 --> 00:11:29,779
And finally there's a parity check on the bottom two rows, 

189
00:11:29,779 --> 00:11:31,580
using position 8 as a parity bit.

190
00:11:32,120 --> 00:11:34,470
In this case, it looks like the sender needs to turn 

191
00:11:34,470 --> 00:11:36,820
that bit 8 on in order to give the group even parity.

192
00:11:37,700 --> 00:11:40,132
Just as the first two checks let us pin down the column, 

193
00:11:40,132 --> 00:11:41,840
these next two let you pin down the row.

194
00:11:42,880 --> 00:11:47,540
As an example, imagine that during the transmission there's an error at, say, position 3.

195
00:11:48,180 --> 00:11:52,143
Well this affects the first parity group, and it also affects the second parity group, 

196
00:11:52,143 --> 00:11:55,560
so the receiver knows that there's an error somewhere in that right column.

197
00:11:56,100 --> 00:12:00,540
But it doesn't affect the third group, and it doesn't affect the fourth group.

198
00:12:01,240 --> 00:12:04,501
And that lets the receiver pinpoint the error up to the first row, 

199
00:12:04,501 --> 00:12:07,520
which necessarily means position 3, so they can fix the error.

200
00:12:08,580 --> 00:12:11,404
You might enjoy taking a moment to convince yourself that the 

201
00:12:11,404 --> 00:12:15,459
answers to these four questions really will always let you pin down a specific location, 

202
00:12:15,459 --> 00:12:17,100
no matter where they turn out to be.

203
00:12:17,720 --> 00:12:20,262
In fact, the astute among you might even notice a 

204
00:12:20,262 --> 00:12:23,060
connection between these questions and binary counting.

205
00:12:23,500 --> 00:12:26,105
And if you do, again let me emphasize, pause, try 

206
00:12:26,105 --> 00:12:28,920
for yourself to draw the connection before I spoil it.

207
00:12:30,500 --> 00:12:34,569
If you're wondering what happens if a parity bit itself gets affected, 

208
00:12:34,569 --> 00:12:36,060
well, you can just try it.

209
00:12:36,440 --> 00:12:40,406
Take a moment to think about how any error among these four special bits is going 

210
00:12:40,406 --> 00:12:44,180
to be tracked down just like any other, with the same group of four questions.

211
00:12:47,060 --> 00:12:50,059
It doesn't really matter, since at the end of the day what we want is to 

212
00:12:50,059 --> 00:12:53,100
protect the message bits, the error correction bits are just riding along.

213
00:12:53,600 --> 00:12:55,772
But protecting those bits as well is something that 

214
00:12:55,772 --> 00:12:57,820
naturally falls out of the scheme as a byproduct.

215
00:12:59,200 --> 00:13:01,760
You might also enjoy anticipating how this scales.

216
00:13:02,300 --> 00:13:07,242
If we used a block of size 256 bits, for example, in order to pin down a location, 

217
00:13:07,242 --> 00:13:12,482
you need only eight yes or no questions to binary search your way down to some specific 

218
00:13:12,482 --> 00:13:12,780
spot.

219
00:13:15,640 --> 00:13:18,142
And remember, each question requires giving up only 

220
00:13:18,142 --> 00:13:20,500
a single bit to set the appropriate parity check.

221
00:13:23,160 --> 00:13:26,053
Some of you may already see it, but we'll talk later about the 

222
00:13:26,053 --> 00:13:29,360
systematic way to find what these questions are in just a minute or two.

223
00:13:29,880 --> 00:13:31,790
Hopefully this sketch is enough to appreciate 

224
00:13:31,790 --> 00:13:33,660
the efficiency of what we're developing here.

225
00:13:33,660 --> 00:13:36,996
The first thing, except for those eight highlighted parity bits, 

226
00:13:36,996 --> 00:13:41,000
can be whatever you want it to be, carrying whatever message or data you want.

227
00:13:41,720 --> 00:13:45,893
The 8 bits are redundant in the sense that they're completely determined by the rest of 

228
00:13:45,893 --> 00:13:50,020
the message, but it's in a much smarter way than simply copying the message as a whole.

229
00:13:53,600 --> 00:13:56,040
And still, for so little given up, you would be 

230
00:13:56,040 --> 00:13:58,380
able to identify and fix any single bit error.

231
00:13:59,200 --> 00:14:00,400
Well, almost.

232
00:14:00,960 --> 00:14:05,942
Okay, so the one problem here is that if none of the four parity checks detect an error, 

233
00:14:05,942 --> 00:14:10,309
meaning that the specially selected subsets of 8 bits all have even parities, 

234
00:14:10,309 --> 00:14:14,732
just like the sender intended, then it either means there was no error at all, 

235
00:14:14,732 --> 00:14:16,860
or it narrows us down into position 0.

236
00:14:17,740 --> 00:14:22,536
You see, with four yes or no questions, we have 16 possible outcomes for our parity 

237
00:14:22,536 --> 00:14:27,160
checks, and at first that feels perfect for pinpointing 1 out of 16 positions in 

238
00:14:27,160 --> 00:14:31,900
the block, but you also need to communicate a 17th outcome, the no error condition.

239
00:14:33,020 --> 00:14:37,300
The solution here is actually pretty simple, just forget about that 0th bit entirely.

240
00:14:37,840 --> 00:14:41,250
So when we do our four parity checks and we see that they're all even, 

241
00:14:41,250 --> 00:14:43,460
it unambiguously means that there is no error.

242
00:14:44,240 --> 00:14:48,755
What that means is rather than working with a 16-bit block, we work with a 15-bit block, 

243
00:14:48,755 --> 00:14:53,220
where 11 of the bits are free to carry a message and 4 of them are there for redundancy.

244
00:14:53,780 --> 00:14:56,236
And with that, we now have what people in the 

245
00:14:56,236 --> 00:14:58,800
business would refer to as a 15-11 Hamming code.

246
00:14:59,860 --> 00:15:03,220
That said, it's nice to have a block size that's a clean power of 2, 

247
00:15:03,220 --> 00:15:07,263
and there's a clever way we can keep that 0th bit around and get it to do a little 

248
00:15:07,263 --> 00:15:08,140
extra work for us.

249
00:15:08,700 --> 00:15:11,623
If we use it as a parity bit across the whole block, 

250
00:15:11,623 --> 00:15:15,540
it lets us actually detect, even though we can't correct, 2-bit errors.

251
00:15:16,160 --> 00:15:16,820
Here's how it works.

252
00:15:17,180 --> 00:15:20,001
After setting those four special error-correcting bits, 

253
00:15:20,001 --> 00:15:23,327
we set that 0th one so that the parity of the full block is even, 

254
00:15:23,327 --> 00:15:24,940
just like a normal parity check.

255
00:15:25,700 --> 00:15:30,013
Now, if there's a single bit error, then the parity of the full block toggles to be odd, 

256
00:15:30,013 --> 00:15:33,600
but we would catch that anyway thanks to the four error-correcting checks.

257
00:15:34,160 --> 00:15:37,866
However, if there's two errors, then the overall parity is going to toggle 

258
00:15:37,866 --> 00:15:41,523
back to being even, but the receiver would still see that there's been at 

259
00:15:41,523 --> 00:15:45,180
least some error because of what's going on with those four parity checks.

260
00:15:45,180 --> 00:15:49,124
So if they notice an even parity overall, but something non-zero happening 

261
00:15:49,124 --> 00:15:52,700
with the other checks, it tells them there were at least two errors.

262
00:15:53,520 --> 00:15:54,000
Isn't that clever?

263
00:15:54,300 --> 00:15:56,789
Even though we can't correct those 2-bit errors, 

264
00:15:56,789 --> 00:16:01,260
just by putting that one little bothersome 0th bit back to work, it lets us detect them.

265
00:16:02,260 --> 00:16:05,220
This is pretty standard, it's known as an extended Hamming code.

266
00:16:06,540 --> 00:16:10,716
Technically speaking, you now have a full description of what a Hamming code does, 

267
00:16:10,716 --> 00:16:12,880
at least for the example of a 16-bit block.

268
00:16:12,880 --> 00:16:17,100
But I think you'll find it more satisfying to check your understanding and solidify 

269
00:16:17,100 --> 00:16:21,320
everything up to this point by doing one full example from start to finish yourself.

270
00:16:22,080 --> 00:16:24,300
I'll step through it with you though so you can check yourself.

271
00:16:25,120 --> 00:16:29,756
To set up a message, whether that's a literal message you're translating over space or 

272
00:16:29,756 --> 00:16:34,286
some data you want to store over time, the first step is to divide it up into 11-bit 

273
00:16:34,286 --> 00:16:34,660
chunks.

274
00:16:35,580 --> 00:16:39,760
Each chunk is going to get packaged into an error-resistant 16-bit block.

275
00:16:39,760 --> 00:16:43,220
So let's take this one as an example and actually work it out.

276
00:16:43,740 --> 00:16:44,940
Go ahead, actually do it!

277
00:16:45,220 --> 00:16:47,020
Let's pause and try putting together this block.

278
00:16:52,720 --> 00:16:53,680
Okay, you ready?

279
00:16:54,240 --> 00:16:58,805
Remember, position 0 along with the other powers of 2 are reserved for error correction 

280
00:16:58,805 --> 00:17:03,320
duty, so you start by placing the message bits in all of the remaining spots, in order.

281
00:17:05,339 --> 00:17:08,947
You need this group to have an even parity, which it already does, 

282
00:17:08,947 --> 00:17:12,339
so you should have set that parity bit in position 1 to be a 0.

283
00:17:13,020 --> 00:17:15,450
The next group starts off with an odd parity, 

284
00:17:15,450 --> 00:17:17,880
so you should have set its parity bit to be 1.

285
00:17:19,160 --> 00:17:21,673
The group after that starts with an odd parity, 

286
00:17:21,673 --> 00:17:24,240
so again you should have set its parity bit to 1.

287
00:17:24,780 --> 00:17:27,764
And the final group also has an odd parity, meaning 

288
00:17:27,764 --> 00:17:30,060
we set that bit in position 8 to be a 1.

289
00:17:31,300 --> 00:17:35,555
And then as the final step, the full block now has an even parity, 

290
00:17:35,555 --> 00:17:40,320
meaning you can set that bit number 0, the overarching parity bit, to be 0.

291
00:17:41,340 --> 00:17:44,885
So as this block is sent off, the parity of the four special 

292
00:17:44,885 --> 00:17:48,140
subsets and the block as a whole will all be even, or 0.

293
00:17:48,820 --> 00:17:52,180
As the second part of the exercise, let's have you play the role of the receiver.

294
00:17:53,480 --> 00:17:56,766
Of course, that would mean you don't already know what this message is, 

295
00:17:56,766 --> 00:17:59,780
maybe some of you memorized it, but let's assume that you haven't.

296
00:18:00,020 --> 00:18:04,568
What I'm going to do is change either 0, 1, or 2 of the bits in that block, 

297
00:18:04,568 --> 00:18:07,740
and then ask you to figure out what it is that I did.

298
00:18:08,260 --> 00:18:10,810
So again, pause and try working it out.

299
00:18:18,790 --> 00:18:23,409
Okay, so you as the receiver now check the first parity group and you can see 

300
00:18:23,409 --> 00:18:27,910
that it's even, so any error that exists would have to be in an even column.

301
00:18:29,690 --> 00:18:34,439
The next check gives us an odd number, telling us both that there's at least one error, 

302
00:18:34,439 --> 00:18:37,030
and narrowing us down into this specific column.

303
00:18:38,550 --> 00:18:41,790
The third check is even, chopping down the possibilities even further.

304
00:18:42,650 --> 00:18:46,969
And the last parity check is odd, telling us there's an error somewhere in the bottom, 

305
00:18:46,969 --> 00:18:49,650
which by now we can see must be in position number 10.

306
00:18:51,490 --> 00:18:54,342
What's more, the parity of the whole block is odd, 

307
00:18:54,342 --> 00:18:57,530
giving us confidence that there was one flip and not two.

308
00:18:58,070 --> 00:18:59,970
If it's three or more, all bets are off.

309
00:19:01,310 --> 00:19:05,520
After correcting that bit number 10, pulling out the 11 bits that were not 

310
00:19:05,520 --> 00:19:09,730
used for correction gives us the relevant segment of the original message, 

311
00:19:09,730 --> 00:19:14,390
which if you rewind and compare is indeed exactly what we started the example with.

312
00:19:15,710 --> 00:19:18,012
And now that you know how to do all this by hand, 

313
00:19:18,012 --> 00:19:21,834
I'd like to show you how you can carry out the core part of all of this logic with 

314
00:19:21,834 --> 00:19:23,170
a single line of Python code.

315
00:19:23,870 --> 00:19:28,158
You see, what I haven't told you yet is just how elegant this algorithm really is, 

316
00:19:28,158 --> 00:19:31,878
how simple it is to get a machine to point to the position of an error, 

317
00:19:31,878 --> 00:19:35,598
how to systematically scale it, and how we can frame all of this as one 

318
00:19:35,598 --> 00:19:38,750
single operation rather than multiple separate parity checks.

319
00:19:39,430 --> 00:19:41,310
To see what I mean, come join me in part 2.

