1
00:00:03,620 --> 00:00:06,804
Bir CD'yi veya DVD'yi çizerken, içinde sakladığı 

2
00:00:06,804 --> 00:00:10,100
şeyi oynatmanın nasıl mümkün olduğunu hiç merak ettiniz mi?

3
00:00:10,900 --> 00:00:14,500
Çizik gerçekten diskteki 1'leri ve 0'ları etkiler, 

4
00:00:14,500 --> 00:00:17,796
bu nedenle depolanan verilerden farklı verileri okur, 

5
00:00:17,796 --> 00:00:21,336
ancak gerçekten çizilmediği sürece okuduğu bitlerin kodu, 

6
00:00:21,336 --> 00:00:25,181
üzerine kodlanmış olanla tam olarak aynı dosyaya dönüştürülür. 

7
00:00:25,181 --> 00:00:27,440
tüm bu hatalara rağmen bit bit kopya.

8
00:00:27,440 --> 00:00:30,360
Verileri depolamamıza ve aynı derecede önemlisi, 

9
00:00:30,360 --> 00:00:34,591
hatalara karşı dirençli bir şekilde veri iletmemize olanak tanıyan bir 

10
00:00:34,591 --> 00:00:36,200
sürü matematiksel zeka var.

11
00:00:36,200 --> 00:00:40,880
Tamam, aslında bunu yapmanın bir yolunu bulmak o kadar da zeki olmayı gerektirmiyor.

12
00:00:40,880 --> 00:00:45,440
Herhangi bir dosya, ister video, ister ses, ister metin, ister bir kod, 

13
00:00:45,440 --> 00:00:50,380
ister bir görüntü olsun, sonuçta 1'ler ve 0'lardan oluşan bir dizidir.

14
00:00:50,680 --> 00:00:54,004
Ve ters çevrilen herhangi bir biti düzeltmek için basit bir strateji, 

15
00:00:54,004 --> 00:00:56,000
her bitin üç kopyasını saklamak olacaktır.

16
00:00:57,580 --> 00:01:00,775
Daha sonra bu dosyayı okuyan makine bu üç kopyayı karşılaştırabilir ve 

17
00:01:00,775 --> 00:01:04,060
bir tutarsızlık olduğunda her zaman 3 üzerinden en iyi 2'yi alabilir.

18
00:01:07,160 --> 00:01:10,860
Ancak bunun anlamı, alanınızın üçte ikisini yedeklilik için kullanmaktır.

19
00:01:11,480 --> 00:01:13,540
Ve o zaman bile, kaybedilen tüm bu alana rağmen, 

20
00:01:13,540 --> 00:01:17,240
birden fazla bitin ters çevrilmesi durumunda ne olacağına dair güçlü bir garanti yoktur.

21
00:01:17,980 --> 00:01:21,076
Çok daha ilginç olan soru, mümkün olduğunca az yer kaplarken 

22
00:01:21,076 --> 00:01:24,020
hataların düzeltilebilmesi için bunun nasıl yapılacağıdır.

23
00:01:24,520 --> 00:01:28,973
Örneğin, bu videoda öğreneceğiniz yöntemi kullanarak verilerinizi 

24
00:01:28,973 --> 00:01:33,360
256 bitlik bloklarda saklayabilirsiniz; burada her blok 9 bit, 9!

25
00:01:33,760 --> 00:01:36,721
bir tür artıklık görevi görür ve diğer 247 bit, 

26
00:01:36,721 --> 00:01:40,300
istediğiniz anlamlı mesajı veya veriyi taşımakta özgürdür.

27
00:01:40,900 --> 00:01:43,513
Ve yine de burada herhangi bir bit ters çevrilirse, 

28
00:01:43,513 --> 00:01:46,277
sadece bu bloğa bakarak ve başka hiçbir şeye bakmadan, 

29
00:01:46,277 --> 00:01:50,147
bir makine bir hata olduğunu ve tam olarak nerede olduğunu tespit edebilecek 

30
00:01:50,147 --> 00:01:52,660
ve böylece onu nasıl düzelteceğini bilebilecektir.

31
00:01:52,660 --> 00:01:54,620
Ve dürüst olmak gerekirse, bu sihir gibi geliyor.

32
00:01:55,440 --> 00:01:57,866
Ve bu özel şema için, eğer iki bit ters çevrilirse, 

33
00:01:57,866 --> 00:02:00,573
makine en azından iki hata olduğunu tespit edebilecektir, 

34
00:02:00,573 --> 00:02:02,860
ancak bunları nasıl düzelteceğini bilemeyecektir.

35
00:02:03,520 --> 00:02:05,750
Bunun farklı boyutlardaki bloklar için nasıl ölçeklendirileceği 

36
00:02:05,750 --> 00:02:06,900
hakkında biraz sonra konuşacağız.

37
00:02:07,860 --> 00:02:10,475
Bunun gibi hataları düzeltmenize izin veren yöntemler, 

38
00:02:10,475 --> 00:02:12,900
makul olarak, hata düzeltme kodları olarak bilinir.

39
00:02:13,660 --> 00:02:17,992
Geçen yüzyılın büyük bir bölümünde bu alan, her gün kullandığımız cihazlara dahil edilen, 

40
00:02:17,992 --> 00:02:21,940
şaşırtıcı derecede derin bir matematik açısından gerçekten zengin bir kaynak oldu.

41
00:02:22,840 --> 00:02:25,575
Buradaki amaç size Hamming kodu olarak bilinen en eski 

42
00:02:25,575 --> 00:02:28,660
örneklerden biri hakkında kapsamlı bir anlayış kazandırmaktır.

43
00:02:29,520 --> 00:02:32,565
Bu arada, bu videonun yapısı hakkında düşünme biçimim, 

44
00:02:32,565 --> 00:02:35,223
onu mümkün olduğunca doğrudan açıklamaktan çok, 

45
00:02:35,223 --> 00:02:39,820
ara sıra hafif bir rehberlikle sizi onu kendiniz icat etmeye teşvik etmekle ilgili.

46
00:02:40,120 --> 00:02:43,053
Yani bir noktada işlerin nereye gideceğini gördüğünüzü hissettiğinizde, 

47
00:02:43,053 --> 00:02:46,720
o anı duraklatın ve ben size söylemeden önce planın ne olacağını aktif olarak tahmin edin.

48
00:02:47,240 --> 00:02:50,397
Ayrıca, anlayışınızın donanım düzeyine inmesini istiyorsanız, 

49
00:02:50,397 --> 00:02:54,064
Ben Eater bununla bağlantılı olarak Hamming kodlarını devre tahtalarına 

50
00:02:54,064 --> 00:02:58,240
nasıl uygulayacağınızı gösteren bir video hazırladı ki bu son derece tatmin edici.

51
00:02:59,300 --> 00:03:02,616
Hamming kodlarının, Reed-Solomon algoritması gibi daha modern kodlar 

52
00:03:02,616 --> 00:03:06,125
kadar yaygın kullanılmadığını bilmelisiniz, ancak bu görevin başlangıçta 

53
00:03:06,125 --> 00:03:09,587
ne kadar imkansız hissettirdiği ile bir kez ne kadar mantıklı göründüğü 

54
00:03:09,587 --> 00:03:13,000
arasındaki karşıtlıkta belli bir sihir var. Hamming'i öğreniyorsun.

55
00:03:13,720 --> 00:03:18,072
Hata düzeltmenin temel ilkesi, olası tüm mesajların geniş bir alanında 

56
00:03:18,072 --> 00:03:22,180
yalnızca bazı alt kümelerin geçerli mesaj olarak kabul edilmesidir.

57
00:03:22,800 --> 00:03:26,940
Bir benzetme olarak, doğru yazılan sözcükler ile yanlış yazılan sözcükleri düşünün.

58
00:03:28,900 --> 00:03:33,588
Geçerli bir mesaj değiştirildiğinde, tıpkı bir yazım hatasında yapabileceğiniz gibi, 

59
00:03:33,588 --> 00:03:37,340
alıcı gördüklerini en yakın geçerli komşuya düzeltmekten sorumludur.

60
00:03:38,220 --> 00:03:40,971
Ancak bunun gibi mesajları etkili bir şekilde kategorize 

61
00:03:40,971 --> 00:03:44,060
etmek için somut bir algoritma bulmak belli bir zeka gerektirir.

62
00:03:46,780 --> 00:03:50,445
Hikaye 1940'larda, genç Richard Hamming'in Bell Laboratuvarları 

63
00:03:50,445 --> 00:03:54,161
için çalıştığı ve bazı işlerinin sınırlı erişime sahip olduğu çok büyük, 

64
00:03:54,161 --> 00:03:57,420
pahalı bir delikli kart bilgisayarını kullandığı zaman başlıyor.

65
00:03:57,800 --> 00:03:59,992
Ve uygulamaya koyduğu programlar sürekli başarısız 

66
00:03:59,992 --> 00:04:02,400
oluyordu çünkü ara sıra bazı kısımlar yanlış okunuyordu.

67
00:04:03,120 --> 00:04:05,692
Hayal kırıklığı buluşun potası olduğundan o kadar 

68
00:04:05,692 --> 00:04:08,420
bıktı ki dünyanın ilk hata düzeltme kodunu icat etti.

69
00:04:09,060 --> 00:04:11,396
Hamming kodlarını çerçevelemenin pek çok farklı yolu vardır, 

70
00:04:11,396 --> 00:04:14,575
ancak ilk geçiş olarak biz bunu Hamming'in kendisinin onlar hakkında düşündüğü 

71
00:04:14,575 --> 00:04:15,380
şekilde ele alacağız.

72
00:04:16,519 --> 00:04:20,940
Basit ama çok da basit olmayan bir örnek, 16 bitlik bir blok kullanalım.

73
00:04:21,820 --> 00:04:24,740
Bu bitlerin konumlarını 0'dan 15'e kadar numaralandıracağız.

74
00:04:25,620 --> 00:04:29,786
Saklamak istediğimiz gerçek veriler bu bitlerden yalnızca 12'sini oluşturacak, 

75
00:04:29,786 --> 00:04:33,000
konumların 4'ü ise bir tür artıklık olarak ayrılmış durumda.

76
00:04:33,900 --> 00:04:36,586
Buradaki gereksiz kelimesi sadece kopyalama anlamına gelmiyor, 

77
00:04:36,586 --> 00:04:40,040
sonuçta bu 4 bit bize verileri körü körüne kopyalamak için yeterli alan vermiyor.

78
00:04:40,720 --> 00:04:44,179
Bunun yerine, bunların çok daha incelikli ve akıllı bir tür fazlalık olması, 

79
00:04:44,179 --> 00:04:47,280
herhangi bir yeni bilgi eklemesi değil, esneklik sağlaması gerekecek.

80
00:04:48,600 --> 00:04:52,171
Bu 4 özel parçanın, belki sonunda ya da buna benzer bir şekilde güzel bir şekilde 

81
00:04:52,171 --> 00:04:54,915
bir araya gelmesini bekleyebilirsiniz, ancak göreceğiniz gibi, 

82
00:04:54,915 --> 00:04:57,616
bunların 2'nin kuvvetleri olan konumlara yerleştirilmesi, 

83
00:04:57,616 --> 00:04:59,620
sonunda gerçekten zarif bir şeye olanak tanır.

84
00:05:00,200 --> 00:05:02,274
Ayrıca, bunun daha büyük bloklar için nasıl ölçeklendiğine 

85
00:05:02,274 --> 00:05:03,540
dair size küçük bir ipucu verebilir.

86
00:05:04,900 --> 00:05:07,797
Ayrıca teknik olarak sadece 11 bitlik bir veriden ibarettir, 

87
00:05:07,797 --> 00:05:11,312
0 konumunda olup bitenlerle ilgili hafif bir nüans olduğunu göreceksiniz, 

88
00:05:11,312 --> 00:05:13,260
ancak şimdilik bunun için endişelenmeyin.

89
00:05:14,140 --> 00:05:17,795
Herhangi bir hata düzeltme algoritması gibi, bu da iki oyuncuyu içerecektir; 

90
00:05:17,795 --> 00:05:21,592
bu 4 özel bitin ayarlanmasından sorumlu olan bir gönderici ve bir tür kontrolün 

91
00:05:21,592 --> 00:05:25,200
gerçekleştirilmesinden ve hataların düzeltilmesinden sorumlu olan bir alıcı.

92
00:05:25,200 --> 00:05:28,443
Elbette, gönderen ve alıcı kelimeleri aslında tüm kontrolleri yapan 

93
00:05:28,443 --> 00:05:31,257
makinelere veya yazılımlara atıfta bulunur ve mesaj fikri, 

94
00:05:31,257 --> 00:05:34,740
depolama gibi şeyleri de içerecek şekilde oldukça geniş bir anlama gelir.

95
00:05:35,340 --> 00:05:39,019
Sonuçta veri depolamak, mesajın bir yerden başka bir yere değil, 

96
00:05:39,019 --> 00:05:41,680
geçmişten geleceğe gönderilmesiyle aynı şeydir.

97
00:05:42,560 --> 00:05:45,900
Kurulum bu, ancak konuya dalmadan önce, keşfi sırasında Hamming'in 

98
00:05:45,900 --> 00:05:49,006
aklında yeni olan ilgili bir fikir hakkında konuşmamız gerekiyor; 

99
00:05:49,006 --> 00:05:52,347
herhangi bir tek bit hatasını tespit etmenize izin veren ancak bunları 

100
00:05:52,347 --> 00:05:56,300
düzeltmenize izin vermeyen bir yöntem, bilinen iş dünyasında parite kontrolü olarak.

101
00:05:56,880 --> 00:06:00,292
Eşlik kontrolü için, gönderenin ayarlamadan sorumlu olduğu 

102
00:06:00,292 --> 00:06:03,820
tek bir biti ayırıyoruz ve geri kalanı mesaj taşımakta özgür.

103
00:06:04,880 --> 00:06:08,046
Bu özel bitin tek görevi mesajdaki 1'lerin 

104
00:06:08,046 --> 00:06:11,280
toplam sayısının çift sayı olmasını sağlamaktır.

105
00:06:12,080 --> 00:06:15,423
Örneğin şu anda, 1'lerin toplam sayısı 7'dir, bu tek sayıdır, 

106
00:06:15,423 --> 00:06:18,861
dolayısıyla gönderenin bu özel biti 1 olacak şekilde çevirmesi gerekir, 

107
00:06:18,861 --> 00:06:19,960
böylece sayı çift olur.

108
00:06:20,800 --> 00:06:26,420
Ancak blok zaten çift sayıda 1'lerle başlamış olsaydı, bu özel bit 0'da tutulurdu.

109
00:06:27,340 --> 00:06:30,486
Bu oldukça basit, yanıltıcı derecede basit, ancak bir mesajın 

110
00:06:30,486 --> 00:06:33,379
herhangi bir yerindeki değişimin tek bir bilgi parçasına 

111
00:06:33,379 --> 00:06:36,780
yansıtılacağı fikrini damıtmanın inanılmaz derecede zarif bir yolu.

112
00:06:37,500 --> 00:06:42,216
Bu mesajın herhangi bir bitinin 0'dan 1'e veya 1'den 0'a çevrilmesi 

113
00:06:42,216 --> 00:06:46,540
durumunda, 1'lerin toplam sayısının çiftten teke değişmesine dikkat edin.

114
00:06:47,980 --> 00:06:52,261
Yani eğer alıcıysanız, bu mesaja baktığınızda ve tek sayıda 1'ler görüyorsanız, 

115
00:06:52,261 --> 00:06:55,472
nerede olduğu hakkında hiçbir fikriniz olmasa bile bir hatanın 

116
00:06:55,472 --> 00:06:57,460
meydana geldiğinden emin olabilirsiniz.

117
00:06:58,500 --> 00:07:02,302
Jargonda, bir bit grubunun çift veya tek sayıda 1'e sahip olup olmadığı, 

118
00:07:02,302 --> 00:07:03,340
eşlik olarak bilinir.

119
00:07:04,860 --> 00:07:07,905
Ayrıca sayıları kullanabilir ve paritenin 0 veya 1 olduğunu söyleyebilirsiniz; 

120
00:07:07,905 --> 00:07:10,720
bu fikirle matematik yapmaya başladığınızda genellikle daha yararlı olur.

121
00:07:11,220 --> 00:07:14,173
Ve göndericinin pariteyi kontrol etmek için kullandığı bu özel bit, 

122
00:07:14,173 --> 00:07:15,520
eşlik biti olarak adlandırılır.

123
00:07:17,560 --> 00:07:21,290
Ve aslında, açık olmalıyız ki, eğer alıcı tek bir parite görürse, 

124
00:07:21,290 --> 00:07:24,173
bu sadece bir hata olduğu anlamına gelmez, 3 hata, 

125
00:07:24,173 --> 00:07:29,260
5 hata veya başka herhangi bir tek sayı olabilir, ancak kesin olarak bilebilir. 0 değildi.

126
00:07:29,980 --> 00:07:33,822
Öte yandan, 2 hata veya herhangi bir çift sayıda hata olsaydı, 

127
00:07:33,822 --> 00:07:37,176
son 1 sayısı hâlâ çift sayı olurdu, dolayısıyla alıcı, 

128
00:07:37,176 --> 00:07:42,300
çift sayının mutlaka mesajın hatasız olduğu anlamına geldiğine tam olarak güvenemez.

129
00:07:42,840 --> 00:07:45,779
Yalnızca 2 bitlik geçişlerle bozulan bir mesajın oldukça 

130
00:07:45,779 --> 00:07:49,080
zayıf olduğundan şikayet edebilirsiniz ve kesinlikle haklısınız.

131
00:07:49,700 --> 00:07:54,391
Ancak, aldığınız mesajın gönderenin amaçladığı mesaj olduğuna dair size %100 

132
00:07:54,391 --> 00:07:58,900
güven verecek bir hata tespiti veya düzeltme yöntemi olmadığını unutmayın.

133
00:07:59,580 --> 00:08:02,651
Sonuçta, yeterince rastgele gürültü her zaman geçerli bir mesajı 

134
00:08:02,651 --> 00:08:05,440
tamamen şans eseri başka bir geçerli mesaja dönüştürebilir.

135
00:08:06,240 --> 00:08:10,777
Bunun yerine amaç, belirli bir maksimum hata sayısına kadar dayanıklı 

136
00:08:10,777 --> 00:08:15,380
bir şema bulmak veya bunun gibi yanlış pozitif olasılığını azaltmaktır.

137
00:08:16,260 --> 00:08:19,243
Eşlik kontrolleri kendi başlarına oldukça zayıftır, 

138
00:08:19,243 --> 00:08:24,291
ancak tüm mesajdaki değişim fikrini tek bir bit'e indirgeyerek bize verdikleri şey, 

139
00:08:24,291 --> 00:08:27,160
daha karmaşık planlar için güçlü bir yapı taşıdır.

140
00:08:27,940 --> 00:08:31,032
Örneğin, Hamming bir hatanın sadece meydana geldiğini değil, 

141
00:08:31,032 --> 00:08:35,393
nerede meydana geldiğini de belirlemenin bir yolunu ararken, onun temel görüşü şuydu: 

142
00:08:35,393 --> 00:08:39,855
Eğer bazı eşitlik kontrollerini mesajın tamamına değil de dikkatle seçilmiş belirli alt 

143
00:08:39,855 --> 00:08:42,340
kümelere uygularsanız, şu soruyu sorabilirsiniz: 

144
00:08:42,340 --> 00:08:45,940
herhangi bir bit hatasının yerini belirleyen daha rafine bir dizi soru.

145
00:08:46,680 --> 00:08:49,839
Genel his biraz 20 soruluk bir oyun oynamaya, olasılıklar 

146
00:08:49,839 --> 00:08:53,380
alanını yarıya indiren evet veya hayır soruları sormaya benziyor.

147
00:08:54,160 --> 00:08:56,559
Örneğin, diyelim ki sadece bu 8 bit üzerinde, tek sayılı 

148
00:08:56,559 --> 00:08:59,380
konumların tümü üzerinde bir eşlik kontrolü yaptığımızı varsayalım.

149
00:09:00,100 --> 00:09:04,660
Daha sonra bir hata tespit edilirse, alıcıya hatanın tam olarak nerede olduğu, 

150
00:09:04,660 --> 00:09:08,240
yani tek bir konumda olduğu hakkında biraz daha bilgi verilir.

151
00:09:08,940 --> 00:09:11,903
Bu 8 bit arasında herhangi bir hata tespit edilmezse, 

152
00:09:11,903 --> 00:09:16,240
bu ya hiç hata olmadığı anlamına gelir ya da çift konumlarda bir yerde bulunur.

153
00:09:17,180 --> 00:09:20,400
Eşlik kontrolünü bitlerin yarısıyla sınırlandırmanın onu daha az etkili 

154
00:09:20,400 --> 00:09:23,666
hale getirdiğini düşünebilirsiniz, ancak diğer iyi seçilmiş kontrollerle 

155
00:09:23,666 --> 00:09:27,200
birlikte yapıldığında, mantıksız bir şekilde bize çok daha güçlü bir şey verir.

156
00:09:29,240 --> 00:09:32,259
Eşlik kontrolünü gerçekten ayarlamak için, unutmayın, 

157
00:09:32,259 --> 00:09:36,620
o tam grubun eşliğini kontrol eden bazı özel bitlerin tahsis edilmesi gerekir.

158
00:09:37,480 --> 00:09:39,180
Burada sadece konum 1'i seçelim.

159
00:09:39,720 --> 00:09:42,603
Gösterilen örnekte, bu 8 bitin paritesi şu anda tektir, 

160
00:09:42,603 --> 00:09:46,980
dolayısıyla gönderen bu eşlik bitinin değiştirilmesinden sorumludur ve artık çifttir.

161
00:09:47,940 --> 00:09:50,680
Bu, yapacağımız 4 eşlik kontrolünden yalnızca 1'idir.

162
00:09:50,920 --> 00:09:53,908
İkinci kontrol, en azından burada çizdiğimiz şekliyle, 

163
00:09:53,908 --> 00:09:56,300
ızgaranın sağ yarısındaki 8 bit arasındadır.

164
00:09:56,680 --> 00:09:59,474
Bu kez konum 2'yi eşlik biti olarak kullanabiliriz, 

165
00:09:59,474 --> 00:10:02,517
böylece bu 8 bit zaten eşit bir eşliğe sahiptir ve gönderen, 

166
00:10:02,517 --> 00:10:06,060
bu 2 numaralı biti değiştirmeden bırakmanın kendisini iyi hissedebilir.

167
00:10:07,020 --> 00:10:11,018
Diğer taraftan eğer alıcı bu grubun paritesini kontrol ederse ve bunun tuhaf 

168
00:10:11,018 --> 00:10:15,380
olduğunu görürse, hatanın sağdaki bu 8 bit arasında bir yerde olduğunu anlayacaktır.

169
00:10:15,820 --> 00:10:18,355
Aksi takdirde bu, ya hata olmadığı ya da hatanın 

170
00:10:18,355 --> 00:10:20,580
sol yarıda bir yerde olduğu anlamına gelir.

171
00:10:21,120 --> 00:10:23,700
Ya da sanırım iki hata olabilirdi ama şimdilik 

172
00:10:23,700 --> 00:10:26,500
tüm blokta en fazla bir hata olduğunu varsayacağız.

173
00:10:26,940 --> 00:10:28,740
Bundan daha fazlası için işler tamamen bozulur.

174
00:10:29,160 --> 00:10:32,169
Burada, sonraki iki kontrole bakmadan önce, bir dakika durup bu ilk ikisinin 

175
00:10:32,169 --> 00:10:35,100
birlikte değerlendirildiğinde bize ne yapmamıza olanak sağladığını düşünün.

176
00:10:35,800 --> 00:10:39,660
Diyelim ki tek sütunlar arasında ve sağ yarıda bir hata tespit ettiniz.

177
00:10:40,200 --> 00:10:43,040
Bu mutlaka hatanın son sütunda bir yerde olduğu anlamına gelir.

178
00:10:43,820 --> 00:10:46,760
Tek sütunda hata yoksa ancak sağ yarıda bir hata varsa, 

179
00:10:46,760 --> 00:10:49,700
bu size sorunun sondan ikinci sütunda olduğunu gösterir.

180
00:10:50,440 --> 00:10:54,022
Benzer şekilde, tek sütunlarda bir hata varsa ancak sağ yarıda değilse, 

181
00:10:54,022 --> 00:10:56,560
bunun ikinci sütunda bir yerde olduğunu bilirsiniz.

182
00:10:56,560 --> 00:10:59,863
Ve eğer bu iki eşlik kontrolünden hiçbiri bir şey tespit etmezse, bu, 

183
00:10:59,863 --> 00:11:03,120
hatanın olabileceği tek yerin en soldaki sütun olduğu anlamına gelir.

184
00:11:03,340 --> 00:11:06,120
Ancak bu aynı zamanda hiçbir hatanın olmadığı anlamına da gelebilir.

185
00:11:06,300 --> 00:11:08,660
Bu, iki eşlik kontrolünün sütunu belirlememize izin 

186
00:11:08,660 --> 00:11:10,840
verdiğini söylemenin oldukça ayrıntılı bir yolu.

187
00:11:11,480 --> 00:11:13,640
Buradan sonrasını muhtemelen tahmin edebilirsiniz.

188
00:11:13,800 --> 00:11:16,140
Temelde aynı şeyi yapıyoruz ancak satırlar için.

189
00:11:16,440 --> 00:11:20,900
Konum 4'ü eşlik biti olarak kullanarak tek satırlarda bir eşlik kontrolü yapılacak.

190
00:11:21,380 --> 00:11:25,820
Yani bu örnekte bu grup zaten çift eşlikli olduğundan bit 4, 0'a ayarlanacaktır.

191
00:11:26,560 --> 00:11:28,965
Ve son olarak, alt iki satırda, konum 8'i 

192
00:11:28,965 --> 00:11:31,580
eşlik biti olarak kullanan bir eşlik kontrolü var.

193
00:11:32,120 --> 00:11:35,008
Bu durumda, gruba eşit eşitlik sağlamak için gönderenin 8. 

194
00:11:35,008 --> 00:11:36,820
biti açması gerekiyor gibi görünüyor.

195
00:11:37,700 --> 00:11:39,733
İlk iki kontrol sütunu belirlememize izin verdiği gibi, 

196
00:11:39,733 --> 00:11:41,840
sonraki iki kontrol de satırı belirlemenize olanak sağlar.

197
00:11:42,880 --> 00:11:47,540
Örnek olarak, iletim sırasında örneğin 3. pozisyonda bir hata olduğunu hayal edin.

198
00:11:48,180 --> 00:11:52,433
Bu, birinci eşlik grubunu etkiler ve aynı zamanda ikinci eşlik grubunu da etkiler, 

199
00:11:52,433 --> 00:11:55,560
böylece alıcı, sağ sütunda bir yerde bir hata olduğunu bilir.

200
00:11:56,100 --> 00:12:00,540
Ama üçüncü grubu etkilemediği gibi dördüncü grubu da etkilemez.

201
00:12:01,240 --> 00:12:04,090
Ve bu, alıcının hatayı ilk satıra kadar tespit etmesini sağlar, 

202
00:12:04,090 --> 00:12:07,520
bu da zorunlu olarak 3. konum anlamına gelir, böylece hatayı düzeltebilirler.

203
00:12:08,580 --> 00:12:10,866
Bu dört sorunun yanıtlarının, nerede olursa olsun, 

204
00:12:10,866 --> 00:12:13,736
belirli bir konumu belirlemenize gerçekten olanak sağlayacağına 

205
00:12:13,736 --> 00:12:17,100
kendinizi ikna etmek için bir dakikanızı ayırmanın tadını çıkarabilirsiniz.

206
00:12:17,720 --> 00:12:20,361
Hatta aranızdaki zeki biri bu sorularla ikili 

207
00:12:20,361 --> 00:12:23,060
sayım arasında bir bağlantı bile fark edebilir.

208
00:12:23,500 --> 00:12:26,210
Ve eğer yaparsanız, tekrar vurgulayayım, duraklatın, 

209
00:12:26,210 --> 00:12:28,920
ben onu bozmadan bağlantıyı kendiniz kurmaya çalışın.

210
00:12:30,500 --> 00:12:34,730
Bir eşlik bitinin kendisi etkilenirse ne olacağını merak ediyorsanız, 

211
00:12:34,730 --> 00:12:36,060
bunu deneyebilirsiniz.

212
00:12:36,440 --> 00:12:40,135
Bir dakikanızı ayırıp bu dört özel parça arasındaki herhangi bir hatanın, 

213
00:12:40,135 --> 00:12:44,180
tıpkı diğerleri gibi, dört sorudan oluşan aynı grupla nasıl bulunacağını düşünün.

214
00:12:47,060 --> 00:12:50,011
Aslında bunun bir önemi yok, çünkü günün sonunda istediğimiz şey 

215
00:12:50,011 --> 00:12:53,100
mesaj bitlerini korumaktır, hata düzeltme bitleri yoluna devam eder.

216
00:12:53,600 --> 00:12:55,603
Ancak bu parçaların da korunması, doğal olarak 

217
00:12:55,603 --> 00:12:57,820
bir yan ürün olarak planın dışında kalan bir şeydir.

218
00:12:59,200 --> 00:13:01,760
Bunun nasıl ölçekleneceğini tahmin etmekten de keyif alabilirsiniz.

219
00:13:02,300 --> 00:13:06,502
Örneğin, bir konumu belirlemek için 256 bit boyutunda bir blok kullansaydık, 

220
00:13:06,502 --> 00:13:10,050
belirli bir noktaya giden yolu ikili olarak aramak için yalnızca 

221
00:13:10,050 --> 00:13:12,780
sekiz evet veya hayır sorusuna ihtiyacınız olurdu.

222
00:13:15,640 --> 00:13:18,183
Ve unutmayın, her soru uygun eşlik kontrolünü ayarlamak 

223
00:13:18,183 --> 00:13:20,500
için yalnızca tek bir bitten vazgeçmeyi gerektirir.

224
00:13:23,160 --> 00:13:26,157
Bazılarınız bunu zaten görmüş olabilir, ancak daha sonra bu soruların ne 

225
00:13:26,157 --> 00:13:29,360
olduğunu bir veya iki dakika içinde bulmanın sistematik yolundan bahsedeceğiz.

226
00:13:29,880 --> 00:13:33,260
Umarım bu taslak, burada geliştirdiğimiz şeyin verimliliğini takdir etmek için yeterlidir.

227
00:13:33,260 --> 00:13:38,726
İlk şey, vurgulanan sekiz eşlik biti dışında, istediğiniz her şey olabilir, 

228
00:13:38,726 --> 00:13:41,820
istediğiniz mesajı veya veriyi taşıyabilir.

229
00:13:41,820 --> 00:13:46,045
8 bit, tamamen mesajın geri kalanı tarafından belirlenmeleri anlamında gereksizdir, 

230
00:13:46,045 --> 00:13:50,020
ancak bu, mesajın bir bütün olarak kopyalanmasından çok daha akıllı bir yoldur.

231
00:13:53,600 --> 00:13:56,014
Ve yine de, bu kadar az vazgeçmekle, herhangi bir 

232
00:13:56,014 --> 00:13:58,380
tek bit hatasını tespit edip düzeltebileceksiniz.

233
00:13:59,200 --> 00:14:00,400
Neredeyse.

234
00:14:00,960 --> 00:14:04,920
Tamam, buradaki sorun şu ki, eğer dört eşlik kontrolünden hiçbiri bir 

235
00:14:04,920 --> 00:14:09,221
hata tespit etmezse, yani özel olarak seçilmiş 8 bitlik alt kümelerin tümü, 

236
00:14:09,221 --> 00:14:12,106
gönderenin amaçladığı gibi eşit eşliklere sahipse, 

237
00:14:12,106 --> 00:14:16,860
o zaman bu da hiçbir hata olmadığı anlamına gelir. veya bizi 0 pozisyonuna daraltır.

238
00:14:17,740 --> 00:14:22,550
Görüyorsunuz, dört evet veya hayır sorusuyla, eşitlik kontrollerimiz için 16 olası sonuç 

239
00:14:22,550 --> 00:14:27,143
var ve ilk başta bu, bloktaki 16 konumdan 1'inin yerini belirlemek için mükemmel 

240
00:14:27,143 --> 00:14:31,900
gibi geliyor, ancak aynı zamanda 17. sonucu da iletmeniz gerekiyor, yani hata yok durum.

241
00:14:33,020 --> 00:14:37,300
Buradaki çözüm aslında oldukça basit, sadece o 0'ıncı biti tamamen unutun.

242
00:14:37,840 --> 00:14:41,440
Yani dört eşlik kontrolümüzü yaptığımızda ve hepsinin eşit olduğunu gördüğümüzde, 

243
00:14:41,440 --> 00:14:43,460
bu açıkça hiçbir hata olmadığı anlamına gelir.

244
00:14:44,240 --> 00:14:48,809
Bunun anlamı, 16 bitlik bir blokla çalışmak yerine, 15 bitlik bir blokla çalışıyoruz; 

245
00:14:48,809 --> 00:14:53,220
burada bitlerin 11'i mesaj taşımak için serbest ve 4'ü yedeklik için orada.

246
00:14:53,780 --> 00:14:56,864
Ve bununla birlikte, artık sektördeki insanların 

247
00:14:56,864 --> 00:15:00,200
15-11 Hamming kodu olarak adlandıracağı şeye sahibiz.

248
00:15:00,460 --> 00:15:02,994
Bununla birlikte, 2'nin temiz kuvveti olan bir blok boyutuna 

249
00:15:02,994 --> 00:15:05,567
sahip olmak güzel ve bu 0'ıncı biti etrafta tutmanın ve bizim 

250
00:15:05,567 --> 00:15:08,140
için biraz fazladan iş yapmasını sağlamanın akıllıca bir yolu var.

251
00:15:08,700 --> 00:15:11,844
Bunu tüm blok boyunca bir eşlik biti olarak kullanırsak, 

252
00:15:11,844 --> 00:15:15,540
2 bitlik hataları düzeltemesek bile aslında tespit etmemizi sağlar.

253
00:15:16,160 --> 00:15:16,820
İşte nasıl çalışıyor?

254
00:15:17,180 --> 00:15:19,955
Bu dört özel hata düzeltme bitini ayarladıktan sonra, 

255
00:15:19,955 --> 00:15:23,603
tam bloğun paritesi normal bir eşlik kontrolü gibi çift olacak şekilde 

256
00:15:23,603 --> 00:15:24,940
0'ıncı biti ayarladık.

257
00:15:25,700 --> 00:15:29,478
Şimdi, eğer tek bir bit hatası varsa, o zaman tam bloğun paritesi tek olacak 

258
00:15:29,478 --> 00:15:33,600
şekilde değişir, ancak dört hata düzeltme kontrolü sayesinde bunu yine de yakalarız.

259
00:15:34,160 --> 00:15:37,709
Bununla birlikte, eğer iki hata varsa, o zaman genel parite tekrar 

260
00:15:37,709 --> 00:15:41,418
eşit duruma dönecektir, ancak alıcı yine de bu dört eşlik kontrolünde 

261
00:15:41,418 --> 00:15:45,180
olup bitenlerden dolayı en azından bir miktar hata olduğunu görecektir.

262
00:15:45,180 --> 00:15:48,940
Yani genel olarak eşit bir eşitlik fark ederlerse ancak diğer kontrollerde 

263
00:15:48,940 --> 00:15:52,700
sıfırdan farklı bir şey oluyorsa, bu onlara en az iki hata olduğunu söyler.

264
00:15:53,520 --> 00:15:54,000
Bu çok akıllıca değil mi?

265
00:15:54,300 --> 00:15:56,799
Her ne kadar bu 2 bitlik hataları düzeltemesek de, 

266
00:15:56,799 --> 00:15:59,691
o küçük can sıkıcı 0'ıncı biti tekrar devreye sokarak, 

267
00:15:59,691 --> 00:16:01,260
onları tespit etmemizi sağlıyor.

268
00:16:02,260 --> 00:16:05,220
Bu oldukça standarttır, genişletilmiş Hamming kodu olarak bilinir.

269
00:16:06,540 --> 00:16:09,756
Teknik açıdan konuşursak, artık en azından 16 bitlik bir blok örneği 

270
00:16:09,756 --> 00:16:12,880
için Hamming kodunun ne yaptığının tam bir açıklamasına sahipsiniz.

271
00:16:12,880 --> 00:16:17,124
Ancak, baştan sona kendi başınıza tam bir örnek yaparak anlayışınızı kontrol etmeyi ve 

272
00:16:17,124 --> 00:16:21,320
bu noktaya kadar her şeyi sağlamlaştırmayı daha tatmin edici bulacağınızı düşünüyorum.

273
00:16:22,080 --> 00:16:24,300
Kendinizi kontrol edebilmeniz için ben de sizinle birlikte üzerinden geçeceğim.

274
00:16:25,120 --> 00:16:29,753
İster uzayda çevirdiğiniz gerçek bir mesaj, ister zaman içinde depolamak istediğiniz 

275
00:16:29,753 --> 00:16:34,660
bazı veriler olsun, bir mesaj oluşturmak için ilk adım, onu 11 bitlik parçalara bölmektir.

276
00:16:35,580 --> 00:16:39,760
Her parça, hataya dayanıklı 16 bitlik bir blok halinde paketlenecek.

277
00:16:39,760 --> 00:16:43,220
Hadi bunu bir örnek olarak alalım ve gerçekten üzerinde çalışalım.

278
00:16:43,740 --> 00:16:44,740
Devam edin, gerçekten yapın!

279
00:16:44,740 --> 00:16:47,020
Durup bu bloğu bir araya getirmeyi deneyelim.

280
00:16:52,720 --> 00:16:53,680
Tamam, hazır mısın?

281
00:16:54,240 --> 00:16:58,993
Unutmayın, 0 konumu ve 2'nin diğer kuvvetleri hata düzeltme görevi için ayrılmıştır, 

282
00:16:58,993 --> 00:17:03,320
bu nedenle mesaj bitlerini kalan tüm noktalara sırayla yerleştirerek başlarsınız.

283
00:17:05,339 --> 00:17:08,309
Bu grubun çift eşlikli olması gerekir ki zaten öyledir, 

284
00:17:08,309 --> 00:17:12,339
dolayısıyla 1 konumundaki eşlik bitini 0 olacak şekilde ayarlamanız gerekir.

285
00:17:13,020 --> 00:17:15,731
Bir sonraki grup tek bir eşlikle başlar, dolayısıyla 

286
00:17:15,731 --> 00:17:17,880
eşlik bitini 1 olarak ayarlamanız gerekir.

287
00:17:19,160 --> 00:17:21,855
Bundan sonraki grup tek eşlikle başlar, dolayısıyla 

288
00:17:21,855 --> 00:17:24,240
eşlik bitini yine 1'e ayarlamanız gerekir.

289
00:17:24,780 --> 00:17:30,060
Ve son grubun da tek bir paritesi var, yani bu biti 8 pozisyonuna 1 olarak ayarladık.

290
00:17:31,300 --> 00:17:34,972
Ve son adım olarak, tam bloğun artık çift bir eşlik durumu var; bu, 

291
00:17:34,972 --> 00:17:39,401
0 numaralı bit sayısını, yani kapsayıcı eşlik bitini 0 olarak ayarlayabileceğiniz 

292
00:17:39,401 --> 00:17:40,320
anlamına geliyor.

293
00:17:41,340 --> 00:17:44,740
Yani bu blok gönderildiğinde, dört özel alt kümenin ve 

294
00:17:44,740 --> 00:17:48,140
bir bütün olarak bloğun paritesi çift veya 0 olacaktır.

295
00:17:48,820 --> 00:17:52,180
Alıştırmanın ikinci bölümünde alıcı rolünü oynamanızı sağlayalım.

296
00:17:53,480 --> 00:17:56,677
Tabii bu, bu mesajın ne olduğunu henüz bilmediğiniz anlamına gelir, 

297
00:17:56,677 --> 00:17:59,780
belki bazılarınız ezberlemiştir, ama varsayalım ki ezberlemediniz.

298
00:18:00,020 --> 00:18:03,813
Yapacağım şey, o bloktaki bitlerden 0, 1 veya 2'sini 

299
00:18:03,813 --> 00:18:07,740
değiştirmek ve sonra sizden ne yaptığımı bulmanızı istemek.

300
00:18:08,260 --> 00:18:10,810
Tekrar duraklatın ve çözmeye çalışın.

301
00:18:18,790 --> 00:18:23,015
Tamam, şimdi alıcı olarak siz ilk eşlik grubunu kontrol ediyorsunuz ve bunun çift 

302
00:18:23,015 --> 00:18:27,497
olduğunu görebiliyorsunuz, dolayısıyla mevcut herhangi bir hatanın çift sütunda olması 

303
00:18:27,497 --> 00:18:27,910
gerekir.

304
00:18:29,690 --> 00:18:32,364
Bir sonraki kontrol bize tek bir sayı veriyor, 

305
00:18:32,364 --> 00:18:37,030
ikimize de en az bir hata olduğunu söylüyor ve bizi bu spesifik sütuna daraltıyor.

306
00:18:38,550 --> 00:18:41,790
Üçüncü kontrol eşittir, olasılıkları daha da azaltır.

307
00:18:42,650 --> 00:18:46,415
Ve son eşlik kontrolü tuhaf, bize altta bir yerde bir hata olduğunu söylüyor, 

308
00:18:46,415 --> 00:18:49,650
şu anda bunun 10 numaralı konumda olması gerektiğini görebiliyoruz.

309
00:18:51,490 --> 00:18:54,941
Dahası, tüm bloğun paritesi tuhaftır ve bize iki değil, 

310
00:18:54,941 --> 00:18:57,530
tek bir atış olduğu konusunda güven verir.

311
00:18:58,070 --> 00:18:59,970
Üç veya daha fazla ise tüm bahisler kapalıdır.

312
00:19:01,310 --> 00:19:05,479
10 numaralı biti düzelttikten sonra, düzeltme için kullanılmayan 11 biti 

313
00:19:05,479 --> 00:19:08,563
çıkarmak bize orijinal mesajın ilgili bölümünü verir; 

314
00:19:08,563 --> 00:19:12,847
geri sararsanız ve karşılaştırırsanız, bu gerçekten de örneğe başladığımız 

315
00:19:12,847 --> 00:19:14,390
şeyin tam olarak aynısıdır.

316
00:19:15,710 --> 00:19:18,238
Artık tüm bunları elle nasıl yapacağınızı bildiğinize göre, 

317
00:19:18,238 --> 00:19:21,231
size tüm bu mantığın temel kısmını tek bir Python kodu satırıyla nasıl 

318
00:19:21,231 --> 00:19:23,170
gerçekleştirebileceğinizi göstermek istiyorum.

319
00:19:23,870 --> 00:19:27,623
Görüyorsunuz, size henüz söylemediğim şey, bu algoritmanın gerçekte ne kadar zarif 

320
00:19:27,623 --> 00:19:31,061
olduğu, bir makinenin hatanın konumunu göstermesinin ne kadar basit olduğu, 

321
00:19:31,061 --> 00:19:34,227
bunu sistematik olarak nasıl ölçeklendireceğimiz ve tüm bunları nasıl 

322
00:19:34,227 --> 00:19:37,800
çerçeveleyebileceğimizdir. bu, birden fazla ayrı eşlik kontrolü yerine tek bir 

323
00:19:37,800 --> 00:19:38,750
işlem olarak yapılır.

324
00:19:39,430 --> 00:19:41,310
Ne demek istediğimi anlamak için 2. bölümde bana katılın.

