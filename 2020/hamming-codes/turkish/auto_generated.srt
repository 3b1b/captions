1
00:00:00,000 --> 00:00:03,120
Buradaki herkesin 1. bölümden geldiğini varsayıyorum.

2
00:00:03,120 --> 00:00:06,920
Bitlerin çoğunun anlamlı bir mesaj taşıdığı, diğer birkaç parçanın ise bir

3
00:00:06,920 --> 00:00:11,640
tür artıklık işlevi gördüğü bir veri bloğu oluşturmanın bir yolu

4
00:00:11,640 --> 00:00:15,800
olan Hamming kodlarından bahsediyorduk; herhangi bir bit ters çevrildiğinde ya

5
00:00:15,800 --> 00:00:20,560
bir mesaj Bit veya artıklık biti, bu bloktaki herhangi bir

6
00:00:20,560 --> 00:00:21,920
şeyde, alıcı bir hata olduğunu ve bunun nasıl düzeltileceğini tanımlayabilecektir.

7
00:00:21,920 --> 00:00:25,900
Orada sunulan temel fikir, hataya giden yolda ikili

8
00:00:25,900 --> 00:00:29,800
arama yapmak için çoklu eşlik kontrolünün nasıl kullanılacağıydı.

9
00:00:29,800 --> 00:00:33,920
Bu videoda amaç, Hamming kodlarının mümkün olduğunca

10
00:00:33,920 --> 00:00:35,420
uygulamalı ve yeniden keşfedilebilir olmasını sağlamaktı.

11
00:00:35,420 --> 00:00:40,040
Ancak bunu yazılım veya donanımda gerçekten uygulamayı düşünmeye başladığınızda, bu çerçeveleme

12
00:00:40,040 --> 00:00:44,120
aslında bu kodların gerçekte ne kadar zarif olduğunun altını çizebilir.

13
00:00:44,120 --> 00:00:47,620
Tüm olası hata konumlarını takip eden ve her kontrolde

14
00:00:47,620 --> 00:00:52,320
bu grubu yarıya indiren bir algoritma yazmanız gerektiğini düşünebilirsiniz,

15
00:00:52,320 --> 00:00:54,160
ancak aslında bu bundan çok ama çok daha basittir.

16
00:00:54,160 --> 00:00:58,720
Son videoda yaptığımız dört eşlik kontrolünün yanıtlarını evet ve hayır yerine 1&#39;ler

17
00:00:58,760 --> 00:01:04,800
ve 0&#39;lar olarak okursanız, bu tam anlamıyla hatanın ikili dosyadaki konumunu belirtir.

18
00:01:04,800 --> 00:01:10,160
Örneğin, ikili sistemde 7 sayısı 0111&#39;e benzer, aslında

19
00:01:10,160 --> 00:01:12,640
4 artı 2 artı 1 olduğunu söyler.

20
00:01:12,640 --> 00:01:17,960
Ve 7. pozisyonun nerede olduğuna dikkat edin, bu durum eşitlik

21
00:01:17,960 --> 00:01:22,280
gruplarımızın birincisini, ikincisini ve üçüncüsünü etkiliyor, ancak sonuncusunu etkilemiyor.

22
00:01:22,280 --> 00:01:26,560
Yani bu dört kontrolün sonuçlarını aşağıdan yukarıya doğru

23
00:01:26,560 --> 00:01:28,000
okumak gerçekten de hatanın konumunu ortaya koyuyor.

24
00:01:28,520 --> 00:01:32,240
Örnek 7&#39;de özel bir şey yok, bu genel olarak işe yarıyor ve

25
00:01:32,240 --> 00:01:37,440
bu, tüm şemanın donanıma uygulanmasının mantığını şaşırtıcı derecede basit hale getiriyor.

26
00:01:37,440 --> 00:01:43,380
Şimdi bu sihrin neden oluştuğunu görmek istiyorsanız, pozisyonlarımız için

27
00:01:43,380 --> 00:01:48,480
bu 16 indeks etiketini alın, ancak bunları 10 tabanında

28
00:01:48,480 --> 00:01:50,720
yazmak yerine, hepsini 0000&#39;den 1111&#39;e kadar ikili olarak yazalım.

29
00:01:50,720 --> 00:01:55,880
Bu ikili etiketleri kutularına geri koyarken, bunların

30
00:01:56,080 --> 00:01:58,440
gerçekte gönderilen verilerden farklı olduklarını vurgulamam gerekiyor.

31
00:01:58,440 --> 00:02:02,200
Bunlar sizin ve benim dört eşitlik grubunun nereden geldiğini anlamamıza

32
00:02:02,200 --> 00:02:04,200
yardımcı olacak kavramsal bir etiketten başka bir şey değil.

33
00:02:04,200 --> 00:02:08,840
Baktığımız her şeyin ikili olarak tanımlanmasının zarafeti, belki de baktığımız her

34
00:02:08,840 --> 00:02:13,160
şeyin ikili olarak tanımlanmasının yarattığı kafa karışıklığı nedeniyle gölgede kalıyor.

35
00:02:13,160 --> 00:02:15,040
Yine de buna değer.

36
00:02:15,040 --> 00:02:20,740
Dikkatinizi tüm bu etiketlerin sadece son kısmına odaklayın ve

37
00:02:20,740 --> 00:02:24,280
ardından bu son bitin 1 olduğu konumları vurgulayın.

38
00:02:24,280 --> 00:02:28,800
Elde ettiğimiz şey, dört eşlik grubumuzun ilkidir; bu, ilk

39
00:02:28,800 --> 00:02:34,480
kontrolü şu soruyla yorumlayabileceğiniz anlamına gelir: hey, eğer bir

40
00:02:34,480 --> 00:02:36,680
hata varsa, bu hatanın konumundaki son bit 1 mi?

41
00:02:36,680 --> 00:02:42,600
Benzer şekilde, ikinciden sonuncuya odaklanırsanız ve bunun 1 olduğu

42
00:02:42,600 --> 00:02:47,040
tüm konumları vurgularsanız, şemamızdan ikinci eşlik grubunu elde edersiniz.

43
00:02:47,040 --> 00:02:51,960
Başka bir deyişle, bu ikinci kontrol şunu soruyor: Hey, ben yine,

44
00:02:51,960 --> 00:02:56,160
eğer bir hata varsa, bu konumun ikinciden sondan biti 1 mi?

45
00:02:56,160 --> 00:02:57,160
Ve benzeri.

46
00:02:57,160 --> 00:03:03,320
Üçüncü eşlik kontrolü, üçüncü bitten son bitine kadar açık olan her konumu kapsar

47
00:03:03,320 --> 00:03:10,120
ve sonuncusu, en yüksek dereceli biti 1 olan son sekiz konumu kapsar.

48
00:03:10,120 --> 00:03:15,680
Daha önce yaptığımız her şey bu dört soruyu yanıtlamakla aynıydı,

49
00:03:15,680 --> 00:03:18,800
bu da ikili sistemde bir konumun hecelenmesiyle aynı şeydi.

50
00:03:19,800 --> 00:03:22,080
Umarım bu iki şeyi daha açık hale getirir.

51
00:03:22,080 --> 00:03:27,140
Birincisi, ikinin daha büyük kuvvetleri olan blok boyutlarına sistematik olarak nasıl genelleştirme yapılacağıdır.

52
00:03:27,140 --> 00:03:33,180
Her bir konumu tanımlamak daha fazla bit gerektiriyorsa, örneğin 64 noktayı tanımlamak için altı bit

53
00:03:33,180 --> 00:03:38,640
gerekiyorsa, o zaman bu bitlerin her biri size kontrol etmemiz gereken eşlik gruplarından birini verir.

54
00:03:38,640 --> 00:03:42,060
Matt Parker&#39;la yaptığım satranç tahtası bulmacasını

55
00:03:42,060 --> 00:03:43,400
izleyenleriniz tüm bunları fazlasıyla tanıdık bulabilir.

56
00:03:43,400 --> 00:03:48,200
Bu aynı temel mantıktır ancak farklı bir problemi

57
00:03:48,200 --> 00:03:49,880
çözmektedir ve 64 karelik bir satranç tahtasına uygulanmıştır.

58
00:03:49,880 --> 00:03:54,000
Bunun açıklığa kavuşturacağını umduğum ikinci şey, eşlik bitlerimizin neden ikinin

59
00:03:54,000 --> 00:03:58,320
kuvvetleri olan konumlarda olduğudur, örneğin 1, 2, 4 ve 8.

60
00:03:58,320 --> 00:04:03,640
Bunlar, ikili gösterimi yalnızca tek bir bitin açık olduğu konumlardır.

61
00:04:03,640 --> 00:04:09,000
Bunun anlamı, bu eşlik bitlerinin her birinin, dört

62
00:04:09,000 --> 00:04:12,640
eşlik grubundan yalnızca birinin içinde yer almasıdır.

63
00:04:12,640 --> 00:04:16,840
Bunu daha büyük örneklerde de görebilirsiniz; ne kadar büyürseniz

64
00:04:16,840 --> 00:04:25,920
büyüsün, her eşlik biti rahatlıkla gruplardan yalnızca birine dokunur.

65
00:04:25,920 --> 00:04:29,680
Zamanımızın büyük bir kısmını üzerinde yoğunlaştığımız bu eşlik kontrollerinin, ikili

66
00:04:29,680 --> 00:04:34,320
sistemde bir hatanın konumunu açıklamanın akıllıca bir yolundan başka bir

67
00:04:34,320 --> 00:04:37,880
şey olmadığını anladığınızda, hamming hakkında düşünmenin farklı bir yolu

68
00:04:37,880 --> 00:04:42,160
ile bağlantı kurabiliriz. Muhtemelen çok daha basit ve daha zarif

69
00:04:42,160 --> 00:04:43,880
olan ve temelde tek bir kod satırıyla yazılabilen kodlar.

70
00:04:43,920 --> 00:04:46,200
XOR fonksiyonuna dayanmaktadır.

71
00:04:46,200 --> 00:04:50,960
Bilmeyenler için XOR, özel veya anlamına gelir.

72
00:04:50,960 --> 00:04:55,440
İki bitin XOR&#39;unu aldığınızda, bu bitlerden herhangi biri açıksa 1 değerini

73
00:04:55,440 --> 00:05:00,200
döndürür, ancak her ikisi de açık veya kapalıysa bu sonuç değişmez.

74
00:05:00,200 --> 00:05:03,760
Farklı bir ifadeyle bu iki bitin paritesidir.

75
00:05:03,760 --> 00:05:07,840
Bir matematikçi olarak bunu toplama modu 2 olarak düşünmeyi tercih ederim.

76
00:05:07,840 --> 00:05:12,000
Ayrıca genellikle iki farklı bit dizisinin XOR&#39;undan bahsederiz, bu

77
00:05:12,040 --> 00:05:14,040
da temel olarak bu bileşeni bileşen bazında yapar.

78
00:05:14,040 --> 00:05:16,280
Toplama gibi ama asla taşımadığınız yer.

79
00:05:16,280 --> 00:05:21,240
Yine, matematiğe daha yatkın olanlar bunu iki vektörün eklenmesi

80
00:05:21,240 --> 00:05:23,520
ve mod 2&#39;nin azaltılması olarak düşünmeyi tercih edebilir.

81
00:05:23,520 --> 00:05:28,720
Şu anda Python&#39;u açarsanız ve iki tamsayı arasında düzeltme işareti işlemini uygularsanız,

82
00:05:28,720 --> 00:05:35,400
yaptığı şey budur, ancak bu sayıların başlık altındaki bit temsillerine yöneliktir.

83
00:05:35,400 --> 00:05:40,920
Sizin ve benim için kilit nokta, birçok farklı bit dizisinin

84
00:05:40,960 --> 00:05:45,960
XOR&#39;unu almanın, sütunlarda olduğu gibi bir grup ayrı grubun parodilerini

85
00:05:45,960 --> 00:05:51,320
tek bir hamlede etkili bir şekilde hesaplamanın bir yolu olmasıdır.

86
00:05:51,320 --> 00:05:54,520
Bu bize, Hamming kod algoritmamızın çoklu eşlik kontrollerinin tek bir

87
00:05:54,520 --> 00:05:59,680
işlemde paketlenmesi hakkında düşünmemiz için oldukça şık bir yol sağlıyor.

88
00:05:59,680 --> 00:06:02,800
Her ne kadar ilk bakışta çok farklı görünse de.

89
00:06:02,800 --> 00:06:08,360
Daha önce yaptığımız gibi, ikili olarak 16 konumu özel olarak yazın

90
00:06:08,640 --> 00:06:14,800
ve şimdi mesaj bitinin 1&#39;e açık olduğu konumları vurgulayın ve

91
00:06:14,800 --> 00:06:19,400
ardından bu konumları büyük bir sütunda toplayın ve XOR&#39;u alın.

92
00:06:19,400 --> 00:06:23,480
Sonuç olarak altta bulunan 4 bitin, bildiğimiz ve sevdiğimiz

93
00:06:23,480 --> 00:06:27,480
4 eşlik kontrolüyle aynı olduğunu muhtemelen tahmin edebilirsiniz, ancak

94
00:06:27,480 --> 00:06:32,720
bunun nedenini tam olarak düşünmek için bir dakikanızı ayırın.

95
00:06:32,720 --> 00:06:37,880
Örneğin bu son sütun, son biti 1 olan tüm pozisyonları sayıyor,

96
00:06:38,400 --> 00:06:42,400
ancak biz zaten yalnızca vurgulanan konumlarla sınırlıyız, dolayısıyla kaç tane

97
00:06:42,400 --> 00:06:45,960
vurgulanan konumun ilk eşlik grubundan geldiğini etkili bir şekilde sayıyor.

98
00:06:45,960 --> 00:06:48,520
bu mantıklı mı?

99
00:06:48,520 --> 00:06:53,600
Benzer şekilde, bir sonraki sütun, ikinci eşlik

100
00:06:53,600 --> 00:06:59,640
grubunda kaç konumun bulunduğunu, ikinciden sondan biti

101
00:06:59,640 --> 00:07:00,640
1 olan ve hangilerinin vurgulandığını vb. sayar.

102
00:07:00,640 --> 00:07:06,640
Aslında bu, yapmakta olduğumuz şeye ilişkin perspektifte küçük bir değişiklik.

103
00:07:07,640 --> 00:07:10,000
Yani buradan nereye gideceğini biliyorsun.

104
00:07:10,000 --> 00:07:14,400
Gönderen, toplamın 0000 olmasını sağlamak için

105
00:07:14,400 --> 00:07:19,640
bazı özel eşlik bitlerinin değiştirilmesinden sorumludur.

106
00:07:19,640 --> 00:07:23,600
Şimdi bu şekilde elde ettiğimizde, bu bize, alttaki sonuçta ortaya çıkan dört bitin

107
00:07:23,600 --> 00:07:28,720
neden doğrudan bir hatanın konumunu gösterdiğini düşünmemiz için gerçekten güzel bir yol sağlıyor.

108
00:07:28,720 --> 00:07:32,680
Diyelim ki bu bloktaki bir bit 0&#39;dan 1&#39;e değiştirildi.

109
00:07:32,720 --> 00:07:37,320
Bunun anlamı, o bitin konumu artık toplam

110
00:07:37,320 --> 00:07:42,960
XOR&#39;a dahil edilecek, bu da toplamı 0&#39;dan

111
00:07:42,960 --> 00:07:44,800
yeni eklenen değere, yani hatanın konumuna dönüştürecek.

112
00:07:44,800 --> 00:07:48,800
Biraz daha az açık bir şekilde, 1&#39;i 0&#39;a

113
00:07:48,800 --> 00:07:49,800
değiştiren bir hata varsa aynı durum geçerlidir.

114
00:07:49,800 --> 00:07:54,720
Görüyorsunuz, eğer bir bit dizisini iki kez toplarsanız, bu orada hiç

115
00:07:54,720 --> 00:07:59,000
olmamasıyla aynı şeydir, çünkü bu dünyada 1 artı 1 eşittir 0.

116
00:07:59,000 --> 00:08:03,720
Yani bu pozisyonun bir kopyasını toplam toplama

117
00:08:03,720 --> 00:08:05,400
eklemek, onu taşımamızla aynı etkiye sahiptir.

118
00:08:05,400 --> 00:08:10,080
Ve bu etki yine, alttaki toplam

119
00:08:10,080 --> 00:08:13,480
sonucun hatanın konumunu ortaya koymasıdır.

120
00:08:13,480 --> 00:08:17,720
Bunun ne kadar zarif olduğunu göstermek için, daha önce bahsettiğim Python kodunun

121
00:08:17,720 --> 00:08:22,120
alıcı tarafındaki mantığın neredeyse tamamını yakalayacak bir satırını göstermeme izin verin.

122
00:08:22,120 --> 00:08:27,160
Veri bloğunu simüle etmek için 16 1 ve 0&#39;lardan oluşan rastgele

123
00:08:27,160 --> 00:08:31,160
bir dizi oluşturarak başlayacağız ve ona bitlerin adını vereceğim, ancak elbette

124
00:08:31,160 --> 00:08:36,160
pratikte bu, bir göndericiden aldığımız bir şey olacaktır ve bunun yerine

125
00:08:36,160 --> 00:08:38,600
rastgele olduğundan 5 eşlik bitiyle birlikte 11 veri biti taşıyor olacaktır.

126
00:08:38,600 --> 00:08:43,160
EnumerateBits fonksiyonunu çağırırsam, bu bitlerin her birini karşılık gelen

127
00:08:43,160 --> 00:08:48,240
bir indeksle eşleştirir, bu durumda 0&#39;dan 15&#39;e kadar çalışır.

128
00:08:48,240 --> 00:08:53,200
Yani eğer daha sonra tüm bu çiftleri, i&#39;ye benzeyen çiftleri kapsayan bir liste

129
00:08:53,200 --> 00:08:59,160
oluşturursak ve sonra sadece i değerini, sadece indeksi çıkarırsak, bu o kadar da

130
00:08:59,160 --> 00:09:01,920
heyecan verici değil, sadece 0&#39;dan 15&#39;e kadar olan indeksleri geri alırız. .

131
00:09:01,920 --> 00:09:07,520
Ancak bunu yalnızca if biti yapma koşulunu eklersek, yani bu bit 0 değil

132
00:09:07,520 --> 00:09:13,400
de 1 ise, o zaman yalnızca karşılık gelen bitin açık olduğu konumları çeker.

133
00:09:13,400 --> 00:09:20,320
Bu durumda bu konumlar 0, 4, 6, 9 vb. gibi görünüyor.

134
00:09:20,720 --> 00:09:24,640
İstediğimiz şey, tüm bu konumları, açık olan bitlerin konumlarını bir

135
00:09:24,640 --> 00:09:29,960
araya toplamak ve ardından bunları XOR ile bir araya getirmek.

136
00:09:29,960 --> 00:09:33,960
Bunu Python&#39;da yapmak için önce birkaç yararlı işlevi içe aktarayım.

137
00:09:33,960 --> 00:09:39,140
Bu şekilde bu listede reduc()&#39;u çağırabilir ve azaltmak için XOR fonksiyonunu kullanabiliriz.

138
00:09:39,140 --> 00:09:44,840
Bu, temelde XOR&#39;ları da alarak liste boyunca yolunu yiyor.

139
00:09:44,840 --> 00:09:48,760
İsterseniz, herhangi bir yerden içe aktarmanıza gerek

140
00:09:48,800 --> 00:09:52,200
kalmadan bu XOR işlevini açıkça yazabilirsiniz.

141
00:09:52,200 --> 00:09:56,880
Yani şu anda öyle görünüyor ki eğer bunu 16 bitlik rastgele

142
00:09:56,880 --> 00:10:02,080
bloğumuz üzerinde yaparsak, ikili temsili 1001 olan 9 değerini döndürür.

143
00:10:02,080 --> 00:10:05,960
Bunu burada yapmayacağız, ancak gönderenin, dört eşlik bitini gerektiği gibi ayarlamak için bu

144
00:10:05,960 --> 00:10:11,560
ikili gösterimi kullandığı ve sonuçta bu bloğu, bu kod satırını bitlerin tam

145
00:10:11,560 --> 00:10:16,200
listesinde çalıştırmanın geri döndüğü bir duruma getirdiği bir fonksiyon yazabilirsiniz. bir 0.

146
00:10:17,200 --> 00:10:20,200
Bu iyi hazırlanmış bir blok olarak kabul edilir.

147
00:10:20,200 --> 00:10:24,640
İşin güzel yanı, bu listedeki bitlerden herhangi birini değiştirirsek, gürültüden kaynaklanan rastgele bir

148
00:10:24,640 --> 00:10:30,600
hatayı simüle edersek, o zaman aynı kod satırını çalıştırırsanız, o hatayı yazdırır.

149
00:10:30,600 --> 00:10:31,920
Çok hoş değil mi?

150
00:10:31,920 --> 00:10:37,200
Bu bloğu birdenbire alabilir, üzerinde bu tek satırı çalıştırabilirsiniz ve

151
00:10:37,200 --> 00:10:42,920
otomatik olarak bir hatanın konumunu veya eğer yoksa 0&#39;ı söyler.

152
00:10:42,920 --> 00:10:45,520
Ve burada 16 bedenin özel bir yanı yok.

153
00:10:45,520 --> 00:10:52,280
Örneğin 256 bitlik bir listeniz varsa aynı kod satırı işe yarar.

154
00:10:52,280 --> 00:10:56,280
Söylemeye gerek yok, 2 bitlik hataları tespit etmek için meta eşlik kontrolü

155
00:10:56,280 --> 00:11:01,440
yapmak gibi buraya yazılacak daha fazla kod var, ancak fikir şu

156
00:11:01,440 --> 00:11:05,080
ki, şemamızdaki temel mantığın neredeyse tamamı tek bir XOR azaltımına dayanıyor.

157
00:11:05,080 --> 00:11:10,600
Şimdi, ikili ve XOR&#39;lar ve genel olarak yazılım konusundaki rahatınıza bağlı olarak, bu

158
00:11:10,600 --> 00:11:15,880
bakış açısını ya biraz kafa karıştırıcı bulabilir ya da çok daha şık

159
00:11:15,880 --> 00:11:19,320
ve basit bulabilir ve neden en baştan bununla başlamadığımızı merak edebilirsiniz. -Gitmek.

160
00:11:19,320 --> 00:11:22,880
Kabaca konuşursak, çoklu eşlik kontrolü perspektifini, Hamming kodlarını donanıma

161
00:11:22,880 --> 00:11:27,560
doğrudan uygularken düşünmek daha kolaydır ve XOR perspektifini, bunu

162
00:11:27,560 --> 00:11:31,380
yazılımda yaparken, daha yüksek bir seviyeden düşünmek en kolayıdır.

163
00:11:31,380 --> 00:11:35,640
İlkini elle yapmak en kolay olanıdır ve bence tüm bunların altında yatan

164
00:11:35,640 --> 00:11:40,720
temel sezgiyi aşılamak açısından daha iyi bir iş çıkarıyor; yani tek bir

165
00:11:40,720 --> 00:11:46,840
hatayı bulmak için gereken bilgi, bloğun boyutunun günlüğüyle ilgilidir. , başka bir

166
00:11:46,840 --> 00:11:51,020
deyişle, blok boyutu iki katına çıktıkça her seferinde bir bit büyür.

167
00:11:51,020 --> 00:11:55,440
Buradaki ilgili gerçek şu ki, bu bilgi doğrudan

168
00:11:55,440 --> 00:11:56,440
ne kadar fazlalığa ihtiyacımız olduğuna karşılık geliyor.

169
00:11:56,440 --> 00:12:00,320
Bu aslında çoğu insanın, bir mesajı hatalara karşı dayanıklı

170
00:12:00,320 --> 00:12:05,280
hale getirmeyi ilk düşündüklerinde, düşünmeden verdikleri tepkiyle çelişen şeydir;

171
00:12:05,280 --> 00:12:07,520
burada genellikle mesajın tamamını kopyalamak akla gelen ilk içgüdüdür.

172
00:12:07,520 --> 00:12:11,120
Ve bu arada, bazen Hamming kodlarının sunulduğunu gördüğünüz, mesajı büyük

173
00:12:11,120 --> 00:12:14,800
bir matrisle çarptığınız tamamen farklı bir yol daha var.

174
00:12:14,800 --> 00:12:18,580
Bu biraz hoş çünkü onu daha geniş doğrusal kod ailesiyle ilişkilendiriyor, ancak

175
00:12:18,580 --> 00:12:25,160
bunun nereden geldiği veya nasıl ölçeklendiği konusunda neredeyse hiçbir sezgi vermediğini düşünüyorum.

176
00:12:25,160 --> 00:12:29,340
Ölçeklendirmeden bahsetmişken, blok boyutunu artırdıkça bu

177
00:12:29,340 --> 00:12:32,200
planın verimliliğinin de arttığını fark edebilirsiniz.

178
00:12:32,200 --> 00:12:40,560
Örneğin, 256 bit ile bu alanın yalnızca %3&#39;ünü yedeklilik için kullandığınızı

179
00:12:40,560 --> 00:12:43,480
ve bu noktadan sonra giderek daha iyi hale geldiğini gördük.

180
00:12:43,480 --> 00:12:49,040
Eşlik bitlerinin sayısı birer birer arttıkça blok boyutu da iki katına çıkar.

181
00:12:49,040 --> 00:12:53,840
Ve eğer bunu aşırıya götürürseniz, diyelim ki bir milyon bitlik

182
00:12:53,840 --> 00:12:58,800
bir bloğunuz olabilir, burada kelimenin tam anlamıyla eşlik kontrollerinizle 20

183
00:12:58,800 --> 00:13:00,800
soru oynuyorsunuz ve bu blok yalnızca 21 eşlik biti kullanıyor.

184
00:13:00,800 --> 00:13:05,760
Milyonlarca parçaya bakıp tek bir hatayı bulmayı düşünmek

185
00:13:05,760 --> 00:13:08,640
için geri adım atarsanız, bu gerçekten çılgınca geliyor.

186
00:13:08,640 --> 00:13:12,680
Sorun, elbette, daha büyük bir blokla, bir veya iki bitten daha fazla hata

187
00:13:12,680 --> 00:13:18,360
görme olasılığının artması ve Hamming kodlarının bunun ötesinde hiçbir şeyi ele almamasıdır.

188
00:13:18,360 --> 00:13:22,020
Yani pratikte isteyeceğiniz şey, çok fazla bit dönme

189
00:13:22,020 --> 00:13:25,520
olasılığının çok yüksek olmaması için doğru boyutu bulmaktır.

190
00:13:26,520 --> 00:13:30,920
Ayrıca pratikte hatalar küçük patlamalar halinde ortaya çıkma eğilimindedir, bu da tek bir bloğu tamamen

191
00:13:30,920 --> 00:13:35,680
mahveder, bu nedenle bir dizi hatanın birçok farklı bloğa yayılmasına yardımcı olacak yaygın bir taktik,

192
00:13:35,680 --> 00:13:41,720
bu blokları bu şekilde birbirine geçirmeden önce bu şekilde birbirine geçirmektir. gönderilir veya saklanır.

193
00:13:45,480 --> 00:13:49,920
Öte yandan, bunların birçoğu, çok daha yaygın olarak kullanılan, patlama hatalarını özellikle iyi bir

194
00:13:49,920 --> 00:13:55,060
şekilde ele alan Reed-Solomon algoritması gibi daha modern kodlar tarafından tamamen tartışmalı hale getiriliyor

195
00:13:55,100 --> 00:13:59,580
ve blok başına daha fazla sayıda hataya karşı dayanıklı olacak şekilde ayarlanabiliyor. .

196
00:13:59,580 --> 00:14:03,000
Ama bu başka bir zamanın konusu.

197
00:14:03,000 --> 00:14:07,660
Hamming, The Art of Doing Science and Engineering adlı kitabında bu kodu

198
00:14:07,660 --> 00:14:10,700
keşfetmesinin ne kadar dolambaçlı olduğunu son derece samimi bir şekilde anlatıyor.

199
00:14:10,700 --> 00:14:15,180
İlk önce, parçaları daha yüksek boyutlu bir kafesin parçalarına ayırmayı ve

200
00:14:15,180 --> 00:14:18,420
bunun gibi tuhaf şeyleri içeren her türlü farklı şemayı denedi.

201
00:14:18,420 --> 00:14:22,520
Bir hatanın konumunu ortaya koyacak şekilde eşlik kontrollerinin bir araya

202
00:14:22,520 --> 00:14:26,360
getirilmesinin mümkün olabileceği fikri, Hamming&#39;in aklına ancak bir sürü

203
00:14:26,360 --> 00:14:30,800
başka analizden sonra geri çekilip, tamam, yapabileceğim en verimli

204
00:14:30,800 --> 00:14:32,860
şeyin ne olduğunu sorduğunda geldi. bunun hakkında olabilir mi?

205
00:14:32,860 --> 00:14:36,760
Ayrıca, 1940&#39;larda bugün olduğundan çok daha az yaygın olan eşitlik kontrollerinin

206
00:14:36,760 --> 00:14:42,040
zaten aklında olmasının ne kadar önemli olduğu konusunda da samimiydi.

207
00:14:42,040 --> 00:14:46,040
Bu kitap boyunca neredeyse yarım düzine kez Louis Pasteur&#39;ün

208
00:14:46,040 --> 00:14:49,640
bir sözüne gönderme yapıyor; şans hazırlıklı bir zihinden yanadır.

209
00:14:49,640 --> 00:14:55,120
Zekice fikirler genellikle geriye dönüp bakıldığında aldatıcı derecede basit görünür, bu da onları küçümsemeyi kolaylaştırır.

210
00:14:55,120 --> 00:14:59,680
Şu anda samimi umudum, Hamming kodlarının veya en azından

211
00:14:59,680 --> 00:15:01,820
bu tür kodların olasılığının size neredeyse apaçık gelmesidir.

212
00:15:01,820 --> 00:15:05,440
Ancak bunların aslında bariz olduğunu düşünerek

213
00:15:05,440 --> 00:15:08,000
kendinizi kandırmamalısınız çünkü kesinlikle öyle değiller.

214
00:15:08,000 --> 00:15:12,080
Zekice fikirlerin aldatıcı derecede kolay görünmesinin bir nedeni de, yalnızca

215
00:15:12,080 --> 00:15:17,360
nihai sonucu görmemiz, dağınık olanı temizlememiz, tüm yanlış dönüşlerden

216
00:15:17,360 --> 00:15:22,400
hiç bahsetmememiz, bir sorunun başlangıcında keşfedilebilir olasılıklar alanının ne

217
00:15:22,400 --> 00:15:23,980
kadar geniş olduğunun altını çizmemizdir. çözme süreci, bunların hepsi.

218
00:15:23,980 --> 00:15:25,280
Ancak bu genel olarak doğrudur.

219
00:15:25,280 --> 00:15:29,880
Bazı özel icatlarda onları yeterince takdir etmememizin ikinci

220
00:15:29,880 --> 00:15:31,040
ve daha derin bir nedeni olduğunu düşünüyorum.

221
00:15:31,040 --> 00:15:35,040
Bilgiyi bitler cinsinden düşünmek, Claude Shannon&#39;ın bilgi teorisi üzerine

222
00:15:35,040 --> 00:15:39,400
ufuk açıcı makalesiyle ancak 1948&#39;de tam bir teoriye dönüştü.

223
00:15:39,400 --> 00:15:43,400
Bu aslında Hamming&#39;in algoritmasını geliştirmesiyle eşzamanlıydı.

224
00:15:43,440 --> 00:15:47,300
Bu, en azından teoride, bit kayması olasılığı ne kadar

225
00:15:47,300 --> 00:15:52,080
yüksek olursa olsun, bir anlamda etkili hata düzeltmenin

226
00:15:52,080 --> 00:15:53,920
her zaman mümkün olduğunu gösteren aynı temel makaleydi.

227
00:15:53,920 --> 00:15:58,120
Bu arada Shannon ve Hamming, çok farklı şeyler üzerinde çalışmalarına rağmen Bell

228
00:15:58,120 --> 00:16:02,400
Laboratuvarları&#39;nda bir ofisi paylaşıyorlardı ki bu da burada pek rastlantısal görünmüyor.

229
00:16:02,400 --> 00:16:06,960
Birkaç on yıl ileri saralım ve bu günlerde çoğumuz küçük parçalar ve bilgiler üzerine düşünmeye o

230
00:16:06,960 --> 00:16:13,080
kadar dalmış durumdayız ki, bu düşünce tarzının ne kadar farklı olduğunu gözden kaçırmak çok kolay.

231
00:16:13,080 --> 00:16:17,920
İroniktir ki, gelecek neslin düşünme biçimini en derinden şekillendiren fikirler,

232
00:16:17,920 --> 00:16:22,640
gelecek nesile gerçekte olduğundan daha basit görünmeye yol açacaktır.

