1
00:00:00,000 --> 00:00:07,200
あなたは一人で部屋に入ると、チェス盤を見つけます。

2
00:00:07,200 --> 00:00:11,200
64 個の正方形のそれぞれの上にコインが置かれています。

3
00:00:11,200 --> 00:00:15,880
一歩下がって見てみると、これは古典的な囚人パズルの 1

4
00:00:15,880 --> 00:00:21,320
つで、妙に数学に夢中の所長があなたと他の囚人に自由のチャンスを提供します。ただし、それは彼らが立てた手の込んだ計画を 2

5
00:00:21,320 --> 00:00:23,980
人で解決した場合に限られます。

6
00:00:23,980 --> 00:00:28,000
この場合、彼らは、望むパターンに従って、各コインを慎重に裏返して表か裏にし、その後、キーを示します。

7
00:00:28,000 --> 00:00:32,920


8
00:00:32,920 --> 00:00:37,680
彼らはその鍵をチェス盤の正方形の 1

9
00:00:37,680 --> 00:00:41,060
つに置きます。各正方形は秘密の部屋かそのようなものなので、鍵がどこにあるかがわかります。

10
00:00:41,060 --> 00:00:46,440
目標は、囚人番号 2

11
00:00:46,440 --> 00:00:50,760
にも鍵のありかを知らせることです。しかし、部屋を出る前に看守が許可する唯一のことは、これらのコインを 1

12
00:00:50,760 --> 00:00:52,600
枚だけ裏返すことです。

13
00:00:53,600 --> 00:00:58,880
その時点で、あなたが外に出て、仲間の囚人が入ってくると、彼らが見ている頭と尾のセット（あなたがかろうじて微調整しただけ）以外の情報がない状態で、彼らは鍵がどこにあるのかを推測することになります。隠された、潜在的にあなた方両方にとって自由を勝ち取る可能性があります。

14
00:00:58,880 --> 00:01:03,600


15
00:01:03,600 --> 00:01:09,400


16
00:01:09,400 --> 00:01:12,520
これらのパズルではよくあることですが、必要に応じて 2

17
00:01:12,520 --> 00:01:16,820
人で事前に戦略を立てることはできますが、表と裏の具体的な配置はわかりません。

18
00:01:16,820 --> 00:01:21,360
さらに、監視員はあなたの戦略を盗聴し、コインと鍵を敵対的に配置してそれを阻止するために全力を尽くすことができます。

19
00:01:21,360 --> 00:01:25,120


20
00:01:25,120 --> 00:01:31,400
それで、私は結婚式でのディナーの会話に関するこのパズルについて初めて知りました、そしてそれは私を完全に引き込みました。

21
00:01:31,400 --> 00:01:32,400


22
00:01:32,400 --> 00:01:37,640
家まで車で3時間くらいかかったのを覚えていますが、その間ずっと私の心はコインを投げて状態をエンコードするという話題に釘付けになっていたと思います。

23
00:01:37,640 --> 00:01:41,160


24
00:01:41,160 --> 00:01:43,480
しかし、その後もこのパズルは頭から離れません。

25
00:01:43,480 --> 00:01:47,520
それを解決した後、私はこれら 2 つの驚くほど興味深いウサギの穴にはまりました。

26
00:01:47,520 --> 00:01:52,680
1 つは、設定を少し変えると、たとえば 6x6

27
00:01:52,680 --> 00:01:57,240
のチェス盤にするか、正方形の 1 つを削除するなど、挑戦が不可能であることを証明することでした。

28
00:01:57,240 --> 00:02:00,840
そして、そのウサギの穴がどこにつながっているかを少しでも理解していただくために、このビデオは 4

29
00:02:00,840 --> 00:02:05,860
次元の立方体の角をペイントする特に楽しい方法で終わる予定です。

30
00:02:05,860 --> 00:02:09,700
もう 1

31
00:02:09,700 --> 00:02:15,640
つの厄介な問題は、このパズルの解決策を、コンピュータ

32
00:02:15,640 --> 00:02:16,640
サイエンスと情報理論において非常に重要なテーマであるエラー修正にどれだけ密接に結びつけることができるかを考え出すことでした。

33
00:02:16,760 --> 00:02:21,640
コンピューターがデータを送信して保存すると、現実世界の混乱が必然的に時々少し反転し、それによってデータの読み取り方が完全に変わる可能性があるという考えです。

34
00:02:21,640 --> 00:02:26,560


35
00:02:26,560 --> 00:02:30,700
したがって、誤り訂正符号は、メッセージに驚くほど少量の情報を追加する方法であり、これにより、受信者は、いつエラーが発生したか、そしてさらに驚くべきことに、それを修正する方法を正確に識別できるようになります。

36
00:02:30,700 --> 00:02:36,400


37
00:02:36,400 --> 00:02:39,240


38
00:02:39,240 --> 00:02:43,800
このパズルを解くための直感は、ハミング コードと呼ばれるものの背後にある直感と本質的に同じであることがわかりました。ハミング

39
00:02:43,800 --> 00:02:47,900
コードは、非常に効率的な誤り訂正の最も初期の例の 1

40
00:02:47,900 --> 00:02:50,520
つです。

41
00:02:50,520 --> 00:02:54,400
つまり、この問題を熟考するのに費やした時間は、あなたが思っているほど無駄ではないということです。

42
00:02:54,400 --> 00:02:55,400


43
00:02:55,400 --> 00:02:58,720
さて、あなたと私はここで実際に解決策を検討するつもりはありません。

44
00:02:58,720 --> 00:03:03,320
その代わりに、私はマット・パーカーと一緒にスタンドアップ数学に関するビデオを撮影しました。彼は YouTube

45
00:03:03,320 --> 00:03:07,780
とスタンドアップと本の両方での名声でご存知の方も多いと思います。

46
00:03:07,780 --> 00:03:11,100
私たちはそれぞれ、問題を解決するための思考プロセスについて話し合います。それは、複数の見方があるため、非常に楽しいものです。

47
00:03:11,100 --> 00:03:13,240


48
00:03:13,240 --> 00:03:18,120
その代わりに、私がここで皆さんと一緒にやりたいのは、このパズルの考えられるすべての戦略について、より全体的な視点を持って、特定のバリエーションが必然的に監視員に妨害される余地を残している理由を証明するという最初のウサギの穴に一緒に連れて行ってもらうことです。あなたがどれだけ賢くても。

49
00:03:18,120 --> 00:03:22,400


50
00:03:22,400 --> 00:03:27,440


51
00:03:27,440 --> 00:03:29,160


52
00:03:29,160 --> 00:03:33,040
証明自体は、視点を変えて解決策を明らかにする満足のいく瞬間の

53
00:03:33,040 --> 00:03:37,640
1

54
00:03:37,640 --> 00:03:42,520
つであり、それに至るまでの全体的なコンテキストは、情報とデータに関する結論を引き出す方法として、高次元のオブジェクトについての推論を練習する良い機会です。

55
00:03:42,520 --> 00:03:43,520


56
00:03:43,520 --> 00:03:48,200
さらに、元のパズルの解決策が、ある意味、ほぼ不可能であることがわかると、その解決策を理解するのにさらに役立ちます。

57
00:03:48,200 --> 00:03:58,800


58
00:03:58,800 --> 00:03:59,800
どこから始めれば？

59
00:03:59,800 --> 00:04:04,840
私たちが望んでいるのは、このパズルを解くことが何を意味するのかを何らかの形で視覚化することです。

60
00:04:04,840 --> 00:04:08,540
そして、一般的なケースを構築するために、何らかの意味を持つ、できる限り最も単純なケースに物事を落とし込んでみましょう。

61
00:04:08,540 --> 00:04:11,300


62
00:04:11,300 --> 00:04:17,260
2 つの四角形、2 つのコイン、そして鍵がどこにあるかについて 2 つの可能性があります。

63
00:04:17,260 --> 00:04:20,720
これを解決する 1 つの方法は、単純に

64
00:04:20,720 --> 00:04:21,720
2 番目のコインにキーがどこにあるかを通信させることです。

65
00:04:21,720 --> 00:04:25,500
裏の場合はキーが左側のマスにあることを意味し、表の場合はキーが右側のマスにあることを意味します。

66
00:04:25,500 --> 00:04:27,240


67
00:04:27,240 --> 00:04:28,240
大したことではないですよね？

68
00:04:28,240 --> 00:04:31,980
これは 1

69
00:04:31,980 --> 00:04:36,460
ビットの情報なので、両替する必要がある場合はそのコインを投げることができますが、両替する必要がない場合は、別のコインを投げるだけで済みます。

70
00:04:36,460 --> 00:04:39,860
まず最初に、これらを表と裏として考えるのをやめ、1 と

71
00:04:39,860 --> 00:04:41,500
0 として考え始めましょう。

72
00:04:41,500 --> 00:04:44,180
その方が数学を行うのがずっと簡単です。

73
00:04:44,180 --> 00:04:48,460
次に、これらのコインのペアを座標のセットとして考えることができます。ボードが取り得る

74
00:04:48,460 --> 00:04:53,640
4

75
00:04:53,640 --> 00:04:54,780
つの可能な状態のそれぞれが、次のように単位正方形の隅に位置します。

76
00:04:54,780 --> 00:04:58,380
このケースの解決方法をすでに知っているときにこれを行うのは愚かなことのように思えるかもしれませんが、より大きなケースを一種のジオメトリに変換するための良いウォーミングアップになります。

77
00:04:58,380 --> 00:05:02,020


78
00:05:02,020 --> 00:05:07,220
コインの 1 つを投げると、座標の

79
00:05:07,220 --> 00:05:10,180
1 つが変更されるだけなので、正方形の端に沿って移動することに注意してください。

80
00:05:10,180 --> 00:05:15,340
2 番目のコインにキーの位置をエンコードさせるという戦略は、Y 座標が 0

81
00:05:15,340 --> 00:05:22,740
である下の 2 つの角を、キーがスクエア

82
00:05:22,740 --> 00:05:28,380
ゼロの状態にある状態に関連付けることによって描画できます。つまり、これらの上 2 つの角がキーに関連付けられているということです。振り出しの状態。

83
00:05:28,380 --> 00:05:31,180
そこで、私たちのソリューションが実際に機能することが何を意味するのかを考えてみましょう。

84
00:05:31,340 --> 00:05:36,340
これは、どこから始めても、エッジに沿って一歩を踏み出さなければならなくなったり、コインの 1

85
00:05:36,340 --> 00:05:40,660
つを投げなければならなくなったりした場合でも、最終的にはこれら 2

86
00:05:40,660 --> 00:05:47,020
つの領域のどちらかに到達することが常に保証できることを意味します。

87
00:05:47,020 --> 00:05:50,440
ここで問題は、より大きなチェス盤の場合はどのように見えるかということです。

88
00:05:50,440 --> 00:05:54,780
次に最も単純なケースは、正方形が 3 つ、コインが 3

89
00:05:54,780 --> 00:05:56,860
つあり、鍵がどこにあるかについて 3 つの可能性がある場合です。

90
00:05:56,860 --> 00:06:00,940
これにより、コインが取り得る 8

91
00:06:00,940 --> 00:06:05,420
つの可能な状態が得られ、これらの状態を座標として解釈して以前と同じゲームをプレイすると、各状態が単位立方体の隅に位置する 3

92
00:06:05,420 --> 00:06:10,460
次元空間に移動します。

93
00:06:10,460 --> 00:06:14,040
このような絵が役立つのは、コインを 1

94
00:06:14,040 --> 00:06:16,240
枚裏返すというアイデアに非常に鮮やかな意味を与えることです。

95
00:06:16,240 --> 00:06:21,020
コインを投げるたびに、立方体の端に沿って歩いていることになります。

96
00:06:21,020 --> 00:06:29,920
さて、あなたとあなたの仲間の受刑者にとって、このパズルの戦略を立てることは何を意味するでしょうか?

97
00:06:30,080 --> 00:06:33,580
囚人 2 がその部屋に入るたびに、見ている状態 (基本的には 3 ビット)

98
00:06:33,580 --> 00:06:39,360
を 3 つの可能な正方形の 1 つと関連付けることができる必要があります。

99
00:06:39,360 --> 00:06:43,600
私たちはすでに非常に視覚的に考えているので、これらの正方形を色に関連付けましょう。たとえば、正方形 0 は赤、正方形 1

100
00:06:43,600 --> 00:06:48,720
は緑、正方形 2 は青です。

101
00:06:48,720 --> 00:06:54,180
この概念では、戦略を思いつくことは、考えられるあらゆる戦略を考え出すことは、立方体の 8

102
00:06:54,180 --> 00:07:01,980
つの角のそれぞれを赤、緑、青のいずれかに着色することと同じことです。

103
00:07:01,980 --> 00:07:04,780
たとえば、立方体全体を赤く着色したとします。

104
00:07:04,780 --> 00:07:09,520
これを正確に戦略と呼ぶかどうかはわかりませんが、キーがゼロの 2

105
00:07:09,520 --> 00:07:13,040
乗の下にあると常に推測することに相当します。

106
00:07:13,040 --> 00:07:17,260
代わりに、最初の 2

107
00:07:17,260 --> 00:07:22,660
つのコインを加算し、それをキーの場所のエンコードとして使用するという戦略があったとします。その場合、立方体は次のようになります。

108
00:07:22,660 --> 00:07:27,380
面白いのは、合計でいくつの戦略が存在するかを数えられることです。各頂点の色を 3 つ選択し、頂点の合計を 8

109
00:07:27,380 --> 00:07:32,820
つ使用すると、3 の 8 乗が得られます。

110
00:07:32,820 --> 00:07:36,820
あるいは、64 次元の立方体を描くという考えに思いを馳せることに抵抗がない場合は、元のパズルで考えられる合計 2

111
00:07:36,820 --> 00:07:41,940
対 64 の戦略のうち

112
00:07:41,940 --> 00:07:46,100
64 が存在する感覚を考えるのを楽しむこともできます。

113
00:07:46,100 --> 00:07:50,700
これは針を探すときの干し草の山の大きさです。

114
00:07:50,740 --> 00:07:55,840
3 正方形の場合の別の試みは、コイン 0 を 0 回、さらにコイン 1 を

115
00:07:55,840 --> 00:08:02,020
1 回、さらにコイン 2 を 2 回計算し、必要に応じてそのモジュレーション 3 を減らすようなものになるかもしれません。

116
00:08:02,020 --> 00:08:06,220
Stand Up

117
00:08:06,220 --> 00:08:10,140
Maths では、マットと私は二人とも、これを

118
00:08:10,140 --> 00:08:12,100
64 正方形のケースに適用したバージョンを試してみたこと、およびコインのランダムな配置ではうまく機能するのに、なぜ最終的には失敗に終わるのかについて話しています。

119
00:08:12,100 --> 00:08:16,760
ここから見ると、これは立方体に色を付けるもう 1

120
00:08:16,760 --> 00:08:19,660
つの方法のように見えますが、これらのコーナーのいくつかを見てみる価値はあります。

121
00:08:19,660 --> 00:08:24,240
部屋に入り、3 枚のコインがすべて裏に設定されているとします。つまり、コーナー

122
00:08:24,240 --> 00:08:27,420
0、0、0 から開始するようなものです。

123
00:08:27,420 --> 00:08:33,180
コイン 0 を投げた場合、合計は変わらないため、別の赤いコーナーに移動します。

124
00:08:33,180 --> 00:08:40,100
コイン 1 を投げると合計が 1 増えるので、緑のコーナーに移動します。

125
00:08:40,100 --> 00:08:44,860
そして、コイン 2 を投げると、青いコーナーのように見える 2 まで移動します。

126
00:08:44,860 --> 00:08:49,900
いつでも好きな色にアクセスできるという事実は、これが開始コーナーであれば、この戦略が常に勝つという事実を反映しています。

127
00:08:49,900 --> 00:08:55,060


128
00:08:55,060 --> 00:08:58,460
一方、0、1、0からスタートしたとします。

129
00:08:58,460 --> 00:09:03,460
この場合、コイン 0 を投げると合計は変わらないため、別の緑のコーナーに移動しますが、コイン 1

130
00:09:03,460 --> 00:09:10,380
またはコイン 2 を投げると、赤いコーナーに移動します。

131
00:09:10,380 --> 00:09:13,500
青いコーナーに到達する方法はまったくありません。

132
00:09:14,380 --> 00:09:20,060
基本的に、ここで何が起こっているのかというと、コイン 1 をオフにして 1 を引くか、コイン 2

133
00:09:20,060 --> 00:09:27,660
をオンにして 2 を加えるオプションがあるということです。MOD 3 を使用している場合、これらは実際にはどちらも同じ操作です。

134
00:09:27,660 --> 00:09:31,020
しかし、それは合計を 2 に変更する方法がないことを意味します。

135
00:09:31,020 --> 00:09:35,580
あなたの戦略を知っている敵対的な監視員は、この構成から開始し、四角形 2

136
00:09:35,580 --> 00:09:40,140
の下にキーを置き、それが完了したと呼ぶことができます。

137
00:09:40,140 --> 00:09:45,340
しかし、sums mod 3

138
00:09:45,340 --> 00:09:51,500
などについて考えなくても、実装の詳細が何であれ、同じ色の 2 つの隣接するコーナーとして示されている図でこれを見ることができます。

139
00:09:51,500 --> 00:09:56,780
考えられるすべての戦略を俯瞰的に把握していないと、その中の特定の戦略がうまくいかないことがわかったとき、「もしかしたら、私が思いついたことのない、巧妙な戦略があるかもしれない」と疑問に思うことになります。まだ考えていません。

140
00:09:56,780 --> 00:10:03,340


141
00:10:03,340 --> 00:10:08,780
しかし、立方体の色について考えていると、当然、組み合わせに関する興味深い質問にたどり着きます。

142
00:10:08,780 --> 00:10:14,460
特定の頂点に隣接する 3

143
00:10:14,460 --> 00:10:19,340
つの頂点が常に赤、緑、青を表すようにこれをペイントする方法はありますか?

144
00:10:19,340 --> 00:10:23,660
チェス盤とコインを使ったパズルから立方体の角をペイントする話に至るのは奇妙で、複雑にさえ思えるかもしれませんが、これは実際には予想よりもはるかに自然なステップです。

145
00:10:23,660 --> 00:10:29,100


146
00:10:29,100 --> 00:10:35,020
私はこのパズルについて多くの人たちと話しましたが、私が気に入っているのは、経験豊富な問題解決者の多くが、プロンプトもなしにすぐに立方体の角の色付けについて話し始めることです。まるでそれが一種の事実上の言語であるかのようです。このパズル。

147
00:10:35,020 --> 00:10:39,500


148
00:10:39,500 --> 00:10:45,580
そして本当にそうなのです。 バイナリ文字列を、エッジに対応するビット

149
00:10:45,580 --> 00:10:51,580
反転を備えた高次元立方体の頂点として考えることは、前に参照したエラー修正など、特にコーディング理論で実際によく出てきます。

150
00:10:51,580 --> 00:10:55,980


151
00:10:55,980 --> 00:11:03,820
さらに、数学者が物体を個別のセットに分割することを説明する方法として色付けについて話しているのをよく聞きます。

152
00:11:03,820 --> 00:11:08,380
たとえば、その笑えるほど膨大なグラム定数について聞いたことがあるなら、それが発生した問題も、高次元の立方体に色を割り当てるという観点から表現されています。

153
00:11:08,380 --> 00:11:14,540


154
00:11:14,540 --> 00:11:19,020
ただし、その場合、色は個々の頂点ではなく頂点のペアに与えられました。

155
00:11:19,020 --> 00:11:25,820
重要なのは、高次元の立方体に色を付ける方法を分析することは、予想以上に応用可能なスキルであるということです。

156
00:11:25,820 --> 00:11:31,820
そこで私たちの質問ですが、すべての頂点に赤、緑、青の隣接頂点があるようにすることはできますか?

157
00:11:31,820 --> 00:11:36,540
これは、重要な場所をエンコードするのと同じことなので、必要な場所をいつでも 1

158
00:11:36,540 --> 00:11:41,660
回フリップするだけで通信できるようになります。

159
00:11:41,660 --> 00:11:45,100
ビデオを一時停止して、今これを試してみると、実際に役立つでしょう。

160
00:11:45,100 --> 00:11:50,780
数独の奇妙な 3 次元バージョンのようなものです。 実際、特定のサブセットを

161
00:11:50,780 --> 00:11:55,660
3 つの可能な状態すべてで満たすという意味では、数独と非常に似ています。

162
00:11:55,660 --> 00:12:00,540
たとえば、角の 1 つを任意の色 (たとえば赤) でペイントすることから始めると、その隣の

163
00:12:00,540 --> 00:12:05,340
3 つの色が赤、緑、青である必要があることがわかります。 どのようにやっても構いません。

164
00:12:05,340 --> 00:12:10,860
次に、赤色の隣に移動して、他の 2 つの隣接を緑色と青色にする必要があると言うかもしれません。

165
00:12:10,860 --> 00:12:15,500
もしかしたら私たちはこうやってやっているのかもしれません。 しかし、少なくともここで私が描いた方法では、あなたは行き詰まっています。

166
00:12:15,500 --> 00:12:20,220
次の 2 つの正しい色を選択することはできません。 理由がわかりますか?

167
00:12:20,220 --> 00:12:26,060
私が共有したいのは、なぜこれが 3 次元では決して機能しないのかだけでなく、なぜ

168
00:12:26,060 --> 00:12:30,380
2 のべき乗以外の次元でも機能しないのかを説明する素敵な小さな議論です。

169
00:12:30,380 --> 00:12:38,540
その考え方は、私たちが注目しているプロパティの対称性は、最終的には赤、緑、青の頂点の数が同じでなければならないことを意味するということです。

170
00:12:38,540 --> 00:12:43,260
しかし、それはそれぞれ 3 分の 8 ずつあることを意味し、それは不可能です。

171
00:12:43,260 --> 00:12:48,700
次に進む前に、少し立ち止まって、その直感を確かなものにする方法を考えられるかどうかを考えてください。

172
00:12:48,700 --> 00:12:52,700
漠然とした直感を確かな証拠に変える楽しい練習です。

173
00:12:52,700 --> 00:12:57,740
はい、準備はできましたか？

174
00:12:57,740 --> 00:13:05,820
これを行う 1 つの方法は、各角を通過し、その隣にある特定の色 (たとえば赤) がいくつあるかを数えるプロセスを想像することです。

175
00:13:05,820 --> 00:13:14,380
したがって、ここでの各ステップでは、特定の頂点に隣接する 3 つの頂点を調べ、赤い頂点を数えて、それを総計に追加します。

176
00:13:14,380 --> 00:13:27,180
この特定のカラーリングの場合、カウントは 12 になりますが、必要なプロパティがある場合、すべてのコーナーにちょうど 1 つの赤い近傍があることになるため、カウントは 8 になるはずです。

177
00:13:27,180 --> 00:13:35,340
一方、すべての赤いコーナーは、誰かの隣のインスタンスごとに 1 回ずつ、正確に 3 回カウントされます。

178
00:13:35,340 --> 00:13:39,820
したがって、最終的な合計は赤いコーナーの合計数の 3 倍でなければなりません。

179
00:13:39,820 --> 00:13:44,140
それは簡単です。 角の 8/3 が赤であるカラーリングを見つけます。

180
00:13:44,780 --> 00:13:56,060
素敵じゃないですか？ ある角に赤い隣があるコーナーが何回あるかを数えるのは、赤いコーナーに隣があるコーナーが何回あるかを数えるのと同じであり、実際、これだけでも矛盾が生じます。

181
00:13:56,060 --> 00:14:00,780
さらに素晴らしいのは、この議論がすぐに高次元に一般化できることです。

182
00:14:00,780 --> 00:14:04,540
n 個の正方形があるチェス盤のパズルを解くことを考えてください。

183
00:14:04,540 --> 00:14:12,380
繰り返しになりますが、パズルは、コインの各配置を何らかの状態、つまりキーの考えられる場所に関連付けることです。

184
00:14:12,460 --> 00:14:22,060
そして、目標は、コインを 1 回投げるだけでアクセスできる配置が、考えられるすべての州、監視員がその鍵を隠した可能性のあるすべての場所を表すようにすることです。

185
00:14:23,180 --> 00:14:34,700
たとえ高次元の立方体のほとんどを視覚化できなくても、基本的にビット文字列と 1 ビット反転したものを記述する方法として、そのような立方体の頂点やその近傍について話すことができます。

186
00:14:35,580 --> 00:14:37,980
実は、知っておくべき関連する事実は 2 つだけです。

187
00:14:38,540 --> 00:14:49,020
これらの頂点のいずれかに立っている場合、n 個の異なる隣接頂点があり、頂点の総数は 2 の n 個、つまり長さ n のビット列ごとに 1 個になります。

188
00:14:50,220 --> 00:14:53,820
そしてここから、3 次元で行ったのと同じゲームをプレイできるようになります。

189
00:14:53,820 --> 00:14:57,020
各角を通過して、赤い隣が何個あるか数えることができます。

190
00:14:57,660 --> 00:15:03,420
希望する色付けが可能であれば、この合計は 2 の n 乗、各頂点に 1 つになるはずです。

191
00:15:04,060 --> 00:15:08,700
一方、各赤いコーナーは隣接するコーナーごとに 1 回カウントされるため、最終的には赤いコーナーの総数の

192
00:15:08,700 --> 00:15:13,180
n 倍になる必要があることを意味します。

193
00:15:14,140 --> 00:15:19,500
左辺は 2 のべき乗であるため、右辺も 2

194
00:15:19,500 --> 00:15:23,740
のべき乗でなければなりません。これは、n 自体が 2 のべき乗より小さい場合にのみ発生します。

195
00:15:24,860 --> 00:15:30,860
したがって、たとえば、私たちが 4 次元または 64 次元にいたとしても、矛盾はありません。

196
00:15:30,860 --> 00:15:35,180
少なくとも、頂点を異なる色間で均等に分割することは可能です。

197
00:15:35,980 --> 00:15:41,660
明確にしておきますが、これは 2

198
00:15:41,660 --> 00:15:43,260
のべき乗の場合の解が必ずしも存在すると言っているのと同じではなく、それがまだ排除できないというだけです。

199
00:15:45,740 --> 00:15:47,980
私にとって、これはまったく嬉しいことです。

200
00:15:47,980 --> 00:15:52,540
立方体の角に色を塗り、その数を数えることを想像するだけで、正方形の数が一定でなければ、どんなに賢くても、このチェス盤パズルのすべてのケースで有効な戦略は存在しないと結論付けることができます。

201
00:15:52,540 --> 00:15:56,460
2の累乗ではありません。

202
00:15:56,460 --> 00:16:01,660


203
00:16:02,460 --> 00:16:06,140
したがって、いくつかのマス目をノックしたり、ボードのサイズを小さくしたりすると簡単になるように見えるかもしれませんが、実際にはタスクが絶望的になります。

204
00:16:06,140 --> 00:16:09,660


205
00:16:10,380 --> 00:16:14,860
また、このパズルの解決策は、後ほど説明しますが、ほとんどの次元では禁止されている方法で、高次元の立方体の角に色を付ける特に対称的な方法と見なすことができることも意味します。

206
00:16:14,860 --> 00:16:19,820


207
00:16:19,820 --> 00:16:22,220


208
00:16:23,020 --> 00:16:27,340
興味があるなら、これを 4 次元立方体について明示的に示さずにはいられませんでした。

209
00:16:28,060 --> 00:16:32,700
したがって、3D 立方体を

210
00:16:32,700 --> 00:16:38,140
2 次元に押しつぶすのと同じ方法で、おそらく少し遠近法を使用して、頂点とエッジがすべてどのように接続されているかについて同じグラフ構造を取得することができます。

211
00:16:38,140 --> 00:16:43,020
4 次元の立方体を

212
00:16:43,020 --> 00:16:47,580
3 次元空間に投影しても、すべての頂点とエッジがどのように結合されているかを完全に把握できます。

213
00:16:48,380 --> 00:16:52,700
数独の奇妙な種類の 4 次元のいとこを試してみたい場合は、ここで一時停止して、任意の

214
00:16:52,700 --> 00:16:57,100
4 つの隣接頂点がすべてを表すようにこれらの頂点に色を付ける方法を考えてみてください。

215
00:16:57,100 --> 00:17:02,940
4 つの異なる色。

216
00:17:05,660 --> 00:17:10,460
4

217
00:17:10,460 --> 00:17:13,340
マスの場合のチェス盤パズルを解くのと基本的に同じ計算を使用して、コンピューターに明示的に計算を引き出すことができます。

218
00:17:18,540 --> 00:17:22,140
この時点で、実際の解決策が何であるかを知りたくなったら、Stand Up

219
00:17:22,140 --> 00:17:26,140
Maths にアクセスしてください。マットと私がその仕組みを説明します。

220
00:17:26,140 --> 00:17:31,100
Stand Up Maths

221
00:17:31,100 --> 00:17:35,740
についてまだよく知らない人がいるなら、これは私のお気に入りのチャンネルの 1 つであり、私の大好きな人が運営しているので、そこに着いたらすぐに購読してください。

222
00:17:35,740 --> 00:17:39,020
彼が提供する他のすべてのことで、あなたはかなりの喜びを味わうことになるでしょう。

223
00:17:39,900 --> 00:17:45,020
それを説明する前に、彼と私は、ソリューションを実際に実行することがどのようなものかを簡単に説明します。

224
00:17:45,020 --> 00:17:48,620
そして、私たちがそうしているのと同じように、あなたにも解決策を自分で考えてみて、私たちが何をしているのかを私たちがあなたに話す前に予測してほしいと心から願っています。

225
00:17:48,620 --> 00:17:51,340


226
00:17:52,300 --> 00:17:56,060
ハミング

227
00:17:56,060 --> 00:17:59,340
コードとエラー修正との関係に興味がある場合は、それに関するビデオを作成するつもりです。コメント欄でお知らせください。

228
00:17:59,340 --> 00:18:03,660
モチベーションを高めるパズルに関して言えば、誰もが私ほど 64 次元の立方体を対称的に描く方法に興味があるわけではない、と言われました。

229
00:18:03,660 --> 00:18:09,500
しかし、信頼性の高いデータ送信は可能でしょうか? それが普遍的にセクシーだということには誰もが同意できると思います。

230
00:18:09,500 --> 00:18:11,500


231
00:18:11,500 --> 00:18:15,980
それが普遍的にセクシーだということには誰もが同意できると思います。

232
00:18:41,500 --> 00:18:42,480


