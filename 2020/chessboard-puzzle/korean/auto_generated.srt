1
00:00:03,280 --> 00:00:06,600
혼자 방에 들어가 체스판을 발견합니다.

2
00:00:07,140 --> 00:00:10,280
64개의 사각형에는 각각 동전이 하나씩 놓여 있습니다.

3
00:00:10,940 --> 00:00:14,136
한 걸음 물러서서, 이 게임은 수학에 집착하는 이상한 

4
00:00:14,136 --> 00:00:17,120
교도소장이 여러분과 동료 수감자에게 자유의 기회를 

5
00:00:17,120 --> 00:00:20,103
제공하지만, 두 사람이 그들이 세운 정교한 계획을 

6
00:00:20,103 --> 00:00:23,300
풀어야만 하는 전형적인 죄수 퍼즐 게임 중 하나입니다.

7
00:00:23,900 --> 00:00:28,213
이 경우 동전을 원하는 패턴에 따라 앞면 또는 뒷면이 

8
00:00:28,213 --> 00:00:32,240
되도록 조심스럽게 뒤집은 다음 열쇠를 보여 줍니다.

9
00:00:32,940 --> 00:00:35,395
체스판 사각형 중 하나에 열쇠를 넣는데, 

10
00:00:35,395 --> 00:00:37,530
각 사각형은 비밀 칸과 같은 역할을 

11
00:00:37,530 --> 00:00:40,200
하므로 열쇠가 어디에 있는지 알 수 있습니다.

12
00:00:40,840 --> 00:00:44,441
목표는 2번 죄수에게도 열쇠의 위치를 알려주는 

13
00:00:44,441 --> 00:00:48,181
것이지만, 교도소장이 방을 나가기 전에 허용하는 

14
00:00:48,181 --> 00:00:52,060
유일한 방법은 이 동전 중 하나만 뒤집는 것입니다.

15
00:00:53,600 --> 00:00:57,533
이때, 여러분이 걸어 나가면 동료 죄수가 들어오고, 

16
00:00:57,533 --> 00:01:01,195
간신히 조정한 머리와 꼬리 외에는 아무런 정보가 

17
00:01:01,195 --> 00:01:05,129
없는 상태에서 열쇠가 어디에 숨겨져 있는지 추리하여 

18
00:01:05,129 --> 00:01:08,520
두 사람 모두 자유를 얻을 수 있어야 합니다.

19
00:01:09,320 --> 00:01:12,461
이러한 퍼즐의 전형처럼 두 사람이 원한다면 미리 

20
00:01:12,461 --> 00:01:15,602
전략을 세울 수 있지만, 머리와 꼬리의 구체적인 

21
00:01:15,602 --> 00:01:18,510
배치는 알 수 없으며, 게다가 소장은 당신의 

22
00:01:18,510 --> 00:01:21,535
전략을 듣고 동전과 열쇠를 적대적으로 배치하여 

23
00:01:21,535 --> 00:01:24,560
전략을 저지하기 위해 최선을 다할 수 있습니다.

24
00:01:25,920 --> 00:01:29,109
결혼식장에서 저녁 식사를 하면서 이 퍼즐에 대해 

25
00:01:29,109 --> 00:01:32,180
처음 들었는데, 그 순간 완전히 빠져들었습니다.

26
00:01:32,540 --> 00:01:35,532
집으로 돌아오는 길이 3시간 정도 걸렸는데, 

27
00:01:35,532 --> 00:01:37,926
그 시간 내내 동전 던지기와 인코딩 

28
00:01:37,926 --> 00:01:40,560
상태라는 주제에만 집중했던 것 같습니다.

29
00:01:41,000 --> 00:01:42,960
하지만 퍼즐은 그 후에도 계속 남아 있습니다.

30
00:01:43,320 --> 00:01:44,901
이 문제를 해결한 후 저는 놀랍도록 

31
00:01:44,901 --> 00:01:46,720
흥미로운 두 가지 토끼 구멍에 빠졌습니다.

32
00:01:47,400 --> 00:01:50,362
하나는 체스판을 6x6 체스판으로 만들거나 사각형 

33
00:01:50,362 --> 00:01:53,431
중 하나를 제거하는 등 설정을 조금만 바꾸면 도전이 

34
00:01:53,431 --> 00:01:56,500
실제로 불가능하지 않다는 것을 증명하는 것이었습니다.

35
00:01:57,220 --> 00:01:59,472
이 비디오는 토끼굴이 어디로 이어지는지 

36
00:01:59,472 --> 00:02:01,930
조금이나마 이해할 수 있도록 4차원 큐브의 

37
00:02:01,930 --> 00:02:04,900
모서리를 칠하는 아주 즐거운 방법으로 끝을 맺습니다.

38
00:02:05,740 --> 00:02:09,100
또 다른 토끼굴은 이 퍼즐의 해법을 컴퓨터 과학과 

39
00:02:09,100 --> 00:02:12,220
정보 이론에서 매우 중요한 주제인 오류 수정과 

40
00:02:12,220 --> 00:02:15,100
얼마나 밀접하게 연결할 수 있는지 알아내는 

41
00:02:15,100 --> 00:02:15,940
것이었습니다.

42
00:02:16,520 --> 00:02:19,413
컴퓨터가 데이터를 전송하고 저장할 때 현실 세계의 

43
00:02:19,413 --> 00:02:22,100
지저분함은 필연적으로 때때로 조금씩 뒤바뀌며, 

44
00:02:22,100 --> 00:02:24,890
이로 인해 데이터를 읽는 방식이 완전히 바뀔 수 

45
00:02:24,890 --> 00:02:25,820
있다는 것입니다.

46
00:02:26,580 --> 00:02:30,600
따라서 오류 수정 코드는 메시지에 놀라울 정도로 적은 

47
00:02:30,600 --> 00:02:34,218
양의 정보를 추가하여 수신자가 오류 발생 시점과 

48
00:02:34,218 --> 00:02:37,835
정확한 수정 방법을 모두 파악할 수 있도록 하는 

49
00:02:37,835 --> 00:02:38,640
방법입니다.

50
00:02:39,080 --> 00:02:42,517
이 퍼즐을 푸는 직관은 고효율 오류 수정의 

51
00:02:42,517 --> 00:02:45,955
초기 사례 중 하나인 해밍 코드라고 불리는 

52
00:02:45,955 --> 00:02:49,680
직관과 본질적으로 동일하다는 것이 밝혀졌습니다.

53
00:02:50,480 --> 00:02:53,032
다시 말해, 이 문제에 대해 고민하는 시간이 

54
00:02:53,032 --> 00:02:55,380
생각만큼 쓸모없는 것은 아니라는 뜻입니다.

55
00:02:55,960 --> 00:02:57,240
이제 여러분과 저는 여기서 실제로 

56
00:02:57,240 --> 00:02:58,520
해결책을 살펴보지는 않을 것입니다.

57
00:02:58,920 --> 00:03:01,344
대신, 유튜브와 스탠드업 코미디 및 책으로 

58
00:03:01,344 --> 00:03:04,273
유명해 많은 분이 알고 계실 Matt Parker와 

59
00:03:04,273 --> 00:03:07,000
함께 스탠드업 수학에 관한 동영상을 촬영했습니다.

60
00:03:07,600 --> 00:03:10,227
우리는 각자의 사고 과정을 통해 문제를 풀어나가는데, 

61
00:03:10,227 --> 00:03:12,680
다양한 방식으로 문제를 바라볼 수 있어 재미있어요.

62
00:03:13,340 --> 00:03:16,308
대신, 제가 여기서 여러분과 함께 하고 싶은 것은 

63
00:03:16,308 --> 00:03:19,170
이 퍼즐의 모든 가능한 전략을 좀 더 글로벌하게 

64
00:03:19,170 --> 00:03:22,033
바라보고, 여러분이 아무리 영리하더라도 왜 특정 

65
00:03:22,033 --> 00:03:24,789
변형이 반드시 교도관이 여러분을 방해할 여지를 

66
00:03:24,789 --> 00:03:27,969
남기는지 증명하는 첫 번째 토끼굴로 여러분을 데려가는 

67
00:03:27,969 --> 00:03:28,500
것입니다.

68
00:03:29,080 --> 00:03:32,715
증명 자체는 관점을 바꾸면 해답이 드러나는 만족스러운 

69
00:03:32,715 --> 00:03:36,351
순간 중 하나이며, 증명에 이르는 전체 맥락은 정보와 

70
00:03:36,351 --> 00:03:39,745
데이터에 대한 결론을 도출하는 방법으로 고차원적인 

71
00:03:39,745 --> 00:03:43,260
대상에 대한 추론을 연습할 수 있는 좋은 기회입니다.

72
00:03:44,160 --> 00:03:46,368
또한, 어떤 의미에서는 거의 불가능에 

73
00:03:46,368 --> 00:03:48,576
가까운 퍼즐의 해답을 볼 수 있을 때 

74
00:03:48,576 --> 00:03:51,520
원래의 퍼즐을 이해하는 데 더 많은 도움이 됩니다.

75
00:03:58,320 --> 00:03:59,140
어디서부터 시작해야 할까요?

76
00:03:59,580 --> 00:04:01,830
우리가 원하는 것은 이 퍼즐을 푸는 것이 

77
00:04:01,830 --> 00:04:04,080
어떤 의미인지에 대한 일종의 시각화입니다.

78
00:04:04,800 --> 00:04:06,671
그리고 일반적인 사례를 구축하기 위해 

79
00:04:06,671 --> 00:04:08,186
가능한 한 가장 단순한 사례, 

80
00:04:08,186 --> 00:04:10,860
즉 어떤 종류의 의미가 있는 사례로 축소해 보겠습니다.

81
00:04:11,260 --> 00:04:12,743
사각형 두 개, 동전 두 개, 

82
00:04:12,743 --> 00:04:15,100
열쇠가 어디에 있는지 두 가지 가능성이 있습니다.

83
00:04:16,920 --> 00:04:19,090
이 문제를 해결할 수 있는 한 가지 방법은 단순히 두 

84
00:04:19,090 --> 00:04:21,260
번째 코인이 키가 있는 곳을 통신하도록 하는 것입니다.

85
00:04:21,480 --> 00:04:23,880
꼬리표가 있으면 키가 왼쪽 사각형에 있다는 뜻입니다.

86
00:04:24,160 --> 00:04:26,560
앞면이면 키가 오른쪽 정사각형에 있다는 뜻입니다.

87
00:04:27,040 --> 00:04:27,920
별거 아니죠?

88
00:04:28,020 --> 00:04:30,333
하나의 정보이므로 동전을 바꿔야 할 때는 

89
00:04:30,333 --> 00:04:32,647
동전을 뒤집으면 되고, 바꿔야 할 필요가 

90
00:04:32,647 --> 00:04:34,660
없다면 다른 동전을 뒤집으면 됩니다.

91
00:04:36,300 --> 00:04:38,718
우선, 머리와 꼬리라는 생각을 

92
00:04:38,718 --> 00:04:41,280
버리고 1과 0으로 생각해보세요.

93
00:04:41,680 --> 00:04:43,360
훨씬 더 쉽게 계산할 수 있습니다.

94
00:04:44,040 --> 00:04:47,206
이 동전 쌍을 좌표 집합으로 생각하면 다음과 같이 

95
00:04:47,206 --> 00:04:50,373
보드가 있을 수 있는 네 가지 가능한 상태 각각이 

96
00:04:50,373 --> 00:04:53,314
단위 정사각형의 모서리에 위치한다고 생각할 수 

97
00:04:53,314 --> 00:04:53,880
있습니다.

98
00:04:54,380 --> 00:04:56,828
이 케이스를 해결하는 방법을 이미 알고 있는 상황에서 

99
00:04:56,828 --> 00:04:58,542
어리석은 일처럼 느껴질 수도 있지만, 

100
00:04:58,542 --> 00:05:00,908
더 큰 케이스를 일종의 기하학으로 바꾸기 위한 좋은 

101
00:05:00,908 --> 00:05:01,480
워밍업입니다.

102
00:05:02,100 --> 00:05:05,145
동전 중 하나를 뒤집으면 좌표 중 하나만 

103
00:05:05,145 --> 00:05:08,720
변경되므로 정사각형의 가장자리를 따라 이동합니다.

104
00:05:10,100 --> 00:05:14,347
두 번째 동전이 키 위치를 인코딩하도록 하는 

105
00:05:14,347 --> 00:05:18,425
전략은 Y 좌표가 0인 아래쪽 두 모서리를 

106
00:05:18,425 --> 00:05:22,502
키가 제곱 0 상태, 즉 위쪽 두 모서리를 

107
00:05:22,502 --> 00:05:27,260
키가 제곱 1 상태와 연관시켜서 그릴 수 있습니다.

108
00:05:28,440 --> 00:05:29,693
따라서 솔루션이 실제로 작동한다는 

109
00:05:29,693 --> 00:05:31,080
것이 무엇을 의미하는지 생각해 보세요.

110
00:05:31,900 --> 00:05:35,538
즉, 어디서 시작하든 동전 중 하나를 던져야만 하는 

111
00:05:35,538 --> 00:05:39,052
상황에서 가장자리를 따라 한 걸음 내딛게 되면 두 

112
00:05:39,052 --> 00:05:42,440
지역 중 원하는 곳에 도착할 수 있다는 뜻입니다.

113
00:05:46,680 --> 00:05:49,540
이제 더 큰 체스 판은 어떤 모습일까요?

114
00:05:50,080 --> 00:05:52,216
다음으로 가장 간단한 경우는 사각형 3개, 

115
00:05:52,216 --> 00:05:53,908
동전 3개, 열쇠가 어디에 있는지 

116
00:05:53,908 --> 00:05:55,600
세 가지 가능성이 있는 경우입니다.

117
00:05:56,800 --> 00:05:59,720
이렇게 하면 코인의 가능한 상태가 8가지가 됩니다.

118
00:06:00,240 --> 00:06:03,246
이전에 했던 것과 같은 게임을 하면서 이러한 

119
00:06:03,246 --> 00:06:06,373
상태를 좌표로 해석하면 각 상태가 단위 큐브의 

120
00:06:06,373 --> 00:06:09,380
모서리에 위치하는 3차원 공간으로 이동합니다.

121
00:06:10,460 --> 00:06:13,066
이와 같은 그림의 유용성은 동전 중 하나를 뒤집는다는 

122
00:06:13,066 --> 00:06:15,500
아이디어에 매우 생생한 의미를 부여한다는 것입니다.

123
00:06:15,500 --> 00:06:18,358
동전을 던질 때마다 큐브의 가장자리를 

124
00:06:18,358 --> 00:06:19,720
따라 걷게 됩니다.

125
00:06:24,240 --> 00:06:26,432
이제 여러분과 동료 수감자에게 이 퍼즐에 

126
00:06:26,432 --> 00:06:28,720
대한 전략이 있다는 것은 무엇을 의미할까요?

127
00:06:29,880 --> 00:06:32,155
죄수 2가 그 방에 들어올 때마다, 

128
00:06:32,155 --> 00:06:34,772
죄수는 기본적으로 세 개의 가능한 사각형 

129
00:06:34,772 --> 00:06:37,389
중 하나를 보고 있는 상태와 연관시킬 수 

130
00:06:37,389 --> 00:06:38,300
있어야 합니다.

131
00:06:39,280 --> 00:06:41,963
우리는 이미 매우 시각적으로 생각하고 있으므로 

132
00:06:41,963 --> 00:06:44,130
0 제곱은 빨간색, 1 제곱은 녹색, 

133
00:06:44,130 --> 00:06:47,020
2 제곱은 파란색과 같은 색상을 사각형과 연관시켜 

134
00:06:47,020 --> 00:06:47,640
보겠습니다.

135
00:06:48,660 --> 00:06:51,608
이 개념에서 전략, 즉 가능한 모든 전략을 

136
00:06:51,608 --> 00:06:55,171
생각해내는 것은 큐브의 8개 모서리를 각각 빨간색, 

137
00:06:55,171 --> 00:06:58,120
초록색, 파란색으로 색칠하는 것과 같습니다.

138
00:07:01,580 --> 00:07:03,360
예를 들어 큐브 전체를 빨간색으로 

139
00:07:03,360 --> 00:07:04,860
색칠했다고 가정해 보겠습니다.

140
00:07:05,560 --> 00:07:07,635
이것을 정확히 전략이라고 부를 수 있을지는 

141
00:07:07,635 --> 00:07:09,624
모르겠지만, 항상 열쇠가 0 제곱 아래에 

142
00:07:09,624 --> 00:07:11,440
있다고 추측하는 것에 해당할 것입니다.

143
00:07:12,620 --> 00:07:15,344
대신 처음 두 개의 코인을 더하고 이를 키 

144
00:07:15,344 --> 00:07:17,841
위치에 대한 인코딩으로 사용하는 전략이 

145
00:07:17,841 --> 00:07:21,020
있다고 가정하면 큐브는 다음과 같이 보일 것입니다.

146
00:07:22,480 --> 00:07:24,275
재미있는 점은 총 전략의 수를 

147
00:07:24,275 --> 00:07:25,860
세어볼 수 있다는 점입니다.

148
00:07:26,320 --> 00:07:28,979
각 정점의 색상을 세 개씩 선택할 수 있고 

149
00:07:28,979 --> 00:07:31,860
총 정점이 8개이므로 3의 제곱 8을 얻습니다.

150
00:07:32,520 --> 00:07:35,536
또는 64차원 정육면체를 그린다는 생각에 

151
00:07:35,536 --> 00:07:37,765
마음을 맡기는 것이 편하다면, 

152
00:07:37,765 --> 00:07:40,650
원래 퍼즐의 총 64개의 가능한 전략이 

153
00:07:40,650 --> 00:07:43,666
2에서 64까지라는 감각에 대해 재미있게 

154
00:07:43,666 --> 00:07:45,240
생각해볼 수 있습니다.

155
00:07:45,960 --> 00:07:49,180
바늘을 찾을 때 건초 더미의 크기입니다.

156
00:07:50,480 --> 00:07:53,307
3제곱 케이스의 또 다른 시도는 동전 0의 

157
00:07:53,307 --> 00:07:56,135
0배에 동전 1의 1배를 더하고 동전 2의 

158
00:07:56,135 --> 00:07:58,845
2배를 더한 다음 필요한 경우 모드 3을 

159
00:07:58,845 --> 00:08:01,320
약간 줄이는 것처럼 보일 수 있습니다.

160
00:08:01,880 --> 00:08:04,061
스탠드업 수학에서 매트와 저는 64제곱 

161
00:08:04,061 --> 00:08:06,441
케이스에 대해 이 버전을 시도해 본 결과, 

162
00:08:06,441 --> 00:08:08,821
동전의 무작위 배열에서는 꽤 잘 작동하지만 

163
00:08:08,821 --> 00:08:11,300
궁극적으로는 실패한 이유에 대해 이야기합니다.

164
00:08:11,960 --> 00:08:14,002
여기서 보면 큐브에 색을 입히는 또 

165
00:08:14,002 --> 00:08:16,249
하나의 방법처럼 보이지만, 잠시 시간을 

166
00:08:16,249 --> 00:08:18,700
내어 그 구석구석을 살펴볼 가치가 있습니다.

167
00:08:19,460 --> 00:08:21,705
방에 들어갔을 때 세 개의 동전이 모두 

168
00:08:21,705 --> 00:08:24,154
꼬리로 설정되어 있어 0,0,0 모서리에서 

169
00:08:24,154 --> 00:08:26,400
시작하는 것과 같다고 가정해 보겠습니다.

170
00:08:27,240 --> 00:08:29,574
동전 0을 뒤집어도 합계는 변하지 

171
00:08:29,574 --> 00:08:32,400
않으므로 다른 빨간색 모서리로 이동합니다.

172
00:08:32,980 --> 00:08:35,575
동전 1을 뒤집으면 합계가 1씩 

173
00:08:35,575 --> 00:08:38,460
증가하므로 녹색 모서리로 이동합니다.

174
00:08:40,039 --> 00:08:41,969
그리고 동전 2를 뒤집으면 파란색 

175
00:08:41,969 --> 00:08:44,000
모서리처럼 보이는 2까지 이동합니다.

176
00:08:44,880 --> 00:08:47,795
원하는 색상을 항상 사용할 수 있다는 

177
00:08:47,795 --> 00:08:50,710
것은 이 전략이 이 코너에서 시작하면 

178
00:08:50,710 --> 00:08:54,320
항상 승리할 수 있다는 사실을 반영한 것입니다.

179
00:08:55,020 --> 00:08:58,140
반면에 0,1,0에서 시작했다고 가정해 보겠습니다.

180
00:08:58,140 --> 00:09:02,258
이 경우 동전 0을 뒤집어도 합이 바뀌지 않으므로 

181
00:09:02,258 --> 00:09:04,906
다른 녹색 모서리로 이동하지만, 

182
00:09:04,906 --> 00:09:08,877
동전 1이나 동전 2를 뒤집으면 빨간색 모서리로 

183
00:09:08,877 --> 00:09:09,760
이동합니다.

184
00:09:10,340 --> 00:09:12,480
파란색 구석으로 이동할 수 있는 방법은 없습니다.

185
00:09:14,440 --> 00:09:18,265
기본적으로 동전 1을 꺼서 1을 빼거나 동전 

186
00:09:18,265 --> 00:09:21,631
2를 켜서 2를 더하는 옵션이 있으며, 

187
00:09:21,631 --> 00:09:25,762
모드 3을 사용하는 경우 실제로는 둘 다 동일한 

188
00:09:25,762 --> 00:09:26,680
작업입니다.

189
00:09:27,340 --> 00:09:28,957
하지만 합계를 2로 변경할 수 

190
00:09:28,957 --> 00:09:30,480
있는 방법이 없다는 뜻입니다.

191
00:09:31,040 --> 00:09:33,446
여러분의 전략을 알고 있는 적 교도관은 

192
00:09:33,446 --> 00:09:35,852
이 구성으로 시작하여 사각형 2 아래에 

193
00:09:35,852 --> 00:09:38,040
키를 넣고 완료라고 할 수 있습니다.

194
00:09:39,980 --> 00:09:42,630
그러나 합계 모드 3 또는 이와 유사한 것에 

195
00:09:42,630 --> 00:09:45,068
대해 생각하지 않더라도 구현 세부 사항이 

196
00:09:45,068 --> 00:09:47,824
무엇이든 상관없이 동일한 색상의 두 이웃이있는 

197
00:09:47,824 --> 00:09:50,580
모서리로 표시되는 그림에서이를 볼 수 있습니다.

198
00:09:51,420 --> 00:09:54,203
가능한 모든 전략을 한눈에 파악하지 못하면 

199
00:09:54,203 --> 00:09:56,986
특정 전략이 효과가 없다는 것을 알게 되면 

200
00:09:56,986 --> 00:09:59,769
'내가 아직 생각하지 못한 교묘하고 영리한 

201
00:09:59,769 --> 00:10:02,900
전략이 있을지도 모르겠다'는 생각이 들게 됩니다.

202
00:10:03,300 --> 00:10:05,574
하지만 큐브의 색에 대해 생각하다 보면 

203
00:10:05,574 --> 00:10:08,160
자연스럽게 흥미로운 조합 질문으로 이어집니다.

204
00:10:08,760 --> 00:10:12,510
주어진 정점의 세 이웃이 항상 빨강, 초록, 

205
00:10:12,510 --> 00:10:16,560
파랑을 나타내도록 칠할 수 있는 방법이 있을까요?

206
00:10:19,240 --> 00:10:21,426
체스판과 동전이 있는 퍼즐에서 큐브의 

207
00:10:21,426 --> 00:10:23,925
모서리를 그리는 것에 대해 이야기하는 것이 

208
00:10:23,925 --> 00:10:26,008
기이하고 복잡해 보일 수도 있지만, 

209
00:10:26,008 --> 00:10:28,820
사실 이것은 생각보다 훨씬 자연스러운 단계입니다.

210
00:10:29,280 --> 00:10:31,685
저는 이 퍼즐에 대해 많은 사람들과 이야기를 

211
00:10:31,685 --> 00:10:34,380
나눴는데, 제가 좋아하는 점은 숙련된 문제 해결사 

212
00:10:34,380 --> 00:10:36,882
중 많은 사람들이 마치 이 퍼즐에 대한 일종의 

213
00:10:36,882 --> 00:10:39,480
사실상의 언어인 것처럼 누가 시키지 않아도 바로 

214
00:10:39,480 --> 00:10:42,078
큐브의 모서리를 색칠하는 것에 대해 이야기한다는 

215
00:10:42,078 --> 00:10:42,560
점입니다.

216
00:10:43,200 --> 00:10:44,040
그리고 실제로 그렇습니다.

217
00:10:44,340 --> 00:10:48,137
이진 문자열을 고차원 큐브의 꼭지점으로 생각하고 비트 

218
00:10:48,137 --> 00:10:51,682
플립이 가장자리에 해당한다고 생각하면 앞서 언급한 

219
00:10:51,682 --> 00:10:55,480
오류 수정과 같은 코딩 이론에서 특히 많이 등장합니다.

220
00:10:56,160 --> 00:10:58,309
또한 수학자들이 사물을 별개의 집합으로 

221
00:10:58,309 --> 00:11:00,557
분할하는 것을 설명하는 방법으로 색칠하는 

222
00:11:00,557 --> 00:11:03,000
것에 대해 이야기하는 것을 자주 듣게 됩니다.

223
00:11:03,920 --> 00:11:07,672
예를 들어, 그램 상수라는 엄청나게 큰 숫자에 대해 

224
00:11:07,672 --> 00:11:11,424
들어본 적이 있다면, 이 문제가 나온 문제도 고차원 

225
00:11:11,424 --> 00:11:14,530
큐브에 색을 할당하는 문제로 출제되었지만, 

226
00:11:14,530 --> 00:11:17,894
이 경우에는 개별 정점이 아닌 정점 쌍에 색이 

227
00:11:17,894 --> 00:11:18,800
주어졌습니다.

228
00:11:18,800 --> 00:11:21,742
요점은 고차원 큐브에 색을 입히는 방법을 분석하는 

229
00:11:21,742 --> 00:11:24,474
것은 생각보다 쉽게 전수할 수 있는 기술이라는 

230
00:11:24,474 --> 00:11:25,000
것입니다.

231
00:11:26,040 --> 00:11:28,630
그렇다면 모든 버텍스가 빨강, 초록, 

232
00:11:28,630 --> 00:11:31,220
파랑 이웃을 갖도록 만들 수 있을까요?

233
00:11:32,020 --> 00:11:36,173
주요 위치에 대한 인코딩이 있으면 원하는 위치에서 

234
00:11:36,173 --> 00:11:40,030
항상 한 번의 클릭으로 통신할 수 있다는 점을 

235
00:11:40,030 --> 00:11:40,920
기억하세요.

236
00:11:41,900 --> 00:11:43,293
동영상을 잠시 멈추고 지금 시도해 

237
00:11:43,293 --> 00:11:44,980
보시면 더 많은 것을 깨닫게 될 것입니다.

238
00:11:44,980 --> 00:11:47,960
스도쿠의 이상한 3차원 변형과 같습니다.

239
00:11:48,800 --> 00:11:51,778
특정 하위 집합이 가능한 세 가지 상태로 모두 

240
00:11:51,778 --> 00:11:55,100
채워지기를 원한다는 점에서 스도쿠와 매우 유사합니다.

241
00:11:55,900 --> 00:11:58,040
예를 들어 모서리 중 하나를 임의의 색상(예: 

242
00:11:58,040 --> 00:12:00,346
빨간색)으로 칠하는 것으로 시작하여 세 개의 이웃 

243
00:12:00,346 --> 00:12:02,652
모서리가 빨간색, 녹색, 파란색이어야 한다는 것을 

244
00:12:02,652 --> 00:12:05,040
알 수 있으며, 어떻게 칠하는지는 중요하지 않습니다.

245
00:12:05,560 --> 00:12:07,678
그런 다음 빨간색 이웃으로 이동하여 

246
00:12:07,678 --> 00:12:09,903
다른 두 개의 이웃은 녹색과 파란색이 

247
00:12:09,903 --> 00:12:12,340
필요하다고 말하면 이렇게 할 수 있습니다.

248
00:12:12,840 --> 00:12:15,612
하지만 적어도 제가 여기서 그린 방식으로는 다음 

249
00:12:15,612 --> 00:12:18,180
두 가지 색상을 올바르게 선택할 수 없습니다.

250
00:12:18,620 --> 00:12:19,280
그 이유를 알 수 있을까요?

251
00:12:20,220 --> 00:12:22,714
제가 공유하고자 하는 것은 이것이 3차원에서 

252
00:12:22,714 --> 00:12:25,009
절대 작동하지 않는 이유뿐만 아니라 2의 

253
00:12:25,009 --> 00:12:27,305
거듭제곱이 아닌 어떤 차원에서도 작동하지 

254
00:12:27,305 --> 00:12:29,700
않는 이유를 설명하는 멋진 작은 논증입니다.

255
00:12:30,500 --> 00:12:33,934
우리가 살펴보고 있는 속성의 대칭은 결국 빨간색, 

256
00:12:33,934 --> 00:12:36,755
녹색, 파란색 정점의 수가 같아야 한다는 

257
00:12:36,755 --> 00:12:39,576
것을 의미하지만, 이는 각각 3분의 8이 

258
00:12:39,576 --> 00:12:42,520
있어야 한다는 것을 의미하므로 불가능합니다.

259
00:12:43,440 --> 00:12:45,908
계속하기 전에 잠시 멈춰서 그 직관을 확고히 

260
00:12:45,908 --> 00:12:48,180
할 수 있는 방법이 있는지 생각해 보세요.

261
00:12:48,800 --> 00:12:50,658
막연한 직감을 확실한 증거로 

262
00:12:50,658 --> 00:12:52,400
바꾸는 재미있는 연습입니다.

263
00:12:56,080 --> 00:12:56,620
자, 준비됐나요?

264
00:12:57,440 --> 00:13:00,034
이를 수행하는 한 가지 방법은 각 모서리를 

265
00:13:00,034 --> 00:13:02,845
살펴보고 그 이웃 중 몇 개가 특정 색상(예: 

266
00:13:02,845 --> 00:13:05,440
빨간색)인지 세는 과정을 상상하는 것입니다.

267
00:13:06,620 --> 00:13:10,350
따라서 여기서 각 단계마다 주어진 정점의 이웃 세 

268
00:13:10,350 --> 00:13:14,080
개를 살펴보고 빨간색 정점을 세어 총합에 더합니다.

269
00:13:17,160 --> 00:13:20,229
이 특정 색상의 경우 그 수는 12로 나왔지만 

270
00:13:20,229 --> 00:13:23,416
원하는 속성이 있으면 모든 구석에 정확히 하나의 

271
00:13:23,416 --> 00:13:26,840
빨간색 이웃이 있으므로 그 수는 8이 되어야 합니다.

272
00:13:27,580 --> 00:13:31,659
반면에 모든 빨간색 모서리는 누군가의 이웃인 경우 

273
00:13:31,659 --> 00:13:35,446
한 번씩 정확히 세 번 계산되므로 최종 집계는 

274
00:13:35,446 --> 00:13:39,380
전체 빨간색 모서리 수의 세 배가 되어야 합니다.

275
00:13:40,420 --> 00:13:43,780
모서리의 3분의 8이 빨간색인 색상을 찾으면 됩니다.

276
00:13:44,940 --> 00:13:45,540
멋지지 않나요?

277
00:13:46,000 --> 00:13:48,769
어떤 모서리에 빨간색 이웃이 몇 번 있는지 세는 

278
00:13:48,769 --> 00:13:51,642
것은 빨간색 모서리에 빨간색 이웃이 몇 번 있는지 

279
00:13:51,642 --> 00:13:54,720
세는 것과 같으며, 이는 모순을 일으키기에 충분합니다.

280
00:13:56,260 --> 00:13:58,334
또한 이 인수는 즉시 더 높은 차원으로 

281
00:13:58,334 --> 00:14:00,220
일반화할 수 있다는 점도 장점입니다.

282
00:14:00,800 --> 00:14:02,622
n개의 사각형으로 체스판 퍼즐을 

283
00:14:02,622 --> 00:14:04,040
푸는 것을 생각해 보세요.

284
00:14:04,880 --> 00:14:08,853
다시 말하지만, 퍼즐은 동전의 각 배열을 어떤 상태, 

285
00:14:08,853 --> 00:14:11,900
열쇠의 가능한 위치와 연관시키는 것입니다.

286
00:14:12,600 --> 00:14:15,679
그리고 목표는 동전을 한 번 던져 얻을 수 있는 

287
00:14:15,679 --> 00:14:18,644
배열이 가능한 모든 상태, 즉 교도관이 열쇠를 

288
00:14:18,644 --> 00:14:21,609
숨겼을 수 있는 모든 장소를 나타내도록 만드는 

289
00:14:21,609 --> 00:14:22,180
것입니다.

290
00:14:23,300 --> 00:14:26,028
대부분의 고차원 큐브를 시각화할 수 없더라도 

291
00:14:26,028 --> 00:14:28,647
기본적으로 비트스트링과 한 비트플립 떨어진 

292
00:14:28,647 --> 00:14:31,376
비트스트링을 설명하는 방법으로 이러한 큐브의 

293
00:14:31,376 --> 00:14:34,214
정점과 그 이웃과 같은 것에 대해 이야기할 수 

294
00:14:34,214 --> 00:14:34,760
있습니다.

295
00:14:35,720 --> 00:14:38,180
실제로 알아야 할 관련 사실은 두 가지뿐입니다.

296
00:14:38,380 --> 00:14:41,596
이러한 정점 중 하나에 서 있는 경우, 

297
00:14:41,596 --> 00:14:44,082
n개의 별개의 이웃이 있으며, 

298
00:14:44,082 --> 00:14:47,445
총 정점 수는 길이 n의 비트 문자열마다 

299
00:14:47,445 --> 00:14:49,200
하나씩 n에 2입니다.

300
00:14:50,340 --> 00:14:51,840
여기에서 우리가 했던 것과 동일한 

301
00:14:51,840 --> 00:14:53,420
게임을 3차원으로 즐길 수 있습니다.

302
00:14:53,420 --> 00:14:55,348
각 모서리를 살펴보고 빨간색 이웃이 

303
00:14:55,348 --> 00:14:57,180
몇 개 있는지 세어볼 수 있습니다.

304
00:14:57,840 --> 00:14:59,802
원하는 색을 칠할 수 있다면, 

305
00:14:59,802 --> 00:15:02,456
이 합은 각 버텍스마다 하나씩 n에 2가 

306
00:15:02,456 --> 00:15:03,380
되어야 합니다.

307
00:15:04,220 --> 00:15:06,881
반면에 각 빨간색 모서리는 이웃 

308
00:15:06,881 --> 00:15:09,691
모서리마다 한 번씩 계산되므로 총 

309
00:15:09,691 --> 00:15:13,240
빨간색 모서리 수의 n배를 계산해야 합니다.

310
00:15:14,220 --> 00:15:17,586
왼쪽이 2의 거듭제곱이므로 오른쪽도 2의 

311
00:15:17,586 --> 00:15:20,806
거듭제곱이어야 하는데, 이는 n 자체가 

312
00:15:20,806 --> 00:15:23,880
2의 작은 거듭제곱일 때만 가능합니다.

313
00:15:24,900 --> 00:15:27,591
예를 들어 우리가 4차원 또는 

314
00:15:27,591 --> 00:15:30,600
64차원에 있다면 모순이 없습니다.

315
00:15:31,060 --> 00:15:33,045
최소한 정점을 다른 색상으로 

316
00:15:33,045 --> 00:15:35,280
균등하게 나누는 것이 가능합니다.

317
00:15:36,000 --> 00:15:38,336
명확히 말씀드리자면, 이는 2가지 경우에 대한 

318
00:15:38,336 --> 00:15:41,033
해결책이 반드시 있다고 말하는 것과는 다른 의미이며, 

319
00:15:41,033 --> 00:15:43,640
아직 그 가능성을 배제할 수 없다는 의미일 뿐입니다.

320
00:15:45,580 --> 00:15:47,880
저에게는 정말 반가운 일입니다.

321
00:15:48,160 --> 00:15:51,433
큐브의 모서리에 색을 칠하고 그 수를 세는 것을 

322
00:15:51,433 --> 00:15:55,071
상상해 보면, 사각형의 수가 2의 거듭제곱이 아니라면 

323
00:15:55,071 --> 00:15:58,345
아무리 영리한 전략이라도 이 체스판 퍼즐의 모든 

324
00:15:58,345 --> 00:16:01,740
경우에 적용될 수 없다는 결론을 내릴 수 있습니다.

325
00:16:02,640 --> 00:16:04,680
따라서 사각형 몇 개를 떼어내거나 

326
00:16:04,680 --> 00:16:07,579
보드의 크기를 줄이면 작업이 쉬워질 것 같지만, 

327
00:16:07,579 --> 00:16:09,620
실제로는 작업이 절망적으로 됩니다.

328
00:16:10,120 --> 00:16:14,173
또한 잠시 후에 소개할 이 퍼즐의 해답은 대부분의 

329
00:16:14,173 --> 00:16:18,081
차원에서는 허용되지 않는 방식으로 고차원 큐브의 

330
00:16:18,081 --> 00:16:22,280
모서리를 대칭적으로 채색하는 것으로 볼 수 있습니다.

331
00:16:23,180 --> 00:16:25,411
궁금하신 분들을 위해 4차원 정육면체를 

332
00:16:25,411 --> 00:16:27,440
직접 보여드리지 않을 수 없었습니다.

333
00:16:28,200 --> 00:16:31,652
따라서 3차원 정육면체를 약간의 원근법을 사용하여 

334
00:16:31,652 --> 00:16:34,734
2차원으로 축소하면 정점과 가장자리가 어떻게 

335
00:16:34,734 --> 00:16:37,940
연결되어 있는지 동일한 그래프 구조를 얻을 수 

336
00:16:37,940 --> 00:16:41,268
있는 것과 마찬가지로, 4차원 정육면체를 3차원 

337
00:16:41,268 --> 00:16:44,474
공간에 투영해도 모든 정점과 가장자리가 어떻게 

338
00:16:44,474 --> 00:16:47,680
연결되어 있는지를 완벽하게 파악할 수 있습니다.

339
00:16:48,560 --> 00:16:51,866
스도쿠의 사촌인 이상한 4차원 스도쿠를 

340
00:16:51,866 --> 00:16:55,173
해보고 싶다면, 지금 잠시 멈추고 어떤 

341
00:16:55,173 --> 00:16:58,781
정점의 이웃 4개가 각각 다른 4개의 색을 

342
00:16:58,781 --> 00:17:03,140
모두 나타내도록 색을 칠하는 방법을 알아내면 됩니다.

343
00:17:05,880 --> 00:17:08,542
4각형 케이스의 체스판 퍼즐을 푸는 것과 

344
00:17:08,542 --> 00:17:11,321
본질적으로 동일한 계산을 사용하여 컴퓨터가 

345
00:17:11,321 --> 00:17:14,099
이를 명시적으로 도출하도록 할 수 있습니다.

346
00:17:21,280 --> 00:17:24,248
이 시점에서 실제 해결책이 무엇인지 알고 싶으시다면, 

347
00:17:24,248 --> 00:17:26,524
매트와 제가 어떻게 작동하는지 보여드리는 

348
00:17:26,524 --> 00:17:28,800
스탠드업 수학으로 이동해 보시기 바랍니다.

349
00:17:28,800 --> 00:17:32,376
아직 스탠드업 수학을 잘 모르시는 분이 계시다면, 

350
00:17:32,376 --> 00:17:35,569
제가 가장 좋아하는 사람이 운영하는 채널 중 

351
00:17:35,569 --> 00:17:38,380
하나이니 방문하시면 바로 구독해 주세요.

352
00:17:38,860 --> 00:17:40,463
장담하건대, 그가 제공하는 모든 것을 통해 

353
00:17:40,463 --> 00:17:42,000
꽤 많은 즐거움을 느낄 수 있을 것입니다.

354
00:17:43,000 --> 00:17:46,573
설명하기 전에 저와 함께 실제로 솔루션을 실행하는 

355
00:17:46,573 --> 00:17:50,020
모습을 보여드리고, 설명하기 전에 여러분이 직접 

356
00:17:50,020 --> 00:17:53,594
솔루션을 생각해보고 어떤 모습일지 예측해 보셨으면 

357
00:17:53,594 --> 00:17:54,360
좋겠습니다.

358
00:17:55,100 --> 00:17:57,445
해밍 코드 및 오류 수정과의 연관성에 대해 

359
00:17:57,445 --> 00:17:59,596
궁금하신 점이 있다면 댓글로 알려주시면 

360
00:17:59,596 --> 00:18:02,040
이에 대한 동영상을 제작해 드릴 수 있습니다.

361
00:18:02,440 --> 00:18:04,598
퍼즐에 대한 동기 부여에 관한 한, 

362
00:18:04,598 --> 00:18:06,865
저만큼 64차원 정육면체를 대칭적으로 

363
00:18:06,865 --> 00:18:09,780
그리는 데 관심이 있는 사람은 없다고 들었습니다.

364
00:18:09,980 --> 00:18:11,320
하지만 안정적인 데이터 전송?

365
00:18:11,760 --> 00:18:12,692
우리 모두는 그것이 보편적으로 

366
00:18:12,692 --> 00:18:13,900
섹시하다는 데 동의할 수 있을 것입니다.

