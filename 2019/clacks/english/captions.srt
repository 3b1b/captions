1
00:00:00,000 --> 00:00:08,200
Sometimes, math and physics conspire in ways that just feel too good to be true.

2
00:00:08,200 --> 00:00:10,800
Let's play a strange sort of mathematical croquet.

3
00:00:10,800 --> 00:00:14,080
We're going to have two sliding blocks and a wall.

4
00:00:14,080 --> 00:00:17,940
The first block starts by coming in at some velocity from the right, while the second

5
00:00:17,940 --> 00:00:20,120
one starts out stationary.

6
00:00:20,120 --> 00:00:23,880
Being overly idealistic physicists, let's assume there's no friction and all of the

7
00:00:23,880 --> 00:00:28,560
collisions are perfectly elastic, which means no energy is lost.

8
00:00:28,560 --> 00:00:32,800
The astute among you might complain that such collisions would make no sound, but your goal

9
00:00:32,800 --> 00:00:36,200
here is to count how many collisions take place.

10
00:00:36,200 --> 00:00:39,960
So in slight conflict with that assumption, I want to leave a little clack sound to better

11
00:00:39,960 --> 00:00:42,300
draw your attention to that count.

12
00:00:42,300 --> 00:00:45,440
The simplest case is when both blocks have the same mass.

13
00:00:45,440 --> 00:00:50,040
The first block hits the second, transferring all of its momentum, then the second one bounces

14
00:00:50,040 --> 00:00:54,360
off the wall, and then transfers all of its momentum back to the first, which then sails

15
00:00:54,360 --> 00:00:55,920
off towards infinity.

16
00:00:55,920 --> 00:00:57,660
Three total clacks.

17
00:00:57,660 --> 00:01:01,420
What about if the first block was 100 times the mass of the second one?

18
00:01:01,420 --> 00:01:05,980
I promise I will explain to you all the relevant physics in due course, it's not entirely

19
00:01:05,980 --> 00:01:09,540
obvious how you would predict the dynamics here, but in the spirit of getting to the

20
00:01:09,540 --> 00:01:11,920
punchline, let's watch what happens.

21
00:01:11,920 --> 00:01:15,540
The second one will keep bouncing back and forth between the wall and the first block,

22
00:01:15,540 --> 00:01:20,780
100 times its mass, like a satisfying game of Breakout, slowly and discreetly redirecting

23
00:01:20,780 --> 00:01:24,740
that first block's momentum to point in the opposite direction.

24
00:01:24,740 --> 00:01:29,520
In total, there will be 31 collisions before each block is sliding off towards infinity,

25
00:01:29,520 --> 00:01:31,700
never to be touched again.

26
00:01:31,700 --> 00:01:35,900
What if the first block was 10,000 times the mass of the second one?

27
00:01:35,900 --> 00:01:40,060
In that case, there would be quite a few more clacks, all happening very rapidly at one

28
00:01:40,060 --> 00:01:48,500
point, adding up to 313 total collisions.

29
00:01:48,500 --> 00:01:54,980
Well, hang on, wait for it…wait for it…

30
00:01:54,980 --> 00:01:59,340
Okay, 314 clacks.

31
00:01:59,340 --> 00:02:03,580
If the first block was 1,000,000 times the mass of the other, then again, with all of

32
00:02:03,580 --> 00:02:08,780
our crazy idealistic conditions, almost all of the clacks happen in one big burst, this

33
00:02:08,780 --> 00:02:13,780
time resulting in a total of 3,141 collisions.

34
00:02:13,780 --> 00:02:17,580
Perhaps you see the pattern here, though it's forgivable if you don't, since it defies

35
00:02:17,580 --> 00:02:18,580
all expectation.

36
00:02:18,580 --> 00:02:23,820
When the mass of that first block is some power of 100 times the mass of the second,

37
00:02:23,820 --> 00:02:28,360
the total number of collisions have the same digits as pi.

38
00:02:28,360 --> 00:02:31,620
This absolutely blew my mind when it was first shared with me.

39
00:02:31,620 --> 00:02:35,940
Credit to the viewer Henry Cavill for introducing me to this fact, which was originally discovered

40
00:02:35,940 --> 00:02:42,020
by the mathematician Gregory Galperin in 1995 and published in 2003.

41
00:02:42,020 --> 00:02:46,140
Part of what I love about this is that if ever there were Olympic Games for algorithms

42
00:02:46,140 --> 00:02:51,380
that compute pi, this one would have to win medals both for being the most elegant, and

43
00:02:51,380 --> 00:02:53,500
for being the most comically inefficient.

44
00:02:53,500 --> 00:02:56,620
I mean, think about the actual algorithm here.

45
00:02:56,620 --> 00:02:59,080
Step 1, implement a physics engine.

46
00:02:59,080 --> 00:03:03,780
Step 2, choose the number of digits d of pi you'd like to compute.

47
00:03:03,780 --> 00:03:09,820
Step 3, set the mass of one of the blocks to be 100 to the power d-1, then send it travelling

48
00:03:09,820 --> 00:03:13,060
on a frictionless surface towards a block of mass 1.

49
00:03:13,060 --> 00:03:16,820
Step 4, count all collisions.

50
00:03:16,820 --> 00:03:22,340
For example, to calculate only 20 digits of pi, which fits so cleanly on this screen,

51
00:03:22,340 --> 00:03:27,260
one block would have to have 100 billion billion billion billion times the mass of the other,

52
00:03:27,260 --> 00:03:31,980
which if that small block was 1 kilogram, means the big one has a mass about 10 times

53
00:03:31,980 --> 00:03:35,720
that of the supermassive black hole at the center of the Milky Way.

54
00:03:35,720 --> 00:03:39,380
That means you would need to count 31 billion billion collisions.

55
00:03:39,380 --> 00:03:43,780
At one point in this virtual process, the frequency of clacks would be around 100 billion

56
00:03:43,780 --> 00:03:45,940
billion billion billion clacks per second.

57
00:03:45,940 --> 00:03:50,940
So let's just say you would need very good numerical precision to get this working accurately,

58
00:03:50,940 --> 00:03:53,740
and it would take a very long time for the algorithm to complete.

59
00:03:53,740 --> 00:03:58,820
I'll emphasize again that this process is way over-idealized, quickly departing from

60
00:03:58,820 --> 00:04:01,820
anything that could possibly happen in real physics.

61
00:04:01,820 --> 00:04:06,380
But of course, you all know this is not interesting because of its potential as an actual pi computing

62
00:04:06,380 --> 00:04:08,940
algorithm, or as a pragmatic physics demonstration.

63
00:04:08,940 --> 00:04:15,140
It's mind-boggling because why on earth would pi show up here?

64
00:04:15,140 --> 00:04:17,540
And it's in such a weird way too.

65
00:04:17,540 --> 00:04:22,300
Its decimal digits are counting something, but usually pi shows up when its precise value

66
00:04:22,300 --> 00:04:24,820
is describing something continuous.

67
00:04:24,820 --> 00:04:26,700
I will show you why this is true.

68
00:04:26,700 --> 00:04:30,240
Where there is pi, there is a hidden circle, and in this case, that hidden circle comes

69
00:04:30,240 --> 00:04:32,420
from the conservation of energy.

70
00:04:32,420 --> 00:04:36,340
In fact, you're going to see two separate methods, which are each as stunning and surprising

71
00:04:36,340 --> 00:04:38,100
as the fact itself.

72
00:04:38,100 --> 00:04:41,600
Delaying gratification though, I will make you wait until the next video to see what's

73
00:04:41,600 --> 00:04:42,660
going on.

74
00:04:42,660 --> 00:04:47,120
In the meantime, I highly encourage you to take a stab at it yourself, and be social

75
00:04:47,120 --> 00:04:48,120
about it.

76
00:04:48,120 --> 00:04:51,660
It's a hard puzzle, so it never hurts to recruit some other smart minds to the task.

77
00:05:02,420 --> 00:05:03,420
Thanks for watching.

78
00:05:03,420 --> 00:05:04,420
I'll see you next time.

79
00:05:04,420 --> 00:05:04,440
Bye.

