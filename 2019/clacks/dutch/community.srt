1
00:00:04,080 --> 00:00:08,090
Soms komen wiskunde en natuurkunde samen op manieren die te mooi om waar te lijken zijn.

2
00:00:08,090 --> 00:00:10,880
Laten we een soort van spelletje Croquet spelen.

3
00:00:10,880 --> 00:00:14,090
We hebben twee bewegende blokjes en een muur.

4
00:00:14,090 --> 00:00:18,230
Het eerste blokje komt van rechts glijden, terwijl de ander

5
00:00:18,230 --> 00:00:20,140
stilstaand begint.

6
00:00:20,140 --> 00:00:23,661
Even overdreven idealistisch, laten we uitgaan dat er geen wrijving is en dat

7
00:00:23,661 --> 00:00:28,570
alle botsingen elastisch zijn, wat betekent dat er geen energie verloren gaat.

8
00:00:28,570 --> 00:00:32,619
Misschien zitten sommigen van jullie te denken dat deze botsingen geen geluid maken, maar je

9
00:00:32,619 --> 00:00:38,120
doel is om te tellen hoeveel botsingen plaatsvinden, dus in een klein conflict met de aannames

10
00:00:38,120 --> 00:00:41,940
wil ik een kort "klik"-geluidje laten horen om beter je aandacht te trekken bij dat tellen.

11
00:00:41,940 --> 00:00:45,440
Het makkelijkste geval is als allebei de blokken hetzelfde wegen.

12
00:00:45,440 --> 00:00:48,540
Het eerste blok raakt het tweede, wat dan al zijn stuwkracht doorgeeft,

13
00:00:48,540 --> 00:00:52,800
dan botst het tweede blok tegen de muur, glijdt terug en geeft dan al zijn stuwkracht weer door

14
00:00:52,800 --> 00:00:55,760
aan het eerste blok, die dan afzeilt naar het oneindige.

15
00:00:55,760 --> 00:00:57,660
3 botsingen in totaal.

16
00:00:57,660 --> 00:01:01,449
Wat als het eerste blok 100 keer zoveel woog als het tweede?

17
00:01:01,449 --> 00:01:05,970
Ik beloof dat ik alle relevante fysica een keer uitleg, het is niet helemaal

18
00:01:05,970 --> 00:01:09,970
voor de hand liggend hoe je de dynamica voorspelt, maar in het concept van naar het resultaat gaan,

19
00:01:09,970 --> 00:01:11,570
laten we gewoon kijken wat er gebeurt.

20
00:01:11,570 --> 00:01:16,070
Het tweede blok blijft heen en weer botsen tussen de muur en het andere blok,

21
00:01:16,070 --> 00:01:20,960
als een rustgevend spelletje Breakout, en is langzaam maar zeker

22
00:01:20,960 --> 00:01:24,720
de stuwkracht van het zware blok aan het ombuigen om hem de andere kant op te laten gaan.

23
00:01:24,720 --> 00:01:29,630
Er zullen 31 botsingen plaatsvinden voor de blokken afzeilen naar het oneindige, die elkaar nooit

24
00:01:29,630 --> 00:01:31,680
meer zullen raken.

25
00:01:31,680 --> 00:01:35,890
Wat als het eerste blok 10.000 keer zo zwaar was als het eerste blok?

26
00:01:35,890 --> 00:01:45,000
In dat geval zouden er een heleboel meer botsingen plaatsvinden, allemaal heel snel op één bepaald punt,

27
00:01:45,000 --> 00:01:48,580
maakt 313 botsingen.

28
00:01:48,580 --> 00:01:59,320
Nou ja, wacht eventjes... nog heel eventjes... Oke, 314 botsingen.

29
00:01:59,320 --> 00:02:04,900
Als het eerste blok 1.000.000 keer zoveel woog als het tweede, met al onze idealistische

30
00:02:04,900 --> 00:02:10,440
omstandigheden, bijna alle botsingen vinden plaats in één grote knal, dat deze keer

31
00:02:10,440 --> 00:02:13,760
3.141 botsingen oplevert.

32
00:02:13,760 --> 00:02:17,560
Misschien zie je het patroon al, hoewel het niet erg is als je het niet ziet, omdat

33
00:02:17,560 --> 00:02:19,000
allemaal draait om verwachtingen.

34
00:02:19,000 --> 00:02:23,800
Als het gewicht van het eerste blok een macht van 100 keer het gewicht van het andere is,

35
00:02:23,800 --> 00:02:28,350
dan is het aantal botsingen hetzelfde als de eerste decimalen van pi.

36
00:02:28,350 --> 00:02:31,560
Dit blies me helemaal van mijn sokken toen het met mij werd gedeeld.

37
00:02:31,560 --> 00:02:36,500
Credits naar Henry Kavle voor het laten zien van dit, wat oorspronkelijk was ontdekt door de wiskundige

38
00:02:36,500 --> 00:02:41,930
Gregory Galperin in 1995, wat werd gepubliceerd in 2003.

39
00:02:41,930 --> 00:02:46,740
Een ding dat ik hier leuk aan vind, is dat als er ooit een Olympische Spelen zou zijn voor een algoritme dat pi

40
00:02:46,740 --> 00:02:51,630
uitrekent, dan zou deze gouden medailles zou moeten winnen voor elegantie, én

41
00:02:51,630 --> 00:02:53,470
voor het meest onefficient...

42
00:02:53,470 --> 00:02:56,490
Ik bedoel, kijk maar naar het algoritme:

43
00:02:56,490 --> 00:02:58,950
Stap 1: Implementeer een fysicamachine.

44
00:02:58,950 --> 00:03:03,660
Stap 2: Kies het aantal decimalen van pi (d) wat je wilt uitrekenen.

45
00:03:03,660 --> 00:03:10,470
Stap 3: Maak het gewicht van één blok 100 tot de macht {d - 1}, en laat het over een wrijvingloze grond

46
00:03:10,470 --> 00:03:13,130
naar een blok met gewicht 1.

47
00:03:13,130 --> 00:03:16,170
Stap 4: Tel het aantal botsingen.

48
00:03:16,170 --> 00:03:22,340
Dus als voorbeeld, om 20 decimalen van pi uit te rekenen, wat mooi past op het scherm,

49
00:03:22,340 --> 00:03:26,240
het ene blok zou 100 miljard miljard miljard miljard miljard keer zoveel moeten wegen als

50
00:03:26,240 --> 00:03:32,070
het andere, wat betekent dat als het lichte blok 1 kilo zou wegen, het zware blok 10 keer

51
00:03:32,070 --> 00:03:35,710
het gewicht van Sagittarius A, het zwarte gat in het midden van de melkweg.

52
00:03:35,710 --> 00:03:39,849
Dat zou betekenen dat je zo'n 31 miljard miljard botsingen, een op een gegeven moment,

53
00:03:39,849 --> 00:03:44,599
het aantal botsingen zou zo'n 100 miljard miljard miljard botsingen

54
00:03:44,599 --> 00:03:45,870
per SECONDE moeten zijn.

55
00:03:45,870 --> 00:03:49,990
Dus laten we zeggen dat je héél goede precisie moet hebben om dit goed te laten werken,

56
00:03:49,990 --> 00:03:53,630
en de uitvoering zou heel lang duren!

57
00:03:53,630 --> 00:03:58,830
Ik zal nog even benadrukken dat dit véél te idealistisch is, het is veel verder dan

58
00:03:58,830 --> 00:04:01,170
alles wat zou kunnen worden uitgevoerd in het echt.

59
00:04:01,170 --> 00:04:06,819
Maar het is natuurlijk niet interessant door zijn potentie als een algoritme dat pi zou kunnen uitrekenen,

60
00:04:06,819 --> 00:04:08,970
of als een demonstratie van fysica.

61
00:04:08,970 --> 00:04:15,140
Het is verbijsterend, want: waarom de rijstepap zouden de decimalen van pi hier verschijnen!

62
00:04:15,140 --> 00:04:19,810
En het is ook zo'n rare manier voor pi óm te verschijnen, want zijn decimalen zijn iets aan het tellen,

63
00:04:19,810 --> 00:04:24,800
waar normaal zijn precieze waarde iets continu's beschrijft.

64
00:04:24,800 --> 00:04:26,689
Ik zal je laten zien hoe dit waar is.

65
00:04:26,689 --> 00:04:30,220
Waar pi is, is ook een geheime cirkel, en in dit geval komt hij van

66
00:04:30,220 --> 00:04:31,930
het doorgeven van energie.

67
00:04:31,930 --> 00:04:36,581
Je ziet eigenlijk twee aparte methode's die elk zo bijzonder zijn als het

68
00:04:36,581 --> 00:04:38,039
hele verhaal.

69
00:04:38,039 --> 00:04:41,599
Uitstel van voldoening echter, zal ik je in de volgende video laten zien wat er

70
00:04:41,599 --> 00:04:42,629
gebeurt.

71
00:04:42,629 --> 00:04:46,469
In de tussentijd moedig je aan om er zelf over na te denken,

72
00:04:46,469 --> 00:04:47,740
en misschien met anderen!

73
00:04:47,740 --> 00:04:52,000
Het is een moeilijke puzzel, dus het maakt niet uit om anderen erbij te werven.

74
00:04:52,000 --> 00:04:53,360
-=X=- Vertaling door GijsjeVids -=X=-

