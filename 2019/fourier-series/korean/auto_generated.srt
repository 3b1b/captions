1
00:00:05,119 --> 00:00:07,072
여기서 우리는 이와 같은 애니메이션, 

2
00:00:07,072 --> 00:00:09,770
즉 복잡한 푸리에 급수라고 알려진 애니메이션 이면의 

3
00:00:09,770 --> 00:00:10,700
수학을 살펴봅니다.

4
00:00:11,240 --> 00:00:14,665
각각의 작은 벡터는 일정한 정수 주파수로 회전하며, 

5
00:00:14,665 --> 00:00:17,501
이를 끝에서 꼬리까지 함께 추가하면 시간이 

6
00:00:17,501 --> 00:00:20,100
지남에 따라 최종 끝이 모양을 그립니다.

7
00:00:21,220 --> 00:00:23,652
각 벡터의 초기 크기와 각도를 조정함으로써 

8
00:00:23,652 --> 00:00:26,085
우리가 원하는 거의 모든 것을 그리도록 할 

9
00:00:26,085 --> 00:00:28,620
수 있으며 여기서는 그 방법을 살펴보겠습니다.

10
00:00:31,120 --> 00:00:32,677
모든 내용에 대해 자세히 알아보기 

11
00:00:32,677 --> 00:00:34,398
전에 잠시 시간을 내어 이것이 얼마나 

12
00:00:34,398 --> 00:00:36,120
놀라운지 잠시 생각해 보시기 바랍니다.

13
00:00:37,199 --> 00:00:39,485
이 특정 애니메이션에는 총 300개의 

14
00:00:39,485 --> 00:00:40,900
회전 화살표가 있습니다.

15
00:00:41,420 --> 00:00:43,326
가능하다면 전체 화면으로 이동하세요. 

16
00:00:43,326 --> 00:00:44,960
복잡함은 그만한 가치가 있습니다.

17
00:00:50,440 --> 00:00:53,100
각 개별 화살표의 동작은 아마도 여러분이 

18
00:00:53,100 --> 00:00:55,299
상상할 수 있는 가장 간단한 것, 

19
00:00:55,299 --> 00:00:57,960
즉 일정한 속도로 회전하는 것일 것입니다.

20
00:00:58,600 --> 00:01:01,878
그러나 모든 것을 합친 것의 집합은 결코 단순하지 

21
00:01:01,878 --> 00:01:05,274
않으며, 확대할 수록 놀라울 정도로 복잡한 복잡성은 

22
00:01:05,274 --> 00:01:08,786
더욱 선명하게 초점을 맞춰 가장 작고, 가장 빠르며, 

23
00:01:08,786 --> 00:01:11,480
완전히 열광적인 화살의 기여를 드러냅니다.

24
00:01:12,300 --> 00:01:15,288
당신이 보고 있는 혼란스러운 광란과 모든 움직임의 

25
00:01:15,288 --> 00:01:18,063
기초가 되는 시계 태엽의 경직성을 고려할 때, 

26
00:01:18,063 --> 00:01:20,945
떼가 매우 구체적인 형태를 추적하기 위해 일종의 

27
00:01:20,945 --> 00:01:23,400
조정을 통해 어떻게 행동하는지 기괴합니다.

28
00:01:23,839 --> 00:01:26,060
그리고 자연의 다른 곳에서 발견되는 많은 

29
00:01:26,060 --> 00:01:28,473
새로운 복잡성과는 달리 이것은 우리가 완전히 

30
00:01:28,473 --> 00:01:31,080
설명하고 제어할 수 있는 수학을 가지고 있습니다.

31
00:01:31,660 --> 00:01:35,186
시작 조건만 조정하면 이 떼가 올바른 방법으로 

32
00:01:35,186 --> 00:01:38,983
공모하여 원하는 것은 무엇이든 그릴 수 있습니다. 

33
00:01:38,983 --> 00:01:41,560
단, 작은 화살만 충분하면 됩니다.

34
00:01:42,180 --> 00:01:47,770
더 놀라운 점은 이 모든 것에 대한 궁극적인 

35
00:01:47,770 --> 00:01:53,360
공식이 믿을 수 없을 정도로 짧다는 것입니다.

36
00:01:53,360 --> 00:01:56,410
종종 푸리에 급수는 약간 다르게 보이는 것, 

37
00:01:56,410 --> 00:01:59,827
즉 실수의 함수가 사인파의 합으로 분해되는 것으로 

38
00:01:59,827 --> 00:02:00,560
설명됩니다.

39
00:02:01,260 --> 00:02:03,510
이는 우리가 앞으로 구축할 보다 일반적인 회전 

40
00:02:03,510 --> 00:02:05,500
벡터 현상의 특별한 경우로 밝혀졌습니다. 

41
00:02:05,500 --> 00:02:07,837
그러나 푸리에 자신이 시작한 곳이 바로 여기이며 

42
00:02:07,837 --> 00:02:10,001
우리가 그곳에서 이야기를 시작해야 할 타당한 

43
00:02:10,001 --> 00:02:10,780
이유도 있습니다.

44
00:02:11,420 --> 00:02:14,183
기술적으로 이것은 푸리에가 자신의 큰 아이디어를 

45
00:02:14,183 --> 00:02:16,843
개발할 때 작업했던 열 방정식에 대한 세 번째 

46
00:02:16,843 --> 00:02:17,560
비디오입니다.

47
00:02:18,200 --> 00:02:21,046
나는 여러분이 해당 장에서 나오는 것에 의존하지 않는 

48
00:02:21,046 --> 00:02:23,609
방식으로 푸리에 급수에 대해 가르치고 싶습니다. 

49
00:02:23,609 --> 00:02:26,266
그러나 원래 이 수학 부분에 동기를 부여한 물리학 

50
00:02:26,266 --> 00:02:28,923
문제에 대해 최소한 높은 수준의 아이디어가 있다면 

51
00:02:28,923 --> 00:02:31,770
푸리에 급수가 예상치 못하게 얼마나 광범위한지에 대한 

52
00:02:31,770 --> 00:02:32,340
표시입니다.

53
00:02:32,820 --> 00:02:35,850
여러분이 알아야 할 것은 막대의 온도 분포가 

54
00:02:35,850 --> 00:02:38,880
시간이 지남에 따라 어떻게 변하는지 알려주는 

55
00:02:38,880 --> 00:02:41,062
특정 방정식이 있다는 것입니다. 

56
00:02:41,062 --> 00:02:44,092
또한 이는 열과 관련 없는 다른 많은 현상도 

57
00:02:44,092 --> 00:02:44,820
설명합니다.

58
00:02:44,820 --> 00:02:48,203
임의의 열 분포에 어떤 일이 일어날지 파악하기 위해 

59
00:02:48,203 --> 00:02:51,003
이 방정식을 직접 사용하는 것은 어렵지만, 

60
00:02:51,003 --> 00:02:54,386
초기 함수가 우연히 코사인파처럼 보이고 각 끝점에서 

61
00:02:54,386 --> 00:02:57,536
평탄하도록 주파수가 조정된 경우 간단한 해결책이 

62
00:02:57,536 --> 00:02:58,120
있습니다.

63
00:02:58,560 --> 00:03:01,657
특히, 시간이 지남에 따라 발생하는 현상을 그래프로 

64
00:03:01,657 --> 00:03:04,541
표시하면 이러한 파동은 기하급수적으로 축소되고, 

65
00:03:04,541 --> 00:03:07,319
주파수가 높은 파동은 기하급수적으로 더 빠르게 

66
00:03:07,319 --> 00:03:07,960
감소합니다.

67
00:03:10,359 --> 00:03:14,701
열 방정식은 업계에서 선형 방정식으로 알려져 있습니다.

68
00:03:14,701 --> 00:03:17,884
 즉, 두 가지 해를 알고 이를 더하면 

69
00:03:17,884 --> 00:03:20,200
그 합이 새로운 해가 됩니다.

70
00:03:20,880 --> 00:03:23,227
상수에 따라 각각의 크기를 조정할 수도 있으며, 

71
00:03:23,227 --> 00:03:25,400
이를 통해 방정식을 푸는 사용자 정의 함수를 

72
00:03:25,400 --> 00:03:27,400
구성하기 위해 다이얼을 돌릴 수 있습니다.

73
00:03:29,240 --> 00:03:31,594
이는 직접 확인할 수 있는 매우 

74
00:03:31,594 --> 00:03:34,080
간단한 속성이지만 매우 중요합니다.

75
00:03:34,080 --> 00:03:37,071
이는 우리가 기하급수적으로 쇠퇴하는 코사인파와 

76
00:03:37,071 --> 00:03:39,833
같은 무한한 솔루션 계열을 선택하고 그 중 

77
00:03:39,833 --> 00:03:43,055
일부를 우리가 선택한 사용자 정의 상수로 확장하고 

78
00:03:43,055 --> 00:03:46,047
이를 결합하여 새로운 맞춤형 초기 조건에 대한 

79
00:03:46,047 --> 00:03:49,500
솔루션을 얻을 수 있음을 의미합니다. 코사인파의 조합.

80
00:03:50,200 --> 00:03:53,106
제가 주목하고 싶은 한 가지 중요한 점은 이러한 

81
00:03:53,106 --> 00:03:56,228
파동을 결합할 때 더 높은 주파수의 파동이 더 빨리 

82
00:03:56,228 --> 00:03:59,135
감쇠되기 때문에 구성한 합은 모든 고주파수 항이 

83
00:03:59,135 --> 00:04:02,257
빠르게 0으로 가면서 시간이 지남에 따라 평활해지는 

84
00:04:02,257 --> 00:04:05,380
경향이 있다는 것입니다. 저주파 용어가 지배적입니다.

85
00:04:06,100 --> 00:04:09,214
그래서 재미있는 방법으로, 열 방정식이 의미하는 

86
00:04:09,214 --> 00:04:12,444
이 열 분포 진화의 모든 복잡성은 서로 다른 순수 

87
00:04:12,444 --> 00:04:15,327
주파수 구성요소에 대한 감쇠율의 차이에 의해 

88
00:04:15,327 --> 00:04:16,019
포착됩니다.

89
00:04:18,040 --> 00:04:20,480
푸리에가 불멸성을 얻는 것은 바로 이 시점이다.

90
00:04:21,279 --> 00:04:23,579
이 단계의 대부분의 일반 사람들은 초기 

91
00:04:23,579 --> 00:04:25,983
분포가 파동이나 파동의 합처럼 보이면 열 

92
00:04:25,983 --> 00:04:28,282
방정식을 풀 수 있다고 말할 것입니다. 

93
00:04:28,282 --> 00:04:30,790
그러나 대부분의 실제 분포는 그렇지 않다는 

94
00:04:30,790 --> 00:04:32,672
것이 얼마나 안타까운 일입니까? 

95
00:04:32,672 --> 00:04:34,240
전혀 그렇게 보이지 않네요.

96
00:04:34,800 --> 00:04:37,524
예를 들어, 각각 균일한 온도를 유지하는 두 

97
00:04:37,524 --> 00:04:40,466
개의 막대를 모으고 두 막대가 접촉한 직후 어떤 

98
00:04:40,466 --> 00:04:43,300
일이 일어나는지 알고 싶다고 가정해 보겠습니다.

99
00:04:45,060 --> 00:04:48,499
숫자를 간단하게 하기 위해 왼쪽 막대의 온도가 1도, 

100
00:04:48,499 --> 00:04:51,708
오른쪽 막대의 온도가 -1도이고 결합된 두 막대의 

101
00:04:51,708 --> 00:04:54,460
전체 길이 L이 1이라고 가정해 보겠습니다.

102
00:04:54,460 --> 00:04:57,918
이것이 의미하는 바는 초기 온도 분포가 계단 

103
00:04:57,918 --> 00:05:01,516
함수라는 것입니다. 이는 사인파 또는 사인파의 

104
00:05:01,516 --> 00:05:04,560
합과는 명백히 다릅니다. 그렇지 않나요?

105
00:05:05,100 --> 00:05:07,228
내 말은, 그것은 물결 모양이 아닌 거의 

106
00:05:07,228 --> 00:05:09,820
완전히 평평하고, 심지어는 불연속적이라는 것입니다!

107
00:05:10,600 --> 00:05:13,700
그런데 푸리에는 터무니없는 질문을 하려고 생각했습니다.

108
00:05:14,300 --> 00:05:16,660
이것을 사인파의 합으로 어떻게 표현하나요?

109
00:05:17,120 --> 00:05:19,049
더욱 대담하게, 초기 분포를 

110
00:05:19,049 --> 00:05:21,340
사인파의 합으로 어떻게 표현합니까?

111
00:05:21,800 --> 00:05:23,760
그리고 그것은 그보다 더 제한적입니다.

112
00:05:24,120 --> 00:05:26,929
특정 경계 조건을 만족하는 파동을 추가하는 

113
00:05:26,929 --> 00:05:29,738
것으로 제한해야 하며, 지난 비디오에서 본 

114
00:05:29,738 --> 00:05:32,899
것처럼 이는 주파수가 모두 주어진 기본 주파수의 

115
00:05:32,899 --> 00:05:36,060
정수배인 코사인 함수로 작업하는 것을 의미합니다.

116
00:05:36,920 --> 00:05:39,932
그건 그렇고, 다른 경계 조건을 사용하여 작업하는 

117
00:05:39,932 --> 00:05:42,945
경우 끝점이 고정되어 있어야 한다고 가정하면 함께 

118
00:05:42,945 --> 00:05:45,957
결합할 수 있는 다른 파동 세트가 있을 것입니다. 

119
00:05:45,957 --> 00:05:48,540
이 경우 코사인 표현식을 사인으로 바꿉니다.

120
00:05:49,560 --> 00:05:51,351
수학의 발전이 단순히 오래된 질문에 

121
00:05:51,351 --> 00:05:53,321
답하기보다는 새로운 질문을 묻는 것처럼 

122
00:05:53,321 --> 00:05:55,560
보이는 경우가 얼마나 자주 있는지 이상합니다.

123
00:05:56,240 --> 00:05:59,484
푸리에는 이제 실제로 일종의 불멸성을 갖고 있습니다. 

124
00:05:59,484 --> 00:06:02,188
그의 이름은 기본적으로 기능과 패턴을 단순한 

125
00:06:02,188 --> 00:06:05,000
진동의 조합으로 분해한다는 개념과 동의어입니다.

126
00:06:05,700 --> 00:06:07,881
그 아이디어가 푸리에 자신이 상상할 수 

127
00:06:07,881 --> 00:06:10,361
있었던 것 이상으로 얼마나 중요하고 광범위한 

128
00:06:10,361 --> 00:06:12,940
것으로 판명되었는지 과장하기는 정말 어렵습니다.

129
00:06:13,599 --> 00:06:17,100
그러나 이 모든 것의 기원은 언뜻 보기에 주파수 

130
00:06:17,100 --> 00:06:20,600
및 진동과 아무 관련이 없는 물리학의 일부입니다.

131
00:06:21,280 --> 00:06:23,129
다른 것이 없다면, 이것은 푸리에 급수의 

132
00:06:23,129 --> 00:06:25,300
일반적인 적용 가능성에 대한 힌트를 줄 것입니다.

133
00:06:26,040 --> 00:06:28,386
잠깐만요, 여러분 중 일부가 여러분이 보여주고 

134
00:06:28,386 --> 00:06:30,733
있는 사인파의 합은 실제로 계단 함수가 아니며 

135
00:06:30,733 --> 00:06:33,080
모두 근사치일 뿐이라고 말하는 것을 들었습니다.

136
00:06:33,540 --> 00:06:37,310
그리고 사인파의 유한합은 상수 함수를 제외하고는 

137
00:06:37,310 --> 00:06:41,500
결코 완벽하게 평평하지 않으며 불연속적이지도 않습니다.

138
00:06:42,020 --> 00:06:43,548
그러나 푸리에는 무한한 합을 

139
00:06:43,548 --> 00:06:45,460
고려하여 더 광범위하게 생각했습니다.

140
00:06:46,240 --> 00:06:50,178
계단 함수의 경우 모든 홀수 주파수에 대해 

141
00:06:50,178 --> 00:06:54,117
계수가 1, 음의 1/3, 더하기 1/5, 

142
00:06:54,117 --> 00:06:58,220
빼기 7분의 1 등인 무한 합과 같은 것으로 

143
00:06:58,220 --> 00:07:02,980
나타났습니다. 4를 pi로 나누어 크기가 조정됩니다.

144
00:07:03,800 --> 00:07:05,960
잠시 후 그 숫자가 어디서 나오는지 설명하겠습니다.

145
00:07:06,400 --> 00:07:09,530
그 전에, 약간 모호할 위험이 있는 무한 합과 같은 

146
00:07:09,530 --> 00:07:12,660
문구가 무엇을 의미하는지 명확히 할 필요가 있습니다.

147
00:07:13,540 --> 00:07:16,167
예를 들어 이 무한한 분수의 합은 파이를 

148
00:07:16,167 --> 00:07:18,566
4로 나눈 것과 같다고 말할 수 있는 

149
00:07:18,566 --> 00:07:21,080
더 간단한 숫자의 맥락을 생각해 보세요.

150
00:07:21,680 --> 00:07:24,539
항을 하나씩 계속 추가하면 항상 합리적인 

151
00:07:24,539 --> 00:07:27,149
값을 얻을 수 있지만 실제로는 무리수 

152
00:07:27,149 --> 00:07:29,760
파이를 4로 나눈 값과 같지 않습니다.

153
00:07:30,380 --> 00:07:34,245
그러나 이 부분합 시퀀스는 4분의 pi에 접근합니다. 

154
00:07:34,245 --> 00:07:37,081
즉, 4분의 pi와 결코 같지 않으면서 

155
00:07:37,081 --> 00:07:40,302
표시되는 숫자는 임의로 해당 값에 가까워지고 

156
00:07:40,302 --> 00:07:42,880
임의로 해당 값에 가깝게 유지됩니다.

157
00:07:43,720 --> 00:07:46,384
말하기엔 너무 많은 내용이므로 대신에 무한 

158
00:07:46,384 --> 00:07:49,160
합은 파이/4와 같다고 줄여서 표현하겠습니다.

159
00:07:50,620 --> 00:07:52,854
함수를 사용하면 동일한 작업을 수행하지만 

160
00:07:52,854 --> 00:07:54,700
동시에 여러 다른 값을 사용합니다.

161
00:07:55,920 --> 00:07:58,847
특정 입력과 해당 입력에 대해 스케일링된 

162
00:07:58,847 --> 00:08:01,520
모든 코사인 함수의 값을 고려하십시오.

163
00:08:02,120 --> 00:08:04,511
해당 입력이 0보다 작은 경우.5, 

164
00:08:04,511 --> 00:08:07,740
더 많은 항을 추가할수록 합은 1에 가까워집니다.

165
00:08:10,000 --> 00:08:12,207
해당 입력이 0보다 큰 경우.5, 

166
00:08:12,207 --> 00:08:15,460
더 많은 항을 추가하면 마이너스 1에 가까워집니다.

167
00:08:17,260 --> 00:08:20,393
입력 0에서.5 자체에서는 코사인이 

168
00:08:20,393 --> 00:08:23,840
모두 0이므로 부분합의 극한도 0입니다.

169
00:08:24,600 --> 00:08:27,985
이는 다소 어색하게도 이 무한 합이 엄격하게 참이 

170
00:08:27,985 --> 00:08:31,250
되기 위해서는 불연속점에서 이 설정 함수의 값을 

171
00:08:31,250 --> 00:08:34,514
점프의 중간 정도인 0으로 규정해야 한다는 것을 

172
00:08:34,514 --> 00:08:35,240
의미합니다.

173
00:08:36,080 --> 00:08:40,140
유리수의 무한합이 무리수인 것과 유사하게, 

174
00:08:40,140 --> 00:08:43,863
물결 모양 연속 함수의 무한합은 불연속 

175
00:08:43,863 --> 00:08:46,740
평탄 함수와 같을 수 있습니다.

176
00:08:47,160 --> 00:08:49,770
게임에 한계를 두는 것은 유한한 합만으로는 

177
00:08:49,770 --> 00:08:52,380
결코 할 수 없는 질적인 변화를 허용합니다.

178
00:08:53,280 --> 00:08:54,918
여기서는 은밀히 다루어야 할 

179
00:08:54,918 --> 00:08:56,660
여러 기술적 뉘앙스가 있습니다.

180
00:08:56,660 --> 00:09:00,161
불연속점에서 계단 함수의 특정 값을 강제로 받는다는 

181
00:09:00,161 --> 00:09:03,300
사실이 열 흐름 문제에 어떤 차이를 가져옵니까?

182
00:09:03,820 --> 00:09:06,102
그렇다면, 불연속 초기 조건이 있는 PDE를 

183
00:09:06,102 --> 00:09:08,020
푼다는 것은 실제로 무엇을 의미합니까?

184
00:09:09,280 --> 00:09:13,020
열 방정식의 해의 극한도 해라고 확신할 수 있습니까?

185
00:09:13,580 --> 00:09:15,120
그리고 모든 함수가 실제로 이와 같은 

186
00:09:15,120 --> 00:09:16,880
푸리에 급수를 갖는다고 확신할 수 있습니까?

187
00:09:17,180 --> 00:09:18,400
그렇지 않다면 언제 아닌가?

188
00:09:19,080 --> 00:09:21,285
이것들은 실제 분석이 답변하기 위해 만들어진 

189
00:09:21,285 --> 00:09:23,580
질문과 정확히 일치하지만 여기에서 다루고 싶은 

190
00:09:23,580 --> 00:09:25,697
것보다 잡초에 조금 더 깊이 빠지기 때문에 

191
00:09:25,697 --> 00:09:28,080
모든 내용을 비디오 설명의 링크로 이관하겠습니다.

192
00:09:28,720 --> 00:09:32,018
결과는 이러한 코사인 파동과 관련된 열 방정식 

193
00:09:32,018 --> 00:09:35,697
솔루션을 선택하고 이를 무한히 더하면 시간이 지남에 

194
00:09:35,697 --> 00:09:39,376
따라 계단 함수가 어떻게 전개되는지 설명하는 정확한 

195
00:09:39,376 --> 00:09:41,913
솔루션을 얻을 수 있다는 것입니다. 

196
00:09:41,913 --> 00:09:45,338
1822년에 그렇게 했다면 당신은 불멸의 존재가 

197
00:09:45,338 --> 00:09:46,480
되었을 것입니다.

198
00:09:47,140 --> 00:09:49,310
물론 이 모든 것의 핵심 과제는 

199
00:09:49,310 --> 00:09:51,240
이러한 계수를 찾는 것입니다.

200
00:09:53,880 --> 00:09:56,521
지금까지 우리는 실수 출력을 갖는 함수에 대해 

201
00:09:56,521 --> 00:09:58,959
생각해 왔지만, 계산을 위해 푸리에가 원래 

202
00:09:58,959 --> 00:10:01,803
했던 것보다 더 일반적인 것을 보여주고 싶습니다. 

203
00:10:01,803 --> 00:10:04,242
출력이 2차원 평면에서 임의의 복소수일 수 

204
00:10:04,242 --> 00:10:06,070
있는 함수에 적용하는 것입니다. 

205
00:10:06,070 --> 00:10:08,712
오프닝에서 회전하는 모든 벡터가 다시 작동하는 

206
00:10:08,712 --> 00:10:09,220
곳입니다.

207
00:10:10,880 --> 00:10:12,260
복잡성이 추가된 이유는 무엇입니까?

208
00:10:12,260 --> 00:10:14,857
좀 더 일반적인 것 외에도 제 생각에는 

209
00:10:14,857 --> 00:10:17,336
계산이 더 깔끔해지고 실제로 작동하는 

210
00:10:17,336 --> 00:10:19,580
이유를 이해하기가 더 쉬워졌습니다.

211
00:10:20,300 --> 00:10:22,584
더 중요한 것은 라플라스 변환 및 지수 

212
00:10:22,584 --> 00:10:25,076
함수의 중요성과 같이 시리즈 후반부에 나올 

213
00:10:25,076 --> 00:10:27,880
아이디어에 대한 좋은 토대를 마련한다는 것입니다.

214
00:10:29,300 --> 00:10:31,453
우리는 입력이 유한한 간격(예: 

215
00:10:31,453 --> 00:10:34,923
단순화를 위해 0에서 1까지)의 실수인 함수를 계속 

216
00:10:34,923 --> 00:10:36,000
생각할 것입니다.

217
00:10:36,560 --> 00:10:39,220
그러나 온도 함수와 같은 것의 출력은 실수선에 

218
00:10:39,220 --> 00:10:41,982
있는 반면, 이 더 넓은 보기에서는 출력이 2D 

219
00:10:41,982 --> 00:10:44,540
복소 평면의 어느 곳이든 방황할 수 있습니다.

220
00:10:45,120 --> 00:10:47,991
이러한 기능은 입력 범위가 0에서 1까지이므로 

221
00:10:47,991 --> 00:10:50,420
연필 끝으로 복잡한 평면의 여러 지점을 

222
00:10:50,420 --> 00:10:52,740
추적하는 그림으로 생각할 수 있습니다.

223
00:10:53,340 --> 00:10:55,812
그리고 처음에 본 것처럼 사인파가 기본 

224
00:10:55,812 --> 00:10:58,510
구성 요소가 되는 대신 이러한 함수를 작은 

225
00:10:58,510 --> 00:11:00,870
벡터의 합으로 분해하는 데 중점을 둘 

226
00:11:00,870 --> 00:11:03,680
것이며 모두 일정한 정수 주파수로 회전합니다.

227
00:11:03,680 --> 00:11:08,464
실수 출력 기능은 본질적으로 정말 지루한 그림, 

228
00:11:08,464 --> 00:11:11,300
즉 1차원 연필 스케치입니다.

229
00:11:11,980 --> 00:11:14,996
일반적으로 우리는 이러한 함수를 그래프로 시각화하기 

230
00:11:14,996 --> 00:11:17,804
때문에 이와 같이 생각하는 데 익숙하지 않을 수 

231
00:11:17,804 --> 00:11:20,820
있지만 현재 그려지는 경로는 출력 공간에만 있습니다.

232
00:11:25,420 --> 00:11:29,657
지루한 그림을 위해 이러한 분해 중 하나를 회전 

233
00:11:29,657 --> 00:11:34,051
벡터로 수행하면 주파수 1과 -1의 벡터가 동일한 

234
00:11:34,051 --> 00:11:38,760
길이를 가지며 서로 수평 반사가 되는 일이 발생합니다.

235
00:11:39,500 --> 00:11:42,995
이 둘이 회전하면서 그 합을 보면 그 합은 

236
00:11:42,995 --> 00:11:46,200
실수선에 고정되어 사인파처럼 진동합니다.

237
00:11:46,920 --> 00:11:49,952
이전에 본 적이 없다면 이것은 사인파가 무엇인지 

238
00:11:49,952 --> 00:11:52,648
생각하는 정말 이상한 방법일 수 있습니다. 

239
00:11:52,648 --> 00:11:55,569
왜냐하면 우리는 실수선에서 방황하는 출력보다는 

240
00:11:55,569 --> 00:11:58,040
그래프를 보는 데 익숙하기 때문입니다. 

241
00:11:58,040 --> 00:12:01,073
복소수 출력을 사용하는 함수의 더 넓은 맥락에서 

242
00:12:01,073 --> 00:12:03,320
수평선의 진동은 사인파처럼 보입니다.

243
00:12:04,920 --> 00:12:08,344
마찬가지로, 주파수 2와 -2를 갖는 회전 

244
00:12:08,344 --> 00:12:12,196
벡터 쌍은 또 다른 사인파 구성요소를 추가하며, 

245
00:12:12,196 --> 00:12:15,621
앞서 우리가 찾고 있던 사인파는 이제 반대 

246
00:12:15,621 --> 00:12:18,760
방향으로 회전하는 벡터 쌍에 해당합니다.

247
00:12:19,640 --> 00:12:22,944
따라서 실수 값 함수를 사인파로 분해하는 푸리에가 

248
00:12:22,944 --> 00:12:26,013
원래 연구한 내용은 2D 도면 및 회전 벡터에 

249
00:12:26,013 --> 00:12:29,200
대한 보다 일반적인 아이디어의 특별한 경우입니다.

250
00:12:34,580 --> 00:12:37,074
그리고 이 시점에서는 복잡한 기능에 대한 관점을 

251
00:12:37,074 --> 00:12:39,662
넓히면 이해하기가 더 쉬워진다는 사실을 믿지 못할 

252
00:12:39,662 --> 00:12:41,694
수도 있지만, 양해해 주시기 바랍니다. 

253
00:12:41,694 --> 00:12:44,282
더 큰 그림을 보려면 추가로 노력할 가치가 있으며 

254
00:12:44,282 --> 00:12:46,869
여러분도 기뻐하실 것입니다. 이 더 넓은 맥락에서 

255
00:12:46,869 --> 00:12:48,440
실제 계산이 얼마나 깨끗한 지.

256
00:12:49,100 --> 00:12:51,846
당신은 또한 왜 우리가 사물을 2차원으로 만들려면 

257
00:12:51,846 --> 00:12:54,493
2D 벡터에 대해서만 이야기하지 않고 음수 1의 

258
00:12:54,493 --> 00:12:57,240
제곱근이 어떤 것과 관련이 있는지 궁금할 것입니다.

259
00:12:58,100 --> 00:13:00,819
음, 푸리에 급수의 핵심은 i 

260
00:13:00,819 --> 00:13:03,700
곱하기 t의 복소 지수 e입니다.

261
00:13:04,480 --> 00:13:07,787
입력 t가 시간에 따라 앞으로 이동함에 따라 이 

262
00:13:07,787 --> 00:13:11,340
값은 초당 1단위의 속도로 단위원 주위를 이동합니다.

263
00:13:12,280 --> 00:13:14,710
다음 비디오에서는 왜 허수를 지수화하는 것이 

264
00:13:14,710 --> 00:13:17,239
미분 방정식의 관점에서 이렇게 원 주위를 도는 

265
00:13:17,239 --> 00:13:19,767
지에 대한 빠른 직관을 볼 수 있을 것입니다. 

266
00:13:19,767 --> 00:13:22,100
그리고 그 이상으로 시리즈가 진행됨에 따라 

267
00:13:22,100 --> 00:13:24,337
왜 이와 같은 복소 지수가 있는지에 대한 

268
00:13:24,337 --> 00:13:27,060
이해를 제공하고자 합니다. 실제로 매우 중요합니다.

269
00:13:27,740 --> 00:13:30,073
이론적으로는 모든 푸리에 급수를 벡터로만 

270
00:13:30,073 --> 00:13:32,407
설명할 수 있으며 음수의 제곱근인 i라는 

271
00:13:32,407 --> 00:13:34,640
단어는 전혀 사용하지 않을 수 있습니다.

272
00:13:35,300 --> 00:13:38,999
공식은 더욱 복잡해지겠지만, 그 이상으로 함수 e를 

273
00:13:38,999 --> 00:13:42,698
x에 빼면 이 아이디어가 미분 방정식을 푸는 데 왜 

274
00:13:42,698 --> 00:13:46,142
그렇게 유용한지 더 이상 확실하게 반영하지 못할 

275
00:13:46,142 --> 00:13:46,780
것입니다.

276
00:13:47,420 --> 00:13:51,003
지금은 원하는 경우 e를 회전 벡터를 설명하기 

277
00:13:51,003 --> 00:13:54,448
위한 표기법 약어로 생각할 수 있지만 단순한 

278
00:13:54,448 --> 00:13:57,480
약칭보다 더 중요하다는 점을 명심하세요.

279
00:13:58,540 --> 00:14:01,286
벡터와 복소수라는 단어를 어느 정도 서로 바꿔서 

280
00:14:01,286 --> 00:14:04,134
사용하는 언어가 약간 느슨하다는 것을 알 수 있을 

281
00:14:04,134 --> 00:14:07,186
것입니다. 복소수를 작은 화살표로 생각하면 많은 수를 

282
00:14:07,186 --> 00:14:09,729
함께 추가하는 아이디어가 더 쉽게 시각화되기 

283
00:14:09,729 --> 00:14:10,340
때문입니다.

284
00:14:11,340 --> 00:14:14,059
좋아요, i 곱하기 t의 함수 e로 무장하고, 

285
00:14:14,059 --> 00:14:16,151
우리가 작업 중인 회전 벡터 각각에 

286
00:14:16,151 --> 00:14:17,720
대한 공식을 작성해 봅시다.

287
00:14:18,120 --> 00:14:19,924
지금은 각각이 숫자 1에서 오른쪽으로 

288
00:14:19,924 --> 00:14:21,900
한 단위를 가리키기 시작한다고 생각하세요.

289
00:14:21,900 --> 00:14:25,145
설명하기 가장 쉬운 벡터는 숫자 1에 머무르고 

290
00:14:25,145 --> 00:14:27,766
절대 움직이지 않는 상수 벡터입니다. 

291
00:14:27,766 --> 00:14:31,011
또는 원하는 경우 0의 빈도로 인용-인용 해제 

292
00:14:31,011 --> 00:14:32,260
회전을 사용합니다.

293
00:14:33,100 --> 00:14:36,211
그런 다음 매초마다 한 사이클을 회전하는 벡터가 있을 

294
00:14:36,211 --> 00:14:39,220
것입니다. 이를 2pi i 곱하기 t에 e로 씁니다.

295
00:14:39,739 --> 00:14:42,372
2파이가 있는 이유는 t가 0에서 1로 변할 때 

296
00:14:42,372 --> 00:14:45,200
원을 따라 2파이의 거리를 커버해야 하기 때문입니다.

297
00:14:45,200 --> 00:14:48,066
기술적으로 보여지는 것은 실제로 10초마다 

298
00:14:48,066 --> 00:14:50,813
한 사이클이므로 상황이 너무 어지러워지지 

299
00:14:50,813 --> 00:14:53,560
않고 모든 것을 10배로 늦추고 있습니다.

300
00:14:55,320 --> 00:14:58,584
또한 초당 한 사이클로 다른 방향으로 회전하는 벡터도 

301
00:14:58,584 --> 00:15:01,740
있습니다. 즉, e에서 -2pi i 곱하기 t입니다.

302
00:15:04,300 --> 00:15:07,307
마찬가지로, 초당 2회전하는 것은 e의 

303
00:15:07,307 --> 00:15:10,314
2 곱하기 2pi i 곱하기 t입니다. 

304
00:15:10,314 --> 00:15:13,459
여기서 지수의 2 곱하기 2pi는 1초에 

305
00:15:13,459 --> 00:15:16,740
얼마나 많은 거리를 이동하는지를 나타냅니다.

306
00:15:20,600 --> 00:15:23,037
그리고 우리는 양수와 음수 모두의 모든 

307
00:15:23,037 --> 00:15:25,808
정수에 대해 e의 n 곱하기 2 파이 곱하기 

308
00:15:25,808 --> 00:15:28,800
i t의 일반 공식을 사용하여 이렇게 진행합니다.

309
00:15:29,339 --> 00:15:31,777
이렇게 하면 상수 벡터를 e로 0 곱하기 

310
00:15:31,777 --> 00:15:34,744
2 파이 곱하기로 쓰는 것이 더 일관되게 됩니다. 

311
00:15:34,744 --> 00:15:37,500
숫자 1을 쓰는 것은 엄청나게 복잡한 방법처럼 

312
00:15:37,500 --> 00:15:39,620
느껴지지만 적어도 패턴에는 맞습니다.

313
00:15:40,500 --> 00:15:43,554
우리가 제어할 수 있는 노브와 다이얼 

314
00:15:43,554 --> 00:15:46,900
세트는 각 숫자의 초기 크기와 방향입니다.

315
00:15:47,480 --> 00:15:50,360
우리가 이를 제어하는 방법은 각각에 c sub 

316
00:15:50,360 --> 00:15:53,240
n이라고 부르는 복잡한 상수를 곱하는 것입니다.

317
00:15:53,880 --> 00:15:56,502
예를 들어, 상수 벡터가 숫자 1이 아닌 

318
00:15:56,502 --> 00:15:59,808
길이가 0이 되기를 원한다고 가정해 보겠습니다.5, 

319
00:15:59,808 --> 00:16:01,860
c sub 0은 0이 됩니다.5.

320
00:16:02,540 --> 00:16:05,812
초당 1주기로 회전하는 벡터가 45도 각도에서 

321
00:16:05,812 --> 00:16:08,581
시작하기를 원한다면, 그 만큼 회전하는 

322
00:16:08,581 --> 00:16:11,224
효과가 있는 복소수를 곱하면 됩니다. 

323
00:16:11,224 --> 00:16:15,000
이를 pi에 e로 쓸 수 있습니다. 네 번째 시간 i.

324
00:16:15,640 --> 00:16:18,605
그리고 초기 길이가 0이어야 하는 경우.3이면 

325
00:16:18,605 --> 00:16:21,800
계수 c sub 1은 0이 됩니다.그 금액의 3배.

326
00:16:22,760 --> 00:16:27,025
마찬가지로 무한한 회전 벡터 계열의 모든 구성원은 

327
00:16:27,025 --> 00:16:31,138
초기 각도와 전체 크기를 결정하는 복잡한 상수를 

328
00:16:31,138 --> 00:16:31,900
곱합니다.

329
00:16:32,820 --> 00:16:36,093
우리의 목표는 t의 임의의 함수 f(예를 들어 

330
00:16:36,093 --> 00:16:39,241
t가 0에서 1로 갈 때 8분 음표를 그리는 

331
00:16:39,241 --> 00:16:43,018
함수)를 다음과 같은 항의 합으로 표현하는 것입니다. 

332
00:16:43,018 --> 00:16:46,166
따라서 이러한 상수를 하나씩 선택하는 방법이 

333
00:16:46,166 --> 00:16:49,440
필요합니다. 함수 자체의 데이터가 주어졌습니다.

334
00:16:51,840 --> 00:16:54,540
이들 중 가장 찾기 쉬운 것은 상수 항입니다.

335
00:16:55,080 --> 00:16:56,728
이 용어는 전체 도면에 대한 

336
00:16:56,728 --> 00:16:58,480
일종의 질량 중심을 나타냅니다.

337
00:16:59,000 --> 00:17:02,684
0에서 1 사이의 범위에 있는 입력 t에 대해 

338
00:17:02,684 --> 00:17:06,510
균일한 간격의 값을 샘플링하는 경우 해당 샘플에 

339
00:17:06,510 --> 00:17:10,619
대한 함수의 모든 출력 평균은 상수항 c0이 됩니다.

340
00:17:11,359 --> 00:17:13,822
또는 더 정확하게 말하면, 점점 더 

341
00:17:13,822 --> 00:17:16,531
미세한 샘플을 고려할 때 이러한 샘플의 

342
00:17:16,531 --> 00:17:19,240
출력 평균은 한계에서 c0에 접근합니다.

343
00:17:20,000 --> 00:17:22,597
내가 설명하는 것은 입력 범위에서 t의 

344
00:17:22,597 --> 00:17:25,430
샘플에 대한 함수의 더 미세한 합은 적분, 

345
00:17:25,430 --> 00:17:28,500
즉 0에서 1까지의 t에 대한 f의 적분입니다.

346
00:17:30,820 --> 00:17:33,757
일반적으로 이 모든 것을 평균으로 구성하기 

347
00:17:33,757 --> 00:17:36,817
때문에 적분을 입력 범위의 길이로 나누겠지만 

348
00:17:36,817 --> 00:17:39,754
그 길이는 1이므로 이 경우 적분을 취하는 

349
00:17:39,754 --> 00:17:42,080
것과 평균을 취하는 것은 같습니다.

350
00:17:42,640 --> 00:17:44,445
왜 이 적분이 c0를 끌어내는지에 대해 

351
00:17:44,445 --> 00:17:46,580
생각해 볼 수 있는 아주 좋은 방법이 있습니다.

352
00:17:47,380 --> 00:17:50,414
기억하세요, 우리는 이 함수를 회전하는 벡터의 

353
00:17:50,414 --> 00:17:52,982
합으로 생각하고 싶기 때문에 이 적분, 

354
00:17:52,982 --> 00:17:55,783
이 연속 평균이 전체 합에 적용되는 것으로 

355
00:17:55,783 --> 00:17:56,600
생각하십시오.

356
00:17:57,460 --> 00:17:59,735
이와 같은 합계의 평균은 각 

357
00:17:59,735 --> 00:18:02,580
부분의 평균에 대한 합계와 같습니다.

358
00:18:06,080 --> 00:18:07,899
이 움직임은 일종의 관점의 미묘한 

359
00:18:07,899 --> 00:18:09,240
변화로 읽을 수 있습니다.

360
00:18:09,520 --> 00:18:12,263
각 시점의 모든 벡터의 합을 보고 그 

361
00:18:12,263 --> 00:18:15,399
벡터가 쓸어내는 평균값을 취하는 대신 t가 

362
00:18:15,399 --> 00:18:18,273
0에서 1로 갈수록 개별 벡터의 평균을 

363
00:18:18,273 --> 00:18:21,540
보고 이 모든 평균을 합산하는 것이 좋습니다.

364
00:18:22,480 --> 00:18:25,211
그러나 이들 벡터 각각은 0을 중심으로 

365
00:18:25,211 --> 00:18:27,695
전체 회전 수를 만들므로 t 범위가 

366
00:18:27,695 --> 00:18:30,800
0에서 1 사이일 때 평균 값은 0이 됩니다.

367
00:18:31,340 --> 00:18:33,440
유일한 예외는 상수 항입니다.

368
00:18:33,940 --> 00:18:37,389
정적으로 유지되고 회전하지 않기 때문에 

369
00:18:37,389 --> 00:18:40,840
평균값은 시작하는 숫자, 즉 c0입니다.

370
00:18:41,600 --> 00:18:44,346
따라서 전체 함수에 대해 이 평균을 구하는 것은 

371
00:18:44,346 --> 00:18:46,889
c0이 아닌 모든 항을 죽이는 일종의 영리한 

372
00:18:46,889 --> 00:18:47,500
방법입니다.

373
00:18:48,040 --> 00:18:49,560
하지만 여기에 영리한 부분이 있습니다.

374
00:18:49,860 --> 00:18:52,775
초당 2사이클을 회전하는 벡터 앞에 있는 c2와 

375
00:18:52,775 --> 00:18:55,800
같은 다른 항을 계산하고 싶다고 가정해 보겠습니다.

376
00:18:56,420 --> 00:18:59,462
비결은 먼저 t의 f에 벡터를 고정시키는 무언가를 

377
00:18:59,462 --> 00:19:02,614
곱하는 것입니다. 이는 지나치게 활동적인 어린이에게 

378
00:19:02,614 --> 00:19:05,440
스마트폰을 주는 것과 같은 수학적 등가물입니다.

379
00:19:06,260 --> 00:19:08,756
구체적으로, 전체 함수에 e를 -2 

380
00:19:08,756 --> 00:19:11,378
곱하기 2pi i 곱하기 t로 곱하면 

381
00:19:11,378 --> 00:19:14,500
각 항에 어떤 일이 일어나는지 생각해 보세요.

382
00:19:16,640 --> 00:19:20,813
지수를 곱하면 지수의 내용이 더해지기 때문에 

383
00:19:20,813 --> 00:19:25,320
각 지수의 주파수 항은 2만큼 아래로 이동합니다.

384
00:19:29,660 --> 00:19:32,964
이제 각 항의 평균을 계산할 때 c-1 

385
00:19:32,964 --> 00:19:36,720
벡터는 평균 0에서 마이너스 3번 회전합니다.

386
00:19:37,560 --> 00:19:42,063
이전에는 상수였던 c0 벡터는 이제 t 범위가 

387
00:19:42,063 --> 00:19:46,740
0에서 1까지 두 번 회전하므로 평균도 0입니다.

388
00:19:46,740 --> 00:19:49,932
마찬가지로, c2 항 이외의 모든 벡터는 정수 

389
00:19:49,932 --> 00:19:53,003
회전을 수행합니다. 즉, 평균이 0이 된다는 

390
00:19:53,003 --> 00:19:53,740
의미입니다.

391
00:19:55,280 --> 00:19:58,356
따라서 이 수정된 함수의 평균을 취하는 것은 

392
00:19:58,356 --> 00:20:01,680
c2 이외의 모든 항을 없애는 영리한 방법입니다.

393
00:20:02,360 --> 00:20:04,814
그리고 물론, 여기서 숫자 2에는 특별한 것이 

394
00:20:04,814 --> 00:20:07,362
없습니다. 이를 다른 n으로 대체할 수 있으며, 

395
00:20:07,362 --> 00:20:10,100
우리가 찾고 있는 cn에 대한 일반 공식이 있습니다.

396
00:20:10,660 --> 00:20:14,119
문맥상 이 표현식은 복잡해 보일 수 있지만 먼저 

397
00:20:14,119 --> 00:20:17,451
n번째 작은 벡터를 고정하기 위해 함수인 2D 

398
00:20:17,451 --> 00:20:21,038
드로잉을 수정한 다음 모든 움직이는 벡터를 죽이는 

399
00:20:21,038 --> 00:20:24,114
평균을 수행하는 것으로 읽을 수 있습니다. 

400
00:20:24,114 --> 00:20:25,780
정지된 부분만 남깁니다.

401
00:20:26,460 --> 00:20:27,080
그거 미친거 아니야?

402
00:20:27,500 --> 00:20:29,932
도면을 많은 회전 벡터의 합으로 

403
00:20:29,932 --> 00:20:32,365
분해하는 과정에서 나타나는 모든 

404
00:20:32,365 --> 00:20:35,880
복잡성이 이 작은 표현에 완전히 담겨 있습니다.

405
00:20:36,540 --> 00:20:38,634
그래서 제가 이러한 애니메이션을 렌더링할 

406
00:20:38,634 --> 00:20:40,820
때 컴퓨터가 하는 일이 바로 이것이었습니다.

407
00:20:41,280 --> 00:20:43,958
이는 복잡한 함수처럼 경로를 계산하고 

408
00:20:43,958 --> 00:20:46,636
n 값의 특정 범위에 대해 이 적분을 

409
00:20:46,636 --> 00:20:49,060
계산하여 n의 계수 c를 찾습니다.

410
00:20:51,080 --> 00:20:54,116
경로 자체의 데이터가 어디서 나오는지 궁금하신 분들을 

411
00:20:54,116 --> 00:20:56,949
위해 저는 쉬운 길을 택하여 SVG에서 프로그램을 

412
00:20:56,949 --> 00:20:59,783
읽도록 하겠습니다. SVG는 SVG가 아닌 수학적 

413
00:20:59,783 --> 00:21:02,820
곡선으로 이미지를 정의하는 파일 형식입니다. 픽셀 값.

414
00:21:03,280 --> 00:21:05,952
따라서 시간 매개변수에서 공간의 지점으로의 

415
00:21:05,952 --> 00:21:08,960
t 매핑 f는 기본적으로 미리 정의되어 있습니다.

416
00:21:10,540 --> 00:21:14,138
지금 표시된 것은 101개의 회전 벡터를 사용하여 

417
00:21:14,138 --> 00:21:17,480
-50에서 50까지 n 값을 계산하는 것입니다.

418
00:21:18,120 --> 00:21:21,458
실제로, 이러한 적분 각각은 수치적으로 계산됩니다. 

419
00:21:21,458 --> 00:21:24,336
즉, 기본적으로 단위 간격을 델타 t 크기의 

420
00:21:24,336 --> 00:21:26,868
여러 작은 조각으로 나눈 다음 이 값을 

421
00:21:26,868 --> 00:21:29,631
더합니다(f의 t 곱하기 e를 음의 n 2 

422
00:21:29,631 --> 00:21:32,740
pi에 델타 t를 곱함). , 그들 각각에 대해.

423
00:21:33,280 --> 00:21:35,442
보다 효율적인 수치 적분을 위한 더 멋진 

424
00:21:35,442 --> 00:21:37,980
방법이 있지만 이것이 기본 아이디어를 제공합니다.

425
00:21:38,820 --> 00:21:41,820
그리고 이 101개의 상수를 계산한 후 각각은 

426
00:21:41,820 --> 00:21:44,705
작은 벡터의 초기 각도와 크기를 결정합니다. 

427
00:21:44,705 --> 00:21:48,052
그런 다음 모두 회전하도록 설정하고 끝에서 꼬리까지 

428
00:21:48,052 --> 00:21:51,168
이동하면서 추가합니다. 최종 끝이 그리는 경로는 

429
00:21:51,168 --> 00:21:54,400
다음과 같습니다. 공급한 원래 경로의 근사치입니다.

430
00:21:55,100 --> 00:21:58,210
사용된 벡터의 수가 무한대에 가까워질수록 

431
00:21:58,210 --> 00:22:00,780
근사 경로는 점점 더 정확해집니다.

432
00:22:14,140 --> 00:22:16,980
이 모든 것을 다시 지구로 가져오려면 이전에 

433
00:22:16,980 --> 00:22:19,479
보았던 계단 함수의 예를 고려하십시오. 

434
00:22:19,479 --> 00:22:22,092
이 예는 두 막대가 접촉한 후 서로 다른 

435
00:22:22,092 --> 00:22:25,500
온도에서 사이의 열 방출을 모델링하는 데 유용했습니다.

436
00:22:26,620 --> 00:22:29,682
모든 실수 값 함수와 마찬가지로 계단 함수는 

437
00:22:29,682 --> 00:22:32,500
한 차원에 국한된 지루한 그림과 같습니다.

438
00:22:33,240 --> 00:22:36,061
그러나 이것은 0과 0 사이의 입력에 대한 

439
00:22:36,061 --> 00:22:39,000
것이기 때문에 특히 지루한 그림입니다.5에서 

440
00:22:39,000 --> 00:22:41,940
출력은 숫자 1에서 정적으로 유지된 다음 0 

441
00:22:41,940 --> 00:22:44,526
사이의 입력에 대해 불연속적으로 -1로 

442
00:22:44,526 --> 00:22:45,820
점프합니다.5와 1.

443
00:22:46,440 --> 00:22:49,617
따라서 푸리에 급수 근사법에서 벡터 합은 주기의 

444
00:22:49,617 --> 00:22:53,031
전반부 동안 1에 가깝게 유지되었다가 빠르게 -1로 

445
00:22:53,031 --> 00:22:55,973
점프하여 주기의 후반부 동안 그 값에 가깝게 

446
00:22:55,973 --> 00:22:56,680
유지됩니다.

447
00:22:57,500 --> 00:22:59,736
그리고 반대 방향으로 회전하는 각 

448
00:22:59,736 --> 00:23:02,090
벡터 쌍은 앞서 살펴본 코사인 파동 

449
00:23:02,090 --> 00:23:04,680
중 하나에 해당한다는 것을 기억하십시오.

450
00:23:06,080 --> 00:23:08,508
계수를 찾으려면 이 적분을 계산해야 하며, 

451
00:23:08,508 --> 00:23:11,441
일부 적분을 손으로 풀고 싶어하는 야심 찬 시청자를 

452
00:23:11,441 --> 00:23:14,173
위해 이것은 단순히 계산하는 것이 아니라 실제로 

453
00:23:14,173 --> 00:23:17,208
미적분을 수행하여 정확한 답을 얻을 수 있는 곳입니다.

454
00:23:17,208 --> 00:23:19,940
 컴퓨터가 당신을 위해 숫자로 작업을 수행합니다.

455
00:23:19,940 --> 00:23:22,515
이 문제를 해결하고 반대 방향으로 회전하는 

456
00:23:22,515 --> 00:23:25,197
벡터를 쌍으로 연결하여 코사인 파동의 개념과 

457
00:23:25,197 --> 00:23:27,880
다시 연관시키기 위한 연습으로 남겨두겠습니다.

458
00:23:28,780 --> 00:23:30,981
그리고 훨씬 더 야심 찬 사람들을 위해 이 

459
00:23:30,981 --> 00:23:33,183
보다 일반적인 계산을 사인과 코사인이 있는 

460
00:23:33,183 --> 00:23:35,660
실수 값 함수 측면에서만 푸리에 급수를 설명하는 

461
00:23:35,660 --> 00:23:38,046
교과서에서 볼 수 있는 것과 연관시키는 방법에 

462
00:23:38,046 --> 00:23:40,340
대한 또 다른 연습을 화면에 남겨 두겠습니다.

463
00:23:40,340 --> 00:23:42,917
그건 그렇고, 더 많은 Fourier 시리즈 

464
00:23:42,917 --> 00:23:45,803
콘텐츠를 찾고 있다면 Mathologer와 The 

465
00:23:45,803 --> 00:23:48,793
Coding Train의 비디오를 강력히 추천하며, 

466
00:23:48,793 --> 00:23:51,680
설명에 있는 링크인 이 블로그 게시물도 추천합니다.

467
00:23:53,620 --> 00:23:57,107
따라서 한편으로 이것은 편미분 방정식 연구에 대한 

468
00:23:57,107 --> 00:24:00,720
작은 창이었던 열 방정식에 대한 논의를 마무리합니다.

469
00:24:01,240 --> 00:24:03,619
그러나 다른 한편으로, 이 푸리에 대 푸리에 시리즈는 

470
00:24:03,619 --> 00:24:05,920
더 깊은 아이디어를 처음으로 엿볼 수 있는 것입니다.

471
00:24:06,500 --> 00:24:09,543
복소수 및 행렬로의 일반화를 포함한 

472
00:24:09,543 --> 00:24:12,739
지수 함수는 미분 방정식, 특히 선형 

473
00:24:12,739 --> 00:24:16,240
방정식의 경우 매우 중요한 역할을 합니다.

474
00:24:16,920 --> 00:24:26,580
방금 본 것, 이러한 지수의 조합으로 함수를 

475
00:24:26,580 --> 00:24:35,853
분해하고 이를 사용하여 미분 방정식을 푸는 

476
00:24:35,853 --> 00:24:45,900
것은 다양한 모양과 형태로 계속해서 나타납니다.

