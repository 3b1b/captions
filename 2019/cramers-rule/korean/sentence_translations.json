[
 {
  "input": "In a previous video, I’ve talked about linear 00:00:15,800 --> 00:00:19,690 3  is a good litmus test for whether or not you actually understand what’s going on, since 00:00:31,680 --> 00:00:32,680 00:00:32,680 --> 00:00:36,379 8 9  sure to watch the relevant videos on those topics if you’re unfamiliar or rusty.",
  "model": "nmt",
  "translatedText": "이전 비디오에서 나는 선형 방정식 시스템에 대해 이야기했으며 이러한 시스템에 대한 실제로 컴퓨팅 솔루션에 대한 논의는 무시했습니다. 그리고 숫자 분석이 일반적으로 컴퓨터에 맡기는 것이 사실이지만, 이러한 계산 방법 중 일부를 파헤치는 것은 실제로 무슨 일이 일어나고 있는지 이해하고 있는지 여부에 대한 좋은 리트머스 테스트입니다. 여기서는 Cramer의 법칙으로 알려진 이러한 시스템에 대한 컴퓨팅 솔루션을 위한 특정 방법 뒤에 있는 기하학을 설명하고 싶습니다. 여기에서 관련 배경은 행렬식, 약간의 내적, 선형 방정식 시스템을 이해하는 것입니다. 따라서 익숙하지 않거나 잘 모르는 경우 해당 주제에 대한 관련 비디오를 시청하십시오. 하지만 먼저 이 Cramer의 법칙이 실제로 선형 방정식 시스템의 해를 계산하는 가장 좋은 방법은 아니라는 점을 미리 말씀드리고 싶습니다. 예를 들어 가우스 소거법은 항상 더 빠릅니다. 그렇다면 왜 배워야 할까요? 일종의 문화탐방이라고 생각하시면 됩니다. 이는 이러한 시스템 뒤에 있는 이론에 대한 지식을 심화하는 데 도움이 되는 연습입니다."
 },
 {
  "input": "But first!",
  "model": "nmt",
  "translatedText": ""
 },
 {
  "input": "I should say up front that Cramer’s rule 00:00:56,379 --> 00:00:58,010 00:00:58,010 --> 00:01:01,950 16 17   help consolidate ideas from linear algebra, like the determinant and linear systems, by 00:01:19,960 --> 00:01:24,619 22 23   will work systems with a larger number of unknowns, and the same number of equations.",
  "model": "nmt",
  "translatedText": "이 개념을 염두에 두는 것은 행렬식 및 선형 시스템과 같은 선형 대수학의 아이디어가 서로 어떻게 연관되어 있는지 확인함으로써 아이디어를 통합하는 데 도움이 될 것입니다. 또한 순전히 예술적인 관점에서 볼 때 여기서의 최종 결과는 가우스 제거보다 훨씬 더 생각하기 정말 아름답습니다. 좋습니다. 여기서 설정은 두 개의 미지수 x와 y와 두 개의 방정식을 사용하는 선형 방정식 시스템이 됩니다. 원칙적으로 우리가 말하는 모든 내용은 더 많은 수의 미지수와 동일한 수의 방정식을 가진 시스템에서도 작동하지만 단순화를 위해 더 작은 예가 머리 속에 보관하는 것이 더 좋습니다. 이전 비디오에서 이야기한 것처럼 이 설정을 기하학적으로 알 수 없는 벡터 x, y를 변환하는 특정 알려진 행렬로 생각할 수 있습니다. 여기서 출력이 어떻게 될지 알 수 있습니다(이 경우에는 -4). 부정적인 2. 이 행렬의 열은 해당 행렬이 어떻게 변환으로 작동하는지 알려주며, 각 열은 입력 공간의 기본 벡터가 어디에 있는지 알려줍니다. 그래서 우리가 가지고 있는 것은 일종의 퍼즐입니다. 어떤 입력 벡터 x, y가 이 출력(-4, -2)에 도달하게 될까요? 여기서 우리의 작은 퍼즐에 대해 생각하는 한 가지 방법은 주어진 출력 벡터가 행렬 열의 선형 조합, 즉 i-hat이 착지하는 벡터의 x 배 + j-hat이 착지하는 벡터의 y배라는 것을 아는 것입니다. 우리가 원하는 것은 선형 결합이 정확히 무엇인지 알아내는 것입니다."
 },
 {
  "input": "But for simplicity, a smaller example is nicer 00:01:46,349 --> 00:01:50,599 29  -2].",
  "model": "nmt",
  "translatedText": "여기에서 얻을 수 있는 대답의 유형은 변환이 모든 공간을 더 낮은 차원으로 압축하는지 여부, 즉 행렬식이 0인지 여부에 따라 달라질 수 있다는 점을 기억하십시오. 이 경우 주어진 출력에 입력이 전혀 포함되지 않거나 해당 출력에 입력이 많이 포함됩니다. 하지만 이 비디오에서는 0이 아닌 행렬식의 경우로 뷰를 제한하겠습니다. 즉, 이 변환의 출력이 여전히 시작된 전체 차원 공간에 걸쳐 있음을 의미합니다. 모든 입력은 단 하나의 출력에 도달하고 모든 출력에는 단 하나의 입력이 있습니다."
 },
 {
  "input": "Remember, the columns of this matrix tell 00:02:06,250 --> 00:02:10,899 33   type of answer you get here can depend on whether or not the transformation squishes 00:02:44,299 --> 00:02:46,080 00:02:46,080 --> 00:02:51,849 39 40  the full n-dimensional space it started in; every input lands on one and only one output 00:03:12,549 --> 00:03:14,840 44  compute what exactly x and y are.",
  "model": "nmt",
  "translatedText": "첫 번째 단계로, 틀렸지만 올바른 방향으로 나아가는 아이디어를 보여드리겠습니다. 이 미스터리 입력 벡터의 x 좌표는 첫 번째 기본 벡터인 1, 0과 내적을 취하여 얻는 것입니다. 마찬가지로 y 좌표는 두 번째 기본 벡터인 0, 1로 점을 찍어서 얻는 것입니다. 따라서 변환 후에 변환된 버전의 미스터리 벡터와 변환된 버전의 내적이 x 및 y 좌표가 되기를 바랄 수도 있습니다. 우리는 각 벡터의 변환된 버전이 무엇인지 알고 있기 때문에 정말 환상적일 것입니다. 다만 한 가지 문제가 있는데, 전혀 사실이 아닙니다. 대부분의 선형 변환의 경우 변환 전후의 내적은 매우 다르게 보입니다. 예를 들어, 일반적으로 양의 내적을 사용하여 동일한 방향을 가리키는 두 개의 벡터가 있을 수 있습니다. 이 벡터는 변환 중에 서로 떨어져서 결국 음의 내적을 갖게 됩니다. 마찬가지로, 두 개의 기본 벡터처럼 내적 0과 수직으로 시작하는 것들은 변환 후에 서로 수직을 유지하지 않는 경우가 많습니다. 즉, 0 내적을 유지하지 않습니다. 방금 보여드린 예를 보면 내적은 확실히 보존되지 않으며 대부분의 벡터가 늘어나기 때문에 더 커지는 경향이 있습니다. 사실, 여기서 가치 있는 참고 사항은 내적을 보존하는 변환이 정규 직교 변환이라는 고유한 이름을 가질 만큼 특별하다는 것입니다. 이는 모든 기본 벡터가 서로 수직이면서 여전히 단위 길이를 유지하는 것입니다."
 },
 {
  "input": "As a first pass, let me show an idea that 00:03:18,829 --> 00:03:23,340 48 49   the dot products with the transformed version of the mystery vector with the transformed 00:03:41,939 --> 00:03:43,590 00:03:43,590 --> 00:03:50,400 55  before and after the transformation will be very different.",
  "model": "nmt",
  "translatedText": "종종 이것을 회전 행렬로 생각하는데, 늘어나거나 찌그러지거나 변형되지 않는 강체 모션에 해당합니다. 직교 행렬을 사용하여 선형 시스템을 푸는 것은 실제로 매우 쉽습니다. 내적이 보존되기 때문에 출력 벡터와 행렬의 모든 열 사이에서 내적을 구하는 것은 미스터리 입력 벡터와 모든 기저 벡터 사이에서 내적을 구하는 것과 동일합니다. 그 미스터리 입력의 좌표. 따라서 아주 특별한 경우에 x는 출력 벡터와 첫 번째 열의 내적이고, y는 출력 벡터와 두 번째 열의 내적입니다. 이 아이디어가 거의 모든 선형 시스템에 적용되지 않는데 왜 이것을 언급하는 걸까요? 글쎄요, 그것은 우리가 찾아야 할 것의 방향을 알려줍니다. 변환 후에도 변경되지 않은 입력 벡터의 좌표에 대한 대체 기하학적 이해가 있습니까? 당신의 마음이 행렬식에 대해 고민하고 있다면 다음과 같은 영리한 아이디어를 생각할 수 있습니다. 첫 번째 기본 벡터 i-hat과 미스터리 입력 벡터 xy로 정의된 평행사변형을 사용합니다. 이 평행사변형의 면적은 밑변에 수직인 높이(해당 입력 벡터의 y 좌표)에 밑변 1을 곱한 값입니다."
 },
 {
  "input": "For example, you could have two vectors generally 00:04:04,959 --> 00:04:09,270 60 61  will stay perpendicular after the transformation, preserving that zero dot product.",
  "model": "nmt",
  "translatedText": "따라서 평행사변형의 영역은 벡터의 y 좌표를 설명하는 일종의 우회 방법입니다. 좌표에 관해 이야기하는 엉뚱한 방법이지만 저와 함께 달려보세요. 그리고 실제로 좀 더 정확하게 말하자면, 이것을 행렬식 비디오에서 설명한 의미에서 평행사변형의 부호 있는 영역으로 생각해야 합니다. 그런 식으로 음의 y 좌표를 가진 벡터는 이 평행사변형의 음의 영역에 해당합니다. 적어도 i-hat이 평행사변형을 정의하는 이 두 벡터 중 첫 번째 벡터라고 생각한다면 말이죠. 그리고 대칭적으로 미스터리 입력 벡터와 두 번째 기저 j-hat에 걸쳐 있는 평행사변형을 보면 해당 영역은 해당 미스터리 벡터의 x 좌표가 됩니다."
 },
 {
  "input": "In the example we were looking at, dot products 00:04:27,140 --> 00:04:30,950 66   vectors perpendicular to each other with unit lengths.",
  "model": "nmt",
  "translatedText": "다시 말하지만, 이는 x 좌표를 나타내는 이상한 방법이지만 잠시 후에 이것이 우리에게 무엇을 가져다 주는지 알게 될 것입니다. 이것이 어떻게 일반화될 수 있는지 확실히 하기 위해 3차원으로 살펴보겠습니다. 일반적으로 벡터의 좌표 중 하나(예: z 좌표)에 대해 생각할 수 있는 방식은 k-hat이라고 불리는 세 번째 표준 기저 벡터와 내적을 취하는 것입니다. 그러나 대체 기하학적 해석은 다른 두 기본 벡터 i-hat과 j-hat을 사용하여 생성하는 평행육면체를 고려하는 것입니다. i-hat과 j-hat에 걸쳐 있는 면적 1이 있는 정사각형을 이 전체 모양의 기본으로 생각하면 그 부피는 벡터의 세 번째 좌표인 높이와 같습니다."
 },
 {
  "input": "You often think of these as rotation matrices.",
  "model": "nmt",
  "translatedText": ""
 },
 {
  "input": "The correspond to rigid motion, with no stretching, 00:04:53,000 --> 00:04:58,920 73  products between the input vector and all the basis vectors, which is the same as finding 00:05:13,599 --> 00:05:18,690 77  most linear systems, it points us in the direction of something to look for: Is there an alternate 00:05:37,780 --> 00:05:42,780 81  vector, i-hat, and the mystery input vector [x; y].",
  "model": "nmt",
  "translatedText": "마찬가지로, 벡터의 다른 좌표에 대해 생각하는 이상한 방법은 벡터와 찾고 있는 방향에 해당하는 벡터 이외의 모든 기본 벡터를 사용하여 평행육면체를 형성하는 것입니다. 그러면 이것의 부피가 좌표를 제공합니다. 또는 오히려, 우리는 오른손 법칙을 사용하여 행렬식 비디오에서 설명한 의미에서 평행육면체의 부호 있는 부피에 대해 이야기해야 합니다. 따라서 이 세 벡터를 나열하는 순서가 중요합니다. 그렇게 하면 음의 좌표가 여전히 의미가 있습니다. 좋아요, 그럼 왜 좌표를 이렇게 면적과 부피로 생각할까요? 음, 일종의 행렬 변환을 적용하면 평행사변형의 영역이 동일하게 유지되지 않고 크기가 커지거나 작아질 수 있습니다. 그러나 이것이 행렬식의 핵심 아이디어입니다. 모든 영역은 동일한 양, 즉 변환 행렬의 행렬식으로 확장됩니다. 예를 들어, 행렬의 첫 번째 열인 첫 번째 기저 벡터가 도달하는 벡터와 xy의 변환된 버전에 걸쳐 있는 평행사변형을 보면 해당 영역은 얼마입니까? 음, 이것은 우리가 이전에 보았던 평행사변형의 변환된 버전입니다. 이 평행사변형의 면적은 미스터리 입력 벡터의 y 좌표였습니다. 따라서 그 면적은 y 좌표를 곱한 변환의 결정 요인이 될 것입니다. 즉, 출력 공간에서 이 새로운 평행사변형의 면적을 전체 변환의 행렬식으로 나누어 y를 풀 수 있다는 의미입니다. 그리고 그 지역은 어떻게 얻나요?"
 },
 {
  "input": "The area of this parallelogram is its base, 00:05:59,990 --> 00:06:03,460 86  to talk about coordinates, but run with me.",
  "model": "nmt",
  "translatedText": "글쎄요, 우리는 신비한 입력 벡터가 도달하는 좌표를 알고 있습니다. 이것이 선형 방정식 시스템의 핵심입니다. 따라서 여러분이 할 수 있는 일은 첫 번째 열이 행렬의 것과 동일하지만 두 번째 열이 출력 벡터인 새 행렬을 만든 다음 행렬식을 취하는 것입니다. 따라서 변환 출력의 데이터, 즉 행렬의 열과 출력 벡터의 좌표를 사용하여 미스터리 입력 벡터의 y 좌표를 복구할 수 있으며 이는 시스템 해결의 절반입니다."
 },
 {
  "input": "Actually, to be more accurate, you should 00:06:19,690 --> 00:06:22,440 90   look at the parallelogram spanned by the vector and the second basis vector, j-hat, its area 00:06:45,099 --> 00:06:49,370 95 96  would be to take its dot product with the third standard basis vector, k-hat.",
  "model": "nmt",
  "translatedText": "마찬가지로 동일한 아이디어로 x 좌표를 얻을 수 있습니다. 이전에 정의한 평행사변형은 해당 벡터와 j-hat에 걸쳐 있는 미스터리 입력 벡터의 x 좌표를 인코딩합니다. 이 녀석의 변환된 버전은 출력 벡터와 행렬의 두 번째 열에 걸쳐 있으며 해당 영역에는 해당 행렬의 행렬식이 곱해집니다. 따라서 x를 풀려면 이 새로운 영역을 전체 변환의 행렬식으로 나누어야 합니다. 이전에 했던 것과 유사하게 첫 번째 열이 출력 벡터이고 두 번째 열이 원래 행렬과 동일한 새 행렬을 만들어 출력 평행사변형의 면적을 계산할 수 있습니다. 따라서 다시 출력 공간의 데이터, 즉 원래 선형 시스템에서 볼 수 있는 숫자를 사용하여 x가 무엇인지 풀 수 있습니다. 선형 방정식 시스템의 해를 구하는 이 공식은 Cramer의 법칙으로 알려져 있습니다. 여기, 우리 자신의 정신 상태를 확인하기 위해 여기에 숫자를 연결하세요. 위쪽의 변경된 행렬의 행렬식은 4 더하기 2(6)이고 아래쪽 행렬식은 2이므로 x 좌표는 3이 되어야 합니다."
 },
 {
  "input": "But instead, consider the parallelepiped it 00:07:11,870 --> 00:07:13,569 00:07:13,569 --> 00:07:20,030 102  other coordinate of this vector is to form the parallelepiped between this vector an 00:07:34,950 --> 00:07:37,900 00:07:37,900 --> 00:07:42,490 107  rule.",
  "model": "nmt",
  "translatedText": "실제로 우리가 시작한 입력 벡터를 되돌아보면 x 좌표는 3입니다. 마찬가지로 Cramer의 법칙에 따르면 y 좌표는 4를 2로 나누어야 합니다. 즉 2가 바로 우리가 시작했던 입력 벡터의 y 좌표입니다. 3차원 이상의 경우도 비슷하니, 잠시 멈춰서 스스로 생각해 보시길 적극 권해 드립니다. 여기서 약간의 추진력을 드리겠습니다. 우리가 가지고 있는 것은 일부 3x3 행렬로 제공되는 알려진 변환과 선형 시스템의 오른쪽으로 제공되는 알려진 출력 벡터이며, 해당 출력에 어떤 입력이 있는지 알고 싶습니다. 그리고 해당 입력 벡터의 z 좌표를 우리가 이전에 보았던 i-hat, j-hat 및 미스터리 입력 벡터로 구성된 특수 평행육면체의 부피로 생각하면 해당 부피는 어떻게 되나요? 변신 후? 그리고 그 양을 계산할 수 있는 다양한 방법은 무엇입니까? 실제로, 잠시 멈추고 이것을 더 높은 차원으로 일반화하는 세부 사항을 생각해 보고 더 큰 선형 시스템에 대한 솔루션의 각 좌표에 대한 표현을 찾으십시오."
 },
 {
  "input": "That way negative coordinates still make sense.",
  "model": "nmt",
  "translatedText": "이와 같은 보다 일반적인 사례를 생각하고 그것이 작동하고 왜 작동하는지 스스로 확신하는 것이 모든 학습이 실제로 일어나는 곳입니다."
 },
 {
  "input": "Okay, so why think of coordinates as areas 00:07:56,000 --> 00:08:02,039 112 113  matrix.",
  "model": "nmt",
  "translatedText": "YouTube에서 누군가의 말을 듣는 것보다 훨씬 더 동일한 추론을 다시 안내합니다."
 },
 {
  "input": "For example, if you look the parallelogram 00:08:17,850 --> 00:08:22,850 117 118  input vector.",
  "model": "nmt",
  "translatedText": ""
 },
 {
  "input": "So its area will be the determinant of the 00:08:39,080 --> 00:08:44,590 122    mystery input vector lands, that’s the whole point of a linear system of equations.",
  "model": "nmt",
  "translatedText": ""
 },
 {
  "input": "So, create a matrix whose first column is 00:09:05,670 --> 00:09:11,250 129  vector, we can recover the y-coordinate of our mystery input vector.",
  "model": "nmt",
  "translatedText": ""
 },
 {
  "input": "Likewise, the same idea can get you the x-coordinate.",
  "model": "nmt",
  "translatedText": ""
 },
 {
  "input": "Look at that parallelogram we defined early 00:09:32,580 --> 00:09:36,420 135  multiplied by the determinant of the matrix.",
  "model": "nmt",
  "translatedText": ""
 },
 {
  "input": "So the x-coordinate of our mystery input vector 00:09:52,000 --> 00:09:53,980 00:09:53,980 --> 00:09:58,900 140   space, the numbers we see in our original linear system, we can recover the x-coordinate 00:10:13,600 --> 00:10:18,440 145 146  is 4+2, which is 6, and the bottom determinant is 2, so the x-coordinate should be 3.",
  "model": "nmt",
  "translatedText": ""
 },
 {
  "input": "And indeed, looking back at that input vector 00:10:35,910 --> 00:10:43,850 151  and I highly recommend you pause to think it through yourself.",
  "model": "nmt",
  "translatedText": ""
 },
 {
  "input": "Here, I’ll give you a little momentum.",
  "model": "nmt",
  "translatedText": ""
 },
 {
  "input": "We have this known transformation, given by 00:11:02,780 --> 00:11:07,580 157 158  vector, what happens to the volume of this parallelepiped after the transformation?",
  "model": "nmt",
  "translatedText": ""
 },
 {
  "input": "How can you compute that new volume?",
  "model": "nmt",
  "translatedText": ""
 },
 {
  "input": "Really, pause and take a moment to think through 00:11:32,200 --> 00:11:37,330 164 165  some dude on YouTube walk through the reasoning again.",
  "model": "nmt",
  "translatedText": ""
 }
]