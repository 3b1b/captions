[
 {
  "input": "In a previous video I've talked about linear systems of equations, and I sort of brushed aside the discussion of actually computing solutions to these systems.",
  "translatedText": "이전 비디오에서 나는 선형 방정식 시스템에 대해 이야기했으며 이러한 시스템에 대한 실제로 컴퓨팅 솔루션에 대한 논의는 무시했습니다. ",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 11.2,
  "end": 19.14
 },
 {
  "input": "And while it's true that number crunching is typically something we leave to the computers, digging into some of these computational methods is a good litmus test for whether or not you actually understand what's going on, since that's really where the rubber meets the road.",
  "translatedText": "그리고 숫자 분석이 일반적으로 컴퓨터에 맡기는 것이 사실이지만, 이러한 계산 방법 중 일부를 파헤치는 것은 실제로 무슨 일이 일어나고 있는지 이해하고 있는지 여부에 대한 좋은 리트머스 테스트입니다. ",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 19.7,
  "end": 31.52
 },
 {
  "input": "Here I want to describe the geometry behind a certain method for computing solutions to these systems, known as Cramer's rule.",
  "translatedText": "여기서는 Cramer의 법칙으로 알려진 이러한 시스템에 대한 컴퓨팅 솔루션을 위한 특정 방법 뒤에 있는 기하학을 설명하고 싶습니다. ",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 32.12,
  "end": 38.88
 },
 {
  "input": "The relevant background here is understanding determinants, a little bit of dot products, and of course linear systems of equations, so be sure to watch the relevant videos on those topics if you're unfamiliar or rusty.",
  "translatedText": "여기에 필요한 관련 배경 지식은 행렬식, 내적 및 방정식의 선형 시스템에 대한 이해이므로 익숙하지 않거나 녹슬지 않은 경우 해당 주제에 대한 관련 비디오를 시청하십시오. ",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 39.68,
  "end": 50.42
 },
 {
  "input": "But first",
  "translatedText": "하지만 먼저! ",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 51.02,
  "end": 51.44
 },
 {
  "input": "I should say up front that this Cramer's rule is not actually the best way for computing solutions to linear systems of equations,",
  "translatedText": "나는 Cramer의 법칙이 선형 방정식 시스템의 해를 계산하는 최선의 방법이 아니라는 점을 미리 말해야 합니다. ",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 51.44,
  "end": 57.26
 },
 {
  "input": "Gaussian elimination for example will always be faster.",
  "translatedText": "예를 들어 가우스 소거법은 항상 더 빠릅니다. ",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 58.14,
  "end": 61.26
 },
 {
  "input": "So why learn it?",
  "translatedText": "그렇다면 왜 배워야 할까요? ",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 61.98,
  "end": 63.52
 },
 {
  "input": "Well think of it as a sort of cultural excursion. It's a helpful exercise in deepening your knowledge of the theory behind these systems.",
  "translatedText": "일종의 문화탐방이라고 생각하시면 됩니다. 이는 이러한 시스템 뒤에 있는 이론에 대한 지식을 심화하는 데 도움이 되는 연습입니다. ",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 63.78,
  "end": 70.46
 },
 {
  "input": "Wrapping your mind around this concept is going to help consolidate ideas from linear algebra, like the determinant and linear systems, by seeing how they relate to each other.",
  "translatedText": "이 개념을 염두에 두는 것은 행렬식 및 선형 시스템과 같은 선형 대수학의 아이디어가 서로 어떻게 연관되어 있는지 확인함으로써 아이디어를 통합하는 데 도움이 될 것입니다. ",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 71.04,
  "end": 79.62
 },
 {
  "input": "Also from a purely artistic standpoint the ultimate result here is just really pretty to think about, way more so than Gaussian elimination.",
  "translatedText": "또한 순전히 예술적인 관점에서 볼 때 여기서의 최종 결과는 가우스 제거보다 훨씬 더 생각하기 정말 아름답습니다. 좋습니다. ",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 80.1,
  "end": 86.88
 },
 {
  "input": "Alright so the setup here will be some linear system of equations, say with two unknowns x and y and two equations.",
  "translatedText": "여기서 설정은 두 개의 미지수 x와 y와 두 개의 방정식을 사용하는 선형 방정식 시스템이 됩니다. ",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 88.68,
  "end": 95.62
 },
 {
  "input": "In principle everything we're talking about will also work for systems with larger number of unknowns and the same number of equations,",
  "translatedText": "원칙적으로 우리가 말하는 모든 것은 더 많은 수의 미지수와 동일한 수의 방정식을 사용하는 시스템에서 작동합니다. ",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 96.3,
  "end": 101.94
 },
 {
  "input": "but for simplicity a smaller example is just nicer to hold in our heads.",
  "translatedText": "그러나 단순함을 위해 더 작은 예를 머릿속에 담아 두는 것이 더 좋습니다. ",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 102.44,
  "end": 105.58
 },
 {
  "input": "So as I talked about in a previous video you can think of this setup geometrically as a certain known matrix transforming an unknown vector x y where you know what the output is going to be, in this case negative 4 negative 2.",
  "translatedText": "이전 비디오에서 제가 이야기한 것처럼 이 설정은 기하학적으로 알 수 없는 벡터 [x; y], 여기서 출력이 어떻게 될지 알 수 있습니다. 이 경우에는 [-4; -2]. ",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 106.32,
  "end": 120.04
 },
 {
  "input": "Remember the columns of this matrix are telling you how that matrix acts as a transform, each one telling you where the basis vectors of the input space land.",
  "translatedText": "이 행렬의 열은 해당 행렬이 어떻게 변환으로 작동하는지 알려주며, 각 열은 입력 공간의 기본 벡터가 어디에 있는지 알려줍니다. ",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 120.8,
  "end": 130.08
 },
 {
  "input": "So what we have is a sort of puzzle, which input vector x y is going to land on this output negative",
  "translatedText": "그래서 우리가 가지고 있는 것은 일종의 퍼즐입니다. 어떤 입력 벡터 x, y가 이 출력(-4, -2)에 도달하게 될까요? 여기서 우리의 작은 퍼즐에 대해 생각하는 한 가지 방법은 주어진 출력 벡터가 행렬 열의 선형 조합, 즉 i-hat이 착지하는 벡터의 x 배 + j-hat이 착지하는 벡터의 y배라는 것을 아는 것입니다. ",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 130.86,
  "end": 137.6
 },
 {
  "input": "4 negative 2. One way to think about our little puzzle here is that we know the given output vector is some linear combination of the columns of the matrix x times the",
  "translatedText": "여기에서 얻을 수 있는 답변 유형은 변환이 모든 공간을 더 낮은 차원으로 압축하는지 여부에 따라 달라질 수 있다는 점을 기억하십시오. ",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 137.6,
  "end": 148.4
 },
 {
  "input": "vector where i hat lands plus y times the vector where j",
  "translatedText": "즉, 행렬식이 0인 경우입니다. ",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 148.4,
  "end": 151.22
 },
 {
  "input": "hat lands, but what we want is to figure out what exactly that linear combination should be.",
  "translatedText": "이 경우 주어진 출력에 입력이 전혀 포함되지 않거나 해당 출력에 전체 입력이 포함됩니다. ",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 151.22,
  "end": 156.22
 },
 {
  "input": "Remember the type of answer you get here can depend on whether or not the transformation squishes all of space into a lower dimension, that is if it has a zero determinant. In that case either none of the inputs l",
  "translatedText": "하지만 이 비디오에서는 0이 아닌 행렬식의 경우로 뷰를 제한하겠습니다. 즉, 이 변환의 출력이 여전히 시작된 전체 차원 공간에 걸쳐 있음을 의미합니다. 모든 입력은 단 하나의 출력에 도달하고 모든 출력에는 단 하나의 입력이 있습니다. ",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 157.24,
  "end": 168.94
 },
 {
  "input": "and on our given output, or there's a whole bunch of inputs landing on that output. But for this video we'll limit our view to the case of a non-zero determinant, meaning the outputs of this transformation still span the full in-dimensional space that it started",
  "translatedText": "퍼즐에 대해 생각하는 한 가지 방법은 주어진 출력 벡터가 행렬 열의 선형 조합이라는 것을 아는 것입니다. x*(i-hat이 착지하는 벡터) + y*(j-hat이 착지하는 벡터), 그러나 우리는 정확히 x와 y가 무엇인지 계산하려고 합니다. ",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 168.94,
  "end": 186.72
 },
 {
  "input": "in. Every input lands on one and only one output, and every output has one and only one input. As a first pass let me show you an idea that's wrong but in the right direction.",
  "translatedText": "첫 번째 단계로, 잘못되었지만 올바른 방향으로 나아가는 아이디어를 보여드리겠습니다. ",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 186.72,
  "end": 198.16
 },
 {
  "input": "The x coordinate of this mystery input vector is what you get by taking its dot product with the first basis vector 1 0.",
  "translatedText": "이 미스터리 입력 벡터의 x 좌표는 첫 번째 기본 벡터 [1; 0]. ",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 198.8,
  "end": 205.44
 },
 {
  "input": "Likewise the y coordinate is what you get by dotting it with the second basis vector 0 1.",
  "translatedText": "마찬가지로 y 좌표는 두 번째 기본 벡터인 0, 1로 점을 찍어서 얻는 것입니다. ",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 206.16,
  "end": 211.4
 },
 {
  "input": "So maybe you hope that after the transformation the dot products with the transformed version of the mystery vector with the transformed version of the basis vectors will also be these coordinates x and y.",
  "translatedText": "따라서 변환 후에 변환된 버전의 미스터리 벡터와 변환된 버전의 내적이 x 및 y 좌표가 되기를 바랄 수도 있습니다. ",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 211.9,
  "end": 223.24
 },
 {
  "input": "That'd be fantastic because we know what the transformed version of each of those vectors are.",
  "translatedText": "우리는 각 벡터의 변환된 버전이 무엇인지 알고 있기 때문에 정말 환상적일 것입니다. ",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 223.94,
  "end": 228.74
 },
 {
  "input": "There's just one problem with it, it's not at all true.",
  "translatedText": "다만 한 가지 문제가 있는데, 전혀 사실이 아닙니다. ",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 231.18,
  "end": 234.2
 },
 {
  "input": "For most linear transformations the dot product before and after the transformation will look very different.",
  "translatedText": "대부분의 선형 변환의 경우 변환 전후의 내적은 매우 다르게 보입니다. ",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 234.64,
  "end": 240.24
 },
 {
  "input": "For example you could have two vectors generally pointing in the same direction with a positive dot product which get pulled apart from each other during the transformation in such a way that they have a negative dot product.",
  "translatedText": "예를 들어, 일반적으로 양의 내적을 사용하여 동일한 방향을 가리키는 두 개의 벡터가 있을 수 있습니다. 이 벡터는 변환 중에 서로 떨어져서 결국 음의 내적을 갖게 됩니다. ",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 240.8,
  "end": 251.52
 },
 {
  "input": "Likewise things that start off perpendicular with dot product 0, like the two basis vectors, quite often don't stay perpendicular to each other after the transformation, that is they don't preserve that 0 dot product.",
  "translatedText": "마찬가지로, 두 개의 기본 벡터처럼 내적 0과 수직으로 시작하는 것들은 변환 후에 서로 수직을 유지하지 않는 경우가 많습니다. 즉, 0 내적을 유지하지 않습니다. ",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 252.22,
  "end": 263.48
 },
 {
  "input": "And looking at the example I just showed dot products certainly aren't preserved,",
  "translatedText": "우리가 본 예에서 내적은 확실히 보존되지 않습니다. ",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 264.1,
  "end": 267.16
 },
 {
  "input": "they tend to get bigger since most vectors are getting stretched",
  "translatedText": "대부분의 벡터가 늘어나기 때문에 벡터가 커지는 경향이 있습니다. ",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 267.5,
  "end": 269.94
 },
 {
  "input": "out. In fact, worthwhile side note here, transformations which do preserve dot products are special enough to have their own name, orthonormal transformations.",
  "translatedText": "실제로 내적을 보존하는 변환은 직교 변환이라는 고유한 이름을 가질 만큼 특별합니다. ",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 269.94,
  "end": 279.1
 },
 {
  "input": "These are the ones that leave all of the basis vectors perpendicular to each other and still with unit lengths.",
  "translatedText": "이는 모든 기본 벡터를 단위 길이로 서로 수직으로 유지하는 것입니다. ",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 279.72,
  "end": 284.66
 },
 {
  "input": "You often think of these as the rotation matrices,",
  "translatedText": "흔히 이것을 회전 행렬이라고 생각합니다. ",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 285.74,
  "end": 287.88
 },
 {
  "input": "they correspond to rigid motion with no stretching or squishing or morphing.",
  "translatedText": "이는 늘어나거나 찌그러지거나 변형되지 않는 강체 모션에 해당합니다. ",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 288.42,
  "end": 292.2
 },
 {
  "input": "Solving a linear system with an orthonormal matrix is actually super easy. Because dot products are preserved, taking the dot product between the output vector and all the columns of your matrix will be the same as taking the dot product between the mystery input vector and all of the basis vectors, which is the same as just finding the coordinates of that mystery input.",
  "translatedText": "직교 행렬을 사용하여 선형 시스템을 푸는 것은 실제로 매우 쉽습니다. 내적이 보존되기 때문에 출력 벡터와 행렬의 모든 열 사이에서 내적을 구하는 것은 미스터리 입력 벡터와 모든 기저 벡터 사이에서 내적을 구하는 것과 동일합니다. 그 미스터리 입력의 좌표. ",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 293.0,
  "end": 312.98
 },
 {
  "input": "So in that very special case, x would be the dot product of the first column with the output vector, and y would be the dot product of the second column with the output vector.",
  "translatedText": "따라서 아주 특별한 경우에 x는 출력 벡터와 첫 번째 열의 내적이고, y는 출력 벡터와 두 번째 열의 내적입니다. ",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 313.68,
  "end": 323.76
 },
 {
  "input": "Why am I bringing this up when this idea breaks down for almost all linear systems? Well, it points us in a direction of something to look for. Is there an alternate geometric understanding for the coordinates of our input vector that remains unchanged after the transformation?",
  "translatedText": "이 아이디어가 거의 모든 선형 시스템에 적용되지 않는데 왜 이것을 언급하는 걸까요? 글쎄요, 그것은 우리가 찾아야 할 것의 방향을 알려줍니다. 변환 후에도 변경되지 않은 입력 벡터의 좌표에 대한 대체 기하학적 이해가 있습니까? ",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 326.82,
  "end": 341.66
 },
 {
  "input": "If your mind has been mulling over determinants, you might think of the following clever idea. Take the parallelogram defined by the first basis vector i-hat and the mystery input vector xy.",
  "translatedText": "당신의 마음이 행렬식에 대해 고민하고 있다면 다음과 같은 영리한 아이디어를 생각할 수 있습니다. 첫 번째 기본 벡터 i-hat과 미스터리 입력 벡터 xy로 정의된 평행사변형을 사용합니다. ",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 342.36,
  "end": 353.76
 },
 {
  "input": "The area of this parallelogram is the base, 1, times the height perpendicular to that base, which is the y-coordinate of that input vector.",
  "translatedText": "이 평행사변형의 면적은 밑변에 수직인 높이(해당 입력 벡터의 y 좌표)에 밑변 1을 곱한 값입니다. ",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 354.44,
  "end": 362.96
 },
 {
  "input": "So the area of that parallelogram is a sort of screwy roundabout way to describe the vector's y-coordinate. It's a wacky way to talk about coordinates, but run with me.",
  "translatedText": "따라서 평행사변형의 영역은 벡터의 y 좌표를 설명하는 일종의 우회 방법입니다. 좌표에 관해 이야기하는 엉뚱한 방법이지만 저와 함께 달려보세요. ",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 363.68,
  "end": 373.14
 },
 {
  "input": "And actually, to be a little more accurate, you should think of this as the signed area of that parallelogram, in the sense described in the determinant video.",
  "translatedText": "그리고 실제로 좀 더 정확하게 말하자면, 이것을 행렬식 비디오에서 설명한 의미에서 평행사변형의 부호 있는 영역으로 생각해야 합니다. ",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 373.7,
  "end": 381.64
 },
 {
  "input": "That way, a vector with a negative y-coordinate would correspond to a negative area for this parallelo",
  "translatedText": "그런 식으로 음의 y 좌표를 가진 벡터는 이 평행사변형의 음의 영역에 해당합니다. ",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 382.2,
  "end": 388.58
 },
 {
  "input": "gram, at least if you think of i-hat as in some sense being the first out of these two vecto",
  "translatedText": "적어도 i-hat이 평행사변형을 정의하는 이 두 벡터 중 첫 번째 벡터라고 생각한다면 말이죠. 그리고 대칭적으로 미스터리 입력 벡터와 두 번째 기저 j-hat에 걸쳐 있는 평행사변형을 보면 해당 영역은 해당 미스터리 벡터의 x 좌표가 됩니다. ",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 388.96,
  "end": 392.96
 },
 {
  "input": "rs defining the parallelogram. And symmetrically, if you look at the parallelogram spanned by our mystery input",
  "translatedText": "다시 말하지만, 이는 x 좌표를 나타내는 이상한 방법이지만 잠시 후에 이것이 우리에게 무엇을 가져다 주는지 알게 될 것입니다. ",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 392.96,
  "end": 398.78
 },
 {
  "input": "vector and the second basis, j-hat, its area is going to be the x-coordinate of that mystery vector. Again, it's a strange way to represent the x-coordinate, but see what it buys us in a moment.",
  "translatedText": "이것이 어떻게 일반화될 수 있는지 확실히 하기 위해 3차원으로 살펴보겠습니다. 일반적으로 벡터의 좌표 중 하나(예: z 좌표)에 대해 생각할 수 있는 방식은 k-hat이라고 불리는 세 번째 표준 기저 벡터와 내적을 취하는 것입니다. ",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 398.78,
  "end": 410.08
 },
 {
  "input": "And just to make sure it's clear how this might generalize,",
  "translatedText": "그러나 대체 기하학적 해석은 다른 두 기본 벡터 i-hat과 j-hat을 사용하여 생성하는 평행육면체를 고려하는 것입니다. ",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 410.68,
  "end": 412.64
 },
 {
  "input": "let's look in three dimensions. Ordinarily, the way you might think about one of a vector's c",
  "translatedText": "i-hat과 j-hat에 걸쳐 있는 면적 1이 있는 정사각형을 이 전체 모양의 기본으로 생각하면 그 부피는 벡터의 세 번째 좌표인 높이와 같습니다. ",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 412.74,
  "end": 417.14
 },
 {
  "input": "oordinates, say its z-coordinate, would be to take its dot product with the third standard basis vector, often called k-hat. But an alternate geometric interpretation would be to consider the parallelepiped that it creates",
  "translatedText": "마찬가지로, 벡터의 다른 좌표에 대해 생각하는 이상한 방법은 벡터와 찾고 있는 방향에 해당하는 벡터 이외의 모든 기본 벡터를 사용하여 평행육면체를 형성하는 것입니다. 그러면 이것의 부피가 좌표를 제공합니다. ",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 417.14,
  "end": 429.72
 },
 {
  "input": "with the other two basis vectors, i-hat and j-hat. If you think of the square with area 1 spanned by i-hat and j-hat as the base of this whole shape, then its volume is the same as its height, which is th",
  "translatedText": "또는 오히려, 우리는 오른손 법칙을 사용하여 행렬식 비디오에서 설명한 의미에서 평행육면체의 부호 있는 부피에 대해 이야기해야 합니다. 따라서 이 세 벡터를 나열하는 순서가 중요합니다. ",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 429.72,
  "end": 442.38
 },
 {
  "input": "e third coordinate of our vector. And likewise, the",
  "translatedText": "그렇게 하면 음의 좌표가 여전히 의미가 있습니다. ",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 442.38,
  "end": 445.24
 },
 {
  "input": "wacky way to think about the other coordinates of the vecto",
  "translatedText": "좋아요, 그럼 왜 좌표를 이렇게 면적과 부피로 생각할까요? ",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 445.24,
  "end": 447.5
 },
 {
  "input": "r would be to form a parallelepiped using the",
  "translatedText": "음, 일종의 행렬 변환을 적용하면 평행사변형의 영역이 동일하게 유지되지 않고 크기가 커지거나 작아질 수 있습니다. ",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 447.5,
  "end": 450.0
 },
 {
  "input": "vector and then all of the basis vectors other than the one correspon",
  "translatedText": "그러나 이것이 행렬식의 핵심 아이디어입니다. ",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 450.0,
  "end": 453.96
 },
 {
  "input": "ding to the direction you're looking for. Then the volume of this gives you the coordinate.",
  "translatedText": "모든 영역은 동일한 양, 즉 변환 행렬의 행렬식으로 확장됩니다. ",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 453.96,
  "end": 457.9
 },
 {
  "input": "Or rather, we should be talking about the signed volume of parallelepiped in the sense described in the determinant video using the right-hand rule. So the order in which you list these three vectors matters. That way, negative coordinates still make s",
  "translatedText": "예를 들어, 행렬의 첫 번째 열인 첫 번째 기저 벡터가 도달하는 벡터와 xy의 변환된 버전에 걸쳐 있는 평행사변형을 보면 해당 영역은 얼마입니까? ",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 458.44,
  "end": 470.72
 },
 {
  "input": "ense. Okay, so why think of coordinates as areas and volumes like this? Well, as you apply some sort of matrix transformation,",
  "translatedText": "음, 이것은 우리가 이전에 보았던 평행사변형의 변환된 버전입니다. 이 평행사변형의 면적은 미스터리 입력 벡터의 y 좌표였습니다. ",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 470.72,
  "end": 478.28
 },
 {
  "input": "the areas of these parallelograms, well, they don't stay t",
  "translatedText": "따라서 그 면적은 y 좌표를 곱한 변환의 결정 요인이 될 것입니다. ",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 478.96,
  "end": 481.96
 },
 {
  "input": "he same, they might get scaled up or down. But, and this is the key idea of determinants, all of the areas get scaled by the same amount, namely the determinant of our transformation ma",
  "translatedText": "따라서 미스터리 입력 벡터의 y 좌표는 행렬의 첫 번째 열과 출력 벡터에 걸쳐 있는 이 평행사변형의 면적을 전체 변환의 행렬식으로 나눈 값입니다. ",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 481.96,
  "end": 492.16
 },
 {
  "input": "trix. For example, if you look at the par",
  "translatedText": "그리고 이 지역은 어떻게 얻나요? ",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 492.16,
  "end": 494.88
 },
 {
  "input": "allelogram spanned by the vector where your first basis vector lands, which is the first c",
  "translatedText": "글쎄요, 우리는 신비한 입력 벡터가 도달하는 좌표를 알고 있습니다. 이것이 선형 방정식 시스템의 핵심입니다. ",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 494.88,
  "end": 499.88
 },
 {
  "input": "olumn of the matrix, and the transformed version of xy, what is its area? Well, this is the transformed version of the parallelogram we were looking at earlier, the one whose area was the y-coordinate of the mystery input ve",
  "translatedText": "따라서 여러분이 할 수 있는 일은 첫 번째 열이 행렬의 것과 동일하지만 두 번째 열이 출력 벡터인 새 행렬을 만든 다음 행렬식을 취하는 것입니다. ",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 499.88,
  "end": 512.88
 },
 {
  "input": "ctor. So its area is just going to be the determinant of the transformation multiplied by that y-coordinate. So that means we can solve for y",
  "translatedText": "따라서 변환 출력의 데이터, 즉 행렬의 열과 출력 벡터의 좌표를 사용하여 미스터리 입력 벡터의 y 좌표를 복구할 수 있으며 이는 시스템 해결의 절반입니다. ",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 512.88,
  "end": 522.1
 },
 {
  "input": "by taking the area",
  "translatedText": "마찬가지로 동일한 아이디어로 x 좌표를 얻을 수 있습니다. ",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 522.1,
  "end": 523.5
 },
 {
  "input": "of this new parallelogram in the output space divided by the determinant of the full transformation. And how do you get that area? Well, we know the coordinates for where the mystery input vector lands, that",
  "translatedText": "이전에 정의한 평행사변형은 해당 벡터와 j-hat에 걸쳐 있는 미스터리 입력 벡터의 x 좌표를 인코딩합니다. ",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 523.5,
  "end": 537.14
 },
 {
  "input": "'s the whole point of a linear system of equations. So what you might do is create a new matrix whose first column is the same as that of our matrix, b",
  "translatedText": "이 녀석의 변환된 버전은 출력 벡터와 행렬의 두 번째 열에 걸쳐 있으며 해당 영역에는 해당 행렬의 행렬식이 곱해집니다. ",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 537.14,
  "end": 545.04
 },
 {
  "input": "ut whose second column is the output vector, and then you take its determinant. So look at that, just using data from the output of the transformation,",
  "translatedText": "따라서 x를 풀려면 이 새로운 영역을 전체 변환의 행렬식으로 나누어야 합니다. ",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 545.06,
  "end": 555.14
 },
 {
  "input": "namely the columns of the matrix and the coordinates of our output vector, we can recover the y-coordinate of the mystery input vector, which is halfway",
  "translatedText": "이전에 했던 것과 유사하게 첫 번째 열이 출력 벡터이고 두 번째 열이 원래 행렬과 동일한 새 행렬을 만들어 출력 평행사변형의 면적을 계산할 수 있습니다. ",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 555.6,
  "end": 563.42
 },
 {
  "input": "to solving the system. Likewise, the same idea can give us the x-coordinate. Look at the parallelogram we defined earlier, which encodes the x-coordinate of the mystery input vector s",
  "translatedText": "따라서 다시 출력 공간의 데이터, 즉 원래 선형 시스템에서 볼 수 있는 숫자를 사용하여 x가 무엇인지 풀 수 있습니다. ",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 563.42,
  "end": 573.42
 },
 {
  "input": "panned by that vector and j-hat. The transformed version of this guy is spanned by the output vector and the second column of the matrix, and its area will hav",
  "translatedText": "선형 방정식 시스템의 해를 구하는 이 공식은 Cramer의 법칙으로 알려져 있습니다. ",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 573.42,
  "end": 584.48
 },
 {
  "input": "e been multiplied by",
  "translatedText": "여기, 우리 자신의 정신 상태를 확인하기 위해 여기에 숫자를 연결하세요. ",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 584.48,
  "end": 585.34
 },
 {
  "input": "the determinant of that matrix. So to solve for x, you can take this new area divided by the determinant of the full transformation.",
  "translatedText": "위쪽의 변경된 행렬의 행렬식은 4 더하기 2(6)이고 아래쪽 행렬식은 2이므로 x 좌표는 3이 되어야 합니다. ",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 585.34,
  "end": 592.94
 },
 {
  "input": "And similar to what we did before, you can compute the area of that output parallelogram by creating a new matrix whose first column is the output vector and whose second column is th",
  "translatedText": "실제로 우리가 시작한 입력 벡터를 되돌아보면 x 좌표는 3입니다. ",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 593.86,
  "end": 604.34
 },
 {
  "input": "e same as the original matrix. So again, just using data fro",
  "translatedText": "마찬가지로 Cramer의 법칙에 따르면 y 좌표는 4를 2로 나누어야 합니다. 즉 2가 바로 우리가 시작했던 입력 벡터의 y 좌표입니다. ",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 604.34,
  "end": 607.72
 },
 {
  "input": "m the output space, the numbers we see in our original linear system, we can solve for what x must be. This formula for finding the solutions to a linear system of equations is known as Cramer's rule.",
  "translatedText": "3차원 이상의 경우도 비슷하니, 잠시 멈춰서 스스로 생각해 보시길 적극 권해 드립니다. ",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 607.72,
  "end": 618.42
 },
 {
  "input": "Here, just to sanity check ourselves, plug in some numb",
  "translatedText": "여기서 약간의 추진력을 드리겠습니다. ",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 619.12,
  "end": 621.58
 },
 {
  "input": "ers here. The determinant of that top altered matrix is 4 plus 2, which is 6, and the bottom determinant is 2, so the x-coordinate should be 3. And indeed, looking back at the input vector",
  "translatedText": "우리가 가지고 있는 것은 일부 3x3 행렬로 제공되는 알려진 변환과 선형 시스템의 오른쪽으로 제공되는 알려진 출력 벡터이며, 해당 출력에 어떤 입력이 있는지 알고 싶습니다. ",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 621.58,
  "end": 633.26
 },
 {
  "input": "we started with, the x-coordinate is 3. Likewise, Cramer's rule suggests that the y-coordinate should be 4 divided by 2, or 2, and that is in fact the y-coordinate of",
  "translatedText": "예를 들어 입력 벡터의 z 좌표를 i-hat, j-hat 및 미스터리 입력 벡터에 걸쳐 있는 이 평행육면체의 부피로 생각하면 변환 후 이 평행육면체의 부피는 어떻게 됩니까? ",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 633.26,
  "end": 644.64
 },
 {
  "input": "the input vector we were starting with. The case with three dimensions or more is similar, and I highly recommend you take a m",
  "translatedText": "새로운 볼륨을 어떻게 계산할 수 있나요? ",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 644.64,
  "end": 651.66
 },
 {
  "input": "oment to pause and think through it yourself. Here, I'll give you a little bit of momentum. What we have is a known transformation given by some 3x3 matrix and a known output vector given by the right side of our linear system, a",
  "translatedText": "정말로, 잠시 멈추고 이것을 더 높은 차원으로 일반화하는 세부 사항을 생각해 보세요. 더 큰 선형 시스템에 대한 해의 각 좌표에 대한 표현식을 찾습니다. ",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 651.66,
  "end": 664.68
 },
 {
  "input": "nd we want to know what input lands on that output. And if you think of, say, the z-coordinate of that input vector as the volume of that special parallelepiped we were looking at earlier, spanned by i-hat, j-hat, and the mystery input vector, what happens to that volume after the transformation? And what are the various ways you can compute that volume? Really, pause and think through the details of generalizing this to higher dimensions, finding an expression for each coordinate of the solution to a larger linear system. Thinking through more general cases like this and convincing yourself that it works and why it works is where all the learning really happens, much more so than listening to some dude on YouTube walk you through the same reasoning again.",
  "translatedText": "이와 같은 보다 일반적인 사례를 생각하고 그것이 작동하고 왜 작동하는지 스스로 확신하는 것이 모든 학습이 실제로 일어나는 곳입니다. YouTube에서 누군가의 말을 듣는 것보다 훨씬 더 동일한 추론을 다시 안내합니다. ",
  "model": "google_nmt",
  "n_reviews": 0,
  "start": 665.1,
  "end": 708.5
 }
]